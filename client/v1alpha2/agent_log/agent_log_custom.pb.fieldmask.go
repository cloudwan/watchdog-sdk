// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/agent_log_custom.proto
// DO NOT EDIT!!!

package agent_log_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

type ReportAgentLogRequest_FieldMask struct {
	Paths []ReportAgentLogRequest_FieldPath
}

func FullReportAgentLogRequest_FieldMask() *ReportAgentLogRequest_FieldMask {
	res := &ReportAgentLogRequest_FieldMask{}
	res.Paths = append(res.Paths, &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorLogEntries})
	return res
}

func (fieldMask *ReportAgentLogRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ReportAgentLogRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ReportAgentLogRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseReportAgentLogRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ReportAgentLogRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ReportAgentLogRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ReportAgentLogRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseReportAgentLogRequest_FieldPath(raw)
	})
}

func (fieldMask *ReportAgentLogRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ReportAgentLogRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ReportAgentLogRequest_FieldMask) Subtract(other *ReportAgentLogRequest_FieldMask) *ReportAgentLogRequest_FieldMask {
	result := &ReportAgentLogRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ReportAgentLogRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportAgentLogRequest_FieldPathSelectorLogEntries: &LogEntry_FieldMask{},
	}
	mySubMasks := map[ReportAgentLogRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportAgentLogRequest_FieldPathSelectorLogEntries: &LogEntry_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ReportAgentLogRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ReportAgentLogRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ReportAgentLogRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ReportAgentLogRequest_FieldPathSelectorLogEntries:
						mySubMasks[ReportAgentLogRequest_FieldPathSelectorLogEntries] = FullLogEntry_FieldMask()
					}
				} else if tp, ok := path.(*ReportAgentLogRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ReportAgentLogRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ReportAgentLogRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ReportAgentLogRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ReportAgentLogRequest_FieldMask) FilterInputFields() *ReportAgentLogRequest_FieldMask {
	result := &ReportAgentLogRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ReportAgentLogRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ReportAgentLogRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ReportAgentLogRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseReportAgentLogRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ReportAgentLogRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ReportAgentLogRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportAgentLogRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ReportAgentLogRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ReportAgentLogRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportAgentLogRequest_FieldMask) AppendPath(path ReportAgentLogRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ReportAgentLogRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ReportAgentLogRequest_FieldPath))
}

func (fieldMask *ReportAgentLogRequest_FieldMask) GetPaths() []ReportAgentLogRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ReportAgentLogRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ReportAgentLogRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseReportAgentLogRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ReportAgentLogRequest_FieldMask) Set(target, source *ReportAgentLogRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ReportAgentLogRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ReportAgentLogRequest), source.(*ReportAgentLogRequest))
}

func (fieldMask *ReportAgentLogRequest_FieldMask) Project(source *ReportAgentLogRequest) *ReportAgentLogRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ReportAgentLogRequest{}
	logEntriesMask := &LogEntry_FieldMask{}
	wholeLogEntriesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ReportAgentLogRequest_FieldTerminalPath:
			switch tp.selector {
			case ReportAgentLogRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ReportAgentLogRequest_FieldPathSelectorLogEntries:
				result.LogEntries = source.LogEntries
				wholeLogEntriesAccepted = true
			}
		case *ReportAgentLogRequest_FieldSubPath:
			switch tp.selector {
			case ReportAgentLogRequest_FieldPathSelectorLogEntries:
				logEntriesMask.AppendPath(tp.subPath.(LogEntry_FieldPath))
			}
		}
	}
	if wholeLogEntriesAccepted == false && len(logEntriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogEntries() {
			result.LogEntries = append(result.LogEntries, logEntriesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ReportAgentLogRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ReportAgentLogRequest))
}

func (fieldMask *ReportAgentLogRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetAgentLogsRequest_FieldMask struct {
	Paths []GetAgentLogsRequest_FieldPath
}

func FullGetAgentLogsRequest_FieldMask() *GetAgentLogsRequest_FieldMask {
	res := &GetAgentLogsRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorLogLevel})
	res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageToken})
	return res
}

func (fieldMask *GetAgentLogsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAgentLogsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAgentLogsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAgentLogsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAgentLogsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAgentLogsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAgentLogsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAgentLogsRequest_FieldPath(raw)
	})
}

func (fieldMask *GetAgentLogsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetAgentLogsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAgentLogsRequest_FieldMask) Subtract(other *GetAgentLogsRequest_FieldMask) *GetAgentLogsRequest_FieldMask {
	result := &GetAgentLogsRequest_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[GetAgentLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}
	mySubMasks := map[GetAgentLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAgentLogsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetAgentLogsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetAgentLogsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case GetAgentLogsRequest_FieldPathSelectorInterval:
						mySubMasks[GetAgentLogsRequest_FieldPathSelectorInterval] = common.FullTimeInterval_FieldMask()
					}
				} else if tp, ok := path.(*GetAgentLogsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetAgentLogsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAgentLogsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAgentLogsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAgentLogsRequest_FieldMask) FilterInputFields() *GetAgentLogsRequest_FieldMask {
	result := &GetAgentLogsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAgentLogsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAgentLogsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAgentLogsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAgentLogsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAgentLogsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAgentLogsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAgentLogsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAgentLogsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsRequest_FieldMask) AppendPath(path GetAgentLogsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAgentLogsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAgentLogsRequest_FieldPath))
}

func (fieldMask *GetAgentLogsRequest_FieldMask) GetPaths() []GetAgentLogsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAgentLogsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAgentLogsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAgentLogsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAgentLogsRequest_FieldMask) Set(target, source *GetAgentLogsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAgentLogsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAgentLogsRequest), source.(*GetAgentLogsRequest))
}

func (fieldMask *GetAgentLogsRequest_FieldMask) Project(source *GetAgentLogsRequest) *GetAgentLogsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAgentLogsRequest{}
	intervalMask := &common.TimeInterval_FieldMask{}
	wholeIntervalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAgentLogsRequest_FieldTerminalPath:
			switch tp.selector {
			case GetAgentLogsRequest_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case GetAgentLogsRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
				wholeIntervalAccepted = true
			case GetAgentLogsRequest_FieldPathSelectorLogLevel:
				result.LogLevel = source.LogLevel
			case GetAgentLogsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case GetAgentLogsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			}
		case *GetAgentLogsRequest_FieldSubPath:
			switch tp.selector {
			case GetAgentLogsRequest_FieldPathSelectorInterval:
				intervalMask.AppendPath(tp.subPath.(common.TimeInterval_FieldPath))
			}
		}
	}
	if wholeIntervalAccepted == false && len(intervalMask.Paths) > 0 {
		result.Interval = intervalMask.Project(source.GetInterval())
	}
	return result
}

func (fieldMask *GetAgentLogsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAgentLogsRequest))
}

func (fieldMask *GetAgentLogsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetAgentLogsResponse_FieldMask struct {
	Paths []GetAgentLogsResponse_FieldPath
}

func FullGetAgentLogsResponse_FieldMask() *GetAgentLogsResponse_FieldMask {
	res := &GetAgentLogsResponse_FieldMask{}
	res.Paths = append(res.Paths, &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorLogEntries})
	res.Paths = append(res.Paths, &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *GetAgentLogsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAgentLogsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAgentLogsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAgentLogsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAgentLogsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAgentLogsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAgentLogsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAgentLogsResponse_FieldPath(raw)
	})
}

func (fieldMask *GetAgentLogsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *GetAgentLogsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAgentLogsResponse_FieldMask) Subtract(other *GetAgentLogsResponse_FieldMask) *GetAgentLogsResponse_FieldMask {
	result := &GetAgentLogsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[GetAgentLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsResponse_FieldPathSelectorLogEntries: &LogEntry_FieldMask{},
	}
	mySubMasks := map[GetAgentLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsResponse_FieldPathSelectorLogEntries: &LogEntry_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAgentLogsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetAgentLogsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetAgentLogsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case GetAgentLogsResponse_FieldPathSelectorLogEntries:
						mySubMasks[GetAgentLogsResponse_FieldPathSelectorLogEntries] = FullLogEntry_FieldMask()
					}
				} else if tp, ok := path.(*GetAgentLogsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetAgentLogsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAgentLogsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAgentLogsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAgentLogsResponse_FieldMask) FilterInputFields() *GetAgentLogsResponse_FieldMask {
	result := &GetAgentLogsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAgentLogsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAgentLogsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAgentLogsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAgentLogsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAgentLogsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAgentLogsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAgentLogsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAgentLogsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsResponse_FieldMask) AppendPath(path GetAgentLogsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAgentLogsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAgentLogsResponse_FieldPath))
}

func (fieldMask *GetAgentLogsResponse_FieldMask) GetPaths() []GetAgentLogsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAgentLogsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAgentLogsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAgentLogsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAgentLogsResponse_FieldMask) Set(target, source *GetAgentLogsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAgentLogsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAgentLogsResponse), source.(*GetAgentLogsResponse))
}

func (fieldMask *GetAgentLogsResponse_FieldMask) Project(source *GetAgentLogsResponse) *GetAgentLogsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAgentLogsResponse{}
	logEntriesMask := &LogEntry_FieldMask{}
	wholeLogEntriesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAgentLogsResponse_FieldTerminalPath:
			switch tp.selector {
			case GetAgentLogsResponse_FieldPathSelectorLogEntries:
				result.LogEntries = source.LogEntries
				wholeLogEntriesAccepted = true
			case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *GetAgentLogsResponse_FieldSubPath:
			switch tp.selector {
			case GetAgentLogsResponse_FieldPathSelectorLogEntries:
				logEntriesMask.AppendPath(tp.subPath.(LogEntry_FieldPath))
			}
		}
	}
	if wholeLogEntriesAccepted == false && len(logEntriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogEntries() {
			result.LogEntries = append(result.LogEntries, logEntriesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *GetAgentLogsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAgentLogsResponse))
}

func (fieldMask *GetAgentLogsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LogEntry_FieldMask struct {
	Paths []LogEntry_FieldPath
}

func FullLogEntry_FieldMask() *LogEntry_FieldMask {
	res := &LogEntry_FieldMask{}
	res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorTime})
	res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorLevel})
	res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorPayload})
	return res
}

func (fieldMask *LogEntry_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LogEntry_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LogEntry_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLogEntry_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LogEntry_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LogEntry_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LogEntry_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLogEntry_FieldPath(raw)
	})
}

func (fieldMask *LogEntry_FieldMask) ProtoMessage() {}

func (fieldMask *LogEntry_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LogEntry_FieldMask) Subtract(other *LogEntry_FieldMask) *LogEntry_FieldMask {
	result := &LogEntry_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LogEntry_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LogEntry_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LogEntry_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LogEntry_FieldMask) FilterInputFields() *LogEntry_FieldMask {
	result := &LogEntry_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LogEntry_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LogEntry_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LogEntry_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLogEntry_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LogEntry_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LogEntry_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LogEntry_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LogEntry_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LogEntry_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LogEntry_FieldMask) AppendPath(path LogEntry_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LogEntry_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LogEntry_FieldPath))
}

func (fieldMask *LogEntry_FieldMask) GetPaths() []LogEntry_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LogEntry_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LogEntry_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLogEntry_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LogEntry_FieldMask) Set(target, source *LogEntry) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LogEntry_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LogEntry), source.(*LogEntry))
}

func (fieldMask *LogEntry_FieldMask) Project(source *LogEntry) *LogEntry {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LogEntry{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LogEntry_FieldTerminalPath:
			switch tp.selector {
			case LogEntry_FieldPathSelectorTime:
				result.Time = source.Time
			case LogEntry_FieldPathSelectorLevel:
				result.Level = source.Level
			case LogEntry_FieldPathSelectorPayload:
				result.Payload = source.Payload
			}
		}
	}
	return result
}

func (fieldMask *LogEntry_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LogEntry))
}

func (fieldMask *LogEntry_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetAgentLogsResponseStringFormat_FieldMask struct {
	Paths []GetAgentLogsResponseStringFormat_FieldPath
}

func FullGetAgentLogsResponseStringFormat_FieldMask() *GetAgentLogsResponseStringFormat_FieldMask {
	res := &GetAgentLogsResponseStringFormat_FieldMask{}
	res.Paths = append(res.Paths, &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries})
	res.Paths = append(res.Paths, &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAgentLogsResponseStringFormat_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAgentLogsResponseStringFormat_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAgentLogsResponseStringFormat_FieldPath(raw)
	})
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) ProtoMessage() {}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Subtract(other *GetAgentLogsResponseStringFormat_FieldMask) *GetAgentLogsResponseStringFormat_FieldMask {
	result := &GetAgentLogsResponseStringFormat_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[GetAgentLogsResponseStringFormat_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries: &LogEntryStringFormat_FieldMask{},
	}
	mySubMasks := map[GetAgentLogsResponseStringFormat_FieldPathSelector]gotenobject.FieldMask{
		GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries: &LogEntryStringFormat_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAgentLogsResponseStringFormat_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetAgentLogsResponseStringFormat_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetAgentLogsResponseStringFormat_FieldTerminalPath); ok {
					switch tp.selector {
					case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
						mySubMasks[GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries] = FullLogEntryStringFormat_FieldMask()
					}
				} else if tp, ok := path.(*GetAgentLogsResponseStringFormat_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetAgentLogsResponseStringFormat_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAgentLogsResponseStringFormat_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) FilterInputFields() *GetAgentLogsResponseStringFormat_FieldMask {
	result := &GetAgentLogsResponseStringFormat_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAgentLogsResponseStringFormat_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAgentLogsResponseStringFormat_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAgentLogsResponseStringFormat_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAgentLogsResponseStringFormat_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) AppendPath(path GetAgentLogsResponseStringFormat_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAgentLogsResponseStringFormat_FieldPath))
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) GetPaths() []GetAgentLogsResponseStringFormat_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAgentLogsResponseStringFormat_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Set(target, source *GetAgentLogsResponseStringFormat) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAgentLogsResponseStringFormat), source.(*GetAgentLogsResponseStringFormat))
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) Project(source *GetAgentLogsResponseStringFormat) *GetAgentLogsResponseStringFormat {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAgentLogsResponseStringFormat{}
	logEntriesMask := &LogEntryStringFormat_FieldMask{}
	wholeLogEntriesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAgentLogsResponseStringFormat_FieldTerminalPath:
			switch tp.selector {
			case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
				result.LogEntries = source.LogEntries
				wholeLogEntriesAccepted = true
			case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *GetAgentLogsResponseStringFormat_FieldSubPath:
			switch tp.selector {
			case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
				logEntriesMask.AppendPath(tp.subPath.(LogEntryStringFormat_FieldPath))
			}
		}
	}
	if wholeLogEntriesAccepted == false && len(logEntriesMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogEntries() {
			result.LogEntries = append(result.LogEntries, logEntriesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAgentLogsResponseStringFormat))
}

func (fieldMask *GetAgentLogsResponseStringFormat_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LogEntryStringFormat_FieldMask struct {
	Paths []LogEntryStringFormat_FieldPath
}

func FullLogEntryStringFormat_FieldMask() *LogEntryStringFormat_FieldMask {
	res := &LogEntryStringFormat_FieldMask{}
	res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorTime})
	res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorLevel})
	res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorPayload})
	return res
}

func (fieldMask *LogEntryStringFormat_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LogEntryStringFormat_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LogEntryStringFormat_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLogEntryStringFormat_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LogEntryStringFormat_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LogEntryStringFormat_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LogEntryStringFormat_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLogEntryStringFormat_FieldPath(raw)
	})
}

func (fieldMask *LogEntryStringFormat_FieldMask) ProtoMessage() {}

func (fieldMask *LogEntryStringFormat_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LogEntryStringFormat_FieldMask) Subtract(other *LogEntryStringFormat_FieldMask) *LogEntryStringFormat_FieldMask {
	result := &LogEntryStringFormat_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LogEntryStringFormat_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LogEntryStringFormat_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LogEntryStringFormat_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LogEntryStringFormat_FieldMask) FilterInputFields() *LogEntryStringFormat_FieldMask {
	result := &LogEntryStringFormat_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LogEntryStringFormat_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LogEntryStringFormat_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LogEntryStringFormat_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLogEntryStringFormat_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LogEntryStringFormat_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LogEntryStringFormat_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LogEntryStringFormat_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LogEntryStringFormat_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LogEntryStringFormat_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LogEntryStringFormat_FieldMask) AppendPath(path LogEntryStringFormat_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LogEntryStringFormat_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LogEntryStringFormat_FieldPath))
}

func (fieldMask *LogEntryStringFormat_FieldMask) GetPaths() []LogEntryStringFormat_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LogEntryStringFormat_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LogEntryStringFormat_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLogEntryStringFormat_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LogEntryStringFormat_FieldMask) Set(target, source *LogEntryStringFormat) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LogEntryStringFormat_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LogEntryStringFormat), source.(*LogEntryStringFormat))
}

func (fieldMask *LogEntryStringFormat_FieldMask) Project(source *LogEntryStringFormat) *LogEntryStringFormat {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LogEntryStringFormat{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LogEntryStringFormat_FieldTerminalPath:
			switch tp.selector {
			case LogEntryStringFormat_FieldPathSelectorTime:
				result.Time = source.Time
			case LogEntryStringFormat_FieldPathSelectorLevel:
				result.Level = source.Level
			case LogEntryStringFormat_FieldPathSelectorPayload:
				result.Payload = source.Payload
			}
		}
	}
	return result
}

func (fieldMask *LogEntryStringFormat_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LogEntryStringFormat))
}

func (fieldMask *LogEntryStringFormat_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
