// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/agent_log_custom.proto
// DO NOT EDIT!!!

package agent_log_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ReportAgentLogRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ReportAgentLogRequest_FieldPathSelector
	Get(source *ReportAgentLogRequest) []interface{}
	GetSingle(source *ReportAgentLogRequest) (interface{}, bool)
	ClearValue(item *ReportAgentLogRequest)

	// Those methods build corresponding ReportAgentLogRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ReportAgentLogRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ReportAgentLogRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ReportAgentLogRequest_FieldPathArrayItemValue
}

type ReportAgentLogRequest_FieldPathSelector int32

const (
	ReportAgentLogRequest_FieldPathSelectorName       ReportAgentLogRequest_FieldPathSelector = 0
	ReportAgentLogRequest_FieldPathSelectorLogEntries ReportAgentLogRequest_FieldPathSelector = 1
)

func (s ReportAgentLogRequest_FieldPathSelector) String() string {
	switch s {
	case ReportAgentLogRequest_FieldPathSelectorName:
		return "name"
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return "log_entries"
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", s))
	}
}

func BuildReportAgentLogRequest_FieldPath(fp gotenobject.RawFieldPath) (ReportAgentLogRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ReportAgentLogRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorName}, nil
		case "log_entries", "logEntries", "log-entries":
			return &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorLogEntries}, nil
		}
	} else {
		switch fp[0] {
		case "log_entries", "logEntries", "log-entries":
			if subpath, err := BuildLogEntry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ReportAgentLogRequest_FieldSubPath{selector: ReportAgentLogRequest_FieldPathSelectorLogEntries, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ReportAgentLogRequest", fp)
}

func ParseReportAgentLogRequest_FieldPath(rawField string) (ReportAgentLogRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildReportAgentLogRequest_FieldPath(fp)
}

func MustParseReportAgentLogRequest_FieldPath(rawField string) ReportAgentLogRequest_FieldPath {
	fp, err := ParseReportAgentLogRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ReportAgentLogRequest_FieldTerminalPath struct {
	selector ReportAgentLogRequest_FieldPathSelector
}

var _ ReportAgentLogRequest_FieldPath = (*ReportAgentLogRequest_FieldTerminalPath)(nil)

func (fp *ReportAgentLogRequest_FieldTerminalPath) Selector() ReportAgentLogRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ReportAgentLogRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ReportAgentLogRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ReportAgentLogRequest
func (fp *ReportAgentLogRequest_FieldTerminalPath) Get(source *ReportAgentLogRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ReportAgentLogRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ReportAgentLogRequest_FieldPathSelectorLogEntries:
			for _, value := range source.GetLogEntries() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ReportAgentLogRequest))
}

// GetSingle returns value pointed by specific field of from source ReportAgentLogRequest
func (fp *ReportAgentLogRequest_FieldTerminalPath) GetSingle(source *ReportAgentLogRequest) (interface{}, bool) {
	switch fp.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		res := source.GetLogEntries()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
	}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ReportAgentLogRequest))
}

// GetDefault returns a default value of the field type
func (fp *ReportAgentLogRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return ([]*LogEntry)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
	}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) ClearValue(item *ReportAgentLogRequest) {
	if item != nil {
		switch fp.selector {
		case ReportAgentLogRequest_FieldPathSelectorName:
			item.Name = nil
		case ReportAgentLogRequest_FieldPathSelectorLogEntries:
			item.LogEntries = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
		}
	}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ReportAgentLogRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ReportAgentLogRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ReportAgentLogRequest_FieldPathSelectorName
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithIValue(value interface{}) ReportAgentLogRequest_FieldPathValue {
	switch fp.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		return &ReportAgentLogRequest_FieldTerminalPathValue{ReportAgentLogRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return &ReportAgentLogRequest_FieldTerminalPathValue{ReportAgentLogRequest_FieldTerminalPath: *fp, value: value.([]*LogEntry)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
	}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ReportAgentLogRequest_FieldPathArrayOfValues {
	fpaov := &ReportAgentLogRequest_FieldTerminalPathArrayOfValues{ReportAgentLogRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		return &ReportAgentLogRequest_FieldTerminalPathArrayOfValues{ReportAgentLogRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return &ReportAgentLogRequest_FieldTerminalPathArrayOfValues{ReportAgentLogRequest_FieldTerminalPath: *fp, values: values.([][]*LogEntry)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ReportAgentLogRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return &ReportAgentLogRequest_FieldTerminalPathArrayItemValue{ReportAgentLogRequest_FieldTerminalPath: *fp, value: value.(*LogEntry)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fp.selector))
	}
}

func (fp *ReportAgentLogRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ReportAgentLogRequest_FieldSubPath struct {
	selector ReportAgentLogRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ReportAgentLogRequest_FieldPath = (*ReportAgentLogRequest_FieldSubPath)(nil)

func (fps *ReportAgentLogRequest_FieldSubPath) Selector() ReportAgentLogRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ReportAgentLogRequest_FieldSubPath) AsLogEntriesSubPath() (LogEntry_FieldPath, bool) {
	res, ok := fps.subPath.(LogEntry_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ReportAgentLogRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ReportAgentLogRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ReportAgentLogRequest
func (fps *ReportAgentLogRequest_FieldSubPath) Get(source *ReportAgentLogRequest) (values []interface{}) {
	switch fps.selector {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		for _, item := range source.GetLogEntries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fps.selector))
	}
	return
}

func (fps *ReportAgentLogRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ReportAgentLogRequest))
}

// GetSingle returns value of selected field from source ReportAgentLogRequest
func (fps *ReportAgentLogRequest_FieldSubPath) GetSingle(source *ReportAgentLogRequest) (interface{}, bool) {
	switch fps.selector {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		if len(source.GetLogEntries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogEntries()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fps.selector))
	}
}

func (fps *ReportAgentLogRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ReportAgentLogRequest))
}

// GetDefault returns a default value of the field type
func (fps *ReportAgentLogRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ReportAgentLogRequest_FieldSubPath) ClearValue(item *ReportAgentLogRequest) {
	if item != nil {
		switch fps.selector {
		case ReportAgentLogRequest_FieldPathSelectorLogEntries:
			for _, subItem := range item.LogEntries {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fps.selector))
		}
	}
}

func (fps *ReportAgentLogRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ReportAgentLogRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ReportAgentLogRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ReportAgentLogRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ReportAgentLogRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithIValue(value interface{}) ReportAgentLogRequest_FieldPathValue {
	return &ReportAgentLogRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ReportAgentLogRequest_FieldPathArrayOfValues {
	return &ReportAgentLogRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ReportAgentLogRequest_FieldPathArrayItemValue {
	return &ReportAgentLogRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ReportAgentLogRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ReportAgentLogRequest_FieldPathValue allows storing values for ReportAgentLogRequest fields according to their type
type ReportAgentLogRequest_FieldPathValue interface {
	ReportAgentLogRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ReportAgentLogRequest)
	CompareWith(*ReportAgentLogRequest) (cmp int, comparable bool)
}

func ParseReportAgentLogRequest_FieldPathValue(pathStr, valueStr string) (ReportAgentLogRequest_FieldPathValue, error) {
	fp, err := ParseReportAgentLogRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportAgentLogRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ReportAgentLogRequest_FieldPathValue), nil
}

func MustParseReportAgentLogRequest_FieldPathValue(pathStr, valueStr string) ReportAgentLogRequest_FieldPathValue {
	fpv, err := ParseReportAgentLogRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ReportAgentLogRequest_FieldTerminalPathValue struct {
	ReportAgentLogRequest_FieldTerminalPath
	value interface{}
}

var _ ReportAgentLogRequest_FieldPathValue = (*ReportAgentLogRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReportAgentLogRequest' as interface{}
func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) AsLogEntriesValue() ([]*LogEntry, bool) {
	res, ok := fpv.value.([]*LogEntry)
	return res, ok
}

// SetTo stores value for selected field for object ReportAgentLogRequest
func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) SetTo(target **ReportAgentLogRequest) {
	if *target == nil {
		*target = new(ReportAgentLogRequest)
	}
	switch fpv.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		(*target).LogEntries = fpv.value.([]*LogEntry)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fpv.selector))
	}
}

func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportAgentLogRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportAgentLogRequest_FieldTerminalPathValue' with the value under path in 'ReportAgentLogRequest'.
func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) CompareWith(source *ReportAgentLogRequest) (int, bool) {
	switch fpv.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fpv.selector))
	}
}

func (fpv *ReportAgentLogRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ReportAgentLogRequest))
}

type ReportAgentLogRequest_FieldSubPathValue struct {
	ReportAgentLogRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ReportAgentLogRequest_FieldPathValue = (*ReportAgentLogRequest_FieldSubPathValue)(nil)

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) AsLogEntriesPathValue() (LogEntry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LogEntry_FieldPathValue)
	return res, ok
}

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) SetTo(target **ReportAgentLogRequest) {
	if *target == nil {
		*target = new(ReportAgentLogRequest)
	}
	switch fpvs.Selector() {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportAgentLogRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) CompareWith(source *ReportAgentLogRequest) (int, bool) {
	switch fpvs.Selector() {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportAgentLogRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ReportAgentLogRequest))
}

// ReportAgentLogRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ReportAgentLogRequest according to their type
// Present only for array (repeated) types.
type ReportAgentLogRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ReportAgentLogRequest_FieldPath
	ContainsValue(*ReportAgentLogRequest) bool
}

// ParseReportAgentLogRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseReportAgentLogRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ReportAgentLogRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseReportAgentLogRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportAgentLogRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ReportAgentLogRequest_FieldPathArrayItemValue), nil
}

func MustParseReportAgentLogRequest_FieldPathArrayItemValue(pathStr, valueStr string) ReportAgentLogRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseReportAgentLogRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ReportAgentLogRequest_FieldTerminalPathArrayItemValue struct {
	ReportAgentLogRequest_FieldTerminalPath
	value interface{}
}

var _ ReportAgentLogRequest_FieldPathArrayItemValue = (*ReportAgentLogRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ReportAgentLogRequest as interface{}
func (fpaiv *ReportAgentLogRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ReportAgentLogRequest_FieldTerminalPathArrayItemValue) AsLogEntriesItemValue() (*LogEntry, bool) {
	res, ok := fpaiv.value.(*LogEntry)
	return res, ok
}

func (fpaiv *ReportAgentLogRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ReportAgentLogRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ReportAgentLogRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ReportAgentLogRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportAgentLogRequest'
func (fpaiv *ReportAgentLogRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ReportAgentLogRequest) bool {
	slice := fpaiv.ReportAgentLogRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ReportAgentLogRequest_FieldSubPathArrayItemValue struct {
	ReportAgentLogRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ReportAgentLogRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ReportAgentLogRequest_FieldSubPathArrayItemValue) AsLogEntriesPathItemValue() (LogEntry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LogEntry_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportAgentLogRequest'
func (fpaivs *ReportAgentLogRequest_FieldSubPathArrayItemValue) ContainsValue(source *ReportAgentLogRequest) bool {
	switch fpaivs.Selector() {
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportAgentLogRequest: %d", fpaivs.Selector()))
	}
}

// ReportAgentLogRequest_FieldPathArrayOfValues allows storing slice of values for ReportAgentLogRequest fields according to their type
type ReportAgentLogRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ReportAgentLogRequest_FieldPath
}

func ParseReportAgentLogRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ReportAgentLogRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseReportAgentLogRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportAgentLogRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ReportAgentLogRequest_FieldPathArrayOfValues), nil
}

func MustParseReportAgentLogRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ReportAgentLogRequest_FieldPathArrayOfValues {
	fpaov, err := ParseReportAgentLogRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ReportAgentLogRequest_FieldTerminalPathArrayOfValues struct {
	ReportAgentLogRequest_FieldTerminalPath
	values interface{}
}

var _ ReportAgentLogRequest_FieldPathArrayOfValues = (*ReportAgentLogRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ReportAgentLogRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ReportAgentLogRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ReportAgentLogRequest_FieldPathSelectorLogEntries:
		for _, v := range fpaov.values.([][]*LogEntry) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ReportAgentLogRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ReportAgentLogRequest_FieldTerminalPathArrayOfValues) AsLogEntriesArrayOfValues() ([][]*LogEntry, bool) {
	res, ok := fpaov.values.([][]*LogEntry)
	return res, ok
}

type ReportAgentLogRequest_FieldSubPathArrayOfValues struct {
	ReportAgentLogRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ReportAgentLogRequest_FieldPathArrayOfValues = (*ReportAgentLogRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ReportAgentLogRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ReportAgentLogRequest_FieldSubPathArrayOfValues) AsLogEntriesPathArrayOfValues() (LogEntry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LogEntry_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAgentLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAgentLogsRequest_FieldPathSelector
	Get(source *GetAgentLogsRequest) []interface{}
	GetSingle(source *GetAgentLogsRequest) (interface{}, bool)
	ClearValue(item *GetAgentLogsRequest)

	// Those methods build corresponding GetAgentLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAgentLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAgentLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAgentLogsRequest_FieldPathArrayItemValue
}

type GetAgentLogsRequest_FieldPathSelector int32

const (
	GetAgentLogsRequest_FieldPathSelectorProbe     GetAgentLogsRequest_FieldPathSelector = 0
	GetAgentLogsRequest_FieldPathSelectorInterval  GetAgentLogsRequest_FieldPathSelector = 1
	GetAgentLogsRequest_FieldPathSelectorLogLevel  GetAgentLogsRequest_FieldPathSelector = 2
	GetAgentLogsRequest_FieldPathSelectorPageSize  GetAgentLogsRequest_FieldPathSelector = 3
	GetAgentLogsRequest_FieldPathSelectorPageToken GetAgentLogsRequest_FieldPathSelector = 4
)

func (s GetAgentLogsRequest_FieldPathSelector) String() string {
	switch s {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		return "probe"
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return "interval"
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		return "log_level"
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", s))
	}
}

func BuildGetAgentLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAgentLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAgentLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorProbe}, nil
		case "interval":
			return &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorInterval}, nil
		case "log_level", "logLevel", "log-level":
			return &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorLogLevel}, nil
		case "page_size", "pageSize", "page-size":
			return &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetAgentLogsRequest_FieldSubPath{selector: GetAgentLogsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAgentLogsRequest", fp)
}

func ParseGetAgentLogsRequest_FieldPath(rawField string) (GetAgentLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAgentLogsRequest_FieldPath(fp)
}

func MustParseGetAgentLogsRequest_FieldPath(rawField string) GetAgentLogsRequest_FieldPath {
	fp, err := ParseGetAgentLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAgentLogsRequest_FieldTerminalPath struct {
	selector GetAgentLogsRequest_FieldPathSelector
}

var _ GetAgentLogsRequest_FieldPath = (*GetAgentLogsRequest_FieldTerminalPath)(nil)

func (fp *GetAgentLogsRequest_FieldTerminalPath) Selector() GetAgentLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAgentLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAgentLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAgentLogsRequest
func (fp *GetAgentLogsRequest_FieldTerminalPath) Get(source *GetAgentLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAgentLogsRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case GetAgentLogsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case GetAgentLogsRequest_FieldPathSelectorLogLevel:
			values = append(values, source.LogLevel)
		case GetAgentLogsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case GetAgentLogsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAgentLogsRequest))
}

// GetSingle returns value pointed by specific field of from source GetAgentLogsRequest
func (fp *GetAgentLogsRequest_FieldTerminalPath) GetSingle(source *GetAgentLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		return source.GetLogLevel(), source != nil
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
	}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAgentLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAgentLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return (*common.TimeInterval)(nil)
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		return ""
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
	}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) ClearValue(item *GetAgentLogsRequest) {
	if item != nil {
		switch fp.selector {
		case GetAgentLogsRequest_FieldPathSelectorProbe:
			item.Probe = nil
		case GetAgentLogsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case GetAgentLogsRequest_FieldPathSelectorLogLevel:
			item.LogLevel = ""
		case GetAgentLogsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case GetAgentLogsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAgentLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAgentLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAgentLogsRequest_FieldPathSelectorProbe ||
		fp.selector == GetAgentLogsRequest_FieldPathSelectorLogLevel ||
		fp.selector == GetAgentLogsRequest_FieldPathSelectorPageSize ||
		fp.selector == GetAgentLogsRequest_FieldPathSelectorPageToken
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithIValue(value interface{}) GetAgentLogsRequest_FieldPathValue {
	switch fp.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		return &GetAgentLogsRequest_FieldTerminalPathValue{GetAgentLogsRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return &GetAgentLogsRequest_FieldTerminalPathValue{GetAgentLogsRequest_FieldTerminalPath: *fp, value: value.(*common.TimeInterval)}
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		return &GetAgentLogsRequest_FieldTerminalPathValue{GetAgentLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		return &GetAgentLogsRequest_FieldTerminalPathValue{GetAgentLogsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		return &GetAgentLogsRequest_FieldTerminalPathValue{GetAgentLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
	}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAgentLogsRequest_FieldPathArrayOfValues {
	fpaov := &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		return &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp, values: values.([]*common.TimeInterval)}
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		return &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		return &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		return &GetAgentLogsRequest_FieldTerminalPathArrayOfValues{GetAgentLogsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAgentLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fp.selector))
	}
}

func (fp *GetAgentLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetAgentLogsRequest_FieldSubPath struct {
	selector GetAgentLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetAgentLogsRequest_FieldPath = (*GetAgentLogsRequest_FieldSubPath)(nil)

func (fps *GetAgentLogsRequest_FieldSubPath) Selector() GetAgentLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *GetAgentLogsRequest_FieldSubPath) AsIntervalSubPath() (common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetAgentLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetAgentLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetAgentLogsRequest
func (fps *GetAgentLogsRequest_FieldSubPath) Get(source *GetAgentLogsRequest) (values []interface{}) {
	switch fps.selector {
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		values = append(values, fps.subPath.GetRaw(source.GetInterval())...)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *GetAgentLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetAgentLogsRequest))
}

// GetSingle returns value of selected field from source GetAgentLogsRequest
func (fps *GetAgentLogsRequest_FieldSubPath) GetSingle(source *GetAgentLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fps.selector))
	}
}

func (fps *GetAgentLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetAgentLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *GetAgentLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetAgentLogsRequest_FieldSubPath) ClearValue(item *GetAgentLogsRequest) {
	if item != nil {
		switch fps.selector {
		case GetAgentLogsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *GetAgentLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetAgentLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetAgentLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetAgentLogsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetAgentLogsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithIValue(value interface{}) GetAgentLogsRequest_FieldPathValue {
	return &GetAgentLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) GetAgentLogsRequest_FieldPathArrayOfValues {
	return &GetAgentLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) GetAgentLogsRequest_FieldPathArrayItemValue {
	return &GetAgentLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetAgentLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetAgentLogsRequest_FieldPathValue allows storing values for GetAgentLogsRequest fields according to their type
type GetAgentLogsRequest_FieldPathValue interface {
	GetAgentLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAgentLogsRequest)
	CompareWith(*GetAgentLogsRequest) (cmp int, comparable bool)
}

func ParseGetAgentLogsRequest_FieldPathValue(pathStr, valueStr string) (GetAgentLogsRequest_FieldPathValue, error) {
	fp, err := ParseGetAgentLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAgentLogsRequest_FieldPathValue), nil
}

func MustParseGetAgentLogsRequest_FieldPathValue(pathStr, valueStr string) GetAgentLogsRequest_FieldPathValue {
	fpv, err := ParseGetAgentLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAgentLogsRequest_FieldTerminalPathValue struct {
	GetAgentLogsRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsRequest_FieldPathValue = (*GetAgentLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAgentLogsRequest' as interface{}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) AsIntervalValue() (*common.TimeInterval, bool) {
	res, ok := fpv.value.(*common.TimeInterval)
	return res, ok
}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) AsLogLevelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetAgentLogsRequest
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) SetTo(target **GetAgentLogsRequest) {
	if *target == nil {
		*target = new(GetAgentLogsRequest)
	}
	switch fpv.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*common.TimeInterval)
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		(*target).LogLevel = fpv.value.(string)
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAgentLogsRequest_FieldTerminalPathValue' with the value under path in 'GetAgentLogsRequest'.
func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) CompareWith(source *GetAgentLogsRequest) (int, bool) {
	switch fpv.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return 0, false
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		leftValue := fpv.value.(string)
		rightValue := source.GetLogLevel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAgentLogsRequest))
}

type GetAgentLogsRequest_FieldSubPathValue struct {
	GetAgentLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetAgentLogsRequest_FieldPathValue = (*GetAgentLogsRequest_FieldSubPathValue)(nil)

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) AsIntervalPathValue() (common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) SetTo(target **GetAgentLogsRequest) {
	if *target == nil {
		*target = new(GetAgentLogsRequest)
	}
	switch fpvs.Selector() {
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) CompareWith(source *GetAgentLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetAgentLogsRequest))
}

// GetAgentLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAgentLogsRequest according to their type
// Present only for array (repeated) types.
type GetAgentLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAgentLogsRequest_FieldPath
	ContainsValue(*GetAgentLogsRequest) bool
}

// ParseGetAgentLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAgentLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAgentLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAgentLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAgentLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAgentLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAgentLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAgentLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAgentLogsRequest_FieldTerminalPathArrayItemValue struct {
	GetAgentLogsRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsRequest_FieldPathArrayItemValue = (*GetAgentLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAgentLogsRequest as interface{}
func (fpaiv *GetAgentLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAgentLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAgentLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAgentLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAgentLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsRequest'
func (fpaiv *GetAgentLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAgentLogsRequest) bool {
	slice := fpaiv.GetAgentLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetAgentLogsRequest_FieldSubPathArrayItemValue struct {
	GetAgentLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetAgentLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetAgentLogsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsRequest'
func (fpaivs *GetAgentLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *GetAgentLogsRequest) bool {
	switch fpaivs.Selector() {
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsRequest: %d", fpaivs.Selector()))
	}
}

// GetAgentLogsRequest_FieldPathArrayOfValues allows storing slice of values for GetAgentLogsRequest fields according to their type
type GetAgentLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAgentLogsRequest_FieldPath
}

func ParseGetAgentLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAgentLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAgentLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAgentLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAgentLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAgentLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAgentLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAgentLogsRequest_FieldTerminalPathArrayOfValues struct {
	GetAgentLogsRequest_FieldTerminalPath
	values interface{}
}

var _ GetAgentLogsRequest_FieldPathArrayOfValues = (*GetAgentLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAgentLogsRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetAgentLogsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*common.TimeInterval) {
			values = append(values, v)
		}
	case GetAgentLogsRequest_FieldPathSelectorLogLevel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case GetAgentLogsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case GetAgentLogsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*common.TimeInterval)
	return res, ok
}
func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) AsLogLevelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *GetAgentLogsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetAgentLogsRequest_FieldSubPathArrayOfValues struct {
	GetAgentLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetAgentLogsRequest_FieldPathArrayOfValues = (*GetAgentLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetAgentLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetAgentLogsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAgentLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAgentLogsResponse_FieldPathSelector
	Get(source *GetAgentLogsResponse) []interface{}
	GetSingle(source *GetAgentLogsResponse) (interface{}, bool)
	ClearValue(item *GetAgentLogsResponse)

	// Those methods build corresponding GetAgentLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAgentLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAgentLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAgentLogsResponse_FieldPathArrayItemValue
}

type GetAgentLogsResponse_FieldPathSelector int32

const (
	GetAgentLogsResponse_FieldPathSelectorLogEntries    GetAgentLogsResponse_FieldPathSelector = 0
	GetAgentLogsResponse_FieldPathSelectorNextPageToken GetAgentLogsResponse_FieldPathSelector = 1
)

func (s GetAgentLogsResponse_FieldPathSelector) String() string {
	switch s {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return "log_entries"
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", s))
	}
}

func BuildGetAgentLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (GetAgentLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAgentLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_entries", "logEntries", "log-entries":
			return &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorLogEntries}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "log_entries", "logEntries", "log-entries":
			if subpath, err := BuildLogEntry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetAgentLogsResponse_FieldSubPath{selector: GetAgentLogsResponse_FieldPathSelectorLogEntries, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAgentLogsResponse", fp)
}

func ParseGetAgentLogsResponse_FieldPath(rawField string) (GetAgentLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAgentLogsResponse_FieldPath(fp)
}

func MustParseGetAgentLogsResponse_FieldPath(rawField string) GetAgentLogsResponse_FieldPath {
	fp, err := ParseGetAgentLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAgentLogsResponse_FieldTerminalPath struct {
	selector GetAgentLogsResponse_FieldPathSelector
}

var _ GetAgentLogsResponse_FieldPath = (*GetAgentLogsResponse_FieldTerminalPath)(nil)

func (fp *GetAgentLogsResponse_FieldTerminalPath) Selector() GetAgentLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAgentLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAgentLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAgentLogsResponse
func (fp *GetAgentLogsResponse_FieldTerminalPath) Get(source *GetAgentLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAgentLogsResponse_FieldPathSelectorLogEntries:
			for _, value := range source.GetLogEntries() {
				values = append(values, value)
			}
		case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAgentLogsResponse))
}

// GetSingle returns value pointed by specific field of from source GetAgentLogsResponse
func (fp *GetAgentLogsResponse_FieldTerminalPath) GetSingle(source *GetAgentLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		res := source.GetLogEntries()
		return res, res != nil
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAgentLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetAgentLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return ([]*LogEntry)(nil)
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) ClearValue(item *GetAgentLogsResponse) {
	if item != nil {
		switch fp.selector {
		case GetAgentLogsResponse_FieldPathSelectorLogEntries:
			item.LogEntries = nil
		case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAgentLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAgentLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAgentLogsResponse_FieldPathSelectorNextPageToken
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithIValue(value interface{}) GetAgentLogsResponse_FieldPathValue {
	switch fp.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponse_FieldTerminalPathValue{GetAgentLogsResponse_FieldTerminalPath: *fp, value: value.([]*LogEntry)}
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		return &GetAgentLogsResponse_FieldTerminalPathValue{GetAgentLogsResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAgentLogsResponse_FieldPathArrayOfValues {
	fpaov := &GetAgentLogsResponse_FieldTerminalPathArrayOfValues{GetAgentLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponse_FieldTerminalPathArrayOfValues{GetAgentLogsResponse_FieldTerminalPath: *fp, values: values.([][]*LogEntry)}
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		return &GetAgentLogsResponse_FieldTerminalPathArrayOfValues{GetAgentLogsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAgentLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponse_FieldTerminalPathArrayItemValue{GetAgentLogsResponse_FieldTerminalPath: *fp, value: value.(*LogEntry)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetAgentLogsResponse_FieldSubPath struct {
	selector GetAgentLogsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetAgentLogsResponse_FieldPath = (*GetAgentLogsResponse_FieldSubPath)(nil)

func (fps *GetAgentLogsResponse_FieldSubPath) Selector() GetAgentLogsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *GetAgentLogsResponse_FieldSubPath) AsLogEntriesSubPath() (LogEntry_FieldPath, bool) {
	res, ok := fps.subPath.(LogEntry_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetAgentLogsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetAgentLogsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetAgentLogsResponse
func (fps *GetAgentLogsResponse_FieldSubPath) Get(source *GetAgentLogsResponse) (values []interface{}) {
	switch fps.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		for _, item := range source.GetLogEntries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fps.selector))
	}
	return
}

func (fps *GetAgentLogsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetAgentLogsResponse))
}

// GetSingle returns value of selected field from source GetAgentLogsResponse
func (fps *GetAgentLogsResponse_FieldSubPath) GetSingle(source *GetAgentLogsResponse) (interface{}, bool) {
	switch fps.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		if len(source.GetLogEntries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogEntries()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fps.selector))
	}
}

func (fps *GetAgentLogsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetAgentLogsResponse))
}

// GetDefault returns a default value of the field type
func (fps *GetAgentLogsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetAgentLogsResponse_FieldSubPath) ClearValue(item *GetAgentLogsResponse) {
	if item != nil {
		switch fps.selector {
		case GetAgentLogsResponse_FieldPathSelectorLogEntries:
			for _, subItem := range item.LogEntries {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fps.selector))
		}
	}
}

func (fps *GetAgentLogsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetAgentLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetAgentLogsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetAgentLogsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetAgentLogsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithIValue(value interface{}) GetAgentLogsResponse_FieldPathValue {
	return &GetAgentLogsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) GetAgentLogsResponse_FieldPathArrayOfValues {
	return &GetAgentLogsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) GetAgentLogsResponse_FieldPathArrayItemValue {
	return &GetAgentLogsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetAgentLogsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetAgentLogsResponse_FieldPathValue allows storing values for GetAgentLogsResponse fields according to their type
type GetAgentLogsResponse_FieldPathValue interface {
	GetAgentLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAgentLogsResponse)
	CompareWith(*GetAgentLogsResponse) (cmp int, comparable bool)
}

func ParseGetAgentLogsResponse_FieldPathValue(pathStr, valueStr string) (GetAgentLogsResponse_FieldPathValue, error) {
	fp, err := ParseGetAgentLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAgentLogsResponse_FieldPathValue), nil
}

func MustParseGetAgentLogsResponse_FieldPathValue(pathStr, valueStr string) GetAgentLogsResponse_FieldPathValue {
	fpv, err := ParseGetAgentLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAgentLogsResponse_FieldTerminalPathValue struct {
	GetAgentLogsResponse_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsResponse_FieldPathValue = (*GetAgentLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAgentLogsResponse' as interface{}
func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) AsLogEntriesValue() ([]*LogEntry, bool) {
	res, ok := fpv.value.([]*LogEntry)
	return res, ok
}
func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetAgentLogsResponse
func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) SetTo(target **GetAgentLogsResponse) {
	if *target == nil {
		*target = new(GetAgentLogsResponse)
	}
	switch fpv.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		(*target).LogEntries = fpv.value.([]*LogEntry)
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAgentLogsResponse_FieldTerminalPathValue' with the value under path in 'GetAgentLogsResponse'.
func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) CompareWith(source *GetAgentLogsResponse) (int, bool) {
	switch fpv.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return 0, false
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAgentLogsResponse))
}

type GetAgentLogsResponse_FieldSubPathValue struct {
	GetAgentLogsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetAgentLogsResponse_FieldPathValue = (*GetAgentLogsResponse_FieldSubPathValue)(nil)

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) AsLogEntriesPathValue() (LogEntry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LogEntry_FieldPathValue)
	return res, ok
}

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) SetTo(target **GetAgentLogsResponse) {
	if *target == nil {
		*target = new(GetAgentLogsResponse)
	}
	switch fpvs.Selector() {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) CompareWith(source *GetAgentLogsResponse) (int, bool) {
	switch fpvs.Selector() {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetAgentLogsResponse))
}

// GetAgentLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAgentLogsResponse according to their type
// Present only for array (repeated) types.
type GetAgentLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAgentLogsResponse_FieldPath
	ContainsValue(*GetAgentLogsResponse) bool
}

// ParseGetAgentLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAgentLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetAgentLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAgentLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAgentLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseGetAgentLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetAgentLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAgentLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAgentLogsResponse_FieldTerminalPathArrayItemValue struct {
	GetAgentLogsResponse_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsResponse_FieldPathArrayItemValue = (*GetAgentLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAgentLogsResponse as interface{}
func (fpaiv *GetAgentLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetAgentLogsResponse_FieldTerminalPathArrayItemValue) AsLogEntriesItemValue() (*LogEntry, bool) {
	res, ok := fpaiv.value.(*LogEntry)
	return res, ok
}

func (fpaiv *GetAgentLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetAgentLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAgentLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAgentLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsResponse'
func (fpaiv *GetAgentLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAgentLogsResponse) bool {
	slice := fpaiv.GetAgentLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetAgentLogsResponse_FieldSubPathArrayItemValue struct {
	GetAgentLogsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetAgentLogsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetAgentLogsResponse_FieldSubPathArrayItemValue) AsLogEntriesPathItemValue() (LogEntry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LogEntry_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsResponse'
func (fpaivs *GetAgentLogsResponse_FieldSubPathArrayItemValue) ContainsValue(source *GetAgentLogsResponse) bool {
	switch fpaivs.Selector() {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponse: %d", fpaivs.Selector()))
	}
}

// GetAgentLogsResponse_FieldPathArrayOfValues allows storing slice of values for GetAgentLogsResponse fields according to their type
type GetAgentLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAgentLogsResponse_FieldPath
}

func ParseGetAgentLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAgentLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAgentLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAgentLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseGetAgentLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetAgentLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetAgentLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAgentLogsResponse_FieldTerminalPathArrayOfValues struct {
	GetAgentLogsResponse_FieldTerminalPath
	values interface{}
}

var _ GetAgentLogsResponse_FieldPathArrayOfValues = (*GetAgentLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAgentLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAgentLogsResponse_FieldPathSelectorLogEntries:
		for _, v := range fpaov.values.([][]*LogEntry) {
			values = append(values, v)
		}
	case GetAgentLogsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAgentLogsResponse_FieldTerminalPathArrayOfValues) AsLogEntriesArrayOfValues() ([][]*LogEntry, bool) {
	res, ok := fpaov.values.([][]*LogEntry)
	return res, ok
}
func (fpaov *GetAgentLogsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetAgentLogsResponse_FieldSubPathArrayOfValues struct {
	GetAgentLogsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetAgentLogsResponse_FieldPathArrayOfValues = (*GetAgentLogsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetAgentLogsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetAgentLogsResponse_FieldSubPathArrayOfValues) AsLogEntriesPathArrayOfValues() (LogEntry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LogEntry_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LogEntry_FieldPath interface {
	gotenobject.FieldPath
	Selector() LogEntry_FieldPathSelector
	Get(source *LogEntry) []interface{}
	GetSingle(source *LogEntry) (interface{}, bool)
	ClearValue(item *LogEntry)

	// Those methods build corresponding LogEntry_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LogEntry_FieldPathValue
	WithIArrayOfValues(values interface{}) LogEntry_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LogEntry_FieldPathArrayItemValue
}

type LogEntry_FieldPathSelector int32

const (
	LogEntry_FieldPathSelectorTime    LogEntry_FieldPathSelector = 0
	LogEntry_FieldPathSelectorLevel   LogEntry_FieldPathSelector = 1
	LogEntry_FieldPathSelectorPayload LogEntry_FieldPathSelector = 2
)

func (s LogEntry_FieldPathSelector) String() string {
	switch s {
	case LogEntry_FieldPathSelectorTime:
		return "_time"
	case LogEntry_FieldPathSelectorLevel:
		return "level"
	case LogEntry_FieldPathSelectorPayload:
		return "payload"
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", s))
	}
}

func BuildLogEntry_FieldPath(fp gotenobject.RawFieldPath) (LogEntry_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LogEntry")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "_time", "time", "Time":
			return &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorTime}, nil
		case "level":
			return &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorLevel}, nil
		case "payload":
			return &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorPayload}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LogEntry", fp)
}

func ParseLogEntry_FieldPath(rawField string) (LogEntry_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLogEntry_FieldPath(fp)
}

func MustParseLogEntry_FieldPath(rawField string) LogEntry_FieldPath {
	fp, err := ParseLogEntry_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LogEntry_FieldTerminalPath struct {
	selector LogEntry_FieldPathSelector
}

var _ LogEntry_FieldPath = (*LogEntry_FieldTerminalPath)(nil)

func (fp *LogEntry_FieldTerminalPath) Selector() LogEntry_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LogEntry_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LogEntry_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LogEntry
func (fp *LogEntry_FieldTerminalPath) Get(source *LogEntry) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LogEntry_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case LogEntry_FieldPathSelectorLevel:
			values = append(values, source.Level)
		case LogEntry_FieldPathSelectorPayload:
			values = append(values, source.Payload)
		default:
			panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
		}
	}
	return
}

func (fp *LogEntry_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LogEntry))
}

// GetSingle returns value pointed by specific field of from source LogEntry
func (fp *LogEntry_FieldTerminalPath) GetSingle(source *LogEntry) (interface{}, bool) {
	switch fp.selector {
	case LogEntry_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case LogEntry_FieldPathSelectorLevel:
		return source.GetLevel(), source != nil
	case LogEntry_FieldPathSelectorPayload:
		res := source.GetPayload()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
	}
}

func (fp *LogEntry_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LogEntry))
}

// GetDefault returns a default value of the field type
func (fp *LogEntry_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LogEntry_FieldPathSelectorTime:
		return (*timestamp.Timestamp)(nil)
	case LogEntry_FieldPathSelectorLevel:
		return LogLevel_PanicLevel
	case LogEntry_FieldPathSelectorPayload:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
	}
}

func (fp *LogEntry_FieldTerminalPath) ClearValue(item *LogEntry) {
	if item != nil {
		switch fp.selector {
		case LogEntry_FieldPathSelectorTime:
			item.Time = nil
		case LogEntry_FieldPathSelectorLevel:
			item.Level = LogLevel_PanicLevel
		case LogEntry_FieldPathSelectorPayload:
			item.Payload = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
		}
	}
}

func (fp *LogEntry_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LogEntry))
}

// IsLeaf - whether field path is holds simple value
func (fp *LogEntry_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LogEntry_FieldPathSelectorTime ||
		fp.selector == LogEntry_FieldPathSelectorLevel ||
		fp.selector == LogEntry_FieldPathSelectorPayload
}

func (fp *LogEntry_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LogEntry_FieldTerminalPath) WithIValue(value interface{}) LogEntry_FieldPathValue {
	switch fp.selector {
	case LogEntry_FieldPathSelectorTime:
		return &LogEntry_FieldTerminalPathValue{LogEntry_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case LogEntry_FieldPathSelectorLevel:
		return &LogEntry_FieldTerminalPathValue{LogEntry_FieldTerminalPath: *fp, value: value.(LogLevel)}
	case LogEntry_FieldPathSelectorPayload:
		return &LogEntry_FieldTerminalPathValue{LogEntry_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
	}
}

func (fp *LogEntry_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LogEntry_FieldTerminalPath) WithIArrayOfValues(values interface{}) LogEntry_FieldPathArrayOfValues {
	fpaov := &LogEntry_FieldTerminalPathArrayOfValues{LogEntry_FieldTerminalPath: *fp}
	switch fp.selector {
	case LogEntry_FieldPathSelectorTime:
		return &LogEntry_FieldTerminalPathArrayOfValues{LogEntry_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case LogEntry_FieldPathSelectorLevel:
		return &LogEntry_FieldTerminalPathArrayOfValues{LogEntry_FieldTerminalPath: *fp, values: values.([]LogLevel)}
	case LogEntry_FieldPathSelectorPayload:
		return &LogEntry_FieldTerminalPathArrayOfValues{LogEntry_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
	}
	return fpaov
}

func (fp *LogEntry_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LogEntry_FieldTerminalPath) WithIArrayItemValue(value interface{}) LogEntry_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fp.selector))
	}
}

func (fp *LogEntry_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LogEntry_FieldPathValue allows storing values for LogEntry fields according to their type
type LogEntry_FieldPathValue interface {
	LogEntry_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LogEntry)
	CompareWith(*LogEntry) (cmp int, comparable bool)
}

func ParseLogEntry_FieldPathValue(pathStr, valueStr string) (LogEntry_FieldPathValue, error) {
	fp, err := ParseLogEntry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntry field path value from %s: %v", valueStr, err)
	}
	return fpv.(LogEntry_FieldPathValue), nil
}

func MustParseLogEntry_FieldPathValue(pathStr, valueStr string) LogEntry_FieldPathValue {
	fpv, err := ParseLogEntry_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LogEntry_FieldTerminalPathValue struct {
	LogEntry_FieldTerminalPath
	value interface{}
}

var _ LogEntry_FieldPathValue = (*LogEntry_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LogEntry' as interface{}
func (fpv *LogEntry_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LogEntry_FieldTerminalPathValue) AsTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *LogEntry_FieldTerminalPathValue) AsLevelValue() (LogLevel, bool) {
	res, ok := fpv.value.(LogLevel)
	return res, ok
}
func (fpv *LogEntry_FieldTerminalPathValue) AsPayloadValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object LogEntry
func (fpv *LogEntry_FieldTerminalPathValue) SetTo(target **LogEntry) {
	if *target == nil {
		*target = new(LogEntry)
	}
	switch fpv.selector {
	case LogEntry_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamp.Timestamp)
	case LogEntry_FieldPathSelectorLevel:
		(*target).Level = fpv.value.(LogLevel)
	case LogEntry_FieldPathSelectorPayload:
		(*target).Payload = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fpv.selector))
	}
}

func (fpv *LogEntry_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogEntry)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LogEntry_FieldTerminalPathValue' with the value under path in 'LogEntry'.
func (fpv *LogEntry_FieldTerminalPathValue) CompareWith(source *LogEntry) (int, bool) {
	switch fpv.selector {
	case LogEntry_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case LogEntry_FieldPathSelectorLevel:
		leftValue := fpv.value.(LogLevel)
		rightValue := source.GetLevel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LogEntry_FieldPathSelectorPayload:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntry: %d", fpv.selector))
	}
}

func (fpv *LogEntry_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LogEntry))
}

// LogEntry_FieldPathArrayItemValue allows storing single item in Path-specific values for LogEntry according to their type
// Present only for array (repeated) types.
type LogEntry_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LogEntry_FieldPath
	ContainsValue(*LogEntry) bool
}

// ParseLogEntry_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLogEntry_FieldPathArrayItemValue(pathStr, valueStr string) (LogEntry_FieldPathArrayItemValue, error) {
	fp, err := ParseLogEntry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntry field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LogEntry_FieldPathArrayItemValue), nil
}

func MustParseLogEntry_FieldPathArrayItemValue(pathStr, valueStr string) LogEntry_FieldPathArrayItemValue {
	fpaiv, err := ParseLogEntry_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LogEntry_FieldTerminalPathArrayItemValue struct {
	LogEntry_FieldTerminalPath
	value interface{}
}

var _ LogEntry_FieldPathArrayItemValue = (*LogEntry_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LogEntry as interface{}
func (fpaiv *LogEntry_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *LogEntry_FieldTerminalPathArrayItemValue) GetSingle(source *LogEntry) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LogEntry_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LogEntry))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LogEntry'
func (fpaiv *LogEntry_FieldTerminalPathArrayItemValue) ContainsValue(source *LogEntry) bool {
	slice := fpaiv.LogEntry_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LogEntry_FieldPathArrayOfValues allows storing slice of values for LogEntry fields according to their type
type LogEntry_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LogEntry_FieldPath
}

func ParseLogEntry_FieldPathArrayOfValues(pathStr, valuesStr string) (LogEntry_FieldPathArrayOfValues, error) {
	fp, err := ParseLogEntry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntry field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LogEntry_FieldPathArrayOfValues), nil
}

func MustParseLogEntry_FieldPathArrayOfValues(pathStr, valuesStr string) LogEntry_FieldPathArrayOfValues {
	fpaov, err := ParseLogEntry_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LogEntry_FieldTerminalPathArrayOfValues struct {
	LogEntry_FieldTerminalPath
	values interface{}
}

var _ LogEntry_FieldPathArrayOfValues = (*LogEntry_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LogEntry_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LogEntry_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case LogEntry_FieldPathSelectorLevel:
		for _, v := range fpaov.values.([]LogLevel) {
			values = append(values, v)
		}
	case LogEntry_FieldPathSelectorPayload:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LogEntry_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *LogEntry_FieldTerminalPathArrayOfValues) AsLevelArrayOfValues() ([]LogLevel, bool) {
	res, ok := fpaov.values.([]LogLevel)
	return res, ok
}
func (fpaov *LogEntry_FieldTerminalPathArrayOfValues) AsPayloadArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAgentLogsResponseStringFormat_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAgentLogsResponseStringFormat_FieldPathSelector
	Get(source *GetAgentLogsResponseStringFormat) []interface{}
	GetSingle(source *GetAgentLogsResponseStringFormat) (interface{}, bool)
	ClearValue(item *GetAgentLogsResponseStringFormat)

	// Those methods build corresponding GetAgentLogsResponseStringFormat_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayItemValue
}

type GetAgentLogsResponseStringFormat_FieldPathSelector int32

const (
	GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries    GetAgentLogsResponseStringFormat_FieldPathSelector = 0
	GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken GetAgentLogsResponseStringFormat_FieldPathSelector = 1
)

func (s GetAgentLogsResponseStringFormat_FieldPathSelector) String() string {
	switch s {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return "log_entries"
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", s))
	}
}

func BuildGetAgentLogsResponseStringFormat_FieldPath(fp gotenobject.RawFieldPath) (GetAgentLogsResponseStringFormat_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAgentLogsResponseStringFormat")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_entries", "logEntries", "log-entries":
			return &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "log_entries", "logEntries", "log-entries":
			if subpath, err := BuildLogEntryStringFormat_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetAgentLogsResponseStringFormat_FieldSubPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAgentLogsResponseStringFormat", fp)
}

func ParseGetAgentLogsResponseStringFormat_FieldPath(rawField string) (GetAgentLogsResponseStringFormat_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAgentLogsResponseStringFormat_FieldPath(fp)
}

func MustParseGetAgentLogsResponseStringFormat_FieldPath(rawField string) GetAgentLogsResponseStringFormat_FieldPath {
	fp, err := ParseGetAgentLogsResponseStringFormat_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAgentLogsResponseStringFormat_FieldTerminalPath struct {
	selector GetAgentLogsResponseStringFormat_FieldPathSelector
}

var _ GetAgentLogsResponseStringFormat_FieldPath = (*GetAgentLogsResponseStringFormat_FieldTerminalPath)(nil)

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) Selector() GetAgentLogsResponseStringFormat_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAgentLogsResponseStringFormat
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) Get(source *GetAgentLogsResponseStringFormat) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
			for _, value := range source.GetLogEntries() {
				values = append(values, value)
			}
		case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAgentLogsResponseStringFormat))
}

// GetSingle returns value pointed by specific field of from source GetAgentLogsResponseStringFormat
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) GetSingle(source *GetAgentLogsResponseStringFormat) (interface{}, bool) {
	switch fp.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		res := source.GetLogEntries()
		return res, res != nil
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAgentLogsResponseStringFormat))
}

// GetDefault returns a default value of the field type
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return ([]*LogEntryStringFormat)(nil)
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) ClearValue(item *GetAgentLogsResponseStringFormat) {
	if item != nil {
		switch fp.selector {
		case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
			item.LogEntries = nil
		case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
		}
	}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAgentLogsResponseStringFormat))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithIValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathValue {
	switch fp.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponseStringFormat_FieldTerminalPathValue{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp, value: value.([]*LogEntryStringFormat)}
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		return &GetAgentLogsResponseStringFormat_FieldTerminalPathValue{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayOfValues {
	fpaov := &GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp, values: values.([][]*LogEntryStringFormat)}
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		return &GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayItemValue {
	switch fp.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return &GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue{GetAgentLogsResponseStringFormat_FieldTerminalPath: *fp, value: value.(*LogEntryStringFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fp.selector))
	}
}

func (fp *GetAgentLogsResponseStringFormat_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetAgentLogsResponseStringFormat_FieldSubPath struct {
	selector GetAgentLogsResponseStringFormat_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetAgentLogsResponseStringFormat_FieldPath = (*GetAgentLogsResponseStringFormat_FieldSubPath)(nil)

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) Selector() GetAgentLogsResponseStringFormat_FieldPathSelector {
	return fps.selector
}
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) AsLogEntriesSubPath() (LogEntryStringFormat_FieldPath, bool) {
	res, ok := fps.subPath.(LogEntryStringFormat_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetAgentLogsResponseStringFormat
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) Get(source *GetAgentLogsResponseStringFormat) (values []interface{}) {
	switch fps.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		for _, item := range source.GetLogEntries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fps.selector))
	}
	return
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetAgentLogsResponseStringFormat))
}

// GetSingle returns value of selected field from source GetAgentLogsResponseStringFormat
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) GetSingle(source *GetAgentLogsResponseStringFormat) (interface{}, bool) {
	switch fps.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		if len(source.GetLogEntries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogEntries()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fps.selector))
	}
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetAgentLogsResponseStringFormat))
}

// GetDefault returns a default value of the field type
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) ClearValue(item *GetAgentLogsResponseStringFormat) {
	if item != nil {
		switch fps.selector {
		case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
			for _, subItem := range item.LogEntries {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fps.selector))
		}
	}
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetAgentLogsResponseStringFormat))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithIValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathValue {
	return &GetAgentLogsResponseStringFormat_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithIArrayOfValues(values interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayOfValues {
	return &GetAgentLogsResponseStringFormat_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithIArrayItemValue(value interface{}) GetAgentLogsResponseStringFormat_FieldPathArrayItemValue {
	return &GetAgentLogsResponseStringFormat_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetAgentLogsResponseStringFormat_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetAgentLogsResponseStringFormat_FieldPathValue allows storing values for GetAgentLogsResponseStringFormat fields according to their type
type GetAgentLogsResponseStringFormat_FieldPathValue interface {
	GetAgentLogsResponseStringFormat_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAgentLogsResponseStringFormat)
	CompareWith(*GetAgentLogsResponseStringFormat) (cmp int, comparable bool)
}

func ParseGetAgentLogsResponseStringFormat_FieldPathValue(pathStr, valueStr string) (GetAgentLogsResponseStringFormat_FieldPathValue, error) {
	fp, err := ParseGetAgentLogsResponseStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponseStringFormat field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAgentLogsResponseStringFormat_FieldPathValue), nil
}

func MustParseGetAgentLogsResponseStringFormat_FieldPathValue(pathStr, valueStr string) GetAgentLogsResponseStringFormat_FieldPathValue {
	fpv, err := ParseGetAgentLogsResponseStringFormat_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAgentLogsResponseStringFormat_FieldTerminalPathValue struct {
	GetAgentLogsResponseStringFormat_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsResponseStringFormat_FieldPathValue = (*GetAgentLogsResponseStringFormat_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAgentLogsResponseStringFormat' as interface{}
func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) AsLogEntriesValue() ([]*LogEntryStringFormat, bool) {
	res, ok := fpv.value.([]*LogEntryStringFormat)
	return res, ok
}
func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetAgentLogsResponseStringFormat
func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) SetTo(target **GetAgentLogsResponseStringFormat) {
	if *target == nil {
		*target = new(GetAgentLogsResponseStringFormat)
	}
	switch fpv.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		(*target).LogEntries = fpv.value.([]*LogEntryStringFormat)
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsResponseStringFormat)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAgentLogsResponseStringFormat_FieldTerminalPathValue' with the value under path in 'GetAgentLogsResponseStringFormat'.
func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) CompareWith(source *GetAgentLogsResponseStringFormat) (int, bool) {
	switch fpv.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return 0, false
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fpv.selector))
	}
}

func (fpv *GetAgentLogsResponseStringFormat_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAgentLogsResponseStringFormat))
}

type GetAgentLogsResponseStringFormat_FieldSubPathValue struct {
	GetAgentLogsResponseStringFormat_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetAgentLogsResponseStringFormat_FieldPathValue = (*GetAgentLogsResponseStringFormat_FieldSubPathValue)(nil)

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) AsLogEntriesPathValue() (LogEntryStringFormat_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LogEntryStringFormat_FieldPathValue)
	return res, ok
}

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) SetTo(target **GetAgentLogsResponseStringFormat) {
	if *target == nil {
		*target = new(GetAgentLogsResponseStringFormat)
	}
	switch fpvs.Selector() {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentLogsResponseStringFormat)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) CompareWith(source *GetAgentLogsResponseStringFormat) (int, bool) {
	switch fpvs.Selector() {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fpvs.Selector()))
	}
}

func (fpvs *GetAgentLogsResponseStringFormat_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetAgentLogsResponseStringFormat))
}

// GetAgentLogsResponseStringFormat_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAgentLogsResponseStringFormat according to their type
// Present only for array (repeated) types.
type GetAgentLogsResponseStringFormat_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAgentLogsResponseStringFormat_FieldPath
	ContainsValue(*GetAgentLogsResponseStringFormat) bool
}

// ParseGetAgentLogsResponseStringFormat_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAgentLogsResponseStringFormat_FieldPathArrayItemValue(pathStr, valueStr string) (GetAgentLogsResponseStringFormat_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAgentLogsResponseStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponseStringFormat field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAgentLogsResponseStringFormat_FieldPathArrayItemValue), nil
}

func MustParseGetAgentLogsResponseStringFormat_FieldPathArrayItemValue(pathStr, valueStr string) GetAgentLogsResponseStringFormat_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAgentLogsResponseStringFormat_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue struct {
	GetAgentLogsResponseStringFormat_FieldTerminalPath
	value interface{}
}

var _ GetAgentLogsResponseStringFormat_FieldPathArrayItemValue = (*GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAgentLogsResponseStringFormat as interface{}
func (fpaiv *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue) AsLogEntriesItemValue() (*LogEntryStringFormat, bool) {
	res, ok := fpaiv.value.(*LogEntryStringFormat)
	return res, ok
}

func (fpaiv *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue) GetSingle(source *GetAgentLogsResponseStringFormat) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAgentLogsResponseStringFormat))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsResponseStringFormat'
func (fpaiv *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAgentLogsResponseStringFormat) bool {
	slice := fpaiv.GetAgentLogsResponseStringFormat_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetAgentLogsResponseStringFormat_FieldSubPathArrayItemValue struct {
	GetAgentLogsResponseStringFormat_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetAgentLogsResponseStringFormat_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetAgentLogsResponseStringFormat_FieldSubPathArrayItemValue) AsLogEntriesPathItemValue() (LogEntryStringFormat_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LogEntryStringFormat_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentLogsResponseStringFormat'
func (fpaivs *GetAgentLogsResponseStringFormat_FieldSubPathArrayItemValue) ContainsValue(source *GetAgentLogsResponseStringFormat) bool {
	switch fpaivs.Selector() {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentLogsResponseStringFormat: %d", fpaivs.Selector()))
	}
}

// GetAgentLogsResponseStringFormat_FieldPathArrayOfValues allows storing slice of values for GetAgentLogsResponseStringFormat fields according to their type
type GetAgentLogsResponseStringFormat_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAgentLogsResponseStringFormat_FieldPath
}

func ParseGetAgentLogsResponseStringFormat_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAgentLogsResponseStringFormat_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAgentLogsResponseStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentLogsResponseStringFormat field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAgentLogsResponseStringFormat_FieldPathArrayOfValues), nil
}

func MustParseGetAgentLogsResponseStringFormat_FieldPathArrayOfValues(pathStr, valuesStr string) GetAgentLogsResponseStringFormat_FieldPathArrayOfValues {
	fpaov, err := ParseGetAgentLogsResponseStringFormat_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues struct {
	GetAgentLogsResponseStringFormat_FieldTerminalPath
	values interface{}
}

var _ GetAgentLogsResponseStringFormat_FieldPathArrayOfValues = (*GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries:
		for _, v := range fpaov.values.([][]*LogEntryStringFormat) {
			values = append(values, v)
		}
	case GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues) AsLogEntriesArrayOfValues() ([][]*LogEntryStringFormat, bool) {
	res, ok := fpaov.values.([][]*LogEntryStringFormat)
	return res, ok
}
func (fpaov *GetAgentLogsResponseStringFormat_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetAgentLogsResponseStringFormat_FieldSubPathArrayOfValues struct {
	GetAgentLogsResponseStringFormat_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetAgentLogsResponseStringFormat_FieldPathArrayOfValues = (*GetAgentLogsResponseStringFormat_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetAgentLogsResponseStringFormat_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetAgentLogsResponseStringFormat_FieldSubPathArrayOfValues) AsLogEntriesPathArrayOfValues() (LogEntryStringFormat_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LogEntryStringFormat_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LogEntryStringFormat_FieldPath interface {
	gotenobject.FieldPath
	Selector() LogEntryStringFormat_FieldPathSelector
	Get(source *LogEntryStringFormat) []interface{}
	GetSingle(source *LogEntryStringFormat) (interface{}, bool)
	ClearValue(item *LogEntryStringFormat)

	// Those methods build corresponding LogEntryStringFormat_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LogEntryStringFormat_FieldPathValue
	WithIArrayOfValues(values interface{}) LogEntryStringFormat_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LogEntryStringFormat_FieldPathArrayItemValue
}

type LogEntryStringFormat_FieldPathSelector int32

const (
	LogEntryStringFormat_FieldPathSelectorTime    LogEntryStringFormat_FieldPathSelector = 0
	LogEntryStringFormat_FieldPathSelectorLevel   LogEntryStringFormat_FieldPathSelector = 1
	LogEntryStringFormat_FieldPathSelectorPayload LogEntryStringFormat_FieldPathSelector = 2
)

func (s LogEntryStringFormat_FieldPathSelector) String() string {
	switch s {
	case LogEntryStringFormat_FieldPathSelectorTime:
		return "_time"
	case LogEntryStringFormat_FieldPathSelectorLevel:
		return "level"
	case LogEntryStringFormat_FieldPathSelectorPayload:
		return "payload"
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", s))
	}
}

func BuildLogEntryStringFormat_FieldPath(fp gotenobject.RawFieldPath) (LogEntryStringFormat_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LogEntryStringFormat")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "_time", "time", "Time":
			return &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorTime}, nil
		case "level":
			return &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorLevel}, nil
		case "payload":
			return &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorPayload}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LogEntryStringFormat", fp)
}

func ParseLogEntryStringFormat_FieldPath(rawField string) (LogEntryStringFormat_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLogEntryStringFormat_FieldPath(fp)
}

func MustParseLogEntryStringFormat_FieldPath(rawField string) LogEntryStringFormat_FieldPath {
	fp, err := ParseLogEntryStringFormat_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LogEntryStringFormat_FieldTerminalPath struct {
	selector LogEntryStringFormat_FieldPathSelector
}

var _ LogEntryStringFormat_FieldPath = (*LogEntryStringFormat_FieldTerminalPath)(nil)

func (fp *LogEntryStringFormat_FieldTerminalPath) Selector() LogEntryStringFormat_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LogEntryStringFormat_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LogEntryStringFormat_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LogEntryStringFormat
func (fp *LogEntryStringFormat_FieldTerminalPath) Get(source *LogEntryStringFormat) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LogEntryStringFormat_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case LogEntryStringFormat_FieldPathSelectorLevel:
			values = append(values, source.Level)
		case LogEntryStringFormat_FieldPathSelectorPayload:
			values = append(values, source.Payload)
		default:
			panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
		}
	}
	return
}

func (fp *LogEntryStringFormat_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LogEntryStringFormat))
}

// GetSingle returns value pointed by specific field of from source LogEntryStringFormat
func (fp *LogEntryStringFormat_FieldTerminalPath) GetSingle(source *LogEntryStringFormat) (interface{}, bool) {
	switch fp.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case LogEntryStringFormat_FieldPathSelectorLevel:
		return source.GetLevel(), source != nil
	case LogEntryStringFormat_FieldPathSelectorPayload:
		return source.GetPayload(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
	}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LogEntryStringFormat))
}

// GetDefault returns a default value of the field type
func (fp *LogEntryStringFormat_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		return (*timestamp.Timestamp)(nil)
	case LogEntryStringFormat_FieldPathSelectorLevel:
		return LogLevel_PanicLevel
	case LogEntryStringFormat_FieldPathSelectorPayload:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
	}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) ClearValue(item *LogEntryStringFormat) {
	if item != nil {
		switch fp.selector {
		case LogEntryStringFormat_FieldPathSelectorTime:
			item.Time = nil
		case LogEntryStringFormat_FieldPathSelectorLevel:
			item.Level = LogLevel_PanicLevel
		case LogEntryStringFormat_FieldPathSelectorPayload:
			item.Payload = ""
		default:
			panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
		}
	}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LogEntryStringFormat))
}

// IsLeaf - whether field path is holds simple value
func (fp *LogEntryStringFormat_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LogEntryStringFormat_FieldPathSelectorTime ||
		fp.selector == LogEntryStringFormat_FieldPathSelectorLevel ||
		fp.selector == LogEntryStringFormat_FieldPathSelectorPayload
}

func (fp *LogEntryStringFormat_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithIValue(value interface{}) LogEntryStringFormat_FieldPathValue {
	switch fp.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		return &LogEntryStringFormat_FieldTerminalPathValue{LogEntryStringFormat_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case LogEntryStringFormat_FieldPathSelectorLevel:
		return &LogEntryStringFormat_FieldTerminalPathValue{LogEntryStringFormat_FieldTerminalPath: *fp, value: value.(LogLevel)}
	case LogEntryStringFormat_FieldPathSelectorPayload:
		return &LogEntryStringFormat_FieldTerminalPathValue{LogEntryStringFormat_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
	}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithIArrayOfValues(values interface{}) LogEntryStringFormat_FieldPathArrayOfValues {
	fpaov := &LogEntryStringFormat_FieldTerminalPathArrayOfValues{LogEntryStringFormat_FieldTerminalPath: *fp}
	switch fp.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		return &LogEntryStringFormat_FieldTerminalPathArrayOfValues{LogEntryStringFormat_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case LogEntryStringFormat_FieldPathSelectorLevel:
		return &LogEntryStringFormat_FieldTerminalPathArrayOfValues{LogEntryStringFormat_FieldTerminalPath: *fp, values: values.([]LogLevel)}
	case LogEntryStringFormat_FieldPathSelectorPayload:
		return &LogEntryStringFormat_FieldTerminalPathArrayOfValues{LogEntryStringFormat_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
	}
	return fpaov
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithIArrayItemValue(value interface{}) LogEntryStringFormat_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fp.selector))
	}
}

func (fp *LogEntryStringFormat_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LogEntryStringFormat_FieldPathValue allows storing values for LogEntryStringFormat fields according to their type
type LogEntryStringFormat_FieldPathValue interface {
	LogEntryStringFormat_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LogEntryStringFormat)
	CompareWith(*LogEntryStringFormat) (cmp int, comparable bool)
}

func ParseLogEntryStringFormat_FieldPathValue(pathStr, valueStr string) (LogEntryStringFormat_FieldPathValue, error) {
	fp, err := ParseLogEntryStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntryStringFormat field path value from %s: %v", valueStr, err)
	}
	return fpv.(LogEntryStringFormat_FieldPathValue), nil
}

func MustParseLogEntryStringFormat_FieldPathValue(pathStr, valueStr string) LogEntryStringFormat_FieldPathValue {
	fpv, err := ParseLogEntryStringFormat_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LogEntryStringFormat_FieldTerminalPathValue struct {
	LogEntryStringFormat_FieldTerminalPath
	value interface{}
}

var _ LogEntryStringFormat_FieldPathValue = (*LogEntryStringFormat_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LogEntryStringFormat' as interface{}
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) AsTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) AsLevelValue() (LogLevel, bool) {
	res, ok := fpv.value.(LogLevel)
	return res, ok
}
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) AsPayloadValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object LogEntryStringFormat
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) SetTo(target **LogEntryStringFormat) {
	if *target == nil {
		*target = new(LogEntryStringFormat)
	}
	switch fpv.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamp.Timestamp)
	case LogEntryStringFormat_FieldPathSelectorLevel:
		(*target).Level = fpv.value.(LogLevel)
	case LogEntryStringFormat_FieldPathSelectorPayload:
		(*target).Payload = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fpv.selector))
	}
}

func (fpv *LogEntryStringFormat_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LogEntryStringFormat)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LogEntryStringFormat_FieldTerminalPathValue' with the value under path in 'LogEntryStringFormat'.
func (fpv *LogEntryStringFormat_FieldTerminalPathValue) CompareWith(source *LogEntryStringFormat) (int, bool) {
	switch fpv.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case LogEntryStringFormat_FieldPathSelectorLevel:
		leftValue := fpv.value.(LogLevel)
		rightValue := source.GetLevel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LogEntryStringFormat_FieldPathSelectorPayload:
		leftValue := fpv.value.(string)
		rightValue := source.GetPayload()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LogEntryStringFormat: %d", fpv.selector))
	}
}

func (fpv *LogEntryStringFormat_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LogEntryStringFormat))
}

// LogEntryStringFormat_FieldPathArrayItemValue allows storing single item in Path-specific values for LogEntryStringFormat according to their type
// Present only for array (repeated) types.
type LogEntryStringFormat_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LogEntryStringFormat_FieldPath
	ContainsValue(*LogEntryStringFormat) bool
}

// ParseLogEntryStringFormat_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLogEntryStringFormat_FieldPathArrayItemValue(pathStr, valueStr string) (LogEntryStringFormat_FieldPathArrayItemValue, error) {
	fp, err := ParseLogEntryStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntryStringFormat field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LogEntryStringFormat_FieldPathArrayItemValue), nil
}

func MustParseLogEntryStringFormat_FieldPathArrayItemValue(pathStr, valueStr string) LogEntryStringFormat_FieldPathArrayItemValue {
	fpaiv, err := ParseLogEntryStringFormat_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LogEntryStringFormat_FieldTerminalPathArrayItemValue struct {
	LogEntryStringFormat_FieldTerminalPath
	value interface{}
}

var _ LogEntryStringFormat_FieldPathArrayItemValue = (*LogEntryStringFormat_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LogEntryStringFormat as interface{}
func (fpaiv *LogEntryStringFormat_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *LogEntryStringFormat_FieldTerminalPathArrayItemValue) GetSingle(source *LogEntryStringFormat) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LogEntryStringFormat_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LogEntryStringFormat))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LogEntryStringFormat'
func (fpaiv *LogEntryStringFormat_FieldTerminalPathArrayItemValue) ContainsValue(source *LogEntryStringFormat) bool {
	slice := fpaiv.LogEntryStringFormat_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LogEntryStringFormat_FieldPathArrayOfValues allows storing slice of values for LogEntryStringFormat fields according to their type
type LogEntryStringFormat_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LogEntryStringFormat_FieldPath
}

func ParseLogEntryStringFormat_FieldPathArrayOfValues(pathStr, valuesStr string) (LogEntryStringFormat_FieldPathArrayOfValues, error) {
	fp, err := ParseLogEntryStringFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LogEntryStringFormat field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LogEntryStringFormat_FieldPathArrayOfValues), nil
}

func MustParseLogEntryStringFormat_FieldPathArrayOfValues(pathStr, valuesStr string) LogEntryStringFormat_FieldPathArrayOfValues {
	fpaov, err := ParseLogEntryStringFormat_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LogEntryStringFormat_FieldTerminalPathArrayOfValues struct {
	LogEntryStringFormat_FieldTerminalPath
	values interface{}
}

var _ LogEntryStringFormat_FieldPathArrayOfValues = (*LogEntryStringFormat_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LogEntryStringFormat_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LogEntryStringFormat_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case LogEntryStringFormat_FieldPathSelectorLevel:
		for _, v := range fpaov.values.([]LogLevel) {
			values = append(values, v)
		}
	case LogEntryStringFormat_FieldPathSelectorPayload:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LogEntryStringFormat_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *LogEntryStringFormat_FieldTerminalPathArrayOfValues) AsLevelArrayOfValues() ([]LogLevel, bool) {
	res, ok := fpaov.values.([]LogLevel)
	return res, ok
}
func (fpaov *LogEntryStringFormat_FieldTerminalPathArrayOfValues) AsPayloadArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
