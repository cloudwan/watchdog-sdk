// Code generated by protoc-gen-goten-client
// API: AgentLogService
// DO NOT EDIT!!!

package agent_log_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probe.Probe{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentLogServiceClient is the client API for AgentLogService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentLogServiceClient interface {
	ReportAgentLog(ctx context.Context, in *ReportAgentLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAgentLogs(ctx context.Context, in *GetAgentLogsRequest, opts ...grpc.CallOption) (*GetAgentLogsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAgentLogServiceClient(cc grpc.ClientConnInterface) AgentLogServiceClient {
	return &client{cc}
}

func (c *client) ReportAgentLog(ctx context.Context, in *ReportAgentLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentLogService/ReportAgentLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetAgentLogs(ctx context.Context, in *GetAgentLogsRequest, opts ...grpc.CallOption) (*GetAgentLogsResponse, error) {
	out := new(GetAgentLogsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentLogService/GetAgentLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
