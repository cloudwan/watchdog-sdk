// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/agent_log_custom.proto
// DO NOT EDIT!!!

package agent_log_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (o *ReportAgentLogRequest) GotenObjectExt() {}

func (o *ReportAgentLogRequest) MakeFullFieldMask() *ReportAgentLogRequest_FieldMask {
	return FullReportAgentLogRequest_FieldMask()
}

func (o *ReportAgentLogRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullReportAgentLogRequest_FieldMask()
}

func (o *ReportAgentLogRequest) MakeDiffFieldMask(other *ReportAgentLogRequest) *ReportAgentLogRequest_FieldMask {
	if o == nil && other == nil {
		return &ReportAgentLogRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullReportAgentLogRequest_FieldMask()
	}

	res := &ReportAgentLogRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorName})
	}

	if len(o.GetLogEntries()) == len(other.GetLogEntries()) {
		for i, lValue := range o.GetLogEntries() {
			rValue := other.GetLogEntries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorLogEntries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ReportAgentLogRequest_FieldTerminalPath{selector: ReportAgentLogRequest_FieldPathSelectorLogEntries})
	}
	return res
}

func (o *ReportAgentLogRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ReportAgentLogRequest))
}

func (o *ReportAgentLogRequest) Clone() *ReportAgentLogRequest {
	if o == nil {
		return nil
	}
	result := &ReportAgentLogRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.LogEntries = make([]*LogEntry, len(o.LogEntries))
	for i, sourceValue := range o.LogEntries {
		result.LogEntries[i] = sourceValue.Clone()
	}
	return result
}

func (o *ReportAgentLogRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ReportAgentLogRequest) Merge(source *ReportAgentLogRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	for _, sourceValue := range source.GetLogEntries() {
		exists := false
		for _, currentValue := range o.LogEntries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *LogEntry
			if sourceValue != nil {
				newDstElement = new(LogEntry)
				newDstElement.Merge(sourceValue)
			}
			o.LogEntries = append(o.LogEntries, newDstElement)
		}
	}

}

func (o *ReportAgentLogRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ReportAgentLogRequest))
}

func (o *GetAgentLogsRequest) GotenObjectExt() {}

func (o *GetAgentLogsRequest) MakeFullFieldMask() *GetAgentLogsRequest_FieldMask {
	return FullGetAgentLogsRequest_FieldMask()
}

func (o *GetAgentLogsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAgentLogsRequest_FieldMask()
}

func (o *GetAgentLogsRequest) MakeDiffFieldMask(other *GetAgentLogsRequest) *GetAgentLogsRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAgentLogsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAgentLogsRequest_FieldMask()
	}

	res := &GetAgentLogsRequest_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorProbe})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldSubPath{selector: GetAgentLogsRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetLogLevel() != other.GetLogLevel() {
		res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorLogLevel})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &GetAgentLogsRequest_FieldTerminalPath{selector: GetAgentLogsRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *GetAgentLogsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAgentLogsRequest))
}

func (o *GetAgentLogsRequest) Clone() *GetAgentLogsRequest {
	if o == nil {
		return nil
	}
	result := &GetAgentLogsRequest{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.LogLevel = o.LogLevel
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *GetAgentLogsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAgentLogsRequest) Merge(source *GetAgentLogsRequest) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.LogLevel = source.GetLogLevel()
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *GetAgentLogsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAgentLogsRequest))
}

func (o *GetAgentLogsResponse) GotenObjectExt() {}

func (o *GetAgentLogsResponse) MakeFullFieldMask() *GetAgentLogsResponse_FieldMask {
	return FullGetAgentLogsResponse_FieldMask()
}

func (o *GetAgentLogsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAgentLogsResponse_FieldMask()
}

func (o *GetAgentLogsResponse) MakeDiffFieldMask(other *GetAgentLogsResponse) *GetAgentLogsResponse_FieldMask {
	if o == nil && other == nil {
		return &GetAgentLogsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAgentLogsResponse_FieldMask()
	}

	res := &GetAgentLogsResponse_FieldMask{}

	if len(o.GetLogEntries()) == len(other.GetLogEntries()) {
		for i, lValue := range o.GetLogEntries() {
			rValue := other.GetLogEntries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorLogEntries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorLogEntries})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &GetAgentLogsResponse_FieldTerminalPath{selector: GetAgentLogsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *GetAgentLogsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAgentLogsResponse))
}

func (o *GetAgentLogsResponse) Clone() *GetAgentLogsResponse {
	if o == nil {
		return nil
	}
	result := &GetAgentLogsResponse{}
	result.LogEntries = make([]*LogEntry, len(o.LogEntries))
	for i, sourceValue := range o.LogEntries {
		result.LogEntries[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	return result
}

func (o *GetAgentLogsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAgentLogsResponse) Merge(source *GetAgentLogsResponse) {
	for _, sourceValue := range source.GetLogEntries() {
		exists := false
		for _, currentValue := range o.LogEntries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *LogEntry
			if sourceValue != nil {
				newDstElement = new(LogEntry)
				newDstElement.Merge(sourceValue)
			}
			o.LogEntries = append(o.LogEntries, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
}

func (o *GetAgentLogsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAgentLogsResponse))
}

func (o *LogEntry) GotenObjectExt() {}

func (o *LogEntry) MakeFullFieldMask() *LogEntry_FieldMask {
	return FullLogEntry_FieldMask()
}

func (o *LogEntry) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogEntry_FieldMask()
}

func (o *LogEntry) MakeDiffFieldMask(other *LogEntry) *LogEntry_FieldMask {
	if o == nil && other == nil {
		return &LogEntry_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogEntry_FieldMask()
	}

	res := &LogEntry_FieldMask{}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorTime})
	}
	if o.GetLevel() != other.GetLevel() {
		res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorLevel})
	}
	if string(o.GetPayload()) != string(other.GetPayload()) {
		res.Paths = append(res.Paths, &LogEntry_FieldTerminalPath{selector: LogEntry_FieldPathSelectorPayload})
	}
	return res
}

func (o *LogEntry) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogEntry))
}

func (o *LogEntry) Clone() *LogEntry {
	if o == nil {
		return nil
	}
	result := &LogEntry{}
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	result.Level = o.Level
	result.Payload = make([]byte, len(o.Payload))
	for i, bt := range o.Payload {
		result.Payload[i] = bt
	}
	return result
}

func (o *LogEntry) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogEntry) Merge(source *LogEntry) {
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	o.Level = source.GetLevel()
	o.Payload = make([]byte, len(source.GetPayload()))
	for i, bt := range source.GetPayload() {
		o.Payload[i] = bt
	}
}

func (o *LogEntry) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogEntry))
}

func (o *GetAgentLogsResponseStringFormat) GotenObjectExt() {}

func (o *GetAgentLogsResponseStringFormat) MakeFullFieldMask() *GetAgentLogsResponseStringFormat_FieldMask {
	return FullGetAgentLogsResponseStringFormat_FieldMask()
}

func (o *GetAgentLogsResponseStringFormat) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAgentLogsResponseStringFormat_FieldMask()
}

func (o *GetAgentLogsResponseStringFormat) MakeDiffFieldMask(other *GetAgentLogsResponseStringFormat) *GetAgentLogsResponseStringFormat_FieldMask {
	if o == nil && other == nil {
		return &GetAgentLogsResponseStringFormat_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAgentLogsResponseStringFormat_FieldMask()
	}

	res := &GetAgentLogsResponseStringFormat_FieldMask{}

	if len(o.GetLogEntries()) == len(other.GetLogEntries()) {
		for i, lValue := range o.GetLogEntries() {
			rValue := other.GetLogEntries()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorLogEntries})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &GetAgentLogsResponseStringFormat_FieldTerminalPath{selector: GetAgentLogsResponseStringFormat_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *GetAgentLogsResponseStringFormat) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAgentLogsResponseStringFormat))
}

func (o *GetAgentLogsResponseStringFormat) Clone() *GetAgentLogsResponseStringFormat {
	if o == nil {
		return nil
	}
	result := &GetAgentLogsResponseStringFormat{}
	result.LogEntries = make([]*LogEntryStringFormat, len(o.LogEntries))
	for i, sourceValue := range o.LogEntries {
		result.LogEntries[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	return result
}

func (o *GetAgentLogsResponseStringFormat) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAgentLogsResponseStringFormat) Merge(source *GetAgentLogsResponseStringFormat) {
	for _, sourceValue := range source.GetLogEntries() {
		exists := false
		for _, currentValue := range o.LogEntries {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *LogEntryStringFormat
			if sourceValue != nil {
				newDstElement = new(LogEntryStringFormat)
				newDstElement.Merge(sourceValue)
			}
			o.LogEntries = append(o.LogEntries, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
}

func (o *GetAgentLogsResponseStringFormat) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAgentLogsResponseStringFormat))
}

func (o *LogEntryStringFormat) GotenObjectExt() {}

func (o *LogEntryStringFormat) MakeFullFieldMask() *LogEntryStringFormat_FieldMask {
	return FullLogEntryStringFormat_FieldMask()
}

func (o *LogEntryStringFormat) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLogEntryStringFormat_FieldMask()
}

func (o *LogEntryStringFormat) MakeDiffFieldMask(other *LogEntryStringFormat) *LogEntryStringFormat_FieldMask {
	if o == nil && other == nil {
		return &LogEntryStringFormat_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLogEntryStringFormat_FieldMask()
	}

	res := &LogEntryStringFormat_FieldMask{}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorTime})
	}
	if o.GetLevel() != other.GetLevel() {
		res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorLevel})
	}
	if o.GetPayload() != other.GetPayload() {
		res.Paths = append(res.Paths, &LogEntryStringFormat_FieldTerminalPath{selector: LogEntryStringFormat_FieldPathSelectorPayload})
	}
	return res
}

func (o *LogEntryStringFormat) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LogEntryStringFormat))
}

func (o *LogEntryStringFormat) Clone() *LogEntryStringFormat {
	if o == nil {
		return nil
	}
	result := &LogEntryStringFormat{}
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	result.Level = o.Level
	result.Payload = o.Payload
	return result
}

func (o *LogEntryStringFormat) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LogEntryStringFormat) Merge(source *LogEntryStringFormat) {
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	o.Level = source.GetLevel()
	o.Payload = source.GetPayload()
}

func (o *LogEntryStringFormat) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LogEntryStringFormat))
}
