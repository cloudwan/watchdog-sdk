// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_config_service.proto
// DO NOT EDIT!!!

package probing_config_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_config "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_config"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_config.ProbingConfig{}
	_ = &project.Project{}
)

func (o *GetProbingConfigRequest) GotenObjectExt() {}

func (o *GetProbingConfigRequest) MakeFullFieldMask() *GetProbingConfigRequest_FieldMask {
	return FullGetProbingConfigRequest_FieldMask()
}

func (o *GetProbingConfigRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbingConfigRequest_FieldMask()
}

func (o *GetProbingConfigRequest) MakeDiffFieldMask(other *GetProbingConfigRequest) *GetProbingConfigRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbingConfigRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbingConfigRequest_FieldMask()
	}

	res := &GetProbingConfigRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbingConfigRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbingConfigRequest))
}

func (o *GetProbingConfigRequest) Clone() *GetProbingConfigRequest {
	if o == nil {
		return nil
	}
	result := &GetProbingConfigRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_config.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbingConfigRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbingConfigRequest) Merge(source *GetProbingConfigRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_config.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbingConfigRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbingConfigRequest))
}

func (o *BatchGetProbingConfigsRequest) GotenObjectExt() {}

func (o *BatchGetProbingConfigsRequest) MakeFullFieldMask() *BatchGetProbingConfigsRequest_FieldMask {
	return FullBatchGetProbingConfigsRequest_FieldMask()
}

func (o *BatchGetProbingConfigsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingConfigsRequest_FieldMask()
}

func (o *BatchGetProbingConfigsRequest) MakeDiffFieldMask(other *BatchGetProbingConfigsRequest) *BatchGetProbingConfigsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingConfigsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingConfigsRequest_FieldMask()
	}

	res := &BatchGetProbingConfigsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbingConfigsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingConfigsRequest))
}

func (o *BatchGetProbingConfigsRequest) Clone() *BatchGetProbingConfigsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingConfigsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_config.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*probing_config.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probing_config.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbingConfigsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingConfigsRequest) Merge(source *BatchGetProbingConfigsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_config.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_config.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_config.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbingConfigsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingConfigsRequest))
}

func (o *BatchGetProbingConfigsResponse) GotenObjectExt() {}

func (o *BatchGetProbingConfigsResponse) MakeFullFieldMask() *BatchGetProbingConfigsResponse_FieldMask {
	return FullBatchGetProbingConfigsResponse_FieldMask()
}

func (o *BatchGetProbingConfigsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingConfigsResponse_FieldMask()
}

func (o *BatchGetProbingConfigsResponse) MakeDiffFieldMask(other *BatchGetProbingConfigsResponse) *BatchGetProbingConfigsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingConfigsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingConfigsResponse_FieldMask()
	}

	res := &BatchGetProbingConfigsResponse_FieldMask{}

	if len(o.GetProbingConfigs()) == len(other.GetProbingConfigs()) {
		for i, lValue := range o.GetProbingConfigs() {
			rValue := other.GetProbingConfigs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbingConfigsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingConfigsResponse))
}

func (o *BatchGetProbingConfigsResponse) Clone() *BatchGetProbingConfigsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingConfigsResponse{}
	result.ProbingConfigs = make([]*probing_config.ProbingConfig, len(o.ProbingConfigs))
	for i, sourceValue := range o.ProbingConfigs {
		result.ProbingConfigs[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probing_config.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probing_config.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbingConfigsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingConfigsResponse) Merge(source *BatchGetProbingConfigsResponse) {
	for _, sourceValue := range source.GetProbingConfigs() {
		exists := false
		for _, currentValue := range o.ProbingConfigs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_config.ProbingConfig
			if sourceValue != nil {
				newDstElement = new(probing_config.ProbingConfig)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingConfigs = append(o.ProbingConfigs, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_config.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_config.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbingConfigsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingConfigsResponse))
}

func (o *ListProbingConfigsRequest) GotenObjectExt() {}

func (o *ListProbingConfigsRequest) MakeFullFieldMask() *ListProbingConfigsRequest_FieldMask {
	return FullListProbingConfigsRequest_FieldMask()
}

func (o *ListProbingConfigsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingConfigsRequest_FieldMask()
}

func (o *ListProbingConfigsRequest) MakeDiffFieldMask(other *ListProbingConfigsRequest) *ListProbingConfigsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbingConfigsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingConfigsRequest_FieldMask()
	}

	res := &ListProbingConfigsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProbingConfigsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingConfigsRequest))
}

func (o *ListProbingConfigsRequest) Clone() *ListProbingConfigsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbingConfigsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_config.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_config.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_config.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_config.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProbingConfigsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingConfigsRequest) Merge(source *ListProbingConfigsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_config.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_config.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_config.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_config.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProbingConfigsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingConfigsRequest))
}

func (o *ListProbingConfigsResponse) GotenObjectExt() {}

func (o *ListProbingConfigsResponse) MakeFullFieldMask() *ListProbingConfigsResponse_FieldMask {
	return FullListProbingConfigsResponse_FieldMask()
}

func (o *ListProbingConfigsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingConfigsResponse_FieldMask()
}

func (o *ListProbingConfigsResponse) MakeDiffFieldMask(other *ListProbingConfigsResponse) *ListProbingConfigsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbingConfigsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingConfigsResponse_FieldMask()
	}

	res := &ListProbingConfigsResponse_FieldMask{}

	if len(o.GetProbingConfigs()) == len(other.GetProbingConfigs()) {
		for i, lValue := range o.GetProbingConfigs() {
			rValue := other.GetProbingConfigs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorProbingConfigs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorProbingConfigs})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProbingConfigsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingConfigsResponse))
}

func (o *ListProbingConfigsResponse) Clone() *ListProbingConfigsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbingConfigsResponse{}
	result.ProbingConfigs = make([]*probing_config.ProbingConfig, len(o.ProbingConfigs))
	for i, sourceValue := range o.ProbingConfigs {
		result.ProbingConfigs[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_config.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_config.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProbingConfigsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingConfigsResponse) Merge(source *ListProbingConfigsResponse) {
	for _, sourceValue := range source.GetProbingConfigs() {
		exists := false
		for _, currentValue := range o.ProbingConfigs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_config.ProbingConfig
			if sourceValue != nil {
				newDstElement = new(probing_config.ProbingConfig)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingConfigs = append(o.ProbingConfigs, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_config.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_config.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProbingConfigsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingConfigsResponse))
}

func (o *WatchProbingConfigRequest) GotenObjectExt() {}

func (o *WatchProbingConfigRequest) MakeFullFieldMask() *WatchProbingConfigRequest_FieldMask {
	return FullWatchProbingConfigRequest_FieldMask()
}

func (o *WatchProbingConfigRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingConfigRequest_FieldMask()
}

func (o *WatchProbingConfigRequest) MakeDiffFieldMask(other *WatchProbingConfigRequest) *WatchProbingConfigRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingConfigRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingConfigRequest_FieldMask()
	}

	res := &WatchProbingConfigRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbingConfigRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingConfigRequest))
}

func (o *WatchProbingConfigRequest) Clone() *WatchProbingConfigRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingConfigRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_config.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbingConfigRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingConfigRequest) Merge(source *WatchProbingConfigRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_config.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbingConfigRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingConfigRequest))
}

func (o *WatchProbingConfigResponse) GotenObjectExt() {}

func (o *WatchProbingConfigResponse) MakeFullFieldMask() *WatchProbingConfigResponse_FieldMask {
	return FullWatchProbingConfigResponse_FieldMask()
}

func (o *WatchProbingConfigResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingConfigResponse_FieldMask()
}

func (o *WatchProbingConfigResponse) MakeDiffFieldMask(other *WatchProbingConfigResponse) *WatchProbingConfigResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingConfigResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingConfigResponse_FieldMask()
	}

	res := &WatchProbingConfigResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbingConfigResponse_FieldTerminalPath{selector: WatchProbingConfigResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbingConfigResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingConfigResponse))
}

func (o *WatchProbingConfigResponse) Clone() *WatchProbingConfigResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingConfigResponse{}
	result.Change = proto.Clone(o.Change).(*probing_config.ProbingConfigChange)
	return result
}

func (o *WatchProbingConfigResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingConfigResponse) Merge(source *WatchProbingConfigResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probing_config.ProbingConfigChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbingConfigResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingConfigResponse))
}

func (o *WatchProbingConfigsRequest) GotenObjectExt() {}

func (o *WatchProbingConfigsRequest) MakeFullFieldMask() *WatchProbingConfigsRequest_FieldMask {
	return FullWatchProbingConfigsRequest_FieldMask()
}

func (o *WatchProbingConfigsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingConfigsRequest_FieldMask()
}

func (o *WatchProbingConfigsRequest) MakeDiffFieldMask(other *WatchProbingConfigsRequest) *WatchProbingConfigsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingConfigsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingConfigsRequest_FieldMask()
	}

	res := &WatchProbingConfigsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbingConfigsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingConfigsRequest))
}

func (o *WatchProbingConfigsRequest) Clone() *WatchProbingConfigsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingConfigsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_config.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_config.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_config.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_config.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbingConfigsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingConfigsRequest) Merge(source *WatchProbingConfigsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_config.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_config.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_config.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_config.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbingConfigsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingConfigsRequest))
}

func (o *WatchProbingConfigsResponse) GotenObjectExt() {}

func (o *WatchProbingConfigsResponse) MakeFullFieldMask() *WatchProbingConfigsResponse_FieldMask {
	return FullWatchProbingConfigsResponse_FieldMask()
}

func (o *WatchProbingConfigsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingConfigsResponse_FieldMask()
}

func (o *WatchProbingConfigsResponse) MakeDiffFieldMask(other *WatchProbingConfigsResponse) *WatchProbingConfigsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingConfigsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingConfigsResponse_FieldMask()
	}

	res := &WatchProbingConfigsResponse_FieldMask{}

	if len(o.GetProbingConfigChanges()) == len(other.GetProbingConfigChanges()) {
		for i, lValue := range o.GetProbingConfigChanges() {
			rValue := other.GetProbingConfigChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldSubPath{selector: WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbingConfigsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingConfigsResponse))
}

func (o *WatchProbingConfigsResponse) Clone() *WatchProbingConfigsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingConfigsResponse{}
	result.ProbingConfigChanges = make([]*probing_config.ProbingConfigChange, len(o.ProbingConfigChanges))
	for i, sourceValue := range o.ProbingConfigChanges {
		result.ProbingConfigChanges[i] = proto.Clone(sourceValue).(*probing_config.ProbingConfigChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbingConfigsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingConfigsResponse) Merge(source *WatchProbingConfigsResponse) {
	for _, sourceValue := range source.GetProbingConfigChanges() {
		exists := false
		for _, currentValue := range o.ProbingConfigChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_config.ProbingConfigChange
			if sourceValue != nil {
				newDstElement = new(probing_config.ProbingConfigChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbingConfigChanges = append(o.ProbingConfigChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbingConfigsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbingConfigsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingConfigsResponse))
}

func (o *WatchProbingConfigsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbingConfigsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbingConfigsResponse_PageTokenChange_FieldMask {
	return FullWatchProbingConfigsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingConfigsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingConfigsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingConfigsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbingConfigsResponse_PageTokenChange) *WatchProbingConfigsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingConfigsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingConfigsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbingConfigsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbingConfigsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingConfigsResponse_PageTokenChange))
}

func (o *WatchProbingConfigsResponse_PageTokenChange) Clone() *WatchProbingConfigsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbingConfigsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_config.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_config.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbingConfigsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingConfigsResponse_PageTokenChange) Merge(source *WatchProbingConfigsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_config.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_config.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbingConfigsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingConfigsResponse_PageTokenChange))
}

func (o *CreateProbingConfigRequest) GotenObjectExt() {}

func (o *CreateProbingConfigRequest) MakeFullFieldMask() *CreateProbingConfigRequest_FieldMask {
	return FullCreateProbingConfigRequest_FieldMask()
}

func (o *CreateProbingConfigRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbingConfigRequest_FieldMask()
}

func (o *CreateProbingConfigRequest) MakeDiffFieldMask(other *CreateProbingConfigRequest) *CreateProbingConfigRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbingConfigRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbingConfigRequest_FieldMask()
	}

	res := &CreateProbingConfigRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbingConfigRequest_FieldTerminalPath{selector: CreateProbingConfigRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbingConfig().MakeDiffFieldMask(other.GetProbingConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbingConfigRequest_FieldTerminalPath{selector: CreateProbingConfigRequest_FieldPathSelectorProbingConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbingConfigRequest_FieldSubPath{selector: CreateProbingConfigRequest_FieldPathSelectorProbingConfig, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbingConfigRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbingConfigRequest))
}

func (o *CreateProbingConfigRequest) Clone() *CreateProbingConfigRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbingConfigRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_config.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingConfig = o.ProbingConfig.Clone()
	return result
}

func (o *CreateProbingConfigRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbingConfigRequest) Merge(source *CreateProbingConfigRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_config.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbingConfig() != nil {
		if o.ProbingConfig == nil {
			o.ProbingConfig = new(probing_config.ProbingConfig)
		}
		o.ProbingConfig.Merge(source.GetProbingConfig())
	}
}

func (o *CreateProbingConfigRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbingConfigRequest))
}

func (o *UpdateProbingConfigRequest) GotenObjectExt() {}

func (o *UpdateProbingConfigRequest) MakeFullFieldMask() *UpdateProbingConfigRequest_FieldMask {
	return FullUpdateProbingConfigRequest_FieldMask()
}

func (o *UpdateProbingConfigRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingConfigRequest_FieldMask()
}

func (o *UpdateProbingConfigRequest) MakeDiffFieldMask(other *UpdateProbingConfigRequest) *UpdateProbingConfigRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingConfigRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingConfigRequest_FieldMask()
	}

	res := &UpdateProbingConfigRequest_FieldMask{}
	{
		subMask := o.GetProbingConfig().MakeDiffFieldMask(other.GetProbingConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorProbingConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingConfigRequest_FieldSubPath{selector: UpdateProbingConfigRequest_FieldPathSelectorProbingConfig, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingConfigRequest_FieldSubPath{selector: UpdateProbingConfigRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbingConfigRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingConfigRequest))
}

func (o *UpdateProbingConfigRequest) Clone() *UpdateProbingConfigRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbingConfigRequest{}
	result.ProbingConfig = o.ProbingConfig.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probing_config.ProbingConfig_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbingConfigRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingConfigRequest) Merge(source *UpdateProbingConfigRequest) {
	if source.GetProbingConfig() != nil {
		if o.ProbingConfig == nil {
			o.ProbingConfig = new(probing_config.ProbingConfig)
		}
		o.ProbingConfig.Merge(source.GetProbingConfig())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbingConfigRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbingConfigRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingConfigRequest))
}

func (o *UpdateProbingConfigRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbingConfigRequest_CAS) MakeFullFieldMask() *UpdateProbingConfigRequest_CAS_FieldMask {
	return FullUpdateProbingConfigRequest_CAS_FieldMask()
}

func (o *UpdateProbingConfigRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingConfigRequest_CAS_FieldMask()
}

func (o *UpdateProbingConfigRequest_CAS) MakeDiffFieldMask(other *UpdateProbingConfigRequest_CAS) *UpdateProbingConfigRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingConfigRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingConfigRequest_CAS_FieldMask()
	}

	res := &UpdateProbingConfigRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingConfigRequestCAS_FieldTerminalPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingConfigRequestCAS_FieldSubPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbingConfigRequestCAS_FieldTerminalPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbingConfigRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingConfigRequest_CAS))
}

func (o *UpdateProbingConfigRequest_CAS) Clone() *UpdateProbingConfigRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbingConfigRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_config.ProbingConfig_FieldMask)
	return result
}

func (o *UpdateProbingConfigRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingConfigRequest_CAS) Merge(source *UpdateProbingConfigRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probing_config.ProbingConfig)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_config.ProbingConfig_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbingConfigRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingConfigRequest_CAS))
}

func (o *DeleteProbingConfigRequest) GotenObjectExt() {}

func (o *DeleteProbingConfigRequest) MakeFullFieldMask() *DeleteProbingConfigRequest_FieldMask {
	return FullDeleteProbingConfigRequest_FieldMask()
}

func (o *DeleteProbingConfigRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbingConfigRequest_FieldMask()
}

func (o *DeleteProbingConfigRequest) MakeDiffFieldMask(other *DeleteProbingConfigRequest) *DeleteProbingConfigRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbingConfigRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbingConfigRequest_FieldMask()
	}

	res := &DeleteProbingConfigRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbingConfigRequest_FieldTerminalPath{selector: DeleteProbingConfigRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbingConfigRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbingConfigRequest))
}

func (o *DeleteProbingConfigRequest) Clone() *DeleteProbingConfigRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbingConfigRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_config.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbingConfigRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbingConfigRequest) Merge(source *DeleteProbingConfigRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_config.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbingConfigRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbingConfigRequest))
}
