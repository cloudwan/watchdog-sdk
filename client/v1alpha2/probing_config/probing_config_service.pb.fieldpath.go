// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_config_service.proto
// DO NOT EDIT!!!

package probing_config_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_config "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_config"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_config.ProbingConfig{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbingConfigRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbingConfigRequest_FieldPathSelector
	Get(source *GetProbingConfigRequest) []interface{}
	GetSingle(source *GetProbingConfigRequest) (interface{}, bool)
	ClearValue(item *GetProbingConfigRequest)

	// Those methods build corresponding GetProbingConfigRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbingConfigRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbingConfigRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbingConfigRequest_FieldPathArrayItemValue
}

type GetProbingConfigRequest_FieldPathSelector int32

const (
	GetProbingConfigRequest_FieldPathSelectorName      GetProbingConfigRequest_FieldPathSelector = 0
	GetProbingConfigRequest_FieldPathSelectorFieldMask GetProbingConfigRequest_FieldPathSelector = 1
	GetProbingConfigRequest_FieldPathSelectorView      GetProbingConfigRequest_FieldPathSelector = 2
)

func (s GetProbingConfigRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbingConfigRequest_FieldPathSelectorName:
		return "name"
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbingConfigRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", s))
	}
}

func BuildGetProbingConfigRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbingConfigRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbingConfigRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbingConfigRequest_FieldTerminalPath{selector: GetProbingConfigRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbingConfigRequest", fp)
}

func ParseGetProbingConfigRequest_FieldPath(rawField string) (GetProbingConfigRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbingConfigRequest_FieldPath(fp)
}

func MustParseGetProbingConfigRequest_FieldPath(rawField string) GetProbingConfigRequest_FieldPath {
	fp, err := ParseGetProbingConfigRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbingConfigRequest_FieldTerminalPath struct {
	selector GetProbingConfigRequest_FieldPathSelector
}

var _ GetProbingConfigRequest_FieldPath = (*GetProbingConfigRequest_FieldTerminalPath)(nil)

func (fp *GetProbingConfigRequest_FieldTerminalPath) Selector() GetProbingConfigRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbingConfigRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbingConfigRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbingConfigRequest
func (fp *GetProbingConfigRequest_FieldTerminalPath) Get(source *GetProbingConfigRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbingConfigRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbingConfigRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbingConfigRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbingConfigRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbingConfigRequest
func (fp *GetProbingConfigRequest_FieldTerminalPath) GetSingle(source *GetProbingConfigRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbingConfigRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbingConfigRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		return (*probing_config.Reference)(nil)
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case GetProbingConfigRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) ClearValue(item *GetProbingConfigRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbingConfigRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbingConfigRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbingConfigRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbingConfigRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbingConfigRequest_FieldPathSelectorName ||
		fp.selector == GetProbingConfigRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbingConfigRequest_FieldPathSelectorView
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbingConfigRequest_FieldPathValue {
	switch fp.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		return &GetProbingConfigRequest_FieldTerminalPathValue{GetProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Reference)}
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		return &GetProbingConfigRequest_FieldTerminalPathValue{GetProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case GetProbingConfigRequest_FieldPathSelectorView:
		return &GetProbingConfigRequest_FieldTerminalPathValue{GetProbingConfigRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbingConfigRequest_FieldPathArrayOfValues {
	fpaov := &GetProbingConfigRequest_FieldTerminalPathArrayOfValues{GetProbingConfigRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		return &GetProbingConfigRequest_FieldTerminalPathArrayOfValues{GetProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.Reference)}
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		return &GetProbingConfigRequest_FieldTerminalPathArrayOfValues{GetProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case GetProbingConfigRequest_FieldPathSelectorView:
		return &GetProbingConfigRequest_FieldTerminalPathArrayOfValues{GetProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbingConfigRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *GetProbingConfigRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbingConfigRequest_FieldPathValue allows storing values for GetProbingConfigRequest fields according to their type
type GetProbingConfigRequest_FieldPathValue interface {
	GetProbingConfigRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbingConfigRequest)
	CompareWith(*GetProbingConfigRequest) (cmp int, comparable bool)
}

func ParseGetProbingConfigRequest_FieldPathValue(pathStr, valueStr string) (GetProbingConfigRequest_FieldPathValue, error) {
	fp, err := ParseGetProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingConfigRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbingConfigRequest_FieldPathValue), nil
}

func MustParseGetProbingConfigRequest_FieldPathValue(pathStr, valueStr string) GetProbingConfigRequest_FieldPathValue {
	fpv, err := ParseGetProbingConfigRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbingConfigRequest_FieldTerminalPathValue struct {
	GetProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingConfigRequest_FieldPathValue = (*GetProbingConfigRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbingConfigRequest' as interface{}
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) AsNameValue() (*probing_config.Reference, bool) {
	res, ok := fpv.value.(*probing_config.Reference)
	return res, ok
}
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbingConfigRequest
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) SetTo(target **GetProbingConfigRequest) {
	if *target == nil {
		*target = new(GetProbingConfigRequest)
	}
	switch fpv.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_config.Reference)
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case GetProbingConfigRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbingConfigRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbingConfigRequest_FieldTerminalPathValue' with the value under path in 'GetProbingConfigRequest'.
func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) CompareWith(source *GetProbingConfigRequest) (int, bool) {
	switch fpv.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_config.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbingConfigRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingConfigRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbingConfigRequest))
}

// GetProbingConfigRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbingConfigRequest according to their type
// Present only for array (repeated) types.
type GetProbingConfigRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbingConfigRequest_FieldPath
	ContainsValue(*GetProbingConfigRequest) bool
}

// ParseGetProbingConfigRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbingConfigRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingConfigRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbingConfigRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbingConfigRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbingConfigRequest_FieldTerminalPathArrayItemValue struct {
	GetProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingConfigRequest_FieldPathArrayItemValue = (*GetProbingConfigRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbingConfigRequest as interface{}
func (fpaiv *GetProbingConfigRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbingConfigRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbingConfigRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbingConfigRequest'
func (fpaiv *GetProbingConfigRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbingConfigRequest) bool {
	slice := fpaiv.GetProbingConfigRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbingConfigRequest_FieldPathArrayOfValues allows storing slice of values for GetProbingConfigRequest fields according to their type
type GetProbingConfigRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbingConfigRequest_FieldPath
}

func ParseGetProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbingConfigRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingConfigRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbingConfigRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbingConfigRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbingConfigRequest_FieldTerminalPathArrayOfValues struct {
	GetProbingConfigRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbingConfigRequest_FieldPathArrayOfValues = (*GetProbingConfigRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbingConfigRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbingConfigRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_config.Reference) {
			values = append(values, v)
		}
	case GetProbingConfigRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case GetProbingConfigRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbingConfigRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_config.Reference, bool) {
	res, ok := fpaov.values.([]*probing_config.Reference)
	return res, ok
}
func (fpaov *GetProbingConfigRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *GetProbingConfigRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingConfigsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingConfigsRequest_FieldPathSelector
	Get(source *BatchGetProbingConfigsRequest) []interface{}
	GetSingle(source *BatchGetProbingConfigsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbingConfigsRequest)

	// Those methods build corresponding BatchGetProbingConfigsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingConfigsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingConfigsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingConfigsRequest_FieldPathArrayItemValue
}

type BatchGetProbingConfigsRequest_FieldPathSelector int32

const (
	BatchGetProbingConfigsRequest_FieldPathSelectorNames     BatchGetProbingConfigsRequest_FieldPathSelector = 0
	BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask BatchGetProbingConfigsRequest_FieldPathSelector = 1
	BatchGetProbingConfigsRequest_FieldPathSelectorView      BatchGetProbingConfigsRequest_FieldPathSelector = 2
)

func (s BatchGetProbingConfigsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", s))
	}
}

func BuildBatchGetProbingConfigsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingConfigsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingConfigsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbingConfigsRequest_FieldTerminalPath{selector: BatchGetProbingConfigsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingConfigsRequest", fp)
}

func ParseBatchGetProbingConfigsRequest_FieldPath(rawField string) (BatchGetProbingConfigsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingConfigsRequest_FieldPath(fp)
}

func MustParseBatchGetProbingConfigsRequest_FieldPath(rawField string) BatchGetProbingConfigsRequest_FieldPath {
	fp, err := ParseBatchGetProbingConfigsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingConfigsRequest_FieldTerminalPath struct {
	selector BatchGetProbingConfigsRequest_FieldPathSelector
}

var _ BatchGetProbingConfigsRequest_FieldPath = (*BatchGetProbingConfigsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) Selector() BatchGetProbingConfigsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingConfigsRequest
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) Get(source *BatchGetProbingConfigsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbingConfigsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingConfigsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingConfigsRequest
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbingConfigsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingConfigsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return ([]*probing_config.Reference)(nil)
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbingConfigsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbingConfigsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingConfigsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingConfigsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbingConfigsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingConfigsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathValue{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, value: value.([]*probing_config.Reference)}
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathValue{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathValue{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([][]*probing_config.Reference)}
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingConfigsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return &BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue{BatchGetProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbingConfigsRequest_FieldPathValue allows storing values for BatchGetProbingConfigsRequest fields according to their type
type BatchGetProbingConfigsRequest_FieldPathValue interface {
	BatchGetProbingConfigsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingConfigsRequest)
	CompareWith(*BatchGetProbingConfigsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbingConfigsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingConfigsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbingConfigsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbingConfigsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingConfigsRequest_FieldTerminalPathValue struct {
	BatchGetProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingConfigsRequest_FieldPathValue = (*BatchGetProbingConfigsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingConfigsRequest' as interface{}
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probing_config.Reference, bool) {
	res, ok := fpv.value.([]*probing_config.Reference)
	return res, ok
}
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingConfigsRequest
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbingConfigsRequest) {
	if *target == nil {
		*target = new(BatchGetProbingConfigsRequest)
	}
	switch fpv.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probing_config.Reference)
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingConfigsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingConfigsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbingConfigsRequest'.
func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbingConfigsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingConfigsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingConfigsRequest))
}

// BatchGetProbingConfigsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingConfigsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbingConfigsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingConfigsRequest_FieldPath
	ContainsValue(*BatchGetProbingConfigsRequest) bool
}

// ParseBatchGetProbingConfigsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingConfigsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingConfigsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingConfigsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingConfigsRequest_FieldPathArrayItemValue = (*BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingConfigsRequest as interface{}
func (fpaiv *BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probing_config.Reference, bool) {
	res, ok := fpaiv.value.(*probing_config.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingConfigsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingConfigsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingConfigsRequest'
func (fpaiv *BatchGetProbingConfigsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingConfigsRequest) bool {
	slice := fpaiv.BatchGetProbingConfigsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbingConfigsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingConfigsRequest fields according to their type
type BatchGetProbingConfigsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingConfigsRequest_FieldPath
}

func ParseBatchGetProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingConfigsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingConfigsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingConfigsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingConfigsRequest_FieldPathArrayOfValues = (*BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingConfigsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probing_config.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingConfigsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbingConfigsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probing_config.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_config.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingConfigsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingConfigsResponse_FieldPathSelector
	Get(source *BatchGetProbingConfigsResponse) []interface{}
	GetSingle(source *BatchGetProbingConfigsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbingConfigsResponse)

	// Those methods build corresponding BatchGetProbingConfigsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingConfigsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathArrayItemValue
}

type BatchGetProbingConfigsResponse_FieldPathSelector int32

const (
	BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs BatchGetProbingConfigsResponse_FieldPathSelector = 0
	BatchGetProbingConfigsResponse_FieldPathSelectorMissing        BatchGetProbingConfigsResponse_FieldPathSelector = 1
)

func (s BatchGetProbingConfigsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return "probing_configs"
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", s))
	}
}

func BuildBatchGetProbingConfigsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingConfigsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingConfigsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_configs", "probingConfigs", "probing-configs":
			return &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs}, nil
		case "missing":
			return &BatchGetProbingConfigsResponse_FieldTerminalPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_configs", "probingConfigs", "probing-configs":
			if subpath, err := probing_config.BuildProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbingConfigsResponse_FieldSubPath{selector: BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingConfigsResponse", fp)
}

func ParseBatchGetProbingConfigsResponse_FieldPath(rawField string) (BatchGetProbingConfigsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingConfigsResponse_FieldPath(fp)
}

func MustParseBatchGetProbingConfigsResponse_FieldPath(rawField string) BatchGetProbingConfigsResponse_FieldPath {
	fp, err := ParseBatchGetProbingConfigsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingConfigsResponse_FieldTerminalPath struct {
	selector BatchGetProbingConfigsResponse_FieldPathSelector
}

var _ BatchGetProbingConfigsResponse_FieldPath = (*BatchGetProbingConfigsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) Selector() BatchGetProbingConfigsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingConfigsResponse
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) Get(source *BatchGetProbingConfigsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			for _, value := range source.GetProbingConfigs() {
				values = append(values, value)
			}
		case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingConfigsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingConfigsResponse
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbingConfigsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		res := source.GetProbingConfigs()
		return res, res != nil
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return ([]*probing_config.ProbingConfig)(nil)
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return ([]*probing_config.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbingConfigsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			item.ProbingConfigs = nil
		case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingConfigsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathValue{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, value: value.([]*probing_config.ProbingConfig)}
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathValue{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, value: value.([]*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_config.ProbingConfig)}
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig)}
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingConfigsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbingConfigsResponse_FieldSubPath struct {
	selector BatchGetProbingConfigsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbingConfigsResponse_FieldPath = (*BatchGetProbingConfigsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) Selector() BatchGetProbingConfigsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) AsProbingConfigsSubPath() (probing_config.ProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(probing_config.ProbingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbingConfigsResponse
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) Get(source *BatchGetProbingConfigsResponse) (values []interface{}) {
	if asProbingConfigFieldPath, ok := fps.AsProbingConfigsSubPath(); ok {
		for _, item := range source.GetProbingConfigs() {
			values = append(values, asProbingConfigFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbingConfigsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbingConfigsResponse
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) GetSingle(source *BatchGetProbingConfigsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		if len(source.GetProbingConfigs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingConfigs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) ClearValue(item *BatchGetProbingConfigsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			for _, subItem := range item.ProbingConfigs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbingConfigsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProbingConfigsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathValue {
	return &BatchGetProbingConfigsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbingConfigsResponse_FieldPathArrayOfValues {
	return &BatchGetProbingConfigsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbingConfigsResponse_FieldPathArrayItemValue {
	return &BatchGetProbingConfigsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbingConfigsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbingConfigsResponse_FieldPathValue allows storing values for BatchGetProbingConfigsResponse fields according to their type
type BatchGetProbingConfigsResponse_FieldPathValue interface {
	BatchGetProbingConfigsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingConfigsResponse)
	CompareWith(*BatchGetProbingConfigsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbingConfigsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingConfigsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbingConfigsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbingConfigsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingConfigsResponse_FieldTerminalPathValue struct {
	BatchGetProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingConfigsResponse_FieldPathValue = (*BatchGetProbingConfigsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingConfigsResponse' as interface{}
func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) AsProbingConfigsValue() ([]*probing_config.ProbingConfig, bool) {
	res, ok := fpv.value.([]*probing_config.ProbingConfig)
	return res, ok
}
func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probing_config.Reference, bool) {
	res, ok := fpv.value.([]*probing_config.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingConfigsResponse
func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbingConfigsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingConfigsResponse)
	}
	switch fpv.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		(*target).ProbingConfigs = fpv.value.([]*probing_config.ProbingConfig)
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probing_config.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingConfigsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingConfigsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbingConfigsResponse'.
func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbingConfigsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return 0, false
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingConfigsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingConfigsResponse))
}

type BatchGetProbingConfigsResponse_FieldSubPathValue struct {
	BatchGetProbingConfigsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbingConfigsResponse_FieldPathValue = (*BatchGetProbingConfigsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) AsProbingConfigsPathValue() (probing_config.ProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) SetTo(target **BatchGetProbingConfigsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingConfigsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingConfigsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbingConfigsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingConfigsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbingConfigsResponse))
}

// BatchGetProbingConfigsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingConfigsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbingConfigsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingConfigsResponse_FieldPath
	ContainsValue(*BatchGetProbingConfigsResponse) bool
}

// ParseBatchGetProbingConfigsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingConfigsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingConfigsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingConfigsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingConfigsResponse_FieldPathArrayItemValue = (*BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingConfigsResponse as interface{}
func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) AsProbingConfigsItemValue() (*probing_config.ProbingConfig, bool) {
	res, ok := fpaiv.value.(*probing_config.ProbingConfig)
	return res, ok
}
func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probing_config.Reference, bool) {
	res, ok := fpaiv.value.(*probing_config.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingConfigsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingConfigsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingConfigsResponse'
func (fpaiv *BatchGetProbingConfigsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingConfigsResponse) bool {
	slice := fpaiv.BatchGetProbingConfigsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbingConfigsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbingConfigsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbingConfigsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbingConfigsResponse_FieldSubPathArrayItemValue) AsProbingConfigsPathItemValue() (probing_config.ProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingConfigsResponse'
func (fpaivs *BatchGetProbingConfigsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbingConfigsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingConfigsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbingConfigsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingConfigsResponse fields according to their type
type BatchGetProbingConfigsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingConfigsResponse_FieldPath
}

func ParseBatchGetProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingConfigsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingConfigsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingConfigsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingConfigsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingConfigsResponse_FieldPathArrayOfValues = (*BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		for _, v := range fpaov.values.([][]*probing_config.ProbingConfig) {
			values = append(values, v)
		}
	case BatchGetProbingConfigsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probing_config.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsProbingConfigsArrayOfValues() ([][]*probing_config.ProbingConfig, bool) {
	res, ok := fpaov.values.([][]*probing_config.ProbingConfig)
	return res, ok
}
func (fpaov *BatchGetProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probing_config.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_config.Reference)
	return res, ok
}

type BatchGetProbingConfigsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbingConfigsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbingConfigsResponse_FieldPathArrayOfValues = (*BatchGetProbingConfigsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbingConfigsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbingConfigsResponse_FieldSubPathArrayOfValues) AsProbingConfigsPathArrayOfValues() (probing_config.ProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_config.ProbingConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingConfigsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingConfigsRequest_FieldPathSelector
	Get(source *ListProbingConfigsRequest) []interface{}
	GetSingle(source *ListProbingConfigsRequest) (interface{}, bool)
	ClearValue(item *ListProbingConfigsRequest)

	// Those methods build corresponding ListProbingConfigsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingConfigsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingConfigsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingConfigsRequest_FieldPathArrayItemValue
}

type ListProbingConfigsRequest_FieldPathSelector int32

const (
	ListProbingConfigsRequest_FieldPathSelectorParent    ListProbingConfigsRequest_FieldPathSelector = 0
	ListProbingConfigsRequest_FieldPathSelectorPageSize  ListProbingConfigsRequest_FieldPathSelector = 1
	ListProbingConfigsRequest_FieldPathSelectorPageToken ListProbingConfigsRequest_FieldPathSelector = 2
	ListProbingConfigsRequest_FieldPathSelectorOrderBy   ListProbingConfigsRequest_FieldPathSelector = 3
	ListProbingConfigsRequest_FieldPathSelectorFilter    ListProbingConfigsRequest_FieldPathSelector = 4
	ListProbingConfigsRequest_FieldPathSelectorFieldMask ListProbingConfigsRequest_FieldPathSelector = 5
	ListProbingConfigsRequest_FieldPathSelectorView      ListProbingConfigsRequest_FieldPathSelector = 6
)

func (s ListProbingConfigsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbingConfigsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", s))
	}
}

func BuildListProbingConfigsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbingConfigsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingConfigsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbingConfigsRequest_FieldTerminalPath{selector: ListProbingConfigsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingConfigsRequest", fp)
}

func ParseListProbingConfigsRequest_FieldPath(rawField string) (ListProbingConfigsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingConfigsRequest_FieldPath(fp)
}

func MustParseListProbingConfigsRequest_FieldPath(rawField string) ListProbingConfigsRequest_FieldPath {
	fp, err := ParseListProbingConfigsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingConfigsRequest_FieldTerminalPath struct {
	selector ListProbingConfigsRequest_FieldPathSelector
}

var _ ListProbingConfigsRequest_FieldPath = (*ListProbingConfigsRequest_FieldTerminalPath)(nil)

func (fp *ListProbingConfigsRequest_FieldTerminalPath) Selector() ListProbingConfigsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingConfigsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingConfigsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingConfigsRequest
func (fp *ListProbingConfigsRequest_FieldTerminalPath) Get(source *ListProbingConfigsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingConfigsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbingConfigsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbingConfigsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbingConfigsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbingConfigsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingConfigsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbingConfigsRequest
func (fp *ListProbingConfigsRequest_FieldTerminalPath) GetSingle(source *ListProbingConfigsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbingConfigsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingConfigsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingConfigsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		return (*probing_config.ParentName)(nil)
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		return (*probing_config.PagerCursor)(nil)
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		return (*probing_config.OrderBy)(nil)
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		return (*probing_config.Filter)(nil)
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case ListProbingConfigsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) ClearValue(item *ListProbingConfigsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbingConfigsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbingConfigsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbingConfigsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbingConfigsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbingConfigsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingConfigsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingConfigsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingConfigsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbingConfigsRequest_FieldPathSelectorView
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbingConfigsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ParentName)}
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.OrderBy)}
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Filter)}
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case ListProbingConfigsRequest_FieldPathSelectorView:
		return &ListProbingConfigsRequest_FieldTerminalPathValue{ListProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ParentName)}
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.OrderBy)}
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.Filter)}
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case ListProbingConfigsRequest_FieldPathSelectorView:
		return &ListProbingConfigsRequest_FieldTerminalPathArrayOfValues{ListProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingConfigsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbingConfigsRequest_FieldPathValue allows storing values for ListProbingConfigsRequest fields according to their type
type ListProbingConfigsRequest_FieldPathValue interface {
	ListProbingConfigsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingConfigsRequest)
	CompareWith(*ListProbingConfigsRequest) (cmp int, comparable bool)
}

func ParseListProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) (ListProbingConfigsRequest_FieldPathValue, error) {
	fp, err := ParseListProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingConfigsRequest_FieldPathValue), nil
}

func MustParseListProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) ListProbingConfigsRequest_FieldPathValue {
	fpv, err := ParseListProbingConfigsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingConfigsRequest_FieldTerminalPathValue struct {
	ListProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingConfigsRequest_FieldPathValue = (*ListProbingConfigsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingConfigsRequest' as interface{}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsParentValue() (*probing_config.ParentName, bool) {
	res, ok := fpv.value.(*probing_config.ParentName)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_config.OrderBy, bool) {
	res, ok := fpv.value.(*probing_config.OrderBy)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_config.Filter, bool) {
	res, ok := fpv.value.(*probing_config.Filter)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingConfigsRequest
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) SetTo(target **ListProbingConfigsRequest) {
	if *target == nil {
		*target = new(ListProbingConfigsRequest)
	}
	switch fpv.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_config.ParentName)
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_config.PagerCursor)
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_config.OrderBy)
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_config.Filter)
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case ListProbingConfigsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingConfigsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingConfigsRequest_FieldTerminalPathValue' with the value under path in 'ListProbingConfigsRequest'.
func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) CompareWith(source *ListProbingConfigsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_config.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbingConfigsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingConfigsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingConfigsRequest))
}

// ListProbingConfigsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingConfigsRequest according to their type
// Present only for array (repeated) types.
type ListProbingConfigsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingConfigsRequest_FieldPath
	ContainsValue(*ListProbingConfigsRequest) bool
}

// ParseListProbingConfigsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingConfigsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingConfigsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingConfigsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingConfigsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingConfigsRequest_FieldPathArrayItemValue = (*ListProbingConfigsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingConfigsRequest as interface{}
func (fpaiv *ListProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingConfigsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingConfigsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingConfigsRequest'
func (fpaiv *ListProbingConfigsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingConfigsRequest) bool {
	slice := fpaiv.ListProbingConfigsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbingConfigsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbingConfigsRequest fields according to their type
type ListProbingConfigsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingConfigsRequest_FieldPath
}

func ParseListProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingConfigsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingConfigsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingConfigsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbingConfigsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbingConfigsRequest_FieldPathArrayOfValues = (*ListProbingConfigsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingConfigsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_config.ParentName) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_config.OrderBy) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_config.Filter) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case ListProbingConfigsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_config.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_config.ParentName)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_config.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_config.OrderBy)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_config.Filter, bool) {
	res, ok := fpaov.values.([]*probing_config.Filter)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *ListProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingConfigsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingConfigsResponse_FieldPathSelector
	Get(source *ListProbingConfigsResponse) []interface{}
	GetSingle(source *ListProbingConfigsResponse) (interface{}, bool)
	ClearValue(item *ListProbingConfigsResponse)

	// Those methods build corresponding ListProbingConfigsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingConfigsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingConfigsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingConfigsResponse_FieldPathArrayItemValue
}

type ListProbingConfigsResponse_FieldPathSelector int32

const (
	ListProbingConfigsResponse_FieldPathSelectorProbingConfigs ListProbingConfigsResponse_FieldPathSelector = 0
	ListProbingConfigsResponse_FieldPathSelectorPrevPageToken  ListProbingConfigsResponse_FieldPathSelector = 1
	ListProbingConfigsResponse_FieldPathSelectorNextPageToken  ListProbingConfigsResponse_FieldPathSelector = 2
)

func (s ListProbingConfigsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return "probing_configs"
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", s))
	}
}

func BuildListProbingConfigsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbingConfigsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingConfigsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_configs", "probingConfigs", "probing-configs":
			return &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorProbingConfigs}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbingConfigsResponse_FieldTerminalPath{selector: ListProbingConfigsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probing_configs", "probingConfigs", "probing-configs":
			if subpath, err := probing_config.BuildProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbingConfigsResponse_FieldSubPath{selector: ListProbingConfigsResponse_FieldPathSelectorProbingConfigs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingConfigsResponse", fp)
}

func ParseListProbingConfigsResponse_FieldPath(rawField string) (ListProbingConfigsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingConfigsResponse_FieldPath(fp)
}

func MustParseListProbingConfigsResponse_FieldPath(rawField string) ListProbingConfigsResponse_FieldPath {
	fp, err := ParseListProbingConfigsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingConfigsResponse_FieldTerminalPath struct {
	selector ListProbingConfigsResponse_FieldPathSelector
}

var _ ListProbingConfigsResponse_FieldPath = (*ListProbingConfigsResponse_FieldTerminalPath)(nil)

func (fp *ListProbingConfigsResponse_FieldTerminalPath) Selector() ListProbingConfigsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingConfigsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingConfigsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingConfigsResponse
func (fp *ListProbingConfigsResponse_FieldTerminalPath) Get(source *ListProbingConfigsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			for _, value := range source.GetProbingConfigs() {
				values = append(values, value)
			}
		case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingConfigsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbingConfigsResponse
func (fp *ListProbingConfigsResponse_FieldTerminalPath) GetSingle(source *ListProbingConfigsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		res := source.GetProbingConfigs()
		return res, res != nil
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingConfigsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return ([]*probing_config.ProbingConfig)(nil)
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_config.PagerCursor)(nil)
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		return (*probing_config.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) ClearValue(item *ListProbingConfigsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			item.ProbingConfigs = nil
		case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingConfigsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingConfigsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbingConfigsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbingConfigsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &ListProbingConfigsResponse_FieldTerminalPathValue{ListProbingConfigsResponse_FieldTerminalPath: *fp, value: value.([]*probing_config.ProbingConfig)}
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingConfigsResponse_FieldTerminalPathValue{ListProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingConfigsResponse_FieldTerminalPathValue{ListProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbingConfigsResponse_FieldTerminalPathArrayOfValues{ListProbingConfigsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &ListProbingConfigsResponse_FieldTerminalPathArrayOfValues{ListProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_config.ProbingConfig)}
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingConfigsResponse_FieldTerminalPathArrayOfValues{ListProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingConfigsResponse_FieldTerminalPathArrayOfValues{ListProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingConfigsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return &ListProbingConfigsResponse_FieldTerminalPathArrayItemValue{ListProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingConfigsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbingConfigsResponse_FieldSubPath struct {
	selector ListProbingConfigsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbingConfigsResponse_FieldPath = (*ListProbingConfigsResponse_FieldSubPath)(nil)

func (fps *ListProbingConfigsResponse_FieldSubPath) Selector() ListProbingConfigsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbingConfigsResponse_FieldSubPath) AsProbingConfigsSubPath() (probing_config.ProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(probing_config.ProbingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbingConfigsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbingConfigsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbingConfigsResponse
func (fps *ListProbingConfigsResponse_FieldSubPath) Get(source *ListProbingConfigsResponse) (values []interface{}) {
	if asProbingConfigFieldPath, ok := fps.AsProbingConfigsSubPath(); ok {
		for _, item := range source.GetProbingConfigs() {
			values = append(values, asProbingConfigFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbingConfigsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbingConfigsResponse))
}

// GetSingle returns value of selected field from source ListProbingConfigsResponse
func (fps *ListProbingConfigsResponse_FieldSubPath) GetSingle(source *ListProbingConfigsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		if len(source.GetProbingConfigs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingConfigs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fps.selector))
	}
}

func (fps *ListProbingConfigsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbingConfigsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbingConfigsResponse_FieldSubPath) ClearValue(item *ListProbingConfigsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
			for _, subItem := range item.ProbingConfigs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbingConfigsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbingConfigsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbingConfigsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProbingConfigsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithIValue(value interface{}) ListProbingConfigsResponse_FieldPathValue {
	return &ListProbingConfigsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbingConfigsResponse_FieldPathArrayOfValues {
	return &ListProbingConfigsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbingConfigsResponse_FieldPathArrayItemValue {
	return &ListProbingConfigsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbingConfigsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbingConfigsResponse_FieldPathValue allows storing values for ListProbingConfigsResponse fields according to their type
type ListProbingConfigsResponse_FieldPathValue interface {
	ListProbingConfigsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingConfigsResponse)
	CompareWith(*ListProbingConfigsResponse) (cmp int, comparable bool)
}

func ParseListProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) (ListProbingConfigsResponse_FieldPathValue, error) {
	fp, err := ParseListProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingConfigsResponse_FieldPathValue), nil
}

func MustParseListProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) ListProbingConfigsResponse_FieldPathValue {
	fpv, err := ParseListProbingConfigsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingConfigsResponse_FieldTerminalPathValue struct {
	ListProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingConfigsResponse_FieldPathValue = (*ListProbingConfigsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingConfigsResponse' as interface{}
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) AsProbingConfigsValue() ([]*probing_config.ProbingConfig, bool) {
	res, ok := fpv.value.([]*probing_config.ProbingConfig)
	return res, ok
}
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingConfigsResponse
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) SetTo(target **ListProbingConfigsResponse) {
	if *target == nil {
		*target = new(ListProbingConfigsResponse)
	}
	switch fpv.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		(*target).ProbingConfigs = fpv.value.([]*probing_config.ProbingConfig)
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_config.PagerCursor)
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_config.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingConfigsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingConfigsResponse_FieldTerminalPathValue' with the value under path in 'ListProbingConfigsResponse'.
func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) CompareWith(source *ListProbingConfigsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return 0, false
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingConfigsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingConfigsResponse))
}

type ListProbingConfigsResponse_FieldSubPathValue struct {
	ListProbingConfigsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbingConfigsResponse_FieldPathValue = (*ListProbingConfigsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) AsProbingConfigsPathValue() (probing_config.ProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) SetTo(target **ListProbingConfigsResponse) {
	if *target == nil {
		*target = new(ListProbingConfigsResponse)
	}
	switch fpvs.Selector() {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingConfigsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) CompareWith(source *ListProbingConfigsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingConfigsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbingConfigsResponse))
}

// ListProbingConfigsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingConfigsResponse according to their type
// Present only for array (repeated) types.
type ListProbingConfigsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingConfigsResponse_FieldPath
	ContainsValue(*ListProbingConfigsResponse) bool
}

// ParseListProbingConfigsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingConfigsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingConfigsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingConfigsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingConfigsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingConfigsResponse_FieldPathArrayItemValue = (*ListProbingConfigsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingConfigsResponse as interface{}
func (fpaiv *ListProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbingConfigsResponse_FieldTerminalPathArrayItemValue) AsProbingConfigsItemValue() (*probing_config.ProbingConfig, bool) {
	res, ok := fpaiv.value.(*probing_config.ProbingConfig)
	return res, ok
}

func (fpaiv *ListProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingConfigsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingConfigsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingConfigsResponse'
func (fpaiv *ListProbingConfigsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingConfigsResponse) bool {
	slice := fpaiv.ListProbingConfigsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbingConfigsResponse_FieldSubPathArrayItemValue struct {
	ListProbingConfigsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbingConfigsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbingConfigsResponse_FieldSubPathArrayItemValue) AsProbingConfigsPathItemValue() (probing_config.ProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingConfigsResponse'
func (fpaivs *ListProbingConfigsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbingConfigsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingConfigsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbingConfigsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbingConfigsResponse fields according to their type
type ListProbingConfigsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingConfigsResponse_FieldPath
}

func ParseListProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingConfigsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingConfigsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingConfigsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingConfigsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbingConfigsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbingConfigsResponse_FieldPathArrayOfValues = (*ListProbingConfigsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingConfigsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingConfigsResponse_FieldPathSelectorProbingConfigs:
		for _, v := range fpaov.values.([][]*probing_config.ProbingConfig) {
			values = append(values, v)
		}
	case ListProbingConfigsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingConfigsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsProbingConfigsArrayOfValues() ([][]*probing_config.ProbingConfig, bool) {
	res, ok := fpaov.values.([][]*probing_config.ProbingConfig)
	return res, ok
}
func (fpaov *ListProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}

type ListProbingConfigsResponse_FieldSubPathArrayOfValues struct {
	ListProbingConfigsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbingConfigsResponse_FieldPathArrayOfValues = (*ListProbingConfigsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbingConfigsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbingConfigsResponse_FieldSubPathArrayOfValues) AsProbingConfigsPathArrayOfValues() (probing_config.ProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_config.ProbingConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingConfigRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingConfigRequest_FieldPathSelector
	Get(source *WatchProbingConfigRequest) []interface{}
	GetSingle(source *WatchProbingConfigRequest) (interface{}, bool)
	ClearValue(item *WatchProbingConfigRequest)

	// Those methods build corresponding WatchProbingConfigRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingConfigRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingConfigRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingConfigRequest_FieldPathArrayItemValue
}

type WatchProbingConfigRequest_FieldPathSelector int32

const (
	WatchProbingConfigRequest_FieldPathSelectorName      WatchProbingConfigRequest_FieldPathSelector = 0
	WatchProbingConfigRequest_FieldPathSelectorFieldMask WatchProbingConfigRequest_FieldPathSelector = 1
	WatchProbingConfigRequest_FieldPathSelectorView      WatchProbingConfigRequest_FieldPathSelector = 2
)

func (s WatchProbingConfigRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		return "name"
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingConfigRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", s))
	}
}

func BuildWatchProbingConfigRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingConfigRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingConfigRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingConfigRequest_FieldTerminalPath{selector: WatchProbingConfigRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingConfigRequest", fp)
}

func ParseWatchProbingConfigRequest_FieldPath(rawField string) (WatchProbingConfigRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingConfigRequest_FieldPath(fp)
}

func MustParseWatchProbingConfigRequest_FieldPath(rawField string) WatchProbingConfigRequest_FieldPath {
	fp, err := ParseWatchProbingConfigRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingConfigRequest_FieldTerminalPath struct {
	selector WatchProbingConfigRequest_FieldPathSelector
}

var _ WatchProbingConfigRequest_FieldPath = (*WatchProbingConfigRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingConfigRequest_FieldTerminalPath) Selector() WatchProbingConfigRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingConfigRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingConfigRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingConfigRequest
func (fp *WatchProbingConfigRequest_FieldTerminalPath) Get(source *WatchProbingConfigRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingConfigRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingConfigRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingConfigRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingConfigRequest
func (fp *WatchProbingConfigRequest_FieldTerminalPath) GetSingle(source *WatchProbingConfigRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingConfigRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingConfigRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		return (*probing_config.Reference)(nil)
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case WatchProbingConfigRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) ClearValue(item *WatchProbingConfigRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingConfigRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingConfigRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingConfigRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingConfigRequest_FieldPathSelectorName ||
		fp.selector == WatchProbingConfigRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingConfigRequest_FieldPathSelectorView
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingConfigRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		return &WatchProbingConfigRequest_FieldTerminalPathValue{WatchProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Reference)}
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		return &WatchProbingConfigRequest_FieldTerminalPathValue{WatchProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case WatchProbingConfigRequest_FieldPathSelectorView:
		return &WatchProbingConfigRequest_FieldTerminalPathValue{WatchProbingConfigRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingConfigRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingConfigRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		return &WatchProbingConfigRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.Reference)}
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		return &WatchProbingConfigRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case WatchProbingConfigRequest_FieldPathSelectorView:
		return &WatchProbingConfigRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingConfigRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingConfigRequest_FieldPathValue allows storing values for WatchProbingConfigRequest fields according to their type
type WatchProbingConfigRequest_FieldPathValue interface {
	WatchProbingConfigRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingConfigRequest)
	CompareWith(*WatchProbingConfigRequest) (cmp int, comparable bool)
}

func ParseWatchProbingConfigRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingConfigRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingConfigRequest_FieldPathValue), nil
}

func MustParseWatchProbingConfigRequest_FieldPathValue(pathStr, valueStr string) WatchProbingConfigRequest_FieldPathValue {
	fpv, err := ParseWatchProbingConfigRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingConfigRequest_FieldTerminalPathValue struct {
	WatchProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigRequest_FieldPathValue = (*WatchProbingConfigRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingConfigRequest' as interface{}
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) AsNameValue() (*probing_config.Reference, bool) {
	res, ok := fpv.value.(*probing_config.Reference)
	return res, ok
}
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingConfigRequest
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) SetTo(target **WatchProbingConfigRequest) {
	if *target == nil {
		*target = new(WatchProbingConfigRequest)
	}
	switch fpv.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_config.Reference)
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case WatchProbingConfigRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingConfigRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingConfigRequest'.
func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingConfigRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_config.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingConfigRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingConfigRequest))
}

// WatchProbingConfigRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingConfigRequest according to their type
// Present only for array (repeated) types.
type WatchProbingConfigRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingConfigRequest_FieldPath
	ContainsValue(*WatchProbingConfigRequest) bool
}

// ParseWatchProbingConfigRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingConfigRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingConfigRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingConfigRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingConfigRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigRequest_FieldPathArrayItemValue = (*WatchProbingConfigRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingConfigRequest as interface{}
func (fpaiv *WatchProbingConfigRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingConfigRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingConfigRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingConfigRequest'
func (fpaiv *WatchProbingConfigRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingConfigRequest) bool {
	slice := fpaiv.WatchProbingConfigRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingConfigRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingConfigRequest fields according to their type
type WatchProbingConfigRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingConfigRequest_FieldPath
}

func ParseWatchProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingConfigRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingConfigRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingConfigRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingConfigRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingConfigRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingConfigRequest_FieldPathArrayOfValues = (*WatchProbingConfigRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingConfigRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingConfigRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_config.Reference) {
			values = append(values, v)
		}
	case WatchProbingConfigRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingConfigRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingConfigRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_config.Reference, bool) {
	res, ok := fpaov.values.([]*probing_config.Reference)
	return res, ok
}
func (fpaov *WatchProbingConfigRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingConfigRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingConfigResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingConfigResponse_FieldPathSelector
	Get(source *WatchProbingConfigResponse) []interface{}
	GetSingle(source *WatchProbingConfigResponse) (interface{}, bool)
	ClearValue(item *WatchProbingConfigResponse)

	// Those methods build corresponding WatchProbingConfigResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingConfigResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingConfigResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingConfigResponse_FieldPathArrayItemValue
}

type WatchProbingConfigResponse_FieldPathSelector int32

const (
	WatchProbingConfigResponse_FieldPathSelectorChange WatchProbingConfigResponse_FieldPathSelector = 0
)

func (s WatchProbingConfigResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", s))
	}
}

func BuildWatchProbingConfigResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingConfigResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingConfigResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbingConfigResponse_FieldTerminalPath{selector: WatchProbingConfigResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingConfigResponse", fp)
}

func ParseWatchProbingConfigResponse_FieldPath(rawField string) (WatchProbingConfigResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingConfigResponse_FieldPath(fp)
}

func MustParseWatchProbingConfigResponse_FieldPath(rawField string) WatchProbingConfigResponse_FieldPath {
	fp, err := ParseWatchProbingConfigResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingConfigResponse_FieldTerminalPath struct {
	selector WatchProbingConfigResponse_FieldPathSelector
}

var _ WatchProbingConfigResponse_FieldPath = (*WatchProbingConfigResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingConfigResponse_FieldTerminalPath) Selector() WatchProbingConfigResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingConfigResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingConfigResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingConfigResponse
func (fp *WatchProbingConfigResponse_FieldTerminalPath) Get(source *WatchProbingConfigResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingConfigResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingConfigResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingConfigResponse
func (fp *WatchProbingConfigResponse_FieldTerminalPath) GetSingle(source *WatchProbingConfigResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingConfigResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingConfigResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		return (*probing_config.ProbingConfigChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) ClearValue(item *WatchProbingConfigResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingConfigResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingConfigResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingConfigResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingConfigResponse_FieldPathSelectorChange
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingConfigResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		return &WatchProbingConfigResponse_FieldTerminalPathValue{WatchProbingConfigResponse_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfigChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingConfigResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingConfigResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		return &WatchProbingConfigResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigResponse_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfigChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingConfigResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingConfigResponse_FieldPathValue allows storing values for WatchProbingConfigResponse fields according to their type
type WatchProbingConfigResponse_FieldPathValue interface {
	WatchProbingConfigResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingConfigResponse)
	CompareWith(*WatchProbingConfigResponse) (cmp int, comparable bool)
}

func ParseWatchProbingConfigResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingConfigResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingConfigResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingConfigResponse_FieldPathValue), nil
}

func MustParseWatchProbingConfigResponse_FieldPathValue(pathStr, valueStr string) WatchProbingConfigResponse_FieldPathValue {
	fpv, err := ParseWatchProbingConfigResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingConfigResponse_FieldTerminalPathValue struct {
	WatchProbingConfigResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigResponse_FieldPathValue = (*WatchProbingConfigResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingConfigResponse' as interface{}
func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) AsChangeValue() (*probing_config.ProbingConfigChange, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfigChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingConfigResponse
func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) SetTo(target **WatchProbingConfigResponse) {
	if *target == nil {
		*target = new(WatchProbingConfigResponse)
	}
	switch fpv.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probing_config.ProbingConfigChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingConfigResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingConfigResponse'.
func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingConfigResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingConfigResponse))
}

// WatchProbingConfigResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingConfigResponse according to their type
// Present only for array (repeated) types.
type WatchProbingConfigResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingConfigResponse_FieldPath
	ContainsValue(*WatchProbingConfigResponse) bool
}

// ParseWatchProbingConfigResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingConfigResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingConfigResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingConfigResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingConfigResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingConfigResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingConfigResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingConfigResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingConfigResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingConfigResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigResponse_FieldPathArrayItemValue = (*WatchProbingConfigResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingConfigResponse as interface{}
func (fpaiv *WatchProbingConfigResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingConfigResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingConfigResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingConfigResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingConfigResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingConfigResponse'
func (fpaiv *WatchProbingConfigResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingConfigResponse) bool {
	slice := fpaiv.WatchProbingConfigResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingConfigResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingConfigResponse fields according to their type
type WatchProbingConfigResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingConfigResponse_FieldPath
}

func ParseWatchProbingConfigResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingConfigResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingConfigResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingConfigResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingConfigResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingConfigResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingConfigResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingConfigResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingConfigResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingConfigResponse_FieldPathArrayOfValues = (*WatchProbingConfigResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingConfigResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingConfigResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfigChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingConfigResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probing_config.ProbingConfigChange, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfigChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingConfigsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingConfigsRequest_FieldPathSelector
	Get(source *WatchProbingConfigsRequest) []interface{}
	GetSingle(source *WatchProbingConfigsRequest) (interface{}, bool)
	ClearValue(item *WatchProbingConfigsRequest)

	// Those methods build corresponding WatchProbingConfigsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingConfigsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingConfigsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingConfigsRequest_FieldPathArrayItemValue
}

type WatchProbingConfigsRequest_FieldPathSelector int32

const (
	WatchProbingConfigsRequest_FieldPathSelectorType         WatchProbingConfigsRequest_FieldPathSelector = 0
	WatchProbingConfigsRequest_FieldPathSelectorParent       WatchProbingConfigsRequest_FieldPathSelector = 1
	WatchProbingConfigsRequest_FieldPathSelectorPageSize     WatchProbingConfigsRequest_FieldPathSelector = 2
	WatchProbingConfigsRequest_FieldPathSelectorPageToken    WatchProbingConfigsRequest_FieldPathSelector = 3
	WatchProbingConfigsRequest_FieldPathSelectorOrderBy      WatchProbingConfigsRequest_FieldPathSelector = 4
	WatchProbingConfigsRequest_FieldPathSelectorResumeToken  WatchProbingConfigsRequest_FieldPathSelector = 5
	WatchProbingConfigsRequest_FieldPathSelectorStartingTime WatchProbingConfigsRequest_FieldPathSelector = 6
	WatchProbingConfigsRequest_FieldPathSelectorFilter       WatchProbingConfigsRequest_FieldPathSelector = 7
	WatchProbingConfigsRequest_FieldPathSelectorFieldMask    WatchProbingConfigsRequest_FieldPathSelector = 8
	WatchProbingConfigsRequest_FieldPathSelectorView         WatchProbingConfigsRequest_FieldPathSelector = 9
	WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize WatchProbingConfigsRequest_FieldPathSelector = 10
)

func (s WatchProbingConfigsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", s))
	}
}

func BuildWatchProbingConfigsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingConfigsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingConfigsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbingConfigsRequest_FieldTerminalPath{selector: WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingConfigsRequest", fp)
}

func ParseWatchProbingConfigsRequest_FieldPath(rawField string) (WatchProbingConfigsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingConfigsRequest_FieldPath(fp)
}

func MustParseWatchProbingConfigsRequest_FieldPath(rawField string) WatchProbingConfigsRequest_FieldPath {
	fp, err := ParseWatchProbingConfigsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingConfigsRequest_FieldTerminalPath struct {
	selector WatchProbingConfigsRequest_FieldPathSelector
}

var _ WatchProbingConfigsRequest_FieldPath = (*WatchProbingConfigsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) Selector() WatchProbingConfigsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingConfigsRequest
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) Get(source *WatchProbingConfigsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingConfigsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbingConfigsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingConfigsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingConfigsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingConfigsRequest
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) GetSingle(source *WatchProbingConfigsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingConfigsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		return (*probing_config.ParentReference)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		return (*probing_config.PagerCursor)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		return (*probing_config.OrderBy)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		return (*probing_config.Filter)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) ClearValue(item *WatchProbingConfigsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingConfigsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbingConfigsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProbingConfigsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingConfigsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingConfigsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingConfigsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingConfigsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingConfigsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ParentReference)}
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.OrderBy)}
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Filter)}
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingConfigsRequest_FieldTerminalPathValue{WatchProbingConfigsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ParentReference)}
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.OrderBy)}
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.Filter)}
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues{WatchProbingConfigsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingConfigsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingConfigsRequest_FieldPathValue allows storing values for WatchProbingConfigsRequest fields according to their type
type WatchProbingConfigsRequest_FieldPathValue interface {
	WatchProbingConfigsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingConfigsRequest)
	CompareWith(*WatchProbingConfigsRequest) (cmp int, comparable bool)
}

func ParseWatchProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingConfigsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingConfigsRequest_FieldPathValue), nil
}

func MustParseWatchProbingConfigsRequest_FieldPathValue(pathStr, valueStr string) WatchProbingConfigsRequest_FieldPathValue {
	fpv, err := ParseWatchProbingConfigsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingConfigsRequest_FieldTerminalPathValue struct {
	WatchProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsRequest_FieldPathValue = (*WatchProbingConfigsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingConfigsRequest' as interface{}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsParentValue() (*probing_config.ParentReference, bool) {
	res, ok := fpv.value.(*probing_config.ParentReference)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_config.OrderBy, bool) {
	res, ok := fpv.value.(*probing_config.OrderBy)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_config.Filter, bool) {
	res, ok := fpv.value.(*probing_config.Filter)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingConfigsRequest
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) SetTo(target **WatchProbingConfigsRequest) {
	if *target == nil {
		*target = new(WatchProbingConfigsRequest)
	}
	switch fpv.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_config.ParentReference)
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_config.PagerCursor)
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_config.OrderBy)
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_config.Filter)
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingConfigsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingConfigsRequest'.
func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingConfigsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_config.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingConfigsRequest))
}

// WatchProbingConfigsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingConfigsRequest according to their type
// Present only for array (repeated) types.
type WatchProbingConfigsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingConfigsRequest_FieldPath
	ContainsValue(*WatchProbingConfigsRequest) bool
}

// ParseWatchProbingConfigsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingConfigsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingConfigsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingConfigsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingConfigsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingConfigsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsRequest_FieldPathArrayItemValue = (*WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingConfigsRequest as interface{}
func (fpaiv *WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingConfigsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingConfigsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingConfigsRequest'
func (fpaiv *WatchProbingConfigsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingConfigsRequest) bool {
	slice := fpaiv.WatchProbingConfigsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingConfigsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingConfigsRequest fields according to their type
type WatchProbingConfigsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingConfigsRequest_FieldPath
}

func ParseWatchProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingConfigsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingConfigsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingConfigsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingConfigsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingConfigsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingConfigsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingConfigsRequest_FieldPathArrayOfValues = (*WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingConfigsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_config.ParentReference) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_config.OrderBy) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_config.Filter) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbingConfigsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_config.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_config.ParentReference)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_config.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_config.OrderBy)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_config.Filter, bool) {
	res, ok := fpaov.values.([]*probing_config.Filter)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbingConfigsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingConfigsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingConfigsResponse_FieldPathSelector
	Get(source *WatchProbingConfigsResponse) []interface{}
	GetSingle(source *WatchProbingConfigsResponse) (interface{}, bool)
	ClearValue(item *WatchProbingConfigsResponse)

	// Those methods build corresponding WatchProbingConfigsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingConfigsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingConfigsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingConfigsResponse_FieldPathArrayItemValue
}

type WatchProbingConfigsResponse_FieldPathSelector int32

const (
	WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges WatchProbingConfigsResponse_FieldPathSelector = 0
	WatchProbingConfigsResponse_FieldPathSelectorIsCurrent            WatchProbingConfigsResponse_FieldPathSelector = 1
	WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange      WatchProbingConfigsResponse_FieldPathSelector = 2
	WatchProbingConfigsResponse_FieldPathSelectorResumeToken          WatchProbingConfigsResponse_FieldPathSelector = 3
	WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize         WatchProbingConfigsResponse_FieldPathSelector = 4
	WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset          WatchProbingConfigsResponse_FieldPathSelector = 5
	WatchProbingConfigsResponse_FieldPathSelectorIsHardReset          WatchProbingConfigsResponse_FieldPathSelector = 6
)

func (s WatchProbingConfigsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return "probing_config_changes"
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", s))
	}
}

func BuildWatchProbingConfigsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingConfigsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingConfigsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_config_changes", "probingConfigChanges", "probing-config-changes":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbingConfigsResponse_FieldTerminalPath{selector: WatchProbingConfigsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbingConfigsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbingConfigsResponse_FieldSubPath{selector: WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingConfigsResponse", fp)
}

func ParseWatchProbingConfigsResponse_FieldPath(rawField string) (WatchProbingConfigsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingConfigsResponse_FieldPath(fp)
}

func MustParseWatchProbingConfigsResponse_FieldPath(rawField string) WatchProbingConfigsResponse_FieldPath {
	fp, err := ParseWatchProbingConfigsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingConfigsResponse_FieldTerminalPath struct {
	selector WatchProbingConfigsResponse_FieldPathSelector
}

var _ WatchProbingConfigsResponse_FieldPath = (*WatchProbingConfigsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) Selector() WatchProbingConfigsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingConfigsResponse
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) Get(source *WatchProbingConfigsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
			for _, value := range source.GetProbingConfigChanges() {
				values = append(values, value)
			}
		case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingConfigsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingConfigsResponse
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) GetSingle(source *WatchProbingConfigsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		res := source.GetProbingConfigChanges()
		return res, res != nil
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return ([]*probing_config.ProbingConfigChange)(nil)
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbingConfigsResponse_PageTokenChange)(nil)
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) ClearValue(item *WatchProbingConfigsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
			item.ProbingConfigChanges = nil
		case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingConfigsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges ||
		fp.selector == WatchProbingConfigsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbingConfigsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbingConfigsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingConfigsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.([]*probing_config.ProbingConfigChange)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbingConfigsResponse_PageTokenChange)}
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingConfigsResponse_FieldTerminalPathValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_config.ProbingConfigChange)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbingConfigsResponse_PageTokenChange)}
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingConfigsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return &WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue{WatchProbingConfigsResponse_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfigChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbingConfigsResponse_FieldSubPath struct {
	selector WatchProbingConfigsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbingConfigsResponse_FieldPath = (*WatchProbingConfigsResponse_FieldSubPath)(nil)

func (fps *WatchProbingConfigsResponse_FieldSubPath) Selector() WatchProbingConfigsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbingConfigsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbingConfigsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbingConfigsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbingConfigsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbingConfigsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbingConfigsResponse
func (fps *WatchProbingConfigsResponse_FieldSubPath) Get(source *WatchProbingConfigsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbingConfigsResponse))
}

// GetSingle returns value of selected field from source WatchProbingConfigsResponse
func (fps *WatchProbingConfigsResponse_FieldSubPath) GetSingle(source *WatchProbingConfigsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbingConfigsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbingConfigsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) ClearValue(item *WatchProbingConfigsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbingConfigsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbingConfigsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProbingConfigsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbingConfigsResponse_FieldPathValue {
	return &WatchProbingConfigsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbingConfigsResponse_FieldPathArrayOfValues {
	return &WatchProbingConfigsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbingConfigsResponse_FieldPathArrayItemValue {
	return &WatchProbingConfigsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbingConfigsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbingConfigsResponse_FieldPathValue allows storing values for WatchProbingConfigsResponse fields according to their type
type WatchProbingConfigsResponse_FieldPathValue interface {
	WatchProbingConfigsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingConfigsResponse)
	CompareWith(*WatchProbingConfigsResponse) (cmp int, comparable bool)
}

func ParseWatchProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingConfigsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingConfigsResponse_FieldPathValue), nil
}

func MustParseWatchProbingConfigsResponse_FieldPathValue(pathStr, valueStr string) WatchProbingConfigsResponse_FieldPathValue {
	fpv, err := ParseWatchProbingConfigsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingConfigsResponse_FieldTerminalPathValue struct {
	WatchProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsResponse_FieldPathValue = (*WatchProbingConfigsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingConfigsResponse' as interface{}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsProbingConfigChangesValue() ([]*probing_config.ProbingConfigChange, bool) {
	res, ok := fpv.value.([]*probing_config.ProbingConfigChange)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbingConfigsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbingConfigsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingConfigsResponse
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) SetTo(target **WatchProbingConfigsResponse) {
	if *target == nil {
		*target = new(WatchProbingConfigsResponse)
	}
	switch fpv.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		(*target).ProbingConfigChanges = fpv.value.([]*probing_config.ProbingConfigChange)
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbingConfigsResponse_PageTokenChange)
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingConfigsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingConfigsResponse'.
func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingConfigsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		return 0, false
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingConfigsResponse))
}

type WatchProbingConfigsResponse_FieldSubPathValue struct {
	WatchProbingConfigsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbingConfigsResponse_FieldPathValue = (*WatchProbingConfigsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbingConfigsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbingConfigsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) SetTo(target **WatchProbingConfigsResponse) {
	if *target == nil {
		*target = new(WatchProbingConfigsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbingConfigsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) CompareWith(source *WatchProbingConfigsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbingConfigsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingConfigsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbingConfigsResponse))
}

// WatchProbingConfigsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingConfigsResponse according to their type
// Present only for array (repeated) types.
type WatchProbingConfigsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingConfigsResponse_FieldPath
	ContainsValue(*WatchProbingConfigsResponse) bool
}

// ParseWatchProbingConfigsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingConfigsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingConfigsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingConfigsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingConfigsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingConfigsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsResponse_FieldPathArrayItemValue = (*WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingConfigsResponse as interface{}
func (fpaiv *WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue) AsProbingConfigChangesItemValue() (*probing_config.ProbingConfigChange, bool) {
	res, ok := fpaiv.value.(*probing_config.ProbingConfigChange)
	return res, ok
}

func (fpaiv *WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingConfigsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingConfigsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingConfigsResponse'
func (fpaiv *WatchProbingConfigsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingConfigsResponse) bool {
	slice := fpaiv.WatchProbingConfigsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbingConfigsResponse_FieldSubPathArrayItemValue struct {
	WatchProbingConfigsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbingConfigsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbingConfigsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingConfigsResponse'
func (fpaivs *WatchProbingConfigsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbingConfigsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbingConfigsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingConfigsResponse fields according to their type
type WatchProbingConfigsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingConfigsResponse_FieldPath
}

func ParseWatchProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingConfigsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingConfigsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingConfigsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingConfigsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingConfigsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingConfigsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingConfigsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingConfigsResponse_FieldPathArrayOfValues = (*WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingConfigsResponse_FieldPathSelectorProbingConfigChanges:
		for _, v := range fpaov.values.([][]*probing_config.ProbingConfigChange) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbingConfigsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsProbingConfigChangesArrayOfValues() ([][]*probing_config.ProbingConfigChange, bool) {
	res, ok := fpaov.values.([][]*probing_config.ProbingConfigChange)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbingConfigsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbingConfigsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbingConfigsResponse_FieldSubPathArrayOfValues struct {
	WatchProbingConfigsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbingConfigsResponse_FieldPathArrayOfValues = (*WatchProbingConfigsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbingConfigsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbingConfigsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingConfigsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingConfigsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbingConfigsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbingConfigsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbingConfigsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbingConfigsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbingConfigsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbingConfigsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbingConfigsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbingConfigsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbingConfigsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingConfigsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingConfigsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingConfigsResponse_PageTokenChange", fp)
}

func ParseWatchProbingConfigsResponsePageTokenChange_FieldPath(rawField string) (WatchProbingConfigsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingConfigsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbingConfigsResponsePageTokenChange_FieldPath(rawField string) WatchProbingConfigsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbingConfigsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbingConfigsResponsePageTokenChange_FieldPath = (*WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbingConfigsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingConfigsResponse_PageTokenChange
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbingConfigsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingConfigsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbingConfigsResponse_PageTokenChange
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbingConfigsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingConfigsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probing_config.PagerCursor)(nil)
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probing_config.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbingConfigsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingConfigsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_config.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_config.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingConfigsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbingConfigsResponsePageTokenChange_FieldPathValue interface {
	WatchProbingConfigsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingConfigsResponse_PageTokenChange)
	CompareWith(*WatchProbingConfigsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbingConfigsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbingConfigsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingConfigsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbingConfigsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbingConfigsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsResponsePageTokenChange_FieldPathValue = (*WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_config.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_config.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbingConfigsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbingConfigsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_config.PagerCursor)
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_config.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingConfigsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbingConfigsResponse_PageTokenChange'.
func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbingConfigsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingConfigsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingConfigsResponse_PageTokenChange))
}

// WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingConfigsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbingConfigsResponse_PageTokenChange) bool
}

// ParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingConfigsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingConfigsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingConfigsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingConfigsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingConfigsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingConfigsResponsePageTokenChange_FieldPath
}

func ParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbingConfigsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbingConfigsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingConfigsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_config.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingConfigsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_config.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_config.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbingConfigRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbingConfigRequest_FieldPathSelector
	Get(source *CreateProbingConfigRequest) []interface{}
	GetSingle(source *CreateProbingConfigRequest) (interface{}, bool)
	ClearValue(item *CreateProbingConfigRequest)

	// Those methods build corresponding CreateProbingConfigRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbingConfigRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbingConfigRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbingConfigRequest_FieldPathArrayItemValue
}

type CreateProbingConfigRequest_FieldPathSelector int32

const (
	CreateProbingConfigRequest_FieldPathSelectorParent        CreateProbingConfigRequest_FieldPathSelector = 0
	CreateProbingConfigRequest_FieldPathSelectorProbingConfig CreateProbingConfigRequest_FieldPathSelector = 1
)

func (s CreateProbingConfigRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return "probing_config"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", s))
	}
}

func BuildCreateProbingConfigRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbingConfigRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbingConfigRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbingConfigRequest_FieldTerminalPath{selector: CreateProbingConfigRequest_FieldPathSelectorParent}, nil
		case "probing_config", "probingConfig", "probing-config":
			return &CreateProbingConfigRequest_FieldTerminalPath{selector: CreateProbingConfigRequest_FieldPathSelectorProbingConfig}, nil
		}
	} else {
		switch fp[0] {
		case "probing_config", "probingConfig", "probing-config":
			if subpath, err := probing_config.BuildProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbingConfigRequest_FieldSubPath{selector: CreateProbingConfigRequest_FieldPathSelectorProbingConfig, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbingConfigRequest", fp)
}

func ParseCreateProbingConfigRequest_FieldPath(rawField string) (CreateProbingConfigRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbingConfigRequest_FieldPath(fp)
}

func MustParseCreateProbingConfigRequest_FieldPath(rawField string) CreateProbingConfigRequest_FieldPath {
	fp, err := ParseCreateProbingConfigRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbingConfigRequest_FieldTerminalPath struct {
	selector CreateProbingConfigRequest_FieldPathSelector
}

var _ CreateProbingConfigRequest_FieldPath = (*CreateProbingConfigRequest_FieldTerminalPath)(nil)

func (fp *CreateProbingConfigRequest_FieldTerminalPath) Selector() CreateProbingConfigRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbingConfigRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbingConfigRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbingConfigRequest
func (fp *CreateProbingConfigRequest_FieldTerminalPath) Get(source *CreateProbingConfigRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbingConfigRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
			if source.ProbingConfig != nil {
				values = append(values, source.ProbingConfig)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbingConfigRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbingConfigRequest
func (fp *CreateProbingConfigRequest_FieldTerminalPath) GetSingle(source *CreateProbingConfigRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		res := source.GetProbingConfig()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbingConfigRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		return (*probing_config.ParentReference)(nil)
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return (*probing_config.ProbingConfig)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) ClearValue(item *CreateProbingConfigRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbingConfigRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
			item.ProbingConfig = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbingConfigRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbingConfigRequest_FieldPathSelectorParent
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbingConfigRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		return &CreateProbingConfigRequest_FieldTerminalPathValue{CreateProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ParentReference)}
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return &CreateProbingConfigRequest_FieldTerminalPathValue{CreateProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbingConfigRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbingConfigRequest_FieldTerminalPathArrayOfValues{CreateProbingConfigRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		return &CreateProbingConfigRequest_FieldTerminalPathArrayOfValues{CreateProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ParentReference)}
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return &CreateProbingConfigRequest_FieldTerminalPathArrayOfValues{CreateProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbingConfigRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingConfigRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbingConfigRequest_FieldSubPath struct {
	selector CreateProbingConfigRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbingConfigRequest_FieldPath = (*CreateProbingConfigRequest_FieldSubPath)(nil)

func (fps *CreateProbingConfigRequest_FieldSubPath) Selector() CreateProbingConfigRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbingConfigRequest_FieldSubPath) AsProbingConfigSubPath() (probing_config.ProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(probing_config.ProbingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbingConfigRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbingConfigRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbingConfigRequest
func (fps *CreateProbingConfigRequest_FieldSubPath) Get(source *CreateProbingConfigRequest) (values []interface{}) {
	if asProbingConfigFieldPath, ok := fps.AsProbingConfigSubPath(); ok {
		values = append(values, asProbingConfigFieldPath.Get(source.GetProbingConfig())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbingConfigRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbingConfigRequest))
}

// GetSingle returns value of selected field from source CreateProbingConfigRequest
func (fps *CreateProbingConfigRequest_FieldSubPath) GetSingle(source *CreateProbingConfigRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		if source.GetProbingConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fps.selector))
	}
}

func (fps *CreateProbingConfigRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbingConfigRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbingConfigRequest_FieldSubPath) ClearValue(item *CreateProbingConfigRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
			fps.subPath.ClearValueRaw(item.ProbingConfig)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbingConfigRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbingConfigRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbingConfigRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProbingConfigRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithIValue(value interface{}) CreateProbingConfigRequest_FieldPathValue {
	return &CreateProbingConfigRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbingConfigRequest_FieldPathArrayOfValues {
	return &CreateProbingConfigRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbingConfigRequest_FieldPathArrayItemValue {
	return &CreateProbingConfigRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbingConfigRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbingConfigRequest_FieldPathValue allows storing values for CreateProbingConfigRequest fields according to their type
type CreateProbingConfigRequest_FieldPathValue interface {
	CreateProbingConfigRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbingConfigRequest)
	CompareWith(*CreateProbingConfigRequest) (cmp int, comparable bool)
}

func ParseCreateProbingConfigRequest_FieldPathValue(pathStr, valueStr string) (CreateProbingConfigRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingConfigRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbingConfigRequest_FieldPathValue), nil
}

func MustParseCreateProbingConfigRequest_FieldPathValue(pathStr, valueStr string) CreateProbingConfigRequest_FieldPathValue {
	fpv, err := ParseCreateProbingConfigRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbingConfigRequest_FieldTerminalPathValue struct {
	CreateProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingConfigRequest_FieldPathValue = (*CreateProbingConfigRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbingConfigRequest' as interface{}
func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) AsParentValue() (*probing_config.ParentReference, bool) {
	res, ok := fpv.value.(*probing_config.ParentReference)
	return res, ok
}
func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) AsProbingConfigValue() (*probing_config.ProbingConfig, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbingConfigRequest
func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) SetTo(target **CreateProbingConfigRequest) {
	if *target == nil {
		*target = new(CreateProbingConfigRequest)
	}
	switch fpv.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_config.ParentReference)
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		(*target).ProbingConfig = fpv.value.(*probing_config.ProbingConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingConfigRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbingConfigRequest_FieldTerminalPathValue' with the value under path in 'CreateProbingConfigRequest'.
func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) CompareWith(source *CreateProbingConfigRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_config.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingConfigRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbingConfigRequest))
}

type CreateProbingConfigRequest_FieldSubPathValue struct {
	CreateProbingConfigRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbingConfigRequest_FieldPathValue = (*CreateProbingConfigRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) AsProbingConfigPathValue() (probing_config.ProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) SetTo(target **CreateProbingConfigRequest) {
	if *target == nil {
		*target = new(CreateProbingConfigRequest)
	}
	switch fpvs.Selector() {
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).SetTo(&(*target).ProbingConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingConfigRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) CompareWith(source *CreateProbingConfigRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).CompareWith(source.GetProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingConfigRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbingConfigRequest))
}

// CreateProbingConfigRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbingConfigRequest according to their type
// Present only for array (repeated) types.
type CreateProbingConfigRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbingConfigRequest_FieldPath
	ContainsValue(*CreateProbingConfigRequest) bool
}

// ParseCreateProbingConfigRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbingConfigRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingConfigRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbingConfigRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbingConfigRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbingConfigRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingConfigRequest_FieldPathArrayItemValue = (*CreateProbingConfigRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbingConfigRequest as interface{}
func (fpaiv *CreateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbingConfigRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbingConfigRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingConfigRequest'
func (fpaiv *CreateProbingConfigRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbingConfigRequest) bool {
	slice := fpaiv.CreateProbingConfigRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbingConfigRequest_FieldSubPathArrayItemValue struct {
	CreateProbingConfigRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbingConfigRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbingConfigRequest_FieldSubPathArrayItemValue) AsProbingConfigPathItemValue() (probing_config.ProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingConfigRequest'
func (fpaivs *CreateProbingConfigRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbingConfigRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingConfigRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbingConfigRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbingConfigRequest fields according to their type
type CreateProbingConfigRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbingConfigRequest_FieldPath
}

func ParseCreateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbingConfigRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingConfigRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbingConfigRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbingConfigRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbingConfigRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbingConfigRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbingConfigRequest_FieldPathArrayOfValues = (*CreateProbingConfigRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbingConfigRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbingConfigRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_config.ParentReference) {
			values = append(values, v)
		}
	case CreateProbingConfigRequest_FieldPathSelectorProbingConfig:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbingConfigRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_config.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_config.ParentReference)
	return res, ok
}
func (fpaov *CreateProbingConfigRequest_FieldTerminalPathArrayOfValues) AsProbingConfigArrayOfValues() ([]*probing_config.ProbingConfig, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig)
	return res, ok
}

type CreateProbingConfigRequest_FieldSubPathArrayOfValues struct {
	CreateProbingConfigRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbingConfigRequest_FieldPathArrayOfValues = (*CreateProbingConfigRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbingConfigRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbingConfigRequest_FieldSubPathArrayOfValues) AsProbingConfigPathArrayOfValues() (probing_config.ProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_config.ProbingConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingConfigRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingConfigRequest_FieldPathSelector
	Get(source *UpdateProbingConfigRequest) []interface{}
	GetSingle(source *UpdateProbingConfigRequest) (interface{}, bool)
	ClearValue(item *UpdateProbingConfigRequest)

	// Those methods build corresponding UpdateProbingConfigRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingConfigRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingConfigRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingConfigRequest_FieldPathArrayItemValue
}

type UpdateProbingConfigRequest_FieldPathSelector int32

const (
	UpdateProbingConfigRequest_FieldPathSelectorProbingConfig UpdateProbingConfigRequest_FieldPathSelector = 0
	UpdateProbingConfigRequest_FieldPathSelectorUpdateMask    UpdateProbingConfigRequest_FieldPathSelector = 1
	UpdateProbingConfigRequest_FieldPathSelectorCas           UpdateProbingConfigRequest_FieldPathSelector = 2
)

func (s UpdateProbingConfigRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return "probing_config"
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", s))
	}
}

func BuildUpdateProbingConfigRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingConfigRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingConfigRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_config", "probingConfig", "probing-config":
			return &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorProbingConfig}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbingConfigRequest_FieldTerminalPath{selector: UpdateProbingConfigRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probing_config", "probingConfig", "probing-config":
			if subpath, err := probing_config.BuildProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingConfigRequest_FieldSubPath{selector: UpdateProbingConfigRequest_FieldPathSelectorProbingConfig, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbingConfigRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingConfigRequest_FieldSubPath{selector: UpdateProbingConfigRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingConfigRequest", fp)
}

func ParseUpdateProbingConfigRequest_FieldPath(rawField string) (UpdateProbingConfigRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingConfigRequest_FieldPath(fp)
}

func MustParseUpdateProbingConfigRequest_FieldPath(rawField string) UpdateProbingConfigRequest_FieldPath {
	fp, err := ParseUpdateProbingConfigRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingConfigRequest_FieldTerminalPath struct {
	selector UpdateProbingConfigRequest_FieldPathSelector
}

var _ UpdateProbingConfigRequest_FieldPath = (*UpdateProbingConfigRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) Selector() UpdateProbingConfigRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingConfigRequest
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) Get(source *UpdateProbingConfigRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
			if source.ProbingConfig != nil {
				values = append(values, source.ProbingConfig)
			}
		case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbingConfigRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingConfigRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingConfigRequest
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) GetSingle(source *UpdateProbingConfigRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		res := source.GetProbingConfig()
		return res, res != nil
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return (*probing_config.ProbingConfig)(nil)
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return (*UpdateProbingConfigRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) ClearValue(item *UpdateProbingConfigRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
			item.ProbingConfig = nil
		case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbingConfigRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingConfigRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingConfigRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingConfigRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return &UpdateProbingConfigRequest_FieldTerminalPathValue{UpdateProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig)}
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingConfigRequest_FieldTerminalPathValue{UpdateProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return &UpdateProbingConfigRequest_FieldTerminalPathValue{UpdateProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbingConfigRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingConfigRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return &UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig)}
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return &UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbingConfigRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingConfigRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingConfigRequest_FieldSubPath struct {
	selector UpdateProbingConfigRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingConfigRequest_FieldPath = (*UpdateProbingConfigRequest_FieldSubPath)(nil)

func (fps *UpdateProbingConfigRequest_FieldSubPath) Selector() UpdateProbingConfigRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingConfigRequest_FieldSubPath) AsProbingConfigSubPath() (probing_config.ProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(probing_config.ProbingConfig_FieldPath)
	return res, ok
}
func (fps *UpdateProbingConfigRequest_FieldSubPath) AsCasSubPath() (UpdateProbingConfigRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbingConfigRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingConfigRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingConfigRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingConfigRequest
func (fps *UpdateProbingConfigRequest_FieldSubPath) Get(source *UpdateProbingConfigRequest) (values []interface{}) {
	if asProbingConfigFieldPath, ok := fps.AsProbingConfigSubPath(); ok {
		values = append(values, asProbingConfigFieldPath.Get(source.GetProbingConfig())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingConfigRequest))
}

// GetSingle returns value of selected field from source UpdateProbingConfigRequest
func (fps *UpdateProbingConfigRequest_FieldSubPath) GetSingle(source *UpdateProbingConfigRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		if source.GetProbingConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingConfig())
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingConfigRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) ClearValue(item *UpdateProbingConfigRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
			fps.subPath.ClearValueRaw(item.ProbingConfig)
		case UpdateProbingConfigRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingConfigRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingConfigRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbingConfigRequest_FieldPathValue {
	return &UpdateProbingConfigRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingConfigRequest_FieldPathArrayOfValues {
	return &UpdateProbingConfigRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingConfigRequest_FieldPathArrayItemValue {
	return &UpdateProbingConfigRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingConfigRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingConfigRequest_FieldPathValue allows storing values for UpdateProbingConfigRequest fields according to their type
type UpdateProbingConfigRequest_FieldPathValue interface {
	UpdateProbingConfigRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingConfigRequest)
	CompareWith(*UpdateProbingConfigRequest) (cmp int, comparable bool)
}

func ParseUpdateProbingConfigRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbingConfigRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingConfigRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingConfigRequest_FieldPathValue), nil
}

func MustParseUpdateProbingConfigRequest_FieldPathValue(pathStr, valueStr string) UpdateProbingConfigRequest_FieldPathValue {
	fpv, err := ParseUpdateProbingConfigRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingConfigRequest_FieldTerminalPathValue struct {
	UpdateProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingConfigRequest_FieldPathValue = (*UpdateProbingConfigRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbingConfigRequest' as interface{}
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) AsProbingConfigValue() (*probing_config.ProbingConfig, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig)
	return res, ok
}
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbingConfigRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbingConfigRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbingConfigRequest
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) SetTo(target **UpdateProbingConfigRequest) {
	if *target == nil {
		*target = new(UpdateProbingConfigRequest)
	}
	switch fpv.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		(*target).ProbingConfig = fpv.value.(*probing_config.ProbingConfig)
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbingConfigRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingConfigRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingConfigRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbingConfigRequest'.
func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbingConfigRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return 0, false
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingConfigRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingConfigRequest))
}

type UpdateProbingConfigRequest_FieldSubPathValue struct {
	UpdateProbingConfigRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingConfigRequest_FieldPathValue = (*UpdateProbingConfigRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) AsProbingConfigPathValue() (probing_config.ProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbingConfigRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbingConfigRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) SetTo(target **UpdateProbingConfigRequest) {
	if *target == nil {
		*target = new(UpdateProbingConfigRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).SetTo(&(*target).ProbingConfig)
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbingConfigRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingConfigRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) CompareWith(source *UpdateProbingConfigRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).CompareWith(source.GetProbingConfig())
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbingConfigRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingConfigRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingConfigRequest))
}

// UpdateProbingConfigRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbingConfigRequest according to their type
// Present only for array (repeated) types.
type UpdateProbingConfigRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingConfigRequest_FieldPath
	ContainsValue(*UpdateProbingConfigRequest) bool
}

// ParseUpdateProbingConfigRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingConfigRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingConfigRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingConfigRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingConfigRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingConfigRequest_FieldPathArrayItemValue = (*UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingConfigRequest as interface{}
func (fpaiv *UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingConfigRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingConfigRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingConfigRequest'
func (fpaiv *UpdateProbingConfigRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingConfigRequest) bool {
	slice := fpaiv.UpdateProbingConfigRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingConfigRequest_FieldSubPathArrayItemValue struct {
	UpdateProbingConfigRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingConfigRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingConfigRequest_FieldSubPathArrayItemValue) AsProbingConfigPathItemValue() (probing_config.ProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbingConfigRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbingConfigRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbingConfigRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingConfigRequest'
func (fpaivs *UpdateProbingConfigRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingConfigRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		return fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetProbingConfig())
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbingConfigRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbingConfigRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbingConfigRequest fields according to their type
type UpdateProbingConfigRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingConfigRequest_FieldPath
}

func ParseUpdateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingConfigRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingConfigRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingConfigRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingConfigRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbingConfigRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingConfigRequest_FieldPathArrayOfValues = (*UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingConfigRequest_FieldPathSelectorProbingConfig:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig) {
			values = append(values, v)
		}
	case UpdateProbingConfigRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbingConfigRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbingConfigRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues) AsProbingConfigArrayOfValues() ([]*probing_config.ProbingConfig, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig)
	return res, ok
}
func (fpaov *UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbingConfigRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbingConfigRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbingConfigRequest_CAS)
	return res, ok
}

type UpdateProbingConfigRequest_FieldSubPathArrayOfValues struct {
	UpdateProbingConfigRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingConfigRequest_FieldPathArrayOfValues = (*UpdateProbingConfigRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingConfigRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingConfigRequest_FieldSubPathArrayOfValues) AsProbingConfigPathArrayOfValues() (probing_config.ProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_config.ProbingConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbingConfigRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbingConfigRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbingConfigRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingConfigRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingConfigRequestCAS_FieldPathSelector
	Get(source *UpdateProbingConfigRequest_CAS) []interface{}
	GetSingle(source *UpdateProbingConfigRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbingConfigRequest_CAS)

	// Those methods build corresponding UpdateProbingConfigRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayItemValue
}

type UpdateProbingConfigRequestCAS_FieldPathSelector int32

const (
	UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState UpdateProbingConfigRequestCAS_FieldPathSelector = 0
	UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask        UpdateProbingConfigRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbingConfigRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", s))
	}
}

func BuildUpdateProbingConfigRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingConfigRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingConfigRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbingConfigRequestCAS_FieldTerminalPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbingConfigRequestCAS_FieldTerminalPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probing_config.BuildProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingConfigRequestCAS_FieldSubPath{selector: UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingConfigRequest_CAS", fp)
}

func ParseUpdateProbingConfigRequestCAS_FieldPath(rawField string) (UpdateProbingConfigRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingConfigRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbingConfigRequestCAS_FieldPath(rawField string) UpdateProbingConfigRequestCAS_FieldPath {
	fp, err := ParseUpdateProbingConfigRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingConfigRequestCAS_FieldTerminalPath struct {
	selector UpdateProbingConfigRequestCAS_FieldPathSelector
}

var _ UpdateProbingConfigRequestCAS_FieldPath = (*UpdateProbingConfigRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) Selector() UpdateProbingConfigRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingConfigRequest_CAS
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) Get(source *UpdateProbingConfigRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingConfigRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingConfigRequest_CAS
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbingConfigRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingConfigRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return (*probing_config.ProbingConfig)(nil)
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		return (*probing_config.ProbingConfig_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbingConfigRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingConfigRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingConfigRequestCAS_FieldTerminalPathValue{UpdateProbingConfigRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig)}
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingConfigRequestCAS_FieldTerminalPathValue{UpdateProbingConfigRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_config.ProbingConfig_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig)}
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingConfigRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_config.ProbingConfig_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingConfigRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingConfigRequestCAS_FieldSubPath struct {
	selector UpdateProbingConfigRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingConfigRequestCAS_FieldPath = (*UpdateProbingConfigRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) Selector() UpdateProbingConfigRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probing_config.ProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(probing_config.ProbingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingConfigRequest_CAS
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) Get(source *UpdateProbingConfigRequest_CAS) (values []interface{}) {
	if asProbingConfigFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbingConfigFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingConfigRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbingConfigRequest_CAS
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) GetSingle(source *UpdateProbingConfigRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingConfigRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) ClearValue(item *UpdateProbingConfigRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingConfigRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingConfigRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathValue {
	return &UpdateProbingConfigRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbingConfigRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingConfigRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbingConfigRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingConfigRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingConfigRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbingConfigRequestCAS_FieldPathValue interface {
	UpdateProbingConfigRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingConfigRequest_CAS)
	CompareWith(*UpdateProbingConfigRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbingConfigRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbingConfigRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbingConfigRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingConfigRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbingConfigRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbingConfigRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbingConfigRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingConfigRequestCAS_FieldTerminalPathValue struct {
	UpdateProbingConfigRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingConfigRequestCAS_FieldPathValue = (*UpdateProbingConfigRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probing_config.ProbingConfig, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig)
	return res, ok
}
func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpv.value.(*probing_config.ProbingConfig_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbingConfigRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingConfigRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probing_config.ProbingConfig)
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_config.ProbingConfig_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingConfigRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingConfigRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbingConfigRequest_CAS'.
func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbingConfigRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingConfigRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingConfigRequest_CAS))
}

type UpdateProbingConfigRequestCAS_FieldSubPathValue struct {
	UpdateProbingConfigRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingConfigRequestCAS_FieldPathValue = (*UpdateProbingConfigRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probing_config.ProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbingConfigRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingConfigRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingConfigRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbingConfigRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probing_config.ProbingConfig_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingConfigRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingConfigRequest_CAS))
}

// UpdateProbingConfigRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbingConfigRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingConfigRequestCAS_FieldPath
	ContainsValue(*UpdateProbingConfigRequest_CAS) bool
}

// ParseUpdateProbingConfigRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingConfigRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingConfigRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingConfigRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingConfigRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingConfigRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingConfigRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingConfigRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbingConfigRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingConfigRequestCAS_FieldPathArrayItemValue = (*UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingConfigRequest_CAS as interface{}
func (fpaiv *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingConfigRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingConfigRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingConfigRequest_CAS) bool {
	slice := fpaiv.UpdateProbingConfigRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingConfigRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbingConfigRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingConfigRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingConfigRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probing_config.ProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbingConfigRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingConfigRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probing_config.ProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingConfigRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbingConfigRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbingConfigRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingConfigRequestCAS_FieldPath
}

func ParseUpdateProbingConfigRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingConfigRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingConfigRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingConfigRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingConfigRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingConfigRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingConfigRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbingConfigRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingConfigRequestCAS_FieldPathArrayOfValues = (*UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingConfigRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig) {
			values = append(values, v)
		}
	case UpdateProbingConfigRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_config.ProbingConfig_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probing_config.ProbingConfig, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig)
	return res, ok
}
func (fpaov *UpdateProbingConfigRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_config.ProbingConfig_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_config.ProbingConfig_FieldMask)
	return res, ok
}

type UpdateProbingConfigRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbingConfigRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingConfigRequestCAS_FieldPathArrayOfValues = (*UpdateProbingConfigRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingConfigRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingConfigRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probing_config.ProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_config.ProbingConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbingConfigRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbingConfigRequest_FieldPathSelector
	Get(source *DeleteProbingConfigRequest) []interface{}
	GetSingle(source *DeleteProbingConfigRequest) (interface{}, bool)
	ClearValue(item *DeleteProbingConfigRequest)

	// Those methods build corresponding DeleteProbingConfigRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbingConfigRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbingConfigRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbingConfigRequest_FieldPathArrayItemValue
}

type DeleteProbingConfigRequest_FieldPathSelector int32

const (
	DeleteProbingConfigRequest_FieldPathSelectorName DeleteProbingConfigRequest_FieldPathSelector = 0
)

func (s DeleteProbingConfigRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", s))
	}
}

func BuildDeleteProbingConfigRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbingConfigRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbingConfigRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbingConfigRequest_FieldTerminalPath{selector: DeleteProbingConfigRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbingConfigRequest", fp)
}

func ParseDeleteProbingConfigRequest_FieldPath(rawField string) (DeleteProbingConfigRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbingConfigRequest_FieldPath(fp)
}

func MustParseDeleteProbingConfigRequest_FieldPath(rawField string) DeleteProbingConfigRequest_FieldPath {
	fp, err := ParseDeleteProbingConfigRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbingConfigRequest_FieldTerminalPath struct {
	selector DeleteProbingConfigRequest_FieldPathSelector
}

var _ DeleteProbingConfigRequest_FieldPath = (*DeleteProbingConfigRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) Selector() DeleteProbingConfigRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbingConfigRequest
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) Get(source *DeleteProbingConfigRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbingConfigRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbingConfigRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbingConfigRequest
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) GetSingle(source *DeleteProbingConfigRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbingConfigRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		return (*probing_config.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) ClearValue(item *DeleteProbingConfigRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbingConfigRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbingConfigRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbingConfigRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbingConfigRequest_FieldPathSelectorName
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbingConfigRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		return &DeleteProbingConfigRequest_FieldTerminalPathValue{DeleteProbingConfigRequest_FieldTerminalPath: *fp, value: value.(*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbingConfigRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues{DeleteProbingConfigRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		return &DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues{DeleteProbingConfigRequest_FieldTerminalPath: *fp, values: values.([]*probing_config.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbingConfigRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingConfigRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbingConfigRequest_FieldPathValue allows storing values for DeleteProbingConfigRequest fields according to their type
type DeleteProbingConfigRequest_FieldPathValue interface {
	DeleteProbingConfigRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbingConfigRequest)
	CompareWith(*DeleteProbingConfigRequest) (cmp int, comparable bool)
}

func ParseDeleteProbingConfigRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbingConfigRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingConfigRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbingConfigRequest_FieldPathValue), nil
}

func MustParseDeleteProbingConfigRequest_FieldPathValue(pathStr, valueStr string) DeleteProbingConfigRequest_FieldPathValue {
	fpv, err := ParseDeleteProbingConfigRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbingConfigRequest_FieldTerminalPathValue struct {
	DeleteProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingConfigRequest_FieldPathValue = (*DeleteProbingConfigRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbingConfigRequest' as interface{}
func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) AsNameValue() (*probing_config.Reference, bool) {
	res, ok := fpv.value.(*probing_config.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbingConfigRequest
func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) SetTo(target **DeleteProbingConfigRequest) {
	if *target == nil {
		*target = new(DeleteProbingConfigRequest)
	}
	switch fpv.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_config.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbingConfigRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbingConfigRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbingConfigRequest'.
func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbingConfigRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_config.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingConfigRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingConfigRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbingConfigRequest))
}

// DeleteProbingConfigRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbingConfigRequest according to their type
// Present only for array (repeated) types.
type DeleteProbingConfigRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbingConfigRequest_FieldPath
	ContainsValue(*DeleteProbingConfigRequest) bool
}

// ParseDeleteProbingConfigRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbingConfigRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingConfigRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbingConfigRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbingConfigRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbingConfigRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbingConfigRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingConfigRequest_FieldPathArrayItemValue = (*DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbingConfigRequest as interface{}
func (fpaiv *DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbingConfigRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbingConfigRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbingConfigRequest'
func (fpaiv *DeleteProbingConfigRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbingConfigRequest) bool {
	slice := fpaiv.DeleteProbingConfigRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbingConfigRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbingConfigRequest fields according to their type
type DeleteProbingConfigRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbingConfigRequest_FieldPath
}

func ParseDeleteProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbingConfigRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbingConfigRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingConfigRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbingConfigRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbingConfigRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbingConfigRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbingConfigRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbingConfigRequest_FieldPathArrayOfValues = (*DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbingConfigRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_config.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbingConfigRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_config.Reference, bool) {
	res, ok := fpaov.values.([]*probing_config.Reference)
	return res, ok
}
