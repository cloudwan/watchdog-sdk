// Code generated by protoc-gen-goten-client
// API: ProbingConfigService
// DO NOT EDIT!!!

package probing_config_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probing_config "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_config"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_config.ProbingConfig{}
)

var (
	descriptorsInitialized           bool
	probingConfigServiceDescriptor   *ProbingConfigServiceDescriptor
	getProbingConfigDescriptor       *GetProbingConfigDescriptor
	batchGetProbingConfigsDescriptor *BatchGetProbingConfigsDescriptor
	listProbingConfigsDescriptor     *ListProbingConfigsDescriptor
	watchProbingConfigDescriptor     *WatchProbingConfigDescriptor
	watchProbingConfigsDescriptor    *WatchProbingConfigsDescriptor
	createProbingConfigDescriptor    *CreateProbingConfigDescriptor
	updateProbingConfigDescriptor    *UpdateProbingConfigDescriptor
	deleteProbingConfigDescriptor    *DeleteProbingConfigDescriptor
)

type GetProbingConfigDescriptor struct{}

type GetProbingConfigDescriptorClientMsgHandle struct{}

type GetProbingConfigDescriptorServerMsgHandle struct{}

func (d *GetProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbingConfigRequest{}
}

func (d *GetProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *GetProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsCollection() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsPlural() bool {
	return false
}

func (d *GetProbingConfigDescriptor) HasResource() bool {
	return true
}

func (d *GetProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbingConfigDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbingConfigDescriptor) GetMethodName() string {
	return "GetProbingConfig"
}

func (d *GetProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/GetProbingConfig"
}

func (d *GetProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *GetProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *GetProbingConfigDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *GetProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingConfigDescriptorClientMsgHandle{}
}

func (d *GetProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingConfigDescriptorServerMsgHandle{}
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbingConfigDescriptor() *GetProbingConfigDescriptor {
	return getProbingConfigDescriptor
}

type BatchGetProbingConfigsDescriptor struct{}

type BatchGetProbingConfigsDescriptorClientMsgHandle struct{}

type BatchGetProbingConfigsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbingConfigsRequest{}
}

func (d *BatchGetProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbingConfigsResponse{}
}

func (d *BatchGetProbingConfigsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbingConfigsDescriptor) GetMethodName() string {
	return "BatchGetProbingConfigs"
}

func (d *BatchGetProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/BatchGetProbingConfigs"
}

func (d *BatchGetProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *BatchGetProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *BatchGetProbingConfigsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *BatchGetProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingConfigsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingConfigsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(probing_config.ProbingConfigNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (probing_config.ProbingConfigNameList)(nil)
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProbingConfigs(); len(resources) > 0 {
			list := make(probing_config.ProbingConfigNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (probing_config.ProbingConfigNameList)(nil)
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbingConfigsDescriptor() *BatchGetProbingConfigsDescriptor {
	return batchGetProbingConfigsDescriptor
}

type ListProbingConfigsDescriptor struct{}

type ListProbingConfigsDescriptorClientMsgHandle struct{}

type ListProbingConfigsDescriptorServerMsgHandle struct{}

func (d *ListProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbingConfigsRequest{}
}

func (d *ListProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbingConfigsResponse{}
}

func (d *ListProbingConfigsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) IsCollection() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) IsPlural() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) HasResource() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbingConfigsDescriptor) GetMethodName() string {
	return "ListProbingConfigs"
}

func (d *ListProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/ListProbingConfigs"
}

func (d *ListProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *ListProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *ListProbingConfigsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *ListProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingConfigsDescriptorClientMsgHandle{}
}

func (d *ListProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingConfigsDescriptorServerMsgHandle{}
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*probing_config.ParentName)(nil)
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProbingConfigs(); len(resources) > 0 {
			list := make(probing_config.ProbingConfigNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (probing_config.ProbingConfigNameList)(nil)
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListProbingConfigsDescriptor() *ListProbingConfigsDescriptor {
	return listProbingConfigsDescriptor
}

type WatchProbingConfigDescriptor struct{}

type WatchProbingConfigDescriptorClientMsgHandle struct{}

type WatchProbingConfigDescriptorServerMsgHandle struct{}

func (d *WatchProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingConfigRequest{}
}

func (d *WatchProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingConfigResponse{}
}

func (d *WatchProbingConfigDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingConfigDescriptor) IsCollection() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsPlural() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) HasResource() bool {
	return true
}

func (d *WatchProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingConfigDescriptor) GetMethodName() string {
	return "WatchProbingConfig"
}

func (d *WatchProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/WatchProbingConfig"
}

func (d *WatchProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *WatchProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *WatchProbingConfigDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *WatchProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigDescriptorClientMsgHandle{}
}

func (d *WatchProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigDescriptorServerMsgHandle{}
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingConfigResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *probing_config.ProbingConfigChange_Added_:
				return tResChange.Added.GetProbingConfig().GetName()
			case *probing_config.ProbingConfigChange_Modified_:
				return tResChange.Modified.GetName()
			case *probing_config.ProbingConfigChange_Removed_:
				return tResChange.Removed.GetName()
			case *probing_config.ProbingConfigChange_Current_:
				return tResChange.Current.GetProbingConfig().GetName()
			}
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingConfigResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingConfigResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingConfigDescriptor() *WatchProbingConfigDescriptor {
	return watchProbingConfigDescriptor
}

type WatchProbingConfigsDescriptor struct{}

type WatchProbingConfigsDescriptorClientMsgHandle struct{}

type WatchProbingConfigsDescriptorServerMsgHandle struct{}

func (d *WatchProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingConfigsRequest{}
}

func (d *WatchProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingConfigsResponse{}
}

func (d *WatchProbingConfigsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) HasResource() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingConfigsDescriptor) GetMethodName() string {
	return "WatchProbingConfigs"
}

func (d *WatchProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/WatchProbingConfigs"
}

func (d *WatchProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *WatchProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *WatchProbingConfigsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *WatchProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigsDescriptorClientMsgHandle{}
}

func (d *WatchProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigsDescriptorServerMsgHandle{}
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*probing_config.ParentName)(nil)
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetProbingConfigChanges(); len(resChanges) > 0 {
			list := make(probing_config.ProbingConfigNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *probing_config.ProbingConfigChange_Added_:
					list = append(list, tResChange.Added.GetProbingConfig().GetName())
				case *probing_config.ProbingConfigChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *probing_config.ProbingConfigChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *probing_config.ProbingConfigChange_Current_:
					list = append(list, tResChange.Current.GetProbingConfig().GetName())
				}
			}
			return list
		}
	}
	return (probing_config.ProbingConfigNameList)(nil)
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingConfigsDescriptor() *WatchProbingConfigsDescriptor {
	return watchProbingConfigsDescriptor
}

type CreateProbingConfigDescriptor struct{}

type CreateProbingConfigDescriptorClientMsgHandle struct{}

type CreateProbingConfigDescriptorServerMsgHandle struct{}

func (d *CreateProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbingConfigRequest{}
}

func (d *CreateProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *CreateProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) IsCollection() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) IsPlural() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) HasResource() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbingConfigDescriptor) GetMethodName() string {
	return "CreateProbingConfig"
}

func (d *CreateProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/CreateProbingConfig"
}

func (d *CreateProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *CreateProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *CreateProbingConfigDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *CreateProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingConfigDescriptorClientMsgHandle{}
}

func (d *CreateProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingConfigDescriptorServerMsgHandle{}
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProbingConfig()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*probing_config.ParentName)(nil)
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbingConfigDescriptor() *CreateProbingConfigDescriptor {
	return createProbingConfigDescriptor
}

type UpdateProbingConfigDescriptor struct{}

type UpdateProbingConfigDescriptorClientMsgHandle struct{}

type UpdateProbingConfigDescriptorServerMsgHandle struct{}

func (d *UpdateProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbingConfigRequest{}
}

func (d *UpdateProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *UpdateProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) HasResource() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbingConfigDescriptor) GetMethodName() string {
	return "UpdateProbingConfig"
}

func (d *UpdateProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/UpdateProbingConfig"
}

func (d *UpdateProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *UpdateProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *UpdateProbingConfigDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *UpdateProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingConfigDescriptorClientMsgHandle{}
}

func (d *UpdateProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingConfigDescriptorServerMsgHandle{}
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProbingConfig()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbingConfigDescriptor() *UpdateProbingConfigDescriptor {
	return updateProbingConfigDescriptor
}

type DeleteProbingConfigDescriptor struct{}

type DeleteProbingConfigDescriptorClientMsgHandle struct{}

type DeleteProbingConfigDescriptorServerMsgHandle struct{}

func (d *DeleteProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbingConfigRequest{}
}

func (d *DeleteProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) HasResource() bool {
	return true
}

func (d *DeleteProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbingConfigDescriptor) GetMethodName() string {
	return "DeleteProbingConfig"
}

func (d *DeleteProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/DeleteProbingConfig"
}

func (d *DeleteProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *DeleteProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *DeleteProbingConfigDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *DeleteProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingConfigDescriptorClientMsgHandle{}
}

func (d *DeleteProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingConfigDescriptorServerMsgHandle{}
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbingConfigDescriptor() *DeleteProbingConfigDescriptor {
	return deleteProbingConfigDescriptor
}

type ProbingConfigServiceDescriptor struct{}

func (d *ProbingConfigServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbingConfigDescriptor,
		batchGetProbingConfigsDescriptor,
		listProbingConfigsDescriptor,
		watchProbingConfigDescriptor,
		watchProbingConfigsDescriptor,
		createProbingConfigDescriptor,
		updateProbingConfigDescriptor,
		deleteProbingConfigDescriptor,
	}
}

func (d *ProbingConfigServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService"
}

func (d *ProbingConfigServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbingConfigServiceDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *ProbingConfigServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbingConfigServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbingConfigServiceDescriptor() *ProbingConfigServiceDescriptor {
	return probingConfigServiceDescriptor
}

func initDescriptors() {
	probingConfigServiceDescriptor = &ProbingConfigServiceDescriptor{}
	getProbingConfigDescriptor = &GetProbingConfigDescriptor{}
	batchGetProbingConfigsDescriptor = &BatchGetProbingConfigsDescriptor{}
	listProbingConfigsDescriptor = &ListProbingConfigsDescriptor{}
	watchProbingConfigDescriptor = &WatchProbingConfigDescriptor{}
	watchProbingConfigsDescriptor = &WatchProbingConfigsDescriptor{}
	createProbingConfigDescriptor = &CreateProbingConfigDescriptor{}
	updateProbingConfigDescriptor = &UpdateProbingConfigDescriptor{}
	deleteProbingConfigDescriptor = &DeleteProbingConfigDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probingConfigServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbingConfigDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
