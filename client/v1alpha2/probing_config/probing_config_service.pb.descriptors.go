// Code generated by protoc-gen-goten-client
// API: ProbingConfigService
// DO NOT EDIT!!!

package probing_config_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probing_config "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_config"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_config.ProbingConfig{}
)

var (
	descriptorsInitialized           bool
	probingConfigServiceDescriptor   *ProbingConfigServiceDescriptor
	getProbingConfigDescriptor       *GetProbingConfigDescriptor
	batchGetProbingConfigsDescriptor *BatchGetProbingConfigsDescriptor
	listProbingConfigsDescriptor     *ListProbingConfigsDescriptor
	watchProbingConfigDescriptor     *WatchProbingConfigDescriptor
	watchProbingConfigsDescriptor    *WatchProbingConfigsDescriptor
	createProbingConfigDescriptor    *CreateProbingConfigDescriptor
	updateProbingConfigDescriptor    *UpdateProbingConfigDescriptor
	deleteProbingConfigDescriptor    *DeleteProbingConfigDescriptor
)

type GetProbingConfigDescriptor struct{}

type GetProbingConfigDescriptorClientMsgHandle struct{}

type GetProbingConfigDescriptorServerMsgHandle struct{}

func (d *GetProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbingConfigRequest{}
}

func (d *GetProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *GetProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProbingConfigDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProbingConfigDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbingConfigDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbingConfigDescriptor) GetMethodName() string {
	return "GetProbingConfig"
}

func (d *GetProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/GetProbingConfig"
}

func (d *GetProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *GetProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *GetProbingConfigDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *GetProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingConfigDescriptorClientMsgHandle{}
}

func (d *GetProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingConfigDescriptorServerMsgHandle{}
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_config.Name)(nil)
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingConfigDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingConfigDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbingConfigDescriptor() *GetProbingConfigDescriptor {
	return getProbingConfigDescriptor
}

type BatchGetProbingConfigsDescriptor struct{}

type BatchGetProbingConfigsDescriptorClientMsgHandle struct{}

type BatchGetProbingConfigsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbingConfigsRequest{}
}

func (d *BatchGetProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbingConfigsResponse{}
}

func (d *BatchGetProbingConfigsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbingConfigsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbingConfigsDescriptor) GetMethodName() string {
	return "BatchGetProbingConfigs"
}

func (d *BatchGetProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/BatchGetProbingConfigs"
}

func (d *BatchGetProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *BatchGetProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *BatchGetProbingConfigsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *BatchGetProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingConfigsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingConfigsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(probing_config.ProbingConfigNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (probing_config.ProbingConfigNameList)(nil)
}

func (h *BatchGetProbingConfigsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingConfigs()
	list := make(probing_config.ProbingConfigNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProbingConfigsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbingConfigsDescriptor() *BatchGetProbingConfigsDescriptor {
	return batchGetProbingConfigsDescriptor
}

type ListProbingConfigsDescriptor struct{}

type ListProbingConfigsDescriptorClientMsgHandle struct{}

type ListProbingConfigsDescriptorServerMsgHandle struct{}

func (d *ListProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbingConfigsRequest{}
}

func (d *ListProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbingConfigsResponse{}
}

func (d *ListProbingConfigsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbingConfigsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbingConfigsDescriptor) GetMethodName() string {
	return "ListProbingConfigs"
}

func (d *ListProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/ListProbingConfigs"
}

func (d *ListProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *ListProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *ListProbingConfigsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *ListProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingConfigsDescriptorClientMsgHandle{}
}

func (d *ListProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingConfigsDescriptorServerMsgHandle{}
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbingConfigsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingConfigs()
	list := make(probing_config.ProbingConfigNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProbingConfigsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProbingConfigsDescriptor() *ListProbingConfigsDescriptor {
	return listProbingConfigsDescriptor
}

type WatchProbingConfigDescriptor struct{}

type WatchProbingConfigDescriptorClientMsgHandle struct{}

type WatchProbingConfigDescriptorServerMsgHandle struct{}

func (d *WatchProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingConfigRequest{}
}

func (d *WatchProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingConfigResponse{}
}

func (d *WatchProbingConfigDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingConfigDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingConfigDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingConfigDescriptor) GetMethodName() string {
	return "WatchProbingConfig"
}

func (d *WatchProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/WatchProbingConfig"
}

func (d *WatchProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *WatchProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *WatchProbingConfigDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *WatchProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigDescriptorClientMsgHandle{}
}

func (d *WatchProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigDescriptorServerMsgHandle{}
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_config.Name)(nil)
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingConfigResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *probing_config.ProbingConfigChange_Added_:
			return tResChange.Added.GetProbingConfig().GetName()
		case *probing_config.ProbingConfigChange_Modified_:
			return tResChange.Modified.GetName()
		case *probing_config.ProbingConfigChange_Removed_:
			return tResChange.Removed.GetName()
		case *probing_config.ProbingConfigChange_Current_:
			return tResChange.Current.GetProbingConfig().GetName()
		}
	}
	return (*probing_config.Name)(nil)
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingConfigResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingConfigResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingConfigDescriptor() *WatchProbingConfigDescriptor {
	return watchProbingConfigDescriptor
}

type WatchProbingConfigsDescriptor struct{}

type WatchProbingConfigsDescriptorClientMsgHandle struct{}

type WatchProbingConfigsDescriptorServerMsgHandle struct{}

func (d *WatchProbingConfigsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingConfigsRequest{}
}

func (d *WatchProbingConfigsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingConfigsResponse{}
}

func (d *WatchProbingConfigsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingConfigsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingConfigsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingConfigsDescriptor) GetMethodName() string {
	return "WatchProbingConfigs"
}

func (d *WatchProbingConfigsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/WatchProbingConfigs"
}

func (d *WatchProbingConfigsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingConfigsDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *WatchProbingConfigsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingConfigsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingConfigsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *WatchProbingConfigsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *WatchProbingConfigsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigsDescriptorClientMsgHandle{}
}

func (d *WatchProbingConfigsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingConfigsDescriptorServerMsgHandle{}
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingConfigsRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingConfigsRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingConfigsRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_config.ParentName)(nil)
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingConfigsResponse) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingConfigsResponse) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProbingConfigChanges()
	list := make(probing_config.ProbingConfigNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *probing_config.ProbingConfigChange_Added_:
			list = append(list, tResChange.Added.GetProbingConfig().GetName())
		case *probing_config.ProbingConfigChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *probing_config.ProbingConfigChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *probing_config.ProbingConfigChange_Current_:
			list = append(list, tResChange.Current.GetProbingConfig().GetName())
		}
	}
	return list
}

func (h *WatchProbingConfigsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingConfigsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingConfigsResponse) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingConfigsDescriptor() *WatchProbingConfigsDescriptor {
	return watchProbingConfigsDescriptor
}

type CreateProbingConfigDescriptor struct{}

type CreateProbingConfigDescriptorClientMsgHandle struct{}

type CreateProbingConfigDescriptorServerMsgHandle struct{}

func (d *CreateProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbingConfigRequest{}
}

func (d *CreateProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *CreateProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProbingConfigDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbingConfigDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbingConfigDescriptor) GetMethodName() string {
	return "CreateProbingConfig"
}

func (d *CreateProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/CreateProbingConfig"
}

func (d *CreateProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *CreateProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *CreateProbingConfigDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *CreateProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingConfigDescriptorClientMsgHandle{}
}

func (d *CreateProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingConfigDescriptorServerMsgHandle{}
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingConfig().GetName()
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingConfigDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_config.ParentName)(nil)
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingConfigDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbingConfigDescriptor() *CreateProbingConfigDescriptor {
	return createProbingConfigDescriptor
}

type UpdateProbingConfigDescriptor struct{}

type UpdateProbingConfigDescriptorClientMsgHandle struct{}

type UpdateProbingConfigDescriptorServerMsgHandle struct{}

func (d *UpdateProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbingConfigRequest{}
}

func (d *UpdateProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_config.ProbingConfig{}
}

func (d *UpdateProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProbingConfigDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbingConfigDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbingConfigDescriptor) GetMethodName() string {
	return "UpdateProbingConfig"
}

func (d *UpdateProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/UpdateProbingConfig"
}

func (d *UpdateProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *UpdateProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *UpdateProbingConfigDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *UpdateProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingConfigDescriptorClientMsgHandle{}
}

func (d *UpdateProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingConfigDescriptorServerMsgHandle{}
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingConfig().GetName()
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_config.ProbingConfig) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_config.ProbingConfig) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingConfigDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_config.ProbingConfig)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_config.ProbingConfig) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbingConfigDescriptor() *UpdateProbingConfigDescriptor {
	return updateProbingConfigDescriptor
}

type DeleteProbingConfigDescriptor struct{}

type DeleteProbingConfigDescriptorClientMsgHandle struct{}

type DeleteProbingConfigDescriptorServerMsgHandle struct{}

func (d *DeleteProbingConfigDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbingConfigRequest{}
}

func (d *DeleteProbingConfigDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbingConfigDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbingConfigDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProbingConfigDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbingConfigDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbingConfigDescriptor) GetMethodName() string {
	return "DeleteProbingConfig"
}

func (d *DeleteProbingConfigDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService/DeleteProbingConfig"
}

func (d *DeleteProbingConfigDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbingConfigDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *DeleteProbingConfigDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbingConfigDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbingConfigDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingConfigServiceDescriptor
}

func (d *DeleteProbingConfigDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_config.GetDescriptor()
}

func (d *DeleteProbingConfigDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingConfigDescriptorClientMsgHandle{}
}

func (d *DeleteProbingConfigDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingConfigDescriptorServerMsgHandle{}
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProbingConfigRequest) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_config.Name)(nil)
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProbingConfigRequest) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingConfigRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProbingConfigRequest) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probing_config.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probing_config.Name
	})
	if ok {
		return probing_config.ProbingConfigNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingConfigDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probing_config.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbingConfigDescriptor() *DeleteProbingConfigDescriptor {
	return deleteProbingConfigDescriptor
}

type ProbingConfigServiceDescriptor struct{}

func (d *ProbingConfigServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbingConfigDescriptor,
		batchGetProbingConfigsDescriptor,
		listProbingConfigsDescriptor,
		watchProbingConfigDescriptor,
		watchProbingConfigsDescriptor,
		createProbingConfigDescriptor,
		updateProbingConfigDescriptor,
		deleteProbingConfigDescriptor,
	}
}

func (d *ProbingConfigServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbingConfigService"
}

func (d *ProbingConfigServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbingConfigServiceDescriptor) GetApiName() string {
	return "ProbingConfigService"
}

func (d *ProbingConfigServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbingConfigServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbingConfigServiceDescriptor() *ProbingConfigServiceDescriptor {
	return probingConfigServiceDescriptor
}

func initDescriptors() {
	probingConfigServiceDescriptor = &ProbingConfigServiceDescriptor{}
	getProbingConfigDescriptor = &GetProbingConfigDescriptor{}
	batchGetProbingConfigsDescriptor = &BatchGetProbingConfigsDescriptor{}
	listProbingConfigsDescriptor = &ListProbingConfigsDescriptor{}
	watchProbingConfigDescriptor = &WatchProbingConfigDescriptor{}
	watchProbingConfigsDescriptor = &WatchProbingConfigsDescriptor{}
	createProbingConfigDescriptor = &CreateProbingConfigDescriptor{}
	updateProbingConfigDescriptor = &UpdateProbingConfigDescriptor{}
	deleteProbingConfigDescriptor = &DeleteProbingConfigDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probingConfigServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingConfigsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbingConfigDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbingConfigDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
