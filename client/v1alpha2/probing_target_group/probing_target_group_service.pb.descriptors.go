// Code generated by protoc-gen-goten-client
// API: ProbingTargetGroupService
// DO NOT EDIT!!!

package probing_target_group_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_target_group.ProbingTargetGroup{}
)

var (
	descriptorsInitialized                bool
	probingTargetGroupServiceDescriptor   *ProbingTargetGroupServiceDescriptor
	getProbingTargetGroupDescriptor       *GetProbingTargetGroupDescriptor
	batchGetProbingTargetGroupsDescriptor *BatchGetProbingTargetGroupsDescriptor
	listProbingTargetGroupsDescriptor     *ListProbingTargetGroupsDescriptor
	watchProbingTargetGroupDescriptor     *WatchProbingTargetGroupDescriptor
	watchProbingTargetGroupsDescriptor    *WatchProbingTargetGroupsDescriptor
	createProbingTargetGroupDescriptor    *CreateProbingTargetGroupDescriptor
	updateProbingTargetGroupDescriptor    *UpdateProbingTargetGroupDescriptor
	deleteProbingTargetGroupDescriptor    *DeleteProbingTargetGroupDescriptor
	searchProbingTargetGroupsDescriptor   *SearchProbingTargetGroupsDescriptor
)

type GetProbingTargetGroupDescriptor struct{}

type GetProbingTargetGroupDescriptorClientMsgHandle struct{}

type GetProbingTargetGroupDescriptorServerMsgHandle struct{}

func (d *GetProbingTargetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbingTargetGroupRequest{}
}

func (d *GetProbingTargetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target_group.ProbingTargetGroup{}
}

func (d *GetProbingTargetGroupDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbingTargetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbingTargetGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbingTargetGroupDescriptor) IsCollection() bool {
	return false
}

func (d *GetProbingTargetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *GetProbingTargetGroupDescriptor) HasResource() bool {
	return true
}

func (d *GetProbingTargetGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbingTargetGroupDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbingTargetGroupDescriptor) GetMethodName() string {
	return "GetProbingTargetGroup"
}

func (d *GetProbingTargetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/GetProbingTargetGroup"
}

func (d *GetProbingTargetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbingTargetGroupDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *GetProbingTargetGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbingTargetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbingTargetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *GetProbingTargetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *GetProbingTargetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingTargetGroupDescriptorClientMsgHandle{}
}

func (d *GetProbingTargetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingTargetGroupDescriptorServerMsgHandle{}
}

func (h *GetProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetProbingTargetGroupRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *GetProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetProbingTargetGroupRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingTargetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetProbingTargetGroupRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_target_group.ProbingTargetGroup) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *GetProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_target_group.ProbingTargetGroup) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingTargetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_target_group.ProbingTargetGroup) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbingTargetGroupDescriptor() *GetProbingTargetGroupDescriptor {
	return getProbingTargetGroupDescriptor
}

type BatchGetProbingTargetGroupsDescriptor struct{}

type BatchGetProbingTargetGroupsDescriptorClientMsgHandle struct{}

type BatchGetProbingTargetGroupsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbingTargetGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbingTargetGroupsRequest{}
}

func (d *BatchGetProbingTargetGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbingTargetGroupsResponse{}
}

func (d *BatchGetProbingTargetGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbingTargetGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbingTargetGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbingTargetGroupsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetProbingTargetGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetProbingTargetGroupsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetProbingTargetGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetMethodName() string {
	return "BatchGetProbingTargetGroups"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/BatchGetProbingTargetGroups"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingTargetGroupsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbingTargetGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingTargetGroupsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProbingTargetGroupsRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProbingTargetGroupsRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(probing_target_group.ProbingTargetGroupNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (probing_target_group.ProbingTargetGroupNameList)(nil)
}

func (h *BatchGetProbingTargetGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProbingTargetGroupsRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProbingTargetGroupsResponse) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProbingTargetGroupsResponse) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProbingTargetGroups(); len(resources) > 0 {
			list := make(probing_target_group.ProbingTargetGroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (probing_target_group.ProbingTargetGroupNameList)(nil)
}

func (h *BatchGetProbingTargetGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProbingTargetGroupsResponse) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbingTargetGroupsDescriptor() *BatchGetProbingTargetGroupsDescriptor {
	return batchGetProbingTargetGroupsDescriptor
}

type ListProbingTargetGroupsDescriptor struct{}

type ListProbingTargetGroupsDescriptorClientMsgHandle struct{}

type ListProbingTargetGroupsDescriptorServerMsgHandle struct{}

func (d *ListProbingTargetGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbingTargetGroupsRequest{}
}

func (d *ListProbingTargetGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbingTargetGroupsResponse{}
}

func (d *ListProbingTargetGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbingTargetGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbingTargetGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbingTargetGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *ListProbingTargetGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *ListProbingTargetGroupsDescriptor) HasResource() bool {
	return true
}

func (d *ListProbingTargetGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbingTargetGroupsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbingTargetGroupsDescriptor) GetMethodName() string {
	return "ListProbingTargetGroups"
}

func (d *ListProbingTargetGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/ListProbingTargetGroups"
}

func (d *ListProbingTargetGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbingTargetGroupsDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *ListProbingTargetGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbingTargetGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbingTargetGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *ListProbingTargetGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *ListProbingTargetGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingTargetGroupsDescriptorClientMsgHandle{}
}

func (d *ListProbingTargetGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingTargetGroupsDescriptorServerMsgHandle{}
}

func (h *ListProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProbingTargetGroupsRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProbingTargetGroupsRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbingTargetGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProbingTargetGroupsRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*probing_target_group.ParentName)(nil)
}

func (h *ListProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProbingTargetGroupsResponse) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProbingTargetGroupsResponse) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProbingTargetGroups(); len(resources) > 0 {
			list := make(probing_target_group.ProbingTargetGroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (probing_target_group.ProbingTargetGroupNameList)(nil)
}

func (h *ListProbingTargetGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProbingTargetGroupsResponse) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListProbingTargetGroupsDescriptor() *ListProbingTargetGroupsDescriptor {
	return listProbingTargetGroupsDescriptor
}

type WatchProbingTargetGroupDescriptor struct{}

type WatchProbingTargetGroupDescriptorClientMsgHandle struct{}

type WatchProbingTargetGroupDescriptorServerMsgHandle struct{}

func (d *WatchProbingTargetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingTargetGroupRequest{}
}

func (d *WatchProbingTargetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingTargetGroupResponse{}
}

func (d *WatchProbingTargetGroupDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingTargetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingTargetGroupDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingTargetGroupDescriptor) IsCollection() bool {
	return false
}

func (d *WatchProbingTargetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *WatchProbingTargetGroupDescriptor) HasResource() bool {
	return true
}

func (d *WatchProbingTargetGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingTargetGroupDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingTargetGroupDescriptor) GetMethodName() string {
	return "WatchProbingTargetGroup"
}

func (d *WatchProbingTargetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/WatchProbingTargetGroup"
}

func (d *WatchProbingTargetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingTargetGroupDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *WatchProbingTargetGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingTargetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingTargetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *WatchProbingTargetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *WatchProbingTargetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetGroupDescriptorClientMsgHandle{}
}

func (d *WatchProbingTargetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetGroupDescriptorServerMsgHandle{}
}

func (h *WatchProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingTargetGroupRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *WatchProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingTargetGroupRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingTargetGroupRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingTargetGroupResponse) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *probing_target_group.ProbingTargetGroupChange_Added_:
				return tResChange.Added.GetProbingTargetGroup().GetName()
			case *probing_target_group.ProbingTargetGroupChange_Modified_:
				return tResChange.Modified.GetName()
			case *probing_target_group.ProbingTargetGroupChange_Removed_:
				return tResChange.Removed.GetName()
			case *probing_target_group.ProbingTargetGroupChange_Current_:
				return tResChange.Current.GetProbingTargetGroup().GetName()
			}
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *WatchProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingTargetGroupResponse) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingTargetGroupResponse) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingTargetGroupDescriptor() *WatchProbingTargetGroupDescriptor {
	return watchProbingTargetGroupDescriptor
}

type WatchProbingTargetGroupsDescriptor struct{}

type WatchProbingTargetGroupsDescriptorClientMsgHandle struct{}

type WatchProbingTargetGroupsDescriptorServerMsgHandle struct{}

func (d *WatchProbingTargetGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingTargetGroupsRequest{}
}

func (d *WatchProbingTargetGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingTargetGroupsResponse{}
}

func (d *WatchProbingTargetGroupsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingTargetGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingTargetGroupsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingTargetGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchProbingTargetGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchProbingTargetGroupsDescriptor) HasResource() bool {
	return true
}

func (d *WatchProbingTargetGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingTargetGroupsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingTargetGroupsDescriptor) GetMethodName() string {
	return "WatchProbingTargetGroups"
}

func (d *WatchProbingTargetGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/WatchProbingTargetGroups"
}

func (d *WatchProbingTargetGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingTargetGroupsDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *WatchProbingTargetGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingTargetGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingTargetGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *WatchProbingTargetGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *WatchProbingTargetGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetGroupsDescriptorClientMsgHandle{}
}

func (d *WatchProbingTargetGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetGroupsDescriptorServerMsgHandle{}
}

func (h *WatchProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingTargetGroupsRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingTargetGroupsRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingTargetGroupsRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*probing_target_group.ParentName)(nil)
}

func (h *WatchProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProbingTargetGroupsResponse) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProbingTargetGroupsResponse) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetProbingTargetGroupChanges(); len(resChanges) > 0 {
			list := make(probing_target_group.ProbingTargetGroupNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *probing_target_group.ProbingTargetGroupChange_Added_:
					list = append(list, tResChange.Added.GetProbingTargetGroup().GetName())
				case *probing_target_group.ProbingTargetGroupChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *probing_target_group.ProbingTargetGroupChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *probing_target_group.ProbingTargetGroupChange_Current_:
					list = append(list, tResChange.Current.GetProbingTargetGroup().GetName())
				}
			}
			return list
		}
	}
	return (probing_target_group.ProbingTargetGroupNameList)(nil)
}

func (h *WatchProbingTargetGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProbingTargetGroupsResponse) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingTargetGroupsDescriptor() *WatchProbingTargetGroupsDescriptor {
	return watchProbingTargetGroupsDescriptor
}

type CreateProbingTargetGroupDescriptor struct{}

type CreateProbingTargetGroupDescriptorClientMsgHandle struct{}

type CreateProbingTargetGroupDescriptorServerMsgHandle struct{}

func (d *CreateProbingTargetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbingTargetGroupRequest{}
}

func (d *CreateProbingTargetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target_group.ProbingTargetGroup{}
}

func (d *CreateProbingTargetGroupDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbingTargetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbingTargetGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbingTargetGroupDescriptor) IsCollection() bool {
	return true
}

func (d *CreateProbingTargetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *CreateProbingTargetGroupDescriptor) HasResource() bool {
	return true
}

func (d *CreateProbingTargetGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbingTargetGroupDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbingTargetGroupDescriptor) GetMethodName() string {
	return "CreateProbingTargetGroup"
}

func (d *CreateProbingTargetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/CreateProbingTargetGroup"
}

func (d *CreateProbingTargetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbingTargetGroupDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *CreateProbingTargetGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbingTargetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbingTargetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *CreateProbingTargetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *CreateProbingTargetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingTargetGroupDescriptorClientMsgHandle{}
}

func (d *CreateProbingTargetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingTargetGroupDescriptorServerMsgHandle{}
}

func (h *CreateProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateProbingTargetGroupRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProbingTargetGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *CreateProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateProbingTargetGroupRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingTargetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateProbingTargetGroupRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*probing_target_group.ParentName)(nil)
}

func (h *CreateProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_target_group.ProbingTargetGroup) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *CreateProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_target_group.ProbingTargetGroup) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingTargetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_target_group.ProbingTargetGroup) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbingTargetGroupDescriptor() *CreateProbingTargetGroupDescriptor {
	return createProbingTargetGroupDescriptor
}

type UpdateProbingTargetGroupDescriptor struct{}

type UpdateProbingTargetGroupDescriptorClientMsgHandle struct{}

type UpdateProbingTargetGroupDescriptorServerMsgHandle struct{}

func (d *UpdateProbingTargetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbingTargetGroupRequest{}
}

func (d *UpdateProbingTargetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target_group.ProbingTargetGroup{}
}

func (d *UpdateProbingTargetGroupDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbingTargetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbingTargetGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbingTargetGroupDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateProbingTargetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateProbingTargetGroupDescriptor) HasResource() bool {
	return true
}

func (d *UpdateProbingTargetGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbingTargetGroupDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbingTargetGroupDescriptor) GetMethodName() string {
	return "UpdateProbingTargetGroup"
}

func (d *UpdateProbingTargetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/UpdateProbingTargetGroup"
}

func (d *UpdateProbingTargetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbingTargetGroupDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *UpdateProbingTargetGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbingTargetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbingTargetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *UpdateProbingTargetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *UpdateProbingTargetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingTargetGroupDescriptorClientMsgHandle{}
}

func (d *UpdateProbingTargetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingTargetGroupDescriptorServerMsgHandle{}
}

func (h *UpdateProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateProbingTargetGroupRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProbingTargetGroup()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *UpdateProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateProbingTargetGroupRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingTargetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateProbingTargetGroupRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*probing_target_group.ProbingTargetGroup) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *UpdateProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*probing_target_group.ProbingTargetGroup) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingTargetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target_group.ProbingTargetGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*probing_target_group.ProbingTargetGroup) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbingTargetGroupDescriptor() *UpdateProbingTargetGroupDescriptor {
	return updateProbingTargetGroupDescriptor
}

type DeleteProbingTargetGroupDescriptor struct{}

type DeleteProbingTargetGroupDescriptorClientMsgHandle struct{}

type DeleteProbingTargetGroupDescriptorServerMsgHandle struct{}

func (d *DeleteProbingTargetGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbingTargetGroupRequest{}
}

func (d *DeleteProbingTargetGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbingTargetGroupDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbingTargetGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbingTargetGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbingTargetGroupDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteProbingTargetGroupDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteProbingTargetGroupDescriptor) HasResource() bool {
	return true
}

func (d *DeleteProbingTargetGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbingTargetGroupDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbingTargetGroupDescriptor) GetMethodName() string {
	return "DeleteProbingTargetGroup"
}

func (d *DeleteProbingTargetGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/DeleteProbingTargetGroup"
}

func (d *DeleteProbingTargetGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbingTargetGroupDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *DeleteProbingTargetGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbingTargetGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbingTargetGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *DeleteProbingTargetGroupDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *DeleteProbingTargetGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingTargetGroupDescriptorClientMsgHandle{}
}

func (d *DeleteProbingTargetGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingTargetGroupDescriptorServerMsgHandle{}
}

func (h *DeleteProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteProbingTargetGroupRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probing_target_group.Name)(nil)
}

func (h *DeleteProbingTargetGroupDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteProbingTargetGroupRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingTargetGroupDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingTargetGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteProbingTargetGroupRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingTargetGroupDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingTargetGroupDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbingTargetGroupDescriptor() *DeleteProbingTargetGroupDescriptor {
	return deleteProbingTargetGroupDescriptor
}

type SearchProbingTargetGroupsDescriptor struct{}

type SearchProbingTargetGroupsDescriptorClientMsgHandle struct{}

type SearchProbingTargetGroupsDescriptorServerMsgHandle struct{}

func (d *SearchProbingTargetGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchProbingTargetGroupsRequest{}
}

func (d *SearchProbingTargetGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchProbingTargetGroupsResponse{}
}

func (d *SearchProbingTargetGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchProbingTargetGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchProbingTargetGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchProbingTargetGroupsDescriptor) IsCollection() bool {
	return true
}

func (d *SearchProbingTargetGroupsDescriptor) IsPlural() bool {
	return true
}

func (d *SearchProbingTargetGroupsDescriptor) HasResource() bool {
	return true
}

func (d *SearchProbingTargetGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchProbingTargetGroupsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchProbingTargetGroupsDescriptor) GetMethodName() string {
	return "SearchProbingTargetGroups"
}

func (d *SearchProbingTargetGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/SearchProbingTargetGroups"
}

func (d *SearchProbingTargetGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SearchProbingTargetGroupsDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *SearchProbingTargetGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SearchProbingTargetGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SearchProbingTargetGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetGroupServiceDescriptor
}

func (d *SearchProbingTargetGroupsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probing_target_group.GetDescriptor()
}

func (d *SearchProbingTargetGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingTargetGroupsDescriptorClientMsgHandle{}
}

func (d *SearchProbingTargetGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingTargetGroupsDescriptorServerMsgHandle{}
}

func (h *SearchProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchProbingTargetGroupsRequest) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingTargetGroupsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchProbingTargetGroupsRequest) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchProbingTargetGroupsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchProbingTargetGroupsRequest) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*probing_target_group.ParentName)(nil)
}

func (h *SearchProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SearchProbingTargetGroupsResponse) *probing_target_group.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingTargetGroupsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SearchProbingTargetGroupsResponse) []*probing_target_group.Name
	})
	if ok {
		return probing_target_group.ProbingTargetGroupNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProbingTargetGroups(); len(resources) > 0 {
			list := make(probing_target_group.ProbingTargetGroupNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (probing_target_group.ProbingTargetGroupNameList)(nil)
}

func (h *SearchProbingTargetGroupsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SearchProbingTargetGroupsResponse) *probing_target_group.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetSearchProbingTargetGroupsDescriptor() *SearchProbingTargetGroupsDescriptor {
	return searchProbingTargetGroupsDescriptor
}

type ProbingTargetGroupServiceDescriptor struct{}

func (d *ProbingTargetGroupServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbingTargetGroupDescriptor,
		batchGetProbingTargetGroupsDescriptor,
		listProbingTargetGroupsDescriptor,
		watchProbingTargetGroupDescriptor,
		watchProbingTargetGroupsDescriptor,
		createProbingTargetGroupDescriptor,
		updateProbingTargetGroupDescriptor,
		deleteProbingTargetGroupDescriptor,
		searchProbingTargetGroupsDescriptor,
	}
}

func (d *ProbingTargetGroupServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetGroupService"
}

func (d *ProbingTargetGroupServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbingTargetGroupServiceDescriptor) GetApiName() string {
	return "ProbingTargetGroupService"
}

func (d *ProbingTargetGroupServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbingTargetGroupServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbingTargetGroupServiceDescriptor() *ProbingTargetGroupServiceDescriptor {
	return probingTargetGroupServiceDescriptor
}

func initDescriptors() {
	probingTargetGroupServiceDescriptor = &ProbingTargetGroupServiceDescriptor{}
	getProbingTargetGroupDescriptor = &GetProbingTargetGroupDescriptor{}
	batchGetProbingTargetGroupsDescriptor = &BatchGetProbingTargetGroupsDescriptor{}
	listProbingTargetGroupsDescriptor = &ListProbingTargetGroupsDescriptor{}
	watchProbingTargetGroupDescriptor = &WatchProbingTargetGroupDescriptor{}
	watchProbingTargetGroupsDescriptor = &WatchProbingTargetGroupsDescriptor{}
	createProbingTargetGroupDescriptor = &CreateProbingTargetGroupDescriptor{}
	updateProbingTargetGroupDescriptor = &UpdateProbingTargetGroupDescriptor{}
	deleteProbingTargetGroupDescriptor = &DeleteProbingTargetGroupDescriptor{}
	searchProbingTargetGroupsDescriptor = &SearchProbingTargetGroupsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probingTargetGroupServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbingTargetGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbingTargetGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbingTargetGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingTargetGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingTargetGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbingTargetGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbingTargetGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbingTargetGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchProbingTargetGroupsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
