// Code generated by protoc-gen-goten-client
// API: ProbingTargetGroupService
// DO NOT EDIT!!!

package probing_target_group_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_target_group.ProbingTargetGroup{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbingTargetGroupServiceClient is the client API for ProbingTargetGroupService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbingTargetGroupServiceClient interface {
	GetProbingTargetGroup(ctx context.Context, in *GetProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error)
	BatchGetProbingTargetGroups(ctx context.Context, in *BatchGetProbingTargetGroupsRequest, opts ...grpc.CallOption) (*BatchGetProbingTargetGroupsResponse, error)
	ListProbingTargetGroups(ctx context.Context, in *ListProbingTargetGroupsRequest, opts ...grpc.CallOption) (*ListProbingTargetGroupsResponse, error)
	WatchProbingTargetGroup(ctx context.Context, in *WatchProbingTargetGroupRequest, opts ...grpc.CallOption) (WatchProbingTargetGroupClientStream, error)
	WatchProbingTargetGroups(ctx context.Context, in *WatchProbingTargetGroupsRequest, opts ...grpc.CallOption) (WatchProbingTargetGroupsClientStream, error)
	CreateProbingTargetGroup(ctx context.Context, in *CreateProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error)
	UpdateProbingTargetGroup(ctx context.Context, in *UpdateProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error)
	DeleteProbingTargetGroup(ctx context.Context, in *DeleteProbingTargetGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchProbingTargetGroups(ctx context.Context, in *SearchProbingTargetGroupsRequest, opts ...grpc.CallOption) (*SearchProbingTargetGroupsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbingTargetGroupServiceClient(cc grpc.ClientConnInterface) ProbingTargetGroupServiceClient {
	return &client{cc}
}

func (c *client) GetProbingTargetGroup(ctx context.Context, in *GetProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error) {
	out := new(probing_target_group.ProbingTargetGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/GetProbingTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbingTargetGroups(ctx context.Context, in *BatchGetProbingTargetGroupsRequest, opts ...grpc.CallOption) (*BatchGetProbingTargetGroupsResponse, error) {
	out := new(BatchGetProbingTargetGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/BatchGetProbingTargetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbingTargetGroups(ctx context.Context, in *ListProbingTargetGroupsRequest, opts ...grpc.CallOption) (*ListProbingTargetGroupsResponse, error) {
	out := new(ListProbingTargetGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/ListProbingTargetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbingTargetGroup(ctx context.Context, in *WatchProbingTargetGroupRequest, opts ...grpc.CallOption) (WatchProbingTargetGroupClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingTargetGroup",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingTargetGroupService/WatchProbingTargetGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingTargetGroupWatchProbingTargetGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingTargetGroupClientStream interface {
	Recv() (*WatchProbingTargetGroupResponse, error)
	grpc.ClientStream
}

type watchProbingTargetGroupWatchProbingTargetGroupClient struct {
	grpc.ClientStream
}

func (x *watchProbingTargetGroupWatchProbingTargetGroupClient) Recv() (*WatchProbingTargetGroupResponse, error) {
	m := new(WatchProbingTargetGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbingTargetGroups(ctx context.Context, in *WatchProbingTargetGroupsRequest, opts ...grpc.CallOption) (WatchProbingTargetGroupsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingTargetGroups",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingTargetGroupService/WatchProbingTargetGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingTargetGroupsWatchProbingTargetGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingTargetGroupsClientStream interface {
	Recv() (*WatchProbingTargetGroupsResponse, error)
	grpc.ClientStream
}

type watchProbingTargetGroupsWatchProbingTargetGroupsClient struct {
	grpc.ClientStream
}

func (x *watchProbingTargetGroupsWatchProbingTargetGroupsClient) Recv() (*WatchProbingTargetGroupsResponse, error) {
	m := new(WatchProbingTargetGroupsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbingTargetGroup(ctx context.Context, in *CreateProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error) {
	out := new(probing_target_group.ProbingTargetGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/CreateProbingTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbingTargetGroup(ctx context.Context, in *UpdateProbingTargetGroupRequest, opts ...grpc.CallOption) (*probing_target_group.ProbingTargetGroup, error) {
	out := new(probing_target_group.ProbingTargetGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/UpdateProbingTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbingTargetGroup(ctx context.Context, in *DeleteProbingTargetGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/DeleteProbingTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchProbingTargetGroups(ctx context.Context, in *SearchProbingTargetGroupsRequest, opts ...grpc.CallOption) (*SearchProbingTargetGroupsResponse, error) {
	out := new(SearchProbingTargetGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingTargetGroupService/SearchProbingTargetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
