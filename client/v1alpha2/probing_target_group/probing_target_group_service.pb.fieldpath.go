// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_group_service.proto
// DO NOT EDIT!!!

package probing_target_group_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbingTargetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbingTargetGroupRequest_FieldPathSelector
	Get(source *GetProbingTargetGroupRequest) []interface{}
	GetSingle(source *GetProbingTargetGroupRequest) (interface{}, bool)
	ClearValue(item *GetProbingTargetGroupRequest)

	// Those methods build corresponding GetProbingTargetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbingTargetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbingTargetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbingTargetGroupRequest_FieldPathArrayItemValue
}

type GetProbingTargetGroupRequest_FieldPathSelector int32

const (
	GetProbingTargetGroupRequest_FieldPathSelectorName      GetProbingTargetGroupRequest_FieldPathSelector = 0
	GetProbingTargetGroupRequest_FieldPathSelectorFieldMask GetProbingTargetGroupRequest_FieldPathSelector = 1
	GetProbingTargetGroupRequest_FieldPathSelectorView      GetProbingTargetGroupRequest_FieldPathSelector = 2
)

func (s GetProbingTargetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		return "name"
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", s))
	}
}

func BuildGetProbingTargetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbingTargetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbingTargetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbingTargetGroupRequest", fp)
}

func ParseGetProbingTargetGroupRequest_FieldPath(rawField string) (GetProbingTargetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbingTargetGroupRequest_FieldPath(fp)
}

func MustParseGetProbingTargetGroupRequest_FieldPath(rawField string) GetProbingTargetGroupRequest_FieldPath {
	fp, err := ParseGetProbingTargetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbingTargetGroupRequest_FieldTerminalPath struct {
	selector GetProbingTargetGroupRequest_FieldPathSelector
}

var _ GetProbingTargetGroupRequest_FieldPath = (*GetProbingTargetGroupRequest_FieldTerminalPath)(nil)

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) Selector() GetProbingTargetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbingTargetGroupRequest
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) Get(source *GetProbingTargetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbingTargetGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbingTargetGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbingTargetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbingTargetGroupRequest
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) GetSingle(source *GetProbingTargetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		return (*probing_target_group.Reference)(nil)
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) ClearValue(item *GetProbingTargetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbingTargetGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbingTargetGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbingTargetGroupRequest_FieldPathSelectorName ||
		fp.selector == GetProbingTargetGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbingTargetGroupRequest_FieldPathSelectorView
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbingTargetGroupRequest_FieldPathValue {
	switch fp.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		return &GetProbingTargetGroupRequest_FieldTerminalPathValue{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return &GetProbingTargetGroupRequest_FieldTerminalPathValue{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		return &GetProbingTargetGroupRequest_FieldTerminalPathValue{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov := &GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{GetProbingTargetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		return &GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return &GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		return &GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{GetProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbingTargetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbingTargetGroupRequest_FieldPathValue allows storing values for GetProbingTargetGroupRequest fields according to their type
type GetProbingTargetGroupRequest_FieldPathValue interface {
	GetProbingTargetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbingTargetGroupRequest)
	CompareWith(*GetProbingTargetGroupRequest) (cmp int, comparable bool)
}

func ParseGetProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) (GetProbingTargetGroupRequest_FieldPathValue, error) {
	fp, err := ParseGetProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbingTargetGroupRequest_FieldPathValue), nil
}

func MustParseGetProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) GetProbingTargetGroupRequest_FieldPathValue {
	fpv, err := ParseGetProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbingTargetGroupRequest_FieldTerminalPathValue struct {
	GetProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingTargetGroupRequest_FieldPathValue = (*GetProbingTargetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbingTargetGroupRequest' as interface{}
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) AsNameValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbingTargetGroupRequest
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) SetTo(target **GetProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(GetProbingTargetGroupRequest)
	}
	switch fpv.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target_group.Reference)
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbingTargetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbingTargetGroupRequest_FieldTerminalPathValue' with the value under path in 'GetProbingTargetGroupRequest'.
func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) CompareWith(source *GetProbingTargetGroupRequest) (int, bool) {
	switch fpv.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingTargetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbingTargetGroupRequest))
}

// GetProbingTargetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbingTargetGroupRequest according to their type
// Present only for array (repeated) types.
type GetProbingTargetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbingTargetGroupRequest_FieldPath
	ContainsValue(*GetProbingTargetGroupRequest) bool
}

// ParseGetProbingTargetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbingTargetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbingTargetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbingTargetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue struct {
	GetProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingTargetGroupRequest_FieldPathArrayItemValue = (*GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbingTargetGroupRequest as interface{}
func (fpaiv *GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbingTargetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbingTargetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbingTargetGroupRequest'
func (fpaiv *GetProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbingTargetGroupRequest) bool {
	slice := fpaiv.GetProbingTargetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbingTargetGroupRequest_FieldPathArrayOfValues allows storing slice of values for GetProbingTargetGroupRequest fields according to their type
type GetProbingTargetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbingTargetGroupRequest_FieldPath
}

func ParseGetProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbingTargetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbingTargetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues struct {
	GetProbingTargetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbingTargetGroupRequest_FieldPathArrayOfValues = (*GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbingTargetGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case GetProbingTargetGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *GetProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingTargetGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingTargetGroupsRequest_FieldPathSelector
	Get(source *BatchGetProbingTargetGroupsRequest) []interface{}
	GetSingle(source *BatchGetProbingTargetGroupsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbingTargetGroupsRequest)

	// Those methods build corresponding BatchGetProbingTargetGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingTargetGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue
}

type BatchGetProbingTargetGroupsRequest_FieldPathSelector int32

const (
	BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames     BatchGetProbingTargetGroupsRequest_FieldPathSelector = 0
	BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask BatchGetProbingTargetGroupsRequest_FieldPathSelector = 1
	BatchGetProbingTargetGroupsRequest_FieldPathSelectorView      BatchGetProbingTargetGroupsRequest_FieldPathSelector = 2
)

func (s BatchGetProbingTargetGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", s))
	}
}

func BuildBatchGetProbingTargetGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingTargetGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingTargetGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingTargetGroupsRequest", fp)
}

func ParseBatchGetProbingTargetGroupsRequest_FieldPath(rawField string) (BatchGetProbingTargetGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingTargetGroupsRequest_FieldPath(fp)
}

func MustParseBatchGetProbingTargetGroupsRequest_FieldPath(rawField string) BatchGetProbingTargetGroupsRequest_FieldPath {
	fp, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingTargetGroupsRequest_FieldTerminalPath struct {
	selector BatchGetProbingTargetGroupsRequest_FieldPathSelector
}

var _ BatchGetProbingTargetGroupsRequest_FieldPath = (*BatchGetProbingTargetGroupsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) Selector() BatchGetProbingTargetGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingTargetGroupsRequest
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) Get(source *BatchGetProbingTargetGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingTargetGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingTargetGroupsRequest
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbingTargetGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingTargetGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return ([]*probing_target_group.Reference)(nil)
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbingTargetGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingTargetGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbingTargetGroupsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingTargetGroupsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.([]*probing_target_group.Reference)}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.Reference)}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue{BatchGetProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbingTargetGroupsRequest_FieldPathValue allows storing values for BatchGetProbingTargetGroupsRequest fields according to their type
type BatchGetProbingTargetGroupsRequest_FieldPathValue interface {
	BatchGetProbingTargetGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingTargetGroupsRequest)
	CompareWith(*BatchGetProbingTargetGroupsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbingTargetGroupsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingTargetGroupsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbingTargetGroupsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue struct {
	BatchGetProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetGroupsRequest_FieldPathValue = (*BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingTargetGroupsRequest' as interface{}
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probing_target_group.Reference, bool) {
	res, ok := fpv.value.([]*probing_target_group.Reference)
	return res, ok
}
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingTargetGroupsRequest
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbingTargetGroupsRequest) {
	if *target == nil {
		*target = new(BatchGetProbingTargetGroupsRequest)
	}
	switch fpv.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probing_target_group.Reference)
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbingTargetGroupsRequest'.
func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbingTargetGroupsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingTargetGroupsRequest))
}

// BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingTargetGroupsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingTargetGroupsRequest_FieldPath
	ContainsValue(*BatchGetProbingTargetGroupsRequest) bool
}

// ParseBatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetGroupsRequest_FieldPathArrayItemValue = (*BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingTargetGroupsRequest as interface{}
func (fpaiv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probing_target_group.Reference, bool) {
	res, ok := fpaiv.value.(*probing_target_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingTargetGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingTargetGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetGroupsRequest'
func (fpaiv *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetGroupsRequest) bool {
	slice := fpaiv.BatchGetProbingTargetGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingTargetGroupsRequest fields according to their type
type BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingTargetGroupsRequest_FieldPath
}

func ParseBatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingTargetGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingTargetGroupsRequest_FieldPathArrayOfValues = (*BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingTargetGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingTargetGroupsResponse_FieldPathSelector
	Get(source *BatchGetProbingTargetGroupsResponse) []interface{}
	GetSingle(source *BatchGetProbingTargetGroupsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbingTargetGroupsResponse)

	// Those methods build corresponding BatchGetProbingTargetGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue
}

type BatchGetProbingTargetGroupsResponse_FieldPathSelector int32

const (
	BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups BatchGetProbingTargetGroupsResponse_FieldPathSelector = 0
	BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing             BatchGetProbingTargetGroupsResponse_FieldPathSelector = 1
)

func (s BatchGetProbingTargetGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return "probing_target_groups"
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", s))
	}
}

func BuildBatchGetProbingTargetGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingTargetGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingTargetGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			return &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups}, nil
		case "missing":
			return &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbingTargetGroupsResponse_FieldSubPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingTargetGroupsResponse", fp)
}

func ParseBatchGetProbingTargetGroupsResponse_FieldPath(rawField string) (BatchGetProbingTargetGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingTargetGroupsResponse_FieldPath(fp)
}

func MustParseBatchGetProbingTargetGroupsResponse_FieldPath(rawField string) BatchGetProbingTargetGroupsResponse_FieldPath {
	fp, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingTargetGroupsResponse_FieldTerminalPath struct {
	selector BatchGetProbingTargetGroupsResponse_FieldPathSelector
}

var _ BatchGetProbingTargetGroupsResponse_FieldPath = (*BatchGetProbingTargetGroupsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) Selector() BatchGetProbingTargetGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingTargetGroupsResponse
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) Get(source *BatchGetProbingTargetGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, value := range source.GetProbingTargetGroups() {
				values = append(values, value)
			}
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingTargetGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingTargetGroupsResponse
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbingTargetGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		res := source.GetProbingTargetGroups()
		return res, res != nil
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return ([]*probing_target_group.ProbingTargetGroup)(nil)
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return ([]*probing_target_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbingTargetGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			item.ProbingTargetGroups = nil
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target_group.ProbingTargetGroup)}
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.ProbingTargetGroup)}
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbingTargetGroupsResponse_FieldSubPath struct {
	selector BatchGetProbingTargetGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbingTargetGroupsResponse_FieldPath = (*BatchGetProbingTargetGroupsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) Selector() BatchGetProbingTargetGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) AsProbingTargetGroupsSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbingTargetGroupsResponse
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) Get(source *BatchGetProbingTargetGroupsResponse) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsProbingTargetGroupsSubPath(); ok {
		for _, item := range source.GetProbingTargetGroups() {
			values = append(values, asProbingTargetGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbingTargetGroupsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbingTargetGroupsResponse
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) GetSingle(source *BatchGetProbingTargetGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		if len(source.GetProbingTargetGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargetGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) ClearValue(item *BatchGetProbingTargetGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, subItem := range item.ProbingTargetGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathValue {
	return &BatchGetProbingTargetGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues {
	return &BatchGetProbingTargetGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue {
	return &BatchGetProbingTargetGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbingTargetGroupsResponse_FieldPathValue allows storing values for BatchGetProbingTargetGroupsResponse fields according to their type
type BatchGetProbingTargetGroupsResponse_FieldPathValue interface {
	BatchGetProbingTargetGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingTargetGroupsResponse)
	CompareWith(*BatchGetProbingTargetGroupsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbingTargetGroupsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingTargetGroupsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbingTargetGroupsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue struct {
	BatchGetProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetGroupsResponse_FieldPathValue = (*BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingTargetGroupsResponse' as interface{}
func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) AsProbingTargetGroupsValue() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probing_target_group.Reference, bool) {
	res, ok := fpv.value.([]*probing_target_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingTargetGroupsResponse
func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingTargetGroupsResponse)
	}
	switch fpv.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		(*target).ProbingTargetGroups = fpv.value.([]*probing_target_group.ProbingTargetGroup)
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probing_target_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbingTargetGroupsResponse'.
func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbingTargetGroupsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingTargetGroupsResponse))
}

type BatchGetProbingTargetGroupsResponse_FieldSubPathValue struct {
	BatchGetProbingTargetGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbingTargetGroupsResponse_FieldPathValue = (*BatchGetProbingTargetGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) AsProbingTargetGroupsPathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) SetTo(target **BatchGetProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingTargetGroupsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbingTargetGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingTargetGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbingTargetGroupsResponse))
}

// BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingTargetGroupsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingTargetGroupsResponse_FieldPath
	ContainsValue(*BatchGetProbingTargetGroupsResponse) bool
}

// ParseBatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetGroupsResponse_FieldPathArrayItemValue = (*BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingTargetGroupsResponse as interface{}
func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetGroupsItemValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaiv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probing_target_group.Reference, bool) {
	res, ok := fpaiv.value.(*probing_target_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingTargetGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingTargetGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetGroupsResponse'
func (fpaiv *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetGroupsResponse) bool {
	slice := fpaiv.BatchGetProbingTargetGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbingTargetGroupsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbingTargetGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbingTargetGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbingTargetGroupsResponse_FieldSubPathArrayItemValue) AsProbingTargetGroupsPathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetGroupsResponse'
func (fpaivs *BatchGetProbingTargetGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetGroupsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetGroupsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingTargetGroupsResponse fields according to their type
type BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingTargetGroupsResponse_FieldPath
}

func ParseBatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingTargetGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues = (*BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		for _, v := range fpaov.values.([][]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probing_target_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetGroupsArrayOfValues() ([][]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaov *BatchGetProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.Reference)
	return res, ok
}

type BatchGetProbingTargetGroupsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbingTargetGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbingTargetGroupsResponse_FieldPathArrayOfValues = (*BatchGetProbingTargetGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbingTargetGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbingTargetGroupsResponse_FieldSubPathArrayOfValues) AsProbingTargetGroupsPathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingTargetGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingTargetGroupsRequest_FieldPathSelector
	Get(source *ListProbingTargetGroupsRequest) []interface{}
	GetSingle(source *ListProbingTargetGroupsRequest) (interface{}, bool)
	ClearValue(item *ListProbingTargetGroupsRequest)

	// Those methods build corresponding ListProbingTargetGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingTargetGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingTargetGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingTargetGroupsRequest_FieldPathArrayItemValue
}

type ListProbingTargetGroupsRequest_FieldPathSelector int32

const (
	ListProbingTargetGroupsRequest_FieldPathSelectorParent    ListProbingTargetGroupsRequest_FieldPathSelector = 0
	ListProbingTargetGroupsRequest_FieldPathSelectorPageSize  ListProbingTargetGroupsRequest_FieldPathSelector = 1
	ListProbingTargetGroupsRequest_FieldPathSelectorPageToken ListProbingTargetGroupsRequest_FieldPathSelector = 2
	ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy   ListProbingTargetGroupsRequest_FieldPathSelector = 3
	ListProbingTargetGroupsRequest_FieldPathSelectorFilter    ListProbingTargetGroupsRequest_FieldPathSelector = 4
	ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask ListProbingTargetGroupsRequest_FieldPathSelector = 5
	ListProbingTargetGroupsRequest_FieldPathSelectorView      ListProbingTargetGroupsRequest_FieldPathSelector = 6
)

func (s ListProbingTargetGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", s))
	}
}

func BuildListProbingTargetGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbingTargetGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingTargetGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingTargetGroupsRequest", fp)
}

func ParseListProbingTargetGroupsRequest_FieldPath(rawField string) (ListProbingTargetGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingTargetGroupsRequest_FieldPath(fp)
}

func MustParseListProbingTargetGroupsRequest_FieldPath(rawField string) ListProbingTargetGroupsRequest_FieldPath {
	fp, err := ParseListProbingTargetGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingTargetGroupsRequest_FieldTerminalPath struct {
	selector ListProbingTargetGroupsRequest_FieldPathSelector
}

var _ ListProbingTargetGroupsRequest_FieldPath = (*ListProbingTargetGroupsRequest_FieldTerminalPath)(nil)

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) Selector() ListProbingTargetGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingTargetGroupsRequest
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) Get(source *ListProbingTargetGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbingTargetGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingTargetGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbingTargetGroupsRequest
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) GetSingle(source *ListProbingTargetGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingTargetGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		return (*probing_target_group.ParentName)(nil)
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return (*probing_target_group.OrderBy)(nil)
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return (*probing_target_group.Filter)(nil)
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) ClearValue(item *ListProbingTargetGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbingTargetGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingTargetGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbingTargetGroupsRequest_FieldPathSelectorView
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbingTargetGroupsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ParentName)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.OrderBy)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Filter)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathValue{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ParentName)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.OrderBy)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Filter)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		return &ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingTargetGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbingTargetGroupsRequest_FieldPathValue allows storing values for ListProbingTargetGroupsRequest fields according to their type
type ListProbingTargetGroupsRequest_FieldPathValue interface {
	ListProbingTargetGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingTargetGroupsRequest)
	CompareWith(*ListProbingTargetGroupsRequest) (cmp int, comparable bool)
}

func ParseListProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) (ListProbingTargetGroupsRequest_FieldPathValue, error) {
	fp, err := ParseListProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingTargetGroupsRequest_FieldPathValue), nil
}

func MustParseListProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) ListProbingTargetGroupsRequest_FieldPathValue {
	fpv, err := ParseListProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingTargetGroupsRequest_FieldTerminalPathValue struct {
	ListProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetGroupsRequest_FieldPathValue = (*ListProbingTargetGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingTargetGroupsRequest' as interface{}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target_group.ParentName, bool) {
	res, ok := fpv.value.(*probing_target_group.ParentName)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target_group.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target_group.OrderBy)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target_group.Filter, bool) {
	res, ok := fpv.value.(*probing_target_group.Filter)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingTargetGroupsRequest
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) SetTo(target **ListProbingTargetGroupsRequest) {
	if *target == nil {
		*target = new(ListProbingTargetGroupsRequest)
	}
	switch fpv.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target_group.ParentName)
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target_group.PagerCursor)
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target_group.OrderBy)
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target_group.Filter)
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingTargetGroupsRequest_FieldTerminalPathValue' with the value under path in 'ListProbingTargetGroupsRequest'.
func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWith(source *ListProbingTargetGroupsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target_group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingTargetGroupsRequest))
}

// ListProbingTargetGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingTargetGroupsRequest according to their type
// Present only for array (repeated) types.
type ListProbingTargetGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingTargetGroupsRequest_FieldPath
	ContainsValue(*ListProbingTargetGroupsRequest) bool
}

// ParseListProbingTargetGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingTargetGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingTargetGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingTargetGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetGroupsRequest_FieldPathArrayItemValue = (*ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingTargetGroupsRequest as interface{}
func (fpaiv *ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingTargetGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingTargetGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetGroupsRequest'
func (fpaiv *ListProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingTargetGroupsRequest) bool {
	slice := fpaiv.ListProbingTargetGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbingTargetGroupsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbingTargetGroupsRequest fields according to their type
type ListProbingTargetGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingTargetGroupsRequest_FieldPath
}

func ParseListProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingTargetGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingTargetGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbingTargetGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbingTargetGroupsRequest_FieldPathArrayOfValues = (*ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target_group.ParentName) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target_group.OrderBy) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target_group.Filter) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target_group.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ParentName)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target_group.OrderBy)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target_group.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Filter)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingTargetGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingTargetGroupsResponse_FieldPathSelector
	Get(source *ListProbingTargetGroupsResponse) []interface{}
	GetSingle(source *ListProbingTargetGroupsResponse) (interface{}, bool)
	ClearValue(item *ListProbingTargetGroupsResponse)

	// Those methods build corresponding ListProbingTargetGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingTargetGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathArrayItemValue
}

type ListProbingTargetGroupsResponse_FieldPathSelector int32

const (
	ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups ListProbingTargetGroupsResponse_FieldPathSelector = 0
	ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken       ListProbingTargetGroupsResponse_FieldPathSelector = 1
	ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken       ListProbingTargetGroupsResponse_FieldPathSelector = 2
)

func (s ListProbingTargetGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return "probing_target_groups"
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", s))
	}
}

func BuildListProbingTargetGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbingTargetGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingTargetGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			return &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbingTargetGroupsResponse_FieldSubPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingTargetGroupsResponse", fp)
}

func ParseListProbingTargetGroupsResponse_FieldPath(rawField string) (ListProbingTargetGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingTargetGroupsResponse_FieldPath(fp)
}

func MustParseListProbingTargetGroupsResponse_FieldPath(rawField string) ListProbingTargetGroupsResponse_FieldPath {
	fp, err := ParseListProbingTargetGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingTargetGroupsResponse_FieldTerminalPath struct {
	selector ListProbingTargetGroupsResponse_FieldPathSelector
}

var _ ListProbingTargetGroupsResponse_FieldPath = (*ListProbingTargetGroupsResponse_FieldTerminalPath)(nil)

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) Selector() ListProbingTargetGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingTargetGroupsResponse
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) Get(source *ListProbingTargetGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, value := range source.GetProbingTargetGroups() {
				values = append(values, value)
			}
		case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingTargetGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbingTargetGroupsResponse
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) GetSingle(source *ListProbingTargetGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		res := source.GetProbingTargetGroups()
		return res, res != nil
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return ([]*probing_target_group.ProbingTargetGroup)(nil)
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) ClearValue(item *ListProbingTargetGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			item.ProbingTargetGroups = nil
		case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathValue{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target_group.ProbingTargetGroup)}
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathValue{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathValue{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.ProbingTargetGroup)}
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue{ListProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbingTargetGroupsResponse_FieldSubPath struct {
	selector ListProbingTargetGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbingTargetGroupsResponse_FieldPath = (*ListProbingTargetGroupsResponse_FieldSubPath)(nil)

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) Selector() ListProbingTargetGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) AsProbingTargetGroupsSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbingTargetGroupsResponse
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) Get(source *ListProbingTargetGroupsResponse) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsProbingTargetGroupsSubPath(); ok {
		for _, item := range source.GetProbingTargetGroups() {
			values = append(values, asProbingTargetGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbingTargetGroupsResponse))
}

// GetSingle returns value of selected field from source ListProbingTargetGroupsResponse
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) GetSingle(source *ListProbingTargetGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		if len(source.GetProbingTargetGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargetGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fps.selector))
	}
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) ClearValue(item *ListProbingTargetGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, subItem := range item.ProbingTargetGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbingTargetGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProbingTargetGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithIValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathValue {
	return &ListProbingTargetGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbingTargetGroupsResponse_FieldPathArrayOfValues {
	return &ListProbingTargetGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbingTargetGroupsResponse_FieldPathArrayItemValue {
	return &ListProbingTargetGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbingTargetGroupsResponse_FieldPathValue allows storing values for ListProbingTargetGroupsResponse fields according to their type
type ListProbingTargetGroupsResponse_FieldPathValue interface {
	ListProbingTargetGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingTargetGroupsResponse)
	CompareWith(*ListProbingTargetGroupsResponse) (cmp int, comparable bool)
}

func ParseListProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) (ListProbingTargetGroupsResponse_FieldPathValue, error) {
	fp, err := ParseListProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingTargetGroupsResponse_FieldPathValue), nil
}

func MustParseListProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) ListProbingTargetGroupsResponse_FieldPathValue {
	fpv, err := ParseListProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingTargetGroupsResponse_FieldTerminalPathValue struct {
	ListProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetGroupsResponse_FieldPathValue = (*ListProbingTargetGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingTargetGroupsResponse' as interface{}
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) AsProbingTargetGroupsValue() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingTargetGroupsResponse
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) SetTo(target **ListProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(ListProbingTargetGroupsResponse)
	}
	switch fpv.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		(*target).ProbingTargetGroups = fpv.value.([]*probing_target_group.ProbingTargetGroup)
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target_group.PagerCursor)
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingTargetGroupsResponse_FieldTerminalPathValue' with the value under path in 'ListProbingTargetGroupsResponse'.
func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWith(source *ListProbingTargetGroupsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingTargetGroupsResponse))
}

type ListProbingTargetGroupsResponse_FieldSubPathValue struct {
	ListProbingTargetGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbingTargetGroupsResponse_FieldPathValue = (*ListProbingTargetGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) AsProbingTargetGroupsPathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) SetTo(target **ListProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(ListProbingTargetGroupsResponse)
	}
	switch fpvs.Selector() {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) CompareWith(source *ListProbingTargetGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingTargetGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbingTargetGroupsResponse))
}

// ListProbingTargetGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingTargetGroupsResponse according to their type
// Present only for array (repeated) types.
type ListProbingTargetGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingTargetGroupsResponse_FieldPath
	ContainsValue(*ListProbingTargetGroupsResponse) bool
}

// ParseListProbingTargetGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingTargetGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingTargetGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingTargetGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetGroupsResponse_FieldPathArrayItemValue = (*ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingTargetGroupsResponse as interface{}
func (fpaiv *ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetGroupsItemValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaiv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}

func (fpaiv *ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingTargetGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingTargetGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetGroupsResponse'
func (fpaiv *ListProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingTargetGroupsResponse) bool {
	slice := fpaiv.ListProbingTargetGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbingTargetGroupsResponse_FieldSubPathArrayItemValue struct {
	ListProbingTargetGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbingTargetGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbingTargetGroupsResponse_FieldSubPathArrayItemValue) AsProbingTargetGroupsPathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetGroupsResponse'
func (fpaivs *ListProbingTargetGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbingTargetGroupsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetGroupsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbingTargetGroupsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbingTargetGroupsResponse fields according to their type
type ListProbingTargetGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingTargetGroupsResponse_FieldPath
}

func ParseListProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingTargetGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingTargetGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbingTargetGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbingTargetGroupsResponse_FieldPathArrayOfValues = (*ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		for _, v := range fpaov.values.([][]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetGroupsArrayOfValues() ([][]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}

type ListProbingTargetGroupsResponse_FieldSubPathArrayOfValues struct {
	ListProbingTargetGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbingTargetGroupsResponse_FieldPathArrayOfValues = (*ListProbingTargetGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbingTargetGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbingTargetGroupsResponse_FieldSubPathArrayOfValues) AsProbingTargetGroupsPathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetGroupRequest_FieldPathSelector
	Get(source *WatchProbingTargetGroupRequest) []interface{}
	GetSingle(source *WatchProbingTargetGroupRequest) (interface{}, bool)
	ClearValue(item *WatchProbingTargetGroupRequest)

	// Those methods build corresponding WatchProbingTargetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetGroupRequest_FieldPathArrayItemValue
}

type WatchProbingTargetGroupRequest_FieldPathSelector int32

const (
	WatchProbingTargetGroupRequest_FieldPathSelectorName      WatchProbingTargetGroupRequest_FieldPathSelector = 0
	WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask WatchProbingTargetGroupRequest_FieldPathSelector = 1
	WatchProbingTargetGroupRequest_FieldPathSelectorView      WatchProbingTargetGroupRequest_FieldPathSelector = 2
)

func (s WatchProbingTargetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		return "name"
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", s))
	}
}

func BuildWatchProbingTargetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetGroupRequest", fp)
}

func ParseWatchProbingTargetGroupRequest_FieldPath(rawField string) (WatchProbingTargetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetGroupRequest_FieldPath(fp)
}

func MustParseWatchProbingTargetGroupRequest_FieldPath(rawField string) WatchProbingTargetGroupRequest_FieldPath {
	fp, err := ParseWatchProbingTargetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetGroupRequest_FieldTerminalPath struct {
	selector WatchProbingTargetGroupRequest_FieldPathSelector
}

var _ WatchProbingTargetGroupRequest_FieldPath = (*WatchProbingTargetGroupRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) Selector() WatchProbingTargetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetGroupRequest
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) Get(source *WatchProbingTargetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingTargetGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetGroupRequest
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) GetSingle(source *WatchProbingTargetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		return (*probing_target_group.Reference)(nil)
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) ClearValue(item *WatchProbingTargetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingTargetGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetGroupRequest_FieldPathSelectorName ||
		fp.selector == WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingTargetGroupRequest_FieldPathSelectorView
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetGroupRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathValue{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathValue{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathValue{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		return &WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetGroupRequest_FieldPathValue allows storing values for WatchProbingTargetGroupRequest fields according to their type
type WatchProbingTargetGroupRequest_FieldPathValue interface {
	WatchProbingTargetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetGroupRequest)
	CompareWith(*WatchProbingTargetGroupRequest) (cmp int, comparable bool)
}

func ParseWatchProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetGroupRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetGroupRequest_FieldPathValue), nil
}

func MustParseWatchProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) WatchProbingTargetGroupRequest_FieldPathValue {
	fpv, err := ParseWatchProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetGroupRequest_FieldTerminalPathValue struct {
	WatchProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupRequest_FieldPathValue = (*WatchProbingTargetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetGroupRequest' as interface{}
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) AsNameValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetGroupRequest
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) SetTo(target **WatchProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupRequest)
	}
	switch fpv.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target_group.Reference)
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetGroupRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetGroupRequest'.
func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetGroupRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetGroupRequest))
}

// WatchProbingTargetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetGroupRequest according to their type
// Present only for array (repeated) types.
type WatchProbingTargetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetGroupRequest_FieldPath
	ContainsValue(*WatchProbingTargetGroupRequest) bool
}

// ParseWatchProbingTargetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupRequest_FieldPathArrayItemValue = (*WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetGroupRequest as interface{}
func (fpaiv *WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetGroupRequest'
func (fpaiv *WatchProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupRequest) bool {
	slice := fpaiv.WatchProbingTargetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetGroupRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetGroupRequest fields according to their type
type WatchProbingTargetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetGroupRequest_FieldPath
}

func ParseWatchProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetGroupRequest_FieldPathArrayOfValues = (*WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetGroupResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetGroupResponse_FieldPathSelector
	Get(source *WatchProbingTargetGroupResponse) []interface{}
	GetSingle(source *WatchProbingTargetGroupResponse) (interface{}, bool)
	ClearValue(item *WatchProbingTargetGroupResponse)

	// Those methods build corresponding WatchProbingTargetGroupResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetGroupResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetGroupResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetGroupResponse_FieldPathArrayItemValue
}

type WatchProbingTargetGroupResponse_FieldPathSelector int32

const (
	WatchProbingTargetGroupResponse_FieldPathSelectorChange WatchProbingTargetGroupResponse_FieldPathSelector = 0
)

func (s WatchProbingTargetGroupResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", s))
	}
}

func BuildWatchProbingTargetGroupResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetGroupResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetGroupResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbingTargetGroupResponse_FieldTerminalPath{selector: WatchProbingTargetGroupResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetGroupResponse", fp)
}

func ParseWatchProbingTargetGroupResponse_FieldPath(rawField string) (WatchProbingTargetGroupResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetGroupResponse_FieldPath(fp)
}

func MustParseWatchProbingTargetGroupResponse_FieldPath(rawField string) WatchProbingTargetGroupResponse_FieldPath {
	fp, err := ParseWatchProbingTargetGroupResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetGroupResponse_FieldTerminalPath struct {
	selector WatchProbingTargetGroupResponse_FieldPathSelector
}

var _ WatchProbingTargetGroupResponse_FieldPath = (*WatchProbingTargetGroupResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) Selector() WatchProbingTargetGroupResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetGroupResponse
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) Get(source *WatchProbingTargetGroupResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetGroupResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetGroupResponse
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) GetSingle(source *WatchProbingTargetGroupResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetGroupResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		return (*probing_target_group.ProbingTargetGroupChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) ClearValue(item *WatchProbingTargetGroupResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetGroupResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetGroupResponse_FieldPathSelectorChange
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetGroupResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		return &WatchProbingTargetGroupResponse_FieldTerminalPathValue{WatchProbingTargetGroupResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		return &WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupResponse_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetGroupResponse_FieldPathValue allows storing values for WatchProbingTargetGroupResponse fields according to their type
type WatchProbingTargetGroupResponse_FieldPathValue interface {
	WatchProbingTargetGroupResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetGroupResponse)
	CompareWith(*WatchProbingTargetGroupResponse) (cmp int, comparable bool)
}

func ParseWatchProbingTargetGroupResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetGroupResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetGroupResponse_FieldPathValue), nil
}

func MustParseWatchProbingTargetGroupResponse_FieldPathValue(pathStr, valueStr string) WatchProbingTargetGroupResponse_FieldPathValue {
	fpv, err := ParseWatchProbingTargetGroupResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetGroupResponse_FieldTerminalPathValue struct {
	WatchProbingTargetGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupResponse_FieldPathValue = (*WatchProbingTargetGroupResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetGroupResponse' as interface{}
func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) AsChangeValue() (*probing_target_group.ProbingTargetGroupChange, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroupChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetGroupResponse
func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) SetTo(target **WatchProbingTargetGroupResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupResponse)
	}
	switch fpv.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probing_target_group.ProbingTargetGroupChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetGroupResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetGroupResponse'.
func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetGroupResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetGroupResponse))
}

// WatchProbingTargetGroupResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetGroupResponse according to their type
// Present only for array (repeated) types.
type WatchProbingTargetGroupResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetGroupResponse_FieldPath
	ContainsValue(*WatchProbingTargetGroupResponse) bool
}

// ParseWatchProbingTargetGroupResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetGroupResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetGroupResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetGroupResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetGroupResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupResponse_FieldPathArrayItemValue = (*WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetGroupResponse as interface{}
func (fpaiv *WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetGroupResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetGroupResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetGroupResponse'
func (fpaiv *WatchProbingTargetGroupResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupResponse) bool {
	slice := fpaiv.WatchProbingTargetGroupResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetGroupResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetGroupResponse fields according to their type
type WatchProbingTargetGroupResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetGroupResponse_FieldPath
}

func ParseWatchProbingTargetGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetGroupResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetGroupResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetGroupResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetGroupResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetGroupResponse_FieldPathArrayOfValues = (*WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroupChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetGroupResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probing_target_group.ProbingTargetGroupChange, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroupChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetGroupsRequest_FieldPathSelector
	Get(source *WatchProbingTargetGroupsRequest) []interface{}
	GetSingle(source *WatchProbingTargetGroupsRequest) (interface{}, bool)
	ClearValue(item *WatchProbingTargetGroupsRequest)

	// Those methods build corresponding WatchProbingTargetGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsRequest_FieldPathArrayItemValue
}

type WatchProbingTargetGroupsRequest_FieldPathSelector int32

const (
	WatchProbingTargetGroupsRequest_FieldPathSelectorType         WatchProbingTargetGroupsRequest_FieldPathSelector = 0
	WatchProbingTargetGroupsRequest_FieldPathSelectorParent       WatchProbingTargetGroupsRequest_FieldPathSelector = 1
	WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize     WatchProbingTargetGroupsRequest_FieldPathSelector = 2
	WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken    WatchProbingTargetGroupsRequest_FieldPathSelector = 3
	WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy      WatchProbingTargetGroupsRequest_FieldPathSelector = 4
	WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken  WatchProbingTargetGroupsRequest_FieldPathSelector = 5
	WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime WatchProbingTargetGroupsRequest_FieldPathSelector = 6
	WatchProbingTargetGroupsRequest_FieldPathSelectorFilter       WatchProbingTargetGroupsRequest_FieldPathSelector = 7
	WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask    WatchProbingTargetGroupsRequest_FieldPathSelector = 8
	WatchProbingTargetGroupsRequest_FieldPathSelectorView         WatchProbingTargetGroupsRequest_FieldPathSelector = 9
	WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize WatchProbingTargetGroupsRequest_FieldPathSelector = 10
)

func (s WatchProbingTargetGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", s))
	}
}

func BuildWatchProbingTargetGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetGroupsRequest", fp)
}

func ParseWatchProbingTargetGroupsRequest_FieldPath(rawField string) (WatchProbingTargetGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetGroupsRequest_FieldPath(fp)
}

func MustParseWatchProbingTargetGroupsRequest_FieldPath(rawField string) WatchProbingTargetGroupsRequest_FieldPath {
	fp, err := ParseWatchProbingTargetGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetGroupsRequest_FieldTerminalPath struct {
	selector WatchProbingTargetGroupsRequest_FieldPathSelector
}

var _ WatchProbingTargetGroupsRequest_FieldPath = (*WatchProbingTargetGroupsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) Selector() WatchProbingTargetGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetGroupsRequest
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) Get(source *WatchProbingTargetGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetGroupsRequest
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) GetSingle(source *WatchProbingTargetGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return (*probing_target_group.ParentReference)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return (*probing_target_group.OrderBy)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return (*probing_target_group.Filter)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) ClearValue(item *WatchProbingTargetGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetGroupsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ParentReference)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.OrderBy)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Filter)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathValue{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ParentReference)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.OrderBy)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Filter)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetGroupsRequest_FieldPathValue allows storing values for WatchProbingTargetGroupsRequest fields according to their type
type WatchProbingTargetGroupsRequest_FieldPathValue interface {
	WatchProbingTargetGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetGroupsRequest)
	CompareWith(*WatchProbingTargetGroupsRequest) (cmp int, comparable bool)
}

func ParseWatchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetGroupsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetGroupsRequest_FieldPathValue), nil
}

func MustParseWatchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) WatchProbingTargetGroupsRequest_FieldPathValue {
	fpv, err := ParseWatchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetGroupsRequest_FieldTerminalPathValue struct {
	WatchProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsRequest_FieldPathValue = (*WatchProbingTargetGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetGroupsRequest' as interface{}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target_group.ParentReference, bool) {
	res, ok := fpv.value.(*probing_target_group.ParentReference)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target_group.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target_group.OrderBy)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target_group.Filter, bool) {
	res, ok := fpv.value.(*probing_target_group.Filter)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetGroupsRequest
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) SetTo(target **WatchProbingTargetGroupsRequest) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupsRequest)
	}
	switch fpv.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target_group.ParentReference)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target_group.PagerCursor)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target_group.OrderBy)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target_group.Filter)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetGroupsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetGroupsRequest'.
func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetGroupsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetGroupsRequest))
}

// WatchProbingTargetGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetGroupsRequest according to their type
// Present only for array (repeated) types.
type WatchProbingTargetGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetGroupsRequest_FieldPath
	ContainsValue(*WatchProbingTargetGroupsRequest) bool
}

// ParseWatchProbingTargetGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsRequest_FieldPathArrayItemValue = (*WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetGroupsRequest as interface{}
func (fpaiv *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetGroupsRequest'
func (fpaiv *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupsRequest) bool {
	slice := fpaiv.WatchProbingTargetGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetGroupsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetGroupsRequest fields according to their type
type WatchProbingTargetGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetGroupsRequest_FieldPath
}

func ParseWatchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetGroupsRequest_FieldPathArrayOfValues = (*WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target_group.ParentReference) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target_group.OrderBy) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target_group.Filter) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ParentReference)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target_group.OrderBy)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target_group.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Filter)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetGroupsResponse_FieldPathSelector
	Get(source *WatchProbingTargetGroupsResponse) []interface{}
	GetSingle(source *WatchProbingTargetGroupsResponse) (interface{}, bool)
	ClearValue(item *WatchProbingTargetGroupsResponse)

	// Those methods build corresponding WatchProbingTargetGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayItemValue
}

type WatchProbingTargetGroupsResponse_FieldPathSelector int32

const (
	WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges WatchProbingTargetGroupsResponse_FieldPathSelector = 0
	WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent                 WatchProbingTargetGroupsResponse_FieldPathSelector = 1
	WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange           WatchProbingTargetGroupsResponse_FieldPathSelector = 2
	WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken               WatchProbingTargetGroupsResponse_FieldPathSelector = 3
	WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize              WatchProbingTargetGroupsResponse_FieldPathSelector = 4
	WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset               WatchProbingTargetGroupsResponse_FieldPathSelector = 5
	WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset               WatchProbingTargetGroupsResponse_FieldPathSelector = 6
)

func (s WatchProbingTargetGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return "probing_target_group_changes"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", s))
	}
}

func BuildWatchProbingTargetGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_group_changes", "probingTargetGroupChanges", "probing-target-group-changes":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbingTargetGroupsResponse_FieldSubPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetGroupsResponse", fp)
}

func ParseWatchProbingTargetGroupsResponse_FieldPath(rawField string) (WatchProbingTargetGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetGroupsResponse_FieldPath(fp)
}

func MustParseWatchProbingTargetGroupsResponse_FieldPath(rawField string) WatchProbingTargetGroupsResponse_FieldPath {
	fp, err := ParseWatchProbingTargetGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetGroupsResponse_FieldTerminalPath struct {
	selector WatchProbingTargetGroupsResponse_FieldPathSelector
}

var _ WatchProbingTargetGroupsResponse_FieldPath = (*WatchProbingTargetGroupsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) Selector() WatchProbingTargetGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetGroupsResponse
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) Get(source *WatchProbingTargetGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
			for _, value := range source.GetProbingTargetGroupChanges() {
				values = append(values, value)
			}
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetGroupsResponse
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) GetSingle(source *WatchProbingTargetGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		res := source.GetProbingTargetGroupChanges()
		return res, res != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return ([]*probing_target_group.ProbingTargetGroupChange)(nil)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbingTargetGroupsResponse_PageTokenChange)(nil)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) ClearValue(item *WatchProbingTargetGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
			item.ProbingTargetGroupChanges = nil
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges ||
		fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target_group.ProbingTargetGroupChange)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbingTargetGroupsResponse_PageTokenChange)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.ProbingTargetGroupChange)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbingTargetGroupsResponse_PageTokenChange)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return &WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue{WatchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbingTargetGroupsResponse_FieldSubPath struct {
	selector WatchProbingTargetGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbingTargetGroupsResponse_FieldPath = (*WatchProbingTargetGroupsResponse_FieldSubPath)(nil)

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) Selector() WatchProbingTargetGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbingTargetGroupsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbingTargetGroupsResponse
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) Get(source *WatchProbingTargetGroupsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbingTargetGroupsResponse))
}

// GetSingle returns value of selected field from source WatchProbingTargetGroupsResponse
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) GetSingle(source *WatchProbingTargetGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) ClearValue(item *WatchProbingTargetGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathValue {
	return &WatchProbingTargetGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	return &WatchProbingTargetGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	return &WatchProbingTargetGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbingTargetGroupsResponse_FieldPathValue allows storing values for WatchProbingTargetGroupsResponse fields according to their type
type WatchProbingTargetGroupsResponse_FieldPathValue interface {
	WatchProbingTargetGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetGroupsResponse)
	CompareWith(*WatchProbingTargetGroupsResponse) (cmp int, comparable bool)
}

func ParseWatchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetGroupsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetGroupsResponse_FieldPathValue), nil
}

func MustParseWatchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) WatchProbingTargetGroupsResponse_FieldPathValue {
	fpv, err := ParseWatchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetGroupsResponse_FieldTerminalPathValue struct {
	WatchProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsResponse_FieldPathValue = (*WatchProbingTargetGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetGroupsResponse' as interface{}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsProbingTargetGroupChangesValue() ([]*probing_target_group.ProbingTargetGroupChange, bool) {
	res, ok := fpv.value.([]*probing_target_group.ProbingTargetGroupChange)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbingTargetGroupsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbingTargetGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetGroupsResponse
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) SetTo(target **WatchProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupsResponse)
	}
	switch fpv.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		(*target).ProbingTargetGroupChanges = fpv.value.([]*probing_target_group.ProbingTargetGroupChange)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbingTargetGroupsResponse_PageTokenChange)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetGroupsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetGroupsResponse'.
func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetGroupsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		return 0, false
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetGroupsResponse))
}

type WatchProbingTargetGroupsResponse_FieldSubPathValue struct {
	WatchProbingTargetGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbingTargetGroupsResponse_FieldPathValue = (*WatchProbingTargetGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) SetTo(target **WatchProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) CompareWith(source *WatchProbingTargetGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingTargetGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbingTargetGroupsResponse))
}

// WatchProbingTargetGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetGroupsResponse according to their type
// Present only for array (repeated) types.
type WatchProbingTargetGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetGroupsResponse_FieldPath
	ContainsValue(*WatchProbingTargetGroupsResponse) bool
}

// ParseWatchProbingTargetGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsResponse_FieldPathArrayItemValue = (*WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetGroupsResponse as interface{}
func (fpaiv *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetGroupChangesItemValue() (*probing_target_group.ProbingTargetGroupChange, bool) {
	res, ok := fpaiv.value.(*probing_target_group.ProbingTargetGroupChange)
	return res, ok
}

func (fpaiv *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetGroupsResponse'
func (fpaiv *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupsResponse) bool {
	slice := fpaiv.WatchProbingTargetGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbingTargetGroupsResponse_FieldSubPathArrayItemValue struct {
	WatchProbingTargetGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetGroupsResponse'
func (fpaivs *WatchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbingTargetGroupsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetGroupsResponse fields according to their type
type WatchProbingTargetGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetGroupsResponse_FieldPath
}

func ParseWatchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetGroupsResponse_FieldPathArrayOfValues = (*WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
		for _, v := range fpaov.values.([][]*probing_target_group.ProbingTargetGroupChange) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbingTargetGroupsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetGroupChangesArrayOfValues() ([][]*probing_target_group.ProbingTargetGroupChange, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.ProbingTargetGroupChange)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbingTargetGroupsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbingTargetGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbingTargetGroupsResponse_FieldSubPathArrayOfValues struct {
	WatchProbingTargetGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbingTargetGroupsResponse_FieldPathArrayOfValues = (*WatchProbingTargetGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbingTargetGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbingTargetGroupsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetGroupsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbingTargetGroupsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbingTargetGroupsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbingTargetGroupsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetGroupsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetGroupsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetGroupsResponse_PageTokenChange", fp)
}

func ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(rawField string) (WatchProbingTargetGroupsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(rawField string) WatchProbingTargetGroupsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbingTargetGroupsResponsePageTokenChange_FieldPath = (*WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetGroupsResponse_PageTokenChange
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbingTargetGroupsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetGroupsResponse_PageTokenChange
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbingTargetGroupsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbingTargetGroupsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue interface {
	WatchProbingTargetGroupsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetGroupsResponse_PageTokenChange)
	CompareWith(*WatchProbingTargetGroupsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsResponsePageTokenChange_FieldPathValue = (*WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbingTargetGroupsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbingTargetGroupsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target_group.PagerCursor)
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetGroupsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetGroupsResponse_PageTokenChange'.
func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetGroupsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

// WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetGroupsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbingTargetGroupsResponse_PageTokenChange) bool
}

// ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetGroupsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetGroupsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetGroupsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetGroupsResponsePageTokenChange_FieldPath
}

func ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetGroupsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbingTargetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbingTargetGroupRequest_FieldPathSelector
	Get(source *CreateProbingTargetGroupRequest) []interface{}
	GetSingle(source *CreateProbingTargetGroupRequest) (interface{}, bool)
	ClearValue(item *CreateProbingTargetGroupRequest)

	// Those methods build corresponding CreateProbingTargetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbingTargetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathArrayItemValue
}

type CreateProbingTargetGroupRequest_FieldPathSelector int32

const (
	CreateProbingTargetGroupRequest_FieldPathSelectorParent             CreateProbingTargetGroupRequest_FieldPathSelector = 0
	CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup CreateProbingTargetGroupRequest_FieldPathSelector = 1
)

func (s CreateProbingTargetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return "probing_target_group"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", s))
	}
}

func BuildCreateProbingTargetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbingTargetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbingTargetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorParent}, nil
		case "probing_target_group", "probingTargetGroup", "probing-target-group":
			return &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target_group", "probingTargetGroup", "probing-target-group":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbingTargetGroupRequest_FieldSubPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbingTargetGroupRequest", fp)
}

func ParseCreateProbingTargetGroupRequest_FieldPath(rawField string) (CreateProbingTargetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbingTargetGroupRequest_FieldPath(fp)
}

func MustParseCreateProbingTargetGroupRequest_FieldPath(rawField string) CreateProbingTargetGroupRequest_FieldPath {
	fp, err := ParseCreateProbingTargetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbingTargetGroupRequest_FieldTerminalPath struct {
	selector CreateProbingTargetGroupRequest_FieldPathSelector
}

var _ CreateProbingTargetGroupRequest_FieldPath = (*CreateProbingTargetGroupRequest_FieldTerminalPath)(nil)

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) Selector() CreateProbingTargetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbingTargetGroupRequest
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) Get(source *CreateProbingTargetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			if source.ProbingTargetGroup != nil {
				values = append(values, source.ProbingTargetGroup)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbingTargetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbingTargetGroupRequest
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) GetSingle(source *CreateProbingTargetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		res := source.GetProbingTargetGroup()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		return (*probing_target_group.ParentReference)(nil)
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return (*probing_target_group.ProbingTargetGroup)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) ClearValue(item *CreateProbingTargetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			item.ProbingTargetGroup = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbingTargetGroupRequest_FieldPathSelectorParent
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		return &CreateProbingTargetGroupRequest_FieldTerminalPathValue{CreateProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ParentReference)}
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return &CreateProbingTargetGroupRequest_FieldTerminalPathValue{CreateProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		return &CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ParentReference)}
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return &CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbingTargetGroupRequest_FieldSubPath struct {
	selector CreateProbingTargetGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbingTargetGroupRequest_FieldPath = (*CreateProbingTargetGroupRequest_FieldSubPath)(nil)

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) Selector() CreateProbingTargetGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) AsProbingTargetGroupSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbingTargetGroupRequest
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) Get(source *CreateProbingTargetGroupRequest) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsProbingTargetGroupSubPath(); ok {
		values = append(values, asProbingTargetGroupFieldPath.Get(source.GetProbingTargetGroup())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbingTargetGroupRequest))
}

// GetSingle returns value of selected field from source CreateProbingTargetGroupRequest
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) GetSingle(source *CreateProbingTargetGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		if source.GetProbingTargetGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fps.selector))
	}
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) ClearValue(item *CreateProbingTargetGroupRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			fps.subPath.ClearValueRaw(item.ProbingTargetGroup)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbingTargetGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProbingTargetGroupRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithIValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathValue {
	return &CreateProbingTargetGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbingTargetGroupRequest_FieldPathArrayOfValues {
	return &CreateProbingTargetGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbingTargetGroupRequest_FieldPathArrayItemValue {
	return &CreateProbingTargetGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbingTargetGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbingTargetGroupRequest_FieldPathValue allows storing values for CreateProbingTargetGroupRequest fields according to their type
type CreateProbingTargetGroupRequest_FieldPathValue interface {
	CreateProbingTargetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbingTargetGroupRequest)
	CompareWith(*CreateProbingTargetGroupRequest) (cmp int, comparable bool)
}

func ParseCreateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) (CreateProbingTargetGroupRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbingTargetGroupRequest_FieldPathValue), nil
}

func MustParseCreateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) CreateProbingTargetGroupRequest_FieldPathValue {
	fpv, err := ParseCreateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbingTargetGroupRequest_FieldTerminalPathValue struct {
	CreateProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingTargetGroupRequest_FieldPathValue = (*CreateProbingTargetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbingTargetGroupRequest' as interface{}
func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) AsParentValue() (*probing_target_group.ParentReference, bool) {
	res, ok := fpv.value.(*probing_target_group.ParentReference)
	return res, ok
}
func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) AsProbingTargetGroupValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbingTargetGroupRequest
func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) SetTo(target **CreateProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(CreateProbingTargetGroupRequest)
	}
	switch fpv.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target_group.ParentReference)
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		(*target).ProbingTargetGroup = fpv.value.(*probing_target_group.ProbingTargetGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingTargetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbingTargetGroupRequest_FieldTerminalPathValue' with the value under path in 'CreateProbingTargetGroupRequest'.
func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) CompareWith(source *CreateProbingTargetGroupRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingTargetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbingTargetGroupRequest))
}

type CreateProbingTargetGroupRequest_FieldSubPathValue struct {
	CreateProbingTargetGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbingTargetGroupRequest_FieldPathValue = (*CreateProbingTargetGroupRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) AsProbingTargetGroupPathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) SetTo(target **CreateProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(CreateProbingTargetGroupRequest)
	}
	switch fpvs.Selector() {
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).SetTo(&(*target).ProbingTargetGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingTargetGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) CompareWith(source *CreateProbingTargetGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).CompareWith(source.GetProbingTargetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingTargetGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbingTargetGroupRequest))
}

// CreateProbingTargetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbingTargetGroupRequest according to their type
// Present only for array (repeated) types.
type CreateProbingTargetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbingTargetGroupRequest_FieldPath
	ContainsValue(*CreateProbingTargetGroupRequest) bool
}

// ParseCreateProbingTargetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbingTargetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbingTargetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbingTargetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingTargetGroupRequest_FieldPathArrayItemValue = (*CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbingTargetGroupRequest as interface{}
func (fpaiv *CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbingTargetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbingTargetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingTargetGroupRequest'
func (fpaiv *CreateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbingTargetGroupRequest) bool {
	slice := fpaiv.CreateProbingTargetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbingTargetGroupRequest_FieldSubPathArrayItemValue struct {
	CreateProbingTargetGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbingTargetGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbingTargetGroupRequest_FieldSubPathArrayItemValue) AsProbingTargetGroupPathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingTargetGroupRequest'
func (fpaivs *CreateProbingTargetGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbingTargetGroupRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue).ContainsValue(source.GetProbingTargetGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetGroupRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbingTargetGroupRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbingTargetGroupRequest fields according to their type
type CreateProbingTargetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbingTargetGroupRequest_FieldPath
}

func ParseCreateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbingTargetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbingTargetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbingTargetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbingTargetGroupRequest_FieldPathArrayOfValues = (*CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target_group.ParentReference) {
			values = append(values, v)
		}
	case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ParentReference)
	return res, ok
}
func (fpaov *CreateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsProbingTargetGroupArrayOfValues() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}

type CreateProbingTargetGroupRequest_FieldSubPathArrayOfValues struct {
	CreateProbingTargetGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbingTargetGroupRequest_FieldPathArrayOfValues = (*CreateProbingTargetGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbingTargetGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbingTargetGroupRequest_FieldSubPathArrayOfValues) AsProbingTargetGroupPathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingTargetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingTargetGroupRequest_FieldPathSelector
	Get(source *UpdateProbingTargetGroupRequest) []interface{}
	GetSingle(source *UpdateProbingTargetGroupRequest) (interface{}, bool)
	ClearValue(item *UpdateProbingTargetGroupRequest)

	// Those methods build corresponding UpdateProbingTargetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayItemValue
}

type UpdateProbingTargetGroupRequest_FieldPathSelector int32

const (
	UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup UpdateProbingTargetGroupRequest_FieldPathSelector = 0
	UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask         UpdateProbingTargetGroupRequest_FieldPathSelector = 1
	UpdateProbingTargetGroupRequest_FieldPathSelectorCas                UpdateProbingTargetGroupRequest_FieldPathSelector = 2
)

func (s UpdateProbingTargetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return "probing_target_group"
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", s))
	}
}

func BuildUpdateProbingTargetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingTargetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingTargetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_group", "probingTargetGroup", "probing-target-group":
			return &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target_group", "probingTargetGroup", "probing-target-group":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbingTargetGroupRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingTargetGroupRequest", fp)
}

func ParseUpdateProbingTargetGroupRequest_FieldPath(rawField string) (UpdateProbingTargetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingTargetGroupRequest_FieldPath(fp)
}

func MustParseUpdateProbingTargetGroupRequest_FieldPath(rawField string) UpdateProbingTargetGroupRequest_FieldPath {
	fp, err := ParseUpdateProbingTargetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingTargetGroupRequest_FieldTerminalPath struct {
	selector UpdateProbingTargetGroupRequest_FieldPathSelector
}

var _ UpdateProbingTargetGroupRequest_FieldPath = (*UpdateProbingTargetGroupRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) Selector() UpdateProbingTargetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingTargetGroupRequest
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) Get(source *UpdateProbingTargetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			if source.ProbingTargetGroup != nil {
				values = append(values, source.ProbingTargetGroup)
			}
		case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingTargetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingTargetGroupRequest
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) GetSingle(source *UpdateProbingTargetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		res := source.GetProbingTargetGroup()
		return res, res != nil
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return (*probing_target_group.ProbingTargetGroup)(nil)
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return (*UpdateProbingTargetGroupRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) ClearValue(item *UpdateProbingTargetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			item.ProbingTargetGroup = nil
		case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathValue{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathValue{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathValue{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbingTargetGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup)}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return &UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbingTargetGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingTargetGroupRequest_FieldSubPath struct {
	selector UpdateProbingTargetGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingTargetGroupRequest_FieldPath = (*UpdateProbingTargetGroupRequest_FieldSubPath)(nil)

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) Selector() UpdateProbingTargetGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) AsProbingTargetGroupSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) AsCasSubPath() (UpdateProbingTargetGroupRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbingTargetGroupRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingTargetGroupRequest
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) Get(source *UpdateProbingTargetGroupRequest) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsProbingTargetGroupSubPath(); ok {
		values = append(values, asProbingTargetGroupFieldPath.Get(source.GetProbingTargetGroup())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingTargetGroupRequest))
}

// GetSingle returns value of selected field from source UpdateProbingTargetGroupRequest
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) GetSingle(source *UpdateProbingTargetGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		if source.GetProbingTargetGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargetGroup())
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) ClearValue(item *UpdateProbingTargetGroupRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			fps.subPath.ClearValueRaw(item.ProbingTargetGroup)
		case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathValue {
	return &UpdateProbingTargetGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayOfValues {
	return &UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequest_FieldPathArrayItemValue {
	return &UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingTargetGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingTargetGroupRequest_FieldPathValue allows storing values for UpdateProbingTargetGroupRequest fields according to their type
type UpdateProbingTargetGroupRequest_FieldPathValue interface {
	UpdateProbingTargetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingTargetGroupRequest)
	CompareWith(*UpdateProbingTargetGroupRequest) (cmp int, comparable bool)
}

func ParseUpdateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbingTargetGroupRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingTargetGroupRequest_FieldPathValue), nil
}

func MustParseUpdateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) UpdateProbingTargetGroupRequest_FieldPathValue {
	fpv, err := ParseUpdateProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingTargetGroupRequest_FieldTerminalPathValue struct {
	UpdateProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetGroupRequest_FieldPathValue = (*UpdateProbingTargetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbingTargetGroupRequest' as interface{}
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) AsProbingTargetGroupValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbingTargetGroupRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbingTargetGroupRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbingTargetGroupRequest
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) SetTo(target **UpdateProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(UpdateProbingTargetGroupRequest)
	}
	switch fpv.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		(*target).ProbingTargetGroup = fpv.value.(*probing_target_group.ProbingTargetGroup)
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbingTargetGroupRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingTargetGroupRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbingTargetGroupRequest'.
func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbingTargetGroupRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return 0, false
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingTargetGroupRequest))
}

type UpdateProbingTargetGroupRequest_FieldSubPathValue struct {
	UpdateProbingTargetGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingTargetGroupRequest_FieldPathValue = (*UpdateProbingTargetGroupRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) AsProbingTargetGroupPathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbingTargetGroupRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbingTargetGroupRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) SetTo(target **UpdateProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(UpdateProbingTargetGroupRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).SetTo(&(*target).ProbingTargetGroup)
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbingTargetGroupRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) CompareWith(source *UpdateProbingTargetGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).CompareWith(source.GetProbingTargetGroup())
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbingTargetGroupRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingTargetGroupRequest))
}

// UpdateProbingTargetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbingTargetGroupRequest according to their type
// Present only for array (repeated) types.
type UpdateProbingTargetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingTargetGroupRequest_FieldPath
	ContainsValue(*UpdateProbingTargetGroupRequest) bool
}

// ParseUpdateProbingTargetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingTargetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingTargetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingTargetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetGroupRequest_FieldPathArrayItemValue = (*UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingTargetGroupRequest as interface{}
func (fpaiv *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingTargetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingTargetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingTargetGroupRequest'
func (fpaiv *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingTargetGroupRequest) bool {
	slice := fpaiv.UpdateProbingTargetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue struct {
	UpdateProbingTargetGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue) AsProbingTargetGroupPathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingTargetGroupRequest'
func (fpaivs *UpdateProbingTargetGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingTargetGroupRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		return fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue).ContainsValue(source.GetProbingTargetGroup())
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbingTargetGroupRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbingTargetGroupRequest fields according to their type
type UpdateProbingTargetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingTargetGroupRequest_FieldPath
}

func ParseUpdateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingTargetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingTargetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbingTargetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingTargetGroupRequest_FieldPathArrayOfValues = (*UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbingTargetGroupRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsProbingTargetGroupArrayOfValues() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaov *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbingTargetGroupRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbingTargetGroupRequest_CAS)
	return res, ok
}

type UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues struct {
	UpdateProbingTargetGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingTargetGroupRequest_FieldPathArrayOfValues = (*UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues) AsProbingTargetGroupPathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbingTargetGroupRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingTargetGroupRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingTargetGroupRequestCAS_FieldPathSelector
	Get(source *UpdateProbingTargetGroupRequest_CAS) []interface{}
	GetSingle(source *UpdateProbingTargetGroupRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbingTargetGroupRequest_CAS)

	// Those methods build corresponding UpdateProbingTargetGroupRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue
}

type UpdateProbingTargetGroupRequestCAS_FieldPathSelector int32

const (
	UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState UpdateProbingTargetGroupRequestCAS_FieldPathSelector = 0
	UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask        UpdateProbingTargetGroupRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbingTargetGroupRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", s))
	}
}

func BuildUpdateProbingTargetGroupRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingTargetGroupRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingTargetGroupRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetGroupRequestCAS_FieldSubPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingTargetGroupRequest_CAS", fp)
}

func ParseUpdateProbingTargetGroupRequestCAS_FieldPath(rawField string) (UpdateProbingTargetGroupRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingTargetGroupRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbingTargetGroupRequestCAS_FieldPath(rawField string) UpdateProbingTargetGroupRequestCAS_FieldPath {
	fp, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingTargetGroupRequestCAS_FieldTerminalPath struct {
	selector UpdateProbingTargetGroupRequestCAS_FieldPathSelector
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPath = (*UpdateProbingTargetGroupRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) Selector() UpdateProbingTargetGroupRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingTargetGroupRequest_CAS
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) Get(source *UpdateProbingTargetGroupRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingTargetGroupRequest_CAS
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbingTargetGroupRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return (*probing_target_group.ProbingTargetGroup)(nil)
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbingTargetGroupRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingTargetGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue{UpdateProbingTargetGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue{UpdateProbingTargetGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup)}
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingTargetGroupRequestCAS_FieldSubPath struct {
	selector UpdateProbingTargetGroupRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPath = (*UpdateProbingTargetGroupRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) Selector() UpdateProbingTargetGroupRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingTargetGroupRequest_CAS
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) Get(source *UpdateProbingTargetGroupRequest_CAS) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbingTargetGroupFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbingTargetGroupRequest_CAS
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) GetSingle(source *UpdateProbingTargetGroupRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) ClearValue(item *UpdateProbingTargetGroupRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingTargetGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathValue {
	return &UpdateProbingTargetGroupRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingTargetGroupRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingTargetGroupRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbingTargetGroupRequestCAS_FieldPathValue interface {
	UpdateProbingTargetGroupRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingTargetGroupRequest_CAS)
	CompareWith(*UpdateProbingTargetGroupRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbingTargetGroupRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbingTargetGroupRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingTargetGroupRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbingTargetGroupRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbingTargetGroupRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue struct {
	UpdateProbingTargetGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPathValue = (*UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbingTargetGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingTargetGroupRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probing_target_group.ProbingTargetGroup)
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetGroupRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbingTargetGroupRequest_CAS'.
func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbingTargetGroupRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingTargetGroupRequest_CAS))
}

type UpdateProbingTargetGroupRequestCAS_FieldSubPathValue struct {
	UpdateProbingTargetGroupRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPathValue = (*UpdateProbingTargetGroupRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbingTargetGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingTargetGroupRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetGroupRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbingTargetGroupRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetGroupRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingTargetGroupRequestCAS_FieldPath
	ContainsValue(*UpdateProbingTargetGroupRequest_CAS) bool
}

// ParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbingTargetGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPathArrayItemValue = (*UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingTargetGroupRequest_CAS as interface{}
func (fpaiv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingTargetGroupRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingTargetGroupRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingTargetGroupRequest_CAS) bool {
	slice := fpaiv.UpdateProbingTargetGroupRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbingTargetGroupRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingTargetGroupRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetGroupRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingTargetGroupRequestCAS_FieldPath
}

func ParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbingTargetGroupRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues = (*UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaov *UpdateProbingTargetGroupRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}

type UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbingTargetGroupRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingTargetGroupRequestCAS_FieldPathArrayOfValues = (*UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingTargetGroupRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbingTargetGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbingTargetGroupRequest_FieldPathSelector
	Get(source *DeleteProbingTargetGroupRequest) []interface{}
	GetSingle(source *DeleteProbingTargetGroupRequest) (interface{}, bool)
	ClearValue(item *DeleteProbingTargetGroupRequest)

	// Those methods build corresponding DeleteProbingTargetGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbingTargetGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbingTargetGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbingTargetGroupRequest_FieldPathArrayItemValue
}

type DeleteProbingTargetGroupRequest_FieldPathSelector int32

const (
	DeleteProbingTargetGroupRequest_FieldPathSelectorName DeleteProbingTargetGroupRequest_FieldPathSelector = 0
)

func (s DeleteProbingTargetGroupRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", s))
	}
}

func BuildDeleteProbingTargetGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbingTargetGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbingTargetGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbingTargetGroupRequest_FieldTerminalPath{selector: DeleteProbingTargetGroupRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbingTargetGroupRequest", fp)
}

func ParseDeleteProbingTargetGroupRequest_FieldPath(rawField string) (DeleteProbingTargetGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbingTargetGroupRequest_FieldPath(fp)
}

func MustParseDeleteProbingTargetGroupRequest_FieldPath(rawField string) DeleteProbingTargetGroupRequest_FieldPath {
	fp, err := ParseDeleteProbingTargetGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbingTargetGroupRequest_FieldTerminalPath struct {
	selector DeleteProbingTargetGroupRequest_FieldPathSelector
}

var _ DeleteProbingTargetGroupRequest_FieldPath = (*DeleteProbingTargetGroupRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) Selector() DeleteProbingTargetGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbingTargetGroupRequest
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) Get(source *DeleteProbingTargetGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbingTargetGroupRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbingTargetGroupRequest
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) GetSingle(source *DeleteProbingTargetGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbingTargetGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		return (*probing_target_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) ClearValue(item *DeleteProbingTargetGroupRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbingTargetGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbingTargetGroupRequest_FieldPathSelectorName
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbingTargetGroupRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		return &DeleteProbingTargetGroupRequest_FieldTerminalPathValue{DeleteProbingTargetGroupRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{DeleteProbingTargetGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		return &DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues{DeleteProbingTargetGroupRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbingTargetGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbingTargetGroupRequest_FieldPathValue allows storing values for DeleteProbingTargetGroupRequest fields according to their type
type DeleteProbingTargetGroupRequest_FieldPathValue interface {
	DeleteProbingTargetGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbingTargetGroupRequest)
	CompareWith(*DeleteProbingTargetGroupRequest) (cmp int, comparable bool)
}

func ParseDeleteProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbingTargetGroupRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbingTargetGroupRequest_FieldPathValue), nil
}

func MustParseDeleteProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr string) DeleteProbingTargetGroupRequest_FieldPathValue {
	fpv, err := ParseDeleteProbingTargetGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbingTargetGroupRequest_FieldTerminalPathValue struct {
	DeleteProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingTargetGroupRequest_FieldPathValue = (*DeleteProbingTargetGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbingTargetGroupRequest' as interface{}
func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) AsNameValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbingTargetGroupRequest
func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) SetTo(target **DeleteProbingTargetGroupRequest) {
	if *target == nil {
		*target = new(DeleteProbingTargetGroupRequest)
	}
	switch fpv.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbingTargetGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbingTargetGroupRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbingTargetGroupRequest'.
func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbingTargetGroupRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingTargetGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbingTargetGroupRequest))
}

// DeleteProbingTargetGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbingTargetGroupRequest according to their type
// Present only for array (repeated) types.
type DeleteProbingTargetGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbingTargetGroupRequest_FieldPath
	ContainsValue(*DeleteProbingTargetGroupRequest) bool
}

// ParseDeleteProbingTargetGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbingTargetGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbingTargetGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbingTargetGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbingTargetGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbingTargetGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingTargetGroupRequest_FieldPathArrayItemValue = (*DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbingTargetGroupRequest as interface{}
func (fpaiv *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbingTargetGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbingTargetGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbingTargetGroupRequest'
func (fpaiv *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbingTargetGroupRequest) bool {
	slice := fpaiv.DeleteProbingTargetGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbingTargetGroupRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbingTargetGroupRequest fields according to their type
type DeleteProbingTargetGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbingTargetGroupRequest_FieldPath
}

func ParseDeleteProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbingTargetGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbingTargetGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbingTargetGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbingTargetGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbingTargetGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbingTargetGroupRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbingTargetGroupRequest_FieldPathArrayOfValues = (*DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbingTargetGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingTargetGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingTargetGroupsRequest_FieldPathSelector
	Get(source *SearchProbingTargetGroupsRequest) []interface{}
	GetSingle(source *SearchProbingTargetGroupsRequest) (interface{}, bool)
	ClearValue(item *SearchProbingTargetGroupsRequest)

	// Those methods build corresponding SearchProbingTargetGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingTargetGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingTargetGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingTargetGroupsRequest_FieldPathArrayItemValue
}

type SearchProbingTargetGroupsRequest_FieldPathSelector int32

const (
	SearchProbingTargetGroupsRequest_FieldPathSelectorParent    SearchProbingTargetGroupsRequest_FieldPathSelector = 0
	SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize  SearchProbingTargetGroupsRequest_FieldPathSelector = 1
	SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken SearchProbingTargetGroupsRequest_FieldPathSelector = 2
	SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy   SearchProbingTargetGroupsRequest_FieldPathSelector = 3
	SearchProbingTargetGroupsRequest_FieldPathSelectorFilter    SearchProbingTargetGroupsRequest_FieldPathSelector = 4
	SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask SearchProbingTargetGroupsRequest_FieldPathSelector = 5
	SearchProbingTargetGroupsRequest_FieldPathSelectorView      SearchProbingTargetGroupsRequest_FieldPathSelector = 6
	SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase    SearchProbingTargetGroupsRequest_FieldPathSelector = 7
)

func (s SearchProbingTargetGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		return "view"
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", s))
	}
}

func BuildSearchProbingTargetGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingTargetGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingTargetGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingTargetGroupsRequest", fp)
}

func ParseSearchProbingTargetGroupsRequest_FieldPath(rawField string) (SearchProbingTargetGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingTargetGroupsRequest_FieldPath(fp)
}

func MustParseSearchProbingTargetGroupsRequest_FieldPath(rawField string) SearchProbingTargetGroupsRequest_FieldPath {
	fp, err := ParseSearchProbingTargetGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingTargetGroupsRequest_FieldTerminalPath struct {
	selector SearchProbingTargetGroupsRequest_FieldPathSelector
}

var _ SearchProbingTargetGroupsRequest_FieldPath = (*SearchProbingTargetGroupsRequest_FieldTerminalPath)(nil)

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) Selector() SearchProbingTargetGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingTargetGroupsRequest
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) Get(source *SearchProbingTargetGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingTargetGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source SearchProbingTargetGroupsRequest
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) GetSingle(source *SearchProbingTargetGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingTargetGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return (*probing_target_group.ParentName)(nil)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return (*probing_target_group.OrderBy)(nil)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return (*probing_target_group.Filter)(nil)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return (*probing_target_group.ProbingTargetGroup_FieldMask)(nil)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) ClearValue(item *SearchProbingTargetGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingTargetGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorParent ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorView ||
		fp.selector == SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) SearchProbingTargetGroupsRequest_FieldPathValue {
	switch fp.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ParentName)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.OrderBy)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.Filter)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup_FieldMask)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathValue{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov := &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ParentName)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.OrderBy)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Filter)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target_group.ProbingTargetGroup_FieldMask)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		return &SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingTargetGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchProbingTargetGroupsRequest_FieldPathValue allows storing values for SearchProbingTargetGroupsRequest fields according to their type
type SearchProbingTargetGroupsRequest_FieldPathValue interface {
	SearchProbingTargetGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingTargetGroupsRequest)
	CompareWith(*SearchProbingTargetGroupsRequest) (cmp int, comparable bool)
}

func ParseSearchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) (SearchProbingTargetGroupsRequest_FieldPathValue, error) {
	fp, err := ParseSearchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingTargetGroupsRequest_FieldPathValue), nil
}

func MustParseSearchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr string) SearchProbingTargetGroupsRequest_FieldPathValue {
	fpv, err := ParseSearchProbingTargetGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingTargetGroupsRequest_FieldTerminalPathValue struct {
	SearchProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetGroupsRequest_FieldPathValue = (*SearchProbingTargetGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingTargetGroupsRequest' as interface{}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target_group.ParentName, bool) {
	res, ok := fpv.value.(*probing_target_group.ParentName)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target_group.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target_group.OrderBy)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target_group.Filter, bool) {
	res, ok := fpv.value.(*probing_target_group.Filter)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingTargetGroupsRequest
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) SetTo(target **SearchProbingTargetGroupsRequest) {
	if *target == nil {
		*target = new(SearchProbingTargetGroupsRequest)
	}
	switch fpv.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target_group.ParentName)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target_group.PagerCursor)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target_group.OrderBy)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target_group.Filter)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target_group.ProbingTargetGroup_FieldMask)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingTargetGroupsRequest_FieldTerminalPathValue' with the value under path in 'SearchProbingTargetGroupsRequest'.
func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWith(source *SearchProbingTargetGroupsRequest) (int, bool) {
	switch fpv.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target_group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingTargetGroupsRequest))
}

// SearchProbingTargetGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingTargetGroupsRequest according to their type
// Present only for array (repeated) types.
type SearchProbingTargetGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingTargetGroupsRequest_FieldPath
	ContainsValue(*SearchProbingTargetGroupsRequest) bool
}

// ParseSearchProbingTargetGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingTargetGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingTargetGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingTargetGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingTargetGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue struct {
	SearchProbingTargetGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetGroupsRequest_FieldPathArrayItemValue = (*SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingTargetGroupsRequest as interface{}
func (fpaiv *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingTargetGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingTargetGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetGroupsRequest'
func (fpaiv *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingTargetGroupsRequest) bool {
	slice := fpaiv.SearchProbingTargetGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchProbingTargetGroupsRequest_FieldPathArrayOfValues allows storing slice of values for SearchProbingTargetGroupsRequest fields according to their type
type SearchProbingTargetGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingTargetGroupsRequest_FieldPath
}

func ParseSearchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingTargetGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingTargetGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingTargetGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingTargetGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingTargetGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues struct {
	SearchProbingTargetGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ SearchProbingTargetGroupsRequest_FieldPathArrayOfValues = (*SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target_group.ParentName) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target_group.OrderBy) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target_group.Filter) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target_group.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ParentName)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target_group.OrderBy)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target_group.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Filter)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target_group.ProbingTargetGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target_group.ProbingTargetGroup_FieldMask)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingTargetGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingTargetGroupsResponse_FieldPathSelector
	Get(source *SearchProbingTargetGroupsResponse) []interface{}
	GetSingle(source *SearchProbingTargetGroupsResponse) (interface{}, bool)
	ClearValue(item *SearchProbingTargetGroupsResponse)

	// Those methods build corresponding SearchProbingTargetGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayItemValue
}

type SearchProbingTargetGroupsResponse_FieldPathSelector int32

const (
	SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups SearchProbingTargetGroupsResponse_FieldPathSelector = 0
	SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken       SearchProbingTargetGroupsResponse_FieldPathSelector = 1
	SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken       SearchProbingTargetGroupsResponse_FieldPathSelector = 2
	SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset       SearchProbingTargetGroupsResponse_FieldPathSelector = 3
	SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount   SearchProbingTargetGroupsResponse_FieldPathSelector = 4
)

func (s SearchProbingTargetGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return "probing_target_groups"
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", s))
	}
}

func BuildSearchProbingTargetGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingTargetGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingTargetGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			return &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target_groups", "probingTargetGroups", "probing-target-groups":
			if subpath, err := probing_target_group.BuildProbingTargetGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchProbingTargetGroupsResponse_FieldSubPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingTargetGroupsResponse", fp)
}

func ParseSearchProbingTargetGroupsResponse_FieldPath(rawField string) (SearchProbingTargetGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingTargetGroupsResponse_FieldPath(fp)
}

func MustParseSearchProbingTargetGroupsResponse_FieldPath(rawField string) SearchProbingTargetGroupsResponse_FieldPath {
	fp, err := ParseSearchProbingTargetGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingTargetGroupsResponse_FieldTerminalPath struct {
	selector SearchProbingTargetGroupsResponse_FieldPathSelector
}

var _ SearchProbingTargetGroupsResponse_FieldPath = (*SearchProbingTargetGroupsResponse_FieldTerminalPath)(nil)

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) Selector() SearchProbingTargetGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingTargetGroupsResponse
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) Get(source *SearchProbingTargetGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, value := range source.GetProbingTargetGroups() {
				values = append(values, value)
			}
		case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingTargetGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source SearchProbingTargetGroupsResponse
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) GetSingle(source *SearchProbingTargetGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		res := source.GetProbingTargetGroups()
		return res, res != nil
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return ([]*probing_target_group.ProbingTargetGroup)(nil)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return (*probing_target_group.PagerCursor)(nil)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) ClearValue(item *SearchProbingTargetGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			item.ProbingTargetGroups = nil
		case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathValue {
	switch fp.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target_group.ProbingTargetGroup)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov := &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target_group.ProbingTargetGroup)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target_group.PagerCursor)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return &SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue{SearchProbingTargetGroupsResponse_FieldTerminalPath: *fp, value: value.(*probing_target_group.ProbingTargetGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchProbingTargetGroupsResponse_FieldSubPath struct {
	selector SearchProbingTargetGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchProbingTargetGroupsResponse_FieldPath = (*SearchProbingTargetGroupsResponse_FieldSubPath)(nil)

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) Selector() SearchProbingTargetGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) AsProbingTargetGroupsSubPath() (probing_target_group.ProbingTargetGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchProbingTargetGroupsResponse
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) Get(source *SearchProbingTargetGroupsResponse) (values []interface{}) {
	if asProbingTargetGroupFieldPath, ok := fps.AsProbingTargetGroupsSubPath(); ok {
		for _, item := range source.GetProbingTargetGroups() {
			values = append(values, asProbingTargetGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchProbingTargetGroupsResponse))
}

// GetSingle returns value of selected field from source SearchProbingTargetGroupsResponse
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) GetSingle(source *SearchProbingTargetGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		if len(source.GetProbingTargetGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargetGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fps.selector))
	}
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchProbingTargetGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) ClearValue(item *SearchProbingTargetGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			for _, subItem := range item.ProbingTargetGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchProbingTargetGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithIValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathValue {
	return &SearchProbingTargetGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	return &SearchProbingTargetGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	return &SearchProbingTargetGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchProbingTargetGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchProbingTargetGroupsResponse_FieldPathValue allows storing values for SearchProbingTargetGroupsResponse fields according to their type
type SearchProbingTargetGroupsResponse_FieldPathValue interface {
	SearchProbingTargetGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingTargetGroupsResponse)
	CompareWith(*SearchProbingTargetGroupsResponse) (cmp int, comparable bool)
}

func ParseSearchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) (SearchProbingTargetGroupsResponse_FieldPathValue, error) {
	fp, err := ParseSearchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingTargetGroupsResponse_FieldPathValue), nil
}

func MustParseSearchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr string) SearchProbingTargetGroupsResponse_FieldPathValue {
	fpv, err := ParseSearchProbingTargetGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingTargetGroupsResponse_FieldTerminalPathValue struct {
	SearchProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetGroupsResponse_FieldPathValue = (*SearchProbingTargetGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingTargetGroupsResponse' as interface{}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) AsProbingTargetGroupsValue() ([]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpv.value.([]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingTargetGroupsResponse
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) SetTo(target **SearchProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(SearchProbingTargetGroupsResponse)
	}
	switch fpv.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		(*target).ProbingTargetGroups = fpv.value.([]*probing_target_group.ProbingTargetGroup)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target_group.PagerCursor)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target_group.PagerCursor)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingTargetGroupsResponse_FieldTerminalPathValue' with the value under path in 'SearchProbingTargetGroupsResponse'.
func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWith(source *SearchProbingTargetGroupsResponse) (int, bool) {
	switch fpv.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingTargetGroupsResponse))
}

type SearchProbingTargetGroupsResponse_FieldSubPathValue struct {
	SearchProbingTargetGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchProbingTargetGroupsResponse_FieldPathValue = (*SearchProbingTargetGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) AsProbingTargetGroupsPathValue() (probing_target_group.ProbingTargetGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target_group.ProbingTargetGroup_FieldPathValue)
	return res, ok
}

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) SetTo(target **SearchProbingTargetGroupsResponse) {
	if *target == nil {
		*target = new(SearchProbingTargetGroupsResponse)
	}
	switch fpvs.Selector() {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) CompareWith(source *SearchProbingTargetGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingTargetGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchProbingTargetGroupsResponse))
}

// SearchProbingTargetGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingTargetGroupsResponse according to their type
// Present only for array (repeated) types.
type SearchProbingTargetGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingTargetGroupsResponse_FieldPath
	ContainsValue(*SearchProbingTargetGroupsResponse) bool
}

// ParseSearchProbingTargetGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingTargetGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingTargetGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingTargetGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingTargetGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue struct {
	SearchProbingTargetGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetGroupsResponse_FieldPathArrayItemValue = (*SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingTargetGroupsResponse as interface{}
func (fpaiv *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetGroupsItemValue() (*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaiv.value.(*probing_target_group.ProbingTargetGroup)
	return res, ok
}

func (fpaiv *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingTargetGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingTargetGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetGroupsResponse'
func (fpaiv *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingTargetGroupsResponse) bool {
	slice := fpaiv.SearchProbingTargetGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchProbingTargetGroupsResponse_FieldSubPathArrayItemValue struct {
	SearchProbingTargetGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) AsProbingTargetGroupsPathItemValue() (probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target_group.ProbingTargetGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetGroupsResponse'
func (fpaivs *SearchProbingTargetGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchProbingTargetGroupsResponse) bool {
	switch fpaivs.Selector() {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetGroupsResponse: %d", fpaivs.Selector()))
	}
}

// SearchProbingTargetGroupsResponse_FieldPathArrayOfValues allows storing slice of values for SearchProbingTargetGroupsResponse fields according to their type
type SearchProbingTargetGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingTargetGroupsResponse_FieldPath
}

func ParseSearchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingTargetGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingTargetGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingTargetGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingTargetGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingTargetGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues struct {
	SearchProbingTargetGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ SearchProbingTargetGroupsResponse_FieldPathArrayOfValues = (*SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
		for _, v := range fpaov.values.([][]*probing_target_group.ProbingTargetGroup) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetGroupsArrayOfValues() ([][]*probing_target_group.ProbingTargetGroup, bool) {
	res, ok := fpaov.values.([][]*probing_target_group.ProbingTargetGroup)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingTargetGroupsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchProbingTargetGroupsResponse_FieldSubPathArrayOfValues struct {
	SearchProbingTargetGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchProbingTargetGroupsResponse_FieldPathArrayOfValues = (*SearchProbingTargetGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchProbingTargetGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchProbingTargetGroupsResponse_FieldSubPathArrayOfValues) AsProbingTargetGroupsPathArrayOfValues() (probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target_group.ProbingTargetGroup_FieldPathArrayOfValues)
	return res, ok
}
