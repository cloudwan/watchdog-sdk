// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_group_service.proto
// DO NOT EDIT!!!

package probing_target_group_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

func (o *GetProbingTargetGroupRequest) GotenObjectExt() {}

func (o *GetProbingTargetGroupRequest) MakeFullFieldMask() *GetProbingTargetGroupRequest_FieldMask {
	return FullGetProbingTargetGroupRequest_FieldMask()
}

func (o *GetProbingTargetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbingTargetGroupRequest_FieldMask()
}

func (o *GetProbingTargetGroupRequest) MakeDiffFieldMask(other *GetProbingTargetGroupRequest) *GetProbingTargetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbingTargetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbingTargetGroupRequest_FieldMask()
	}

	res := &GetProbingTargetGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbingTargetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbingTargetGroupRequest))
}

func (o *GetProbingTargetGroupRequest) Clone() *GetProbingTargetGroupRequest {
	if o == nil {
		return nil
	}
	result := &GetProbingTargetGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbingTargetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbingTargetGroupRequest) Merge(source *GetProbingTargetGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbingTargetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbingTargetGroupRequest))
}

func (o *BatchGetProbingTargetGroupsRequest) GotenObjectExt() {}

func (o *BatchGetProbingTargetGroupsRequest) MakeFullFieldMask() *BatchGetProbingTargetGroupsRequest_FieldMask {
	return FullBatchGetProbingTargetGroupsRequest_FieldMask()
}

func (o *BatchGetProbingTargetGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingTargetGroupsRequest_FieldMask()
}

func (o *BatchGetProbingTargetGroupsRequest) MakeDiffFieldMask(other *BatchGetProbingTargetGroupsRequest) *BatchGetProbingTargetGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingTargetGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingTargetGroupsRequest_FieldMask()
	}

	res := &BatchGetProbingTargetGroupsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbingTargetGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingTargetGroupsRequest))
}

func (o *BatchGetProbingTargetGroupsRequest) Clone() *BatchGetProbingTargetGroupsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingTargetGroupsRequest{}
	result.Names = make([]*probing_target_group.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probing_target_group.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbingTargetGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingTargetGroupsRequest) Merge(source *BatchGetProbingTargetGroupsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_target_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbingTargetGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingTargetGroupsRequest))
}

func (o *BatchGetProbingTargetGroupsResponse) GotenObjectExt() {}

func (o *BatchGetProbingTargetGroupsResponse) MakeFullFieldMask() *BatchGetProbingTargetGroupsResponse_FieldMask {
	return FullBatchGetProbingTargetGroupsResponse_FieldMask()
}

func (o *BatchGetProbingTargetGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingTargetGroupsResponse_FieldMask()
}

func (o *BatchGetProbingTargetGroupsResponse) MakeDiffFieldMask(other *BatchGetProbingTargetGroupsResponse) *BatchGetProbingTargetGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingTargetGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingTargetGroupsResponse_FieldMask()
	}

	res := &BatchGetProbingTargetGroupsResponse_FieldMask{}

	if len(o.GetProbingTargetGroups()) == len(other.GetProbingTargetGroups()) {
		for i, lValue := range o.GetProbingTargetGroups() {
			rValue := other.GetProbingTargetGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbingTargetGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingTargetGroupsResponse))
}

func (o *BatchGetProbingTargetGroupsResponse) Clone() *BatchGetProbingTargetGroupsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingTargetGroupsResponse{}
	result.ProbingTargetGroups = make([]*probing_target_group.ProbingTargetGroup, len(o.ProbingTargetGroups))
	for i, sourceValue := range o.ProbingTargetGroups {
		result.ProbingTargetGroups[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probing_target_group.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probing_target_group.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbingTargetGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingTargetGroupsResponse) Merge(source *BatchGetProbingTargetGroupsResponse) {
	for _, sourceValue := range source.GetProbingTargetGroups() {
		exists := false
		for _, currentValue := range o.ProbingTargetGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.ProbingTargetGroup
			if sourceValue != nil {
				newDstElement = new(probing_target_group.ProbingTargetGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargetGroups = append(o.ProbingTargetGroups, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_target_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbingTargetGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingTargetGroupsResponse))
}

func (o *ListProbingTargetGroupsRequest) GotenObjectExt() {}

func (o *ListProbingTargetGroupsRequest) MakeFullFieldMask() *ListProbingTargetGroupsRequest_FieldMask {
	return FullListProbingTargetGroupsRequest_FieldMask()
}

func (o *ListProbingTargetGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingTargetGroupsRequest_FieldMask()
}

func (o *ListProbingTargetGroupsRequest) MakeDiffFieldMask(other *ListProbingTargetGroupsRequest) *ListProbingTargetGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbingTargetGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingTargetGroupsRequest_FieldMask()
	}

	res := &ListProbingTargetGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProbingTargetGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingTargetGroupsRequest))
}

func (o *ListProbingTargetGroupsRequest) Clone() *ListProbingTargetGroupsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbingTargetGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target_group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProbingTargetGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingTargetGroupsRequest) Merge(source *ListProbingTargetGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target_group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProbingTargetGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingTargetGroupsRequest))
}

func (o *ListProbingTargetGroupsResponse) GotenObjectExt() {}

func (o *ListProbingTargetGroupsResponse) MakeFullFieldMask() *ListProbingTargetGroupsResponse_FieldMask {
	return FullListProbingTargetGroupsResponse_FieldMask()
}

func (o *ListProbingTargetGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingTargetGroupsResponse_FieldMask()
}

func (o *ListProbingTargetGroupsResponse) MakeDiffFieldMask(other *ListProbingTargetGroupsResponse) *ListProbingTargetGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbingTargetGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingTargetGroupsResponse_FieldMask()
	}

	res := &ListProbingTargetGroupsResponse_FieldMask{}

	if len(o.GetProbingTargetGroups()) == len(other.GetProbingTargetGroups()) {
		for i, lValue := range o.GetProbingTargetGroups() {
			rValue := other.GetProbingTargetGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProbingTargetGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingTargetGroupsResponse))
}

func (o *ListProbingTargetGroupsResponse) Clone() *ListProbingTargetGroupsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbingTargetGroupsResponse{}
	result.ProbingTargetGroups = make([]*probing_target_group.ProbingTargetGroup, len(o.ProbingTargetGroups))
	for i, sourceValue := range o.ProbingTargetGroups {
		result.ProbingTargetGroups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProbingTargetGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingTargetGroupsResponse) Merge(source *ListProbingTargetGroupsResponse) {
	for _, sourceValue := range source.GetProbingTargetGroups() {
		exists := false
		for _, currentValue := range o.ProbingTargetGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.ProbingTargetGroup
			if sourceValue != nil {
				newDstElement = new(probing_target_group.ProbingTargetGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargetGroups = append(o.ProbingTargetGroups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProbingTargetGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingTargetGroupsResponse))
}

func (o *WatchProbingTargetGroupRequest) GotenObjectExt() {}

func (o *WatchProbingTargetGroupRequest) MakeFullFieldMask() *WatchProbingTargetGroupRequest_FieldMask {
	return FullWatchProbingTargetGroupRequest_FieldMask()
}

func (o *WatchProbingTargetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetGroupRequest_FieldMask()
}

func (o *WatchProbingTargetGroupRequest) MakeDiffFieldMask(other *WatchProbingTargetGroupRequest) *WatchProbingTargetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetGroupRequest_FieldMask()
	}

	res := &WatchProbingTargetGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbingTargetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetGroupRequest))
}

func (o *WatchProbingTargetGroupRequest) Clone() *WatchProbingTargetGroupRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbingTargetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetGroupRequest) Merge(source *WatchProbingTargetGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbingTargetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetGroupRequest))
}

func (o *WatchProbingTargetGroupResponse) GotenObjectExt() {}

func (o *WatchProbingTargetGroupResponse) MakeFullFieldMask() *WatchProbingTargetGroupResponse_FieldMask {
	return FullWatchProbingTargetGroupResponse_FieldMask()
}

func (o *WatchProbingTargetGroupResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetGroupResponse_FieldMask()
}

func (o *WatchProbingTargetGroupResponse) MakeDiffFieldMask(other *WatchProbingTargetGroupResponse) *WatchProbingTargetGroupResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetGroupResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetGroupResponse_FieldMask()
	}

	res := &WatchProbingTargetGroupResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupResponse_FieldTerminalPath{selector: WatchProbingTargetGroupResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbingTargetGroupResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetGroupResponse))
}

func (o *WatchProbingTargetGroupResponse) Clone() *WatchProbingTargetGroupResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetGroupResponse{}
	result.Change = proto.Clone(o.Change).(*probing_target_group.ProbingTargetGroupChange)
	return result
}

func (o *WatchProbingTargetGroupResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetGroupResponse) Merge(source *WatchProbingTargetGroupResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probing_target_group.ProbingTargetGroupChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbingTargetGroupResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetGroupResponse))
}

func (o *WatchProbingTargetGroupsRequest) GotenObjectExt() {}

func (o *WatchProbingTargetGroupsRequest) MakeFullFieldMask() *WatchProbingTargetGroupsRequest_FieldMask {
	return FullWatchProbingTargetGroupsRequest_FieldMask()
}

func (o *WatchProbingTargetGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetGroupsRequest_FieldMask()
}

func (o *WatchProbingTargetGroupsRequest) MakeDiffFieldMask(other *WatchProbingTargetGroupsRequest) *WatchProbingTargetGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetGroupsRequest_FieldMask()
	}

	res := &WatchProbingTargetGroupsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbingTargetGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetGroupsRequest))
}

func (o *WatchProbingTargetGroupsRequest) Clone() *WatchProbingTargetGroupsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetGroupsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbingTargetGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetGroupsRequest) Merge(source *WatchProbingTargetGroupsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbingTargetGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetGroupsRequest))
}

func (o *WatchProbingTargetGroupsResponse) GotenObjectExt() {}

func (o *WatchProbingTargetGroupsResponse) MakeFullFieldMask() *WatchProbingTargetGroupsResponse_FieldMask {
	return FullWatchProbingTargetGroupsResponse_FieldMask()
}

func (o *WatchProbingTargetGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetGroupsResponse_FieldMask()
}

func (o *WatchProbingTargetGroupsResponse) MakeDiffFieldMask(other *WatchProbingTargetGroupsResponse) *WatchProbingTargetGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetGroupsResponse_FieldMask()
	}

	res := &WatchProbingTargetGroupsResponse_FieldMask{}

	if len(o.GetProbingTargetGroupChanges()) == len(other.GetProbingTargetGroupChanges()) {
		for i, lValue := range o.GetProbingTargetGroupChanges() {
			rValue := other.GetProbingTargetGroupChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldSubPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbingTargetGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetGroupsResponse))
}

func (o *WatchProbingTargetGroupsResponse) Clone() *WatchProbingTargetGroupsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetGroupsResponse{}
	result.ProbingTargetGroupChanges = make([]*probing_target_group.ProbingTargetGroupChange, len(o.ProbingTargetGroupChanges))
	for i, sourceValue := range o.ProbingTargetGroupChanges {
		result.ProbingTargetGroupChanges[i] = proto.Clone(sourceValue).(*probing_target_group.ProbingTargetGroupChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbingTargetGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetGroupsResponse) Merge(source *WatchProbingTargetGroupsResponse) {
	for _, sourceValue := range source.GetProbingTargetGroupChanges() {
		exists := false
		for _, currentValue := range o.ProbingTargetGroupChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.ProbingTargetGroupChange
			if sourceValue != nil {
				newDstElement = new(probing_target_group.ProbingTargetGroupChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbingTargetGroupChanges = append(o.ProbingTargetGroupChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbingTargetGroupsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbingTargetGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetGroupsResponse))
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask {
	return FullWatchProbingTargetGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbingTargetGroupsResponse_PageTokenChange) *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetGroupsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) Clone() *WatchProbingTargetGroupsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetGroupsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) Merge(source *WatchProbingTargetGroupsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbingTargetGroupsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

func (o *CreateProbingTargetGroupRequest) GotenObjectExt() {}

func (o *CreateProbingTargetGroupRequest) MakeFullFieldMask() *CreateProbingTargetGroupRequest_FieldMask {
	return FullCreateProbingTargetGroupRequest_FieldMask()
}

func (o *CreateProbingTargetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbingTargetGroupRequest_FieldMask()
}

func (o *CreateProbingTargetGroupRequest) MakeDiffFieldMask(other *CreateProbingTargetGroupRequest) *CreateProbingTargetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbingTargetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbingTargetGroupRequest_FieldMask()
	}

	res := &CreateProbingTargetGroupRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbingTargetGroup().MakeDiffFieldMask(other.GetProbingTargetGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbingTargetGroupRequest_FieldSubPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbingTargetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbingTargetGroupRequest))
}

func (o *CreateProbingTargetGroupRequest) Clone() *CreateProbingTargetGroupRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbingTargetGroupRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingTargetGroup = o.ProbingTargetGroup.Clone()
	return result
}

func (o *CreateProbingTargetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbingTargetGroupRequest) Merge(source *CreateProbingTargetGroupRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbingTargetGroup() != nil {
		if o.ProbingTargetGroup == nil {
			o.ProbingTargetGroup = new(probing_target_group.ProbingTargetGroup)
		}
		o.ProbingTargetGroup.Merge(source.GetProbingTargetGroup())
	}
}

func (o *CreateProbingTargetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbingTargetGroupRequest))
}

func (o *UpdateProbingTargetGroupRequest) GotenObjectExt() {}

func (o *UpdateProbingTargetGroupRequest) MakeFullFieldMask() *UpdateProbingTargetGroupRequest_FieldMask {
	return FullUpdateProbingTargetGroupRequest_FieldMask()
}

func (o *UpdateProbingTargetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingTargetGroupRequest_FieldMask()
}

func (o *UpdateProbingTargetGroupRequest) MakeDiffFieldMask(other *UpdateProbingTargetGroupRequest) *UpdateProbingTargetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingTargetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingTargetGroupRequest_FieldMask()
	}

	res := &UpdateProbingTargetGroupRequest_FieldMask{}
	{
		subMask := o.GetProbingTargetGroup().MakeDiffFieldMask(other.GetProbingTargetGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbingTargetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingTargetGroupRequest))
}

func (o *UpdateProbingTargetGroupRequest) Clone() *UpdateProbingTargetGroupRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbingTargetGroupRequest{}
	result.ProbingTargetGroup = o.ProbingTargetGroup.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbingTargetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingTargetGroupRequest) Merge(source *UpdateProbingTargetGroupRequest) {
	if source.GetProbingTargetGroup() != nil {
		if o.ProbingTargetGroup == nil {
			o.ProbingTargetGroup = new(probing_target_group.ProbingTargetGroup)
		}
		o.ProbingTargetGroup.Merge(source.GetProbingTargetGroup())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbingTargetGroupRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbingTargetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingTargetGroupRequest))
}

func (o *UpdateProbingTargetGroupRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbingTargetGroupRequest_CAS) MakeFullFieldMask() *UpdateProbingTargetGroupRequest_CAS_FieldMask {
	return FullUpdateProbingTargetGroupRequest_CAS_FieldMask()
}

func (o *UpdateProbingTargetGroupRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingTargetGroupRequest_CAS_FieldMask()
}

func (o *UpdateProbingTargetGroupRequest_CAS) MakeDiffFieldMask(other *UpdateProbingTargetGroupRequest_CAS) *UpdateProbingTargetGroupRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingTargetGroupRequest_CAS_FieldMask()
	}

	res := &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequestCAS_FieldSubPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbingTargetGroupRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingTargetGroupRequest_CAS))
}

func (o *UpdateProbingTargetGroupRequest_CAS) Clone() *UpdateProbingTargetGroupRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbingTargetGroupRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	return result
}

func (o *UpdateProbingTargetGroupRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingTargetGroupRequest_CAS) Merge(source *UpdateProbingTargetGroupRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probing_target_group.ProbingTargetGroup)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbingTargetGroupRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingTargetGroupRequest_CAS))
}

func (o *DeleteProbingTargetGroupRequest) GotenObjectExt() {}

func (o *DeleteProbingTargetGroupRequest) MakeFullFieldMask() *DeleteProbingTargetGroupRequest_FieldMask {
	return FullDeleteProbingTargetGroupRequest_FieldMask()
}

func (o *DeleteProbingTargetGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbingTargetGroupRequest_FieldMask()
}

func (o *DeleteProbingTargetGroupRequest) MakeDiffFieldMask(other *DeleteProbingTargetGroupRequest) *DeleteProbingTargetGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbingTargetGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbingTargetGroupRequest_FieldMask()
	}

	res := &DeleteProbingTargetGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbingTargetGroupRequest_FieldTerminalPath{selector: DeleteProbingTargetGroupRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbingTargetGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbingTargetGroupRequest))
}

func (o *DeleteProbingTargetGroupRequest) Clone() *DeleteProbingTargetGroupRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbingTargetGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbingTargetGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbingTargetGroupRequest) Merge(source *DeleteProbingTargetGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbingTargetGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbingTargetGroupRequest))
}

func (o *SearchProbingTargetGroupsRequest) GotenObjectExt() {}

func (o *SearchProbingTargetGroupsRequest) MakeFullFieldMask() *SearchProbingTargetGroupsRequest_FieldMask {
	return FullSearchProbingTargetGroupsRequest_FieldMask()
}

func (o *SearchProbingTargetGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingTargetGroupsRequest_FieldMask()
}

func (o *SearchProbingTargetGroupsRequest) MakeDiffFieldMask(other *SearchProbingTargetGroupsRequest) *SearchProbingTargetGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingTargetGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingTargetGroupsRequest_FieldMask()
	}

	res := &SearchProbingTargetGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbingTargetGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingTargetGroupsRequest))
}

func (o *SearchProbingTargetGroupsRequest) Clone() *SearchProbingTargetGroupsRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbingTargetGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target_group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target_group.ProbingTargetGroup_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbingTargetGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingTargetGroupsRequest) Merge(source *SearchProbingTargetGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target_group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target_group.ProbingTargetGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbingTargetGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingTargetGroupsRequest))
}

func (o *SearchProbingTargetGroupsResponse) GotenObjectExt() {}

func (o *SearchProbingTargetGroupsResponse) MakeFullFieldMask() *SearchProbingTargetGroupsResponse_FieldMask {
	return FullSearchProbingTargetGroupsResponse_FieldMask()
}

func (o *SearchProbingTargetGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingTargetGroupsResponse_FieldMask()
}

func (o *SearchProbingTargetGroupsResponse) MakeDiffFieldMask(other *SearchProbingTargetGroupsResponse) *SearchProbingTargetGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingTargetGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingTargetGroupsResponse_FieldMask()
	}

	res := &SearchProbingTargetGroupsResponse_FieldMask{}

	if len(o.GetProbingTargetGroups()) == len(other.GetProbingTargetGroups()) {
		for i, lValue := range o.GetProbingTargetGroups() {
			rValue := other.GetProbingTargetGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbingTargetGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingTargetGroupsResponse))
}

func (o *SearchProbingTargetGroupsResponse) Clone() *SearchProbingTargetGroupsResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbingTargetGroupsResponse{}
	result.ProbingTargetGroups = make([]*probing_target_group.ProbingTargetGroup, len(o.ProbingTargetGroups))
	for i, sourceValue := range o.ProbingTargetGroups {
		result.ProbingTargetGroups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbingTargetGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingTargetGroupsResponse) Merge(source *SearchProbingTargetGroupsResponse) {
	for _, sourceValue := range source.GetProbingTargetGroups() {
		exists := false
		for _, currentValue := range o.ProbingTargetGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target_group.ProbingTargetGroup
			if sourceValue != nil {
				newDstElement = new(probing_target_group.ProbingTargetGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargetGroups = append(o.ProbingTargetGroups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbingTargetGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingTargetGroupsResponse))
}
