// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_group_service.proto
// DO NOT EDIT!!!

package probing_target_group_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type GetProbingTargetGroupRequest_FieldMask struct {
	Paths []GetProbingTargetGroupRequest_FieldPath
}

func FullGetProbingTargetGroupRequest_FieldMask() *GetProbingTargetGroupRequest_FieldMask {
	res := &GetProbingTargetGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetProbingTargetGroupRequest_FieldTerminalPath{selector: GetProbingTargetGroupRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetProbingTargetGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetProbingTargetGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetProbingTargetGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetProbingTargetGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Subtract(other *GetProbingTargetGroupRequest_FieldMask) *GetProbingTargetGroupRequest_FieldMask {
	result := &GetProbingTargetGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetProbingTargetGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetProbingTargetGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetProbingTargetGroupRequest_FieldMask) FilterInputFields() *GetProbingTargetGroupRequest_FieldMask {
	result := &GetProbingTargetGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetProbingTargetGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetProbingTargetGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetProbingTargetGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetProbingTargetGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetProbingTargetGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) AppendPath(path GetProbingTargetGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetProbingTargetGroupRequest_FieldPath))
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) GetPaths() []GetProbingTargetGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetProbingTargetGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Set(target, source *GetProbingTargetGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetProbingTargetGroupRequest), source.(*GetProbingTargetGroupRequest))
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) Project(source *GetProbingTargetGroupRequest) *GetProbingTargetGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetProbingTargetGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetProbingTargetGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case GetProbingTargetGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetProbingTargetGroupRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetProbingTargetGroupRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetProbingTargetGroupRequest))
}

func (fieldMask *GetProbingTargetGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetProbingTargetGroupsRequest_FieldMask struct {
	Paths []BatchGetProbingTargetGroupsRequest_FieldPath
}

func FullBatchGetProbingTargetGroupsRequest_FieldMask() *BatchGetProbingTargetGroupsRequest_FieldMask {
	res := &BatchGetProbingTargetGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsRequest_FieldTerminalPath{selector: BatchGetProbingTargetGroupsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetProbingTargetGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetProbingTargetGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Subtract(other *BatchGetProbingTargetGroupsRequest_FieldMask) *BatchGetProbingTargetGroupsRequest_FieldMask {
	result := &BatchGetProbingTargetGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetProbingTargetGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetProbingTargetGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) FilterInputFields() *BatchGetProbingTargetGroupsRequest_FieldMask {
	result := &BatchGetProbingTargetGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetProbingTargetGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetProbingTargetGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetProbingTargetGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) AppendPath(path BatchGetProbingTargetGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetProbingTargetGroupsRequest_FieldPath))
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) GetPaths() []BatchGetProbingTargetGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetProbingTargetGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Set(target, source *BatchGetProbingTargetGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetProbingTargetGroupsRequest), source.(*BatchGetProbingTargetGroupsRequest))
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) Project(source *BatchGetProbingTargetGroupsRequest) *BatchGetProbingTargetGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetProbingTargetGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetProbingTargetGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetProbingTargetGroupsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetProbingTargetGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetProbingTargetGroupsRequest))
}

func (fieldMask *BatchGetProbingTargetGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetProbingTargetGroupsResponse_FieldMask struct {
	Paths []BatchGetProbingTargetGroupsResponse_FieldPath
}

func FullBatchGetProbingTargetGroupsResponse_FieldMask() *BatchGetProbingTargetGroupsResponse_FieldMask {
	res := &BatchGetProbingTargetGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	res.Paths = append(res.Paths, &BatchGetProbingTargetGroupsResponse_FieldTerminalPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetProbingTargetGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetProbingTargetGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Subtract(other *BatchGetProbingTargetGroupsResponse_FieldMask) *BatchGetProbingTargetGroupsResponse_FieldMask {
	result := &BatchGetProbingTargetGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}
	mySubMasks := map[BatchGetProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetProbingTargetGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetProbingTargetGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetProbingTargetGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
						mySubMasks[BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups] = probing_target_group.FullProbingTargetGroup_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetProbingTargetGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetProbingTargetGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetProbingTargetGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) FilterInputFields() *BatchGetProbingTargetGroupsResponse_FieldMask {
	result := &BatchGetProbingTargetGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			if _, ok := path.(*BatchGetProbingTargetGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetProbingTargetGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetProbingTargetGroupsResponse_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetProbingTargetGroupsResponse_FieldSubPath{selector: BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetProbingTargetGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetProbingTargetGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetProbingTargetGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) AppendPath(path BatchGetProbingTargetGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetProbingTargetGroupsResponse_FieldPath))
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) GetPaths() []BatchGetProbingTargetGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetProbingTargetGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Set(target, source *BatchGetProbingTargetGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetProbingTargetGroupsResponse), source.(*BatchGetProbingTargetGroupsResponse))
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) Project(source *BatchGetProbingTargetGroupsResponse) *BatchGetProbingTargetGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetProbingTargetGroupsResponse{}
	probingTargetGroupsMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeProbingTargetGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetProbingTargetGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				result.ProbingTargetGroups = source.ProbingTargetGroups
				wholeProbingTargetGroupsAccepted = true
			case BatchGetProbingTargetGroupsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetProbingTargetGroupsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				probingTargetGroupsMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			}
		}
	}
	if wholeProbingTargetGroupsAccepted == false && len(probingTargetGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbingTargetGroups() {
			result.ProbingTargetGroups = append(result.ProbingTargetGroups, probingTargetGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetProbingTargetGroupsResponse))
}

func (fieldMask *BatchGetProbingTargetGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListProbingTargetGroupsRequest_FieldMask struct {
	Paths []ListProbingTargetGroupsRequest_FieldPath
}

func FullListProbingTargetGroupsRequest_FieldMask() *ListProbingTargetGroupsRequest_FieldMask {
	res := &ListProbingTargetGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsRequest_FieldTerminalPath{selector: ListProbingTargetGroupsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListProbingTargetGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListProbingTargetGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListProbingTargetGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Subtract(other *ListProbingTargetGroupsRequest_FieldMask) *ListProbingTargetGroupsRequest_FieldMask {
	result := &ListProbingTargetGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListProbingTargetGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListProbingTargetGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) FilterInputFields() *ListProbingTargetGroupsRequest_FieldMask {
	result := &ListProbingTargetGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListProbingTargetGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListProbingTargetGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListProbingTargetGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListProbingTargetGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) AppendPath(path ListProbingTargetGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListProbingTargetGroupsRequest_FieldPath))
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) GetPaths() []ListProbingTargetGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListProbingTargetGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Set(target, source *ListProbingTargetGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListProbingTargetGroupsRequest), source.(*ListProbingTargetGroupsRequest))
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) Project(source *ListProbingTargetGroupsRequest) *ListProbingTargetGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListProbingTargetGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListProbingTargetGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListProbingTargetGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListProbingTargetGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListProbingTargetGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListProbingTargetGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListProbingTargetGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListProbingTargetGroupsRequest))
}

func (fieldMask *ListProbingTargetGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListProbingTargetGroupsResponse_FieldMask struct {
	Paths []ListProbingTargetGroupsResponse_FieldPath
}

func FullListProbingTargetGroupsResponse_FieldMask() *ListProbingTargetGroupsResponse_FieldMask {
	res := &ListProbingTargetGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListProbingTargetGroupsResponse_FieldTerminalPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListProbingTargetGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListProbingTargetGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListProbingTargetGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Subtract(other *ListProbingTargetGroupsResponse_FieldMask) *ListProbingTargetGroupsResponse_FieldMask {
	result := &ListProbingTargetGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}
	mySubMasks := map[ListProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListProbingTargetGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListProbingTargetGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListProbingTargetGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
						mySubMasks[ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups] = probing_target_group.FullProbingTargetGroup_FieldMask()
					}
				} else if tp, ok := path.(*ListProbingTargetGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListProbingTargetGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListProbingTargetGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) FilterInputFields() *ListProbingTargetGroupsResponse_FieldMask {
	result := &ListProbingTargetGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			if _, ok := path.(*ListProbingTargetGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListProbingTargetGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListProbingTargetGroupsResponse_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListProbingTargetGroupsResponse_FieldSubPath{selector: ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListProbingTargetGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListProbingTargetGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListProbingTargetGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListProbingTargetGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) AppendPath(path ListProbingTargetGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListProbingTargetGroupsResponse_FieldPath))
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) GetPaths() []ListProbingTargetGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListProbingTargetGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Set(target, source *ListProbingTargetGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListProbingTargetGroupsResponse), source.(*ListProbingTargetGroupsResponse))
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) Project(source *ListProbingTargetGroupsResponse) *ListProbingTargetGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListProbingTargetGroupsResponse{}
	probingTargetGroupsMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeProbingTargetGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListProbingTargetGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				result.ProbingTargetGroups = source.ProbingTargetGroups
				wholeProbingTargetGroupsAccepted = true
			case ListProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListProbingTargetGroupsResponse_FieldSubPath:
			switch tp.selector {
			case ListProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				probingTargetGroupsMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			}
		}
	}
	if wholeProbingTargetGroupsAccepted == false && len(probingTargetGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbingTargetGroups() {
			result.ProbingTargetGroups = append(result.ProbingTargetGroups, probingTargetGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListProbingTargetGroupsResponse))
}

func (fieldMask *ListProbingTargetGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbingTargetGroupRequest_FieldMask struct {
	Paths []WatchProbingTargetGroupRequest_FieldPath
}

func FullWatchProbingTargetGroupRequest_FieldMask() *WatchProbingTargetGroupRequest_FieldMask {
	res := &WatchProbingTargetGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupRequest_FieldTerminalPath{selector: WatchProbingTargetGroupRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbingTargetGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbingTargetGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbingTargetGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Subtract(other *WatchProbingTargetGroupRequest_FieldMask) *WatchProbingTargetGroupRequest_FieldMask {
	result := &WatchProbingTargetGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbingTargetGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbingTargetGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) FilterInputFields() *WatchProbingTargetGroupRequest_FieldMask {
	result := &WatchProbingTargetGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbingTargetGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbingTargetGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbingTargetGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbingTargetGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) AppendPath(path WatchProbingTargetGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbingTargetGroupRequest_FieldPath))
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) GetPaths() []WatchProbingTargetGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbingTargetGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Set(target, source *WatchProbingTargetGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbingTargetGroupRequest), source.(*WatchProbingTargetGroupRequest))
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) Project(source *WatchProbingTargetGroupRequest) *WatchProbingTargetGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbingTargetGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbingTargetGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchProbingTargetGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchProbingTargetGroupRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchProbingTargetGroupRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbingTargetGroupRequest))
}

func (fieldMask *WatchProbingTargetGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbingTargetGroupResponse_FieldMask struct {
	Paths []WatchProbingTargetGroupResponse_FieldPath
}

func FullWatchProbingTargetGroupResponse_FieldMask() *WatchProbingTargetGroupResponse_FieldMask {
	res := &WatchProbingTargetGroupResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbingTargetGroupResponse_FieldTerminalPath{selector: WatchProbingTargetGroupResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbingTargetGroupResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbingTargetGroupResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbingTargetGroupResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Subtract(other *WatchProbingTargetGroupResponse_FieldMask) *WatchProbingTargetGroupResponse_FieldMask {
	result := &WatchProbingTargetGroupResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbingTargetGroupResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbingTargetGroupResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) FilterInputFields() *WatchProbingTargetGroupResponse_FieldMask {
	result := &WatchProbingTargetGroupResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbingTargetGroupResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbingTargetGroupResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbingTargetGroupResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbingTargetGroupResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) AppendPath(path WatchProbingTargetGroupResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbingTargetGroupResponse_FieldPath))
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) GetPaths() []WatchProbingTargetGroupResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbingTargetGroupResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Set(target, source *WatchProbingTargetGroupResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbingTargetGroupResponse), source.(*WatchProbingTargetGroupResponse))
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) Project(source *WatchProbingTargetGroupResponse) *WatchProbingTargetGroupResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbingTargetGroupResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbingTargetGroupResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchProbingTargetGroupResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbingTargetGroupResponse))
}

func (fieldMask *WatchProbingTargetGroupResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbingTargetGroupsRequest_FieldMask struct {
	Paths []WatchProbingTargetGroupsRequest_FieldPath
}

func FullWatchProbingTargetGroupsRequest_FieldMask() *WatchProbingTargetGroupsRequest_FieldMask {
	res := &WatchProbingTargetGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsRequest_FieldTerminalPath{selector: WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbingTargetGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbingTargetGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbingTargetGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Subtract(other *WatchProbingTargetGroupsRequest_FieldMask) *WatchProbingTargetGroupsRequest_FieldMask {
	result := &WatchProbingTargetGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbingTargetGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbingTargetGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) FilterInputFields() *WatchProbingTargetGroupsRequest_FieldMask {
	result := &WatchProbingTargetGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbingTargetGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbingTargetGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbingTargetGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbingTargetGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) AppendPath(path WatchProbingTargetGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbingTargetGroupsRequest_FieldPath))
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) GetPaths() []WatchProbingTargetGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbingTargetGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Set(target, source *WatchProbingTargetGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbingTargetGroupsRequest), source.(*WatchProbingTargetGroupsRequest))
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) Project(source *WatchProbingTargetGroupsRequest) *WatchProbingTargetGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbingTargetGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbingTargetGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchProbingTargetGroupsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchProbingTargetGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchProbingTargetGroupsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchProbingTargetGroupsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchProbingTargetGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchProbingTargetGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchProbingTargetGroupsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbingTargetGroupsRequest))
}

func (fieldMask *WatchProbingTargetGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbingTargetGroupsResponse_FieldMask struct {
	Paths []WatchProbingTargetGroupsResponse_FieldPath
}

func FullWatchProbingTargetGroupsResponse_FieldMask() *WatchProbingTargetGroupsResponse_FieldMask {
	res := &WatchProbingTargetGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponse_FieldTerminalPath{selector: WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbingTargetGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbingTargetGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbingTargetGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Subtract(other *WatchProbingTargetGroupsResponse_FieldMask) *WatchProbingTargetGroupsResponse_FieldMask {
	result := &WatchProbingTargetGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange: &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange: &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbingTargetGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchProbingTargetGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchProbingTargetGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange] = FullWatchProbingTargetGroupsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchProbingTargetGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchProbingTargetGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbingTargetGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) FilterInputFields() *WatchProbingTargetGroupsResponse_FieldMask {
	result := &WatchProbingTargetGroupsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbingTargetGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbingTargetGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbingTargetGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbingTargetGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) AppendPath(path WatchProbingTargetGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbingTargetGroupsResponse_FieldPath))
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) GetPaths() []WatchProbingTargetGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbingTargetGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Set(target, source *WatchProbingTargetGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbingTargetGroupsResponse), source.(*WatchProbingTargetGroupsResponse))
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) Project(source *WatchProbingTargetGroupsResponse) *WatchProbingTargetGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbingTargetGroupsResponse{}
	pageTokenChangeMask := &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbingTargetGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroupChanges:
				result.ProbingTargetGroupChanges = source.ProbingTargetGroupChanges
			case WatchProbingTargetGroupsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchProbingTargetGroupsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchProbingTargetGroupsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchProbingTargetGroupsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchProbingTargetGroupsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchProbingTargetGroupsResponse_FieldSubPath:
			switch tp.selector {
			case WatchProbingTargetGroupsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbingTargetGroupsResponse))
}

func (fieldMask *WatchProbingTargetGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchProbingTargetGroupsResponsePageTokenChange_FieldPath
}

func FullWatchProbingTargetGroupsResponse_PageTokenChange_FieldMask() *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask {
	res := &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Subtract(other *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask {
	result := &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask {
	result := &WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbingTargetGroupsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) AppendPath(path WatchProbingTargetGroupsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbingTargetGroupsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) GetPaths() []WatchProbingTargetGroupsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbingTargetGroupsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Set(target, source *WatchProbingTargetGroupsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbingTargetGroupsResponse_PageTokenChange), source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) Project(source *WatchProbingTargetGroupsResponse_PageTokenChange) *WatchProbingTargetGroupsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbingTargetGroupsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbingTargetGroupsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchProbingTargetGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbingTargetGroupsResponse_PageTokenChange))
}

func (fieldMask *WatchProbingTargetGroupsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateProbingTargetGroupRequest_FieldMask struct {
	Paths []CreateProbingTargetGroupRequest_FieldPath
}

func FullCreateProbingTargetGroupRequest_FieldMask() *CreateProbingTargetGroupRequest_FieldMask {
	res := &CreateProbingTargetGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateProbingTargetGroupRequest_FieldTerminalPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup})
	return res
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateProbingTargetGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateProbingTargetGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateProbingTargetGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Subtract(other *CreateProbingTargetGroupRequest_FieldMask) *CreateProbingTargetGroupRequest_FieldMask {
	result := &CreateProbingTargetGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateProbingTargetGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}
	mySubMasks := map[CreateProbingTargetGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateProbingTargetGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateProbingTargetGroupRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateProbingTargetGroupRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
						mySubMasks[CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup] = probing_target_group.FullProbingTargetGroup_FieldMask()
					}
				} else if tp, ok := path.(*CreateProbingTargetGroupRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateProbingTargetGroupRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateProbingTargetGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) FilterInputFields() *CreateProbingTargetGroupRequest_FieldMask {
	result := &CreateProbingTargetGroupRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			if _, ok := path.(*CreateProbingTargetGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateProbingTargetGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateProbingTargetGroupRequest_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateProbingTargetGroupRequest_FieldSubPath{selector: CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateProbingTargetGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateProbingTargetGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateProbingTargetGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateProbingTargetGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) AppendPath(path CreateProbingTargetGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateProbingTargetGroupRequest_FieldPath))
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) GetPaths() []CreateProbingTargetGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateProbingTargetGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Set(target, source *CreateProbingTargetGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateProbingTargetGroupRequest), source.(*CreateProbingTargetGroupRequest))
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) Project(source *CreateProbingTargetGroupRequest) *CreateProbingTargetGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateProbingTargetGroupRequest{}
	probingTargetGroupMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeProbingTargetGroupAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateProbingTargetGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateProbingTargetGroupRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
				result.ProbingTargetGroup = source.ProbingTargetGroup
				wholeProbingTargetGroupAccepted = true
			}
		case *CreateProbingTargetGroupRequest_FieldSubPath:
			switch tp.selector {
			case CreateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
				probingTargetGroupMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			}
		}
	}
	if wholeProbingTargetGroupAccepted == false && len(probingTargetGroupMask.Paths) > 0 {
		result.ProbingTargetGroup = probingTargetGroupMask.Project(source.GetProbingTargetGroup())
	}
	return result
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateProbingTargetGroupRequest))
}

func (fieldMask *CreateProbingTargetGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateProbingTargetGroupRequest_FieldMask struct {
	Paths []UpdateProbingTargetGroupRequest_FieldPath
}

func FullUpdateProbingTargetGroupRequest_FieldMask() *UpdateProbingTargetGroupRequest_FieldMask {
	res := &UpdateProbingTargetGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup})
	res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequest_FieldTerminalPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateProbingTargetGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateProbingTargetGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateProbingTargetGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Subtract(other *UpdateProbingTargetGroupRequest_FieldMask) *UpdateProbingTargetGroupRequest_FieldMask {
	result := &UpdateProbingTargetGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateProbingTargetGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup: &probing_target_group.ProbingTargetGroup_FieldMask{},
		UpdateProbingTargetGroupRequest_FieldPathSelectorCas:                &UpdateProbingTargetGroupRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateProbingTargetGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup: &probing_target_group.ProbingTargetGroup_FieldMask{},
		UpdateProbingTargetGroupRequest_FieldPathSelectorCas:                &UpdateProbingTargetGroupRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateProbingTargetGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateProbingTargetGroupRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateProbingTargetGroupRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
						mySubMasks[UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup] = probing_target_group.FullProbingTargetGroup_FieldMask()
					case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
						mySubMasks[UpdateProbingTargetGroupRequest_FieldPathSelectorCas] = FullUpdateProbingTargetGroupRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateProbingTargetGroupRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateProbingTargetGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) FilterInputFields() *UpdateProbingTargetGroupRequest_FieldMask {
	result := &UpdateProbingTargetGroupRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
			if _, ok := path.(*UpdateProbingTargetGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbingTargetGroupRequest_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup, subPath: allowedPath})
				}
			}
		case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateProbingTargetGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateProbingTargetGroupRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbingTargetGroupRequest_FieldSubPath); ok {
				selectedMask := &UpdateProbingTargetGroupRequest_CAS_FieldMask{
					Paths: []UpdateProbingTargetGroupRequestCAS_FieldPath{sub.subPath.(UpdateProbingTargetGroupRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequest_FieldSubPath{selector: UpdateProbingTargetGroupRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateProbingTargetGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateProbingTargetGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateProbingTargetGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateProbingTargetGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) AppendPath(path UpdateProbingTargetGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateProbingTargetGroupRequest_FieldPath))
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) GetPaths() []UpdateProbingTargetGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateProbingTargetGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Set(target, source *UpdateProbingTargetGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateProbingTargetGroupRequest), source.(*UpdateProbingTargetGroupRequest))
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) Project(source *UpdateProbingTargetGroupRequest) *UpdateProbingTargetGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateProbingTargetGroupRequest{}
	probingTargetGroupMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeProbingTargetGroupAccepted := false
	casMask := &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateProbingTargetGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
				result.ProbingTargetGroup = source.ProbingTargetGroup
				wholeProbingTargetGroupAccepted = true
			case UpdateProbingTargetGroupRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateProbingTargetGroupRequest_FieldSubPath:
			switch tp.selector {
			case UpdateProbingTargetGroupRequest_FieldPathSelectorProbingTargetGroup:
				probingTargetGroupMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			case UpdateProbingTargetGroupRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateProbingTargetGroupRequestCAS_FieldPath))
			}
		}
	}
	if wholeProbingTargetGroupAccepted == false && len(probingTargetGroupMask.Paths) > 0 {
		result.ProbingTargetGroup = probingTargetGroupMask.Project(source.GetProbingTargetGroup())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateProbingTargetGroupRequest))
}

func (fieldMask *UpdateProbingTargetGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateProbingTargetGroupRequest_CAS_FieldMask struct {
	Paths []UpdateProbingTargetGroupRequestCAS_FieldPath
}

func FullUpdateProbingTargetGroupRequest_CAS_FieldMask() *UpdateProbingTargetGroupRequest_CAS_FieldMask {
	res := &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateProbingTargetGroupRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateProbingTargetGroupRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateProbingTargetGroupRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Subtract(other *UpdateProbingTargetGroupRequest_CAS_FieldMask) *UpdateProbingTargetGroupRequest_CAS_FieldMask {
	result := &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateProbingTargetGroupRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}
	mySubMasks := map[UpdateProbingTargetGroupRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateProbingTargetGroupRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateProbingTargetGroupRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState] = probing_target_group.FullProbingTargetGroup_FieldMask()
					}
				} else if tp, ok := path.(*UpdateProbingTargetGroupRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateProbingTargetGroupRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) FilterInputFields() *UpdateProbingTargetGroupRequest_CAS_FieldMask {
	result := &UpdateProbingTargetGroupRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateProbingTargetGroupRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbingTargetGroupRequestCAS_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbingTargetGroupRequestCAS_FieldSubPath{selector: UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateProbingTargetGroupRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateProbingTargetGroupRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateProbingTargetGroupRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) AppendPath(path UpdateProbingTargetGroupRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateProbingTargetGroupRequestCAS_FieldPath))
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) GetPaths() []UpdateProbingTargetGroupRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateProbingTargetGroupRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Set(target, source *UpdateProbingTargetGroupRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateProbingTargetGroupRequest_CAS), source.(*UpdateProbingTargetGroupRequest_CAS))
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) Project(source *UpdateProbingTargetGroupRequest_CAS) *UpdateProbingTargetGroupRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateProbingTargetGroupRequest_CAS{}
	conditionalStateMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateProbingTargetGroupRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateProbingTargetGroupRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateProbingTargetGroupRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateProbingTargetGroupRequest_CAS))
}

func (fieldMask *UpdateProbingTargetGroupRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteProbingTargetGroupRequest_FieldMask struct {
	Paths []DeleteProbingTargetGroupRequest_FieldPath
}

func FullDeleteProbingTargetGroupRequest_FieldMask() *DeleteProbingTargetGroupRequest_FieldMask {
	res := &DeleteProbingTargetGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteProbingTargetGroupRequest_FieldTerminalPath{selector: DeleteProbingTargetGroupRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteProbingTargetGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteProbingTargetGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteProbingTargetGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Subtract(other *DeleteProbingTargetGroupRequest_FieldMask) *DeleteProbingTargetGroupRequest_FieldMask {
	result := &DeleteProbingTargetGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteProbingTargetGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteProbingTargetGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) FilterInputFields() *DeleteProbingTargetGroupRequest_FieldMask {
	result := &DeleteProbingTargetGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteProbingTargetGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteProbingTargetGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteProbingTargetGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteProbingTargetGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) AppendPath(path DeleteProbingTargetGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteProbingTargetGroupRequest_FieldPath))
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) GetPaths() []DeleteProbingTargetGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteProbingTargetGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Set(target, source *DeleteProbingTargetGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteProbingTargetGroupRequest), source.(*DeleteProbingTargetGroupRequest))
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) Project(source *DeleteProbingTargetGroupRequest) *DeleteProbingTargetGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteProbingTargetGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteProbingTargetGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteProbingTargetGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteProbingTargetGroupRequest))
}

func (fieldMask *DeleteProbingTargetGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SearchProbingTargetGroupsRequest_FieldMask struct {
	Paths []SearchProbingTargetGroupsRequest_FieldPath
}

func FullSearchProbingTargetGroupsRequest_FieldMask() *SearchProbingTargetGroupsRequest_FieldMask {
	res := &SearchProbingTargetGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsRequest_FieldTerminalPath{selector: SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase})
	return res
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSearchProbingTargetGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SearchProbingTargetGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSearchProbingTargetGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Subtract(other *SearchProbingTargetGroupsRequest_FieldMask) *SearchProbingTargetGroupsRequest_FieldMask {
	result := &SearchProbingTargetGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SearchProbingTargetGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SearchProbingTargetGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) FilterInputFields() *SearchProbingTargetGroupsRequest_FieldMask {
	result := &SearchProbingTargetGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SearchProbingTargetGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSearchProbingTargetGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SearchProbingTargetGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SearchProbingTargetGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) AppendPath(path SearchProbingTargetGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SearchProbingTargetGroupsRequest_FieldPath))
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) GetPaths() []SearchProbingTargetGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSearchProbingTargetGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Set(target, source *SearchProbingTargetGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SearchProbingTargetGroupsRequest), source.(*SearchProbingTargetGroupsRequest))
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) Project(source *SearchProbingTargetGroupsRequest) *SearchProbingTargetGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SearchProbingTargetGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SearchProbingTargetGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case SearchProbingTargetGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case SearchProbingTargetGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case SearchProbingTargetGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case SearchProbingTargetGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case SearchProbingTargetGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case SearchProbingTargetGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case SearchProbingTargetGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			case SearchProbingTargetGroupsRequest_FieldPathSelectorPhrase:
				result.Phrase = source.Phrase
			}
		}
	}
	return result
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SearchProbingTargetGroupsRequest))
}

func (fieldMask *SearchProbingTargetGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SearchProbingTargetGroupsResponse_FieldMask struct {
	Paths []SearchProbingTargetGroupsResponse_FieldPath
}

func FullSearchProbingTargetGroupsResponse_FieldMask() *SearchProbingTargetGroupsResponse_FieldMask {
	res := &SearchProbingTargetGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &SearchProbingTargetGroupsResponse_FieldTerminalPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSearchProbingTargetGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SearchProbingTargetGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSearchProbingTargetGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Subtract(other *SearchProbingTargetGroupsResponse_FieldMask) *SearchProbingTargetGroupsResponse_FieldMask {
	result := &SearchProbingTargetGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[SearchProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}
	mySubMasks := map[SearchProbingTargetGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups: &probing_target_group.ProbingTargetGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SearchProbingTargetGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *SearchProbingTargetGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*SearchProbingTargetGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
						mySubMasks[SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups] = probing_target_group.FullProbingTargetGroup_FieldMask()
					}
				} else if tp, ok := path.(*SearchProbingTargetGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &SearchProbingTargetGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SearchProbingTargetGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) FilterInputFields() *SearchProbingTargetGroupsResponse_FieldMask {
	result := &SearchProbingTargetGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
			if _, ok := path.(*SearchProbingTargetGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probing_target_group.FullProbingTargetGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SearchProbingTargetGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*SearchProbingTargetGroupsResponse_FieldSubPath); ok {
				selectedMask := &probing_target_group.ProbingTargetGroup_FieldMask{
					Paths: []probing_target_group.ProbingTargetGroup_FieldPath{sub.subPath.(probing_target_group.ProbingTargetGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SearchProbingTargetGroupsResponse_FieldSubPath{selector: SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SearchProbingTargetGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSearchProbingTargetGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SearchProbingTargetGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SearchProbingTargetGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) AppendPath(path SearchProbingTargetGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SearchProbingTargetGroupsResponse_FieldPath))
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) GetPaths() []SearchProbingTargetGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSearchProbingTargetGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Set(target, source *SearchProbingTargetGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SearchProbingTargetGroupsResponse), source.(*SearchProbingTargetGroupsResponse))
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) Project(source *SearchProbingTargetGroupsResponse) *SearchProbingTargetGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SearchProbingTargetGroupsResponse{}
	probingTargetGroupsMask := &probing_target_group.ProbingTargetGroup_FieldMask{}
	wholeProbingTargetGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SearchProbingTargetGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				result.ProbingTargetGroups = source.ProbingTargetGroups
				wholeProbingTargetGroupsAccepted = true
			case SearchProbingTargetGroupsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case SearchProbingTargetGroupsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case SearchProbingTargetGroupsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case SearchProbingTargetGroupsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *SearchProbingTargetGroupsResponse_FieldSubPath:
			switch tp.selector {
			case SearchProbingTargetGroupsResponse_FieldPathSelectorProbingTargetGroups:
				probingTargetGroupsMask.AppendPath(tp.subPath.(probing_target_group.ProbingTargetGroup_FieldPath))
			}
		}
	}
	if wholeProbingTargetGroupsAccepted == false && len(probingTargetGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbingTargetGroups() {
			result.ProbingTargetGroups = append(result.ProbingTargetGroups, probingTargetGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SearchProbingTargetGroupsResponse))
}

func (fieldMask *SearchProbingTargetGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
