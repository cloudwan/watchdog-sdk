// Code generated by protoc-gen-goten-client
// API: AgentSoftwareVersionService
// DO NOT EDIT!!!

package agent_software_version_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	agent_software_version "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/agent_software_version"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &agent_software_version.AgentSoftwareVersion{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentSoftwareVersionServiceClient is the client API for AgentSoftwareVersionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentSoftwareVersionServiceClient interface {
	GetAgentSoftwareVersion(ctx context.Context, in *GetAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error)
	BatchGetAgentSoftwareVersions(ctx context.Context, in *BatchGetAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (*BatchGetAgentSoftwareVersionsResponse, error)
	ListAgentSoftwareVersions(ctx context.Context, in *ListAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (*ListAgentSoftwareVersionsResponse, error)
	WatchAgentSoftwareVersion(ctx context.Context, in *WatchAgentSoftwareVersionRequest, opts ...grpc.CallOption) (WatchAgentSoftwareVersionClientStream, error)
	WatchAgentSoftwareVersions(ctx context.Context, in *WatchAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (WatchAgentSoftwareVersionsClientStream, error)
	CreateAgentSoftwareVersion(ctx context.Context, in *CreateAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error)
	UpdateAgentSoftwareVersion(ctx context.Context, in *UpdateAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error)
	DeleteAgentSoftwareVersion(ctx context.Context, in *DeleteAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAgentSoftwareVersionServiceClient(cc grpc.ClientConnInterface) AgentSoftwareVersionServiceClient {
	return &client{cc}
}

func (c *client) GetAgentSoftwareVersion(ctx context.Context, in *GetAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error) {
	out := new(agent_software_version.AgentSoftwareVersion)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/GetAgentSoftwareVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAgentSoftwareVersions(ctx context.Context, in *BatchGetAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (*BatchGetAgentSoftwareVersionsResponse, error) {
	out := new(BatchGetAgentSoftwareVersionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/BatchGetAgentSoftwareVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgentSoftwareVersions(ctx context.Context, in *ListAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (*ListAgentSoftwareVersionsResponse, error) {
	out := new(ListAgentSoftwareVersionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/ListAgentSoftwareVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAgentSoftwareVersion(ctx context.Context, in *WatchAgentSoftwareVersionRequest, opts ...grpc.CallOption) (WatchAgentSoftwareVersionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAgentSoftwareVersion",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/WatchAgentSoftwareVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAgentSoftwareVersionWatchAgentSoftwareVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAgentSoftwareVersionClientStream interface {
	Recv() (*WatchAgentSoftwareVersionResponse, error)
	grpc.ClientStream
}

type watchAgentSoftwareVersionWatchAgentSoftwareVersionClient struct {
	grpc.ClientStream
}

func (x *watchAgentSoftwareVersionWatchAgentSoftwareVersionClient) Recv() (*WatchAgentSoftwareVersionResponse, error) {
	m := new(WatchAgentSoftwareVersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAgentSoftwareVersions(ctx context.Context, in *WatchAgentSoftwareVersionsRequest, opts ...grpc.CallOption) (WatchAgentSoftwareVersionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAgentSoftwareVersions",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/WatchAgentSoftwareVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAgentSoftwareVersionsWatchAgentSoftwareVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAgentSoftwareVersionsClientStream interface {
	Recv() (*WatchAgentSoftwareVersionsResponse, error)
	grpc.ClientStream
}

type watchAgentSoftwareVersionsWatchAgentSoftwareVersionsClient struct {
	grpc.ClientStream
}

func (x *watchAgentSoftwareVersionsWatchAgentSoftwareVersionsClient) Recv() (*WatchAgentSoftwareVersionsResponse, error) {
	m := new(WatchAgentSoftwareVersionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAgentSoftwareVersion(ctx context.Context, in *CreateAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error) {
	out := new(agent_software_version.AgentSoftwareVersion)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/CreateAgentSoftwareVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAgentSoftwareVersion(ctx context.Context, in *UpdateAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*agent_software_version.AgentSoftwareVersion, error) {
	out := new(agent_software_version.AgentSoftwareVersion)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/UpdateAgentSoftwareVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAgentSoftwareVersion(ctx context.Context, in *DeleteAgentSoftwareVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/DeleteAgentSoftwareVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
