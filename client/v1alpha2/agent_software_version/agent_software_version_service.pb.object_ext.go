// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/agent_software_version_service.proto
// DO NOT EDIT!!!

package agent_software_version_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	agent_software_version "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/agent_software_version"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &agent_software_version.AgentSoftwareVersion{}
)

func (o *GetAgentSoftwareVersionRequest) GotenObjectExt() {}

func (o *GetAgentSoftwareVersionRequest) MakeFullFieldMask() *GetAgentSoftwareVersionRequest_FieldMask {
	return FullGetAgentSoftwareVersionRequest_FieldMask()
}

func (o *GetAgentSoftwareVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAgentSoftwareVersionRequest_FieldMask()
}

func (o *GetAgentSoftwareVersionRequest) MakeDiffFieldMask(other *GetAgentSoftwareVersionRequest) *GetAgentSoftwareVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAgentSoftwareVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAgentSoftwareVersionRequest_FieldMask()
	}

	res := &GetAgentSoftwareVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAgentSoftwareVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAgentSoftwareVersionRequest))
}

func (o *GetAgentSoftwareVersionRequest) Clone() *GetAgentSoftwareVersionRequest {
	if o == nil {
		return nil
	}
	result := &GetAgentSoftwareVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent_software_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAgentSoftwareVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAgentSoftwareVersionRequest) Merge(source *GetAgentSoftwareVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent_software_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAgentSoftwareVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAgentSoftwareVersionRequest))
}

func (o *BatchGetAgentSoftwareVersionsRequest) GotenObjectExt() {}

func (o *BatchGetAgentSoftwareVersionsRequest) MakeFullFieldMask() *BatchGetAgentSoftwareVersionsRequest_FieldMask {
	return FullBatchGetAgentSoftwareVersionsRequest_FieldMask()
}

func (o *BatchGetAgentSoftwareVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAgentSoftwareVersionsRequest_FieldMask()
}

func (o *BatchGetAgentSoftwareVersionsRequest) MakeDiffFieldMask(other *BatchGetAgentSoftwareVersionsRequest) *BatchGetAgentSoftwareVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAgentSoftwareVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAgentSoftwareVersionsRequest_FieldMask()
	}

	res := &BatchGetAgentSoftwareVersionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAgentSoftwareVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAgentSoftwareVersionsRequest))
}

func (o *BatchGetAgentSoftwareVersionsRequest) Clone() *BatchGetAgentSoftwareVersionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAgentSoftwareVersionsRequest{}
	result.Names = make([]*agent_software_version.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &agent_software_version.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAgentSoftwareVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAgentSoftwareVersionsRequest) Merge(source *BatchGetAgentSoftwareVersionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent_software_version.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &agent_software_version.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAgentSoftwareVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAgentSoftwareVersionsRequest))
}

func (o *BatchGetAgentSoftwareVersionsResponse) GotenObjectExt() {}

func (o *BatchGetAgentSoftwareVersionsResponse) MakeFullFieldMask() *BatchGetAgentSoftwareVersionsResponse_FieldMask {
	return FullBatchGetAgentSoftwareVersionsResponse_FieldMask()
}

func (o *BatchGetAgentSoftwareVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAgentSoftwareVersionsResponse_FieldMask()
}

func (o *BatchGetAgentSoftwareVersionsResponse) MakeDiffFieldMask(other *BatchGetAgentSoftwareVersionsResponse) *BatchGetAgentSoftwareVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAgentSoftwareVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAgentSoftwareVersionsResponse_FieldMask()
	}

	res := &BatchGetAgentSoftwareVersionsResponse_FieldMask{}

	if len(o.GetAgentSoftwareVersions()) == len(other.GetAgentSoftwareVersions()) {
		for i, lValue := range o.GetAgentSoftwareVersions() {
			rValue := other.GetAgentSoftwareVersions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAgentSoftwareVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAgentSoftwareVersionsResponse))
}

func (o *BatchGetAgentSoftwareVersionsResponse) Clone() *BatchGetAgentSoftwareVersionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAgentSoftwareVersionsResponse{}
	result.AgentSoftwareVersions = make([]*agent_software_version.AgentSoftwareVersion, len(o.AgentSoftwareVersions))
	for i, sourceValue := range o.AgentSoftwareVersions {
		result.AgentSoftwareVersions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*agent_software_version.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &agent_software_version.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAgentSoftwareVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAgentSoftwareVersionsResponse) Merge(source *BatchGetAgentSoftwareVersionsResponse) {
	for _, sourceValue := range source.GetAgentSoftwareVersions() {
		exists := false
		for _, currentValue := range o.AgentSoftwareVersions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent_software_version.AgentSoftwareVersion
			if sourceValue != nil {
				newDstElement = new(agent_software_version.AgentSoftwareVersion)
				newDstElement.Merge(sourceValue)
			}
			o.AgentSoftwareVersions = append(o.AgentSoftwareVersions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent_software_version.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &agent_software_version.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAgentSoftwareVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAgentSoftwareVersionsResponse))
}

func (o *ListAgentSoftwareVersionsRequest) GotenObjectExt() {}

func (o *ListAgentSoftwareVersionsRequest) MakeFullFieldMask() *ListAgentSoftwareVersionsRequest_FieldMask {
	return FullListAgentSoftwareVersionsRequest_FieldMask()
}

func (o *ListAgentSoftwareVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAgentSoftwareVersionsRequest_FieldMask()
}

func (o *ListAgentSoftwareVersionsRequest) MakeDiffFieldMask(other *ListAgentSoftwareVersionsRequest) *ListAgentSoftwareVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAgentSoftwareVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAgentSoftwareVersionsRequest_FieldMask()
	}

	res := &ListAgentSoftwareVersionsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListAgentSoftwareVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAgentSoftwareVersionsRequest))
}

func (o *ListAgentSoftwareVersionsRequest) Clone() *ListAgentSoftwareVersionsRequest {
	if o == nil {
		return nil
	}
	result := &ListAgentSoftwareVersionsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &agent_software_version.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &agent_software_version.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &agent_software_version.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListAgentSoftwareVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAgentSoftwareVersionsRequest) Merge(source *ListAgentSoftwareVersionsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &agent_software_version.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &agent_software_version.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &agent_software_version.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListAgentSoftwareVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAgentSoftwareVersionsRequest))
}

func (o *ListAgentSoftwareVersionsResponse) GotenObjectExt() {}

func (o *ListAgentSoftwareVersionsResponse) MakeFullFieldMask() *ListAgentSoftwareVersionsResponse_FieldMask {
	return FullListAgentSoftwareVersionsResponse_FieldMask()
}

func (o *ListAgentSoftwareVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAgentSoftwareVersionsResponse_FieldMask()
}

func (o *ListAgentSoftwareVersionsResponse) MakeDiffFieldMask(other *ListAgentSoftwareVersionsResponse) *ListAgentSoftwareVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAgentSoftwareVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAgentSoftwareVersionsResponse_FieldMask()
	}

	res := &ListAgentSoftwareVersionsResponse_FieldMask{}

	if len(o.GetAgentSoftwareVersions()) == len(other.GetAgentSoftwareVersions()) {
		for i, lValue := range o.GetAgentSoftwareVersions() {
			rValue := other.GetAgentSoftwareVersions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListAgentSoftwareVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAgentSoftwareVersionsResponse))
}

func (o *ListAgentSoftwareVersionsResponse) Clone() *ListAgentSoftwareVersionsResponse {
	if o == nil {
		return nil
	}
	result := &ListAgentSoftwareVersionsResponse{}
	result.AgentSoftwareVersions = make([]*agent_software_version.AgentSoftwareVersion, len(o.AgentSoftwareVersions))
	for i, sourceValue := range o.AgentSoftwareVersions {
		result.AgentSoftwareVersions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &agent_software_version.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &agent_software_version.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListAgentSoftwareVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAgentSoftwareVersionsResponse) Merge(source *ListAgentSoftwareVersionsResponse) {
	for _, sourceValue := range source.GetAgentSoftwareVersions() {
		exists := false
		for _, currentValue := range o.AgentSoftwareVersions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent_software_version.AgentSoftwareVersion
			if sourceValue != nil {
				newDstElement = new(agent_software_version.AgentSoftwareVersion)
				newDstElement.Merge(sourceValue)
			}
			o.AgentSoftwareVersions = append(o.AgentSoftwareVersions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &agent_software_version.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &agent_software_version.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListAgentSoftwareVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAgentSoftwareVersionsResponse))
}

func (o *WatchAgentSoftwareVersionRequest) GotenObjectExt() {}

func (o *WatchAgentSoftwareVersionRequest) MakeFullFieldMask() *WatchAgentSoftwareVersionRequest_FieldMask {
	return FullWatchAgentSoftwareVersionRequest_FieldMask()
}

func (o *WatchAgentSoftwareVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentSoftwareVersionRequest_FieldMask()
}

func (o *WatchAgentSoftwareVersionRequest) MakeDiffFieldMask(other *WatchAgentSoftwareVersionRequest) *WatchAgentSoftwareVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentSoftwareVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentSoftwareVersionRequest_FieldMask()
	}

	res := &WatchAgentSoftwareVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAgentSoftwareVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentSoftwareVersionRequest))
}

func (o *WatchAgentSoftwareVersionRequest) Clone() *WatchAgentSoftwareVersionRequest {
	if o == nil {
		return nil
	}
	result := &WatchAgentSoftwareVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent_software_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAgentSoftwareVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentSoftwareVersionRequest) Merge(source *WatchAgentSoftwareVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent_software_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAgentSoftwareVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentSoftwareVersionRequest))
}

func (o *WatchAgentSoftwareVersionResponse) GotenObjectExt() {}

func (o *WatchAgentSoftwareVersionResponse) MakeFullFieldMask() *WatchAgentSoftwareVersionResponse_FieldMask {
	return FullWatchAgentSoftwareVersionResponse_FieldMask()
}

func (o *WatchAgentSoftwareVersionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentSoftwareVersionResponse_FieldMask()
}

func (o *WatchAgentSoftwareVersionResponse) MakeDiffFieldMask(other *WatchAgentSoftwareVersionResponse) *WatchAgentSoftwareVersionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentSoftwareVersionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentSoftwareVersionResponse_FieldMask()
	}

	res := &WatchAgentSoftwareVersionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAgentSoftwareVersionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentSoftwareVersionResponse))
}

func (o *WatchAgentSoftwareVersionResponse) Clone() *WatchAgentSoftwareVersionResponse {
	if o == nil {
		return nil
	}
	result := &WatchAgentSoftwareVersionResponse{}
	result.Change = proto.Clone(o.Change).(*agent_software_version.AgentSoftwareVersionChange)
	return result
}

func (o *WatchAgentSoftwareVersionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentSoftwareVersionResponse) Merge(source *WatchAgentSoftwareVersionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(agent_software_version.AgentSoftwareVersionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAgentSoftwareVersionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentSoftwareVersionResponse))
}

func (o *WatchAgentSoftwareVersionsRequest) GotenObjectExt() {}

func (o *WatchAgentSoftwareVersionsRequest) MakeFullFieldMask() *WatchAgentSoftwareVersionsRequest_FieldMask {
	return FullWatchAgentSoftwareVersionsRequest_FieldMask()
}

func (o *WatchAgentSoftwareVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentSoftwareVersionsRequest_FieldMask()
}

func (o *WatchAgentSoftwareVersionsRequest) MakeDiffFieldMask(other *WatchAgentSoftwareVersionsRequest) *WatchAgentSoftwareVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentSoftwareVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentSoftwareVersionsRequest_FieldMask()
	}

	res := &WatchAgentSoftwareVersionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAgentSoftwareVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentSoftwareVersionsRequest))
}

func (o *WatchAgentSoftwareVersionsRequest) Clone() *WatchAgentSoftwareVersionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAgentSoftwareVersionsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &agent_software_version.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &agent_software_version.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &agent_software_version.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAgentSoftwareVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentSoftwareVersionsRequest) Merge(source *WatchAgentSoftwareVersionsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &agent_software_version.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &agent_software_version.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &agent_software_version.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAgentSoftwareVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentSoftwareVersionsRequest))
}

func (o *WatchAgentSoftwareVersionsResponse) GotenObjectExt() {}

func (o *WatchAgentSoftwareVersionsResponse) MakeFullFieldMask() *WatchAgentSoftwareVersionsResponse_FieldMask {
	return FullWatchAgentSoftwareVersionsResponse_FieldMask()
}

func (o *WatchAgentSoftwareVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentSoftwareVersionsResponse_FieldMask()
}

func (o *WatchAgentSoftwareVersionsResponse) MakeDiffFieldMask(other *WatchAgentSoftwareVersionsResponse) *WatchAgentSoftwareVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentSoftwareVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentSoftwareVersionsResponse_FieldMask()
	}

	res := &WatchAgentSoftwareVersionsResponse_FieldMask{}

	if len(o.GetAgentSoftwareVersionChanges()) == len(other.GetAgentSoftwareVersionChanges()) {
		for i, lValue := range o.GetAgentSoftwareVersionChanges() {
			rValue := other.GetAgentSoftwareVersionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldSubPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAgentSoftwareVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentSoftwareVersionsResponse))
}

func (o *WatchAgentSoftwareVersionsResponse) Clone() *WatchAgentSoftwareVersionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAgentSoftwareVersionsResponse{}
	result.AgentSoftwareVersionChanges = make([]*agent_software_version.AgentSoftwareVersionChange, len(o.AgentSoftwareVersionChanges))
	for i, sourceValue := range o.AgentSoftwareVersionChanges {
		result.AgentSoftwareVersionChanges[i] = proto.Clone(sourceValue).(*agent_software_version.AgentSoftwareVersionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAgentSoftwareVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentSoftwareVersionsResponse) Merge(source *WatchAgentSoftwareVersionsResponse) {
	for _, sourceValue := range source.GetAgentSoftwareVersionChanges() {
		exists := false
		for _, currentValue := range o.AgentSoftwareVersionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *agent_software_version.AgentSoftwareVersionChange
			if sourceValue != nil {
				newDstElement = new(agent_software_version.AgentSoftwareVersionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AgentSoftwareVersionChanges = append(o.AgentSoftwareVersionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAgentSoftwareVersionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAgentSoftwareVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentSoftwareVersionsResponse))
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) MakeFullFieldMask() *WatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask {
	return FullWatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAgentSoftwareVersionsResponse_PageTokenChange) *WatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAgentSoftwareVersionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) Clone() *WatchAgentSoftwareVersionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAgentSoftwareVersionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &agent_software_version.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &agent_software_version.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) Merge(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &agent_software_version.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &agent_software_version.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAgentSoftwareVersionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

func (o *CreateAgentSoftwareVersionRequest) GotenObjectExt() {}

func (o *CreateAgentSoftwareVersionRequest) MakeFullFieldMask() *CreateAgentSoftwareVersionRequest_FieldMask {
	return FullCreateAgentSoftwareVersionRequest_FieldMask()
}

func (o *CreateAgentSoftwareVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAgentSoftwareVersionRequest_FieldMask()
}

func (o *CreateAgentSoftwareVersionRequest) MakeDiffFieldMask(other *CreateAgentSoftwareVersionRequest) *CreateAgentSoftwareVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAgentSoftwareVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAgentSoftwareVersionRequest_FieldMask()
	}

	res := &CreateAgentSoftwareVersionRequest_FieldMask{}
	{
		subMask := o.GetAgentSoftwareVersion().MakeDiffFieldMask(other.GetAgentSoftwareVersion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAgentSoftwareVersionRequest_FieldTerminalPath{selector: CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAgentSoftwareVersionRequest_FieldSubPath{selector: CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAgentSoftwareVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAgentSoftwareVersionRequest))
}

func (o *CreateAgentSoftwareVersionRequest) Clone() *CreateAgentSoftwareVersionRequest {
	if o == nil {
		return nil
	}
	result := &CreateAgentSoftwareVersionRequest{}
	result.AgentSoftwareVersion = o.AgentSoftwareVersion.Clone()
	return result
}

func (o *CreateAgentSoftwareVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAgentSoftwareVersionRequest) Merge(source *CreateAgentSoftwareVersionRequest) {
	if source.GetAgentSoftwareVersion() != nil {
		if o.AgentSoftwareVersion == nil {
			o.AgentSoftwareVersion = new(agent_software_version.AgentSoftwareVersion)
		}
		o.AgentSoftwareVersion.Merge(source.GetAgentSoftwareVersion())
	}
}

func (o *CreateAgentSoftwareVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAgentSoftwareVersionRequest))
}

func (o *UpdateAgentSoftwareVersionRequest) GotenObjectExt() {}

func (o *UpdateAgentSoftwareVersionRequest) MakeFullFieldMask() *UpdateAgentSoftwareVersionRequest_FieldMask {
	return FullUpdateAgentSoftwareVersionRequest_FieldMask()
}

func (o *UpdateAgentSoftwareVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAgentSoftwareVersionRequest_FieldMask()
}

func (o *UpdateAgentSoftwareVersionRequest) MakeDiffFieldMask(other *UpdateAgentSoftwareVersionRequest) *UpdateAgentSoftwareVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAgentSoftwareVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAgentSoftwareVersionRequest_FieldMask()
	}

	res := &UpdateAgentSoftwareVersionRequest_FieldMask{}
	{
		subMask := o.GetAgentSoftwareVersion().MakeDiffFieldMask(other.GetAgentSoftwareVersion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequest_FieldSubPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequest_FieldSubPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAgentSoftwareVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAgentSoftwareVersionRequest))
}

func (o *UpdateAgentSoftwareVersionRequest) Clone() *UpdateAgentSoftwareVersionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAgentSoftwareVersionRequest{}
	result.AgentSoftwareVersion = o.AgentSoftwareVersion.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAgentSoftwareVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAgentSoftwareVersionRequest) Merge(source *UpdateAgentSoftwareVersionRequest) {
	if source.GetAgentSoftwareVersion() != nil {
		if o.AgentSoftwareVersion == nil {
			o.AgentSoftwareVersion = new(agent_software_version.AgentSoftwareVersion)
		}
		o.AgentSoftwareVersion.Merge(source.GetAgentSoftwareVersion())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAgentSoftwareVersionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAgentSoftwareVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAgentSoftwareVersionRequest))
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) GotenObjectExt() {}

func (o *UpdateAgentSoftwareVersionRequest_CAS) MakeFullFieldMask() *UpdateAgentSoftwareVersionRequest_CAS_FieldMask {
	return FullUpdateAgentSoftwareVersionRequest_CAS_FieldMask()
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAgentSoftwareVersionRequest_CAS_FieldMask()
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) MakeDiffFieldMask(other *UpdateAgentSoftwareVersionRequest_CAS) *UpdateAgentSoftwareVersionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAgentSoftwareVersionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAgentSoftwareVersionRequest_CAS_FieldMask()
	}

	res := &UpdateAgentSoftwareVersionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequestCAS_FieldSubPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAgentSoftwareVersionRequest_CAS))
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) Clone() *UpdateAgentSoftwareVersionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAgentSoftwareVersionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return result
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) Merge(source *UpdateAgentSoftwareVersionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(agent_software_version.AgentSoftwareVersion)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(agent_software_version.AgentSoftwareVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAgentSoftwareVersionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

func (o *DeleteAgentSoftwareVersionRequest) GotenObjectExt() {}

func (o *DeleteAgentSoftwareVersionRequest) MakeFullFieldMask() *DeleteAgentSoftwareVersionRequest_FieldMask {
	return FullDeleteAgentSoftwareVersionRequest_FieldMask()
}

func (o *DeleteAgentSoftwareVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAgentSoftwareVersionRequest_FieldMask()
}

func (o *DeleteAgentSoftwareVersionRequest) MakeDiffFieldMask(other *DeleteAgentSoftwareVersionRequest) *DeleteAgentSoftwareVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAgentSoftwareVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAgentSoftwareVersionRequest_FieldMask()
	}

	res := &DeleteAgentSoftwareVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAgentSoftwareVersionRequest_FieldTerminalPath{selector: DeleteAgentSoftwareVersionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAgentSoftwareVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAgentSoftwareVersionRequest))
}

func (o *DeleteAgentSoftwareVersionRequest) Clone() *DeleteAgentSoftwareVersionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAgentSoftwareVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &agent_software_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAgentSoftwareVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAgentSoftwareVersionRequest) Merge(source *DeleteAgentSoftwareVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &agent_software_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAgentSoftwareVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAgentSoftwareVersionRequest))
}
