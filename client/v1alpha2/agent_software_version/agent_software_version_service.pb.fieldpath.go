// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/agent_software_version_service.proto
// DO NOT EDIT!!!

package agent_software_version_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	agent_software_version "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/agent_software_version"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &agent_software_version.AgentSoftwareVersion{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAgentSoftwareVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAgentSoftwareVersionRequest_FieldPathSelector
	Get(source *GetAgentSoftwareVersionRequest) []interface{}
	GetSingle(source *GetAgentSoftwareVersionRequest) (interface{}, bool)
	ClearValue(item *GetAgentSoftwareVersionRequest)

	// Those methods build corresponding GetAgentSoftwareVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAgentSoftwareVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAgentSoftwareVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAgentSoftwareVersionRequest_FieldPathArrayItemValue
}

type GetAgentSoftwareVersionRequest_FieldPathSelector int32

const (
	GetAgentSoftwareVersionRequest_FieldPathSelectorName      GetAgentSoftwareVersionRequest_FieldPathSelector = 0
	GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask GetAgentSoftwareVersionRequest_FieldPathSelector = 1
	GetAgentSoftwareVersionRequest_FieldPathSelectorView      GetAgentSoftwareVersionRequest_FieldPathSelector = 2
)

func (s GetAgentSoftwareVersionRequest_FieldPathSelector) String() string {
	switch s {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		return "name"
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", s))
	}
}

func BuildGetAgentSoftwareVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAgentSoftwareVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAgentSoftwareVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAgentSoftwareVersionRequest_FieldTerminalPath{selector: GetAgentSoftwareVersionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAgentSoftwareVersionRequest", fp)
}

func ParseGetAgentSoftwareVersionRequest_FieldPath(rawField string) (GetAgentSoftwareVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAgentSoftwareVersionRequest_FieldPath(fp)
}

func MustParseGetAgentSoftwareVersionRequest_FieldPath(rawField string) GetAgentSoftwareVersionRequest_FieldPath {
	fp, err := ParseGetAgentSoftwareVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAgentSoftwareVersionRequest_FieldTerminalPath struct {
	selector GetAgentSoftwareVersionRequest_FieldPathSelector
}

var _ GetAgentSoftwareVersionRequest_FieldPath = (*GetAgentSoftwareVersionRequest_FieldTerminalPath)(nil)

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) Selector() GetAgentSoftwareVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAgentSoftwareVersionRequest
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) Get(source *GetAgentSoftwareVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAgentSoftwareVersionRequest))
}

// GetSingle returns value pointed by specific field of from source GetAgentSoftwareVersionRequest
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) GetSingle(source *GetAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		return (*agent_software_version.Reference)(nil)
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) ClearValue(item *GetAgentSoftwareVersionRequest) {
	if item != nil {
		switch fp.selector {
		case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAgentSoftwareVersionRequest_FieldPathSelectorName ||
		fp.selector == GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAgentSoftwareVersionRequest_FieldPathSelectorView
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithIValue(value interface{}) GetAgentSoftwareVersionRequest_FieldPathValue {
	switch fp.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathValue{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Reference)}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathValue{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathValue{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov := &GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.Reference)}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		return &GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{GetAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *GetAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAgentSoftwareVersionRequest_FieldPathValue allows storing values for GetAgentSoftwareVersionRequest fields according to their type
type GetAgentSoftwareVersionRequest_FieldPathValue interface {
	GetAgentSoftwareVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAgentSoftwareVersionRequest)
	CompareWith(*GetAgentSoftwareVersionRequest) (cmp int, comparable bool)
}

func ParseGetAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) (GetAgentSoftwareVersionRequest_FieldPathValue, error) {
	fp, err := ParseGetAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentSoftwareVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAgentSoftwareVersionRequest_FieldPathValue), nil
}

func MustParseGetAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) GetAgentSoftwareVersionRequest_FieldPathValue {
	fpv, err := ParseGetAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAgentSoftwareVersionRequest_FieldTerminalPathValue struct {
	GetAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentSoftwareVersionRequest_FieldPathValue = (*GetAgentSoftwareVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAgentSoftwareVersionRequest' as interface{}
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) AsNameValue() (*agent_software_version.Reference, bool) {
	res, ok := fpv.value.(*agent_software_version.Reference)
	return res, ok
}
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAgentSoftwareVersionRequest
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) SetTo(target **GetAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(GetAgentSoftwareVersionRequest)
	}
	switch fpv.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent_software_version.Reference)
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAgentSoftwareVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAgentSoftwareVersionRequest_FieldTerminalPathValue' with the value under path in 'GetAgentSoftwareVersionRequest'.
func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWith(source *GetAgentSoftwareVersionRequest) (int, bool) {
	switch fpv.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent_software_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *GetAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAgentSoftwareVersionRequest))
}

// GetAgentSoftwareVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAgentSoftwareVersionRequest according to their type
// Present only for array (repeated) types.
type GetAgentSoftwareVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAgentSoftwareVersionRequest_FieldPath
	ContainsValue(*GetAgentSoftwareVersionRequest) bool
}

// ParseGetAgentSoftwareVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAgentSoftwareVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentSoftwareVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAgentSoftwareVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue struct {
	GetAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ GetAgentSoftwareVersionRequest_FieldPathArrayItemValue = (*GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAgentSoftwareVersionRequest as interface{}
func (fpaiv *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAgentSoftwareVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAgentSoftwareVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAgentSoftwareVersionRequest'
func (fpaiv *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAgentSoftwareVersionRequest) bool {
	slice := fpaiv.GetAgentSoftwareVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAgentSoftwareVersionRequest_FieldPathArrayOfValues allows storing slice of values for GetAgentSoftwareVersionRequest fields according to their type
type GetAgentSoftwareVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAgentSoftwareVersionRequest_FieldPath
}

func ParseGetAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAgentSoftwareVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAgentSoftwareVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAgentSoftwareVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues struct {
	GetAgentSoftwareVersionRequest_FieldTerminalPath
	values interface{}
}

var _ GetAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAgentSoftwareVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent_software_version.Reference) {
			values = append(values, v)
		}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case GetAgentSoftwareVersionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent_software_version.Reference, bool) {
	res, ok := fpaov.values.([]*agent_software_version.Reference)
	return res, ok
}
func (fpaov *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *GetAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAgentSoftwareVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAgentSoftwareVersionsRequest_FieldPathSelector
	Get(source *BatchGetAgentSoftwareVersionsRequest) []interface{}
	GetSingle(source *BatchGetAgentSoftwareVersionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAgentSoftwareVersionsRequest)

	// Those methods build corresponding BatchGetAgentSoftwareVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue
}

type BatchGetAgentSoftwareVersionsRequest_FieldPathSelector int32

const (
	BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames     BatchGetAgentSoftwareVersionsRequest_FieldPathSelector = 0
	BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask BatchGetAgentSoftwareVersionsRequest_FieldPathSelector = 1
	BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView      BatchGetAgentSoftwareVersionsRequest_FieldPathSelector = 2
)

func (s BatchGetAgentSoftwareVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", s))
	}
}

func BuildBatchGetAgentSoftwareVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAgentSoftwareVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAgentSoftwareVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAgentSoftwareVersionsRequest", fp)
}

func ParseBatchGetAgentSoftwareVersionsRequest_FieldPath(rawField string) (BatchGetAgentSoftwareVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAgentSoftwareVersionsRequest_FieldPath(fp)
}

func MustParseBatchGetAgentSoftwareVersionsRequest_FieldPath(rawField string) BatchGetAgentSoftwareVersionsRequest_FieldPath {
	fp, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath struct {
	selector BatchGetAgentSoftwareVersionsRequest_FieldPathSelector
}

var _ BatchGetAgentSoftwareVersionsRequest_FieldPath = (*BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) Selector() BatchGetAgentSoftwareVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAgentSoftwareVersionsRequest
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) Get(source *BatchGetAgentSoftwareVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAgentSoftwareVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAgentSoftwareVersionsRequest
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingle(source *BatchGetAgentSoftwareVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAgentSoftwareVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return ([]*agent_software_version.Reference)(nil)
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValue(item *BatchGetAgentSoftwareVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAgentSoftwareVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.([]*agent_software_version.Reference)}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([][]*agent_software_version.Reference)}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return &BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue{BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAgentSoftwareVersionsRequest_FieldPathValue allows storing values for BatchGetAgentSoftwareVersionsRequest fields according to their type
type BatchGetAgentSoftwareVersionsRequest_FieldPathValue interface {
	BatchGetAgentSoftwareVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAgentSoftwareVersionsRequest)
	CompareWith(*BatchGetAgentSoftwareVersionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAgentSoftwareVersionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAgentSoftwareVersionsRequest_FieldPathValue), nil
}

func MustParseBatchGetAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAgentSoftwareVersionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue struct {
	BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentSoftwareVersionsRequest_FieldPathValue = (*BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAgentSoftwareVersionsRequest' as interface{}
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*agent_software_version.Reference, bool) {
	res, ok := fpv.value.([]*agent_software_version.Reference)
	return res, ok
}
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAgentSoftwareVersionsRequest
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAgentSoftwareVersionsRequest) {
	if *target == nil {
		*target = new(BatchGetAgentSoftwareVersionsRequest)
	}
	switch fpv.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*agent_software_version.Reference)
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentSoftwareVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAgentSoftwareVersionsRequest'.
func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAgentSoftwareVersionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAgentSoftwareVersionsRequest))
}

// BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAgentSoftwareVersionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAgentSoftwareVersionsRequest_FieldPath
	ContainsValue(*BatchGetAgentSoftwareVersionsRequest) bool
}

// ParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentSoftwareVersionsRequest_FieldPathArrayItemValue = (*BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAgentSoftwareVersionsRequest as interface{}
func (fpaiv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*agent_software_version.Reference, bool) {
	res, ok := fpaiv.value.(*agent_software_version.Reference)
	return res, ok
}

func (fpaiv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAgentSoftwareVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAgentSoftwareVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentSoftwareVersionsRequest'
func (fpaiv *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAgentSoftwareVersionsRequest) bool {
	slice := fpaiv.BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAgentSoftwareVersionsRequest fields according to their type
type BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAgentSoftwareVersionsRequest_FieldPath
}

func ParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAgentSoftwareVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAgentSoftwareVersionsRequest_FieldPathArrayOfValues = (*BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*agent_software_version.Reference) {
			values = append(values, v)
		}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAgentSoftwareVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*agent_software_version.Reference, bool) {
	res, ok := fpaov.values.([][]*agent_software_version.Reference)
	return res, ok
}
func (fpaov *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAgentSoftwareVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAgentSoftwareVersionsResponse_FieldPathSelector
	Get(source *BatchGetAgentSoftwareVersionsResponse) []interface{}
	GetSingle(source *BatchGetAgentSoftwareVersionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAgentSoftwareVersionsResponse)

	// Those methods build corresponding BatchGetAgentSoftwareVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue
}

type BatchGetAgentSoftwareVersionsResponse_FieldPathSelector int32

const (
	BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions BatchGetAgentSoftwareVersionsResponse_FieldPathSelector = 0
	BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing               BatchGetAgentSoftwareVersionsResponse_FieldPathSelector = 1
)

func (s BatchGetAgentSoftwareVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return "agent_software_versions"
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", s))
	}
}

func BuildBatchGetAgentSoftwareVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAgentSoftwareVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAgentSoftwareVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_software_versions", "agentSoftwareVersions", "agent-software-versions":
			return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions}, nil
		case "missing":
			return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "agent_software_versions", "agentSoftwareVersions", "agent-software-versions":
			if subpath, err := agent_software_version.BuildAgentSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAgentSoftwareVersionsResponse_FieldSubPath{selector: BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAgentSoftwareVersionsResponse", fp)
}

func ParseBatchGetAgentSoftwareVersionsResponse_FieldPath(rawField string) (BatchGetAgentSoftwareVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAgentSoftwareVersionsResponse_FieldPath(fp)
}

func MustParseBatchGetAgentSoftwareVersionsResponse_FieldPath(rawField string) BatchGetAgentSoftwareVersionsResponse_FieldPath {
	fp, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath struct {
	selector BatchGetAgentSoftwareVersionsResponse_FieldPathSelector
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPath = (*BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) Selector() BatchGetAgentSoftwareVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAgentSoftwareVersionsResponse
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) Get(source *BatchGetAgentSoftwareVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			for _, value := range source.GetAgentSoftwareVersions() {
				values = append(values, value)
			}
		case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAgentSoftwareVersionsResponse
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingle(source *BatchGetAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		res := source.GetAgentSoftwareVersions()
		return res, res != nil
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return ([]*agent_software_version.AgentSoftwareVersion)(nil)
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return ([]*agent_software_version.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValue(item *BatchGetAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			item.AgentSoftwareVersions = nil
		case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.([]*agent_software_version.AgentSoftwareVersion)}
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.([]*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*agent_software_version.AgentSoftwareVersion)}
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion)}
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue{BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAgentSoftwareVersionsResponse_FieldSubPath struct {
	selector BatchGetAgentSoftwareVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPath = (*BatchGetAgentSoftwareVersionsResponse_FieldSubPath)(nil)

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) Selector() BatchGetAgentSoftwareVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) AsAgentSoftwareVersionsSubPath() (agent_software_version.AgentSoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(agent_software_version.AgentSoftwareVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAgentSoftwareVersionsResponse
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) Get(source *BatchGetAgentSoftwareVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		for _, item := range source.GetAgentSoftwareVersions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// GetSingle returns value of selected field from source BatchGetAgentSoftwareVersionsResponse
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) GetSingle(source *BatchGetAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		if len(source.GetAgentSoftwareVersions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgentSoftwareVersions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) ClearValue(item *BatchGetAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			for _, subItem := range item.AgentSoftwareVersions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathValue {
	return &BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	return &BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	return &BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAgentSoftwareVersionsResponse_FieldPathValue allows storing values for BatchGetAgentSoftwareVersionsResponse fields according to their type
type BatchGetAgentSoftwareVersionsResponse_FieldPathValue interface {
	BatchGetAgentSoftwareVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAgentSoftwareVersionsResponse)
	CompareWith(*BatchGetAgentSoftwareVersionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAgentSoftwareVersionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAgentSoftwareVersionsResponse_FieldPathValue), nil
}

func MustParseBatchGetAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAgentSoftwareVersionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue struct {
	BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPathValue = (*BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAgentSoftwareVersionsResponse' as interface{}
func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsAgentSoftwareVersionsValue() ([]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpv.value.([]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*agent_software_version.Reference, bool) {
	res, ok := fpv.value.([]*agent_software_version.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAgentSoftwareVersionsResponse
func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(BatchGetAgentSoftwareVersionsResponse)
	}
	switch fpv.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		(*target).AgentSoftwareVersions = fpv.value.([]*agent_software_version.AgentSoftwareVersion)
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*agent_software_version.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentSoftwareVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAgentSoftwareVersionsResponse'.
func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAgentSoftwareVersionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return 0, false
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAgentSoftwareVersionsResponse))
}

type BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue struct {
	BatchGetAgentSoftwareVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPathValue = (*BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) AsAgentSoftwareVersionsPathValue() (agent_software_version.AgentSoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) SetTo(target **BatchGetAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(BatchGetAgentSoftwareVersionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAgentSoftwareVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWith(source *BatchGetAgentSoftwareVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAgentSoftwareVersionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAgentSoftwareVersionsResponse_FieldPath
	ContainsValue(*BatchGetAgentSoftwareVersionsResponse) bool
}

// ParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPathArrayItemValue = (*BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAgentSoftwareVersionsResponse as interface{}
func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) AsAgentSoftwareVersionsItemValue() (*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaiv.value.(*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*agent_software_version.Reference, bool) {
	res, ok := fpaiv.value.(*agent_software_version.Reference)
	return res, ok
}

func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAgentSoftwareVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAgentSoftwareVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentSoftwareVersionsResponse'
func (fpaiv *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAgentSoftwareVersionsResponse) bool {
	slice := fpaiv.BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAgentSoftwareVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) AsAgentSoftwareVersionsPathItemValue() (agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAgentSoftwareVersionsResponse'
func (fpaivs *BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAgentSoftwareVersionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAgentSoftwareVersionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAgentSoftwareVersionsResponse fields according to their type
type BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAgentSoftwareVersionsResponse_FieldPath
}

func ParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAgentSoftwareVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAgentSoftwareVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		for _, v := range fpaov.values.([][]*agent_software_version.AgentSoftwareVersion) {
			values = append(values, v)
		}
	case BatchGetAgentSoftwareVersionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*agent_software_version.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsAgentSoftwareVersionsArrayOfValues() ([][]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaov.values.([][]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpaov *BatchGetAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*agent_software_version.Reference, bool) {
	res, ok := fpaov.values.([][]*agent_software_version.Reference)
	return res, ok
}

type BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAgentSoftwareVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) AsAgentSoftwareVersionsPathArrayOfValues() (agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAgentSoftwareVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAgentSoftwareVersionsRequest_FieldPathSelector
	Get(source *ListAgentSoftwareVersionsRequest) []interface{}
	GetSingle(source *ListAgentSoftwareVersionsRequest) (interface{}, bool)
	ClearValue(item *ListAgentSoftwareVersionsRequest)

	// Those methods build corresponding ListAgentSoftwareVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAgentSoftwareVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue
}

type ListAgentSoftwareVersionsRequest_FieldPathSelector int32

const (
	ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize          ListAgentSoftwareVersionsRequest_FieldPathSelector = 0
	ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken         ListAgentSoftwareVersionsRequest_FieldPathSelector = 1
	ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy           ListAgentSoftwareVersionsRequest_FieldPathSelector = 2
	ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter            ListAgentSoftwareVersionsRequest_FieldPathSelector = 3
	ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask         ListAgentSoftwareVersionsRequest_FieldPathSelector = 4
	ListAgentSoftwareVersionsRequest_FieldPathSelectorView              ListAgentSoftwareVersionsRequest_FieldPathSelector = 5
	ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo ListAgentSoftwareVersionsRequest_FieldPathSelector = 6
)

func (s ListAgentSoftwareVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return "view"
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", s))
	}
}

func BuildListAgentSoftwareVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAgentSoftwareVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAgentSoftwareVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListAgentSoftwareVersionsRequest_FieldTerminalPath{selector: ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAgentSoftwareVersionsRequest", fp)
}

func ParseListAgentSoftwareVersionsRequest_FieldPath(rawField string) (ListAgentSoftwareVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAgentSoftwareVersionsRequest_FieldPath(fp)
}

func MustParseListAgentSoftwareVersionsRequest_FieldPath(rawField string) ListAgentSoftwareVersionsRequest_FieldPath {
	fp, err := ParseListAgentSoftwareVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAgentSoftwareVersionsRequest_FieldTerminalPath struct {
	selector ListAgentSoftwareVersionsRequest_FieldPathSelector
}

var _ ListAgentSoftwareVersionsRequest_FieldPath = (*ListAgentSoftwareVersionsRequest_FieldTerminalPath)(nil)

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) Selector() ListAgentSoftwareVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAgentSoftwareVersionsRequest
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) Get(source *ListAgentSoftwareVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAgentSoftwareVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAgentSoftwareVersionsRequest
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingle(source *ListAgentSoftwareVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAgentSoftwareVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return (*agent_software_version.OrderBy)(nil)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return (*agent_software_version.Filter)(nil)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValue(item *ListAgentSoftwareVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAgentSoftwareVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorView ||
		fp.selector == ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAgentSoftwareVersionsRequest_FieldPathValue {
	switch fp.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.OrderBy)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Filter)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathValue{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov := &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.OrderBy)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.Filter)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAgentSoftwareVersionsRequest_FieldPathValue allows storing values for ListAgentSoftwareVersionsRequest fields according to their type
type ListAgentSoftwareVersionsRequest_FieldPathValue interface {
	ListAgentSoftwareVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAgentSoftwareVersionsRequest)
	CompareWith(*ListAgentSoftwareVersionsRequest) (cmp int, comparable bool)
}

func ParseListAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) (ListAgentSoftwareVersionsRequest_FieldPathValue, error) {
	fp, err := ParseListAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAgentSoftwareVersionsRequest_FieldPathValue), nil
}

func MustParseListAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) ListAgentSoftwareVersionsRequest_FieldPathValue {
	fpv, err := ParseListAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAgentSoftwareVersionsRequest_FieldTerminalPathValue struct {
	ListAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAgentSoftwareVersionsRequest_FieldPathValue = (*ListAgentSoftwareVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAgentSoftwareVersionsRequest' as interface{}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsOrderByValue() (*agent_software_version.OrderBy, bool) {
	res, ok := fpv.value.(*agent_software_version.OrderBy)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsFilterValue() (*agent_software_version.Filter, bool) {
	res, ok := fpv.value.(*agent_software_version.Filter)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListAgentSoftwareVersionsRequest
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetTo(target **ListAgentSoftwareVersionsRequest) {
	if *target == nil {
		*target = new(ListAgentSoftwareVersionsRequest)
	}
	switch fpv.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*agent_software_version.PagerCursor)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*agent_software_version.OrderBy)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*agent_software_version.Filter)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentSoftwareVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAgentSoftwareVersionsRequest_FieldTerminalPathValue' with the value under path in 'ListAgentSoftwareVersionsRequest'.
func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWith(source *ListAgentSoftwareVersionsRequest) (int, bool) {
	switch fpv.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAgentSoftwareVersionsRequest))
}

// ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAgentSoftwareVersionsRequest according to their type
// Present only for array (repeated) types.
type ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAgentSoftwareVersionsRequest_FieldPath
	ContainsValue(*ListAgentSoftwareVersionsRequest) bool
}

// ParseListAgentSoftwareVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue struct {
	ListAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAgentSoftwareVersionsRequest_FieldPathArrayItemValue = (*ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAgentSoftwareVersionsRequest as interface{}
func (fpaiv *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAgentSoftwareVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAgentSoftwareVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentSoftwareVersionsRequest'
func (fpaiv *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAgentSoftwareVersionsRequest) bool {
	slice := fpaiv.ListAgentSoftwareVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues allows storing slice of values for ListAgentSoftwareVersionsRequest fields according to their type
type ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAgentSoftwareVersionsRequest_FieldPath
}

func ParseListAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues struct {
	ListAgentSoftwareVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAgentSoftwareVersionsRequest_FieldPathArrayOfValues = (*ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*agent_software_version.OrderBy) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*agent_software_version.Filter) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*agent_software_version.OrderBy, bool) {
	res, ok := fpaov.values.([]*agent_software_version.OrderBy)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*agent_software_version.Filter, bool) {
	res, ok := fpaov.values.([]*agent_software_version.Filter)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAgentSoftwareVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAgentSoftwareVersionsResponse_FieldPathSelector
	Get(source *ListAgentSoftwareVersionsResponse) []interface{}
	GetSingle(source *ListAgentSoftwareVersionsResponse) (interface{}, bool)
	ClearValue(item *ListAgentSoftwareVersionsResponse)

	// Those methods build corresponding ListAgentSoftwareVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue
}

type ListAgentSoftwareVersionsResponse_FieldPathSelector int32

const (
	ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions ListAgentSoftwareVersionsResponse_FieldPathSelector = 0
	ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken         ListAgentSoftwareVersionsResponse_FieldPathSelector = 1
	ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken         ListAgentSoftwareVersionsResponse_FieldPathSelector = 2
	ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset         ListAgentSoftwareVersionsResponse_FieldPathSelector = 3
	ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount     ListAgentSoftwareVersionsResponse_FieldPathSelector = 4
)

func (s ListAgentSoftwareVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return "agent_software_versions"
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", s))
	}
}

func BuildListAgentSoftwareVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAgentSoftwareVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAgentSoftwareVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_software_versions", "agentSoftwareVersions", "agent-software-versions":
			return &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "agent_software_versions", "agentSoftwareVersions", "agent-software-versions":
			if subpath, err := agent_software_version.BuildAgentSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAgentSoftwareVersionsResponse_FieldSubPath{selector: ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAgentSoftwareVersionsResponse", fp)
}

func ParseListAgentSoftwareVersionsResponse_FieldPath(rawField string) (ListAgentSoftwareVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAgentSoftwareVersionsResponse_FieldPath(fp)
}

func MustParseListAgentSoftwareVersionsResponse_FieldPath(rawField string) ListAgentSoftwareVersionsResponse_FieldPath {
	fp, err := ParseListAgentSoftwareVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAgentSoftwareVersionsResponse_FieldTerminalPath struct {
	selector ListAgentSoftwareVersionsResponse_FieldPathSelector
}

var _ ListAgentSoftwareVersionsResponse_FieldPath = (*ListAgentSoftwareVersionsResponse_FieldTerminalPath)(nil)

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) Selector() ListAgentSoftwareVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAgentSoftwareVersionsResponse
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) Get(source *ListAgentSoftwareVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			for _, value := range source.GetAgentSoftwareVersions() {
				values = append(values, value)
			}
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAgentSoftwareVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAgentSoftwareVersionsResponse
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingle(source *ListAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		res := source.GetAgentSoftwareVersions()
		return res, res != nil
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return ([]*agent_software_version.AgentSoftwareVersion)(nil)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValue(item *ListAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			item.AgentSoftwareVersions = nil
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathValue {
	switch fp.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.([]*agent_software_version.AgentSoftwareVersion)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov := &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*agent_software_version.AgentSoftwareVersion)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return &ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue{ListAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAgentSoftwareVersionsResponse_FieldSubPath struct {
	selector ListAgentSoftwareVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAgentSoftwareVersionsResponse_FieldPath = (*ListAgentSoftwareVersionsResponse_FieldSubPath)(nil)

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) Selector() ListAgentSoftwareVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) AsAgentSoftwareVersionsSubPath() (agent_software_version.AgentSoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(agent_software_version.AgentSoftwareVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAgentSoftwareVersionsResponse
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) Get(source *ListAgentSoftwareVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		for _, item := range source.GetAgentSoftwareVersions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAgentSoftwareVersionsResponse))
}

// GetSingle returns value of selected field from source ListAgentSoftwareVersionsResponse
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) GetSingle(source *ListAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		if len(source.GetAgentSoftwareVersions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgentSoftwareVersions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fps.selector))
	}
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) ClearValue(item *ListAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
			for _, subItem := range item.AgentSoftwareVersions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListAgentSoftwareVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithIValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathValue {
	return &ListAgentSoftwareVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	return &ListAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	return &ListAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAgentSoftwareVersionsResponse_FieldPathValue allows storing values for ListAgentSoftwareVersionsResponse fields according to their type
type ListAgentSoftwareVersionsResponse_FieldPathValue interface {
	ListAgentSoftwareVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAgentSoftwareVersionsResponse)
	CompareWith(*ListAgentSoftwareVersionsResponse) (cmp int, comparable bool)
}

func ParseListAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) (ListAgentSoftwareVersionsResponse_FieldPathValue, error) {
	fp, err := ParseListAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAgentSoftwareVersionsResponse_FieldPathValue), nil
}

func MustParseListAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) ListAgentSoftwareVersionsResponse_FieldPathValue {
	fpv, err := ParseListAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAgentSoftwareVersionsResponse_FieldTerminalPathValue struct {
	ListAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAgentSoftwareVersionsResponse_FieldPathValue = (*ListAgentSoftwareVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAgentSoftwareVersionsResponse' as interface{}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsAgentSoftwareVersionsValue() ([]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpv.value.([]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListAgentSoftwareVersionsResponse
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetTo(target **ListAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(ListAgentSoftwareVersionsResponse)
	}
	switch fpv.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		(*target).AgentSoftwareVersions = fpv.value.([]*agent_software_version.AgentSoftwareVersion)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*agent_software_version.PagerCursor)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*agent_software_version.PagerCursor)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentSoftwareVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAgentSoftwareVersionsResponse_FieldTerminalPathValue' with the value under path in 'ListAgentSoftwareVersionsResponse'.
func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWith(source *ListAgentSoftwareVersionsResponse) (int, bool) {
	switch fpv.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return 0, false
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAgentSoftwareVersionsResponse))
}

type ListAgentSoftwareVersionsResponse_FieldSubPathValue struct {
	ListAgentSoftwareVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAgentSoftwareVersionsResponse_FieldPathValue = (*ListAgentSoftwareVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) AsAgentSoftwareVersionsPathValue() (agent_software_version.AgentSoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue)
	return res, ok
}

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) SetTo(target **ListAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(ListAgentSoftwareVersionsResponse)
	}
	switch fpvs.Selector() {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAgentSoftwareVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWith(source *ListAgentSoftwareVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAgentSoftwareVersionsResponse))
}

// ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAgentSoftwareVersionsResponse according to their type
// Present only for array (repeated) types.
type ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAgentSoftwareVersionsResponse_FieldPath
	ContainsValue(*ListAgentSoftwareVersionsResponse) bool
}

// ParseListAgentSoftwareVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue struct {
	ListAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAgentSoftwareVersionsResponse_FieldPathArrayItemValue = (*ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAgentSoftwareVersionsResponse as interface{}
func (fpaiv *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) AsAgentSoftwareVersionsItemValue() (*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaiv.value.(*agent_software_version.AgentSoftwareVersion)
	return res, ok
}

func (fpaiv *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAgentSoftwareVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAgentSoftwareVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentSoftwareVersionsResponse'
func (fpaiv *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAgentSoftwareVersionsResponse) bool {
	slice := fpaiv.ListAgentSoftwareVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue struct {
	ListAgentSoftwareVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) AsAgentSoftwareVersionsPathItemValue() (agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAgentSoftwareVersionsResponse'
func (fpaivs *ListAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAgentSoftwareVersionsResponse) bool {
	switch fpaivs.Selector() {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAgentSoftwareVersionsResponse: %d", fpaivs.Selector()))
	}
}

// ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues allows storing slice of values for ListAgentSoftwareVersionsResponse fields according to their type
type ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAgentSoftwareVersionsResponse_FieldPath
}

func ParseListAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAgentSoftwareVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues struct {
	ListAgentSoftwareVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersions:
		for _, v := range fpaov.values.([][]*agent_software_version.AgentSoftwareVersion) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAgentSoftwareVersionsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsAgentSoftwareVersionsArrayOfValues() ([][]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaov.values.([][]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues struct {
	ListAgentSoftwareVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*ListAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) AsAgentSoftwareVersionsPathArrayOfValues() (agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentSoftwareVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentSoftwareVersionRequest_FieldPathSelector
	Get(source *WatchAgentSoftwareVersionRequest) []interface{}
	GetSingle(source *WatchAgentSoftwareVersionRequest) (interface{}, bool)
	ClearValue(item *WatchAgentSoftwareVersionRequest)

	// Those methods build corresponding WatchAgentSoftwareVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentSoftwareVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue
}

type WatchAgentSoftwareVersionRequest_FieldPathSelector int32

const (
	WatchAgentSoftwareVersionRequest_FieldPathSelectorName      WatchAgentSoftwareVersionRequest_FieldPathSelector = 0
	WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask WatchAgentSoftwareVersionRequest_FieldPathSelector = 1
	WatchAgentSoftwareVersionRequest_FieldPathSelectorView      WatchAgentSoftwareVersionRequest_FieldPathSelector = 2
)

func (s WatchAgentSoftwareVersionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		return "name"
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", s))
	}
}

func BuildWatchAgentSoftwareVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentSoftwareVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentSoftwareVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAgentSoftwareVersionRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentSoftwareVersionRequest", fp)
}

func ParseWatchAgentSoftwareVersionRequest_FieldPath(rawField string) (WatchAgentSoftwareVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentSoftwareVersionRequest_FieldPath(fp)
}

func MustParseWatchAgentSoftwareVersionRequest_FieldPath(rawField string) WatchAgentSoftwareVersionRequest_FieldPath {
	fp, err := ParseWatchAgentSoftwareVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentSoftwareVersionRequest_FieldTerminalPath struct {
	selector WatchAgentSoftwareVersionRequest_FieldPathSelector
}

var _ WatchAgentSoftwareVersionRequest_FieldPath = (*WatchAgentSoftwareVersionRequest_FieldTerminalPath)(nil)

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) Selector() WatchAgentSoftwareVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentSoftwareVersionRequest
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) Get(source *WatchAgentSoftwareVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentSoftwareVersionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAgentSoftwareVersionRequest
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) GetSingle(source *WatchAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		return (*agent_software_version.Reference)(nil)
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) ClearValue(item *WatchAgentSoftwareVersionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentSoftwareVersionRequest_FieldPathSelectorName ||
		fp.selector == WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAgentSoftwareVersionRequest_FieldPathSelectorView
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAgentSoftwareVersionRequest_FieldPathValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Reference)}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov := &WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.Reference)}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		return &WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentSoftwareVersionRequest_FieldPathValue allows storing values for WatchAgentSoftwareVersionRequest fields according to their type
type WatchAgentSoftwareVersionRequest_FieldPathValue interface {
	WatchAgentSoftwareVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentSoftwareVersionRequest)
	CompareWith(*WatchAgentSoftwareVersionRequest) (cmp int, comparable bool)
}

func ParseWatchAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) (WatchAgentSoftwareVersionRequest_FieldPathValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentSoftwareVersionRequest_FieldPathValue), nil
}

func MustParseWatchAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) WatchAgentSoftwareVersionRequest_FieldPathValue {
	fpv, err := ParseWatchAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentSoftwareVersionRequest_FieldTerminalPathValue struct {
	WatchAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionRequest_FieldPathValue = (*WatchAgentSoftwareVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentSoftwareVersionRequest' as interface{}
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) AsNameValue() (*agent_software_version.Reference, bool) {
	res, ok := fpv.value.(*agent_software_version.Reference)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentSoftwareVersionRequest
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) SetTo(target **WatchAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionRequest)
	}
	switch fpv.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent_software_version.Reference)
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentSoftwareVersionRequest_FieldTerminalPathValue' with the value under path in 'WatchAgentSoftwareVersionRequest'.
func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWith(source *WatchAgentSoftwareVersionRequest) (int, bool) {
	switch fpv.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent_software_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentSoftwareVersionRequest))
}

// WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentSoftwareVersionRequest according to their type
// Present only for array (repeated) types.
type WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentSoftwareVersionRequest_FieldPath
	ContainsValue(*WatchAgentSoftwareVersionRequest) bool
}

// ParseWatchAgentSoftwareVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue struct {
	WatchAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionRequest_FieldPathArrayItemValue = (*WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentSoftwareVersionRequest as interface{}
func (fpaiv *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentSoftwareVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentSoftwareVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentSoftwareVersionRequest'
func (fpaiv *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionRequest) bool {
	slice := fpaiv.WatchAgentSoftwareVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues allows storing slice of values for WatchAgentSoftwareVersionRequest fields according to their type
type WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentSoftwareVersionRequest_FieldPath
}

func ParseWatchAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues struct {
	WatchAgentSoftwareVersionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent_software_version.Reference) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent_software_version.Reference, bool) {
	res, ok := fpaov.values.([]*agent_software_version.Reference)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentSoftwareVersionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentSoftwareVersionResponse_FieldPathSelector
	Get(source *WatchAgentSoftwareVersionResponse) []interface{}
	GetSingle(source *WatchAgentSoftwareVersionResponse) (interface{}, bool)
	ClearValue(item *WatchAgentSoftwareVersionResponse)

	// Those methods build corresponding WatchAgentSoftwareVersionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentSoftwareVersionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue
}

type WatchAgentSoftwareVersionResponse_FieldPathSelector int32

const (
	WatchAgentSoftwareVersionResponse_FieldPathSelectorChange WatchAgentSoftwareVersionResponse_FieldPathSelector = 0
)

func (s WatchAgentSoftwareVersionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", s))
	}
}

func BuildWatchAgentSoftwareVersionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentSoftwareVersionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentSoftwareVersionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAgentSoftwareVersionResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentSoftwareVersionResponse", fp)
}

func ParseWatchAgentSoftwareVersionResponse_FieldPath(rawField string) (WatchAgentSoftwareVersionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentSoftwareVersionResponse_FieldPath(fp)
}

func MustParseWatchAgentSoftwareVersionResponse_FieldPath(rawField string) WatchAgentSoftwareVersionResponse_FieldPath {
	fp, err := ParseWatchAgentSoftwareVersionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentSoftwareVersionResponse_FieldTerminalPath struct {
	selector WatchAgentSoftwareVersionResponse_FieldPathSelector
}

var _ WatchAgentSoftwareVersionResponse_FieldPath = (*WatchAgentSoftwareVersionResponse_FieldTerminalPath)(nil)

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) Selector() WatchAgentSoftwareVersionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentSoftwareVersionResponse
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) Get(source *WatchAgentSoftwareVersionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentSoftwareVersionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAgentSoftwareVersionResponse
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) GetSingle(source *WatchAgentSoftwareVersionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentSoftwareVersionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		return (*agent_software_version.AgentSoftwareVersionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) ClearValue(item *WatchAgentSoftwareVersionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentSoftwareVersionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentSoftwareVersionResponse_FieldPathSelectorChange
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAgentSoftwareVersionResponse_FieldPathValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		return &WatchAgentSoftwareVersionResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues {
	fpaov := &WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		return &WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionResponse_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentSoftwareVersionResponse_FieldPathValue allows storing values for WatchAgentSoftwareVersionResponse fields according to their type
type WatchAgentSoftwareVersionResponse_FieldPathValue interface {
	WatchAgentSoftwareVersionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentSoftwareVersionResponse)
	CompareWith(*WatchAgentSoftwareVersionResponse) (cmp int, comparable bool)
}

func ParseWatchAgentSoftwareVersionResponse_FieldPathValue(pathStr, valueStr string) (WatchAgentSoftwareVersionResponse_FieldPathValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentSoftwareVersionResponse_FieldPathValue), nil
}

func MustParseWatchAgentSoftwareVersionResponse_FieldPathValue(pathStr, valueStr string) WatchAgentSoftwareVersionResponse_FieldPathValue {
	fpv, err := ParseWatchAgentSoftwareVersionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentSoftwareVersionResponse_FieldTerminalPathValue struct {
	WatchAgentSoftwareVersionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionResponse_FieldPathValue = (*WatchAgentSoftwareVersionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentSoftwareVersionResponse' as interface{}
func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) AsChangeValue() (*agent_software_version.AgentSoftwareVersionChange, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentSoftwareVersionResponse
func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) SetTo(target **WatchAgentSoftwareVersionResponse) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionResponse)
	}
	switch fpv.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*agent_software_version.AgentSoftwareVersionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentSoftwareVersionResponse_FieldTerminalPathValue' with the value under path in 'WatchAgentSoftwareVersionResponse'.
func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) CompareWith(source *WatchAgentSoftwareVersionResponse) (int, bool) {
	switch fpv.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentSoftwareVersionResponse))
}

// WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentSoftwareVersionResponse according to their type
// Present only for array (repeated) types.
type WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentSoftwareVersionResponse_FieldPath
	ContainsValue(*WatchAgentSoftwareVersionResponse) bool
}

// ParseWatchAgentSoftwareVersionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentSoftwareVersionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentSoftwareVersionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentSoftwareVersionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue struct {
	WatchAgentSoftwareVersionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionResponse_FieldPathArrayItemValue = (*WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentSoftwareVersionResponse as interface{}
func (fpaiv *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentSoftwareVersionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentSoftwareVersionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentSoftwareVersionResponse'
func (fpaiv *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionResponse) bool {
	slice := fpaiv.WatchAgentSoftwareVersionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues allows storing slice of values for WatchAgentSoftwareVersionResponse fields according to their type
type WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentSoftwareVersionResponse_FieldPath
}

func ParseWatchAgentSoftwareVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentSoftwareVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentSoftwareVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentSoftwareVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues struct {
	WatchAgentSoftwareVersionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAgentSoftwareVersionResponse_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentSoftwareVersionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentSoftwareVersionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*agent_software_version.AgentSoftwareVersionChange, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentSoftwareVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentSoftwareVersionsRequest_FieldPathSelector
	Get(source *WatchAgentSoftwareVersionsRequest) []interface{}
	GetSingle(source *WatchAgentSoftwareVersionsRequest) (interface{}, bool)
	ClearValue(item *WatchAgentSoftwareVersionsRequest)

	// Those methods build corresponding WatchAgentSoftwareVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentSoftwareVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue
}

type WatchAgentSoftwareVersionsRequest_FieldPathSelector int32

const (
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorType         WatchAgentSoftwareVersionsRequest_FieldPathSelector = 0
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize     WatchAgentSoftwareVersionsRequest_FieldPathSelector = 1
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken    WatchAgentSoftwareVersionsRequest_FieldPathSelector = 2
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy      WatchAgentSoftwareVersionsRequest_FieldPathSelector = 3
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken  WatchAgentSoftwareVersionsRequest_FieldPathSelector = 4
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime WatchAgentSoftwareVersionsRequest_FieldPathSelector = 5
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter       WatchAgentSoftwareVersionsRequest_FieldPathSelector = 6
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask    WatchAgentSoftwareVersionsRequest_FieldPathSelector = 7
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorView         WatchAgentSoftwareVersionsRequest_FieldPathSelector = 8
	WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize WatchAgentSoftwareVersionsRequest_FieldPathSelector = 9
)

func (s WatchAgentSoftwareVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		return "type"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return "view"
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", s))
	}
}

func BuildWatchAgentSoftwareVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentSoftwareVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentSoftwareVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAgentSoftwareVersionsRequest_FieldTerminalPath{selector: WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentSoftwareVersionsRequest", fp)
}

func ParseWatchAgentSoftwareVersionsRequest_FieldPath(rawField string) (WatchAgentSoftwareVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentSoftwareVersionsRequest_FieldPath(fp)
}

func MustParseWatchAgentSoftwareVersionsRequest_FieldPath(rawField string) WatchAgentSoftwareVersionsRequest_FieldPath {
	fp, err := ParseWatchAgentSoftwareVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentSoftwareVersionsRequest_FieldTerminalPath struct {
	selector WatchAgentSoftwareVersionsRequest_FieldPathSelector
}

var _ WatchAgentSoftwareVersionsRequest_FieldPath = (*WatchAgentSoftwareVersionsRequest_FieldTerminalPath)(nil)

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) Selector() WatchAgentSoftwareVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentSoftwareVersionsRequest
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) Get(source *WatchAgentSoftwareVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentSoftwareVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAgentSoftwareVersionsRequest
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingle(source *WatchAgentSoftwareVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentSoftwareVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return (*agent_software_version.OrderBy)(nil)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return (*agent_software_version.Filter)(nil)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValue(item *WatchAgentSoftwareVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentSoftwareVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorType ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorView ||
		fp.selector == WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAgentSoftwareVersionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.OrderBy)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Filter)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.OrderBy)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.Filter)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentSoftwareVersionsRequest_FieldPathValue allows storing values for WatchAgentSoftwareVersionsRequest fields according to their type
type WatchAgentSoftwareVersionsRequest_FieldPathValue interface {
	WatchAgentSoftwareVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentSoftwareVersionsRequest)
	CompareWith(*WatchAgentSoftwareVersionsRequest) (cmp int, comparable bool)
}

func ParseWatchAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentSoftwareVersionsRequest_FieldPathValue), nil
}

func MustParseWatchAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr string) WatchAgentSoftwareVersionsRequest_FieldPathValue {
	fpv, err := ParseWatchAgentSoftwareVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue struct {
	WatchAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsRequest_FieldPathValue = (*WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentSoftwareVersionsRequest' as interface{}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsOrderByValue() (*agent_software_version.OrderBy, bool) {
	res, ok := fpv.value.(*agent_software_version.OrderBy)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsFilterValue() (*agent_software_version.Filter, bool) {
	res, ok := fpv.value.(*agent_software_version.Filter)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentSoftwareVersionsRequest
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetTo(target **WatchAgentSoftwareVersionsRequest) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionsRequest)
	}
	switch fpv.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*agent_software_version.PagerCursor)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*agent_software_version.OrderBy)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*agent_software_version.Filter)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue' with the value under path in 'WatchAgentSoftwareVersionsRequest'.
func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWith(source *WatchAgentSoftwareVersionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentSoftwareVersionsRequest))
}

// WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentSoftwareVersionsRequest according to their type
// Present only for array (repeated) types.
type WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentSoftwareVersionsRequest_FieldPath
	ContainsValue(*WatchAgentSoftwareVersionsRequest) bool
}

// ParseWatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAgentSoftwareVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsRequest_FieldPathArrayItemValue = (*WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentSoftwareVersionsRequest as interface{}
func (fpaiv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentSoftwareVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentSoftwareVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentSoftwareVersionsRequest'
func (fpaiv *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionsRequest) bool {
	slice := fpaiv.WatchAgentSoftwareVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAgentSoftwareVersionsRequest fields according to their type
type WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentSoftwareVersionsRequest_FieldPath
}

func ParseWatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentSoftwareVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAgentSoftwareVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAgentSoftwareVersionsRequest_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*agent_software_version.OrderBy) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*agent_software_version.Filter) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*agent_software_version.OrderBy, bool) {
	res, ok := fpaov.values.([]*agent_software_version.OrderBy)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*agent_software_version.Filter, bool) {
	res, ok := fpaov.values.([]*agent_software_version.Filter)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentSoftwareVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentSoftwareVersionsResponse_FieldPathSelector
	Get(source *WatchAgentSoftwareVersionsResponse) []interface{}
	GetSingle(source *WatchAgentSoftwareVersionsResponse) (interface{}, bool)
	ClearValue(item *WatchAgentSoftwareVersionsResponse)

	// Those methods build corresponding WatchAgentSoftwareVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue
}

type WatchAgentSoftwareVersionsResponse_FieldPathSelector int32

const (
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges WatchAgentSoftwareVersionsResponse_FieldPathSelector = 0
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent                   WatchAgentSoftwareVersionsResponse_FieldPathSelector = 1
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange             WatchAgentSoftwareVersionsResponse_FieldPathSelector = 2
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken                 WatchAgentSoftwareVersionsResponse_FieldPathSelector = 3
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize                WatchAgentSoftwareVersionsResponse_FieldPathSelector = 4
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset                 WatchAgentSoftwareVersionsResponse_FieldPathSelector = 5
	WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset                 WatchAgentSoftwareVersionsResponse_FieldPathSelector = 6
)

func (s WatchAgentSoftwareVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return "agent_software_version_changes"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", s))
	}
}

func BuildWatchAgentSoftwareVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentSoftwareVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentSoftwareVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_software_version_changes", "agentSoftwareVersionChanges", "agent-software-version-changes":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAgentSoftwareVersionsResponse_FieldSubPath{selector: WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentSoftwareVersionsResponse", fp)
}

func ParseWatchAgentSoftwareVersionsResponse_FieldPath(rawField string) (WatchAgentSoftwareVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentSoftwareVersionsResponse_FieldPath(fp)
}

func MustParseWatchAgentSoftwareVersionsResponse_FieldPath(rawField string) WatchAgentSoftwareVersionsResponse_FieldPath {
	fp, err := ParseWatchAgentSoftwareVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentSoftwareVersionsResponse_FieldTerminalPath struct {
	selector WatchAgentSoftwareVersionsResponse_FieldPathSelector
}

var _ WatchAgentSoftwareVersionsResponse_FieldPath = (*WatchAgentSoftwareVersionsResponse_FieldTerminalPath)(nil)

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) Selector() WatchAgentSoftwareVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentSoftwareVersionsResponse
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) Get(source *WatchAgentSoftwareVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
			for _, value := range source.GetAgentSoftwareVersionChanges() {
				values = append(values, value)
			}
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentSoftwareVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAgentSoftwareVersionsResponse
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingle(source *WatchAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		res := source.GetAgentSoftwareVersionChanges()
		return res, res != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return ([]*agent_software_version.AgentSoftwareVersionChange)(nil)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAgentSoftwareVersionsResponse_PageTokenChange)(nil)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValue(item *WatchAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
			item.AgentSoftwareVersionChanges = nil
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges ||
		fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.([]*agent_software_version.AgentSoftwareVersionChange)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*WatchAgentSoftwareVersionsResponse_PageTokenChange)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*agent_software_version.AgentSoftwareVersionChange)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAgentSoftwareVersionsResponse_PageTokenChange)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return &WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue{WatchAgentSoftwareVersionsResponse_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAgentSoftwareVersionsResponse_FieldSubPath struct {
	selector WatchAgentSoftwareVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAgentSoftwareVersionsResponse_FieldPath = (*WatchAgentSoftwareVersionsResponse_FieldSubPath)(nil)

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) Selector() WatchAgentSoftwareVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAgentSoftwareVersionsResponse
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) Get(source *WatchAgentSoftwareVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAgentSoftwareVersionsResponse))
}

// GetSingle returns value of selected field from source WatchAgentSoftwareVersionsResponse
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) GetSingle(source *WatchAgentSoftwareVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fps.selector))
	}
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAgentSoftwareVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) ClearValue(item *WatchAgentSoftwareVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAgentSoftwareVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchAgentSoftwareVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithIValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathValue {
	return &WatchAgentSoftwareVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	return &WatchAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	return &WatchAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAgentSoftwareVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAgentSoftwareVersionsResponse_FieldPathValue allows storing values for WatchAgentSoftwareVersionsResponse fields according to their type
type WatchAgentSoftwareVersionsResponse_FieldPathValue interface {
	WatchAgentSoftwareVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentSoftwareVersionsResponse)
	CompareWith(*WatchAgentSoftwareVersionsResponse) (cmp int, comparable bool)
}

func ParseWatchAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentSoftwareVersionsResponse_FieldPathValue), nil
}

func MustParseWatchAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr string) WatchAgentSoftwareVersionsResponse_FieldPathValue {
	fpv, err := ParseWatchAgentSoftwareVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue struct {
	WatchAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsResponse_FieldPathValue = (*WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAgentSoftwareVersionsResponse' as interface{}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsAgentSoftwareVersionChangesValue() ([]*agent_software_version.AgentSoftwareVersionChange, bool) {
	res, ok := fpv.value.([]*agent_software_version.AgentSoftwareVersionChange)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAgentSoftwareVersionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAgentSoftwareVersionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAgentSoftwareVersionsResponse
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetTo(target **WatchAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionsResponse)
	}
	switch fpv.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		(*target).AgentSoftwareVersionChanges = fpv.value.([]*agent_software_version.AgentSoftwareVersionChange)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAgentSoftwareVersionsResponse_PageTokenChange)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue' with the value under path in 'WatchAgentSoftwareVersionsResponse'.
func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWith(source *WatchAgentSoftwareVersionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		return 0, false
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentSoftwareVersionsResponse))
}

type WatchAgentSoftwareVersionsResponse_FieldSubPathValue struct {
	WatchAgentSoftwareVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAgentSoftwareVersionsResponse_FieldPathValue = (*WatchAgentSoftwareVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) SetTo(target **WatchAgentSoftwareVersionsResponse) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionsResponse)
	}
	switch fpvs.Selector() {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWith(source *WatchAgentSoftwareVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAgentSoftwareVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAgentSoftwareVersionsResponse))
}

// WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAgentSoftwareVersionsResponse according to their type
// Present only for array (repeated) types.
type WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentSoftwareVersionsResponse_FieldPath
	ContainsValue(*WatchAgentSoftwareVersionsResponse) bool
}

// ParseWatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAgentSoftwareVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsResponse_FieldPathArrayItemValue = (*WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentSoftwareVersionsResponse as interface{}
func (fpaiv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) AsAgentSoftwareVersionChangesItemValue() (*agent_software_version.AgentSoftwareVersionChange, bool) {
	res, ok := fpaiv.value.(*agent_software_version.AgentSoftwareVersionChange)
	return res, ok
}

func (fpaiv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentSoftwareVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentSoftwareVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentSoftwareVersionsResponse'
func (fpaiv *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionsResponse) bool {
	slice := fpaiv.WatchAgentSoftwareVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue struct {
	WatchAgentSoftwareVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAgentSoftwareVersionsResponse'
func (fpaivs *WatchAgentSoftwareVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAgentSoftwareVersionsResponse fields according to their type
type WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentSoftwareVersionsResponse_FieldPath
}

func ParseWatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAgentSoftwareVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAgentSoftwareVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorAgentSoftwareVersionChanges:
		for _, v := range fpaov.values.([][]*agent_software_version.AgentSoftwareVersionChange) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAgentSoftwareVersionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsAgentSoftwareVersionChangesArrayOfValues() ([][]*agent_software_version.AgentSoftwareVersionChange, bool) {
	res, ok := fpaov.values.([][]*agent_software_version.AgentSoftwareVersionChange)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAgentSoftwareVersionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAgentSoftwareVersionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues struct {
	WatchAgentSoftwareVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAgentSoftwareVersionsResponse_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAgentSoftwareVersionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAgentSoftwareVersionsResponse_PageTokenChange)

	// Those methods build corresponding WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector = 0
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAgentSoftwareVersionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAgentSoftwareVersionsResponse_PageTokenChange", fp)
}

func ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(rawField string) (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(rawField string) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath = (*WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAgentSoftwareVersionsResponse_PageTokenChange
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAgentSoftwareVersionsResponse_PageTokenChange
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*agent_software_version.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAgentSoftwareVersionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue{WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*agent_software_version.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*agent_software_version.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue interface {
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAgentSoftwareVersionsResponse_PageTokenChange)
	CompareWith(*WatchAgentSoftwareVersionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathValue = (*WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}
func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*agent_software_version.PagerCursor, bool) {
	res, ok := fpv.value.(*agent_software_version.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAgentSoftwareVersionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAgentSoftwareVersionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*agent_software_version.PagerCursor)
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*agent_software_version.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAgentSoftwareVersionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAgentSoftwareVersionsResponse_PageTokenChange'.
func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAgentSoftwareVersionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

// WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAgentSoftwareVersionsResponse_PageTokenChange) bool
}

// ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAgentSoftwareVersionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAgentSoftwareVersionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAgentSoftwareVersionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath
}

func ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	case WatchAgentSoftwareVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*agent_software_version.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}
func (fpaov *WatchAgentSoftwareVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*agent_software_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*agent_software_version.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAgentSoftwareVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAgentSoftwareVersionRequest_FieldPathSelector
	Get(source *CreateAgentSoftwareVersionRequest) []interface{}
	GetSingle(source *CreateAgentSoftwareVersionRequest) (interface{}, bool)
	ClearValue(item *CreateAgentSoftwareVersionRequest)

	// Those methods build corresponding CreateAgentSoftwareVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue
}

type CreateAgentSoftwareVersionRequest_FieldPathSelector int32

const (
	CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion CreateAgentSoftwareVersionRequest_FieldPathSelector = 0
)

func (s CreateAgentSoftwareVersionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return "agent_software_version"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", s))
	}
}

func BuildCreateAgentSoftwareVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAgentSoftwareVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAgentSoftwareVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_software_version", "agentSoftwareVersion", "agent-software-version":
			return &CreateAgentSoftwareVersionRequest_FieldTerminalPath{selector: CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion}, nil
		}
	} else {
		switch fp[0] {
		case "agent_software_version", "agentSoftwareVersion", "agent-software-version":
			if subpath, err := agent_software_version.BuildAgentSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAgentSoftwareVersionRequest_FieldSubPath{selector: CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAgentSoftwareVersionRequest", fp)
}

func ParseCreateAgentSoftwareVersionRequest_FieldPath(rawField string) (CreateAgentSoftwareVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAgentSoftwareVersionRequest_FieldPath(fp)
}

func MustParseCreateAgentSoftwareVersionRequest_FieldPath(rawField string) CreateAgentSoftwareVersionRequest_FieldPath {
	fp, err := ParseCreateAgentSoftwareVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAgentSoftwareVersionRequest_FieldTerminalPath struct {
	selector CreateAgentSoftwareVersionRequest_FieldPathSelector
}

var _ CreateAgentSoftwareVersionRequest_FieldPath = (*CreateAgentSoftwareVersionRequest_FieldTerminalPath)(nil)

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) Selector() CreateAgentSoftwareVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAgentSoftwareVersionRequest
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) Get(source *CreateAgentSoftwareVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			if source.AgentSoftwareVersion != nil {
				values = append(values, source.AgentSoftwareVersion)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAgentSoftwareVersionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAgentSoftwareVersionRequest
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) GetSingle(source *CreateAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		res := source.GetAgentSoftwareVersion()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return (*agent_software_version.AgentSoftwareVersion)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) ClearValue(item *CreateAgentSoftwareVersionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			item.AgentSoftwareVersion = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathValue {
	switch fp.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return &CreateAgentSoftwareVersionRequest_FieldTerminalPathValue{CreateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov := &CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{CreateAgentSoftwareVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return &CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{CreateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAgentSoftwareVersionRequest_FieldSubPath struct {
	selector CreateAgentSoftwareVersionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAgentSoftwareVersionRequest_FieldPath = (*CreateAgentSoftwareVersionRequest_FieldSubPath)(nil)

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) Selector() CreateAgentSoftwareVersionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) AsAgentSoftwareVersionSubPath() (agent_software_version.AgentSoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(agent_software_version.AgentSoftwareVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAgentSoftwareVersionRequest
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) Get(source *CreateAgentSoftwareVersionRequest) (values []interface{}) {
	switch fps.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		values = append(values, fps.subPath.GetRaw(source.GetAgentSoftwareVersion())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAgentSoftwareVersionRequest))
}

// GetSingle returns value of selected field from source CreateAgentSoftwareVersionRequest
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) GetSingle(source *CreateAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		if source.GetAgentSoftwareVersion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgentSoftwareVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fps.selector))
	}
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) ClearValue(item *CreateAgentSoftwareVersionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			fps.subPath.ClearValueRaw(item.AgentSoftwareVersion)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateAgentSoftwareVersionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithIValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathValue {
	return &CreateAgentSoftwareVersionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	return &CreateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	return &CreateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAgentSoftwareVersionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAgentSoftwareVersionRequest_FieldPathValue allows storing values for CreateAgentSoftwareVersionRequest fields according to their type
type CreateAgentSoftwareVersionRequest_FieldPathValue interface {
	CreateAgentSoftwareVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAgentSoftwareVersionRequest)
	CompareWith(*CreateAgentSoftwareVersionRequest) (cmp int, comparable bool)
}

func ParseCreateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) (CreateAgentSoftwareVersionRequest_FieldPathValue, error) {
	fp, err := ParseCreateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentSoftwareVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAgentSoftwareVersionRequest_FieldPathValue), nil
}

func MustParseCreateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) CreateAgentSoftwareVersionRequest_FieldPathValue {
	fpv, err := ParseCreateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAgentSoftwareVersionRequest_FieldTerminalPathValue struct {
	CreateAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAgentSoftwareVersionRequest_FieldPathValue = (*CreateAgentSoftwareVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAgentSoftwareVersionRequest' as interface{}
func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) AsAgentSoftwareVersionValue() (*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion)
	return res, ok
}

// SetTo stores value for selected field for object CreateAgentSoftwareVersionRequest
func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) SetTo(target **CreateAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(CreateAgentSoftwareVersionRequest)
	}
	switch fpv.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		(*target).AgentSoftwareVersion = fpv.value.(*agent_software_version.AgentSoftwareVersion)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAgentSoftwareVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAgentSoftwareVersionRequest_FieldTerminalPathValue' with the value under path in 'CreateAgentSoftwareVersionRequest'.
func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWith(source *CreateAgentSoftwareVersionRequest) (int, bool) {
	switch fpv.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAgentSoftwareVersionRequest))
}

type CreateAgentSoftwareVersionRequest_FieldSubPathValue struct {
	CreateAgentSoftwareVersionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAgentSoftwareVersionRequest_FieldPathValue = (*CreateAgentSoftwareVersionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) AsAgentSoftwareVersionPathValue() (agent_software_version.AgentSoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) SetTo(target **CreateAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(CreateAgentSoftwareVersionRequest)
	}
	switch fpvs.Selector() {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).SetTo(&(*target).AgentSoftwareVersion)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAgentSoftwareVersionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) CompareWith(source *CreateAgentSoftwareVersionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).CompareWith(source.GetAgentSoftwareVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAgentSoftwareVersionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAgentSoftwareVersionRequest))
}

// CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAgentSoftwareVersionRequest according to their type
// Present only for array (repeated) types.
type CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAgentSoftwareVersionRequest_FieldPath
	ContainsValue(*CreateAgentSoftwareVersionRequest) bool
}

// ParseCreateAgentSoftwareVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentSoftwareVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue struct {
	CreateAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAgentSoftwareVersionRequest_FieldPathArrayItemValue = (*CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAgentSoftwareVersionRequest as interface{}
func (fpaiv *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAgentSoftwareVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAgentSoftwareVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAgentSoftwareVersionRequest'
func (fpaiv *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAgentSoftwareVersionRequest) bool {
	slice := fpaiv.CreateAgentSoftwareVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue struct {
	CreateAgentSoftwareVersionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) AsAgentSoftwareVersionPathItemValue() (agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAgentSoftwareVersionRequest'
func (fpaivs *CreateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAgentSoftwareVersionRequest) bool {
	switch fpaivs.Selector() {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue).ContainsValue(source.GetAgentSoftwareVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAgentSoftwareVersionRequest: %d", fpaivs.Selector()))
	}
}

// CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues allows storing slice of values for CreateAgentSoftwareVersionRequest fields according to their type
type CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAgentSoftwareVersionRequest_FieldPath
}

func ParseCreateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAgentSoftwareVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues struct {
	CreateAgentSoftwareVersionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsAgentSoftwareVersionArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}

type CreateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues struct {
	CreateAgentSoftwareVersionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*CreateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues) AsAgentSoftwareVersionPathArrayOfValues() (agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAgentSoftwareVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAgentSoftwareVersionRequest_FieldPathSelector
	Get(source *UpdateAgentSoftwareVersionRequest) []interface{}
	GetSingle(source *UpdateAgentSoftwareVersionRequest) (interface{}, bool)
	ClearValue(item *UpdateAgentSoftwareVersionRequest)

	// Those methods build corresponding UpdateAgentSoftwareVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue
}

type UpdateAgentSoftwareVersionRequest_FieldPathSelector int32

const (
	UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion UpdateAgentSoftwareVersionRequest_FieldPathSelector = 0
	UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask           UpdateAgentSoftwareVersionRequest_FieldPathSelector = 1
	UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas                  UpdateAgentSoftwareVersionRequest_FieldPathSelector = 2
)

func (s UpdateAgentSoftwareVersionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return "agent_software_version"
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", s))
	}
}

func BuildUpdateAgentSoftwareVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAgentSoftwareVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAgentSoftwareVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "agent_software_version", "agentSoftwareVersion", "agent-software-version":
			return &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "agent_software_version", "agentSoftwareVersion", "agent-software-version":
			if subpath, err := agent_software_version.BuildAgentSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentSoftwareVersionRequest_FieldSubPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAgentSoftwareVersionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentSoftwareVersionRequest_FieldSubPath{selector: UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAgentSoftwareVersionRequest", fp)
}

func ParseUpdateAgentSoftwareVersionRequest_FieldPath(rawField string) (UpdateAgentSoftwareVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAgentSoftwareVersionRequest_FieldPath(fp)
}

func MustParseUpdateAgentSoftwareVersionRequest_FieldPath(rawField string) UpdateAgentSoftwareVersionRequest_FieldPath {
	fp, err := ParseUpdateAgentSoftwareVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAgentSoftwareVersionRequest_FieldTerminalPath struct {
	selector UpdateAgentSoftwareVersionRequest_FieldPathSelector
}

var _ UpdateAgentSoftwareVersionRequest_FieldPath = (*UpdateAgentSoftwareVersionRequest_FieldTerminalPath)(nil)

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) Selector() UpdateAgentSoftwareVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAgentSoftwareVersionRequest
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) Get(source *UpdateAgentSoftwareVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			if source.AgentSoftwareVersion != nil {
				values = append(values, source.AgentSoftwareVersion)
			}
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAgentSoftwareVersionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAgentSoftwareVersionRequest
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) GetSingle(source *UpdateAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		res := source.GetAgentSoftwareVersion()
		return res, res != nil
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return (*agent_software_version.AgentSoftwareVersion)(nil)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return (*UpdateAgentSoftwareVersionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) ClearValue(item *UpdateAgentSoftwareVersionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			item.AgentSoftwareVersion = nil
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion)}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*UpdateAgentSoftwareVersionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion)}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return &UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAgentSoftwareVersionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAgentSoftwareVersionRequest_FieldSubPath struct {
	selector UpdateAgentSoftwareVersionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAgentSoftwareVersionRequest_FieldPath = (*UpdateAgentSoftwareVersionRequest_FieldSubPath)(nil)

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) Selector() UpdateAgentSoftwareVersionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) AsAgentSoftwareVersionSubPath() (agent_software_version.AgentSoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(agent_software_version.AgentSoftwareVersion_FieldPath)
	return res, ok
}
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) AsCasSubPath() (UpdateAgentSoftwareVersionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAgentSoftwareVersionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAgentSoftwareVersionRequest
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) Get(source *UpdateAgentSoftwareVersionRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		values = append(values, fps.subPath.GetRaw(source.GetAgentSoftwareVersion())...)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAgentSoftwareVersionRequest))
}

// GetSingle returns value of selected field from source UpdateAgentSoftwareVersionRequest
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) GetSingle(source *UpdateAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		if source.GetAgentSoftwareVersion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAgentSoftwareVersion())
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fps.selector))
	}
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) ClearValue(item *UpdateAgentSoftwareVersionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
			fps.subPath.ClearValueRaw(item.AgentSoftwareVersion)
		case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAgentSoftwareVersionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithIValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathValue {
	return &UpdateAgentSoftwareVersionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	return &UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	return &UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAgentSoftwareVersionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAgentSoftwareVersionRequest_FieldPathValue allows storing values for UpdateAgentSoftwareVersionRequest fields according to their type
type UpdateAgentSoftwareVersionRequest_FieldPathValue interface {
	UpdateAgentSoftwareVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAgentSoftwareVersionRequest)
	CompareWith(*UpdateAgentSoftwareVersionRequest) (cmp int, comparable bool)
}

func ParseUpdateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) (UpdateAgentSoftwareVersionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentSoftwareVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAgentSoftwareVersionRequest_FieldPathValue), nil
}

func MustParseUpdateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) UpdateAgentSoftwareVersionRequest_FieldPathValue {
	fpv, err := ParseUpdateAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue struct {
	UpdateAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentSoftwareVersionRequest_FieldPathValue = (*UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAgentSoftwareVersionRequest' as interface{}
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) AsAgentSoftwareVersionValue() (*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAgentSoftwareVersionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAgentSoftwareVersionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAgentSoftwareVersionRequest
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) SetTo(target **UpdateAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(UpdateAgentSoftwareVersionRequest)
	}
	switch fpv.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		(*target).AgentSoftwareVersion = fpv.value.(*agent_software_version.AgentSoftwareVersion)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAgentSoftwareVersionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentSoftwareVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue' with the value under path in 'UpdateAgentSoftwareVersionRequest'.
func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWith(source *UpdateAgentSoftwareVersionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return 0, false
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAgentSoftwareVersionRequest))
}

type UpdateAgentSoftwareVersionRequest_FieldSubPathValue struct {
	UpdateAgentSoftwareVersionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAgentSoftwareVersionRequest_FieldPathValue = (*UpdateAgentSoftwareVersionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) AsAgentSoftwareVersionPathValue() (agent_software_version.AgentSoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) AsCasPathValue() (UpdateAgentSoftwareVersionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAgentSoftwareVersionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) SetTo(target **UpdateAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(UpdateAgentSoftwareVersionRequest)
	}
	switch fpvs.Selector() {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).SetTo(&(*target).AgentSoftwareVersion)
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAgentSoftwareVersionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentSoftwareVersionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) CompareWith(source *UpdateAgentSoftwareVersionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).CompareWith(source.GetAgentSoftwareVersion())
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAgentSoftwareVersionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentSoftwareVersionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAgentSoftwareVersionRequest))
}

// UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAgentSoftwareVersionRequest according to their type
// Present only for array (repeated) types.
type UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAgentSoftwareVersionRequest_FieldPath
	ContainsValue(*UpdateAgentSoftwareVersionRequest) bool
}

// ParseUpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentSoftwareVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentSoftwareVersionRequest_FieldPathArrayItemValue = (*UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAgentSoftwareVersionRequest as interface{}
func (fpaiv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAgentSoftwareVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAgentSoftwareVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAgentSoftwareVersionRequest'
func (fpaiv *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAgentSoftwareVersionRequest) bool {
	slice := fpaiv.UpdateAgentSoftwareVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue struct {
	UpdateAgentSoftwareVersionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) AsAgentSoftwareVersionPathItemValue() (agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAgentSoftwareVersionRequest'
func (fpaivs *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAgentSoftwareVersionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		return fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue).ContainsValue(source.GetAgentSoftwareVersion())
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAgentSoftwareVersionRequest fields according to their type
type UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAgentSoftwareVersionRequest_FieldPath
}

func ParseUpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAgentSoftwareVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAgentSoftwareVersionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorAgentSoftwareVersion:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion) {
			values = append(values, v)
		}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	case UpdateAgentSoftwareVersionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAgentSoftwareVersionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsAgentSoftwareVersionArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpaov *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}
func (fpaov *UpdateAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAgentSoftwareVersionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAgentSoftwareVersionRequest_CAS)
	return res, ok
}

type UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues struct {
	UpdateAgentSoftwareVersionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues) AsAgentSoftwareVersionPathArrayOfValues() (agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAgentSoftwareVersionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAgentSoftwareVersionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector
	Get(source *UpdateAgentSoftwareVersionRequest_CAS) []interface{}
	GetSingle(source *UpdateAgentSoftwareVersionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAgentSoftwareVersionRequest_CAS)

	// Those methods build corresponding UpdateAgentSoftwareVersionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue
}

type UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector int32

const (
	UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector = 0
	UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask        UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector = 1
)

func (s UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", s))
	}
}

func BuildUpdateAgentSoftwareVersionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAgentSoftwareVersionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAgentSoftwareVersionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := agent_software_version.BuildAgentSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAgentSoftwareVersionRequestCAS_FieldSubPath{selector: UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAgentSoftwareVersionRequest_CAS", fp)
}

func ParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(rawField string) (UpdateAgentSoftwareVersionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAgentSoftwareVersionRequestCAS_FieldPath(fp)
}

func MustParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(rawField string) UpdateAgentSoftwareVersionRequestCAS_FieldPath {
	fp, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath struct {
	selector UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPath = (*UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) Selector() UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAgentSoftwareVersionRequest_CAS
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) Get(source *UpdateAgentSoftwareVersionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAgentSoftwareVersionRequest_CAS
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAgentSoftwareVersionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return (*agent_software_version.AgentSoftwareVersion)(nil)
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		return (*agent_software_version.AgentSoftwareVersion_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAgentSoftwareVersionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue{UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion)}
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue{UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath: *fp, value: value.(*agent_software_version.AgentSoftwareVersion_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion)}
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath: *fp, values: values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAgentSoftwareVersionRequestCAS_FieldSubPath struct {
	selector UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPath = (*UpdateAgentSoftwareVersionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) Selector() UpdateAgentSoftwareVersionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (agent_software_version.AgentSoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(agent_software_version.AgentSoftwareVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAgentSoftwareVersionRequest_CAS
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) Get(source *UpdateAgentSoftwareVersionRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAgentSoftwareVersionRequest_CAS
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) GetSingle(source *UpdateAgentSoftwareVersionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) ClearValue(item *UpdateAgentSoftwareVersionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathValue {
	return &UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues {
	return &UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue {
	return &UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAgentSoftwareVersionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAgentSoftwareVersionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAgentSoftwareVersionRequestCAS_FieldPathValue interface {
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAgentSoftwareVersionRequest_CAS)
	CompareWith(*UpdateAgentSoftwareVersionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAgentSoftwareVersionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAgentSoftwareVersionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAgentSoftwareVersionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAgentSoftwareVersionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPathValue = (*UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAgentSoftwareVersionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAgentSoftwareVersionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*agent_software_version.AgentSoftwareVersion)
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*agent_software_version.AgentSoftwareVersion_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentSoftwareVersionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAgentSoftwareVersionRequest_CAS'.
func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAgentSoftwareVersionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

type UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPathValue = (*UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (agent_software_version.AgentSoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) SetTo(target **UpdateAgentSoftwareVersionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAgentSoftwareVersionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAgentSoftwareVersionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAgentSoftwareVersionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(agent_software_version.AgentSoftwareVersion_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
	ContainsValue(*UpdateAgentSoftwareVersionRequest_CAS) bool
}

// ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayItemValue = (*UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAgentSoftwareVersionRequest_CAS as interface{}
func (fpaiv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAgentSoftwareVersionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAgentSoftwareVersionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAgentSoftwareVersionRequest_CAS) bool {
	slice := fpaiv.UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAgentSoftwareVersionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(agent_software_version.AgentSoftwareVersion_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAgentSoftwareVersionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
}

func ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues = (*UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion) {
			values = append(values, v)
		}
	case UpdateAgentSoftwareVersionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion)
	return res, ok
}
func (fpaov *UpdateAgentSoftwareVersionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*agent_software_version.AgentSoftwareVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*agent_software_version.AgentSoftwareVersion_FieldMask)
	return res, ok
}

type UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAgentSoftwareVersionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAgentSoftwareVersionRequestCAS_FieldPathArrayOfValues = (*UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAgentSoftwareVersionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(agent_software_version.AgentSoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAgentSoftwareVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAgentSoftwareVersionRequest_FieldPathSelector
	Get(source *DeleteAgentSoftwareVersionRequest) []interface{}
	GetSingle(source *DeleteAgentSoftwareVersionRequest) (interface{}, bool)
	ClearValue(item *DeleteAgentSoftwareVersionRequest)

	// Those methods build corresponding DeleteAgentSoftwareVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAgentSoftwareVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue
}

type DeleteAgentSoftwareVersionRequest_FieldPathSelector int32

const (
	DeleteAgentSoftwareVersionRequest_FieldPathSelectorName DeleteAgentSoftwareVersionRequest_FieldPathSelector = 0
)

func (s DeleteAgentSoftwareVersionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", s))
	}
}

func BuildDeleteAgentSoftwareVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAgentSoftwareVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAgentSoftwareVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAgentSoftwareVersionRequest_FieldTerminalPath{selector: DeleteAgentSoftwareVersionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAgentSoftwareVersionRequest", fp)
}

func ParseDeleteAgentSoftwareVersionRequest_FieldPath(rawField string) (DeleteAgentSoftwareVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAgentSoftwareVersionRequest_FieldPath(fp)
}

func MustParseDeleteAgentSoftwareVersionRequest_FieldPath(rawField string) DeleteAgentSoftwareVersionRequest_FieldPath {
	fp, err := ParseDeleteAgentSoftwareVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAgentSoftwareVersionRequest_FieldTerminalPath struct {
	selector DeleteAgentSoftwareVersionRequest_FieldPathSelector
}

var _ DeleteAgentSoftwareVersionRequest_FieldPath = (*DeleteAgentSoftwareVersionRequest_FieldTerminalPath)(nil)

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) Selector() DeleteAgentSoftwareVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAgentSoftwareVersionRequest
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) Get(source *DeleteAgentSoftwareVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAgentSoftwareVersionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAgentSoftwareVersionRequest
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) GetSingle(source *DeleteAgentSoftwareVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAgentSoftwareVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		return (*agent_software_version.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) ClearValue(item *DeleteAgentSoftwareVersionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAgentSoftwareVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAgentSoftwareVersionRequest_FieldPathSelectorName
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAgentSoftwareVersionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue{DeleteAgentSoftwareVersionRequest_FieldTerminalPath: *fp, value: value.(*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{DeleteAgentSoftwareVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		return &DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues{DeleteAgentSoftwareVersionRequest_FieldTerminalPath: *fp, values: values.([]*agent_software_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteAgentSoftwareVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAgentSoftwareVersionRequest_FieldPathValue allows storing values for DeleteAgentSoftwareVersionRequest fields according to their type
type DeleteAgentSoftwareVersionRequest_FieldPathValue interface {
	DeleteAgentSoftwareVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAgentSoftwareVersionRequest)
	CompareWith(*DeleteAgentSoftwareVersionRequest) (cmp int, comparable bool)
}

func ParseDeleteAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) (DeleteAgentSoftwareVersionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentSoftwareVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAgentSoftwareVersionRequest_FieldPathValue), nil
}

func MustParseDeleteAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr string) DeleteAgentSoftwareVersionRequest_FieldPathValue {
	fpv, err := ParseDeleteAgentSoftwareVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue struct {
	DeleteAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAgentSoftwareVersionRequest_FieldPathValue = (*DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAgentSoftwareVersionRequest' as interface{}
func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) AsNameValue() (*agent_software_version.Reference, bool) {
	res, ok := fpv.value.(*agent_software_version.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAgentSoftwareVersionRequest
func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) SetTo(target **DeleteAgentSoftwareVersionRequest) {
	if *target == nil {
		*target = new(DeleteAgentSoftwareVersionRequest)
	}
	switch fpv.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*agent_software_version.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAgentSoftwareVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue' with the value under path in 'DeleteAgentSoftwareVersionRequest'.
func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWith(source *DeleteAgentSoftwareVersionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*agent_software_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAgentSoftwareVersionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAgentSoftwareVersionRequest))
}

// DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAgentSoftwareVersionRequest according to their type
// Present only for array (repeated) types.
type DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAgentSoftwareVersionRequest_FieldPath
	ContainsValue(*DeleteAgentSoftwareVersionRequest) bool
}

// ParseDeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentSoftwareVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAgentSoftwareVersionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAgentSoftwareVersionRequest_FieldPathArrayItemValue = (*DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAgentSoftwareVersionRequest as interface{}
func (fpaiv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAgentSoftwareVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAgentSoftwareVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAgentSoftwareVersionRequest'
func (fpaiv *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAgentSoftwareVersionRequest) bool {
	slice := fpaiv.DeleteAgentSoftwareVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAgentSoftwareVersionRequest fields according to their type
type DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAgentSoftwareVersionRequest_FieldPath
}

func ParseDeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAgentSoftwareVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAgentSoftwareVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAgentSoftwareVersionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAgentSoftwareVersionRequest_FieldPathArrayOfValues = (*DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAgentSoftwareVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*agent_software_version.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAgentSoftwareVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*agent_software_version.Reference, bool) {
	res, ok := fpaov.values.([]*agent_software_version.Reference)
	return res, ok
}
