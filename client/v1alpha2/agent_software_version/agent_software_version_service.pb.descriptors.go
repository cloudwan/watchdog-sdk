// Code generated by protoc-gen-goten-client
// API: AgentSoftwareVersionService
// DO NOT EDIT!!!

package agent_software_version_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	agent_software_version "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/agent_software_version"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &agent_software_version.AgentSoftwareVersion{}
)

var (
	descriptorsInitialized                  bool
	agentSoftwareVersionServiceDescriptor   *AgentSoftwareVersionServiceDescriptor
	getAgentSoftwareVersionDescriptor       *GetAgentSoftwareVersionDescriptor
	batchGetAgentSoftwareVersionsDescriptor *BatchGetAgentSoftwareVersionsDescriptor
	listAgentSoftwareVersionsDescriptor     *ListAgentSoftwareVersionsDescriptor
	watchAgentSoftwareVersionDescriptor     *WatchAgentSoftwareVersionDescriptor
	watchAgentSoftwareVersionsDescriptor    *WatchAgentSoftwareVersionsDescriptor
	createAgentSoftwareVersionDescriptor    *CreateAgentSoftwareVersionDescriptor
	updateAgentSoftwareVersionDescriptor    *UpdateAgentSoftwareVersionDescriptor
	deleteAgentSoftwareVersionDescriptor    *DeleteAgentSoftwareVersionDescriptor
)

type GetAgentSoftwareVersionDescriptor struct{}

type GetAgentSoftwareVersionDescriptorClientMsgHandle struct{}

type GetAgentSoftwareVersionDescriptorServerMsgHandle struct{}

func (d *GetAgentSoftwareVersionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAgentSoftwareVersionRequest{}
}

func (d *GetAgentSoftwareVersionDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent_software_version.AgentSoftwareVersion{}
}

func (d *GetAgentSoftwareVersionDescriptor) IsUnary() bool {
	return true
}

func (d *GetAgentSoftwareVersionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAgentSoftwareVersionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAgentSoftwareVersionDescriptor) IsCollection() bool {
	return false
}

func (d *GetAgentSoftwareVersionDescriptor) IsPlural() bool {
	return false
}

func (d *GetAgentSoftwareVersionDescriptor) HasResource() bool {
	return true
}

func (d *GetAgentSoftwareVersionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAgentSoftwareVersionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAgentSoftwareVersionDescriptor) GetMethodName() string {
	return "GetAgentSoftwareVersion"
}

func (d *GetAgentSoftwareVersionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/GetAgentSoftwareVersion"
}

func (d *GetAgentSoftwareVersionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetAgentSoftwareVersionDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *GetAgentSoftwareVersionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetAgentSoftwareVersionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetAgentSoftwareVersionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *GetAgentSoftwareVersionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *GetAgentSoftwareVersionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAgentSoftwareVersionDescriptorClientMsgHandle{}
}

func (d *GetAgentSoftwareVersionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAgentSoftwareVersionDescriptorServerMsgHandle{}
}

func (h *GetAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetAgentSoftwareVersionRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *GetAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetAgentSoftwareVersionRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAgentSoftwareVersionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent_software_version.AgentSoftwareVersion) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *GetAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent_software_version.AgentSoftwareVersion) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAgentSoftwareVersionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetAgentSoftwareVersionDescriptor() *GetAgentSoftwareVersionDescriptor {
	return getAgentSoftwareVersionDescriptor
}

type BatchGetAgentSoftwareVersionsDescriptor struct{}

type BatchGetAgentSoftwareVersionsDescriptorClientMsgHandle struct{}

type BatchGetAgentSoftwareVersionsDescriptorServerMsgHandle struct{}

func (d *BatchGetAgentSoftwareVersionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAgentSoftwareVersionsRequest{}
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAgentSoftwareVersionsResponse{}
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetMethodName() string {
	return "BatchGetAgentSoftwareVersions"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/BatchGetAgentSoftwareVersions"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAgentSoftwareVersionsDescriptorClientMsgHandle{}
}

func (d *BatchGetAgentSoftwareVersionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAgentSoftwareVersionsDescriptorServerMsgHandle{}
}

func (h *BatchGetAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAgentSoftwareVersionsRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAgentSoftwareVersionsRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(agent_software_version.AgentSoftwareVersionNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (agent_software_version.AgentSoftwareVersionNameList)(nil)
}

func (h *BatchGetAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAgentSoftwareVersionsResponse) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAgentSoftwareVersionsResponse) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAgentSoftwareVersions(); len(resources) > 0 {
			list := make(agent_software_version.AgentSoftwareVersionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (agent_software_version.AgentSoftwareVersionNameList)(nil)
}

func (h *BatchGetAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetAgentSoftwareVersionsDescriptor() *BatchGetAgentSoftwareVersionsDescriptor {
	return batchGetAgentSoftwareVersionsDescriptor
}

type ListAgentSoftwareVersionsDescriptor struct{}

type ListAgentSoftwareVersionsDescriptorClientMsgHandle struct{}

type ListAgentSoftwareVersionsDescriptorServerMsgHandle struct{}

func (d *ListAgentSoftwareVersionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAgentSoftwareVersionsRequest{}
}

func (d *ListAgentSoftwareVersionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAgentSoftwareVersionsResponse{}
}

func (d *ListAgentSoftwareVersionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAgentSoftwareVersionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAgentSoftwareVersionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAgentSoftwareVersionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListAgentSoftwareVersionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListAgentSoftwareVersionsDescriptor) HasResource() bool {
	return true
}

func (d *ListAgentSoftwareVersionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAgentSoftwareVersionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetMethodName() string {
	return "ListAgentSoftwareVersions"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/ListAgentSoftwareVersions"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListAgentSoftwareVersionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *ListAgentSoftwareVersionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *ListAgentSoftwareVersionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAgentSoftwareVersionsDescriptorClientMsgHandle{}
}

func (d *ListAgentSoftwareVersionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAgentSoftwareVersionsDescriptorServerMsgHandle{}
}

func (h *ListAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAgentSoftwareVersionsRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAgentSoftwareVersionsRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAgentSoftwareVersionsResponse) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAgentSoftwareVersionsResponse) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAgentSoftwareVersions(); len(resources) > 0 {
			list := make(agent_software_version.AgentSoftwareVersionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (agent_software_version.AgentSoftwareVersionNameList)(nil)
}

func (h *ListAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListAgentSoftwareVersionsDescriptor() *ListAgentSoftwareVersionsDescriptor {
	return listAgentSoftwareVersionsDescriptor
}

type WatchAgentSoftwareVersionDescriptor struct{}

type WatchAgentSoftwareVersionDescriptorClientMsgHandle struct{}

type WatchAgentSoftwareVersionDescriptorServerMsgHandle struct{}

func (d *WatchAgentSoftwareVersionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAgentSoftwareVersionRequest{}
}

func (d *WatchAgentSoftwareVersionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAgentSoftwareVersionResponse{}
}

func (d *WatchAgentSoftwareVersionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAgentSoftwareVersionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAgentSoftwareVersionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAgentSoftwareVersionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchAgentSoftwareVersionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchAgentSoftwareVersionDescriptor) HasResource() bool {
	return true
}

func (d *WatchAgentSoftwareVersionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAgentSoftwareVersionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetMethodName() string {
	return "WatchAgentSoftwareVersion"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/WatchAgentSoftwareVersion"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAgentSoftwareVersionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *WatchAgentSoftwareVersionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *WatchAgentSoftwareVersionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentSoftwareVersionDescriptorClientMsgHandle{}
}

func (d *WatchAgentSoftwareVersionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentSoftwareVersionDescriptorServerMsgHandle{}
}

func (h *WatchAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentSoftwareVersionRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *WatchAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentSoftwareVersionRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentSoftwareVersionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentSoftwareVersionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentSoftwareVersionResponse) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *agent_software_version.AgentSoftwareVersionChange_Added_:
				return tResChange.Added.GetAgentSoftwareVersion().GetName()
			case *agent_software_version.AgentSoftwareVersionChange_Modified_:
				return tResChange.Modified.GetName()
			case *agent_software_version.AgentSoftwareVersionChange_Removed_:
				return tResChange.Removed.GetName()
			case *agent_software_version.AgentSoftwareVersionChange_Current_:
				return tResChange.Current.GetAgentSoftwareVersion().GetName()
			}
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *WatchAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentSoftwareVersionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentSoftwareVersionResponse) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentSoftwareVersionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchAgentSoftwareVersionDescriptor() *WatchAgentSoftwareVersionDescriptor {
	return watchAgentSoftwareVersionDescriptor
}

type WatchAgentSoftwareVersionsDescriptor struct{}

type WatchAgentSoftwareVersionsDescriptorClientMsgHandle struct{}

type WatchAgentSoftwareVersionsDescriptorServerMsgHandle struct{}

func (d *WatchAgentSoftwareVersionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAgentSoftwareVersionsRequest{}
}

func (d *WatchAgentSoftwareVersionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAgentSoftwareVersionsResponse{}
}

func (d *WatchAgentSoftwareVersionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAgentSoftwareVersionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAgentSoftwareVersionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAgentSoftwareVersionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchAgentSoftwareVersionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchAgentSoftwareVersionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchAgentSoftwareVersionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetMethodName() string {
	return "WatchAgentSoftwareVersions"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/WatchAgentSoftwareVersions"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentSoftwareVersionsDescriptorClientMsgHandle{}
}

func (d *WatchAgentSoftwareVersionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAgentSoftwareVersionsDescriptorServerMsgHandle{}
}

func (h *WatchAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentSoftwareVersionsRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentSoftwareVersionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentSoftwareVersionsRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAgentSoftwareVersionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAgentSoftwareVersionsResponse) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAgentSoftwareVersionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAgentSoftwareVersionsResponse) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetAgentSoftwareVersionChanges(); len(resChanges) > 0 {
			list := make(agent_software_version.AgentSoftwareVersionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *agent_software_version.AgentSoftwareVersionChange_Added_:
					list = append(list, tResChange.Added.GetAgentSoftwareVersion().GetName())
				case *agent_software_version.AgentSoftwareVersionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *agent_software_version.AgentSoftwareVersionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *agent_software_version.AgentSoftwareVersionChange_Current_:
					list = append(list, tResChange.Current.GetAgentSoftwareVersion().GetName())
				}
			}
			return list
		}
	}
	return (agent_software_version.AgentSoftwareVersionNameList)(nil)
}

func (h *WatchAgentSoftwareVersionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchAgentSoftwareVersionsDescriptor() *WatchAgentSoftwareVersionsDescriptor {
	return watchAgentSoftwareVersionsDescriptor
}

type CreateAgentSoftwareVersionDescriptor struct{}

type CreateAgentSoftwareVersionDescriptorClientMsgHandle struct{}

type CreateAgentSoftwareVersionDescriptorServerMsgHandle struct{}

func (d *CreateAgentSoftwareVersionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAgentSoftwareVersionRequest{}
}

func (d *CreateAgentSoftwareVersionDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent_software_version.AgentSoftwareVersion{}
}

func (d *CreateAgentSoftwareVersionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAgentSoftwareVersionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAgentSoftwareVersionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAgentSoftwareVersionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateAgentSoftwareVersionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateAgentSoftwareVersionDescriptor) HasResource() bool {
	return true
}

func (d *CreateAgentSoftwareVersionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAgentSoftwareVersionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetMethodName() string {
	return "CreateAgentSoftwareVersion"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/CreateAgentSoftwareVersion"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateAgentSoftwareVersionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *CreateAgentSoftwareVersionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *CreateAgentSoftwareVersionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAgentSoftwareVersionDescriptorClientMsgHandle{}
}

func (d *CreateAgentSoftwareVersionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAgentSoftwareVersionDescriptorServerMsgHandle{}
}

func (h *CreateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateAgentSoftwareVersionRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAgentSoftwareVersion()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *CreateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateAgentSoftwareVersionRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent_software_version.AgentSoftwareVersion) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *CreateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent_software_version.AgentSoftwareVersion) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateAgentSoftwareVersionDescriptor() *CreateAgentSoftwareVersionDescriptor {
	return createAgentSoftwareVersionDescriptor
}

type UpdateAgentSoftwareVersionDescriptor struct{}

type UpdateAgentSoftwareVersionDescriptorClientMsgHandle struct{}

type UpdateAgentSoftwareVersionDescriptorServerMsgHandle struct{}

func (d *UpdateAgentSoftwareVersionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAgentSoftwareVersionRequest{}
}

func (d *UpdateAgentSoftwareVersionDescriptor) NewEmptyServerMsg() proto.Message {
	return &agent_software_version.AgentSoftwareVersion{}
}

func (d *UpdateAgentSoftwareVersionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAgentSoftwareVersionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAgentSoftwareVersionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAgentSoftwareVersionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateAgentSoftwareVersionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateAgentSoftwareVersionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateAgentSoftwareVersionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetMethodName() string {
	return "UpdateAgentSoftwareVersion"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/UpdateAgentSoftwareVersion"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAgentSoftwareVersionDescriptorClientMsgHandle{}
}

func (d *UpdateAgentSoftwareVersionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAgentSoftwareVersionDescriptorServerMsgHandle{}
}

func (h *UpdateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateAgentSoftwareVersionRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAgentSoftwareVersion()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *UpdateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateAgentSoftwareVersionRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAgentSoftwareVersionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*agent_software_version.AgentSoftwareVersion) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *UpdateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*agent_software_version.AgentSoftwareVersion)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*agent_software_version.AgentSoftwareVersion) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAgentSoftwareVersionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateAgentSoftwareVersionDescriptor() *UpdateAgentSoftwareVersionDescriptor {
	return updateAgentSoftwareVersionDescriptor
}

type DeleteAgentSoftwareVersionDescriptor struct{}

type DeleteAgentSoftwareVersionDescriptorClientMsgHandle struct{}

type DeleteAgentSoftwareVersionDescriptorServerMsgHandle struct{}

func (d *DeleteAgentSoftwareVersionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAgentSoftwareVersionRequest{}
}

func (d *DeleteAgentSoftwareVersionDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAgentSoftwareVersionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAgentSoftwareVersionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAgentSoftwareVersionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAgentSoftwareVersionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteAgentSoftwareVersionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteAgentSoftwareVersionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteAgentSoftwareVersionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetMethodName() string {
	return "DeleteAgentSoftwareVersion"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService/DeleteAgentSoftwareVersion"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return agent_software_version.GetDescriptor()
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAgentSoftwareVersionDescriptorClientMsgHandle{}
}

func (d *DeleteAgentSoftwareVersionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAgentSoftwareVersionDescriptorServerMsgHandle{}
}

func (h *DeleteAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteAgentSoftwareVersionRequest) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*agent_software_version.Name)(nil)
}

func (h *DeleteAgentSoftwareVersionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAgentSoftwareVersionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteAgentSoftwareVersionRequest) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAgentSoftwareVersionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *agent_software_version.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAgentSoftwareVersionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*agent_software_version.Name
	})
	if ok {
		return agent_software_version.AgentSoftwareVersionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAgentSoftwareVersionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteAgentSoftwareVersionDescriptor() *DeleteAgentSoftwareVersionDescriptor {
	return deleteAgentSoftwareVersionDescriptor
}

type AgentSoftwareVersionServiceDescriptor struct{}

func (d *AgentSoftwareVersionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAgentSoftwareVersionDescriptor,
		batchGetAgentSoftwareVersionsDescriptor,
		listAgentSoftwareVersionsDescriptor,
		watchAgentSoftwareVersionDescriptor,
		watchAgentSoftwareVersionsDescriptor,
		createAgentSoftwareVersionDescriptor,
		updateAgentSoftwareVersionDescriptor,
		deleteAgentSoftwareVersionDescriptor,
	}
}

func (d *AgentSoftwareVersionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.AgentSoftwareVersionService"
}

func (d *AgentSoftwareVersionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *AgentSoftwareVersionServiceDescriptor) GetApiName() string {
	return "AgentSoftwareVersionService"
}

func (d *AgentSoftwareVersionServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *AgentSoftwareVersionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAgentSoftwareVersionServiceDescriptor() *AgentSoftwareVersionServiceDescriptor {
	return agentSoftwareVersionServiceDescriptor
}

func initDescriptors() {
	agentSoftwareVersionServiceDescriptor = &AgentSoftwareVersionServiceDescriptor{}
	getAgentSoftwareVersionDescriptor = &GetAgentSoftwareVersionDescriptor{}
	batchGetAgentSoftwareVersionsDescriptor = &BatchGetAgentSoftwareVersionsDescriptor{}
	listAgentSoftwareVersionsDescriptor = &ListAgentSoftwareVersionsDescriptor{}
	watchAgentSoftwareVersionDescriptor = &WatchAgentSoftwareVersionDescriptor{}
	watchAgentSoftwareVersionsDescriptor = &WatchAgentSoftwareVersionsDescriptor{}
	createAgentSoftwareVersionDescriptor = &CreateAgentSoftwareVersionDescriptor{}
	updateAgentSoftwareVersionDescriptor = &UpdateAgentSoftwareVersionDescriptor{}
	deleteAgentSoftwareVersionDescriptor = &DeleteAgentSoftwareVersionDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(agentSoftwareVersionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAgentSoftwareVersionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAgentSoftwareVersionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAgentSoftwareVersionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAgentSoftwareVersionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAgentSoftwareVersionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAgentSoftwareVersionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAgentSoftwareVersionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAgentSoftwareVersionDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
