// Code generated by protoc-gen-goten-client
// API: TagService
// DO NOT EDIT!!!

package tag_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	tag "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/tag"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &tag.Tag{}
)

var (
	descriptorsInitialized bool
	tagServiceDescriptor   *TagServiceDescriptor
	getTagDescriptor       *GetTagDescriptor
	batchGetTagsDescriptor *BatchGetTagsDescriptor
	listTagsDescriptor     *ListTagsDescriptor
	watchTagDescriptor     *WatchTagDescriptor
	watchTagsDescriptor    *WatchTagsDescriptor
	createTagDescriptor    *CreateTagDescriptor
	updateTagDescriptor    *UpdateTagDescriptor
	deleteTagDescriptor    *DeleteTagDescriptor
)

type GetTagDescriptor struct{}

type GetTagDescriptorClientMsgHandle struct{}

type GetTagDescriptorServerMsgHandle struct{}

func (d *GetTagDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetTagRequest{}
}

func (d *GetTagDescriptor) NewEmptyServerMsg() proto.Message {
	return &tag.Tag{}
}

func (d *GetTagDescriptor) IsUnary() bool {
	return true
}

func (d *GetTagDescriptor) IsClientStream() bool {
	return false
}

func (d *GetTagDescriptor) IsServerStream() bool {
	return false
}

func (d *GetTagDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetTagDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetTagDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetTagDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetTagDescriptor) GetVerb() string {
	return "get"
}

func (d *GetTagDescriptor) GetMethodName() string {
	return "GetTag"
}

func (d *GetTagDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/GetTag"
}

func (d *GetTagDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetTagDescriptor) GetApiName() string {
	return "TagService"
}

func (d *GetTagDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetTagDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetTagDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *GetTagDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *GetTagDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTagDescriptorClientMsgHandle{}
}

func (d *GetTagDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetTagDescriptorServerMsgHandle{}
}

func (h *GetTagDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetTagRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*tag.Name)(nil)
}

func (h *GetTagDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetTagRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTagDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetTagRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetTagDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*tag.Tag) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetTagDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*tag.Tag) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetTagDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*tag.Tag) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetTagDescriptor() *GetTagDescriptor {
	return getTagDescriptor
}

type BatchGetTagsDescriptor struct{}

type BatchGetTagsDescriptorClientMsgHandle struct{}

type BatchGetTagsDescriptorServerMsgHandle struct{}

func (d *BatchGetTagsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetTagsRequest{}
}

func (d *BatchGetTagsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetTagsResponse{}
}

func (d *BatchGetTagsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetTagsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetTagsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetTagsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetTagsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetTagsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetTagsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetTagsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetTagsDescriptor) GetMethodName() string {
	return "BatchGetTags"
}

func (d *BatchGetTagsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/BatchGetTags"
}

func (d *BatchGetTagsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetTagsDescriptor) GetApiName() string {
	return "TagService"
}

func (d *BatchGetTagsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetTagsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetTagsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *BatchGetTagsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *BatchGetTagsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTagsDescriptorClientMsgHandle{}
}

func (d *BatchGetTagsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetTagsDescriptorServerMsgHandle{}
}

func (h *BatchGetTagsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetTagsRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTagsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetTagsRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(tag.TagNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (tag.TagNameList)(nil)
}

func (h *BatchGetTagsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetTagsRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetTagsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetTagsResponse) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetTagsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetTagsResponse) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetTags()
	list := make(tag.TagNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetTagsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetTagsResponse) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetTagsDescriptor() *BatchGetTagsDescriptor {
	return batchGetTagsDescriptor
}

type ListTagsDescriptor struct{}

type ListTagsDescriptorClientMsgHandle struct{}

type ListTagsDescriptorServerMsgHandle struct{}

func (d *ListTagsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListTagsRequest{}
}

func (d *ListTagsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListTagsResponse{}
}

func (d *ListTagsDescriptor) IsUnary() bool {
	return true
}

func (d *ListTagsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListTagsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListTagsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListTagsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListTagsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListTagsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListTagsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListTagsDescriptor) GetMethodName() string {
	return "ListTags"
}

func (d *ListTagsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/ListTags"
}

func (d *ListTagsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListTagsDescriptor) GetApiName() string {
	return "TagService"
}

func (d *ListTagsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListTagsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListTagsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *ListTagsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *ListTagsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTagsDescriptorClientMsgHandle{}
}

func (d *ListTagsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListTagsDescriptorServerMsgHandle{}
}

func (h *ListTagsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListTagsRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListTagsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListTagsRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListTagsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListTagsRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListTagsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListTagsResponse) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListTagsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListTagsResponse) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetTags()
	list := make(tag.TagNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListTagsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListTagsResponse) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListTagsDescriptor() *ListTagsDescriptor {
	return listTagsDescriptor
}

type WatchTagDescriptor struct{}

type WatchTagDescriptorClientMsgHandle struct{}

type WatchTagDescriptorServerMsgHandle struct{}

func (d *WatchTagDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTagRequest{}
}

func (d *WatchTagDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTagResponse{}
}

func (d *WatchTagDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTagDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTagDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTagDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchTagDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchTagDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchTagDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTagDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTagDescriptor) GetMethodName() string {
	return "WatchTag"
}

func (d *WatchTagDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/WatchTag"
}

func (d *WatchTagDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchTagDescriptor) GetApiName() string {
	return "TagService"
}

func (d *WatchTagDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchTagDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchTagDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *WatchTagDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *WatchTagDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTagDescriptorClientMsgHandle{}
}

func (d *WatchTagDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTagDescriptorServerMsgHandle{}
}

func (h *WatchTagDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchTagRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*tag.Name)(nil)
}

func (h *WatchTagDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchTagRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTagDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchTagRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchTagDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchTagResponse) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *tag.TagChange_Added_:
			return tResChange.Added.GetTag().GetName()
		case *tag.TagChange_Modified_:
			return tResChange.Modified.GetName()
		case *tag.TagChange_Removed_:
			return tResChange.Removed.GetName()
		case *tag.TagChange_Current_:
			return tResChange.Current.GetTag().GetName()
		}
	}
	return (*tag.Name)(nil)
}

func (h *WatchTagDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTagResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchTagResponse) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTagDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchTagResponse) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchTagDescriptor() *WatchTagDescriptor {
	return watchTagDescriptor
}

type WatchTagsDescriptor struct{}

type WatchTagsDescriptorClientMsgHandle struct{}

type WatchTagsDescriptorServerMsgHandle struct{}

func (d *WatchTagsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchTagsRequest{}
}

func (d *WatchTagsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchTagsResponse{}
}

func (d *WatchTagsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchTagsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchTagsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchTagsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchTagsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchTagsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchTagsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchTagsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchTagsDescriptor) GetMethodName() string {
	return "WatchTags"
}

func (d *WatchTagsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/WatchTags"
}

func (d *WatchTagsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchTagsDescriptor) GetApiName() string {
	return "TagService"
}

func (d *WatchTagsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchTagsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchTagsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *WatchTagsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *WatchTagsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTagsDescriptorClientMsgHandle{}
}

func (d *WatchTagsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchTagsDescriptorServerMsgHandle{}
}

func (h *WatchTagsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchTagsRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTagsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchTagsRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchTagsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchTagsRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*tag.ParentName)(nil)
}

func (h *WatchTagsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchTagsResponse) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchTagsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchTagsResponse) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetTagChanges()
	list := make(tag.TagNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *tag.TagChange_Added_:
			list = append(list, tResChange.Added.GetTag().GetName())
		case *tag.TagChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *tag.TagChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *tag.TagChange_Current_:
			list = append(list, tResChange.Current.GetTag().GetName())
		}
	}
	return list
}

func (h *WatchTagsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchTagsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchTagsResponse) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchTagsDescriptor() *WatchTagsDescriptor {
	return watchTagsDescriptor
}

type CreateTagDescriptor struct{}

type CreateTagDescriptorClientMsgHandle struct{}

type CreateTagDescriptorServerMsgHandle struct{}

func (d *CreateTagDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateTagRequest{}
}

func (d *CreateTagDescriptor) NewEmptyServerMsg() proto.Message {
	return &tag.Tag{}
}

func (d *CreateTagDescriptor) IsUnary() bool {
	return true
}

func (d *CreateTagDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateTagDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateTagDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateTagDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateTagDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateTagDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateTagDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateTagDescriptor) GetMethodName() string {
	return "CreateTag"
}

func (d *CreateTagDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/CreateTag"
}

func (d *CreateTagDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateTagDescriptor) GetApiName() string {
	return "TagService"
}

func (d *CreateTagDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateTagDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateTagDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *CreateTagDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *CreateTagDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTagDescriptorClientMsgHandle{}
}

func (d *CreateTagDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateTagDescriptorServerMsgHandle{}
}

func (h *CreateTagDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateTagRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetTag().GetName()
}

func (h *CreateTagDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateTagRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTagDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateTagRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*tag.ParentName)(nil)
}

func (h *CreateTagDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*tag.Tag) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateTagDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*tag.Tag) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateTagDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*tag.Tag) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateTagDescriptor() *CreateTagDescriptor {
	return createTagDescriptor
}

type UpdateTagDescriptor struct{}

type UpdateTagDescriptorClientMsgHandle struct{}

type UpdateTagDescriptorServerMsgHandle struct{}

func (d *UpdateTagDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateTagRequest{}
}

func (d *UpdateTagDescriptor) NewEmptyServerMsg() proto.Message {
	return &tag.Tag{}
}

func (d *UpdateTagDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateTagDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateTagDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateTagDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateTagDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateTagDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateTagDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateTagDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateTagDescriptor) GetMethodName() string {
	return "UpdateTag"
}

func (d *UpdateTagDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/UpdateTag"
}

func (d *UpdateTagDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateTagDescriptor) GetApiName() string {
	return "TagService"
}

func (d *UpdateTagDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateTagDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateTagDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *UpdateTagDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *UpdateTagDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTagDescriptorClientMsgHandle{}
}

func (d *UpdateTagDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateTagDescriptorServerMsgHandle{}
}

func (h *UpdateTagDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateTagRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetTag().GetName()
}

func (h *UpdateTagDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateTagRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTagDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateTagRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateTagDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*tag.Tag) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateTagDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*tag.Tag) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateTagDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*tag.Tag)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*tag.Tag) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateTagDescriptor() *UpdateTagDescriptor {
	return updateTagDescriptor
}

type DeleteTagDescriptor struct{}

type DeleteTagDescriptorClientMsgHandle struct{}

type DeleteTagDescriptorServerMsgHandle struct{}

func (d *DeleteTagDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteTagRequest{}
}

func (d *DeleteTagDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteTagDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteTagDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteTagDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteTagDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteTagDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteTagDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteTagDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteTagDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteTagDescriptor) GetMethodName() string {
	return "DeleteTag"
}

func (d *DeleteTagDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.TagService/DeleteTag"
}

func (d *DeleteTagDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteTagDescriptor) GetApiName() string {
	return "TagService"
}

func (d *DeleteTagDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteTagDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteTagDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return tagServiceDescriptor
}

func (d *DeleteTagDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return tag.GetDescriptor()
}

func (d *DeleteTagDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTagDescriptorClientMsgHandle{}
}

func (d *DeleteTagDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteTagDescriptorServerMsgHandle{}
}

func (h *DeleteTagDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteTagRequest) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*tag.Name)(nil)
}

func (h *DeleteTagDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteTagRequest) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTagDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteTagRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteTagRequest) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteTagDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *tag.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteTagDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*tag.Name
	})
	if ok {
		return tag.TagNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteTagDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *tag.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteTagDescriptor() *DeleteTagDescriptor {
	return deleteTagDescriptor
}

type TagServiceDescriptor struct{}

func (d *TagServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getTagDescriptor,
		batchGetTagsDescriptor,
		listTagsDescriptor,
		watchTagDescriptor,
		watchTagsDescriptor,
		createTagDescriptor,
		updateTagDescriptor,
		deleteTagDescriptor,
	}
}

func (d *TagServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.TagService"
}

func (d *TagServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *TagServiceDescriptor) GetApiName() string {
	return "TagService"
}

func (d *TagServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *TagServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetTagServiceDescriptor() *TagServiceDescriptor {
	return tagServiceDescriptor
}

func initDescriptors() {
	tagServiceDescriptor = &TagServiceDescriptor{}
	getTagDescriptor = &GetTagDescriptor{}
	batchGetTagsDescriptor = &BatchGetTagsDescriptor{}
	listTagsDescriptor = &ListTagsDescriptor{}
	watchTagDescriptor = &WatchTagDescriptor{}
	watchTagsDescriptor = &WatchTagsDescriptor{}
	createTagDescriptor = &CreateTagDescriptor{}
	updateTagDescriptor = &UpdateTagDescriptor{}
	deleteTagDescriptor = &DeleteTagDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(tagServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getTagDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetTagsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listTagsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTagDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchTagsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createTagDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateTagDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteTagDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
