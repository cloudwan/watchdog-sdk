// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/tag_service.proto
// DO NOT EDIT!!!

package tag_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	tag "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/tag"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &tag.Tag{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetTagRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetTagRequest_FieldPathSelector
	Get(source *GetTagRequest) []interface{}
	GetSingle(source *GetTagRequest) (interface{}, bool)
	ClearValue(item *GetTagRequest)

	// Those methods build corresponding GetTagRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetTagRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetTagRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetTagRequest_FieldPathArrayItemValue
}

type GetTagRequest_FieldPathSelector int32

const (
	GetTagRequest_FieldPathSelectorName      GetTagRequest_FieldPathSelector = 0
	GetTagRequest_FieldPathSelectorFieldMask GetTagRequest_FieldPathSelector = 1
	GetTagRequest_FieldPathSelectorView      GetTagRequest_FieldPathSelector = 2
)

func (s GetTagRequest_FieldPathSelector) String() string {
	switch s {
	case GetTagRequest_FieldPathSelectorName:
		return "name"
	case GetTagRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetTagRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", s))
	}
}

func BuildGetTagRequest_FieldPath(fp gotenobject.RawFieldPath) (GetTagRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetTagRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetTagRequest", fp)
}

func ParseGetTagRequest_FieldPath(rawField string) (GetTagRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetTagRequest_FieldPath(fp)
}

func MustParseGetTagRequest_FieldPath(rawField string) GetTagRequest_FieldPath {
	fp, err := ParseGetTagRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetTagRequest_FieldTerminalPath struct {
	selector GetTagRequest_FieldPathSelector
}

var _ GetTagRequest_FieldPath = (*GetTagRequest_FieldTerminalPath)(nil)

func (fp *GetTagRequest_FieldTerminalPath) Selector() GetTagRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetTagRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetTagRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetTagRequest
func (fp *GetTagRequest_FieldTerminalPath) Get(source *GetTagRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetTagRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetTagRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetTagRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetTagRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetTagRequest))
}

// GetSingle returns value pointed by specific field of from source GetTagRequest
func (fp *GetTagRequest_FieldTerminalPath) GetSingle(source *GetTagRequest) (interface{}, bool) {
	switch fp.selector {
	case GetTagRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetTagRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetTagRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
	}
}

func (fp *GetTagRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetTagRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetTagRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetTagRequest_FieldPathSelectorName:
		return (*tag.Reference)(nil)
	case GetTagRequest_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	case GetTagRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
	}
}

func (fp *GetTagRequest_FieldTerminalPath) ClearValue(item *GetTagRequest) {
	if item != nil {
		switch fp.selector {
		case GetTagRequest_FieldPathSelectorName:
			item.Name = nil
		case GetTagRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetTagRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
		}
	}
}

func (fp *GetTagRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetTagRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetTagRequest_FieldPathSelectorName ||
		fp.selector == GetTagRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetTagRequest_FieldPathSelectorView
}

func (fp *GetTagRequest_FieldTerminalPath) WithIValue(value interface{}) GetTagRequest_FieldPathValue {
	switch fp.selector {
	case GetTagRequest_FieldPathSelectorName:
		return &GetTagRequest_FieldTerminalPathValue{GetTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	case GetTagRequest_FieldPathSelectorFieldMask:
		return &GetTagRequest_FieldTerminalPathValue{GetTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case GetTagRequest_FieldPathSelectorView:
		return &GetTagRequest_FieldTerminalPathValue{GetTagRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
	}
}

func (fp *GetTagRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetTagRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetTagRequest_FieldPathArrayOfValues {
	fpaov := &GetTagRequest_FieldTerminalPathArrayOfValues{GetTagRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetTagRequest_FieldPathSelectorName:
		return &GetTagRequest_FieldTerminalPathArrayOfValues{GetTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Reference)}
	case GetTagRequest_FieldPathSelectorFieldMask:
		return &GetTagRequest_FieldTerminalPathArrayOfValues{GetTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case GetTagRequest_FieldPathSelectorView:
		return &GetTagRequest_FieldTerminalPathArrayOfValues{GetTagRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetTagRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetTagRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetTagRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fp.selector))
	}
}

func (fp *GetTagRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetTagRequest_FieldPathValue allows storing values for GetTagRequest fields according to their type
type GetTagRequest_FieldPathValue interface {
	GetTagRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetTagRequest)
	CompareWith(*GetTagRequest) (cmp int, comparable bool)
}

func ParseGetTagRequest_FieldPathValue(pathStr, valueStr string) (GetTagRequest_FieldPathValue, error) {
	fp, err := ParseGetTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetTagRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetTagRequest_FieldPathValue), nil
}

func MustParseGetTagRequest_FieldPathValue(pathStr, valueStr string) GetTagRequest_FieldPathValue {
	fpv, err := ParseGetTagRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetTagRequest_FieldTerminalPathValue struct {
	GetTagRequest_FieldTerminalPath
	value interface{}
}

var _ GetTagRequest_FieldPathValue = (*GetTagRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetTagRequest' as interface{}
func (fpv *GetTagRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetTagRequest_FieldTerminalPathValue) AsNameValue() (*tag.Reference, bool) {
	res, ok := fpv.value.(*tag.Reference)
	return res, ok
}
func (fpv *GetTagRequest_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *GetTagRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetTagRequest
func (fpv *GetTagRequest_FieldTerminalPathValue) SetTo(target **GetTagRequest) {
	if *target == nil {
		*target = new(GetTagRequest)
	}
	switch fpv.selector {
	case GetTagRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*tag.Reference)
	case GetTagRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	case GetTagRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fpv.selector))
	}
}

func (fpv *GetTagRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetTagRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetTagRequest_FieldTerminalPathValue' with the value under path in 'GetTagRequest'.
func (fpv *GetTagRequest_FieldTerminalPathValue) CompareWith(source *GetTagRequest) (int, bool) {
	switch fpv.selector {
	case GetTagRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*tag.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetTagRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetTagRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetTagRequest: %d", fpv.selector))
	}
}

func (fpv *GetTagRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetTagRequest))
}

// GetTagRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetTagRequest according to their type
// Present only for array (repeated) types.
type GetTagRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetTagRequest_FieldPath
	ContainsValue(*GetTagRequest) bool
}

// ParseGetTagRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetTagRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetTagRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetTagRequest_FieldPathArrayItemValue), nil
}

func MustParseGetTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetTagRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetTagRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetTagRequest_FieldTerminalPathArrayItemValue struct {
	GetTagRequest_FieldTerminalPath
	value interface{}
}

var _ GetTagRequest_FieldPathArrayItemValue = (*GetTagRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetTagRequest as interface{}
func (fpaiv *GetTagRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetTagRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetTagRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetTagRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetTagRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetTagRequest'
func (fpaiv *GetTagRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetTagRequest) bool {
	slice := fpaiv.GetTagRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetTagRequest_FieldPathArrayOfValues allows storing slice of values for GetTagRequest fields according to their type
type GetTagRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetTagRequest_FieldPath
}

func ParseGetTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetTagRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetTagRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetTagRequest_FieldPathArrayOfValues), nil
}

func MustParseGetTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetTagRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetTagRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetTagRequest_FieldTerminalPathArrayOfValues struct {
	GetTagRequest_FieldTerminalPath
	values interface{}
}

var _ GetTagRequest_FieldPathArrayOfValues = (*GetTagRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetTagRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetTagRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*tag.Reference) {
			values = append(values, v)
		}
	case GetTagRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case GetTagRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetTagRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*tag.Reference, bool) {
	res, ok := fpaov.values.([]*tag.Reference)
	return res, ok
}
func (fpaov *GetTagRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *GetTagRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetTagsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetTagsRequest_FieldPathSelector
	Get(source *BatchGetTagsRequest) []interface{}
	GetSingle(source *BatchGetTagsRequest) (interface{}, bool)
	ClearValue(item *BatchGetTagsRequest)

	// Those methods build corresponding BatchGetTagsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetTagsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetTagsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetTagsRequest_FieldPathArrayItemValue
}

type BatchGetTagsRequest_FieldPathSelector int32

const (
	BatchGetTagsRequest_FieldPathSelectorParent    BatchGetTagsRequest_FieldPathSelector = 0
	BatchGetTagsRequest_FieldPathSelectorNames     BatchGetTagsRequest_FieldPathSelector = 1
	BatchGetTagsRequest_FieldPathSelectorFieldMask BatchGetTagsRequest_FieldPathSelector = 2
	BatchGetTagsRequest_FieldPathSelectorView      BatchGetTagsRequest_FieldPathSelector = 3
)

func (s BatchGetTagsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetTagsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", s))
	}
}

func BuildBatchGetTagsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetTagsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetTagsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetTagsRequest", fp)
}

func ParseBatchGetTagsRequest_FieldPath(rawField string) (BatchGetTagsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetTagsRequest_FieldPath(fp)
}

func MustParseBatchGetTagsRequest_FieldPath(rawField string) BatchGetTagsRequest_FieldPath {
	fp, err := ParseBatchGetTagsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetTagsRequest_FieldTerminalPath struct {
	selector BatchGetTagsRequest_FieldPathSelector
}

var _ BatchGetTagsRequest_FieldPath = (*BatchGetTagsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetTagsRequest_FieldTerminalPath) Selector() BatchGetTagsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetTagsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetTagsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetTagsRequest
func (fp *BatchGetTagsRequest_FieldTerminalPath) Get(source *BatchGetTagsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetTagsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetTagsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetTagsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetTagsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetTagsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetTagsRequest
func (fp *BatchGetTagsRequest_FieldTerminalPath) GetSingle(source *BatchGetTagsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetTagsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetTagsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetTagsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetTagsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		return (*tag.Reference)(nil)
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return ([]*tag.Reference)(nil)
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	case BatchGetTagsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) ClearValue(item *BatchGetTagsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetTagsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetTagsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetTagsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetTagsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetTagsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetTagsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetTagsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetTagsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetTagsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetTagsRequest_FieldPathSelectorView
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetTagsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		return &BatchGetTagsRequest_FieldTerminalPathValue{BatchGetTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return &BatchGetTagsRequest_FieldTerminalPathValue{BatchGetTagsRequest_FieldTerminalPath: *fp, value: value.([]*tag.Reference)}
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		return &BatchGetTagsRequest_FieldTerminalPathValue{BatchGetTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case BatchGetTagsRequest_FieldPathSelectorView:
		return &BatchGetTagsRequest_FieldTerminalPathValue{BatchGetTagsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetTagsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetTagsRequest_FieldTerminalPathArrayOfValues{BatchGetTagsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		return &BatchGetTagsRequest_FieldTerminalPathArrayOfValues{BatchGetTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Reference)}
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return &BatchGetTagsRequest_FieldTerminalPathArrayOfValues{BatchGetTagsRequest_FieldTerminalPath: *fp, values: values.([][]*tag.Reference)}
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		return &BatchGetTagsRequest_FieldTerminalPathArrayOfValues{BatchGetTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case BatchGetTagsRequest_FieldPathSelectorView:
		return &BatchGetTagsRequest_FieldTerminalPathArrayOfValues{BatchGetTagsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetTagsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return &BatchGetTagsRequest_FieldTerminalPathArrayItemValue{BatchGetTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetTagsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetTagsRequest_FieldPathValue allows storing values for BatchGetTagsRequest fields according to their type
type BatchGetTagsRequest_FieldPathValue interface {
	BatchGetTagsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetTagsRequest)
	CompareWith(*BatchGetTagsRequest) (cmp int, comparable bool)
}

func ParseBatchGetTagsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetTagsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetTagsRequest_FieldPathValue), nil
}

func MustParseBatchGetTagsRequest_FieldPathValue(pathStr, valueStr string) BatchGetTagsRequest_FieldPathValue {
	fpv, err := ParseBatchGetTagsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetTagsRequest_FieldTerminalPathValue struct {
	BatchGetTagsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetTagsRequest_FieldPathValue = (*BatchGetTagsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetTagsRequest' as interface{}
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) AsParentValue() (*tag.Reference, bool) {
	res, ok := fpv.value.(*tag.Reference)
	return res, ok
}
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) AsNamesValue() ([]*tag.Reference, bool) {
	res, ok := fpv.value.([]*tag.Reference)
	return res, ok
}
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetTagsRequest
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) SetTo(target **BatchGetTagsRequest) {
	if *target == nil {
		*target = new(BatchGetTagsRequest)
	}
	switch fpv.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*tag.Reference)
	case BatchGetTagsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*tag.Reference)
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	case BatchGetTagsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetTagsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetTagsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetTagsRequest'.
func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetTagsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*tag.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetTagsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetTagsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetTagsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetTagsRequest))
}

// BatchGetTagsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetTagsRequest according to their type
// Present only for array (repeated) types.
type BatchGetTagsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetTagsRequest_FieldPath
	ContainsValue(*BatchGetTagsRequest) bool
}

// ParseBatchGetTagsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetTagsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetTagsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetTagsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetTagsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetTagsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetTagsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetTagsRequest_FieldPathArrayItemValue = (*BatchGetTagsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetTagsRequest as interface{}
func (fpaiv *BatchGetTagsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetTagsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*tag.Reference, bool) {
	res, ok := fpaiv.value.(*tag.Reference)
	return res, ok
}

func (fpaiv *BatchGetTagsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetTagsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetTagsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetTagsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetTagsRequest'
func (fpaiv *BatchGetTagsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetTagsRequest) bool {
	slice := fpaiv.BatchGetTagsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetTagsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetTagsRequest fields according to their type
type BatchGetTagsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetTagsRequest_FieldPath
}

func ParseBatchGetTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetTagsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetTagsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetTagsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetTagsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetTagsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetTagsRequest_FieldPathArrayOfValues = (*BatchGetTagsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetTagsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetTagsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*tag.Reference) {
			values = append(values, v)
		}
	case BatchGetTagsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*tag.Reference) {
			values = append(values, v)
		}
	case BatchGetTagsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case BatchGetTagsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetTagsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*tag.Reference, bool) {
	res, ok := fpaov.values.([]*tag.Reference)
	return res, ok
}
func (fpaov *BatchGetTagsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*tag.Reference, bool) {
	res, ok := fpaov.values.([][]*tag.Reference)
	return res, ok
}
func (fpaov *BatchGetTagsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *BatchGetTagsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetTagsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetTagsResponse_FieldPathSelector
	Get(source *BatchGetTagsResponse) []interface{}
	GetSingle(source *BatchGetTagsResponse) (interface{}, bool)
	ClearValue(item *BatchGetTagsResponse)

	// Those methods build corresponding BatchGetTagsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetTagsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetTagsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetTagsResponse_FieldPathArrayItemValue
}

type BatchGetTagsResponse_FieldPathSelector int32

const (
	BatchGetTagsResponse_FieldPathSelectorTags    BatchGetTagsResponse_FieldPathSelector = 0
	BatchGetTagsResponse_FieldPathSelectorMissing BatchGetTagsResponse_FieldPathSelector = 1
)

func (s BatchGetTagsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return "tags"
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", s))
	}
}

func BuildBatchGetTagsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetTagsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetTagsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "tags":
			return &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorTags}, nil
		case "missing":
			return &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "tags":
			if subpath, err := tag.BuildTag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetTagsResponse_FieldSubPath{selector: BatchGetTagsResponse_FieldPathSelectorTags, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetTagsResponse", fp)
}

func ParseBatchGetTagsResponse_FieldPath(rawField string) (BatchGetTagsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetTagsResponse_FieldPath(fp)
}

func MustParseBatchGetTagsResponse_FieldPath(rawField string) BatchGetTagsResponse_FieldPath {
	fp, err := ParseBatchGetTagsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetTagsResponse_FieldTerminalPath struct {
	selector BatchGetTagsResponse_FieldPathSelector
}

var _ BatchGetTagsResponse_FieldPath = (*BatchGetTagsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetTagsResponse_FieldTerminalPath) Selector() BatchGetTagsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetTagsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetTagsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetTagsResponse
func (fp *BatchGetTagsResponse_FieldTerminalPath) Get(source *BatchGetTagsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetTagsResponse_FieldPathSelectorTags:
			for _, value := range source.GetTags() {
				values = append(values, value)
			}
		case BatchGetTagsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetTagsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetTagsResponse
func (fp *BatchGetTagsResponse_FieldTerminalPath) GetSingle(source *BatchGetTagsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		res := source.GetTags()
		return res, res != nil
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetTagsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetTagsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return ([]*tag.Tag)(nil)
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return ([]*tag.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) ClearValue(item *BatchGetTagsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetTagsResponse_FieldPathSelectorTags:
			item.Tags = nil
		case BatchGetTagsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetTagsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetTagsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetTagsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return &BatchGetTagsResponse_FieldTerminalPathValue{BatchGetTagsResponse_FieldTerminalPath: *fp, value: value.([]*tag.Tag)}
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return &BatchGetTagsResponse_FieldTerminalPathValue{BatchGetTagsResponse_FieldTerminalPath: *fp, value: value.([]*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetTagsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetTagsResponse_FieldTerminalPathArrayOfValues{BatchGetTagsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return &BatchGetTagsResponse_FieldTerminalPathArrayOfValues{BatchGetTagsResponse_FieldTerminalPath: *fp, values: values.([][]*tag.Tag)}
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return &BatchGetTagsResponse_FieldTerminalPathArrayOfValues{BatchGetTagsResponse_FieldTerminalPath: *fp, values: values.([][]*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetTagsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return &BatchGetTagsResponse_FieldTerminalPathArrayItemValue{BatchGetTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.Tag)}
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return &BatchGetTagsResponse_FieldTerminalPathArrayItemValue{BatchGetTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetTagsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetTagsResponse_FieldSubPath struct {
	selector BatchGetTagsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetTagsResponse_FieldPath = (*BatchGetTagsResponse_FieldSubPath)(nil)

func (fps *BatchGetTagsResponse_FieldSubPath) Selector() BatchGetTagsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetTagsResponse_FieldSubPath) AsTagsSubPath() (tag.Tag_FieldPath, bool) {
	res, ok := fps.subPath.(tag.Tag_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetTagsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetTagsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetTagsResponse
func (fps *BatchGetTagsResponse_FieldSubPath) Get(source *BatchGetTagsResponse) (values []interface{}) {
	if asTagFieldPath, ok := fps.AsTagsSubPath(); ok {
		for _, item := range source.GetTags() {
			values = append(values, asTagFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetTagsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetTagsResponse))
}

// GetSingle returns value of selected field from source BatchGetTagsResponse
func (fps *BatchGetTagsResponse_FieldSubPath) GetSingle(source *BatchGetTagsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		if len(source.GetTags()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTags()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetTagsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetTagsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetTagsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetTagsResponse_FieldSubPath) ClearValue(item *BatchGetTagsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetTagsResponse_FieldPathSelectorTags:
			for _, subItem := range item.Tags {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetTagsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetTagsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetTagsResponse_FieldPathValue {
	return &BatchGetTagsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetTagsResponse_FieldPathArrayOfValues {
	return &BatchGetTagsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetTagsResponse_FieldPathArrayItemValue {
	return &BatchGetTagsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetTagsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetTagsResponse_FieldPathValue allows storing values for BatchGetTagsResponse fields according to their type
type BatchGetTagsResponse_FieldPathValue interface {
	BatchGetTagsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetTagsResponse)
	CompareWith(*BatchGetTagsResponse) (cmp int, comparable bool)
}

func ParseBatchGetTagsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetTagsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetTagsResponse_FieldPathValue), nil
}

func MustParseBatchGetTagsResponse_FieldPathValue(pathStr, valueStr string) BatchGetTagsResponse_FieldPathValue {
	fpv, err := ParseBatchGetTagsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetTagsResponse_FieldTerminalPathValue struct {
	BatchGetTagsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetTagsResponse_FieldPathValue = (*BatchGetTagsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetTagsResponse' as interface{}
func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) AsTagsValue() ([]*tag.Tag, bool) {
	res, ok := fpv.value.([]*tag.Tag)
	return res, ok
}
func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) AsMissingValue() ([]*tag.Reference, bool) {
	res, ok := fpv.value.([]*tag.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetTagsResponse
func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) SetTo(target **BatchGetTagsResponse) {
	if *target == nil {
		*target = new(BatchGetTagsResponse)
	}
	switch fpv.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		(*target).Tags = fpv.value.([]*tag.Tag)
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*tag.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetTagsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetTagsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetTagsResponse'.
func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetTagsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return 0, false
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetTagsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetTagsResponse))
}

type BatchGetTagsResponse_FieldSubPathValue struct {
	BatchGetTagsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetTagsResponse_FieldPathValue = (*BatchGetTagsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) AsTagsPathValue() (tag.Tag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(tag.Tag_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) SetTo(target **BatchGetTagsResponse) {
	if *target == nil {
		*target = new(BatchGetTagsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetTagsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) CompareWith(source *BatchGetTagsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetTagsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetTagsResponse))
}

// BatchGetTagsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetTagsResponse according to their type
// Present only for array (repeated) types.
type BatchGetTagsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetTagsResponse_FieldPath
	ContainsValue(*BatchGetTagsResponse) bool
}

// ParseBatchGetTagsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetTagsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetTagsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetTagsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetTagsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetTagsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetTagsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetTagsResponse_FieldPathArrayItemValue = (*BatchGetTagsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetTagsResponse as interface{}
func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) AsTagsItemValue() (*tag.Tag, bool) {
	res, ok := fpaiv.value.(*tag.Tag)
	return res, ok
}
func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*tag.Reference, bool) {
	res, ok := fpaiv.value.(*tag.Reference)
	return res, ok
}

func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetTagsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetTagsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetTagsResponse'
func (fpaiv *BatchGetTagsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetTagsResponse) bool {
	slice := fpaiv.BatchGetTagsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetTagsResponse_FieldSubPathArrayItemValue struct {
	BatchGetTagsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetTagsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetTagsResponse_FieldSubPathArrayItemValue) AsTagsPathItemValue() (tag.Tag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetTagsResponse'
func (fpaivs *BatchGetTagsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetTagsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetTagsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetTagsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetTagsResponse fields according to their type
type BatchGetTagsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetTagsResponse_FieldPath
}

func ParseBatchGetTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetTagsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetTagsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetTagsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetTagsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetTagsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetTagsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetTagsResponse_FieldPathArrayOfValues = (*BatchGetTagsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetTagsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetTagsResponse_FieldPathSelectorTags:
		for _, v := range fpaov.values.([][]*tag.Tag) {
			values = append(values, v)
		}
	case BatchGetTagsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*tag.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetTagsResponse_FieldTerminalPathArrayOfValues) AsTagsArrayOfValues() ([][]*tag.Tag, bool) {
	res, ok := fpaov.values.([][]*tag.Tag)
	return res, ok
}
func (fpaov *BatchGetTagsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*tag.Reference, bool) {
	res, ok := fpaov.values.([][]*tag.Reference)
	return res, ok
}

type BatchGetTagsResponse_FieldSubPathArrayOfValues struct {
	BatchGetTagsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetTagsResponse_FieldPathArrayOfValues = (*BatchGetTagsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetTagsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetTagsResponse_FieldSubPathArrayOfValues) AsTagsPathArrayOfValues() (tag.Tag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(tag.Tag_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListTagsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListTagsRequest_FieldPathSelector
	Get(source *ListTagsRequest) []interface{}
	GetSingle(source *ListTagsRequest) (interface{}, bool)
	ClearValue(item *ListTagsRequest)

	// Those methods build corresponding ListTagsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListTagsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListTagsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListTagsRequest_FieldPathArrayItemValue
}

type ListTagsRequest_FieldPathSelector int32

const (
	ListTagsRequest_FieldPathSelectorParent    ListTagsRequest_FieldPathSelector = 0
	ListTagsRequest_FieldPathSelectorPageSize  ListTagsRequest_FieldPathSelector = 1
	ListTagsRequest_FieldPathSelectorPageToken ListTagsRequest_FieldPathSelector = 2
	ListTagsRequest_FieldPathSelectorOrderBy   ListTagsRequest_FieldPathSelector = 3
	ListTagsRequest_FieldPathSelectorFilter    ListTagsRequest_FieldPathSelector = 4
	ListTagsRequest_FieldPathSelectorFieldMask ListTagsRequest_FieldPathSelector = 5
	ListTagsRequest_FieldPathSelectorView      ListTagsRequest_FieldPathSelector = 6
)

func (s ListTagsRequest_FieldPathSelector) String() string {
	switch s {
	case ListTagsRequest_FieldPathSelectorParent:
		return "parent"
	case ListTagsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListTagsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListTagsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListTagsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListTagsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListTagsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", s))
	}
}

func BuildListTagsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListTagsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListTagsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListTagsRequest", fp)
}

func ParseListTagsRequest_FieldPath(rawField string) (ListTagsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListTagsRequest_FieldPath(fp)
}

func MustParseListTagsRequest_FieldPath(rawField string) ListTagsRequest_FieldPath {
	fp, err := ParseListTagsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListTagsRequest_FieldTerminalPath struct {
	selector ListTagsRequest_FieldPathSelector
}

var _ ListTagsRequest_FieldPath = (*ListTagsRequest_FieldTerminalPath)(nil)

func (fp *ListTagsRequest_FieldTerminalPath) Selector() ListTagsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListTagsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListTagsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListTagsRequest
func (fp *ListTagsRequest_FieldTerminalPath) Get(source *ListTagsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListTagsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListTagsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListTagsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListTagsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListTagsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListTagsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListTagsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListTagsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListTagsRequest))
}

// GetSingle returns value pointed by specific field of from source ListTagsRequest
func (fp *ListTagsRequest_FieldTerminalPath) GetSingle(source *ListTagsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListTagsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListTagsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListTagsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListTagsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListTagsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListTagsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
	}
}

func (fp *ListTagsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListTagsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListTagsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		return (*tag.ParentName)(nil)
	case ListTagsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListTagsRequest_FieldPathSelectorPageToken:
		return (*tag.PagerCursor)(nil)
	case ListTagsRequest_FieldPathSelectorOrderBy:
		return (*tag.OrderBy)(nil)
	case ListTagsRequest_FieldPathSelectorFilter:
		return (*tag.Filter)(nil)
	case ListTagsRequest_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	case ListTagsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
	}
}

func (fp *ListTagsRequest_FieldTerminalPath) ClearValue(item *ListTagsRequest) {
	if item != nil {
		switch fp.selector {
		case ListTagsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListTagsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListTagsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListTagsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListTagsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListTagsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListTagsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListTagsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListTagsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListTagsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListTagsRequest_FieldPathSelectorParent ||
		fp.selector == ListTagsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListTagsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListTagsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListTagsRequest_FieldPathSelectorFilter ||
		fp.selector == ListTagsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListTagsRequest_FieldPathSelectorView
}

func (fp *ListTagsRequest_FieldTerminalPath) WithIValue(value interface{}) ListTagsRequest_FieldPathValue {
	switch fp.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.ParentName)}
	case ListTagsRequest_FieldPathSelectorPageSize:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListTagsRequest_FieldPathSelectorPageToken:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	case ListTagsRequest_FieldPathSelectorOrderBy:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.OrderBy)}
	case ListTagsRequest_FieldPathSelectorFilter:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Filter)}
	case ListTagsRequest_FieldPathSelectorFieldMask:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case ListTagsRequest_FieldPathSelectorView:
		return &ListTagsRequest_FieldTerminalPathValue{ListTagsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
	}
}

func (fp *ListTagsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListTagsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListTagsRequest_FieldPathArrayOfValues {
	fpaov := &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.ParentName)}
	case ListTagsRequest_FieldPathSelectorPageSize:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListTagsRequest_FieldPathSelectorPageToken:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	case ListTagsRequest_FieldPathSelectorOrderBy:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.OrderBy)}
	case ListTagsRequest_FieldPathSelectorFilter:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Filter)}
	case ListTagsRequest_FieldPathSelectorFieldMask:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case ListTagsRequest_FieldPathSelectorView:
		return &ListTagsRequest_FieldTerminalPathArrayOfValues{ListTagsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListTagsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListTagsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListTagsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fp.selector))
	}
}

func (fp *ListTagsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListTagsRequest_FieldPathValue allows storing values for ListTagsRequest fields according to their type
type ListTagsRequest_FieldPathValue interface {
	ListTagsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListTagsRequest)
	CompareWith(*ListTagsRequest) (cmp int, comparable bool)
}

func ParseListTagsRequest_FieldPathValue(pathStr, valueStr string) (ListTagsRequest_FieldPathValue, error) {
	fp, err := ParseListTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListTagsRequest_FieldPathValue), nil
}

func MustParseListTagsRequest_FieldPathValue(pathStr, valueStr string) ListTagsRequest_FieldPathValue {
	fpv, err := ParseListTagsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListTagsRequest_FieldTerminalPathValue struct {
	ListTagsRequest_FieldTerminalPath
	value interface{}
}

var _ ListTagsRequest_FieldPathValue = (*ListTagsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListTagsRequest' as interface{}
func (fpv *ListTagsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsParentValue() (*tag.ParentName, bool) {
	res, ok := fpv.value.(*tag.ParentName)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsOrderByValue() (*tag.OrderBy, bool) {
	res, ok := fpv.value.(*tag.OrderBy)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsFilterValue() (*tag.Filter, bool) {
	res, ok := fpv.value.(*tag.Filter)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *ListTagsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListTagsRequest
func (fpv *ListTagsRequest_FieldTerminalPathValue) SetTo(target **ListTagsRequest) {
	if *target == nil {
		*target = new(ListTagsRequest)
	}
	switch fpv.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*tag.ParentName)
	case ListTagsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListTagsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*tag.PagerCursor)
	case ListTagsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*tag.OrderBy)
	case ListTagsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*tag.Filter)
	case ListTagsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	case ListTagsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fpv.selector))
	}
}

func (fpv *ListTagsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListTagsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListTagsRequest_FieldTerminalPathValue' with the value under path in 'ListTagsRequest'.
func (fpv *ListTagsRequest_FieldTerminalPathValue) CompareWith(source *ListTagsRequest) (int, bool) {
	switch fpv.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*tag.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListTagsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListTagsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListTagsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListTagsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListTagsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListTagsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsRequest: %d", fpv.selector))
	}
}

func (fpv *ListTagsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListTagsRequest))
}

// ListTagsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListTagsRequest according to their type
// Present only for array (repeated) types.
type ListTagsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListTagsRequest_FieldPath
	ContainsValue(*ListTagsRequest) bool
}

// ParseListTagsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListTagsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListTagsRequest_FieldPathArrayItemValue), nil
}

func MustParseListTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListTagsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListTagsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListTagsRequest_FieldTerminalPathArrayItemValue struct {
	ListTagsRequest_FieldTerminalPath
	value interface{}
}

var _ ListTagsRequest_FieldPathArrayItemValue = (*ListTagsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListTagsRequest as interface{}
func (fpaiv *ListTagsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListTagsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListTagsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListTagsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListTagsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListTagsRequest'
func (fpaiv *ListTagsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListTagsRequest) bool {
	slice := fpaiv.ListTagsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListTagsRequest_FieldPathArrayOfValues allows storing slice of values for ListTagsRequest fields according to their type
type ListTagsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListTagsRequest_FieldPath
}

func ParseListTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListTagsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListTagsRequest_FieldPathArrayOfValues), nil
}

func MustParseListTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListTagsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListTagsRequest_FieldTerminalPathArrayOfValues struct {
	ListTagsRequest_FieldTerminalPath
	values interface{}
}

var _ ListTagsRequest_FieldPathArrayOfValues = (*ListTagsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListTagsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*tag.ParentName) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*tag.OrderBy) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*tag.Filter) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case ListTagsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*tag.ParentName, bool) {
	res, ok := fpaov.values.([]*tag.ParentName)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*tag.OrderBy, bool) {
	res, ok := fpaov.values.([]*tag.OrderBy)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*tag.Filter, bool) {
	res, ok := fpaov.values.([]*tag.Filter)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *ListTagsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListTagsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListTagsResponse_FieldPathSelector
	Get(source *ListTagsResponse) []interface{}
	GetSingle(source *ListTagsResponse) (interface{}, bool)
	ClearValue(item *ListTagsResponse)

	// Those methods build corresponding ListTagsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListTagsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListTagsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListTagsResponse_FieldPathArrayItemValue
}

type ListTagsResponse_FieldPathSelector int32

const (
	ListTagsResponse_FieldPathSelectorTags          ListTagsResponse_FieldPathSelector = 0
	ListTagsResponse_FieldPathSelectorPrevPageToken ListTagsResponse_FieldPathSelector = 1
	ListTagsResponse_FieldPathSelectorNextPageToken ListTagsResponse_FieldPathSelector = 2
)

func (s ListTagsResponse_FieldPathSelector) String() string {
	switch s {
	case ListTagsResponse_FieldPathSelectorTags:
		return "tags"
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", s))
	}
}

func BuildListTagsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListTagsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListTagsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "tags":
			return &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorTags}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "tags":
			if subpath, err := tag.BuildTag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListTagsResponse_FieldSubPath{selector: ListTagsResponse_FieldPathSelectorTags, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListTagsResponse", fp)
}

func ParseListTagsResponse_FieldPath(rawField string) (ListTagsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListTagsResponse_FieldPath(fp)
}

func MustParseListTagsResponse_FieldPath(rawField string) ListTagsResponse_FieldPath {
	fp, err := ParseListTagsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListTagsResponse_FieldTerminalPath struct {
	selector ListTagsResponse_FieldPathSelector
}

var _ ListTagsResponse_FieldPath = (*ListTagsResponse_FieldTerminalPath)(nil)

func (fp *ListTagsResponse_FieldTerminalPath) Selector() ListTagsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListTagsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListTagsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListTagsResponse
func (fp *ListTagsResponse_FieldTerminalPath) Get(source *ListTagsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListTagsResponse_FieldPathSelectorTags:
			for _, value := range source.GetTags() {
				values = append(values, value)
			}
		case ListTagsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListTagsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListTagsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListTagsResponse))
}

// GetSingle returns value pointed by specific field of from source ListTagsResponse
func (fp *ListTagsResponse_FieldTerminalPath) GetSingle(source *ListTagsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		res := source.GetTags()
		return res, res != nil
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
	}
}

func (fp *ListTagsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListTagsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListTagsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		return ([]*tag.Tag)(nil)
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		return (*tag.PagerCursor)(nil)
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		return (*tag.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
	}
}

func (fp *ListTagsResponse_FieldTerminalPath) ClearValue(item *ListTagsResponse) {
	if item != nil {
		switch fp.selector {
		case ListTagsResponse_FieldPathSelectorTags:
			item.Tags = nil
		case ListTagsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListTagsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListTagsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListTagsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListTagsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListTagsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListTagsResponse_FieldTerminalPath) WithIValue(value interface{}) ListTagsResponse_FieldPathValue {
	switch fp.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		return &ListTagsResponse_FieldTerminalPathValue{ListTagsResponse_FieldTerminalPath: *fp, value: value.([]*tag.Tag)}
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		return &ListTagsResponse_FieldTerminalPathValue{ListTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		return &ListTagsResponse_FieldTerminalPathValue{ListTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
	}
}

func (fp *ListTagsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListTagsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListTagsResponse_FieldPathArrayOfValues {
	fpaov := &ListTagsResponse_FieldTerminalPathArrayOfValues{ListTagsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		return &ListTagsResponse_FieldTerminalPathArrayOfValues{ListTagsResponse_FieldTerminalPath: *fp, values: values.([][]*tag.Tag)}
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		return &ListTagsResponse_FieldTerminalPathArrayOfValues{ListTagsResponse_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		return &ListTagsResponse_FieldTerminalPathArrayOfValues{ListTagsResponse_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListTagsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListTagsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListTagsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		return &ListTagsResponse_FieldTerminalPathArrayItemValue{ListTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.Tag)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fp.selector))
	}
}

func (fp *ListTagsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListTagsResponse_FieldSubPath struct {
	selector ListTagsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListTagsResponse_FieldPath = (*ListTagsResponse_FieldSubPath)(nil)

func (fps *ListTagsResponse_FieldSubPath) Selector() ListTagsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListTagsResponse_FieldSubPath) AsTagsSubPath() (tag.Tag_FieldPath, bool) {
	res, ok := fps.subPath.(tag.Tag_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListTagsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListTagsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListTagsResponse
func (fps *ListTagsResponse_FieldSubPath) Get(source *ListTagsResponse) (values []interface{}) {
	if asTagFieldPath, ok := fps.AsTagsSubPath(); ok {
		for _, item := range source.GetTags() {
			values = append(values, asTagFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListTagsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListTagsResponse))
}

// GetSingle returns value of selected field from source ListTagsResponse
func (fps *ListTagsResponse_FieldSubPath) GetSingle(source *ListTagsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		if len(source.GetTags()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTags()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fps.selector))
	}
}

func (fps *ListTagsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListTagsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListTagsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListTagsResponse_FieldSubPath) ClearValue(item *ListTagsResponse) {
	if item != nil {
		switch fps.selector {
		case ListTagsResponse_FieldPathSelectorTags:
			for _, subItem := range item.Tags {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListTagsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListTagsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListTagsResponse_FieldSubPath) WithIValue(value interface{}) ListTagsResponse_FieldPathValue {
	return &ListTagsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListTagsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListTagsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListTagsResponse_FieldPathArrayOfValues {
	return &ListTagsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListTagsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListTagsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListTagsResponse_FieldPathArrayItemValue {
	return &ListTagsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListTagsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListTagsResponse_FieldPathValue allows storing values for ListTagsResponse fields according to their type
type ListTagsResponse_FieldPathValue interface {
	ListTagsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListTagsResponse)
	CompareWith(*ListTagsResponse) (cmp int, comparable bool)
}

func ParseListTagsResponse_FieldPathValue(pathStr, valueStr string) (ListTagsResponse_FieldPathValue, error) {
	fp, err := ParseListTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListTagsResponse_FieldPathValue), nil
}

func MustParseListTagsResponse_FieldPathValue(pathStr, valueStr string) ListTagsResponse_FieldPathValue {
	fpv, err := ParseListTagsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListTagsResponse_FieldTerminalPathValue struct {
	ListTagsResponse_FieldTerminalPath
	value interface{}
}

var _ ListTagsResponse_FieldPathValue = (*ListTagsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListTagsResponse' as interface{}
func (fpv *ListTagsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListTagsResponse_FieldTerminalPathValue) AsTagsValue() ([]*tag.Tag, bool) {
	res, ok := fpv.value.([]*tag.Tag)
	return res, ok
}
func (fpv *ListTagsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}
func (fpv *ListTagsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListTagsResponse
func (fpv *ListTagsResponse_FieldTerminalPathValue) SetTo(target **ListTagsResponse) {
	if *target == nil {
		*target = new(ListTagsResponse)
	}
	switch fpv.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		(*target).Tags = fpv.value.([]*tag.Tag)
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*tag.PagerCursor)
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*tag.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fpv.selector))
	}
}

func (fpv *ListTagsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListTagsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListTagsResponse_FieldTerminalPathValue' with the value under path in 'ListTagsResponse'.
func (fpv *ListTagsResponse_FieldTerminalPathValue) CompareWith(source *ListTagsResponse) (int, bool) {
	switch fpv.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		return 0, false
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fpv.selector))
	}
}

func (fpv *ListTagsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListTagsResponse))
}

type ListTagsResponse_FieldSubPathValue struct {
	ListTagsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListTagsResponse_FieldPathValue = (*ListTagsResponse_FieldSubPathValue)(nil)

func (fpvs *ListTagsResponse_FieldSubPathValue) AsTagsPathValue() (tag.Tag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(tag.Tag_FieldPathValue)
	return res, ok
}

func (fpvs *ListTagsResponse_FieldSubPathValue) SetTo(target **ListTagsResponse) {
	if *target == nil {
		*target = new(ListTagsResponse)
	}
	switch fpvs.Selector() {
	case ListTagsResponse_FieldPathSelectorTags:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListTagsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListTagsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListTagsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListTagsResponse_FieldSubPathValue) CompareWith(source *ListTagsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListTagsResponse_FieldPathSelectorTags:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListTagsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListTagsResponse))
}

// ListTagsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListTagsResponse according to their type
// Present only for array (repeated) types.
type ListTagsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListTagsResponse_FieldPath
	ContainsValue(*ListTagsResponse) bool
}

// ParseListTagsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListTagsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListTagsResponse_FieldPathArrayItemValue), nil
}

func MustParseListTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListTagsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListTagsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListTagsResponse_FieldTerminalPathArrayItemValue struct {
	ListTagsResponse_FieldTerminalPath
	value interface{}
}

var _ ListTagsResponse_FieldPathArrayItemValue = (*ListTagsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListTagsResponse as interface{}
func (fpaiv *ListTagsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListTagsResponse_FieldTerminalPathArrayItemValue) AsTagsItemValue() (*tag.Tag, bool) {
	res, ok := fpaiv.value.(*tag.Tag)
	return res, ok
}

func (fpaiv *ListTagsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListTagsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListTagsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListTagsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListTagsResponse'
func (fpaiv *ListTagsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListTagsResponse) bool {
	slice := fpaiv.ListTagsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListTagsResponse_FieldSubPathArrayItemValue struct {
	ListTagsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListTagsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListTagsResponse_FieldSubPathArrayItemValue) AsTagsPathItemValue() (tag.Tag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListTagsResponse'
func (fpaivs *ListTagsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListTagsResponse) bool {
	switch fpaivs.Selector() {
	case ListTagsResponse_FieldPathSelectorTags:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListTagsResponse: %d", fpaivs.Selector()))
	}
}

// ListTagsResponse_FieldPathArrayOfValues allows storing slice of values for ListTagsResponse fields according to their type
type ListTagsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListTagsResponse_FieldPath
}

func ParseListTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListTagsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListTagsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListTagsResponse_FieldPathArrayOfValues), nil
}

func MustParseListTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListTagsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListTagsResponse_FieldTerminalPathArrayOfValues struct {
	ListTagsResponse_FieldTerminalPath
	values interface{}
}

var _ ListTagsResponse_FieldPathArrayOfValues = (*ListTagsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListTagsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListTagsResponse_FieldPathSelectorTags:
		for _, v := range fpaov.values.([][]*tag.Tag) {
			values = append(values, v)
		}
	case ListTagsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	case ListTagsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListTagsResponse_FieldTerminalPathArrayOfValues) AsTagsArrayOfValues() ([][]*tag.Tag, bool) {
	res, ok := fpaov.values.([][]*tag.Tag)
	return res, ok
}
func (fpaov *ListTagsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}
func (fpaov *ListTagsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}

type ListTagsResponse_FieldSubPathArrayOfValues struct {
	ListTagsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListTagsResponse_FieldPathArrayOfValues = (*ListTagsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListTagsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListTagsResponse_FieldSubPathArrayOfValues) AsTagsPathArrayOfValues() (tag.Tag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(tag.Tag_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchTagRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchTagRequest_FieldPathSelector
	Get(source *WatchTagRequest) []interface{}
	GetSingle(source *WatchTagRequest) (interface{}, bool)
	ClearValue(item *WatchTagRequest)

	// Those methods build corresponding WatchTagRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchTagRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchTagRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchTagRequest_FieldPathArrayItemValue
}

type WatchTagRequest_FieldPathSelector int32

const (
	WatchTagRequest_FieldPathSelectorName      WatchTagRequest_FieldPathSelector = 0
	WatchTagRequest_FieldPathSelectorFieldMask WatchTagRequest_FieldPathSelector = 1
	WatchTagRequest_FieldPathSelectorView      WatchTagRequest_FieldPathSelector = 2
)

func (s WatchTagRequest_FieldPathSelector) String() string {
	switch s {
	case WatchTagRequest_FieldPathSelectorName:
		return "name"
	case WatchTagRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchTagRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", s))
	}
}

func BuildWatchTagRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchTagRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchTagRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchTagRequest", fp)
}

func ParseWatchTagRequest_FieldPath(rawField string) (WatchTagRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchTagRequest_FieldPath(fp)
}

func MustParseWatchTagRequest_FieldPath(rawField string) WatchTagRequest_FieldPath {
	fp, err := ParseWatchTagRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchTagRequest_FieldTerminalPath struct {
	selector WatchTagRequest_FieldPathSelector
}

var _ WatchTagRequest_FieldPath = (*WatchTagRequest_FieldTerminalPath)(nil)

func (fp *WatchTagRequest_FieldTerminalPath) Selector() WatchTagRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchTagRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchTagRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchTagRequest
func (fp *WatchTagRequest_FieldTerminalPath) Get(source *WatchTagRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchTagRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchTagRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchTagRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchTagRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchTagRequest))
}

// GetSingle returns value pointed by specific field of from source WatchTagRequest
func (fp *WatchTagRequest_FieldTerminalPath) GetSingle(source *WatchTagRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchTagRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchTagRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchTagRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
	}
}

func (fp *WatchTagRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchTagRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchTagRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchTagRequest_FieldPathSelectorName:
		return (*tag.Reference)(nil)
	case WatchTagRequest_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	case WatchTagRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
	}
}

func (fp *WatchTagRequest_FieldTerminalPath) ClearValue(item *WatchTagRequest) {
	if item != nil {
		switch fp.selector {
		case WatchTagRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchTagRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchTagRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchTagRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchTagRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchTagRequest_FieldPathSelectorName ||
		fp.selector == WatchTagRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchTagRequest_FieldPathSelectorView
}

func (fp *WatchTagRequest_FieldTerminalPath) WithIValue(value interface{}) WatchTagRequest_FieldPathValue {
	switch fp.selector {
	case WatchTagRequest_FieldPathSelectorName:
		return &WatchTagRequest_FieldTerminalPathValue{WatchTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	case WatchTagRequest_FieldPathSelectorFieldMask:
		return &WatchTagRequest_FieldTerminalPathValue{WatchTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case WatchTagRequest_FieldPathSelectorView:
		return &WatchTagRequest_FieldTerminalPathValue{WatchTagRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
	}
}

func (fp *WatchTagRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchTagRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchTagRequest_FieldPathArrayOfValues {
	fpaov := &WatchTagRequest_FieldTerminalPathArrayOfValues{WatchTagRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchTagRequest_FieldPathSelectorName:
		return &WatchTagRequest_FieldTerminalPathArrayOfValues{WatchTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Reference)}
	case WatchTagRequest_FieldPathSelectorFieldMask:
		return &WatchTagRequest_FieldTerminalPathArrayOfValues{WatchTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case WatchTagRequest_FieldPathSelectorView:
		return &WatchTagRequest_FieldTerminalPathArrayOfValues{WatchTagRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchTagRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchTagRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchTagRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fp.selector))
	}
}

func (fp *WatchTagRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchTagRequest_FieldPathValue allows storing values for WatchTagRequest fields according to their type
type WatchTagRequest_FieldPathValue interface {
	WatchTagRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchTagRequest)
	CompareWith(*WatchTagRequest) (cmp int, comparable bool)
}

func ParseWatchTagRequest_FieldPathValue(pathStr, valueStr string) (WatchTagRequest_FieldPathValue, error) {
	fp, err := ParseWatchTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchTagRequest_FieldPathValue), nil
}

func MustParseWatchTagRequest_FieldPathValue(pathStr, valueStr string) WatchTagRequest_FieldPathValue {
	fpv, err := ParseWatchTagRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchTagRequest_FieldTerminalPathValue struct {
	WatchTagRequest_FieldTerminalPath
	value interface{}
}

var _ WatchTagRequest_FieldPathValue = (*WatchTagRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchTagRequest' as interface{}
func (fpv *WatchTagRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchTagRequest_FieldTerminalPathValue) AsNameValue() (*tag.Reference, bool) {
	res, ok := fpv.value.(*tag.Reference)
	return res, ok
}
func (fpv *WatchTagRequest_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *WatchTagRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchTagRequest
func (fpv *WatchTagRequest_FieldTerminalPathValue) SetTo(target **WatchTagRequest) {
	if *target == nil {
		*target = new(WatchTagRequest)
	}
	switch fpv.selector {
	case WatchTagRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*tag.Reference)
	case WatchTagRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	case WatchTagRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fpv.selector))
	}
}

func (fpv *WatchTagRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchTagRequest_FieldTerminalPathValue' with the value under path in 'WatchTagRequest'.
func (fpv *WatchTagRequest_FieldTerminalPathValue) CompareWith(source *WatchTagRequest) (int, bool) {
	switch fpv.selector {
	case WatchTagRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*tag.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchTagRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagRequest: %d", fpv.selector))
	}
}

func (fpv *WatchTagRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchTagRequest))
}

// WatchTagRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchTagRequest according to their type
// Present only for array (repeated) types.
type WatchTagRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchTagRequest_FieldPath
	ContainsValue(*WatchTagRequest) bool
}

// ParseWatchTagRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchTagRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchTagRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchTagRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchTagRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchTagRequest_FieldTerminalPathArrayItemValue struct {
	WatchTagRequest_FieldTerminalPath
	value interface{}
}

var _ WatchTagRequest_FieldPathArrayItemValue = (*WatchTagRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchTagRequest as interface{}
func (fpaiv *WatchTagRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchTagRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchTagRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchTagRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchTagRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchTagRequest'
func (fpaiv *WatchTagRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchTagRequest) bool {
	slice := fpaiv.WatchTagRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchTagRequest_FieldPathArrayOfValues allows storing slice of values for WatchTagRequest fields according to their type
type WatchTagRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchTagRequest_FieldPath
}

func ParseWatchTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchTagRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchTagRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchTagRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchTagRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchTagRequest_FieldTerminalPathArrayOfValues struct {
	WatchTagRequest_FieldTerminalPath
	values interface{}
}

var _ WatchTagRequest_FieldPathArrayOfValues = (*WatchTagRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchTagRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchTagRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*tag.Reference) {
			values = append(values, v)
		}
	case WatchTagRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case WatchTagRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchTagRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*tag.Reference, bool) {
	res, ok := fpaov.values.([]*tag.Reference)
	return res, ok
}
func (fpaov *WatchTagRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *WatchTagRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchTagResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchTagResponse_FieldPathSelector
	Get(source *WatchTagResponse) []interface{}
	GetSingle(source *WatchTagResponse) (interface{}, bool)
	ClearValue(item *WatchTagResponse)

	// Those methods build corresponding WatchTagResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchTagResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchTagResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchTagResponse_FieldPathArrayItemValue
}

type WatchTagResponse_FieldPathSelector int32

const (
	WatchTagResponse_FieldPathSelectorChange WatchTagResponse_FieldPathSelector = 0
)

func (s WatchTagResponse_FieldPathSelector) String() string {
	switch s {
	case WatchTagResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", s))
	}
}

func BuildWatchTagResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchTagResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchTagResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchTagResponse_FieldTerminalPath{selector: WatchTagResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchTagResponse", fp)
}

func ParseWatchTagResponse_FieldPath(rawField string) (WatchTagResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchTagResponse_FieldPath(fp)
}

func MustParseWatchTagResponse_FieldPath(rawField string) WatchTagResponse_FieldPath {
	fp, err := ParseWatchTagResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchTagResponse_FieldTerminalPath struct {
	selector WatchTagResponse_FieldPathSelector
}

var _ WatchTagResponse_FieldPath = (*WatchTagResponse_FieldTerminalPath)(nil)

func (fp *WatchTagResponse_FieldTerminalPath) Selector() WatchTagResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchTagResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchTagResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchTagResponse
func (fp *WatchTagResponse_FieldTerminalPath) Get(source *WatchTagResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchTagResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchTagResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchTagResponse))
}

// GetSingle returns value pointed by specific field of from source WatchTagResponse
func (fp *WatchTagResponse_FieldTerminalPath) GetSingle(source *WatchTagResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
	}
}

func (fp *WatchTagResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchTagResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchTagResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		return (*tag.TagChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
	}
}

func (fp *WatchTagResponse_FieldTerminalPath) ClearValue(item *WatchTagResponse) {
	if item != nil {
		switch fp.selector {
		case WatchTagResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchTagResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchTagResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchTagResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchTagResponse_FieldPathSelectorChange
}

func (fp *WatchTagResponse_FieldTerminalPath) WithIValue(value interface{}) WatchTagResponse_FieldPathValue {
	switch fp.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		return &WatchTagResponse_FieldTerminalPathValue{WatchTagResponse_FieldTerminalPath: *fp, value: value.(*tag.TagChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
	}
}

func (fp *WatchTagResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchTagResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchTagResponse_FieldPathArrayOfValues {
	fpaov := &WatchTagResponse_FieldTerminalPathArrayOfValues{WatchTagResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		return &WatchTagResponse_FieldTerminalPathArrayOfValues{WatchTagResponse_FieldTerminalPath: *fp, values: values.([]*tag.TagChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchTagResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchTagResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchTagResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fp.selector))
	}
}

func (fp *WatchTagResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchTagResponse_FieldPathValue allows storing values for WatchTagResponse fields according to their type
type WatchTagResponse_FieldPathValue interface {
	WatchTagResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchTagResponse)
	CompareWith(*WatchTagResponse) (cmp int, comparable bool)
}

func ParseWatchTagResponse_FieldPathValue(pathStr, valueStr string) (WatchTagResponse_FieldPathValue, error) {
	fp, err := ParseWatchTagResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchTagResponse_FieldPathValue), nil
}

func MustParseWatchTagResponse_FieldPathValue(pathStr, valueStr string) WatchTagResponse_FieldPathValue {
	fpv, err := ParseWatchTagResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchTagResponse_FieldTerminalPathValue struct {
	WatchTagResponse_FieldTerminalPath
	value interface{}
}

var _ WatchTagResponse_FieldPathValue = (*WatchTagResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchTagResponse' as interface{}
func (fpv *WatchTagResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchTagResponse_FieldTerminalPathValue) AsChangeValue() (*tag.TagChange, bool) {
	res, ok := fpv.value.(*tag.TagChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchTagResponse
func (fpv *WatchTagResponse_FieldTerminalPathValue) SetTo(target **WatchTagResponse) {
	if *target == nil {
		*target = new(WatchTagResponse)
	}
	switch fpv.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*tag.TagChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fpv.selector))
	}
}

func (fpv *WatchTagResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchTagResponse_FieldTerminalPathValue' with the value under path in 'WatchTagResponse'.
func (fpv *WatchTagResponse_FieldTerminalPathValue) CompareWith(source *WatchTagResponse) (int, bool) {
	switch fpv.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagResponse: %d", fpv.selector))
	}
}

func (fpv *WatchTagResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchTagResponse))
}

// WatchTagResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchTagResponse according to their type
// Present only for array (repeated) types.
type WatchTagResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchTagResponse_FieldPath
	ContainsValue(*WatchTagResponse) bool
}

// ParseWatchTagResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchTagResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchTagResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchTagResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchTagResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchTagResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchTagResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchTagResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchTagResponse_FieldTerminalPathArrayItemValue struct {
	WatchTagResponse_FieldTerminalPath
	value interface{}
}

var _ WatchTagResponse_FieldPathArrayItemValue = (*WatchTagResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchTagResponse as interface{}
func (fpaiv *WatchTagResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchTagResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchTagResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchTagResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchTagResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchTagResponse'
func (fpaiv *WatchTagResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchTagResponse) bool {
	slice := fpaiv.WatchTagResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchTagResponse_FieldPathArrayOfValues allows storing slice of values for WatchTagResponse fields according to their type
type WatchTagResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchTagResponse_FieldPath
}

func ParseWatchTagResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchTagResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchTagResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchTagResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchTagResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchTagResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchTagResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchTagResponse_FieldTerminalPathArrayOfValues struct {
	WatchTagResponse_FieldTerminalPath
	values interface{}
}

var _ WatchTagResponse_FieldPathArrayOfValues = (*WatchTagResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchTagResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchTagResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*tag.TagChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchTagResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*tag.TagChange, bool) {
	res, ok := fpaov.values.([]*tag.TagChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchTagsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchTagsRequest_FieldPathSelector
	Get(source *WatchTagsRequest) []interface{}
	GetSingle(source *WatchTagsRequest) (interface{}, bool)
	ClearValue(item *WatchTagsRequest)

	// Those methods build corresponding WatchTagsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchTagsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchTagsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchTagsRequest_FieldPathArrayItemValue
}

type WatchTagsRequest_FieldPathSelector int32

const (
	WatchTagsRequest_FieldPathSelectorType         WatchTagsRequest_FieldPathSelector = 0
	WatchTagsRequest_FieldPathSelectorParent       WatchTagsRequest_FieldPathSelector = 1
	WatchTagsRequest_FieldPathSelectorPageSize     WatchTagsRequest_FieldPathSelector = 2
	WatchTagsRequest_FieldPathSelectorPageToken    WatchTagsRequest_FieldPathSelector = 3
	WatchTagsRequest_FieldPathSelectorOrderBy      WatchTagsRequest_FieldPathSelector = 4
	WatchTagsRequest_FieldPathSelectorResumeToken  WatchTagsRequest_FieldPathSelector = 5
	WatchTagsRequest_FieldPathSelectorFilter       WatchTagsRequest_FieldPathSelector = 6
	WatchTagsRequest_FieldPathSelectorFieldMask    WatchTagsRequest_FieldPathSelector = 7
	WatchTagsRequest_FieldPathSelectorView         WatchTagsRequest_FieldPathSelector = 8
	WatchTagsRequest_FieldPathSelectorMaxChunkSize WatchTagsRequest_FieldPathSelector = 9
)

func (s WatchTagsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchTagsRequest_FieldPathSelectorType:
		return "type"
	case WatchTagsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchTagsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchTagsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchTagsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchTagsRequest_FieldPathSelectorView:
		return "view"
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", s))
	}
}

func BuildWatchTagsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchTagsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchTagsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchTagsRequest", fp)
}

func ParseWatchTagsRequest_FieldPath(rawField string) (WatchTagsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchTagsRequest_FieldPath(fp)
}

func MustParseWatchTagsRequest_FieldPath(rawField string) WatchTagsRequest_FieldPath {
	fp, err := ParseWatchTagsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchTagsRequest_FieldTerminalPath struct {
	selector WatchTagsRequest_FieldPathSelector
}

var _ WatchTagsRequest_FieldPath = (*WatchTagsRequest_FieldTerminalPath)(nil)

func (fp *WatchTagsRequest_FieldTerminalPath) Selector() WatchTagsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchTagsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchTagsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchTagsRequest
func (fp *WatchTagsRequest_FieldTerminalPath) Get(source *WatchTagsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchTagsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchTagsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchTagsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchTagsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchTagsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchTagsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchTagsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchTagsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchTagsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchTagsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchTagsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchTagsRequest
func (fp *WatchTagsRequest_FieldTerminalPath) GetSingle(source *WatchTagsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchTagsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchTagsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchTagsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchTagsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchTagsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
	}
}

func (fp *WatchTagsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchTagsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchTagsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchTagsRequest_FieldPathSelectorParent:
		return (*tag.ParentReference)(nil)
	case WatchTagsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchTagsRequest_FieldPathSelectorPageToken:
		return (*tag.PagerCursor)(nil)
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		return (*tag.OrderBy)(nil)
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchTagsRequest_FieldPathSelectorFilter:
		return (*tag.Filter)(nil)
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	case WatchTagsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
	}
}

func (fp *WatchTagsRequest_FieldTerminalPath) ClearValue(item *WatchTagsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchTagsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchTagsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchTagsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchTagsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchTagsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchTagsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchTagsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchTagsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchTagsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchTagsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchTagsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchTagsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchTagsRequest_FieldPathSelectorType ||
		fp.selector == WatchTagsRequest_FieldPathSelectorParent ||
		fp.selector == WatchTagsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchTagsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchTagsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchTagsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchTagsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchTagsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchTagsRequest_FieldPathSelectorView ||
		fp.selector == WatchTagsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchTagsRequest_FieldPathValue {
	switch fp.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchTagsRequest_FieldPathSelectorParent:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.ParentReference)}
	case WatchTagsRequest_FieldPathSelectorPageSize:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchTagsRequest_FieldPathSelectorPageToken:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.OrderBy)}
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchTagsRequest_FieldPathSelectorFilter:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Filter)}
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case WatchTagsRequest_FieldPathSelectorView:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchTagsRequest_FieldTerminalPathValue{WatchTagsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
	}
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchTagsRequest_FieldPathArrayOfValues {
	fpaov := &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchTagsRequest_FieldPathSelectorParent:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.ParentReference)}
	case WatchTagsRequest_FieldPathSelectorPageSize:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchTagsRequest_FieldPathSelectorPageToken:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.OrderBy)}
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchTagsRequest_FieldPathSelectorFilter:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Filter)}
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case WatchTagsRequest_FieldPathSelectorView:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchTagsRequest_FieldTerminalPathArrayOfValues{WatchTagsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchTagsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fp.selector))
	}
}

func (fp *WatchTagsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchTagsRequest_FieldPathValue allows storing values for WatchTagsRequest fields according to their type
type WatchTagsRequest_FieldPathValue interface {
	WatchTagsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchTagsRequest)
	CompareWith(*WatchTagsRequest) (cmp int, comparable bool)
}

func ParseWatchTagsRequest_FieldPathValue(pathStr, valueStr string) (WatchTagsRequest_FieldPathValue, error) {
	fp, err := ParseWatchTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchTagsRequest_FieldPathValue), nil
}

func MustParseWatchTagsRequest_FieldPathValue(pathStr, valueStr string) WatchTagsRequest_FieldPathValue {
	fpv, err := ParseWatchTagsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchTagsRequest_FieldTerminalPathValue struct {
	WatchTagsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchTagsRequest_FieldPathValue = (*WatchTagsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchTagsRequest' as interface{}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsParentValue() (*tag.ParentReference, bool) {
	res, ok := fpv.value.(*tag.ParentReference)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsOrderByValue() (*tag.OrderBy, bool) {
	res, ok := fpv.value.(*tag.OrderBy)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsFilterValue() (*tag.Filter, bool) {
	res, ok := fpv.value.(*tag.Filter)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchTagsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchTagsRequest
func (fpv *WatchTagsRequest_FieldTerminalPathValue) SetTo(target **WatchTagsRequest) {
	if *target == nil {
		*target = new(WatchTagsRequest)
	}
	switch fpv.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchTagsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*tag.ParentReference)
	case WatchTagsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchTagsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*tag.PagerCursor)
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*tag.OrderBy)
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchTagsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*tag.Filter)
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	case WatchTagsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchTagsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchTagsRequest_FieldTerminalPathValue' with the value under path in 'WatchTagsRequest'.
func (fpv *WatchTagsRequest_FieldTerminalPathValue) CompareWith(source *WatchTagsRequest) (int, bool) {
	switch fpv.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*tag.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchTagsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchTagsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchTagsRequest))
}

// WatchTagsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchTagsRequest according to their type
// Present only for array (repeated) types.
type WatchTagsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchTagsRequest_FieldPath
	ContainsValue(*WatchTagsRequest) bool
}

// ParseWatchTagsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchTagsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchTagsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchTagsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchTagsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchTagsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchTagsRequest_FieldTerminalPathArrayItemValue struct {
	WatchTagsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchTagsRequest_FieldPathArrayItemValue = (*WatchTagsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchTagsRequest as interface{}
func (fpaiv *WatchTagsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchTagsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchTagsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchTagsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchTagsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchTagsRequest'
func (fpaiv *WatchTagsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchTagsRequest) bool {
	slice := fpaiv.WatchTagsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchTagsRequest_FieldPathArrayOfValues allows storing slice of values for WatchTagsRequest fields according to their type
type WatchTagsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchTagsRequest_FieldPath
}

func ParseWatchTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchTagsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchTagsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchTagsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchTagsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchTagsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchTagsRequest_FieldTerminalPathArrayOfValues struct {
	WatchTagsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchTagsRequest_FieldPathArrayOfValues = (*WatchTagsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchTagsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*tag.ParentReference) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*tag.OrderBy) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*tag.Filter) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchTagsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*tag.ParentReference, bool) {
	res, ok := fpaov.values.([]*tag.ParentReference)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*tag.OrderBy, bool) {
	res, ok := fpaov.values.([]*tag.OrderBy)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*tag.Filter, bool) {
	res, ok := fpaov.values.([]*tag.Filter)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchTagsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchTagsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchTagsResponse_FieldPathSelector
	Get(source *WatchTagsResponse) []interface{}
	GetSingle(source *WatchTagsResponse) (interface{}, bool)
	ClearValue(item *WatchTagsResponse)

	// Those methods build corresponding WatchTagsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchTagsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchTagsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchTagsResponse_FieldPathArrayItemValue
}

type WatchTagsResponse_FieldPathSelector int32

const (
	WatchTagsResponse_FieldPathSelectorTagChanges      WatchTagsResponse_FieldPathSelector = 0
	WatchTagsResponse_FieldPathSelectorIsCurrent       WatchTagsResponse_FieldPathSelector = 1
	WatchTagsResponse_FieldPathSelectorPageTokenChange WatchTagsResponse_FieldPathSelector = 2
	WatchTagsResponse_FieldPathSelectorResumeToken     WatchTagsResponse_FieldPathSelector = 3
	WatchTagsResponse_FieldPathSelectorSnapshotSize    WatchTagsResponse_FieldPathSelector = 4
	WatchTagsResponse_FieldPathSelectorIsSoftReset     WatchTagsResponse_FieldPathSelector = 5
	WatchTagsResponse_FieldPathSelectorIsHardReset     WatchTagsResponse_FieldPathSelector = 6
)

func (s WatchTagsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return "tag_changes"
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", s))
	}
}

func BuildWatchTagsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchTagsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchTagsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "tag_changes", "tagChanges", "tag-changes":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorTagChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchTagsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchTagsResponse_FieldSubPath{selector: WatchTagsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchTagsResponse", fp)
}

func ParseWatchTagsResponse_FieldPath(rawField string) (WatchTagsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchTagsResponse_FieldPath(fp)
}

func MustParseWatchTagsResponse_FieldPath(rawField string) WatchTagsResponse_FieldPath {
	fp, err := ParseWatchTagsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchTagsResponse_FieldTerminalPath struct {
	selector WatchTagsResponse_FieldPathSelector
}

var _ WatchTagsResponse_FieldPath = (*WatchTagsResponse_FieldTerminalPath)(nil)

func (fp *WatchTagsResponse_FieldTerminalPath) Selector() WatchTagsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchTagsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchTagsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchTagsResponse
func (fp *WatchTagsResponse_FieldTerminalPath) Get(source *WatchTagsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchTagsResponse_FieldPathSelectorTagChanges:
			for _, value := range source.GetTagChanges() {
				values = append(values, value)
			}
		case WatchTagsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchTagsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchTagsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchTagsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchTagsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchTagsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchTagsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchTagsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchTagsResponse
func (fp *WatchTagsResponse_FieldTerminalPath) GetSingle(source *WatchTagsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		res := source.GetTagChanges()
		return res, res != nil
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
	}
}

func (fp *WatchTagsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchTagsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchTagsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return ([]*tag.TagChange)(nil)
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchTagsResponse_PageTokenChange)(nil)
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
	}
}

func (fp *WatchTagsResponse_FieldTerminalPath) ClearValue(item *WatchTagsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchTagsResponse_FieldPathSelectorTagChanges:
			item.TagChanges = nil
		case WatchTagsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchTagsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchTagsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchTagsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchTagsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchTagsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchTagsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchTagsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchTagsResponse_FieldPathSelectorTagChanges ||
		fp.selector == WatchTagsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchTagsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchTagsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchTagsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchTagsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchTagsResponse_FieldPathValue {
	switch fp.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.([]*tag.TagChange)}
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(*WatchTagsResponse_PageTokenChange)}
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		return &WatchTagsResponse_FieldTerminalPathValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
	}
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchTagsResponse_FieldPathArrayOfValues {
	fpaov := &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([][]*tag.TagChange)}
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]*WatchTagsResponse_PageTokenChange)}
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		return &WatchTagsResponse_FieldTerminalPathArrayOfValues{WatchTagsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchTagsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return &WatchTagsResponse_FieldTerminalPathArrayItemValue{WatchTagsResponse_FieldTerminalPath: *fp, value: value.(*tag.TagChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fp.selector))
	}
}

func (fp *WatchTagsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchTagsResponse_FieldSubPath struct {
	selector WatchTagsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchTagsResponse_FieldPath = (*WatchTagsResponse_FieldSubPath)(nil)

func (fps *WatchTagsResponse_FieldSubPath) Selector() WatchTagsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchTagsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchTagsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchTagsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchTagsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchTagsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchTagsResponse
func (fps *WatchTagsResponse_FieldSubPath) Get(source *WatchTagsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchTagsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchTagsResponse))
}

// GetSingle returns value of selected field from source WatchTagsResponse
func (fps *WatchTagsResponse_FieldSubPath) GetSingle(source *WatchTagsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fps.selector))
	}
}

func (fps *WatchTagsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchTagsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchTagsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchTagsResponse_FieldSubPath) ClearValue(item *WatchTagsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchTagsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchTagsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchTagsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchTagsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchTagsResponse_FieldSubPath) WithIValue(value interface{}) WatchTagsResponse_FieldPathValue {
	return &WatchTagsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchTagsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchTagsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchTagsResponse_FieldPathArrayOfValues {
	return &WatchTagsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchTagsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchTagsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchTagsResponse_FieldPathArrayItemValue {
	return &WatchTagsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchTagsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchTagsResponse_FieldPathValue allows storing values for WatchTagsResponse fields according to their type
type WatchTagsResponse_FieldPathValue interface {
	WatchTagsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchTagsResponse)
	CompareWith(*WatchTagsResponse) (cmp int, comparable bool)
}

func ParseWatchTagsResponse_FieldPathValue(pathStr, valueStr string) (WatchTagsResponse_FieldPathValue, error) {
	fp, err := ParseWatchTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchTagsResponse_FieldPathValue), nil
}

func MustParseWatchTagsResponse_FieldPathValue(pathStr, valueStr string) WatchTagsResponse_FieldPathValue {
	fpv, err := ParseWatchTagsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchTagsResponse_FieldTerminalPathValue struct {
	WatchTagsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchTagsResponse_FieldPathValue = (*WatchTagsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchTagsResponse' as interface{}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsTagChangesValue() ([]*tag.TagChange, bool) {
	res, ok := fpv.value.([]*tag.TagChange)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchTagsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchTagsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchTagsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchTagsResponse
func (fpv *WatchTagsResponse_FieldTerminalPathValue) SetTo(target **WatchTagsResponse) {
	if *target == nil {
		*target = new(WatchTagsResponse)
	}
	switch fpv.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		(*target).TagChanges = fpv.value.([]*tag.TagChange)
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchTagsResponse_PageTokenChange)
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchTagsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchTagsResponse_FieldTerminalPathValue' with the value under path in 'WatchTagsResponse'.
func (fpv *WatchTagsResponse_FieldTerminalPathValue) CompareWith(source *WatchTagsResponse) (int, bool) {
	switch fpv.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		return 0, false
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchTagsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchTagsResponse))
}

type WatchTagsResponse_FieldSubPathValue struct {
	WatchTagsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchTagsResponse_FieldPathValue = (*WatchTagsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchTagsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchTagsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchTagsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchTagsResponse_FieldSubPathValue) SetTo(target **WatchTagsResponse) {
	if *target == nil {
		*target = new(WatchTagsResponse)
	}
	switch fpvs.Selector() {
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchTagsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchTagsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchTagsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchTagsResponse_FieldSubPathValue) CompareWith(source *WatchTagsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchTagsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchTagsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchTagsResponse))
}

// WatchTagsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchTagsResponse according to their type
// Present only for array (repeated) types.
type WatchTagsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchTagsResponse_FieldPath
	ContainsValue(*WatchTagsResponse) bool
}

// ParseWatchTagsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchTagsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchTagsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchTagsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchTagsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchTagsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchTagsResponse_FieldTerminalPathArrayItemValue struct {
	WatchTagsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchTagsResponse_FieldPathArrayItemValue = (*WatchTagsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchTagsResponse as interface{}
func (fpaiv *WatchTagsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchTagsResponse_FieldTerminalPathArrayItemValue) AsTagChangesItemValue() (*tag.TagChange, bool) {
	res, ok := fpaiv.value.(*tag.TagChange)
	return res, ok
}

func (fpaiv *WatchTagsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchTagsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchTagsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchTagsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchTagsResponse'
func (fpaiv *WatchTagsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchTagsResponse) bool {
	slice := fpaiv.WatchTagsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchTagsResponse_FieldSubPathArrayItemValue struct {
	WatchTagsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchTagsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchTagsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchTagsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchTagsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchTagsResponse'
func (fpaivs *WatchTagsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchTagsResponse) bool {
	switch fpaivs.Selector() {
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchTagsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse: %d", fpaivs.Selector()))
	}
}

// WatchTagsResponse_FieldPathArrayOfValues allows storing slice of values for WatchTagsResponse fields according to their type
type WatchTagsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchTagsResponse_FieldPath
}

func ParseWatchTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchTagsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchTagsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchTagsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchTagsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchTagsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchTagsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchTagsResponse_FieldTerminalPathArrayOfValues struct {
	WatchTagsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchTagsResponse_FieldPathArrayOfValues = (*WatchTagsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchTagsResponse_FieldPathSelectorTagChanges:
		for _, v := range fpaov.values.([][]*tag.TagChange) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchTagsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchTagsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsTagChangesArrayOfValues() ([][]*tag.TagChange, bool) {
	res, ok := fpaov.values.([][]*tag.TagChange)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchTagsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchTagsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchTagsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchTagsResponse_FieldSubPathArrayOfValues struct {
	WatchTagsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchTagsResponse_FieldPathArrayOfValues = (*WatchTagsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchTagsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchTagsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchTagsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchTagsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchTagsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchTagsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchTagsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchTagsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchTagsResponse_PageTokenChange)

	// Those methods build corresponding WatchTagsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchTagsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchTagsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchTagsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchTagsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchTagsResponsePageTokenChange_FieldPathSelector = 0
	WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchTagsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchTagsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchTagsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchTagsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchTagsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchTagsResponsePageTokenChange_FieldTerminalPath{selector: WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchTagsResponsePageTokenChange_FieldTerminalPath{selector: WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchTagsResponse_PageTokenChange", fp)
}

func ParseWatchTagsResponsePageTokenChange_FieldPath(rawField string) (WatchTagsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchTagsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchTagsResponsePageTokenChange_FieldPath(rawField string) WatchTagsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchTagsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchTagsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchTagsResponsePageTokenChange_FieldPathSelector
}

var _ WatchTagsResponsePageTokenChange_FieldPath = (*WatchTagsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) Selector() WatchTagsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchTagsResponse_PageTokenChange
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchTagsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchTagsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchTagsResponse_PageTokenChange
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchTagsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchTagsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*tag.PagerCursor)(nil)
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*tag.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchTagsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchTagsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchTagsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchTagsResponsePageTokenChange_FieldTerminalPathValue{WatchTagsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchTagsResponsePageTokenChange_FieldTerminalPathValue{WatchTagsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*tag.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchTagsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchTagsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchTagsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchTagsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*tag.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchTagsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchTagsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchTagsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchTagsResponsePageTokenChange_FieldPathValue interface {
	WatchTagsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchTagsResponse_PageTokenChange)
	CompareWith(*WatchTagsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchTagsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchTagsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchTagsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchTagsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchTagsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchTagsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchTagsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchTagsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchTagsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchTagsResponsePageTokenChange_FieldPathValue = (*WatchTagsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}
func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*tag.PagerCursor, bool) {
	res, ok := fpv.value.(*tag.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchTagsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchTagsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*tag.PagerCursor)
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*tag.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchTagsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchTagsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchTagsResponse_PageTokenChange'.
func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchTagsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchTagsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchTagsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchTagsResponse_PageTokenChange))
}

// WatchTagsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchTagsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchTagsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchTagsResponse_PageTokenChange) bool
}

// ParseWatchTagsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchTagsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchTagsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchTagsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchTagsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchTagsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchTagsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchTagsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchTagsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchTagsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchTagsResponse_PageTokenChange as interface{}
func (fpaiv *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchTagsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchTagsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchTagsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchTagsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchTagsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchTagsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchTagsResponsePageTokenChange_FieldPath
}

func ParseWatchTagsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchTagsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchTagsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchTagsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchTagsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchTagsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchTagsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchTagsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchTagsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	case WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*tag.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}
func (fpaov *WatchTagsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*tag.PagerCursor, bool) {
	res, ok := fpaov.values.([]*tag.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateTagRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateTagRequest_FieldPathSelector
	Get(source *CreateTagRequest) []interface{}
	GetSingle(source *CreateTagRequest) (interface{}, bool)
	ClearValue(item *CreateTagRequest)

	// Those methods build corresponding CreateTagRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateTagRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateTagRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateTagRequest_FieldPathArrayItemValue
}

type CreateTagRequest_FieldPathSelector int32

const (
	CreateTagRequest_FieldPathSelectorParent CreateTagRequest_FieldPathSelector = 0
	CreateTagRequest_FieldPathSelectorTag    CreateTagRequest_FieldPathSelector = 1
)

func (s CreateTagRequest_FieldPathSelector) String() string {
	switch s {
	case CreateTagRequest_FieldPathSelectorParent:
		return "parent"
	case CreateTagRequest_FieldPathSelectorTag:
		return "tag"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", s))
	}
}

func BuildCreateTagRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateTagRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateTagRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateTagRequest_FieldTerminalPath{selector: CreateTagRequest_FieldPathSelectorParent}, nil
		case "tag":
			return &CreateTagRequest_FieldTerminalPath{selector: CreateTagRequest_FieldPathSelectorTag}, nil
		}
	} else {
		switch fp[0] {
		case "tag":
			if subpath, err := tag.BuildTag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateTagRequest_FieldSubPath{selector: CreateTagRequest_FieldPathSelectorTag, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateTagRequest", fp)
}

func ParseCreateTagRequest_FieldPath(rawField string) (CreateTagRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateTagRequest_FieldPath(fp)
}

func MustParseCreateTagRequest_FieldPath(rawField string) CreateTagRequest_FieldPath {
	fp, err := ParseCreateTagRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateTagRequest_FieldTerminalPath struct {
	selector CreateTagRequest_FieldPathSelector
}

var _ CreateTagRequest_FieldPath = (*CreateTagRequest_FieldTerminalPath)(nil)

func (fp *CreateTagRequest_FieldTerminalPath) Selector() CreateTagRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateTagRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateTagRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateTagRequest
func (fp *CreateTagRequest_FieldTerminalPath) Get(source *CreateTagRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateTagRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateTagRequest_FieldPathSelectorTag:
			if source.Tag != nil {
				values = append(values, source.Tag)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateTagRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateTagRequest))
}

// GetSingle returns value pointed by specific field of from source CreateTagRequest
func (fp *CreateTagRequest_FieldTerminalPath) GetSingle(source *CreateTagRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateTagRequest_FieldPathSelectorTag:
		res := source.GetTag()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
	}
}

func (fp *CreateTagRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateTagRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateTagRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		return (*tag.ParentReference)(nil)
	case CreateTagRequest_FieldPathSelectorTag:
		return (*tag.Tag)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
	}
}

func (fp *CreateTagRequest_FieldTerminalPath) ClearValue(item *CreateTagRequest) {
	if item != nil {
		switch fp.selector {
		case CreateTagRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateTagRequest_FieldPathSelectorTag:
			item.Tag = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateTagRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateTagRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateTagRequest_FieldPathSelectorParent
}

func (fp *CreateTagRequest_FieldTerminalPath) WithIValue(value interface{}) CreateTagRequest_FieldPathValue {
	switch fp.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		return &CreateTagRequest_FieldTerminalPathValue{CreateTagRequest_FieldTerminalPath: *fp, value: value.(*tag.ParentReference)}
	case CreateTagRequest_FieldPathSelectorTag:
		return &CreateTagRequest_FieldTerminalPathValue{CreateTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
	}
}

func (fp *CreateTagRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateTagRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateTagRequest_FieldPathArrayOfValues {
	fpaov := &CreateTagRequest_FieldTerminalPathArrayOfValues{CreateTagRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		return &CreateTagRequest_FieldTerminalPathArrayOfValues{CreateTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.ParentReference)}
	case CreateTagRequest_FieldPathSelectorTag:
		return &CreateTagRequest_FieldTerminalPathArrayOfValues{CreateTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateTagRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateTagRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateTagRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fp.selector))
	}
}

func (fp *CreateTagRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateTagRequest_FieldSubPath struct {
	selector CreateTagRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateTagRequest_FieldPath = (*CreateTagRequest_FieldSubPath)(nil)

func (fps *CreateTagRequest_FieldSubPath) Selector() CreateTagRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateTagRequest_FieldSubPath) AsTagSubPath() (tag.Tag_FieldPath, bool) {
	res, ok := fps.subPath.(tag.Tag_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateTagRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateTagRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateTagRequest
func (fps *CreateTagRequest_FieldSubPath) Get(source *CreateTagRequest) (values []interface{}) {
	if asTagFieldPath, ok := fps.AsTagSubPath(); ok {
		values = append(values, asTagFieldPath.Get(source.GetTag())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateTagRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateTagRequest))
}

// GetSingle returns value of selected field from source CreateTagRequest
func (fps *CreateTagRequest_FieldSubPath) GetSingle(source *CreateTagRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateTagRequest_FieldPathSelectorTag:
		if source.GetTag() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTag())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fps.selector))
	}
}

func (fps *CreateTagRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateTagRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateTagRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateTagRequest_FieldSubPath) ClearValue(item *CreateTagRequest) {
	if item != nil {
		switch fps.selector {
		case CreateTagRequest_FieldPathSelectorTag:
			fps.subPath.ClearValueRaw(item.Tag)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateTagRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateTagRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateTagRequest_FieldSubPath) WithIValue(value interface{}) CreateTagRequest_FieldPathValue {
	return &CreateTagRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateTagRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateTagRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateTagRequest_FieldPathArrayOfValues {
	return &CreateTagRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateTagRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateTagRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateTagRequest_FieldPathArrayItemValue {
	return &CreateTagRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateTagRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateTagRequest_FieldPathValue allows storing values for CreateTagRequest fields according to their type
type CreateTagRequest_FieldPathValue interface {
	CreateTagRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateTagRequest)
	CompareWith(*CreateTagRequest) (cmp int, comparable bool)
}

func ParseCreateTagRequest_FieldPathValue(pathStr, valueStr string) (CreateTagRequest_FieldPathValue, error) {
	fp, err := ParseCreateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateTagRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateTagRequest_FieldPathValue), nil
}

func MustParseCreateTagRequest_FieldPathValue(pathStr, valueStr string) CreateTagRequest_FieldPathValue {
	fpv, err := ParseCreateTagRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateTagRequest_FieldTerminalPathValue struct {
	CreateTagRequest_FieldTerminalPath
	value interface{}
}

var _ CreateTagRequest_FieldPathValue = (*CreateTagRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateTagRequest' as interface{}
func (fpv *CreateTagRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateTagRequest_FieldTerminalPathValue) AsParentValue() (*tag.ParentReference, bool) {
	res, ok := fpv.value.(*tag.ParentReference)
	return res, ok
}
func (fpv *CreateTagRequest_FieldTerminalPathValue) AsTagValue() (*tag.Tag, bool) {
	res, ok := fpv.value.(*tag.Tag)
	return res, ok
}

// SetTo stores value for selected field for object CreateTagRequest
func (fpv *CreateTagRequest_FieldTerminalPathValue) SetTo(target **CreateTagRequest) {
	if *target == nil {
		*target = new(CreateTagRequest)
	}
	switch fpv.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*tag.ParentReference)
	case CreateTagRequest_FieldPathSelectorTag:
		(*target).Tag = fpv.value.(*tag.Tag)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fpv.selector))
	}
}

func (fpv *CreateTagRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateTagRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateTagRequest_FieldTerminalPathValue' with the value under path in 'CreateTagRequest'.
func (fpv *CreateTagRequest_FieldTerminalPathValue) CompareWith(source *CreateTagRequest) (int, bool) {
	switch fpv.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*tag.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateTagRequest_FieldPathSelectorTag:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fpv.selector))
	}
}

func (fpv *CreateTagRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateTagRequest))
}

type CreateTagRequest_FieldSubPathValue struct {
	CreateTagRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateTagRequest_FieldPathValue = (*CreateTagRequest_FieldSubPathValue)(nil)

func (fpvs *CreateTagRequest_FieldSubPathValue) AsTagPathValue() (tag.Tag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(tag.Tag_FieldPathValue)
	return res, ok
}

func (fpvs *CreateTagRequest_FieldSubPathValue) SetTo(target **CreateTagRequest) {
	if *target == nil {
		*target = new(CreateTagRequest)
	}
	switch fpvs.Selector() {
	case CreateTagRequest_FieldPathSelectorTag:
		fpvs.subPathValue.(tag.Tag_FieldPathValue).SetTo(&(*target).Tag)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateTagRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateTagRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateTagRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateTagRequest_FieldSubPathValue) CompareWith(source *CreateTagRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateTagRequest_FieldPathSelectorTag:
		return fpvs.subPathValue.(tag.Tag_FieldPathValue).CompareWith(source.GetTag())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateTagRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateTagRequest))
}

// CreateTagRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateTagRequest according to their type
// Present only for array (repeated) types.
type CreateTagRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateTagRequest_FieldPath
	ContainsValue(*CreateTagRequest) bool
}

// ParseCreateTagRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateTagRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateTagRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateTagRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateTagRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateTagRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateTagRequest_FieldTerminalPathArrayItemValue struct {
	CreateTagRequest_FieldTerminalPath
	value interface{}
}

var _ CreateTagRequest_FieldPathArrayItemValue = (*CreateTagRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateTagRequest as interface{}
func (fpaiv *CreateTagRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateTagRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateTagRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateTagRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateTagRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateTagRequest'
func (fpaiv *CreateTagRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateTagRequest) bool {
	slice := fpaiv.CreateTagRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateTagRequest_FieldSubPathArrayItemValue struct {
	CreateTagRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateTagRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateTagRequest_FieldSubPathArrayItemValue) AsTagPathItemValue() (tag.Tag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateTagRequest'
func (fpaivs *CreateTagRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateTagRequest) bool {
	switch fpaivs.Selector() {
	case CreateTagRequest_FieldPathSelectorTag:
		return fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue).ContainsValue(source.GetTag())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateTagRequest: %d", fpaivs.Selector()))
	}
}

// CreateTagRequest_FieldPathArrayOfValues allows storing slice of values for CreateTagRequest fields according to their type
type CreateTagRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateTagRequest_FieldPath
}

func ParseCreateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateTagRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateTagRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateTagRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateTagRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateTagRequest_FieldTerminalPathArrayOfValues struct {
	CreateTagRequest_FieldTerminalPath
	values interface{}
}

var _ CreateTagRequest_FieldPathArrayOfValues = (*CreateTagRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateTagRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateTagRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*tag.ParentReference) {
			values = append(values, v)
		}
	case CreateTagRequest_FieldPathSelectorTag:
		for _, v := range fpaov.values.([]*tag.Tag) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateTagRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*tag.ParentReference, bool) {
	res, ok := fpaov.values.([]*tag.ParentReference)
	return res, ok
}
func (fpaov *CreateTagRequest_FieldTerminalPathArrayOfValues) AsTagArrayOfValues() ([]*tag.Tag, bool) {
	res, ok := fpaov.values.([]*tag.Tag)
	return res, ok
}

type CreateTagRequest_FieldSubPathArrayOfValues struct {
	CreateTagRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateTagRequest_FieldPathArrayOfValues = (*CreateTagRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateTagRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateTagRequest_FieldSubPathArrayOfValues) AsTagPathArrayOfValues() (tag.Tag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(tag.Tag_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateTagRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateTagRequest_FieldPathSelector
	Get(source *UpdateTagRequest) []interface{}
	GetSingle(source *UpdateTagRequest) (interface{}, bool)
	ClearValue(item *UpdateTagRequest)

	// Those methods build corresponding UpdateTagRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateTagRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateTagRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateTagRequest_FieldPathArrayItemValue
}

type UpdateTagRequest_FieldPathSelector int32

const (
	UpdateTagRequest_FieldPathSelectorTag        UpdateTagRequest_FieldPathSelector = 0
	UpdateTagRequest_FieldPathSelectorUpdateMask UpdateTagRequest_FieldPathSelector = 1
	UpdateTagRequest_FieldPathSelectorCas        UpdateTagRequest_FieldPathSelector = 2
)

func (s UpdateTagRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateTagRequest_FieldPathSelectorTag:
		return "tag"
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateTagRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", s))
	}
}

func BuildUpdateTagRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateTagRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateTagRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "tag":
			return &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorTag}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "tag":
			if subpath, err := tag.BuildTag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateTagRequest_FieldSubPath{selector: UpdateTagRequest_FieldPathSelectorTag, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateTagRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateTagRequest_FieldSubPath{selector: UpdateTagRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateTagRequest", fp)
}

func ParseUpdateTagRequest_FieldPath(rawField string) (UpdateTagRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateTagRequest_FieldPath(fp)
}

func MustParseUpdateTagRequest_FieldPath(rawField string) UpdateTagRequest_FieldPath {
	fp, err := ParseUpdateTagRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateTagRequest_FieldTerminalPath struct {
	selector UpdateTagRequest_FieldPathSelector
}

var _ UpdateTagRequest_FieldPath = (*UpdateTagRequest_FieldTerminalPath)(nil)

func (fp *UpdateTagRequest_FieldTerminalPath) Selector() UpdateTagRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateTagRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateTagRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateTagRequest
func (fp *UpdateTagRequest_FieldTerminalPath) Get(source *UpdateTagRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateTagRequest_FieldPathSelectorTag:
			if source.Tag != nil {
				values = append(values, source.Tag)
			}
		case UpdateTagRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateTagRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateTagRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateTagRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateTagRequest
func (fp *UpdateTagRequest_FieldTerminalPath) GetSingle(source *UpdateTagRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		res := source.GetTag()
		return res, res != nil
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateTagRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
	}
}

func (fp *UpdateTagRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateTagRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateTagRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		return (*tag.Tag)(nil)
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		return (*tag.Tag_FieldMask)(nil)
	case UpdateTagRequest_FieldPathSelectorCas:
		return (*UpdateTagRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
	}
}

func (fp *UpdateTagRequest_FieldTerminalPath) ClearValue(item *UpdateTagRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateTagRequest_FieldPathSelectorTag:
			item.Tag = nil
		case UpdateTagRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateTagRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateTagRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateTagRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateTagRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateTagRequest_FieldPathValue {
	switch fp.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		return &UpdateTagRequest_FieldTerminalPathValue{UpdateTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag)}
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		return &UpdateTagRequest_FieldTerminalPathValue{UpdateTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	case UpdateTagRequest_FieldPathSelectorCas:
		return &UpdateTagRequest_FieldTerminalPathValue{UpdateTagRequest_FieldTerminalPath: *fp, value: value.(*UpdateTagRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
	}
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateTagRequest_FieldPathArrayOfValues {
	fpaov := &UpdateTagRequest_FieldTerminalPathArrayOfValues{UpdateTagRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		return &UpdateTagRequest_FieldTerminalPathArrayOfValues{UpdateTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag)}
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		return &UpdateTagRequest_FieldTerminalPathArrayOfValues{UpdateTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	case UpdateTagRequest_FieldPathSelectorCas:
		return &UpdateTagRequest_FieldTerminalPathArrayOfValues{UpdateTagRequest_FieldTerminalPath: *fp, values: values.([]*UpdateTagRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateTagRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fp.selector))
	}
}

func (fp *UpdateTagRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateTagRequest_FieldSubPath struct {
	selector UpdateTagRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateTagRequest_FieldPath = (*UpdateTagRequest_FieldSubPath)(nil)

func (fps *UpdateTagRequest_FieldSubPath) Selector() UpdateTagRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateTagRequest_FieldSubPath) AsTagSubPath() (tag.Tag_FieldPath, bool) {
	res, ok := fps.subPath.(tag.Tag_FieldPath)
	return res, ok
}
func (fps *UpdateTagRequest_FieldSubPath) AsCasSubPath() (UpdateTagRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateTagRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateTagRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateTagRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateTagRequest
func (fps *UpdateTagRequest_FieldSubPath) Get(source *UpdateTagRequest) (values []interface{}) {
	if asTagFieldPath, ok := fps.AsTagSubPath(); ok {
		values = append(values, asTagFieldPath.Get(source.GetTag())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateTagRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateTagRequest))
}

// GetSingle returns value of selected field from source UpdateTagRequest
func (fps *UpdateTagRequest_FieldSubPath) GetSingle(source *UpdateTagRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		if source.GetTag() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTag())
	case UpdateTagRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fps.selector))
	}
}

func (fps *UpdateTagRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateTagRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateTagRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateTagRequest_FieldSubPath) ClearValue(item *UpdateTagRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateTagRequest_FieldPathSelectorTag:
			fps.subPath.ClearValueRaw(item.Tag)
		case UpdateTagRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateTagRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateTagRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateTagRequest_FieldSubPath) WithIValue(value interface{}) UpdateTagRequest_FieldPathValue {
	return &UpdateTagRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateTagRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateTagRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateTagRequest_FieldPathArrayOfValues {
	return &UpdateTagRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateTagRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateTagRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateTagRequest_FieldPathArrayItemValue {
	return &UpdateTagRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateTagRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateTagRequest_FieldPathValue allows storing values for UpdateTagRequest fields according to their type
type UpdateTagRequest_FieldPathValue interface {
	UpdateTagRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateTagRequest)
	CompareWith(*UpdateTagRequest) (cmp int, comparable bool)
}

func ParseUpdateTagRequest_FieldPathValue(pathStr, valueStr string) (UpdateTagRequest_FieldPathValue, error) {
	fp, err := ParseUpdateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateTagRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateTagRequest_FieldPathValue), nil
}

func MustParseUpdateTagRequest_FieldPathValue(pathStr, valueStr string) UpdateTagRequest_FieldPathValue {
	fpv, err := ParseUpdateTagRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateTagRequest_FieldTerminalPathValue struct {
	UpdateTagRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateTagRequest_FieldPathValue = (*UpdateTagRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateTagRequest' as interface{}
func (fpv *UpdateTagRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateTagRequest_FieldTerminalPathValue) AsTagValue() (*tag.Tag, bool) {
	res, ok := fpv.value.(*tag.Tag)
	return res, ok
}
func (fpv *UpdateTagRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}
func (fpv *UpdateTagRequest_FieldTerminalPathValue) AsCasValue() (*UpdateTagRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateTagRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateTagRequest
func (fpv *UpdateTagRequest_FieldTerminalPathValue) SetTo(target **UpdateTagRequest) {
	if *target == nil {
		*target = new(UpdateTagRequest)
	}
	switch fpv.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		(*target).Tag = fpv.value.(*tag.Tag)
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*tag.Tag_FieldMask)
	case UpdateTagRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateTagRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateTagRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateTagRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateTagRequest_FieldTerminalPathValue' with the value under path in 'UpdateTagRequest'.
func (fpv *UpdateTagRequest_FieldTerminalPathValue) CompareWith(source *UpdateTagRequest) (int, bool) {
	switch fpv.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		return 0, false
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateTagRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateTagRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateTagRequest))
}

type UpdateTagRequest_FieldSubPathValue struct {
	UpdateTagRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateTagRequest_FieldPathValue = (*UpdateTagRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateTagRequest_FieldSubPathValue) AsTagPathValue() (tag.Tag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(tag.Tag_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateTagRequest_FieldSubPathValue) AsCasPathValue() (UpdateTagRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateTagRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateTagRequest_FieldSubPathValue) SetTo(target **UpdateTagRequest) {
	if *target == nil {
		*target = new(UpdateTagRequest)
	}
	switch fpvs.Selector() {
	case UpdateTagRequest_FieldPathSelectorTag:
		fpvs.subPathValue.(tag.Tag_FieldPathValue).SetTo(&(*target).Tag)
	case UpdateTagRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateTagRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateTagRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateTagRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateTagRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateTagRequest_FieldSubPathValue) CompareWith(source *UpdateTagRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateTagRequest_FieldPathSelectorTag:
		return fpvs.subPathValue.(tag.Tag_FieldPathValue).CompareWith(source.GetTag())
	case UpdateTagRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateTagRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateTagRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateTagRequest))
}

// UpdateTagRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateTagRequest according to their type
// Present only for array (repeated) types.
type UpdateTagRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateTagRequest_FieldPath
	ContainsValue(*UpdateTagRequest) bool
}

// ParseUpdateTagRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateTagRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateTagRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateTagRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateTagRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateTagRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateTagRequest_FieldTerminalPathArrayItemValue struct {
	UpdateTagRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateTagRequest_FieldPathArrayItemValue = (*UpdateTagRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateTagRequest as interface{}
func (fpaiv *UpdateTagRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateTagRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateTagRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateTagRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateTagRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateTagRequest'
func (fpaiv *UpdateTagRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateTagRequest) bool {
	slice := fpaiv.UpdateTagRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateTagRequest_FieldSubPathArrayItemValue struct {
	UpdateTagRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateTagRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateTagRequest_FieldSubPathArrayItemValue) AsTagPathItemValue() (tag.Tag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateTagRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateTagRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateTagRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateTagRequest'
func (fpaivs *UpdateTagRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateTagRequest) bool {
	switch fpaivs.Selector() {
	case UpdateTagRequest_FieldPathSelectorTag:
		return fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue).ContainsValue(source.GetTag())
	case UpdateTagRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateTagRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest: %d", fpaivs.Selector()))
	}
}

// UpdateTagRequest_FieldPathArrayOfValues allows storing slice of values for UpdateTagRequest fields according to their type
type UpdateTagRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateTagRequest_FieldPath
}

func ParseUpdateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateTagRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateTagRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateTagRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateTagRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateTagRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateTagRequest_FieldTerminalPathArrayOfValues struct {
	UpdateTagRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateTagRequest_FieldPathArrayOfValues = (*UpdateTagRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateTagRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateTagRequest_FieldPathSelectorTag:
		for _, v := range fpaov.values.([]*tag.Tag) {
			values = append(values, v)
		}
	case UpdateTagRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	case UpdateTagRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateTagRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateTagRequest_FieldTerminalPathArrayOfValues) AsTagArrayOfValues() ([]*tag.Tag, bool) {
	res, ok := fpaov.values.([]*tag.Tag)
	return res, ok
}
func (fpaov *UpdateTagRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}
func (fpaov *UpdateTagRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateTagRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateTagRequest_CAS)
	return res, ok
}

type UpdateTagRequest_FieldSubPathArrayOfValues struct {
	UpdateTagRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateTagRequest_FieldPathArrayOfValues = (*UpdateTagRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateTagRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateTagRequest_FieldSubPathArrayOfValues) AsTagPathArrayOfValues() (tag.Tag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(tag.Tag_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateTagRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateTagRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateTagRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateTagRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateTagRequestCAS_FieldPathSelector
	Get(source *UpdateTagRequest_CAS) []interface{}
	GetSingle(source *UpdateTagRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateTagRequest_CAS)

	// Those methods build corresponding UpdateTagRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateTagRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateTagRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateTagRequestCAS_FieldPathArrayItemValue
}

type UpdateTagRequestCAS_FieldPathSelector int32

const (
	UpdateTagRequestCAS_FieldPathSelectorConditionalState UpdateTagRequestCAS_FieldPathSelector = 0
	UpdateTagRequestCAS_FieldPathSelectorFieldMask        UpdateTagRequestCAS_FieldPathSelector = 1
)

func (s UpdateTagRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", s))
	}
}

func BuildUpdateTagRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateTagRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateTagRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateTagRequestCAS_FieldTerminalPath{selector: UpdateTagRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateTagRequestCAS_FieldTerminalPath{selector: UpdateTagRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := tag.BuildTag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateTagRequestCAS_FieldSubPath{selector: UpdateTagRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateTagRequest_CAS", fp)
}

func ParseUpdateTagRequestCAS_FieldPath(rawField string) (UpdateTagRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateTagRequestCAS_FieldPath(fp)
}

func MustParseUpdateTagRequestCAS_FieldPath(rawField string) UpdateTagRequestCAS_FieldPath {
	fp, err := ParseUpdateTagRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateTagRequestCAS_FieldTerminalPath struct {
	selector UpdateTagRequestCAS_FieldPathSelector
}

var _ UpdateTagRequestCAS_FieldPath = (*UpdateTagRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateTagRequestCAS_FieldTerminalPath) Selector() UpdateTagRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateTagRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateTagRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateTagRequest_CAS
func (fp *UpdateTagRequestCAS_FieldTerminalPath) Get(source *UpdateTagRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateTagRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateTagRequest_CAS
func (fp *UpdateTagRequestCAS_FieldTerminalPath) GetSingle(source *UpdateTagRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateTagRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateTagRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return (*tag.Tag)(nil)
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		return (*tag.Tag_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) ClearValue(item *UpdateTagRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateTagRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateTagRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateTagRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateTagRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateTagRequestCAS_FieldTerminalPathValue{UpdateTagRequestCAS_FieldTerminalPath: *fp, value: value.(*tag.Tag)}
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateTagRequestCAS_FieldTerminalPathValue{UpdateTagRequestCAS_FieldTerminalPath: *fp, value: value.(*tag.Tag_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateTagRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateTagRequestCAS_FieldTerminalPathArrayOfValues{UpdateTagRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateTagRequestCAS_FieldTerminalPathArrayOfValues{UpdateTagRequestCAS_FieldTerminalPath: *fp, values: values.([]*tag.Tag)}
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateTagRequestCAS_FieldTerminalPathArrayOfValues{UpdateTagRequestCAS_FieldTerminalPath: *fp, values: values.([]*tag.Tag_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateTagRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateTagRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateTagRequestCAS_FieldSubPath struct {
	selector UpdateTagRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateTagRequestCAS_FieldPath = (*UpdateTagRequestCAS_FieldSubPath)(nil)

func (fps *UpdateTagRequestCAS_FieldSubPath) Selector() UpdateTagRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateTagRequestCAS_FieldSubPath) AsConditionalStateSubPath() (tag.Tag_FieldPath, bool) {
	res, ok := fps.subPath.(tag.Tag_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateTagRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateTagRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateTagRequest_CAS
func (fps *UpdateTagRequestCAS_FieldSubPath) Get(source *UpdateTagRequest_CAS) (values []interface{}) {
	if asTagFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asTagFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateTagRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateTagRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateTagRequest_CAS
func (fps *UpdateTagRequestCAS_FieldSubPath) GetSingle(source *UpdateTagRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateTagRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateTagRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateTagRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateTagRequestCAS_FieldSubPath) ClearValue(item *UpdateTagRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateTagRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateTagRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateTagRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateTagRequestCAS_FieldPathValue {
	return &UpdateTagRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateTagRequestCAS_FieldPathArrayOfValues {
	return &UpdateTagRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateTagRequestCAS_FieldPathArrayItemValue {
	return &UpdateTagRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateTagRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateTagRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateTagRequestCAS_FieldPathValue interface {
	UpdateTagRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateTagRequest_CAS)
	CompareWith(*UpdateTagRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateTagRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateTagRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateTagRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateTagRequestCAS_FieldPathValue), nil
}

func MustParseUpdateTagRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateTagRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateTagRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateTagRequestCAS_FieldTerminalPathValue struct {
	UpdateTagRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateTagRequestCAS_FieldPathValue = (*UpdateTagRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*tag.Tag, bool) {
	res, ok := fpv.value.(*tag.Tag)
	return res, ok
}
func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*tag.Tag_FieldMask, bool) {
	res, ok := fpv.value.(*tag.Tag_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateTagRequest_CAS) {
	if *target == nil {
		*target = new(UpdateTagRequest_CAS)
	}
	switch fpv.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*tag.Tag)
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*tag.Tag_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateTagRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateTagRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateTagRequest_CAS'.
func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateTagRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateTagRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateTagRequest_CAS))
}

type UpdateTagRequestCAS_FieldSubPathValue struct {
	UpdateTagRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateTagRequestCAS_FieldPathValue = (*UpdateTagRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (tag.Tag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(tag.Tag_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) SetTo(target **UpdateTagRequest_CAS) {
	if *target == nil {
		*target = new(UpdateTagRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(tag.Tag_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateTagRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) CompareWith(source *UpdateTagRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(tag.Tag_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateTagRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateTagRequest_CAS))
}

// UpdateTagRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateTagRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateTagRequestCAS_FieldPath
	ContainsValue(*UpdateTagRequest_CAS) bool
}

// ParseUpdateTagRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateTagRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateTagRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateTagRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateTagRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateTagRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateTagRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateTagRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateTagRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateTagRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateTagRequestCAS_FieldPathArrayItemValue = (*UpdateTagRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateTagRequest_CAS as interface{}
func (fpaiv *UpdateTagRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateTagRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateTagRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateTagRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateTagRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateTagRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateTagRequest_CAS) bool {
	slice := fpaiv.UpdateTagRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateTagRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateTagRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateTagRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateTagRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (tag.Tag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateTagRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateTagRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(tag.Tag_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateTagRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateTagRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateTagRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateTagRequestCAS_FieldPath
}

func ParseUpdateTagRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateTagRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateTagRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateTagRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateTagRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateTagRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateTagRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateTagRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateTagRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateTagRequestCAS_FieldPathArrayOfValues = (*UpdateTagRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateTagRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateTagRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*tag.Tag) {
			values = append(values, v)
		}
	case UpdateTagRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*tag.Tag_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateTagRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*tag.Tag, bool) {
	res, ok := fpaov.values.([]*tag.Tag)
	return res, ok
}
func (fpaov *UpdateTagRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*tag.Tag_FieldMask, bool) {
	res, ok := fpaov.values.([]*tag.Tag_FieldMask)
	return res, ok
}

type UpdateTagRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateTagRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateTagRequestCAS_FieldPathArrayOfValues = (*UpdateTagRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateTagRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateTagRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (tag.Tag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(tag.Tag_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteTagRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteTagRequest_FieldPathSelector
	Get(source *DeleteTagRequest) []interface{}
	GetSingle(source *DeleteTagRequest) (interface{}, bool)
	ClearValue(item *DeleteTagRequest)

	// Those methods build corresponding DeleteTagRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteTagRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteTagRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteTagRequest_FieldPathArrayItemValue
}

type DeleteTagRequest_FieldPathSelector int32

const (
	DeleteTagRequest_FieldPathSelectorName DeleteTagRequest_FieldPathSelector = 0
)

func (s DeleteTagRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteTagRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", s))
	}
}

func BuildDeleteTagRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteTagRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteTagRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteTagRequest_FieldTerminalPath{selector: DeleteTagRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteTagRequest", fp)
}

func ParseDeleteTagRequest_FieldPath(rawField string) (DeleteTagRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteTagRequest_FieldPath(fp)
}

func MustParseDeleteTagRequest_FieldPath(rawField string) DeleteTagRequest_FieldPath {
	fp, err := ParseDeleteTagRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteTagRequest_FieldTerminalPath struct {
	selector DeleteTagRequest_FieldPathSelector
}

var _ DeleteTagRequest_FieldPath = (*DeleteTagRequest_FieldTerminalPath)(nil)

func (fp *DeleteTagRequest_FieldTerminalPath) Selector() DeleteTagRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteTagRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteTagRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteTagRequest
func (fp *DeleteTagRequest_FieldTerminalPath) Get(source *DeleteTagRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteTagRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteTagRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteTagRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteTagRequest
func (fp *DeleteTagRequest_FieldTerminalPath) GetSingle(source *DeleteTagRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
	}
}

func (fp *DeleteTagRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteTagRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteTagRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		return (*tag.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
	}
}

func (fp *DeleteTagRequest_FieldTerminalPath) ClearValue(item *DeleteTagRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteTagRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteTagRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteTagRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteTagRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteTagRequest_FieldPathSelectorName
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteTagRequest_FieldPathValue {
	switch fp.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		return &DeleteTagRequest_FieldTerminalPathValue{DeleteTagRequest_FieldTerminalPath: *fp, value: value.(*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
	}
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteTagRequest_FieldPathArrayOfValues {
	fpaov := &DeleteTagRequest_FieldTerminalPathArrayOfValues{DeleteTagRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		return &DeleteTagRequest_FieldTerminalPathArrayOfValues{DeleteTagRequest_FieldTerminalPath: *fp, values: values.([]*tag.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteTagRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fp.selector))
	}
}

func (fp *DeleteTagRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteTagRequest_FieldPathValue allows storing values for DeleteTagRequest fields according to their type
type DeleteTagRequest_FieldPathValue interface {
	DeleteTagRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteTagRequest)
	CompareWith(*DeleteTagRequest) (cmp int, comparable bool)
}

func ParseDeleteTagRequest_FieldPathValue(pathStr, valueStr string) (DeleteTagRequest_FieldPathValue, error) {
	fp, err := ParseDeleteTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteTagRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteTagRequest_FieldPathValue), nil
}

func MustParseDeleteTagRequest_FieldPathValue(pathStr, valueStr string) DeleteTagRequest_FieldPathValue {
	fpv, err := ParseDeleteTagRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteTagRequest_FieldTerminalPathValue struct {
	DeleteTagRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteTagRequest_FieldPathValue = (*DeleteTagRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteTagRequest' as interface{}
func (fpv *DeleteTagRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteTagRequest_FieldTerminalPathValue) AsNameValue() (*tag.Reference, bool) {
	res, ok := fpv.value.(*tag.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteTagRequest
func (fpv *DeleteTagRequest_FieldTerminalPathValue) SetTo(target **DeleteTagRequest) {
	if *target == nil {
		*target = new(DeleteTagRequest)
	}
	switch fpv.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*tag.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteTagRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteTagRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteTagRequest_FieldTerminalPathValue' with the value under path in 'DeleteTagRequest'.
func (fpv *DeleteTagRequest_FieldTerminalPathValue) CompareWith(source *DeleteTagRequest) (int, bool) {
	switch fpv.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*tag.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteTagRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteTagRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteTagRequest))
}

// DeleteTagRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteTagRequest according to their type
// Present only for array (repeated) types.
type DeleteTagRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteTagRequest_FieldPath
	ContainsValue(*DeleteTagRequest) bool
}

// ParseDeleteTagRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteTagRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteTagRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteTagRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteTagRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteTagRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteTagRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteTagRequest_FieldTerminalPathArrayItemValue struct {
	DeleteTagRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteTagRequest_FieldPathArrayItemValue = (*DeleteTagRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteTagRequest as interface{}
func (fpaiv *DeleteTagRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteTagRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteTagRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteTagRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteTagRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteTagRequest'
func (fpaiv *DeleteTagRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteTagRequest) bool {
	slice := fpaiv.DeleteTagRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteTagRequest_FieldPathArrayOfValues allows storing slice of values for DeleteTagRequest fields according to their type
type DeleteTagRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteTagRequest_FieldPath
}

func ParseDeleteTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteTagRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteTagRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteTagRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteTagRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteTagRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteTagRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteTagRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteTagRequest_FieldTerminalPathArrayOfValues struct {
	DeleteTagRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteTagRequest_FieldPathArrayOfValues = (*DeleteTagRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteTagRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteTagRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*tag.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteTagRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*tag.Reference, bool) {
	res, ok := fpaov.values.([]*tag.Reference)
	return res, ok
}
