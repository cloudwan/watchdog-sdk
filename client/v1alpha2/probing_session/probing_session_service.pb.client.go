// Code generated by protoc-gen-goten-client
// API: ProbingSessionService
// DO NOT EDIT!!!

package probing_session_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probing_session "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_session"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_session.ProbingSession{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbingSessionServiceClient is the client API for ProbingSessionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbingSessionServiceClient interface {
	GetProbingSession(ctx context.Context, in *GetProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error)
	BatchGetProbingSessions(ctx context.Context, in *BatchGetProbingSessionsRequest, opts ...grpc.CallOption) (*BatchGetProbingSessionsResponse, error)
	ListProbingSessions(ctx context.Context, in *ListProbingSessionsRequest, opts ...grpc.CallOption) (*ListProbingSessionsResponse, error)
	WatchProbingSession(ctx context.Context, in *WatchProbingSessionRequest, opts ...grpc.CallOption) (WatchProbingSessionClientStream, error)
	WatchProbingSessions(ctx context.Context, in *WatchProbingSessionsRequest, opts ...grpc.CallOption) (WatchProbingSessionsClientStream, error)
	CreateProbingSession(ctx context.Context, in *CreateProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error)
	UpdateProbingSession(ctx context.Context, in *UpdateProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error)
	DeleteProbingSession(ctx context.Context, in *DeleteProbingSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchProbingSessions(ctx context.Context, in *SearchProbingSessionsRequest, opts ...grpc.CallOption) (*SearchProbingSessionsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbingSessionServiceClient(cc grpc.ClientConnInterface) ProbingSessionServiceClient {
	return &client{cc}
}

func (c *client) GetProbingSession(ctx context.Context, in *GetProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error) {
	out := new(probing_session.ProbingSession)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/GetProbingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbingSessions(ctx context.Context, in *BatchGetProbingSessionsRequest, opts ...grpc.CallOption) (*BatchGetProbingSessionsResponse, error) {
	out := new(BatchGetProbingSessionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/BatchGetProbingSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbingSessions(ctx context.Context, in *ListProbingSessionsRequest, opts ...grpc.CallOption) (*ListProbingSessionsResponse, error) {
	out := new(ListProbingSessionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/ListProbingSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbingSession(ctx context.Context, in *WatchProbingSessionRequest, opts ...grpc.CallOption) (WatchProbingSessionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingSession",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingSessionService/WatchProbingSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingSessionWatchProbingSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingSessionClientStream interface {
	Recv() (*WatchProbingSessionResponse, error)
	grpc.ClientStream
}

type watchProbingSessionWatchProbingSessionClient struct {
	grpc.ClientStream
}

func (x *watchProbingSessionWatchProbingSessionClient) Recv() (*WatchProbingSessionResponse, error) {
	m := new(WatchProbingSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbingSessions(ctx context.Context, in *WatchProbingSessionsRequest, opts ...grpc.CallOption) (WatchProbingSessionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingSessions",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingSessionService/WatchProbingSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingSessionsWatchProbingSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingSessionsClientStream interface {
	Recv() (*WatchProbingSessionsResponse, error)
	grpc.ClientStream
}

type watchProbingSessionsWatchProbingSessionsClient struct {
	grpc.ClientStream
}

func (x *watchProbingSessionsWatchProbingSessionsClient) Recv() (*WatchProbingSessionsResponse, error) {
	m := new(WatchProbingSessionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbingSession(ctx context.Context, in *CreateProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error) {
	out := new(probing_session.ProbingSession)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/CreateProbingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbingSession(ctx context.Context, in *UpdateProbingSessionRequest, opts ...grpc.CallOption) (*probing_session.ProbingSession, error) {
	out := new(probing_session.ProbingSession)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/UpdateProbingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbingSession(ctx context.Context, in *DeleteProbingSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/DeleteProbingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchProbingSessions(ctx context.Context, in *SearchProbingSessionsRequest, opts ...grpc.CallOption) (*SearchProbingSessionsResponse, error) {
	out := new(SearchProbingSessionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingSessionService/SearchProbingSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
