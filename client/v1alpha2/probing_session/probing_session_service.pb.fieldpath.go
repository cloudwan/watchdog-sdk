// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_session_service.proto
// DO NOT EDIT!!!

package probing_session_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_session "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_session"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_session.ProbingSession{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbingSessionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbingSessionRequest_FieldPathSelector
	Get(source *GetProbingSessionRequest) []interface{}
	GetSingle(source *GetProbingSessionRequest) (interface{}, bool)
	ClearValue(item *GetProbingSessionRequest)

	// Those methods build corresponding GetProbingSessionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbingSessionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbingSessionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbingSessionRequest_FieldPathArrayItemValue
}

type GetProbingSessionRequest_FieldPathSelector int32

const (
	GetProbingSessionRequest_FieldPathSelectorName      GetProbingSessionRequest_FieldPathSelector = 0
	GetProbingSessionRequest_FieldPathSelectorFieldMask GetProbingSessionRequest_FieldPathSelector = 1
	GetProbingSessionRequest_FieldPathSelectorView      GetProbingSessionRequest_FieldPathSelector = 2
)

func (s GetProbingSessionRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbingSessionRequest_FieldPathSelectorName:
		return "name"
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbingSessionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", s))
	}
}

func BuildGetProbingSessionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbingSessionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbingSessionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbingSessionRequest", fp)
}

func ParseGetProbingSessionRequest_FieldPath(rawField string) (GetProbingSessionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbingSessionRequest_FieldPath(fp)
}

func MustParseGetProbingSessionRequest_FieldPath(rawField string) GetProbingSessionRequest_FieldPath {
	fp, err := ParseGetProbingSessionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbingSessionRequest_FieldTerminalPath struct {
	selector GetProbingSessionRequest_FieldPathSelector
}

var _ GetProbingSessionRequest_FieldPath = (*GetProbingSessionRequest_FieldTerminalPath)(nil)

func (fp *GetProbingSessionRequest_FieldTerminalPath) Selector() GetProbingSessionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbingSessionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbingSessionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbingSessionRequest
func (fp *GetProbingSessionRequest_FieldTerminalPath) Get(source *GetProbingSessionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbingSessionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbingSessionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbingSessionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbingSessionRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbingSessionRequest
func (fp *GetProbingSessionRequest_FieldTerminalPath) GetSingle(source *GetProbingSessionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbingSessionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbingSessionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		return (*probing_session.Reference)(nil)
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case GetProbingSessionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) ClearValue(item *GetProbingSessionRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbingSessionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbingSessionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbingSessionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbingSessionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbingSessionRequest_FieldPathSelectorName ||
		fp.selector == GetProbingSessionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbingSessionRequest_FieldPathSelectorView
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbingSessionRequest_FieldPathValue {
	switch fp.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		return &GetProbingSessionRequest_FieldTerminalPathValue{GetProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Reference)}
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		return &GetProbingSessionRequest_FieldTerminalPathValue{GetProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case GetProbingSessionRequest_FieldPathSelectorView:
		return &GetProbingSessionRequest_FieldTerminalPathValue{GetProbingSessionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbingSessionRequest_FieldPathArrayOfValues {
	fpaov := &GetProbingSessionRequest_FieldTerminalPathArrayOfValues{GetProbingSessionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		return &GetProbingSessionRequest_FieldTerminalPathArrayOfValues{GetProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Reference)}
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		return &GetProbingSessionRequest_FieldTerminalPathArrayOfValues{GetProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case GetProbingSessionRequest_FieldPathSelectorView:
		return &GetProbingSessionRequest_FieldTerminalPathArrayOfValues{GetProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbingSessionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingSessionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbingSessionRequest_FieldPathValue allows storing values for GetProbingSessionRequest fields according to their type
type GetProbingSessionRequest_FieldPathValue interface {
	GetProbingSessionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbingSessionRequest)
	CompareWith(*GetProbingSessionRequest) (cmp int, comparable bool)
}

func ParseGetProbingSessionRequest_FieldPathValue(pathStr, valueStr string) (GetProbingSessionRequest_FieldPathValue, error) {
	fp, err := ParseGetProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingSessionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbingSessionRequest_FieldPathValue), nil
}

func MustParseGetProbingSessionRequest_FieldPathValue(pathStr, valueStr string) GetProbingSessionRequest_FieldPathValue {
	fpv, err := ParseGetProbingSessionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbingSessionRequest_FieldTerminalPathValue struct {
	GetProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingSessionRequest_FieldPathValue = (*GetProbingSessionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbingSessionRequest' as interface{}
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) AsNameValue() (*probing_session.Reference, bool) {
	res, ok := fpv.value.(*probing_session.Reference)
	return res, ok
}
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbingSessionRequest
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) SetTo(target **GetProbingSessionRequest) {
	if *target == nil {
		*target = new(GetProbingSessionRequest)
	}
	switch fpv.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_session.Reference)
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case GetProbingSessionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbingSessionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbingSessionRequest_FieldTerminalPathValue' with the value under path in 'GetProbingSessionRequest'.
func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) CompareWith(source *GetProbingSessionRequest) (int, bool) {
	switch fpv.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_session.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbingSessionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingSessionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbingSessionRequest))
}

// GetProbingSessionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbingSessionRequest according to their type
// Present only for array (repeated) types.
type GetProbingSessionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbingSessionRequest_FieldPath
	ContainsValue(*GetProbingSessionRequest) bool
}

// ParseGetProbingSessionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbingSessionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingSessionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbingSessionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbingSessionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbingSessionRequest_FieldTerminalPathArrayItemValue struct {
	GetProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingSessionRequest_FieldPathArrayItemValue = (*GetProbingSessionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbingSessionRequest as interface{}
func (fpaiv *GetProbingSessionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbingSessionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbingSessionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbingSessionRequest'
func (fpaiv *GetProbingSessionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbingSessionRequest) bool {
	slice := fpaiv.GetProbingSessionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbingSessionRequest_FieldPathArrayOfValues allows storing slice of values for GetProbingSessionRequest fields according to their type
type GetProbingSessionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbingSessionRequest_FieldPath
}

func ParseGetProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbingSessionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingSessionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbingSessionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbingSessionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbingSessionRequest_FieldTerminalPathArrayOfValues struct {
	GetProbingSessionRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbingSessionRequest_FieldPathArrayOfValues = (*GetProbingSessionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbingSessionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbingSessionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_session.Reference) {
			values = append(values, v)
		}
	case GetProbingSessionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case GetProbingSessionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbingSessionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_session.Reference, bool) {
	res, ok := fpaov.values.([]*probing_session.Reference)
	return res, ok
}
func (fpaov *GetProbingSessionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *GetProbingSessionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingSessionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingSessionsRequest_FieldPathSelector
	Get(source *BatchGetProbingSessionsRequest) []interface{}
	GetSingle(source *BatchGetProbingSessionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbingSessionsRequest)

	// Those methods build corresponding BatchGetProbingSessionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingSessionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingSessionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingSessionsRequest_FieldPathArrayItemValue
}

type BatchGetProbingSessionsRequest_FieldPathSelector int32

const (
	BatchGetProbingSessionsRequest_FieldPathSelectorNames     BatchGetProbingSessionsRequest_FieldPathSelector = 0
	BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask BatchGetProbingSessionsRequest_FieldPathSelector = 1
	BatchGetProbingSessionsRequest_FieldPathSelectorView      BatchGetProbingSessionsRequest_FieldPathSelector = 2
)

func (s BatchGetProbingSessionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", s))
	}
}

func BuildBatchGetProbingSessionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingSessionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingSessionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingSessionsRequest", fp)
}

func ParseBatchGetProbingSessionsRequest_FieldPath(rawField string) (BatchGetProbingSessionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingSessionsRequest_FieldPath(fp)
}

func MustParseBatchGetProbingSessionsRequest_FieldPath(rawField string) BatchGetProbingSessionsRequest_FieldPath {
	fp, err := ParseBatchGetProbingSessionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingSessionsRequest_FieldTerminalPath struct {
	selector BatchGetProbingSessionsRequest_FieldPathSelector
}

var _ BatchGetProbingSessionsRequest_FieldPath = (*BatchGetProbingSessionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) Selector() BatchGetProbingSessionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingSessionsRequest
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) Get(source *BatchGetProbingSessionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbingSessionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingSessionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingSessionsRequest
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbingSessionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingSessionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return ([]*probing_session.Reference)(nil)
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbingSessionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbingSessionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingSessionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingSessionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbingSessionsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingSessionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathValue{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, value: value.([]*probing_session.Reference)}
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathValue{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathValue{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([][]*probing_session.Reference)}
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingSessionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue{BatchGetProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbingSessionsRequest_FieldPathValue allows storing values for BatchGetProbingSessionsRequest fields according to their type
type BatchGetProbingSessionsRequest_FieldPathValue interface {
	BatchGetProbingSessionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingSessionsRequest)
	CompareWith(*BatchGetProbingSessionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbingSessionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingSessionsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbingSessionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbingSessionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingSessionsRequest_FieldTerminalPathValue struct {
	BatchGetProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingSessionsRequest_FieldPathValue = (*BatchGetProbingSessionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingSessionsRequest' as interface{}
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probing_session.Reference, bool) {
	res, ok := fpv.value.([]*probing_session.Reference)
	return res, ok
}
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingSessionsRequest
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbingSessionsRequest) {
	if *target == nil {
		*target = new(BatchGetProbingSessionsRequest)
	}
	switch fpv.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probing_session.Reference)
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingSessionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingSessionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbingSessionsRequest'.
func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbingSessionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingSessionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingSessionsRequest))
}

// BatchGetProbingSessionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingSessionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbingSessionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingSessionsRequest_FieldPath
	ContainsValue(*BatchGetProbingSessionsRequest) bool
}

// ParseBatchGetProbingSessionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingSessionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingSessionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingSessionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingSessionsRequest_FieldPathArrayItemValue = (*BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingSessionsRequest as interface{}
func (fpaiv *BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probing_session.Reference, bool) {
	res, ok := fpaiv.value.(*probing_session.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingSessionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingSessionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingSessionsRequest'
func (fpaiv *BatchGetProbingSessionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingSessionsRequest) bool {
	slice := fpaiv.BatchGetProbingSessionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbingSessionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingSessionsRequest fields according to their type
type BatchGetProbingSessionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingSessionsRequest_FieldPath
}

func ParseBatchGetProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingSessionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingSessionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingSessionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingSessionsRequest_FieldPathArrayOfValues = (*BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingSessionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probing_session.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbingSessionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probing_session.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_session.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingSessionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingSessionsResponse_FieldPathSelector
	Get(source *BatchGetProbingSessionsResponse) []interface{}
	GetSingle(source *BatchGetProbingSessionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbingSessionsResponse)

	// Those methods build corresponding BatchGetProbingSessionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingSessionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathArrayItemValue
}

type BatchGetProbingSessionsResponse_FieldPathSelector int32

const (
	BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions BatchGetProbingSessionsResponse_FieldPathSelector = 0
	BatchGetProbingSessionsResponse_FieldPathSelectorMissing         BatchGetProbingSessionsResponse_FieldPathSelector = 1
)

func (s BatchGetProbingSessionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return "probing_sessions"
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", s))
	}
}

func BuildBatchGetProbingSessionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingSessionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingSessionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			return &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions}, nil
		case "missing":
			return &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbingSessionsResponse_FieldSubPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingSessionsResponse", fp)
}

func ParseBatchGetProbingSessionsResponse_FieldPath(rawField string) (BatchGetProbingSessionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingSessionsResponse_FieldPath(fp)
}

func MustParseBatchGetProbingSessionsResponse_FieldPath(rawField string) BatchGetProbingSessionsResponse_FieldPath {
	fp, err := ParseBatchGetProbingSessionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingSessionsResponse_FieldTerminalPath struct {
	selector BatchGetProbingSessionsResponse_FieldPathSelector
}

var _ BatchGetProbingSessionsResponse_FieldPath = (*BatchGetProbingSessionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) Selector() BatchGetProbingSessionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingSessionsResponse
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) Get(source *BatchGetProbingSessionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, value := range source.GetProbingSessions() {
				values = append(values, value)
			}
		case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingSessionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingSessionsResponse
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbingSessionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		res := source.GetProbingSessions()
		return res, res != nil
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return ([]*probing_session.ProbingSession)(nil)
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return ([]*probing_session.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbingSessionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
			item.ProbingSessions = nil
		case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingSessionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathValue{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_session.ProbingSession)}
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathValue{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_session.ProbingSession)}
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingSessionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbingSessionsResponse_FieldSubPath struct {
	selector BatchGetProbingSessionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbingSessionsResponse_FieldPath = (*BatchGetProbingSessionsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) Selector() BatchGetProbingSessionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) AsProbingSessionsSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbingSessionsResponse
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) Get(source *BatchGetProbingSessionsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, item := range source.GetProbingSessions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbingSessionsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbingSessionsResponse
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) GetSingle(source *BatchGetProbingSessionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		if len(source.GetProbingSessions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSessions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) ClearValue(item *BatchGetProbingSessionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, subItem := range item.ProbingSessions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbingSessionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProbingSessionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathValue {
	return &BatchGetProbingSessionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbingSessionsResponse_FieldPathArrayOfValues {
	return &BatchGetProbingSessionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbingSessionsResponse_FieldPathArrayItemValue {
	return &BatchGetProbingSessionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbingSessionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbingSessionsResponse_FieldPathValue allows storing values for BatchGetProbingSessionsResponse fields according to their type
type BatchGetProbingSessionsResponse_FieldPathValue interface {
	BatchGetProbingSessionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingSessionsResponse)
	CompareWith(*BatchGetProbingSessionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbingSessionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingSessionsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbingSessionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbingSessionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingSessionsResponse_FieldTerminalPathValue struct {
	BatchGetProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingSessionsResponse_FieldPathValue = (*BatchGetProbingSessionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingSessionsResponse' as interface{}
func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) AsProbingSessionsValue() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.([]*probing_session.ProbingSession)
	return res, ok
}
func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probing_session.Reference, bool) {
	res, ok := fpv.value.([]*probing_session.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingSessionsResponse
func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbingSessionsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingSessionsResponse)
	}
	switch fpv.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		(*target).ProbingSessions = fpv.value.([]*probing_session.ProbingSession)
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probing_session.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingSessionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingSessionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbingSessionsResponse'.
func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbingSessionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingSessionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingSessionsResponse))
}

type BatchGetProbingSessionsResponse_FieldSubPathValue struct {
	BatchGetProbingSessionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbingSessionsResponse_FieldPathValue = (*BatchGetProbingSessionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) AsProbingSessionsPathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) SetTo(target **BatchGetProbingSessionsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingSessionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingSessionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbingSessionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingSessionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbingSessionsResponse))
}

// BatchGetProbingSessionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingSessionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbingSessionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingSessionsResponse_FieldPath
	ContainsValue(*BatchGetProbingSessionsResponse) bool
}

// ParseBatchGetProbingSessionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingSessionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingSessionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingSessionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingSessionsResponse_FieldPathArrayItemValue = (*BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingSessionsResponse as interface{}
func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) AsProbingSessionsItemValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpaiv.value.(*probing_session.ProbingSession)
	return res, ok
}
func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probing_session.Reference, bool) {
	res, ok := fpaiv.value.(*probing_session.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingSessionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingSessionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingSessionsResponse'
func (fpaiv *BatchGetProbingSessionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingSessionsResponse) bool {
	slice := fpaiv.BatchGetProbingSessionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbingSessionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbingSessionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbingSessionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbingSessionsResponse_FieldSubPathArrayItemValue) AsProbingSessionsPathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingSessionsResponse'
func (fpaivs *BatchGetProbingSessionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbingSessionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingSessionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbingSessionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingSessionsResponse fields according to their type
type BatchGetProbingSessionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingSessionsResponse_FieldPath
}

func ParseBatchGetProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingSessionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingSessionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingSessionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingSessionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingSessionsResponse_FieldPathArrayOfValues = (*BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, v := range fpaov.values.([][]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	case BatchGetProbingSessionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probing_session.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsProbingSessionsArrayOfValues() ([][]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([][]*probing_session.ProbingSession)
	return res, ok
}
func (fpaov *BatchGetProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probing_session.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_session.Reference)
	return res, ok
}

type BatchGetProbingSessionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbingSessionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbingSessionsResponse_FieldPathArrayOfValues = (*BatchGetProbingSessionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbingSessionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbingSessionsResponse_FieldSubPathArrayOfValues) AsProbingSessionsPathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingSessionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingSessionsRequest_FieldPathSelector
	Get(source *ListProbingSessionsRequest) []interface{}
	GetSingle(source *ListProbingSessionsRequest) (interface{}, bool)
	ClearValue(item *ListProbingSessionsRequest)

	// Those methods build corresponding ListProbingSessionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingSessionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingSessionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingSessionsRequest_FieldPathArrayItemValue
}

type ListProbingSessionsRequest_FieldPathSelector int32

const (
	ListProbingSessionsRequest_FieldPathSelectorParent            ListProbingSessionsRequest_FieldPathSelector = 0
	ListProbingSessionsRequest_FieldPathSelectorPageSize          ListProbingSessionsRequest_FieldPathSelector = 1
	ListProbingSessionsRequest_FieldPathSelectorPageToken         ListProbingSessionsRequest_FieldPathSelector = 2
	ListProbingSessionsRequest_FieldPathSelectorOrderBy           ListProbingSessionsRequest_FieldPathSelector = 3
	ListProbingSessionsRequest_FieldPathSelectorFilter            ListProbingSessionsRequest_FieldPathSelector = 4
	ListProbingSessionsRequest_FieldPathSelectorFieldMask         ListProbingSessionsRequest_FieldPathSelector = 5
	ListProbingSessionsRequest_FieldPathSelectorView              ListProbingSessionsRequest_FieldPathSelector = 6
	ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo ListProbingSessionsRequest_FieldPathSelector = 7
)

func (s ListProbingSessionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbingSessionsRequest_FieldPathSelectorView:
		return "view"
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", s))
	}
}

func BuildListProbingSessionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbingSessionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingSessionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingSessionsRequest", fp)
}

func ParseListProbingSessionsRequest_FieldPath(rawField string) (ListProbingSessionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingSessionsRequest_FieldPath(fp)
}

func MustParseListProbingSessionsRequest_FieldPath(rawField string) ListProbingSessionsRequest_FieldPath {
	fp, err := ParseListProbingSessionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingSessionsRequest_FieldTerminalPath struct {
	selector ListProbingSessionsRequest_FieldPathSelector
}

var _ ListProbingSessionsRequest_FieldPath = (*ListProbingSessionsRequest_FieldTerminalPath)(nil)

func (fp *ListProbingSessionsRequest_FieldTerminalPath) Selector() ListProbingSessionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingSessionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingSessionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingSessionsRequest
func (fp *ListProbingSessionsRequest_FieldTerminalPath) Get(source *ListProbingSessionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingSessionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbingSessionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbingSessionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbingSessionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbingSessionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingSessionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbingSessionsRequest
func (fp *ListProbingSessionsRequest_FieldTerminalPath) GetSingle(source *ListProbingSessionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbingSessionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingSessionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingSessionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		return (*probing_session.ParentName)(nil)
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		return (*probing_session.PagerCursor)(nil)
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		return (*probing_session.OrderBy)(nil)
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		return (*probing_session.Filter)(nil)
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case ListProbingSessionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) ClearValue(item *ListProbingSessionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbingSessionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbingSessionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbingSessionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbingSessionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbingSessionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingSessionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingSessionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingSessionsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorView ||
		fp.selector == ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbingSessionsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ParentName)}
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.OrderBy)}
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Filter)}
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case ListProbingSessionsRequest_FieldPathSelectorView:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProbingSessionsRequest_FieldTerminalPathValue{ListProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ParentName)}
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.OrderBy)}
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Filter)}
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case ListProbingSessionsRequest_FieldPathSelectorView:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProbingSessionsRequest_FieldTerminalPathArrayOfValues{ListProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingSessionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbingSessionsRequest_FieldPathValue allows storing values for ListProbingSessionsRequest fields according to their type
type ListProbingSessionsRequest_FieldPathValue interface {
	ListProbingSessionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingSessionsRequest)
	CompareWith(*ListProbingSessionsRequest) (cmp int, comparable bool)
}

func ParseListProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) (ListProbingSessionsRequest_FieldPathValue, error) {
	fp, err := ParseListProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingSessionsRequest_FieldPathValue), nil
}

func MustParseListProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) ListProbingSessionsRequest_FieldPathValue {
	fpv, err := ParseListProbingSessionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingSessionsRequest_FieldTerminalPathValue struct {
	ListProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingSessionsRequest_FieldPathValue = (*ListProbingSessionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingSessionsRequest' as interface{}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_session.ParentName, bool) {
	res, ok := fpv.value.(*probing_session.ParentName)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_session.OrderBy, bool) {
	res, ok := fpv.value.(*probing_session.OrderBy)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_session.Filter, bool) {
	res, ok := fpv.value.(*probing_session.Filter)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingSessionsRequest
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) SetTo(target **ListProbingSessionsRequest) {
	if *target == nil {
		*target = new(ListProbingSessionsRequest)
	}
	switch fpv.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_session.ParentName)
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_session.PagerCursor)
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_session.OrderBy)
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_session.Filter)
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case ListProbingSessionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingSessionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingSessionsRequest_FieldTerminalPathValue' with the value under path in 'ListProbingSessionsRequest'.
func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) CompareWith(source *ListProbingSessionsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_session.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbingSessionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingSessionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingSessionsRequest))
}

// ListProbingSessionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingSessionsRequest according to their type
// Present only for array (repeated) types.
type ListProbingSessionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingSessionsRequest_FieldPath
	ContainsValue(*ListProbingSessionsRequest) bool
}

// ParseListProbingSessionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingSessionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingSessionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingSessionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingSessionsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingSessionsRequest_FieldPathArrayItemValue = (*ListProbingSessionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingSessionsRequest as interface{}
func (fpaiv *ListProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingSessionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingSessionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingSessionsRequest'
func (fpaiv *ListProbingSessionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingSessionsRequest) bool {
	slice := fpaiv.ListProbingSessionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbingSessionsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbingSessionsRequest fields according to their type
type ListProbingSessionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingSessionsRequest_FieldPath
}

func ParseListProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingSessionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingSessionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingSessionsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbingSessionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbingSessionsRequest_FieldPathArrayOfValues = (*ListProbingSessionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingSessionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_session.ParentName) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_session.OrderBy) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_session.Filter) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListProbingSessionsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_session.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_session.ParentName)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_session.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_session.OrderBy)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_session.Filter, bool) {
	res, ok := fpaov.values.([]*probing_session.Filter)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingSessionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingSessionsResponse_FieldPathSelector
	Get(source *ListProbingSessionsResponse) []interface{}
	GetSingle(source *ListProbingSessionsResponse) (interface{}, bool)
	ClearValue(item *ListProbingSessionsResponse)

	// Those methods build corresponding ListProbingSessionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingSessionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingSessionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingSessionsResponse_FieldPathArrayItemValue
}

type ListProbingSessionsResponse_FieldPathSelector int32

const (
	ListProbingSessionsResponse_FieldPathSelectorProbingSessions   ListProbingSessionsResponse_FieldPathSelector = 0
	ListProbingSessionsResponse_FieldPathSelectorPrevPageToken     ListProbingSessionsResponse_FieldPathSelector = 1
	ListProbingSessionsResponse_FieldPathSelectorNextPageToken     ListProbingSessionsResponse_FieldPathSelector = 2
	ListProbingSessionsResponse_FieldPathSelectorCurrentOffset     ListProbingSessionsResponse_FieldPathSelector = 3
	ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount ListProbingSessionsResponse_FieldPathSelector = 4
)

func (s ListProbingSessionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return "probing_sessions"
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", s))
	}
}

func BuildListProbingSessionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbingSessionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingSessionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			return &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorProbingSessions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbingSessionsResponse_FieldSubPath{selector: ListProbingSessionsResponse_FieldPathSelectorProbingSessions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingSessionsResponse", fp)
}

func ParseListProbingSessionsResponse_FieldPath(rawField string) (ListProbingSessionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingSessionsResponse_FieldPath(fp)
}

func MustParseListProbingSessionsResponse_FieldPath(rawField string) ListProbingSessionsResponse_FieldPath {
	fp, err := ParseListProbingSessionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingSessionsResponse_FieldTerminalPath struct {
	selector ListProbingSessionsResponse_FieldPathSelector
}

var _ ListProbingSessionsResponse_FieldPath = (*ListProbingSessionsResponse_FieldTerminalPath)(nil)

func (fp *ListProbingSessionsResponse_FieldTerminalPath) Selector() ListProbingSessionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingSessionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingSessionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingSessionsResponse
func (fp *ListProbingSessionsResponse_FieldTerminalPath) Get(source *ListProbingSessionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, value := range source.GetProbingSessions() {
				values = append(values, value)
			}
		case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingSessionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbingSessionsResponse
func (fp *ListProbingSessionsResponse_FieldTerminalPath) GetSingle(source *ListProbingSessionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		res := source.GetProbingSessions()
		return res, res != nil
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingSessionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return ([]*probing_session.ProbingSession)(nil)
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_session.PagerCursor)(nil)
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return (*probing_session.PagerCursor)(nil)
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) ClearValue(item *ListProbingSessionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
			item.ProbingSessions = nil
		case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingSessionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingSessionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbingSessionsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListProbingSessionsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbingSessionsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &ListProbingSessionsResponse_FieldTerminalPathValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_session.ProbingSession)}
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingSessionsResponse_FieldTerminalPathValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingSessionsResponse_FieldTerminalPathValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return &ListProbingSessionsResponse_FieldTerminalPathValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProbingSessionsResponse_FieldTerminalPathValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_session.ProbingSession)}
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayOfValues{ListProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingSessionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &ListProbingSessionsResponse_FieldTerminalPathArrayItemValue{ListProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingSessionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbingSessionsResponse_FieldSubPath struct {
	selector ListProbingSessionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbingSessionsResponse_FieldPath = (*ListProbingSessionsResponse_FieldSubPath)(nil)

func (fps *ListProbingSessionsResponse_FieldSubPath) Selector() ListProbingSessionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbingSessionsResponse_FieldSubPath) AsProbingSessionsSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbingSessionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbingSessionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbingSessionsResponse
func (fps *ListProbingSessionsResponse_FieldSubPath) Get(source *ListProbingSessionsResponse) (values []interface{}) {
	switch fps.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, item := range source.GetProbingSessions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbingSessionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbingSessionsResponse))
}

// GetSingle returns value of selected field from source ListProbingSessionsResponse
func (fps *ListProbingSessionsResponse_FieldSubPath) GetSingle(source *ListProbingSessionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		if len(source.GetProbingSessions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSessions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fps.selector))
	}
}

func (fps *ListProbingSessionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbingSessionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbingSessionsResponse_FieldSubPath) ClearValue(item *ListProbingSessionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, subItem := range item.ProbingSessions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbingSessionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbingSessionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbingSessionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProbingSessionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithIValue(value interface{}) ListProbingSessionsResponse_FieldPathValue {
	return &ListProbingSessionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbingSessionsResponse_FieldPathArrayOfValues {
	return &ListProbingSessionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbingSessionsResponse_FieldPathArrayItemValue {
	return &ListProbingSessionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbingSessionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbingSessionsResponse_FieldPathValue allows storing values for ListProbingSessionsResponse fields according to their type
type ListProbingSessionsResponse_FieldPathValue interface {
	ListProbingSessionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingSessionsResponse)
	CompareWith(*ListProbingSessionsResponse) (cmp int, comparable bool)
}

func ParseListProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) (ListProbingSessionsResponse_FieldPathValue, error) {
	fp, err := ParseListProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingSessionsResponse_FieldPathValue), nil
}

func MustParseListProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) ListProbingSessionsResponse_FieldPathValue {
	fpv, err := ParseListProbingSessionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingSessionsResponse_FieldTerminalPathValue struct {
	ListProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingSessionsResponse_FieldPathValue = (*ListProbingSessionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingSessionsResponse' as interface{}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) AsProbingSessionsValue() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.([]*probing_session.ProbingSession)
	return res, ok
}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingSessionsResponse
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) SetTo(target **ListProbingSessionsResponse) {
	if *target == nil {
		*target = new(ListProbingSessionsResponse)
	}
	switch fpv.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		(*target).ProbingSessions = fpv.value.([]*probing_session.ProbingSession)
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_session.PagerCursor)
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_session.PagerCursor)
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingSessionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingSessionsResponse_FieldTerminalPathValue' with the value under path in 'ListProbingSessionsResponse'.
func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) CompareWith(source *ListProbingSessionsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingSessionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingSessionsResponse))
}

type ListProbingSessionsResponse_FieldSubPathValue struct {
	ListProbingSessionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbingSessionsResponse_FieldPathValue = (*ListProbingSessionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) AsProbingSessionsPathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) SetTo(target **ListProbingSessionsResponse) {
	if *target == nil {
		*target = new(ListProbingSessionsResponse)
	}
	switch fpvs.Selector() {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingSessionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) CompareWith(source *ListProbingSessionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingSessionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbingSessionsResponse))
}

// ListProbingSessionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingSessionsResponse according to their type
// Present only for array (repeated) types.
type ListProbingSessionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingSessionsResponse_FieldPath
	ContainsValue(*ListProbingSessionsResponse) bool
}

// ParseListProbingSessionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingSessionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingSessionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingSessionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingSessionsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingSessionsResponse_FieldPathArrayItemValue = (*ListProbingSessionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingSessionsResponse as interface{}
func (fpaiv *ListProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbingSessionsResponse_FieldTerminalPathArrayItemValue) AsProbingSessionsItemValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpaiv.value.(*probing_session.ProbingSession)
	return res, ok
}

func (fpaiv *ListProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingSessionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingSessionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingSessionsResponse'
func (fpaiv *ListProbingSessionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingSessionsResponse) bool {
	slice := fpaiv.ListProbingSessionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbingSessionsResponse_FieldSubPathArrayItemValue struct {
	ListProbingSessionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbingSessionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbingSessionsResponse_FieldSubPathArrayItemValue) AsProbingSessionsPathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingSessionsResponse'
func (fpaivs *ListProbingSessionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbingSessionsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingSessionsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbingSessionsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbingSessionsResponse fields according to their type
type ListProbingSessionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingSessionsResponse_FieldPath
}

func ParseListProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingSessionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingSessionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingSessionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingSessionsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbingSessionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbingSessionsResponse_FieldPathArrayOfValues = (*ListProbingSessionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, v := range fpaov.values.([][]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	case ListProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingSessionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsProbingSessionsArrayOfValues() ([][]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([][]*probing_session.ProbingSession)
	return res, ok
}
func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListProbingSessionsResponse_FieldSubPathArrayOfValues struct {
	ListProbingSessionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbingSessionsResponse_FieldPathArrayOfValues = (*ListProbingSessionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbingSessionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbingSessionsResponse_FieldSubPathArrayOfValues) AsProbingSessionsPathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingSessionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingSessionRequest_FieldPathSelector
	Get(source *WatchProbingSessionRequest) []interface{}
	GetSingle(source *WatchProbingSessionRequest) (interface{}, bool)
	ClearValue(item *WatchProbingSessionRequest)

	// Those methods build corresponding WatchProbingSessionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingSessionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingSessionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingSessionRequest_FieldPathArrayItemValue
}

type WatchProbingSessionRequest_FieldPathSelector int32

const (
	WatchProbingSessionRequest_FieldPathSelectorName      WatchProbingSessionRequest_FieldPathSelector = 0
	WatchProbingSessionRequest_FieldPathSelectorFieldMask WatchProbingSessionRequest_FieldPathSelector = 1
	WatchProbingSessionRequest_FieldPathSelectorView      WatchProbingSessionRequest_FieldPathSelector = 2
)

func (s WatchProbingSessionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		return "name"
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingSessionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", s))
	}
}

func BuildWatchProbingSessionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingSessionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingSessionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingSessionRequest", fp)
}

func ParseWatchProbingSessionRequest_FieldPath(rawField string) (WatchProbingSessionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingSessionRequest_FieldPath(fp)
}

func MustParseWatchProbingSessionRequest_FieldPath(rawField string) WatchProbingSessionRequest_FieldPath {
	fp, err := ParseWatchProbingSessionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingSessionRequest_FieldTerminalPath struct {
	selector WatchProbingSessionRequest_FieldPathSelector
}

var _ WatchProbingSessionRequest_FieldPath = (*WatchProbingSessionRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingSessionRequest_FieldTerminalPath) Selector() WatchProbingSessionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingSessionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingSessionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingSessionRequest
func (fp *WatchProbingSessionRequest_FieldTerminalPath) Get(source *WatchProbingSessionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingSessionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingSessionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingSessionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingSessionRequest
func (fp *WatchProbingSessionRequest_FieldTerminalPath) GetSingle(source *WatchProbingSessionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingSessionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingSessionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		return (*probing_session.Reference)(nil)
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case WatchProbingSessionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) ClearValue(item *WatchProbingSessionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingSessionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingSessionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingSessionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingSessionRequest_FieldPathSelectorName ||
		fp.selector == WatchProbingSessionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingSessionRequest_FieldPathSelectorView
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingSessionRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		return &WatchProbingSessionRequest_FieldTerminalPathValue{WatchProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Reference)}
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		return &WatchProbingSessionRequest_FieldTerminalPathValue{WatchProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case WatchProbingSessionRequest_FieldPathSelectorView:
		return &WatchProbingSessionRequest_FieldTerminalPathValue{WatchProbingSessionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingSessionRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingSessionRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		return &WatchProbingSessionRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Reference)}
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		return &WatchProbingSessionRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case WatchProbingSessionRequest_FieldPathSelectorView:
		return &WatchProbingSessionRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingSessionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingSessionRequest_FieldPathValue allows storing values for WatchProbingSessionRequest fields according to their type
type WatchProbingSessionRequest_FieldPathValue interface {
	WatchProbingSessionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingSessionRequest)
	CompareWith(*WatchProbingSessionRequest) (cmp int, comparable bool)
}

func ParseWatchProbingSessionRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingSessionRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingSessionRequest_FieldPathValue), nil
}

func MustParseWatchProbingSessionRequest_FieldPathValue(pathStr, valueStr string) WatchProbingSessionRequest_FieldPathValue {
	fpv, err := ParseWatchProbingSessionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingSessionRequest_FieldTerminalPathValue struct {
	WatchProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionRequest_FieldPathValue = (*WatchProbingSessionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingSessionRequest' as interface{}
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) AsNameValue() (*probing_session.Reference, bool) {
	res, ok := fpv.value.(*probing_session.Reference)
	return res, ok
}
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingSessionRequest
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) SetTo(target **WatchProbingSessionRequest) {
	if *target == nil {
		*target = new(WatchProbingSessionRequest)
	}
	switch fpv.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_session.Reference)
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case WatchProbingSessionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingSessionRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingSessionRequest'.
func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingSessionRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_session.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingSessionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingSessionRequest))
}

// WatchProbingSessionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingSessionRequest according to their type
// Present only for array (repeated) types.
type WatchProbingSessionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingSessionRequest_FieldPath
	ContainsValue(*WatchProbingSessionRequest) bool
}

// ParseWatchProbingSessionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingSessionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingSessionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingSessionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingSessionRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionRequest_FieldPathArrayItemValue = (*WatchProbingSessionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingSessionRequest as interface{}
func (fpaiv *WatchProbingSessionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingSessionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingSessionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingSessionRequest'
func (fpaiv *WatchProbingSessionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingSessionRequest) bool {
	slice := fpaiv.WatchProbingSessionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingSessionRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingSessionRequest fields according to their type
type WatchProbingSessionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingSessionRequest_FieldPath
}

func ParseWatchProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingSessionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingSessionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingSessionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingSessionRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingSessionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingSessionRequest_FieldPathArrayOfValues = (*WatchProbingSessionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingSessionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingSessionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_session.Reference) {
			values = append(values, v)
		}
	case WatchProbingSessionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingSessionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingSessionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_session.Reference, bool) {
	res, ok := fpaov.values.([]*probing_session.Reference)
	return res, ok
}
func (fpaov *WatchProbingSessionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingSessionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingSessionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingSessionResponse_FieldPathSelector
	Get(source *WatchProbingSessionResponse) []interface{}
	GetSingle(source *WatchProbingSessionResponse) (interface{}, bool)
	ClearValue(item *WatchProbingSessionResponse)

	// Those methods build corresponding WatchProbingSessionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingSessionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingSessionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingSessionResponse_FieldPathArrayItemValue
}

type WatchProbingSessionResponse_FieldPathSelector int32

const (
	WatchProbingSessionResponse_FieldPathSelectorChange WatchProbingSessionResponse_FieldPathSelector = 0
)

func (s WatchProbingSessionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", s))
	}
}

func BuildWatchProbingSessionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingSessionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingSessionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbingSessionResponse_FieldTerminalPath{selector: WatchProbingSessionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingSessionResponse", fp)
}

func ParseWatchProbingSessionResponse_FieldPath(rawField string) (WatchProbingSessionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingSessionResponse_FieldPath(fp)
}

func MustParseWatchProbingSessionResponse_FieldPath(rawField string) WatchProbingSessionResponse_FieldPath {
	fp, err := ParseWatchProbingSessionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingSessionResponse_FieldTerminalPath struct {
	selector WatchProbingSessionResponse_FieldPathSelector
}

var _ WatchProbingSessionResponse_FieldPath = (*WatchProbingSessionResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingSessionResponse_FieldTerminalPath) Selector() WatchProbingSessionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingSessionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingSessionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingSessionResponse
func (fp *WatchProbingSessionResponse_FieldTerminalPath) Get(source *WatchProbingSessionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingSessionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingSessionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingSessionResponse
func (fp *WatchProbingSessionResponse_FieldTerminalPath) GetSingle(source *WatchProbingSessionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingSessionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingSessionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		return (*probing_session.ProbingSessionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) ClearValue(item *WatchProbingSessionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingSessionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingSessionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingSessionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingSessionResponse_FieldPathSelectorChange
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingSessionResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		return &WatchProbingSessionResponse_FieldTerminalPathValue{WatchProbingSessionResponse_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSessionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingSessionResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingSessionResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		return &WatchProbingSessionResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionResponse_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSessionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingSessionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingSessionResponse_FieldPathValue allows storing values for WatchProbingSessionResponse fields according to their type
type WatchProbingSessionResponse_FieldPathValue interface {
	WatchProbingSessionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingSessionResponse)
	CompareWith(*WatchProbingSessionResponse) (cmp int, comparable bool)
}

func ParseWatchProbingSessionResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingSessionResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingSessionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingSessionResponse_FieldPathValue), nil
}

func MustParseWatchProbingSessionResponse_FieldPathValue(pathStr, valueStr string) WatchProbingSessionResponse_FieldPathValue {
	fpv, err := ParseWatchProbingSessionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingSessionResponse_FieldTerminalPathValue struct {
	WatchProbingSessionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionResponse_FieldPathValue = (*WatchProbingSessionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingSessionResponse' as interface{}
func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) AsChangeValue() (*probing_session.ProbingSessionChange, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSessionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingSessionResponse
func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) SetTo(target **WatchProbingSessionResponse) {
	if *target == nil {
		*target = new(WatchProbingSessionResponse)
	}
	switch fpv.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probing_session.ProbingSessionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingSessionResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingSessionResponse'.
func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingSessionResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingSessionResponse))
}

// WatchProbingSessionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingSessionResponse according to their type
// Present only for array (repeated) types.
type WatchProbingSessionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingSessionResponse_FieldPath
	ContainsValue(*WatchProbingSessionResponse) bool
}

// ParseWatchProbingSessionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingSessionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingSessionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingSessionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingSessionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingSessionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingSessionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingSessionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingSessionResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingSessionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionResponse_FieldPathArrayItemValue = (*WatchProbingSessionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingSessionResponse as interface{}
func (fpaiv *WatchProbingSessionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingSessionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingSessionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingSessionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingSessionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingSessionResponse'
func (fpaiv *WatchProbingSessionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingSessionResponse) bool {
	slice := fpaiv.WatchProbingSessionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingSessionResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingSessionResponse fields according to their type
type WatchProbingSessionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingSessionResponse_FieldPath
}

func ParseWatchProbingSessionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingSessionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingSessionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingSessionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingSessionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingSessionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingSessionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingSessionResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingSessionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingSessionResponse_FieldPathArrayOfValues = (*WatchProbingSessionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingSessionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingSessionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probing_session.ProbingSessionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingSessionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probing_session.ProbingSessionChange, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSessionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingSessionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingSessionsRequest_FieldPathSelector
	Get(source *WatchProbingSessionsRequest) []interface{}
	GetSingle(source *WatchProbingSessionsRequest) (interface{}, bool)
	ClearValue(item *WatchProbingSessionsRequest)

	// Those methods build corresponding WatchProbingSessionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingSessionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingSessionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingSessionsRequest_FieldPathArrayItemValue
}

type WatchProbingSessionsRequest_FieldPathSelector int32

const (
	WatchProbingSessionsRequest_FieldPathSelectorType         WatchProbingSessionsRequest_FieldPathSelector = 0
	WatchProbingSessionsRequest_FieldPathSelectorParent       WatchProbingSessionsRequest_FieldPathSelector = 1
	WatchProbingSessionsRequest_FieldPathSelectorPageSize     WatchProbingSessionsRequest_FieldPathSelector = 2
	WatchProbingSessionsRequest_FieldPathSelectorPageToken    WatchProbingSessionsRequest_FieldPathSelector = 3
	WatchProbingSessionsRequest_FieldPathSelectorOrderBy      WatchProbingSessionsRequest_FieldPathSelector = 4
	WatchProbingSessionsRequest_FieldPathSelectorResumeToken  WatchProbingSessionsRequest_FieldPathSelector = 5
	WatchProbingSessionsRequest_FieldPathSelectorStartingTime WatchProbingSessionsRequest_FieldPathSelector = 6
	WatchProbingSessionsRequest_FieldPathSelectorFilter       WatchProbingSessionsRequest_FieldPathSelector = 7
	WatchProbingSessionsRequest_FieldPathSelectorFieldMask    WatchProbingSessionsRequest_FieldPathSelector = 8
	WatchProbingSessionsRequest_FieldPathSelectorView         WatchProbingSessionsRequest_FieldPathSelector = 9
	WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize WatchProbingSessionsRequest_FieldPathSelector = 10
)

func (s WatchProbingSessionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", s))
	}
}

func BuildWatchProbingSessionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingSessionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingSessionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingSessionsRequest", fp)
}

func ParseWatchProbingSessionsRequest_FieldPath(rawField string) (WatchProbingSessionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingSessionsRequest_FieldPath(fp)
}

func MustParseWatchProbingSessionsRequest_FieldPath(rawField string) WatchProbingSessionsRequest_FieldPath {
	fp, err := ParseWatchProbingSessionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingSessionsRequest_FieldTerminalPath struct {
	selector WatchProbingSessionsRequest_FieldPathSelector
}

var _ WatchProbingSessionsRequest_FieldPath = (*WatchProbingSessionsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) Selector() WatchProbingSessionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingSessionsRequest
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) Get(source *WatchProbingSessionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingSessionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbingSessionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingSessionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingSessionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingSessionsRequest
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) GetSingle(source *WatchProbingSessionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingSessionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		return (*probing_session.ParentReference)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		return (*probing_session.PagerCursor)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return (*probing_session.OrderBy)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		return (*probing_session.Filter)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) ClearValue(item *WatchProbingSessionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingSessionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbingSessionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProbingSessionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingSessionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingSessionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingSessionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingSessionsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingSessionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ParentReference)}
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.OrderBy)}
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Filter)}
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingSessionsRequest_FieldTerminalPathValue{WatchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ParentReference)}
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.OrderBy)}
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Filter)}
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues{WatchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingSessionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingSessionsRequest_FieldPathValue allows storing values for WatchProbingSessionsRequest fields according to their type
type WatchProbingSessionsRequest_FieldPathValue interface {
	WatchProbingSessionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingSessionsRequest)
	CompareWith(*WatchProbingSessionsRequest) (cmp int, comparable bool)
}

func ParseWatchProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingSessionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingSessionsRequest_FieldPathValue), nil
}

func MustParseWatchProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) WatchProbingSessionsRequest_FieldPathValue {
	fpv, err := ParseWatchProbingSessionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingSessionsRequest_FieldTerminalPathValue struct {
	WatchProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsRequest_FieldPathValue = (*WatchProbingSessionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingSessionsRequest' as interface{}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_session.ParentReference, bool) {
	res, ok := fpv.value.(*probing_session.ParentReference)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_session.OrderBy, bool) {
	res, ok := fpv.value.(*probing_session.OrderBy)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_session.Filter, bool) {
	res, ok := fpv.value.(*probing_session.Filter)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingSessionsRequest
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) SetTo(target **WatchProbingSessionsRequest) {
	if *target == nil {
		*target = new(WatchProbingSessionsRequest)
	}
	switch fpv.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_session.ParentReference)
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_session.PagerCursor)
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_session.OrderBy)
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_session.Filter)
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingSessionsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingSessionsRequest'.
func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingSessionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_session.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingSessionsRequest))
}

// WatchProbingSessionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingSessionsRequest according to their type
// Present only for array (repeated) types.
type WatchProbingSessionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingSessionsRequest_FieldPath
	ContainsValue(*WatchProbingSessionsRequest) bool
}

// ParseWatchProbingSessionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingSessionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingSessionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingSessionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsRequest_FieldPathArrayItemValue = (*WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingSessionsRequest as interface{}
func (fpaiv *WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingSessionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingSessionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingSessionsRequest'
func (fpaiv *WatchProbingSessionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingSessionsRequest) bool {
	slice := fpaiv.WatchProbingSessionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingSessionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingSessionsRequest fields according to their type
type WatchProbingSessionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingSessionsRequest_FieldPath
}

func ParseWatchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingSessionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingSessionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingSessionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingSessionsRequest_FieldPathArrayOfValues = (*WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingSessionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_session.ParentReference) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_session.OrderBy) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_session.Filter) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_session.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_session.ParentReference)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_session.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_session.OrderBy)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_session.Filter, bool) {
	res, ok := fpaov.values.([]*probing_session.Filter)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingSessionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingSessionsResponse_FieldPathSelector
	Get(source *WatchProbingSessionsResponse) []interface{}
	GetSingle(source *WatchProbingSessionsResponse) (interface{}, bool)
	ClearValue(item *WatchProbingSessionsResponse)

	// Those methods build corresponding WatchProbingSessionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingSessionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingSessionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingSessionsResponse_FieldPathArrayItemValue
}

type WatchProbingSessionsResponse_FieldPathSelector int32

const (
	WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges WatchProbingSessionsResponse_FieldPathSelector = 0
	WatchProbingSessionsResponse_FieldPathSelectorIsCurrent             WatchProbingSessionsResponse_FieldPathSelector = 1
	WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange       WatchProbingSessionsResponse_FieldPathSelector = 2
	WatchProbingSessionsResponse_FieldPathSelectorResumeToken           WatchProbingSessionsResponse_FieldPathSelector = 3
	WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize          WatchProbingSessionsResponse_FieldPathSelector = 4
	WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset           WatchProbingSessionsResponse_FieldPathSelector = 5
	WatchProbingSessionsResponse_FieldPathSelectorIsHardReset           WatchProbingSessionsResponse_FieldPathSelector = 6
)

func (s WatchProbingSessionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return "probing_session_changes"
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", s))
	}
}

func BuildWatchProbingSessionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingSessionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingSessionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_session_changes", "probingSessionChanges", "probing-session-changes":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbingSessionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbingSessionsResponse_FieldSubPath{selector: WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingSessionsResponse", fp)
}

func ParseWatchProbingSessionsResponse_FieldPath(rawField string) (WatchProbingSessionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingSessionsResponse_FieldPath(fp)
}

func MustParseWatchProbingSessionsResponse_FieldPath(rawField string) WatchProbingSessionsResponse_FieldPath {
	fp, err := ParseWatchProbingSessionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingSessionsResponse_FieldTerminalPath struct {
	selector WatchProbingSessionsResponse_FieldPathSelector
}

var _ WatchProbingSessionsResponse_FieldPath = (*WatchProbingSessionsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) Selector() WatchProbingSessionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingSessionsResponse
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) Get(source *WatchProbingSessionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
			for _, value := range source.GetProbingSessionChanges() {
				values = append(values, value)
			}
		case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingSessionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingSessionsResponse
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) GetSingle(source *WatchProbingSessionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		res := source.GetProbingSessionChanges()
		return res, res != nil
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return ([]*probing_session.ProbingSessionChange)(nil)
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbingSessionsResponse_PageTokenChange)(nil)
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) ClearValue(item *WatchProbingSessionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
			item.ProbingSessionChanges = nil
		case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingSessionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges ||
		fp.selector == WatchProbingSessionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbingSessionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbingSessionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingSessionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_session.ProbingSessionChange)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbingSessionsResponse_PageTokenChange)}
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingSessionsResponse_FieldTerminalPathValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_session.ProbingSessionChange)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbingSessionsResponse_PageTokenChange)}
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingSessionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return &WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue{WatchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSessionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbingSessionsResponse_FieldSubPath struct {
	selector WatchProbingSessionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbingSessionsResponse_FieldPath = (*WatchProbingSessionsResponse_FieldSubPath)(nil)

func (fps *WatchProbingSessionsResponse_FieldSubPath) Selector() WatchProbingSessionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbingSessionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbingSessionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbingSessionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbingSessionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbingSessionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbingSessionsResponse
func (fps *WatchProbingSessionsResponse_FieldSubPath) Get(source *WatchProbingSessionsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbingSessionsResponse))
}

// GetSingle returns value of selected field from source WatchProbingSessionsResponse
func (fps *WatchProbingSessionsResponse_FieldSubPath) GetSingle(source *WatchProbingSessionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbingSessionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) ClearValue(item *WatchProbingSessionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbingSessionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProbingSessionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbingSessionsResponse_FieldPathValue {
	return &WatchProbingSessionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbingSessionsResponse_FieldPathArrayOfValues {
	return &WatchProbingSessionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbingSessionsResponse_FieldPathArrayItemValue {
	return &WatchProbingSessionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbingSessionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbingSessionsResponse_FieldPathValue allows storing values for WatchProbingSessionsResponse fields according to their type
type WatchProbingSessionsResponse_FieldPathValue interface {
	WatchProbingSessionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingSessionsResponse)
	CompareWith(*WatchProbingSessionsResponse) (cmp int, comparable bool)
}

func ParseWatchProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingSessionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingSessionsResponse_FieldPathValue), nil
}

func MustParseWatchProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) WatchProbingSessionsResponse_FieldPathValue {
	fpv, err := ParseWatchProbingSessionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingSessionsResponse_FieldTerminalPathValue struct {
	WatchProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsResponse_FieldPathValue = (*WatchProbingSessionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingSessionsResponse' as interface{}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsProbingSessionChangesValue() ([]*probing_session.ProbingSessionChange, bool) {
	res, ok := fpv.value.([]*probing_session.ProbingSessionChange)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbingSessionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbingSessionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingSessionsResponse
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) SetTo(target **WatchProbingSessionsResponse) {
	if *target == nil {
		*target = new(WatchProbingSessionsResponse)
	}
	switch fpv.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		(*target).ProbingSessionChanges = fpv.value.([]*probing_session.ProbingSessionChange)
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbingSessionsResponse_PageTokenChange)
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingSessionsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingSessionsResponse'.
func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingSessionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		return 0, false
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingSessionsResponse))
}

type WatchProbingSessionsResponse_FieldSubPathValue struct {
	WatchProbingSessionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbingSessionsResponse_FieldPathValue = (*WatchProbingSessionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbingSessionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbingSessionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) SetTo(target **WatchProbingSessionsResponse) {
	if *target == nil {
		*target = new(WatchProbingSessionsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbingSessionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) CompareWith(source *WatchProbingSessionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbingSessionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingSessionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbingSessionsResponse))
}

// WatchProbingSessionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingSessionsResponse according to their type
// Present only for array (repeated) types.
type WatchProbingSessionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingSessionsResponse_FieldPath
	ContainsValue(*WatchProbingSessionsResponse) bool
}

// ParseWatchProbingSessionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingSessionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingSessionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingSessionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsResponse_FieldPathArrayItemValue = (*WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingSessionsResponse as interface{}
func (fpaiv *WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue) AsProbingSessionChangesItemValue() (*probing_session.ProbingSessionChange, bool) {
	res, ok := fpaiv.value.(*probing_session.ProbingSessionChange)
	return res, ok
}

func (fpaiv *WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingSessionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingSessionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingSessionsResponse'
func (fpaiv *WatchProbingSessionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingSessionsResponse) bool {
	slice := fpaiv.WatchProbingSessionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbingSessionsResponse_FieldSubPathArrayItemValue struct {
	WatchProbingSessionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbingSessionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbingSessionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingSessionsResponse'
func (fpaivs *WatchProbingSessionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbingSessionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbingSessionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingSessionsResponse fields according to their type
type WatchProbingSessionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingSessionsResponse_FieldPath
}

func ParseWatchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingSessionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingSessionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingSessionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingSessionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingSessionsResponse_FieldPathArrayOfValues = (*WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges:
		for _, v := range fpaov.values.([][]*probing_session.ProbingSessionChange) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbingSessionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsProbingSessionChangesArrayOfValues() ([][]*probing_session.ProbingSessionChange, bool) {
	res, ok := fpaov.values.([][]*probing_session.ProbingSessionChange)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbingSessionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbingSessionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbingSessionsResponse_FieldSubPathArrayOfValues struct {
	WatchProbingSessionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbingSessionsResponse_FieldPathArrayOfValues = (*WatchProbingSessionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbingSessionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbingSessionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingSessionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingSessionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbingSessionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbingSessionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbingSessionsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbingSessionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbingSessionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbingSessionsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbingSessionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbingSessionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbingSessionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingSessionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingSessionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingSessionsResponse_PageTokenChange", fp)
}

func ParseWatchProbingSessionsResponsePageTokenChange_FieldPath(rawField string) (WatchProbingSessionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingSessionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbingSessionsResponsePageTokenChange_FieldPath(rawField string) WatchProbingSessionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbingSessionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbingSessionsResponsePageTokenChange_FieldPath = (*WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbingSessionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingSessionsResponse_PageTokenChange
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbingSessionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingSessionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbingSessionsResponse_PageTokenChange
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbingSessionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingSessionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probing_session.PagerCursor)(nil)
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probing_session.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbingSessionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingSessionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingSessionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbingSessionsResponsePageTokenChange_FieldPathValue interface {
	WatchProbingSessionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingSessionsResponse_PageTokenChange)
	CompareWith(*WatchProbingSessionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbingSessionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbingSessionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingSessionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbingSessionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbingSessionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsResponsePageTokenChange_FieldPathValue = (*WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbingSessionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbingSessionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_session.PagerCursor)
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_session.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingSessionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbingSessionsResponse_PageTokenChange'.
func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbingSessionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingSessionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingSessionsResponse_PageTokenChange))
}

// WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingSessionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbingSessionsResponse_PageTokenChange) bool
}

// ParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingSessionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingSessionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingSessionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingSessionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingSessionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingSessionsResponsePageTokenChange_FieldPath
}

func ParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbingSessionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingSessionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbingSessionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbingSessionRequest_FieldPathSelector
	Get(source *CreateProbingSessionRequest) []interface{}
	GetSingle(source *CreateProbingSessionRequest) (interface{}, bool)
	ClearValue(item *CreateProbingSessionRequest)

	// Those methods build corresponding CreateProbingSessionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbingSessionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbingSessionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbingSessionRequest_FieldPathArrayItemValue
}

type CreateProbingSessionRequest_FieldPathSelector int32

const (
	CreateProbingSessionRequest_FieldPathSelectorParent         CreateProbingSessionRequest_FieldPathSelector = 0
	CreateProbingSessionRequest_FieldPathSelectorProbingSession CreateProbingSessionRequest_FieldPathSelector = 1
)

func (s CreateProbingSessionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return "probing_session"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", s))
	}
}

func BuildCreateProbingSessionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbingSessionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbingSessionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbingSessionRequest_FieldTerminalPath{selector: CreateProbingSessionRequest_FieldPathSelectorParent}, nil
		case "probing_session", "probingSession", "probing-session":
			return &CreateProbingSessionRequest_FieldTerminalPath{selector: CreateProbingSessionRequest_FieldPathSelectorProbingSession}, nil
		}
	} else {
		switch fp[0] {
		case "probing_session", "probingSession", "probing-session":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbingSessionRequest_FieldSubPath{selector: CreateProbingSessionRequest_FieldPathSelectorProbingSession, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbingSessionRequest", fp)
}

func ParseCreateProbingSessionRequest_FieldPath(rawField string) (CreateProbingSessionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbingSessionRequest_FieldPath(fp)
}

func MustParseCreateProbingSessionRequest_FieldPath(rawField string) CreateProbingSessionRequest_FieldPath {
	fp, err := ParseCreateProbingSessionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbingSessionRequest_FieldTerminalPath struct {
	selector CreateProbingSessionRequest_FieldPathSelector
}

var _ CreateProbingSessionRequest_FieldPath = (*CreateProbingSessionRequest_FieldTerminalPath)(nil)

func (fp *CreateProbingSessionRequest_FieldTerminalPath) Selector() CreateProbingSessionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbingSessionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbingSessionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbingSessionRequest
func (fp *CreateProbingSessionRequest_FieldTerminalPath) Get(source *CreateProbingSessionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbingSessionRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
			if source.ProbingSession != nil {
				values = append(values, source.ProbingSession)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbingSessionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbingSessionRequest
func (fp *CreateProbingSessionRequest_FieldTerminalPath) GetSingle(source *CreateProbingSessionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		res := source.GetProbingSession()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbingSessionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		return (*probing_session.ParentReference)(nil)
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return (*probing_session.ProbingSession)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) ClearValue(item *CreateProbingSessionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbingSessionRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
			item.ProbingSession = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbingSessionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbingSessionRequest_FieldPathSelectorParent
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbingSessionRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		return &CreateProbingSessionRequest_FieldTerminalPathValue{CreateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ParentReference)}
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return &CreateProbingSessionRequest_FieldTerminalPathValue{CreateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbingSessionRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbingSessionRequest_FieldTerminalPathArrayOfValues{CreateProbingSessionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		return &CreateProbingSessionRequest_FieldTerminalPathArrayOfValues{CreateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ParentReference)}
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return &CreateProbingSessionRequest_FieldTerminalPathArrayOfValues{CreateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbingSessionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingSessionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbingSessionRequest_FieldSubPath struct {
	selector CreateProbingSessionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbingSessionRequest_FieldPath = (*CreateProbingSessionRequest_FieldSubPath)(nil)

func (fps *CreateProbingSessionRequest_FieldSubPath) Selector() CreateProbingSessionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbingSessionRequest_FieldSubPath) AsProbingSessionSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbingSessionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbingSessionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbingSessionRequest
func (fps *CreateProbingSessionRequest_FieldSubPath) Get(source *CreateProbingSessionRequest) (values []interface{}) {
	switch fps.selector {
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		values = append(values, fps.subPath.GetRaw(source.GetProbingSession())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbingSessionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbingSessionRequest))
}

// GetSingle returns value of selected field from source CreateProbingSessionRequest
func (fps *CreateProbingSessionRequest_FieldSubPath) GetSingle(source *CreateProbingSessionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		if source.GetProbingSession() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSession())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fps.selector))
	}
}

func (fps *CreateProbingSessionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbingSessionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbingSessionRequest_FieldSubPath) ClearValue(item *CreateProbingSessionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
			fps.subPath.ClearValueRaw(item.ProbingSession)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbingSessionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbingSessionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbingSessionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProbingSessionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithIValue(value interface{}) CreateProbingSessionRequest_FieldPathValue {
	return &CreateProbingSessionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbingSessionRequest_FieldPathArrayOfValues {
	return &CreateProbingSessionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbingSessionRequest_FieldPathArrayItemValue {
	return &CreateProbingSessionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbingSessionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbingSessionRequest_FieldPathValue allows storing values for CreateProbingSessionRequest fields according to their type
type CreateProbingSessionRequest_FieldPathValue interface {
	CreateProbingSessionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbingSessionRequest)
	CompareWith(*CreateProbingSessionRequest) (cmp int, comparable bool)
}

func ParseCreateProbingSessionRequest_FieldPathValue(pathStr, valueStr string) (CreateProbingSessionRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingSessionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbingSessionRequest_FieldPathValue), nil
}

func MustParseCreateProbingSessionRequest_FieldPathValue(pathStr, valueStr string) CreateProbingSessionRequest_FieldPathValue {
	fpv, err := ParseCreateProbingSessionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbingSessionRequest_FieldTerminalPathValue struct {
	CreateProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingSessionRequest_FieldPathValue = (*CreateProbingSessionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbingSessionRequest' as interface{}
func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) AsParentValue() (*probing_session.ParentReference, bool) {
	res, ok := fpv.value.(*probing_session.ParentReference)
	return res, ok
}
func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) AsProbingSessionValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbingSessionRequest
func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) SetTo(target **CreateProbingSessionRequest) {
	if *target == nil {
		*target = new(CreateProbingSessionRequest)
	}
	switch fpv.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_session.ParentReference)
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		(*target).ProbingSession = fpv.value.(*probing_session.ProbingSession)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingSessionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbingSessionRequest_FieldTerminalPathValue' with the value under path in 'CreateProbingSessionRequest'.
func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) CompareWith(source *CreateProbingSessionRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_session.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingSessionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbingSessionRequest))
}

type CreateProbingSessionRequest_FieldSubPathValue struct {
	CreateProbingSessionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbingSessionRequest_FieldPathValue = (*CreateProbingSessionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) AsProbingSessionPathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) SetTo(target **CreateProbingSessionRequest) {
	if *target == nil {
		*target = new(CreateProbingSessionRequest)
	}
	switch fpvs.Selector() {
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).SetTo(&(*target).ProbingSession)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingSessionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) CompareWith(source *CreateProbingSessionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).CompareWith(source.GetProbingSession())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingSessionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbingSessionRequest))
}

// CreateProbingSessionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbingSessionRequest according to their type
// Present only for array (repeated) types.
type CreateProbingSessionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbingSessionRequest_FieldPath
	ContainsValue(*CreateProbingSessionRequest) bool
}

// ParseCreateProbingSessionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbingSessionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingSessionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbingSessionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbingSessionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbingSessionRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingSessionRequest_FieldPathArrayItemValue = (*CreateProbingSessionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbingSessionRequest as interface{}
func (fpaiv *CreateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbingSessionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbingSessionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingSessionRequest'
func (fpaiv *CreateProbingSessionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbingSessionRequest) bool {
	slice := fpaiv.CreateProbingSessionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbingSessionRequest_FieldSubPathArrayItemValue struct {
	CreateProbingSessionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbingSessionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbingSessionRequest_FieldSubPathArrayItemValue) AsProbingSessionPathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingSessionRequest'
func (fpaivs *CreateProbingSessionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbingSessionRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		return fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue).ContainsValue(source.GetProbingSession())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingSessionRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbingSessionRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbingSessionRequest fields according to their type
type CreateProbingSessionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbingSessionRequest_FieldPath
}

func ParseCreateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbingSessionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingSessionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbingSessionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbingSessionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbingSessionRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbingSessionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbingSessionRequest_FieldPathArrayOfValues = (*CreateProbingSessionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbingSessionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbingSessionRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_session.ParentReference) {
			values = append(values, v)
		}
	case CreateProbingSessionRequest_FieldPathSelectorProbingSession:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_session.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_session.ParentReference)
	return res, ok
}
func (fpaov *CreateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsProbingSessionArrayOfValues() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession)
	return res, ok
}

type CreateProbingSessionRequest_FieldSubPathArrayOfValues struct {
	CreateProbingSessionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbingSessionRequest_FieldPathArrayOfValues = (*CreateProbingSessionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbingSessionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbingSessionRequest_FieldSubPathArrayOfValues) AsProbingSessionPathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingSessionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingSessionRequest_FieldPathSelector
	Get(source *UpdateProbingSessionRequest) []interface{}
	GetSingle(source *UpdateProbingSessionRequest) (interface{}, bool)
	ClearValue(item *UpdateProbingSessionRequest)

	// Those methods build corresponding UpdateProbingSessionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingSessionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingSessionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingSessionRequest_FieldPathArrayItemValue
}

type UpdateProbingSessionRequest_FieldPathSelector int32

const (
	UpdateProbingSessionRequest_FieldPathSelectorProbingSession UpdateProbingSessionRequest_FieldPathSelector = 0
	UpdateProbingSessionRequest_FieldPathSelectorUpdateMask     UpdateProbingSessionRequest_FieldPathSelector = 1
	UpdateProbingSessionRequest_FieldPathSelectorCas            UpdateProbingSessionRequest_FieldPathSelector = 2
	UpdateProbingSessionRequest_FieldPathSelectorAllowMissing   UpdateProbingSessionRequest_FieldPathSelector = 3
)

func (s UpdateProbingSessionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return "probing_session"
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", s))
	}
}

func BuildUpdateProbingSessionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingSessionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingSessionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_session", "probingSession", "probing-session":
			return &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorProbingSession}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_session", "probingSession", "probing-session":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingSessionRequest_FieldSubPath{selector: UpdateProbingSessionRequest_FieldPathSelectorProbingSession, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbingSessionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingSessionRequest_FieldSubPath{selector: UpdateProbingSessionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingSessionRequest", fp)
}

func ParseUpdateProbingSessionRequest_FieldPath(rawField string) (UpdateProbingSessionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingSessionRequest_FieldPath(fp)
}

func MustParseUpdateProbingSessionRequest_FieldPath(rawField string) UpdateProbingSessionRequest_FieldPath {
	fp, err := ParseUpdateProbingSessionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingSessionRequest_FieldTerminalPath struct {
	selector UpdateProbingSessionRequest_FieldPathSelector
}

var _ UpdateProbingSessionRequest_FieldPath = (*UpdateProbingSessionRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) Selector() UpdateProbingSessionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingSessionRequest
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) Get(source *UpdateProbingSessionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
			if source.ProbingSession != nil {
				values = append(values, source.ProbingSession)
			}
		case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbingSessionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingSessionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingSessionRequest
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) GetSingle(source *UpdateProbingSessionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		res := source.GetProbingSession()
		return res, res != nil
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return (*probing_session.ProbingSession)(nil)
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return (*UpdateProbingSessionRequest_CAS)(nil)
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) ClearValue(item *UpdateProbingSessionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
			item.ProbingSession = nil
		case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbingSessionRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingSessionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingSessionRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateProbingSessionRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingSessionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return &UpdateProbingSessionRequest_FieldTerminalPathValue{UpdateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingSessionRequest_FieldTerminalPathValue{UpdateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return &UpdateProbingSessionRequest_FieldTerminalPathValue{UpdateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbingSessionRequest_CAS)}
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		return &UpdateProbingSessionRequest_FieldTerminalPathValue{UpdateProbingSessionRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingSessionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return &UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession)}
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return &UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbingSessionRequest_CAS)}
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		return &UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingSessionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingSessionRequest_FieldSubPath struct {
	selector UpdateProbingSessionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingSessionRequest_FieldPath = (*UpdateProbingSessionRequest_FieldSubPath)(nil)

func (fps *UpdateProbingSessionRequest_FieldSubPath) Selector() UpdateProbingSessionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingSessionRequest_FieldSubPath) AsProbingSessionSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}
func (fps *UpdateProbingSessionRequest_FieldSubPath) AsCasSubPath() (UpdateProbingSessionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbingSessionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingSessionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingSessionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingSessionRequest
func (fps *UpdateProbingSessionRequest_FieldSubPath) Get(source *UpdateProbingSessionRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		values = append(values, fps.subPath.GetRaw(source.GetProbingSession())...)
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingSessionRequest))
}

// GetSingle returns value of selected field from source UpdateProbingSessionRequest
func (fps *UpdateProbingSessionRequest_FieldSubPath) GetSingle(source *UpdateProbingSessionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		if source.GetProbingSession() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSession())
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingSessionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) ClearValue(item *UpdateProbingSessionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
			fps.subPath.ClearValueRaw(item.ProbingSession)
		case UpdateProbingSessionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingSessionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingSessionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbingSessionRequest_FieldPathValue {
	return &UpdateProbingSessionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingSessionRequest_FieldPathArrayOfValues {
	return &UpdateProbingSessionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingSessionRequest_FieldPathArrayItemValue {
	return &UpdateProbingSessionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingSessionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingSessionRequest_FieldPathValue allows storing values for UpdateProbingSessionRequest fields according to their type
type UpdateProbingSessionRequest_FieldPathValue interface {
	UpdateProbingSessionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingSessionRequest)
	CompareWith(*UpdateProbingSessionRequest) (cmp int, comparable bool)
}

func ParseUpdateProbingSessionRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbingSessionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingSessionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingSessionRequest_FieldPathValue), nil
}

func MustParseUpdateProbingSessionRequest_FieldPathValue(pathStr, valueStr string) UpdateProbingSessionRequest_FieldPathValue {
	fpv, err := ParseUpdateProbingSessionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingSessionRequest_FieldTerminalPathValue struct {
	UpdateProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingSessionRequest_FieldPathValue = (*UpdateProbingSessionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbingSessionRequest' as interface{}
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) AsProbingSessionValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession)
	return res, ok
}
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbingSessionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbingSessionRequest_CAS)
	return res, ok
}
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbingSessionRequest
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) SetTo(target **UpdateProbingSessionRequest) {
	if *target == nil {
		*target = new(UpdateProbingSessionRequest)
	}
	switch fpv.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		(*target).ProbingSession = fpv.value.(*probing_session.ProbingSession)
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbingSessionRequest_CAS)
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingSessionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingSessionRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbingSessionRequest'.
func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbingSessionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return 0, false
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingSessionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingSessionRequest))
}

type UpdateProbingSessionRequest_FieldSubPathValue struct {
	UpdateProbingSessionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingSessionRequest_FieldPathValue = (*UpdateProbingSessionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) AsProbingSessionPathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbingSessionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbingSessionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) SetTo(target **UpdateProbingSessionRequest) {
	if *target == nil {
		*target = new(UpdateProbingSessionRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).SetTo(&(*target).ProbingSession)
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbingSessionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingSessionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) CompareWith(source *UpdateProbingSessionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).CompareWith(source.GetProbingSession())
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbingSessionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingSessionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingSessionRequest))
}

// UpdateProbingSessionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbingSessionRequest according to their type
// Present only for array (repeated) types.
type UpdateProbingSessionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingSessionRequest_FieldPath
	ContainsValue(*UpdateProbingSessionRequest) bool
}

// ParseUpdateProbingSessionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingSessionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingSessionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingSessionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingSessionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingSessionRequest_FieldPathArrayItemValue = (*UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingSessionRequest as interface{}
func (fpaiv *UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingSessionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingSessionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingSessionRequest'
func (fpaiv *UpdateProbingSessionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingSessionRequest) bool {
	slice := fpaiv.UpdateProbingSessionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingSessionRequest_FieldSubPathArrayItemValue struct {
	UpdateProbingSessionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingSessionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingSessionRequest_FieldSubPathArrayItemValue) AsProbingSessionPathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbingSessionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbingSessionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbingSessionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingSessionRequest'
func (fpaivs *UpdateProbingSessionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingSessionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		return fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue).ContainsValue(source.GetProbingSession())
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbingSessionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbingSessionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbingSessionRequest fields according to their type
type UpdateProbingSessionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingSessionRequest_FieldPath
}

func ParseUpdateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingSessionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingSessionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingSessionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingSessionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbingSessionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingSessionRequest_FieldPathArrayOfValues = (*UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingSessionRequest_FieldPathSelectorProbingSession:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	case UpdateProbingSessionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbingSessionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbingSessionRequest_CAS) {
			values = append(values, v)
		}
	case UpdateProbingSessionRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsProbingSessionArrayOfValues() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession)
	return res, ok
}
func (fpaov *UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbingSessionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbingSessionRequest_CAS)
	return res, ok
}
func (fpaov *UpdateProbingSessionRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateProbingSessionRequest_FieldSubPathArrayOfValues struct {
	UpdateProbingSessionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingSessionRequest_FieldPathArrayOfValues = (*UpdateProbingSessionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingSessionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingSessionRequest_FieldSubPathArrayOfValues) AsProbingSessionPathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbingSessionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbingSessionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbingSessionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingSessionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingSessionRequestCAS_FieldPathSelector
	Get(source *UpdateProbingSessionRequest_CAS) []interface{}
	GetSingle(source *UpdateProbingSessionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbingSessionRequest_CAS)

	// Those methods build corresponding UpdateProbingSessionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayItemValue
}

type UpdateProbingSessionRequestCAS_FieldPathSelector int32

const (
	UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState UpdateProbingSessionRequestCAS_FieldPathSelector = 0
	UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask        UpdateProbingSessionRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbingSessionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", s))
	}
}

func BuildUpdateProbingSessionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingSessionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingSessionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbingSessionRequestCAS_FieldTerminalPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbingSessionRequestCAS_FieldTerminalPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingSessionRequestCAS_FieldSubPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingSessionRequest_CAS", fp)
}

func ParseUpdateProbingSessionRequestCAS_FieldPath(rawField string) (UpdateProbingSessionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingSessionRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbingSessionRequestCAS_FieldPath(rawField string) UpdateProbingSessionRequestCAS_FieldPath {
	fp, err := ParseUpdateProbingSessionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingSessionRequestCAS_FieldTerminalPath struct {
	selector UpdateProbingSessionRequestCAS_FieldPathSelector
}

var _ UpdateProbingSessionRequestCAS_FieldPath = (*UpdateProbingSessionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) Selector() UpdateProbingSessionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingSessionRequest_CAS
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) Get(source *UpdateProbingSessionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingSessionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingSessionRequest_CAS
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbingSessionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingSessionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return (*probing_session.ProbingSession)(nil)
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbingSessionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingSessionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingSessionRequestCAS_FieldTerminalPathValue{UpdateProbingSessionRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingSessionRequestCAS_FieldTerminalPathValue{UpdateProbingSessionRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession)}
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingSessionRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingSessionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingSessionRequestCAS_FieldSubPath struct {
	selector UpdateProbingSessionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingSessionRequestCAS_FieldPath = (*UpdateProbingSessionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) Selector() UpdateProbingSessionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingSessionRequest_CAS
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) Get(source *UpdateProbingSessionRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingSessionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbingSessionRequest_CAS
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) GetSingle(source *UpdateProbingSessionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingSessionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) ClearValue(item *UpdateProbingSessionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingSessionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbingSessionRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathValue {
	return &UpdateProbingSessionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbingSessionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingSessionRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbingSessionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingSessionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingSessionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbingSessionRequestCAS_FieldPathValue interface {
	UpdateProbingSessionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingSessionRequest_CAS)
	CompareWith(*UpdateProbingSessionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbingSessionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbingSessionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbingSessionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingSessionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbingSessionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbingSessionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbingSessionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingSessionRequestCAS_FieldTerminalPathValue struct {
	UpdateProbingSessionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingSessionRequestCAS_FieldPathValue = (*UpdateProbingSessionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession)
	return res, ok
}
func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbingSessionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingSessionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probing_session.ProbingSession)
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingSessionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingSessionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbingSessionRequest_CAS'.
func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbingSessionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingSessionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingSessionRequest_CAS))
}

type UpdateProbingSessionRequestCAS_FieldSubPathValue struct {
	UpdateProbingSessionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingSessionRequestCAS_FieldPathValue = (*UpdateProbingSessionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbingSessionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingSessionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingSessionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbingSessionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingSessionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingSessionRequest_CAS))
}

// UpdateProbingSessionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbingSessionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingSessionRequestCAS_FieldPath
	ContainsValue(*UpdateProbingSessionRequest_CAS) bool
}

// ParseUpdateProbingSessionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingSessionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingSessionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingSessionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingSessionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingSessionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingSessionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingSessionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbingSessionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingSessionRequestCAS_FieldPathArrayItemValue = (*UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingSessionRequest_CAS as interface{}
func (fpaiv *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingSessionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingSessionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingSessionRequest_CAS) bool {
	slice := fpaiv.UpdateProbingSessionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingSessionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbingSessionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingSessionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingSessionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbingSessionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingSessionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingSessionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbingSessionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbingSessionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingSessionRequestCAS_FieldPath
}

func ParseUpdateProbingSessionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingSessionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingSessionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingSessionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingSessionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingSessionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingSessionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbingSessionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingSessionRequestCAS_FieldPathArrayOfValues = (*UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	case UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession)
	return res, ok
}
func (fpaov *UpdateProbingSessionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}

type UpdateProbingSessionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbingSessionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingSessionRequestCAS_FieldPathArrayOfValues = (*UpdateProbingSessionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingSessionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingSessionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbingSessionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbingSessionRequest_FieldPathSelector
	Get(source *DeleteProbingSessionRequest) []interface{}
	GetSingle(source *DeleteProbingSessionRequest) (interface{}, bool)
	ClearValue(item *DeleteProbingSessionRequest)

	// Those methods build corresponding DeleteProbingSessionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbingSessionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbingSessionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbingSessionRequest_FieldPathArrayItemValue
}

type DeleteProbingSessionRequest_FieldPathSelector int32

const (
	DeleteProbingSessionRequest_FieldPathSelectorName DeleteProbingSessionRequest_FieldPathSelector = 0
)

func (s DeleteProbingSessionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", s))
	}
}

func BuildDeleteProbingSessionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbingSessionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbingSessionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbingSessionRequest_FieldTerminalPath{selector: DeleteProbingSessionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbingSessionRequest", fp)
}

func ParseDeleteProbingSessionRequest_FieldPath(rawField string) (DeleteProbingSessionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbingSessionRequest_FieldPath(fp)
}

func MustParseDeleteProbingSessionRequest_FieldPath(rawField string) DeleteProbingSessionRequest_FieldPath {
	fp, err := ParseDeleteProbingSessionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbingSessionRequest_FieldTerminalPath struct {
	selector DeleteProbingSessionRequest_FieldPathSelector
}

var _ DeleteProbingSessionRequest_FieldPath = (*DeleteProbingSessionRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) Selector() DeleteProbingSessionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbingSessionRequest
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) Get(source *DeleteProbingSessionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbingSessionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbingSessionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbingSessionRequest
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) GetSingle(source *DeleteProbingSessionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbingSessionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		return (*probing_session.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) ClearValue(item *DeleteProbingSessionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbingSessionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbingSessionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbingSessionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbingSessionRequest_FieldPathSelectorName
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbingSessionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		return &DeleteProbingSessionRequest_FieldTerminalPathValue{DeleteProbingSessionRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbingSessionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues{DeleteProbingSessionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		return &DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues{DeleteProbingSessionRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbingSessionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingSessionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbingSessionRequest_FieldPathValue allows storing values for DeleteProbingSessionRequest fields according to their type
type DeleteProbingSessionRequest_FieldPathValue interface {
	DeleteProbingSessionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbingSessionRequest)
	CompareWith(*DeleteProbingSessionRequest) (cmp int, comparable bool)
}

func ParseDeleteProbingSessionRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbingSessionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingSessionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbingSessionRequest_FieldPathValue), nil
}

func MustParseDeleteProbingSessionRequest_FieldPathValue(pathStr, valueStr string) DeleteProbingSessionRequest_FieldPathValue {
	fpv, err := ParseDeleteProbingSessionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbingSessionRequest_FieldTerminalPathValue struct {
	DeleteProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingSessionRequest_FieldPathValue = (*DeleteProbingSessionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbingSessionRequest' as interface{}
func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) AsNameValue() (*probing_session.Reference, bool) {
	res, ok := fpv.value.(*probing_session.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbingSessionRequest
func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) SetTo(target **DeleteProbingSessionRequest) {
	if *target == nil {
		*target = new(DeleteProbingSessionRequest)
	}
	switch fpv.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_session.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbingSessionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbingSessionRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbingSessionRequest'.
func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbingSessionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_session.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingSessionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingSessionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbingSessionRequest))
}

// DeleteProbingSessionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbingSessionRequest according to their type
// Present only for array (repeated) types.
type DeleteProbingSessionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbingSessionRequest_FieldPath
	ContainsValue(*DeleteProbingSessionRequest) bool
}

// ParseDeleteProbingSessionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbingSessionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingSessionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbingSessionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbingSessionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbingSessionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbingSessionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingSessionRequest_FieldPathArrayItemValue = (*DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbingSessionRequest as interface{}
func (fpaiv *DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbingSessionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbingSessionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbingSessionRequest'
func (fpaiv *DeleteProbingSessionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbingSessionRequest) bool {
	slice := fpaiv.DeleteProbingSessionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbingSessionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbingSessionRequest fields according to their type
type DeleteProbingSessionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbingSessionRequest_FieldPath
}

func ParseDeleteProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbingSessionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbingSessionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingSessionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbingSessionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbingSessionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbingSessionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbingSessionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbingSessionRequest_FieldPathArrayOfValues = (*DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbingSessionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_session.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbingSessionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_session.Reference, bool) {
	res, ok := fpaov.values.([]*probing_session.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingSessionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingSessionsRequest_FieldPathSelector
	Get(source *SearchProbingSessionsRequest) []interface{}
	GetSingle(source *SearchProbingSessionsRequest) (interface{}, bool)
	ClearValue(item *SearchProbingSessionsRequest)

	// Those methods build corresponding SearchProbingSessionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingSessionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingSessionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingSessionsRequest_FieldPathArrayItemValue
}

type SearchProbingSessionsRequest_FieldPathSelector int32

const (
	SearchProbingSessionsRequest_FieldPathSelectorParent    SearchProbingSessionsRequest_FieldPathSelector = 0
	SearchProbingSessionsRequest_FieldPathSelectorPageSize  SearchProbingSessionsRequest_FieldPathSelector = 1
	SearchProbingSessionsRequest_FieldPathSelectorPageToken SearchProbingSessionsRequest_FieldPathSelector = 2
	SearchProbingSessionsRequest_FieldPathSelectorOrderBy   SearchProbingSessionsRequest_FieldPathSelector = 3
	SearchProbingSessionsRequest_FieldPathSelectorFilter    SearchProbingSessionsRequest_FieldPathSelector = 4
	SearchProbingSessionsRequest_FieldPathSelectorFieldMask SearchProbingSessionsRequest_FieldPathSelector = 5
	SearchProbingSessionsRequest_FieldPathSelectorView      SearchProbingSessionsRequest_FieldPathSelector = 6
	SearchProbingSessionsRequest_FieldPathSelectorPhrase    SearchProbingSessionsRequest_FieldPathSelector = 7
)

func (s SearchProbingSessionsRequest_FieldPathSelector) String() string {
	switch s {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		return "parent"
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		return "view"
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", s))
	}
}

func BuildSearchProbingSessionsRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingSessionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingSessionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingSessionsRequest", fp)
}

func ParseSearchProbingSessionsRequest_FieldPath(rawField string) (SearchProbingSessionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingSessionsRequest_FieldPath(fp)
}

func MustParseSearchProbingSessionsRequest_FieldPath(rawField string) SearchProbingSessionsRequest_FieldPath {
	fp, err := ParseSearchProbingSessionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingSessionsRequest_FieldTerminalPath struct {
	selector SearchProbingSessionsRequest_FieldPathSelector
}

var _ SearchProbingSessionsRequest_FieldPath = (*SearchProbingSessionsRequest_FieldTerminalPath)(nil)

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) Selector() SearchProbingSessionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingSessionsRequest
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) Get(source *SearchProbingSessionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingSessionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchProbingSessionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchProbingSessionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingSessionsRequest))
}

// GetSingle returns value pointed by specific field of from source SearchProbingSessionsRequest
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) GetSingle(source *SearchProbingSessionsRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingSessionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		return (*probing_session.ParentName)(nil)
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		return (*probing_session.PagerCursor)(nil)
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return (*probing_session.OrderBy)(nil)
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		return (*probing_session.Filter)(nil)
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return (*probing_session.ProbingSession_FieldMask)(nil)
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) ClearValue(item *SearchProbingSessionsRequest) {
	if item != nil {
		switch fp.selector {
		case SearchProbingSessionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchProbingSessionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchProbingSessionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingSessionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingSessionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingSessionsRequest_FieldPathSelectorParent ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorFilter ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorView ||
		fp.selector == SearchProbingSessionsRequest_FieldPathSelectorPhrase
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithIValue(value interface{}) SearchProbingSessionsRequest_FieldPathValue {
	switch fp.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ParentName)}
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.OrderBy)}
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.Filter)}
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession_FieldMask)}
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		return &SearchProbingSessionsRequest_FieldTerminalPathValue{SearchProbingSessionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov := &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ParentName)}
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.OrderBy)}
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.Filter)}
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_session.ProbingSession_FieldMask)}
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		return &SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues{SearchProbingSessionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingSessionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchProbingSessionsRequest_FieldPathValue allows storing values for SearchProbingSessionsRequest fields according to their type
type SearchProbingSessionsRequest_FieldPathValue interface {
	SearchProbingSessionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingSessionsRequest)
	CompareWith(*SearchProbingSessionsRequest) (cmp int, comparable bool)
}

func ParseSearchProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) (SearchProbingSessionsRequest_FieldPathValue, error) {
	fp, err := ParseSearchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingSessionsRequest_FieldPathValue), nil
}

func MustParseSearchProbingSessionsRequest_FieldPathValue(pathStr, valueStr string) SearchProbingSessionsRequest_FieldPathValue {
	fpv, err := ParseSearchProbingSessionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingSessionsRequest_FieldTerminalPathValue struct {
	SearchProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingSessionsRequest_FieldPathValue = (*SearchProbingSessionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingSessionsRequest' as interface{}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_session.ParentName, bool) {
	res, ok := fpv.value.(*probing_session.ParentName)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_session.OrderBy, bool) {
	res, ok := fpv.value.(*probing_session.OrderBy)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_session.Filter, bool) {
	res, ok := fpv.value.(*probing_session.Filter)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpv.value.(*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingSessionsRequest
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) SetTo(target **SearchProbingSessionsRequest) {
	if *target == nil {
		*target = new(SearchProbingSessionsRequest)
	}
	switch fpv.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_session.ParentName)
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_session.PagerCursor)
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_session.OrderBy)
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_session.Filter)
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_session.ProbingSession_FieldMask)
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingSessionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingSessionsRequest_FieldTerminalPathValue' with the value under path in 'SearchProbingSessionsRequest'.
func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) CompareWith(source *SearchProbingSessionsRequest) (int, bool) {
	switch fpv.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_session.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingSessionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingSessionsRequest))
}

// SearchProbingSessionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingSessionsRequest according to their type
// Present only for array (repeated) types.
type SearchProbingSessionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingSessionsRequest_FieldPath
	ContainsValue(*SearchProbingSessionsRequest) bool
}

// ParseSearchProbingSessionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingSessionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingSessionsRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingSessionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingSessionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue struct {
	SearchProbingSessionsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingSessionsRequest_FieldPathArrayItemValue = (*SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingSessionsRequest as interface{}
func (fpaiv *SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingSessionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingSessionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingSessionsRequest'
func (fpaiv *SearchProbingSessionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingSessionsRequest) bool {
	slice := fpaiv.SearchProbingSessionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchProbingSessionsRequest_FieldPathArrayOfValues allows storing slice of values for SearchProbingSessionsRequest fields according to their type
type SearchProbingSessionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingSessionsRequest_FieldPath
}

func ParseSearchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingSessionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingSessionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingSessionsRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingSessionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingSessionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues struct {
	SearchProbingSessionsRequest_FieldTerminalPath
	values interface{}
}

var _ SearchProbingSessionsRequest_FieldPathArrayOfValues = (*SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingSessionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_session.ParentName) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_session.OrderBy) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_session.Filter) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_session.ProbingSession_FieldMask) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchProbingSessionsRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_session.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_session.ParentName)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_session.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_session.OrderBy)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_session.Filter, bool) {
	res, ok := fpaov.values.([]*probing_session.Filter)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_session.ProbingSession_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_session.ProbingSession_FieldMask)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchProbingSessionsRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingSessionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingSessionsResponse_FieldPathSelector
	Get(source *SearchProbingSessionsResponse) []interface{}
	GetSingle(source *SearchProbingSessionsResponse) (interface{}, bool)
	ClearValue(item *SearchProbingSessionsResponse)

	// Those methods build corresponding SearchProbingSessionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingSessionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingSessionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingSessionsResponse_FieldPathArrayItemValue
}

type SearchProbingSessionsResponse_FieldPathSelector int32

const (
	SearchProbingSessionsResponse_FieldPathSelectorProbingSessions   SearchProbingSessionsResponse_FieldPathSelector = 0
	SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken     SearchProbingSessionsResponse_FieldPathSelector = 1
	SearchProbingSessionsResponse_FieldPathSelectorNextPageToken     SearchProbingSessionsResponse_FieldPathSelector = 2
	SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset     SearchProbingSessionsResponse_FieldPathSelector = 3
	SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount SearchProbingSessionsResponse_FieldPathSelector = 4
)

func (s SearchProbingSessionsResponse_FieldPathSelector) String() string {
	switch s {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return "probing_sessions"
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", s))
	}
}

func BuildSearchProbingSessionsResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingSessionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingSessionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			return &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorProbingSessions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			if subpath, err := probing_session.BuildProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchProbingSessionsResponse_FieldSubPath{selector: SearchProbingSessionsResponse_FieldPathSelectorProbingSessions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingSessionsResponse", fp)
}

func ParseSearchProbingSessionsResponse_FieldPath(rawField string) (SearchProbingSessionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingSessionsResponse_FieldPath(fp)
}

func MustParseSearchProbingSessionsResponse_FieldPath(rawField string) SearchProbingSessionsResponse_FieldPath {
	fp, err := ParseSearchProbingSessionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingSessionsResponse_FieldTerminalPath struct {
	selector SearchProbingSessionsResponse_FieldPathSelector
}

var _ SearchProbingSessionsResponse_FieldPath = (*SearchProbingSessionsResponse_FieldTerminalPath)(nil)

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) Selector() SearchProbingSessionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingSessionsResponse
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) Get(source *SearchProbingSessionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, value := range source.GetProbingSessions() {
				values = append(values, value)
			}
		case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingSessionsResponse))
}

// GetSingle returns value pointed by specific field of from source SearchProbingSessionsResponse
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) GetSingle(source *SearchProbingSessionsResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		res := source.GetProbingSessions()
		return res, res != nil
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return ([]*probing_session.ProbingSession)(nil)
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_session.PagerCursor)(nil)
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return (*probing_session.PagerCursor)(nil)
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) ClearValue(item *SearchProbingSessionsResponse) {
	if item != nil {
		switch fp.selector {
		case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
			item.ProbingSessions = nil
		case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingSessionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchProbingSessionsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithIValue(value interface{}) SearchProbingSessionsResponse_FieldPathValue {
	switch fp.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &SearchProbingSessionsResponse_FieldTerminalPathValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_session.ProbingSession)}
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingSessionsResponse_FieldTerminalPathValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingSessionsResponse_FieldTerminalPathValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.PagerCursor)}
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingSessionsResponse_FieldTerminalPathValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingSessionsResponse_FieldTerminalPathValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov := &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_session.ProbingSession)}
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_session.PagerCursor)}
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues{SearchProbingSessionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingSessionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return &SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue{SearchProbingSessionsResponse_FieldTerminalPath: *fp, value: value.(*probing_session.ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingSessionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchProbingSessionsResponse_FieldSubPath struct {
	selector SearchProbingSessionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchProbingSessionsResponse_FieldPath = (*SearchProbingSessionsResponse_FieldSubPath)(nil)

func (fps *SearchProbingSessionsResponse_FieldSubPath) Selector() SearchProbingSessionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchProbingSessionsResponse_FieldSubPath) AsProbingSessionsSubPath() (probing_session.ProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(probing_session.ProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchProbingSessionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchProbingSessionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchProbingSessionsResponse
func (fps *SearchProbingSessionsResponse_FieldSubPath) Get(source *SearchProbingSessionsResponse) (values []interface{}) {
	switch fps.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, item := range source.GetProbingSessions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchProbingSessionsResponse))
}

// GetSingle returns value of selected field from source SearchProbingSessionsResponse
func (fps *SearchProbingSessionsResponse_FieldSubPath) GetSingle(source *SearchProbingSessionsResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		if len(source.GetProbingSessions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSessions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fps.selector))
	}
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchProbingSessionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchProbingSessionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) ClearValue(item *SearchProbingSessionsResponse) {
	if item != nil {
		switch fps.selector {
		case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
			for _, subItem := range item.ProbingSessions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchProbingSessionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchProbingSessionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SearchProbingSessionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithIValue(value interface{}) SearchProbingSessionsResponse_FieldPathValue {
	return &SearchProbingSessionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchProbingSessionsResponse_FieldPathArrayOfValues {
	return &SearchProbingSessionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchProbingSessionsResponse_FieldPathArrayItemValue {
	return &SearchProbingSessionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchProbingSessionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchProbingSessionsResponse_FieldPathValue allows storing values for SearchProbingSessionsResponse fields according to their type
type SearchProbingSessionsResponse_FieldPathValue interface {
	SearchProbingSessionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingSessionsResponse)
	CompareWith(*SearchProbingSessionsResponse) (cmp int, comparable bool)
}

func ParseSearchProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) (SearchProbingSessionsResponse_FieldPathValue, error) {
	fp, err := ParseSearchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingSessionsResponse_FieldPathValue), nil
}

func MustParseSearchProbingSessionsResponse_FieldPathValue(pathStr, valueStr string) SearchProbingSessionsResponse_FieldPathValue {
	fpv, err := ParseSearchProbingSessionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingSessionsResponse_FieldTerminalPathValue struct {
	SearchProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingSessionsResponse_FieldPathValue = (*SearchProbingSessionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingSessionsResponse' as interface{}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) AsProbingSessionsValue() ([]*probing_session.ProbingSession, bool) {
	res, ok := fpv.value.([]*probing_session.ProbingSession)
	return res, ok
}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_session.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_session.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingSessionsResponse
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) SetTo(target **SearchProbingSessionsResponse) {
	if *target == nil {
		*target = new(SearchProbingSessionsResponse)
	}
	switch fpv.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		(*target).ProbingSessions = fpv.value.([]*probing_session.ProbingSession)
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_session.PagerCursor)
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_session.PagerCursor)
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingSessionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingSessionsResponse_FieldTerminalPathValue' with the value under path in 'SearchProbingSessionsResponse'.
func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) CompareWith(source *SearchProbingSessionsResponse) (int, bool) {
	switch fpv.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingSessionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingSessionsResponse))
}

type SearchProbingSessionsResponse_FieldSubPathValue struct {
	SearchProbingSessionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchProbingSessionsResponse_FieldPathValue = (*SearchProbingSessionsResponse_FieldSubPathValue)(nil)

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) AsProbingSessionsPathValue() (probing_session.ProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_session.ProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) SetTo(target **SearchProbingSessionsResponse) {
	if *target == nil {
		*target = new(SearchProbingSessionsResponse)
	}
	switch fpvs.Selector() {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingSessionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) CompareWith(source *SearchProbingSessionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingSessionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchProbingSessionsResponse))
}

// SearchProbingSessionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingSessionsResponse according to their type
// Present only for array (repeated) types.
type SearchProbingSessionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingSessionsResponse_FieldPath
	ContainsValue(*SearchProbingSessionsResponse) bool
}

// ParseSearchProbingSessionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingSessionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingSessionsResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingSessionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingSessionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue struct {
	SearchProbingSessionsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingSessionsResponse_FieldPathArrayItemValue = (*SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingSessionsResponse as interface{}
func (fpaiv *SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue) AsProbingSessionsItemValue() (*probing_session.ProbingSession, bool) {
	res, ok := fpaiv.value.(*probing_session.ProbingSession)
	return res, ok
}

func (fpaiv *SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingSessionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingSessionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingSessionsResponse'
func (fpaiv *SearchProbingSessionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingSessionsResponse) bool {
	slice := fpaiv.SearchProbingSessionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchProbingSessionsResponse_FieldSubPathArrayItemValue struct {
	SearchProbingSessionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchProbingSessionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchProbingSessionsResponse_FieldSubPathArrayItemValue) AsProbingSessionsPathItemValue() (probing_session.ProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_session.ProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingSessionsResponse'
func (fpaivs *SearchProbingSessionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchProbingSessionsResponse) bool {
	switch fpaivs.Selector() {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingSessionsResponse: %d", fpaivs.Selector()))
	}
}

// SearchProbingSessionsResponse_FieldPathArrayOfValues allows storing slice of values for SearchProbingSessionsResponse fields according to their type
type SearchProbingSessionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingSessionsResponse_FieldPath
}

func ParseSearchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingSessionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingSessionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingSessionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingSessionsResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingSessionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingSessionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues struct {
	SearchProbingSessionsResponse_FieldTerminalPath
	values interface{}
}

var _ SearchProbingSessionsResponse_FieldPathArrayOfValues = (*SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingSessionsResponse_FieldPathSelectorProbingSessions:
		for _, v := range fpaov.values.([][]*probing_session.ProbingSession) {
			values = append(values, v)
		}
	case SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingSessionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_session.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsProbingSessionsArrayOfValues() ([][]*probing_session.ProbingSession, bool) {
	res, ok := fpaov.values.([][]*probing_session.ProbingSession)
	return res, ok
}
func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_session.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_session.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingSessionsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchProbingSessionsResponse_FieldSubPathArrayOfValues struct {
	SearchProbingSessionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchProbingSessionsResponse_FieldPathArrayOfValues = (*SearchProbingSessionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchProbingSessionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchProbingSessionsResponse_FieldSubPathArrayOfValues) AsProbingSessionsPathArrayOfValues() (probing_session.ProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_session.ProbingSession_FieldPathArrayOfValues)
	return res, ok
}
