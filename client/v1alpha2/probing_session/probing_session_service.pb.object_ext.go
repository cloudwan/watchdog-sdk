// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_session_service.proto
// DO NOT EDIT!!!

package probing_session_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_session "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_session"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_session.ProbingSession{}
	_ = &project.Project{}
)

func (o *GetProbingSessionRequest) GotenObjectExt() {}

func (o *GetProbingSessionRequest) MakeFullFieldMask() *GetProbingSessionRequest_FieldMask {
	return FullGetProbingSessionRequest_FieldMask()
}

func (o *GetProbingSessionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbingSessionRequest_FieldMask()
}

func (o *GetProbingSessionRequest) MakeDiffFieldMask(other *GetProbingSessionRequest) *GetProbingSessionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbingSessionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbingSessionRequest_FieldMask()
	}

	res := &GetProbingSessionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbingSessionRequest_FieldTerminalPath{selector: GetProbingSessionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbingSessionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbingSessionRequest))
}

func (o *GetProbingSessionRequest) Clone() *GetProbingSessionRequest {
	if o == nil {
		return nil
	}
	result := &GetProbingSessionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_session.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbingSessionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbingSessionRequest) Merge(source *GetProbingSessionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_session.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbingSessionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbingSessionRequest))
}

func (o *BatchGetProbingSessionsRequest) GotenObjectExt() {}

func (o *BatchGetProbingSessionsRequest) MakeFullFieldMask() *BatchGetProbingSessionsRequest_FieldMask {
	return FullBatchGetProbingSessionsRequest_FieldMask()
}

func (o *BatchGetProbingSessionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingSessionsRequest_FieldMask()
}

func (o *BatchGetProbingSessionsRequest) MakeDiffFieldMask(other *BatchGetProbingSessionsRequest) *BatchGetProbingSessionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingSessionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingSessionsRequest_FieldMask()
	}

	res := &BatchGetProbingSessionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbingSessionsRequest_FieldTerminalPath{selector: BatchGetProbingSessionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbingSessionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingSessionsRequest))
}

func (o *BatchGetProbingSessionsRequest) Clone() *BatchGetProbingSessionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingSessionsRequest{}
	result.Names = make([]*probing_session.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probing_session.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbingSessionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingSessionsRequest) Merge(source *BatchGetProbingSessionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_session.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbingSessionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingSessionsRequest))
}

func (o *BatchGetProbingSessionsResponse) GotenObjectExt() {}

func (o *BatchGetProbingSessionsResponse) MakeFullFieldMask() *BatchGetProbingSessionsResponse_FieldMask {
	return FullBatchGetProbingSessionsResponse_FieldMask()
}

func (o *BatchGetProbingSessionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingSessionsResponse_FieldMask()
}

func (o *BatchGetProbingSessionsResponse) MakeDiffFieldMask(other *BatchGetProbingSessionsResponse) *BatchGetProbingSessionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingSessionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingSessionsResponse_FieldMask()
	}

	res := &BatchGetProbingSessionsResponse_FieldMask{}

	if len(o.GetProbingSessions()) == len(other.GetProbingSessions()) {
		for i, lValue := range o.GetProbingSessions() {
			rValue := other.GetProbingSessions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorProbingSessions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingSessionsResponse_FieldTerminalPath{selector: BatchGetProbingSessionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbingSessionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingSessionsResponse))
}

func (o *BatchGetProbingSessionsResponse) Clone() *BatchGetProbingSessionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingSessionsResponse{}
	result.ProbingSessions = make([]*probing_session.ProbingSession, len(o.ProbingSessions))
	for i, sourceValue := range o.ProbingSessions {
		result.ProbingSessions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probing_session.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probing_session.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbingSessionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingSessionsResponse) Merge(source *BatchGetProbingSessionsResponse) {
	for _, sourceValue := range source.GetProbingSessions() {
		exists := false
		for _, currentValue := range o.ProbingSessions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.ProbingSession
			if sourceValue != nil {
				newDstElement = new(probing_session.ProbingSession)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingSessions = append(o.ProbingSessions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_session.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbingSessionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingSessionsResponse))
}

func (o *ListProbingSessionsRequest) GotenObjectExt() {}

func (o *ListProbingSessionsRequest) MakeFullFieldMask() *ListProbingSessionsRequest_FieldMask {
	return FullListProbingSessionsRequest_FieldMask()
}

func (o *ListProbingSessionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingSessionsRequest_FieldMask()
}

func (o *ListProbingSessionsRequest) MakeDiffFieldMask(other *ListProbingSessionsRequest) *ListProbingSessionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbingSessionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingSessionsRequest_FieldMask()
	}

	res := &ListProbingSessionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbingSessionsRequest_FieldTerminalPath{selector: ListProbingSessionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProbingSessionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingSessionsRequest))
}

func (o *ListProbingSessionsRequest) Clone() *ListProbingSessionsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbingSessionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_session.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_session.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_session.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_session.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProbingSessionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingSessionsRequest) Merge(source *ListProbingSessionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_session.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_session.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_session.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_session.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProbingSessionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingSessionsRequest))
}

func (o *ListProbingSessionsResponse) GotenObjectExt() {}

func (o *ListProbingSessionsResponse) MakeFullFieldMask() *ListProbingSessionsResponse_FieldMask {
	return FullListProbingSessionsResponse_FieldMask()
}

func (o *ListProbingSessionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingSessionsResponse_FieldMask()
}

func (o *ListProbingSessionsResponse) MakeDiffFieldMask(other *ListProbingSessionsResponse) *ListProbingSessionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbingSessionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingSessionsResponse_FieldMask()
	}

	res := &ListProbingSessionsResponse_FieldMask{}

	if len(o.GetProbingSessions()) == len(other.GetProbingSessions()) {
		for i, lValue := range o.GetProbingSessions() {
			rValue := other.GetProbingSessions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorProbingSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorProbingSessions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingSessionsResponse_FieldTerminalPath{selector: ListProbingSessionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProbingSessionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingSessionsResponse))
}

func (o *ListProbingSessionsResponse) Clone() *ListProbingSessionsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbingSessionsResponse{}
	result.ProbingSessions = make([]*probing_session.ProbingSession, len(o.ProbingSessions))
	for i, sourceValue := range o.ProbingSessions {
		result.ProbingSessions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_session.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_session.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProbingSessionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingSessionsResponse) Merge(source *ListProbingSessionsResponse) {
	for _, sourceValue := range source.GetProbingSessions() {
		exists := false
		for _, currentValue := range o.ProbingSessions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.ProbingSession
			if sourceValue != nil {
				newDstElement = new(probing_session.ProbingSession)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingSessions = append(o.ProbingSessions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_session.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_session.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProbingSessionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingSessionsResponse))
}

func (o *WatchProbingSessionRequest) GotenObjectExt() {}

func (o *WatchProbingSessionRequest) MakeFullFieldMask() *WatchProbingSessionRequest_FieldMask {
	return FullWatchProbingSessionRequest_FieldMask()
}

func (o *WatchProbingSessionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingSessionRequest_FieldMask()
}

func (o *WatchProbingSessionRequest) MakeDiffFieldMask(other *WatchProbingSessionRequest) *WatchProbingSessionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingSessionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingSessionRequest_FieldMask()
	}

	res := &WatchProbingSessionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingSessionRequest_FieldTerminalPath{selector: WatchProbingSessionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbingSessionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingSessionRequest))
}

func (o *WatchProbingSessionRequest) Clone() *WatchProbingSessionRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingSessionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_session.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbingSessionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingSessionRequest) Merge(source *WatchProbingSessionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_session.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbingSessionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingSessionRequest))
}

func (o *WatchProbingSessionResponse) GotenObjectExt() {}

func (o *WatchProbingSessionResponse) MakeFullFieldMask() *WatchProbingSessionResponse_FieldMask {
	return FullWatchProbingSessionResponse_FieldMask()
}

func (o *WatchProbingSessionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingSessionResponse_FieldMask()
}

func (o *WatchProbingSessionResponse) MakeDiffFieldMask(other *WatchProbingSessionResponse) *WatchProbingSessionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingSessionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingSessionResponse_FieldMask()
	}

	res := &WatchProbingSessionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbingSessionResponse_FieldTerminalPath{selector: WatchProbingSessionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbingSessionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingSessionResponse))
}

func (o *WatchProbingSessionResponse) Clone() *WatchProbingSessionResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingSessionResponse{}
	result.Change = proto.Clone(o.Change).(*probing_session.ProbingSessionChange)
	return result
}

func (o *WatchProbingSessionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingSessionResponse) Merge(source *WatchProbingSessionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probing_session.ProbingSessionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbingSessionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingSessionResponse))
}

func (o *WatchProbingSessionsRequest) GotenObjectExt() {}

func (o *WatchProbingSessionsRequest) MakeFullFieldMask() *WatchProbingSessionsRequest_FieldMask {
	return FullWatchProbingSessionsRequest_FieldMask()
}

func (o *WatchProbingSessionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingSessionsRequest_FieldMask()
}

func (o *WatchProbingSessionsRequest) MakeDiffFieldMask(other *WatchProbingSessionsRequest) *WatchProbingSessionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingSessionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingSessionsRequest_FieldMask()
	}

	res := &WatchProbingSessionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbingSessionsRequest_FieldTerminalPath{selector: WatchProbingSessionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbingSessionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingSessionsRequest))
}

func (o *WatchProbingSessionsRequest) Clone() *WatchProbingSessionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingSessionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_session.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_session.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_session.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_session.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbingSessionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingSessionsRequest) Merge(source *WatchProbingSessionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_session.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_session.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_session.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_session.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbingSessionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingSessionsRequest))
}

func (o *WatchProbingSessionsResponse) GotenObjectExt() {}

func (o *WatchProbingSessionsResponse) MakeFullFieldMask() *WatchProbingSessionsResponse_FieldMask {
	return FullWatchProbingSessionsResponse_FieldMask()
}

func (o *WatchProbingSessionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingSessionsResponse_FieldMask()
}

func (o *WatchProbingSessionsResponse) MakeDiffFieldMask(other *WatchProbingSessionsResponse) *WatchProbingSessionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingSessionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingSessionsResponse_FieldMask()
	}

	res := &WatchProbingSessionsResponse_FieldMask{}

	if len(o.GetProbingSessionChanges()) == len(other.GetProbingSessionChanges()) {
		for i, lValue := range o.GetProbingSessionChanges() {
			rValue := other.GetProbingSessionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorProbingSessionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldSubPath{selector: WatchProbingSessionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponse_FieldTerminalPath{selector: WatchProbingSessionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbingSessionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingSessionsResponse))
}

func (o *WatchProbingSessionsResponse) Clone() *WatchProbingSessionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingSessionsResponse{}
	result.ProbingSessionChanges = make([]*probing_session.ProbingSessionChange, len(o.ProbingSessionChanges))
	for i, sourceValue := range o.ProbingSessionChanges {
		result.ProbingSessionChanges[i] = proto.Clone(sourceValue).(*probing_session.ProbingSessionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbingSessionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingSessionsResponse) Merge(source *WatchProbingSessionsResponse) {
	for _, sourceValue := range source.GetProbingSessionChanges() {
		exists := false
		for _, currentValue := range o.ProbingSessionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.ProbingSessionChange
			if sourceValue != nil {
				newDstElement = new(probing_session.ProbingSessionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbingSessionChanges = append(o.ProbingSessionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbingSessionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbingSessionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingSessionsResponse))
}

func (o *WatchProbingSessionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbingSessionsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbingSessionsResponse_PageTokenChange_FieldMask {
	return FullWatchProbingSessionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingSessionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingSessionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingSessionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbingSessionsResponse_PageTokenChange) *WatchProbingSessionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingSessionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingSessionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbingSessionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingSessionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingSessionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbingSessionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingSessionsResponse_PageTokenChange))
}

func (o *WatchProbingSessionsResponse_PageTokenChange) Clone() *WatchProbingSessionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbingSessionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_session.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_session.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbingSessionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingSessionsResponse_PageTokenChange) Merge(source *WatchProbingSessionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_session.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_session.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbingSessionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingSessionsResponse_PageTokenChange))
}

func (o *CreateProbingSessionRequest) GotenObjectExt() {}

func (o *CreateProbingSessionRequest) MakeFullFieldMask() *CreateProbingSessionRequest_FieldMask {
	return FullCreateProbingSessionRequest_FieldMask()
}

func (o *CreateProbingSessionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbingSessionRequest_FieldMask()
}

func (o *CreateProbingSessionRequest) MakeDiffFieldMask(other *CreateProbingSessionRequest) *CreateProbingSessionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbingSessionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbingSessionRequest_FieldMask()
	}

	res := &CreateProbingSessionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbingSessionRequest_FieldTerminalPath{selector: CreateProbingSessionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbingSession().MakeDiffFieldMask(other.GetProbingSession())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbingSessionRequest_FieldTerminalPath{selector: CreateProbingSessionRequest_FieldPathSelectorProbingSession})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbingSessionRequest_FieldSubPath{selector: CreateProbingSessionRequest_FieldPathSelectorProbingSession, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbingSessionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbingSessionRequest))
}

func (o *CreateProbingSessionRequest) Clone() *CreateProbingSessionRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbingSessionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_session.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingSession = o.ProbingSession.Clone()
	return result
}

func (o *CreateProbingSessionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbingSessionRequest) Merge(source *CreateProbingSessionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_session.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbingSession() != nil {
		if o.ProbingSession == nil {
			o.ProbingSession = new(probing_session.ProbingSession)
		}
		o.ProbingSession.Merge(source.GetProbingSession())
	}
}

func (o *CreateProbingSessionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbingSessionRequest))
}

func (o *UpdateProbingSessionRequest) GotenObjectExt() {}

func (o *UpdateProbingSessionRequest) MakeFullFieldMask() *UpdateProbingSessionRequest_FieldMask {
	return FullUpdateProbingSessionRequest_FieldMask()
}

func (o *UpdateProbingSessionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingSessionRequest_FieldMask()
}

func (o *UpdateProbingSessionRequest) MakeDiffFieldMask(other *UpdateProbingSessionRequest) *UpdateProbingSessionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingSessionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingSessionRequest_FieldMask()
	}

	res := &UpdateProbingSessionRequest_FieldMask{}
	{
		subMask := o.GetProbingSession().MakeDiffFieldMask(other.GetProbingSession())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorProbingSession})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingSessionRequest_FieldSubPath{selector: UpdateProbingSessionRequest_FieldPathSelectorProbingSession, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingSessionRequest_FieldTerminalPath{selector: UpdateProbingSessionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingSessionRequest_FieldSubPath{selector: UpdateProbingSessionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbingSessionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingSessionRequest))
}

func (o *UpdateProbingSessionRequest) Clone() *UpdateProbingSessionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbingSessionRequest{}
	result.ProbingSession = o.ProbingSession.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probing_session.ProbingSession_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbingSessionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingSessionRequest) Merge(source *UpdateProbingSessionRequest) {
	if source.GetProbingSession() != nil {
		if o.ProbingSession == nil {
			o.ProbingSession = new(probing_session.ProbingSession)
		}
		o.ProbingSession.Merge(source.GetProbingSession())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbingSessionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbingSessionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingSessionRequest))
}

func (o *UpdateProbingSessionRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbingSessionRequest_CAS) MakeFullFieldMask() *UpdateProbingSessionRequest_CAS_FieldMask {
	return FullUpdateProbingSessionRequest_CAS_FieldMask()
}

func (o *UpdateProbingSessionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingSessionRequest_CAS_FieldMask()
}

func (o *UpdateProbingSessionRequest_CAS) MakeDiffFieldMask(other *UpdateProbingSessionRequest_CAS) *UpdateProbingSessionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingSessionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingSessionRequest_CAS_FieldMask()
	}

	res := &UpdateProbingSessionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingSessionRequestCAS_FieldTerminalPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingSessionRequestCAS_FieldSubPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbingSessionRequestCAS_FieldTerminalPath{selector: UpdateProbingSessionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbingSessionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingSessionRequest_CAS))
}

func (o *UpdateProbingSessionRequest_CAS) Clone() *UpdateProbingSessionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbingSessionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	return result
}

func (o *UpdateProbingSessionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingSessionRequest_CAS) Merge(source *UpdateProbingSessionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probing_session.ProbingSession)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbingSessionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingSessionRequest_CAS))
}

func (o *DeleteProbingSessionRequest) GotenObjectExt() {}

func (o *DeleteProbingSessionRequest) MakeFullFieldMask() *DeleteProbingSessionRequest_FieldMask {
	return FullDeleteProbingSessionRequest_FieldMask()
}

func (o *DeleteProbingSessionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbingSessionRequest_FieldMask()
}

func (o *DeleteProbingSessionRequest) MakeDiffFieldMask(other *DeleteProbingSessionRequest) *DeleteProbingSessionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbingSessionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbingSessionRequest_FieldMask()
	}

	res := &DeleteProbingSessionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbingSessionRequest_FieldTerminalPath{selector: DeleteProbingSessionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbingSessionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbingSessionRequest))
}

func (o *DeleteProbingSessionRequest) Clone() *DeleteProbingSessionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbingSessionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_session.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbingSessionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbingSessionRequest) Merge(source *DeleteProbingSessionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_session.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbingSessionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbingSessionRequest))
}

func (o *SearchProbingSessionsRequest) GotenObjectExt() {}

func (o *SearchProbingSessionsRequest) MakeFullFieldMask() *SearchProbingSessionsRequest_FieldMask {
	return FullSearchProbingSessionsRequest_FieldMask()
}

func (o *SearchProbingSessionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingSessionsRequest_FieldMask()
}

func (o *SearchProbingSessionsRequest) MakeDiffFieldMask(other *SearchProbingSessionsRequest) *SearchProbingSessionsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingSessionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingSessionsRequest_FieldMask()
	}

	res := &SearchProbingSessionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbingSessionsRequest_FieldTerminalPath{selector: SearchProbingSessionsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbingSessionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingSessionsRequest))
}

func (o *SearchProbingSessionsRequest) Clone() *SearchProbingSessionsRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbingSessionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_session.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_session.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_session.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_session.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_session.ProbingSession_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbingSessionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingSessionsRequest) Merge(source *SearchProbingSessionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_session.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_session.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_session.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_session.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_session.ProbingSession_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbingSessionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingSessionsRequest))
}

func (o *SearchProbingSessionsResponse) GotenObjectExt() {}

func (o *SearchProbingSessionsResponse) MakeFullFieldMask() *SearchProbingSessionsResponse_FieldMask {
	return FullSearchProbingSessionsResponse_FieldMask()
}

func (o *SearchProbingSessionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingSessionsResponse_FieldMask()
}

func (o *SearchProbingSessionsResponse) MakeDiffFieldMask(other *SearchProbingSessionsResponse) *SearchProbingSessionsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingSessionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingSessionsResponse_FieldMask()
	}

	res := &SearchProbingSessionsResponse_FieldMask{}

	if len(o.GetProbingSessions()) == len(other.GetProbingSessions()) {
		for i, lValue := range o.GetProbingSessions() {
			rValue := other.GetProbingSessions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorProbingSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorProbingSessions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbingSessionsResponse_FieldTerminalPath{selector: SearchProbingSessionsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbingSessionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingSessionsResponse))
}

func (o *SearchProbingSessionsResponse) Clone() *SearchProbingSessionsResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbingSessionsResponse{}
	result.ProbingSessions = make([]*probing_session.ProbingSession, len(o.ProbingSessions))
	for i, sourceValue := range o.ProbingSessions {
		result.ProbingSessions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_session.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_session.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbingSessionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingSessionsResponse) Merge(source *SearchProbingSessionsResponse) {
	for _, sourceValue := range source.GetProbingSessions() {
		exists := false
		for _, currentValue := range o.ProbingSessions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_session.ProbingSession
			if sourceValue != nil {
				newDstElement = new(probing_session.ProbingSession)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingSessions = append(o.ProbingSessions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_session.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_session.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbingSessionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingSessionsResponse))
}
