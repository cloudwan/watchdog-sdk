// Code generated by protoc-gen-goten-client
// API: DNSQueryTestService
// DO NOT EDIT!!!

package dns_query_test_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
)

var (
	descriptorsInitialized        bool
	dnsQueryTestServiceDescriptor *DNSQueryTestServiceDescriptor
	runDNSQueryTestDescriptor     *RunDNSQueryTestDescriptor
)

type RunDNSQueryTestDescriptor struct{}

type RunDNSQueryTestDescriptorClientMsgHandle struct{}

type RunDNSQueryTestDescriptorServerMsgHandle struct{}

func (d *RunDNSQueryTestDescriptor) NewEmptyClientMsg() proto.Message {
	return &RunDNSQueryTestRequest{}
}

func (d *RunDNSQueryTestDescriptor) NewEmptyServerMsg() proto.Message {
	return &RunDNSQueryTestResponse{}
}

func (d *RunDNSQueryTestDescriptor) IsUnary() bool {
	return true
}

func (d *RunDNSQueryTestDescriptor) IsClientStream() bool {
	return false
}

func (d *RunDNSQueryTestDescriptor) IsServerStream() bool {
	return false
}

func (d *RunDNSQueryTestDescriptor) IsCollection() bool {
	return false
}

func (d *RunDNSQueryTestDescriptor) IsPlural() bool {
	return false
}

func (d *RunDNSQueryTestDescriptor) HasResource() bool {
	return true
}

func (d *RunDNSQueryTestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RunDNSQueryTestDescriptor) GetVerb() string {
	return "runDNSQueryTest"
}

func (d *RunDNSQueryTestDescriptor) GetMethodName() string {
	return "RunDNSQueryTest"
}

func (d *RunDNSQueryTestDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.DNSQueryTestService/RunDNSQueryTest"
}

func (d *RunDNSQueryTestDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *RunDNSQueryTestDescriptor) GetApiName() string {
	return "DNSQueryTestService"
}

func (d *RunDNSQueryTestDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *RunDNSQueryTestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RunDNSQueryTestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return dnsQueryTestServiceDescriptor
}

func (d *RunDNSQueryTestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *RunDNSQueryTestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunDNSQueryTestDescriptorClientMsgHandle{}
}

func (d *RunDNSQueryTestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunDNSQueryTestDescriptorServerMsgHandle{}
}

func (h *RunDNSQueryTestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunDNSQueryTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RunDNSQueryTestRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probe.Name)(nil)
}

func (h *RunDNSQueryTestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunDNSQueryTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RunDNSQueryTestRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RunDNSQueryTestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunDNSQueryTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RunDNSQueryTestRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RunDNSQueryTestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunDNSQueryTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RunDNSQueryTestResponse) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RunDNSQueryTestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunDNSQueryTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RunDNSQueryTestResponse) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RunDNSQueryTestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunDNSQueryTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RunDNSQueryTestResponse) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetRunDNSQueryTestDescriptor() *RunDNSQueryTestDescriptor {
	return runDNSQueryTestDescriptor
}

type DNSQueryTestServiceDescriptor struct{}

func (d *DNSQueryTestServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		runDNSQueryTestDescriptor,
	}
}

func (d *DNSQueryTestServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.DNSQueryTestService"
}

func (d *DNSQueryTestServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DNSQueryTestServiceDescriptor) GetApiName() string {
	return "DNSQueryTestService"
}

func (d *DNSQueryTestServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DNSQueryTestServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetDNSQueryTestServiceDescriptor() *DNSQueryTestServiceDescriptor {
	return dnsQueryTestServiceDescriptor
}

func initDescriptors() {
	dnsQueryTestServiceDescriptor = &DNSQueryTestServiceDescriptor{}
	runDNSQueryTestDescriptor = &RunDNSQueryTestDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(dnsQueryTestServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(runDNSQueryTestDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
