// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/dns_query_test_custom.proto
// DO NOT EDIT!!!

package dns_query_test_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunDNSQueryTestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunDNSQueryTestRequest_FieldPathSelector
	Get(source *RunDNSQueryTestRequest) []interface{}
	GetSingle(source *RunDNSQueryTestRequest) (interface{}, bool)
	ClearValue(item *RunDNSQueryTestRequest)

	// Those methods build corresponding RunDNSQueryTestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunDNSQueryTestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RunDNSQueryTestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunDNSQueryTestRequest_FieldPathArrayItemValue
}

type RunDNSQueryTestRequest_FieldPathSelector int32

const (
	RunDNSQueryTestRequest_FieldPathSelectorName               RunDNSQueryTestRequest_FieldPathSelector = 0
	RunDNSQueryTestRequest_FieldPathSelectorQuery              RunDNSQueryTestRequest_FieldPathSelector = 1
	RunDNSQueryTestRequest_FieldPathSelectorServer             RunDNSQueryTestRequest_FieldPathSelector = 2
	RunDNSQueryTestRequest_FieldPathSelectorPort               RunDNSQueryTestRequest_FieldPathSelector = 3
	RunDNSQueryTestRequest_FieldPathSelectorTcp                RunDNSQueryTestRequest_FieldPathSelector = 4
	RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired RunDNSQueryTestRequest_FieldPathSelector = 5
	RunDNSQueryTestRequest_FieldPathSelectorReverse            RunDNSQueryTestRequest_FieldPathSelector = 6
)

func (s RunDNSQueryTestRequest_FieldPathSelector) String() string {
	switch s {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		return "name"
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return "query"
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		return "server"
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		return "port"
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		return "tcp"
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		return "no_recursion_desired"
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		return "reverse"
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", s))
	}
}

func BuildRunDNSQueryTestRequest_FieldPath(fp gotenobject.RawFieldPath) (RunDNSQueryTestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunDNSQueryTestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorName}, nil
		case "query":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorQuery}, nil
		case "server":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorServer}, nil
		case "port":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorPort}, nil
		case "tcp":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorTcp}, nil
		case "no_recursion_desired", "noRecursionDesired", "no-recursion-desired":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired}, nil
		case "reverse":
			return &RunDNSQueryTestRequest_FieldTerminalPath{selector: RunDNSQueryTestRequest_FieldPathSelectorReverse}, nil
		}
	} else {
		switch fp[0] {
		case "query":
			if subpath, err := common.BuildDNSQuery_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestRequest_FieldSubPath{selector: RunDNSQueryTestRequest_FieldPathSelectorQuery, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunDNSQueryTestRequest", fp)
}

func ParseRunDNSQueryTestRequest_FieldPath(rawField string) (RunDNSQueryTestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunDNSQueryTestRequest_FieldPath(fp)
}

func MustParseRunDNSQueryTestRequest_FieldPath(rawField string) RunDNSQueryTestRequest_FieldPath {
	fp, err := ParseRunDNSQueryTestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunDNSQueryTestRequest_FieldTerminalPath struct {
	selector RunDNSQueryTestRequest_FieldPathSelector
}

var _ RunDNSQueryTestRequest_FieldPath = (*RunDNSQueryTestRequest_FieldTerminalPath)(nil)

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) Selector() RunDNSQueryTestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunDNSQueryTestRequest
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) Get(source *RunDNSQueryTestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunDNSQueryTestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RunDNSQueryTestRequest_FieldPathSelectorQuery:
			if source.Query != nil {
				values = append(values, source.Query)
			}
		case RunDNSQueryTestRequest_FieldPathSelectorServer:
			values = append(values, source.Server)
		case RunDNSQueryTestRequest_FieldPathSelectorPort:
			values = append(values, source.Port)
		case RunDNSQueryTestRequest_FieldPathSelectorTcp:
			values = append(values, source.Tcp)
		case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
			values = append(values, source.NoRecursionDesired)
		case RunDNSQueryTestRequest_FieldPathSelectorReverse:
			values = append(values, source.Reverse)
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunDNSQueryTestRequest))
}

// GetSingle returns value pointed by specific field of from source RunDNSQueryTestRequest
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) GetSingle(source *RunDNSQueryTestRequest) (interface{}, bool) {
	switch fp.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		res := source.GetQuery()
		return res, res != nil
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		return source.GetServer(), source != nil
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		return source.GetPort(), source != nil
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		return source.GetTcp(), source != nil
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		return source.GetNoRecursionDesired(), source != nil
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		return source.GetReverse(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunDNSQueryTestRequest))
}

// GetDefault returns a default value of the field type
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return (*common.DNSQuery)(nil)
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		return ""
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		return uint32(0)
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		return false
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		return false
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) ClearValue(item *RunDNSQueryTestRequest) {
	if item != nil {
		switch fp.selector {
		case RunDNSQueryTestRequest_FieldPathSelectorName:
			item.Name = nil
		case RunDNSQueryTestRequest_FieldPathSelectorQuery:
			item.Query = nil
		case RunDNSQueryTestRequest_FieldPathSelectorServer:
			item.Server = ""
		case RunDNSQueryTestRequest_FieldPathSelectorPort:
			item.Port = uint32(0)
		case RunDNSQueryTestRequest_FieldPathSelectorTcp:
			item.Tcp = false
		case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
			item.NoRecursionDesired = false
		case RunDNSQueryTestRequest_FieldPathSelectorReverse:
			item.Reverse = false
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
		}
	}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunDNSQueryTestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunDNSQueryTestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunDNSQueryTestRequest_FieldPathSelectorName ||
		fp.selector == RunDNSQueryTestRequest_FieldPathSelectorServer ||
		fp.selector == RunDNSQueryTestRequest_FieldPathSelectorPort ||
		fp.selector == RunDNSQueryTestRequest_FieldPathSelectorTcp ||
		fp.selector == RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired ||
		fp.selector == RunDNSQueryTestRequest_FieldPathSelectorReverse
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithIValue(value interface{}) RunDNSQueryTestRequest_FieldPathValue {
	switch fp.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(*common.DNSQuery)}
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(uint32)}
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(bool)}
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(bool)}
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		return &RunDNSQueryTestRequest_FieldTerminalPathValue{RunDNSQueryTestRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestRequest_FieldPathArrayOfValues {
	fpaov := &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]*common.DNSQuery)}
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]uint32)}
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		return &RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunDNSQueryTestRequest_FieldSubPath struct {
	selector RunDNSQueryTestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunDNSQueryTestRequest_FieldPath = (*RunDNSQueryTestRequest_FieldSubPath)(nil)

func (fps *RunDNSQueryTestRequest_FieldSubPath) Selector() RunDNSQueryTestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *RunDNSQueryTestRequest_FieldSubPath) AsQuerySubPath() (common.DNSQuery_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSQuery_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunDNSQueryTestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunDNSQueryTestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunDNSQueryTestRequest
func (fps *RunDNSQueryTestRequest_FieldSubPath) Get(source *RunDNSQueryTestRequest) (values []interface{}) {
	switch fps.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		values = append(values, fps.subPath.GetRaw(source.GetQuery())...)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fps.selector))
	}
	return
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunDNSQueryTestRequest))
}

// GetSingle returns value of selected field from source RunDNSQueryTestRequest
func (fps *RunDNSQueryTestRequest_FieldSubPath) GetSingle(source *RunDNSQueryTestRequest) (interface{}, bool) {
	switch fps.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		if source.GetQuery() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fps.selector))
	}
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunDNSQueryTestRequest))
}

// GetDefault returns a default value of the field type
func (fps *RunDNSQueryTestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) ClearValue(item *RunDNSQueryTestRequest) {
	if item != nil {
		switch fps.selector {
		case RunDNSQueryTestRequest_FieldPathSelectorQuery:
			fps.subPath.ClearValueRaw(item.Query)
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fps.selector))
		}
	}
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunDNSQueryTestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunDNSQueryTestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunDNSQueryTestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithIValue(value interface{}) RunDNSQueryTestRequest_FieldPathValue {
	return &RunDNSQueryTestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestRequest_FieldPathArrayOfValues {
	return &RunDNSQueryTestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestRequest_FieldPathArrayItemValue {
	return &RunDNSQueryTestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunDNSQueryTestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunDNSQueryTestRequest_FieldPathValue allows storing values for RunDNSQueryTestRequest fields according to their type
type RunDNSQueryTestRequest_FieldPathValue interface {
	RunDNSQueryTestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunDNSQueryTestRequest)
	CompareWith(*RunDNSQueryTestRequest) (cmp int, comparable bool)
}

func ParseRunDNSQueryTestRequest_FieldPathValue(pathStr, valueStr string) (RunDNSQueryTestRequest_FieldPathValue, error) {
	fp, err := ParseRunDNSQueryTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunDNSQueryTestRequest_FieldPathValue), nil
}

func MustParseRunDNSQueryTestRequest_FieldPathValue(pathStr, valueStr string) RunDNSQueryTestRequest_FieldPathValue {
	fpv, err := ParseRunDNSQueryTestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunDNSQueryTestRequest_FieldTerminalPathValue struct {
	RunDNSQueryTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestRequest_FieldPathValue = (*RunDNSQueryTestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunDNSQueryTestRequest' as interface{}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsQueryValue() (*common.DNSQuery, bool) {
	res, ok := fpv.value.(*common.DNSQuery)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsServerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsPortValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsTcpValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsNoRecursionDesiredValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) AsReverseValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object RunDNSQueryTestRequest
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) SetTo(target **RunDNSQueryTestRequest) {
	if *target == nil {
		*target = new(RunDNSQueryTestRequest)
	}
	switch fpv.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		(*target).Query = fpv.value.(*common.DNSQuery)
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		(*target).Server = fpv.value.(string)
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		(*target).Port = fpv.value.(uint32)
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		(*target).Tcp = fpv.value.(bool)
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		(*target).NoRecursionDesired = fpv.value.(bool)
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		(*target).Reverse = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunDNSQueryTestRequest_FieldTerminalPathValue' with the value under path in 'RunDNSQueryTestRequest'.
func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) CompareWith(source *RunDNSQueryTestRequest) (int, bool) {
	switch fpv.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return 0, false
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		leftValue := fpv.value.(string)
		rightValue := source.GetServer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		leftValue := fpv.value.(bool)
		rightValue := source.GetTcp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoRecursionDesired()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		leftValue := fpv.value.(bool)
		rightValue := source.GetReverse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunDNSQueryTestRequest))
}

type RunDNSQueryTestRequest_FieldSubPathValue struct {
	RunDNSQueryTestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunDNSQueryTestRequest_FieldPathValue = (*RunDNSQueryTestRequest_FieldSubPathValue)(nil)

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) AsQueryPathValue() (common.DNSQuery_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSQuery_FieldPathValue)
	return res, ok
}

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) SetTo(target **RunDNSQueryTestRequest) {
	if *target == nil {
		*target = new(RunDNSQueryTestRequest)
	}
	switch fpvs.Selector() {
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		fpvs.subPathValue.(common.DNSQuery_FieldPathValue).SetTo(&(*target).Query)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) CompareWith(source *RunDNSQueryTestRequest) (int, bool) {
	switch fpvs.Selector() {
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return fpvs.subPathValue.(common.DNSQuery_FieldPathValue).CompareWith(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunDNSQueryTestRequest))
}

// RunDNSQueryTestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RunDNSQueryTestRequest according to their type
// Present only for array (repeated) types.
type RunDNSQueryTestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunDNSQueryTestRequest_FieldPath
	ContainsValue(*RunDNSQueryTestRequest) bool
}

// ParseRunDNSQueryTestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunDNSQueryTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RunDNSQueryTestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRunDNSQueryTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunDNSQueryTestRequest_FieldPathArrayItemValue), nil
}

func MustParseRunDNSQueryTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) RunDNSQueryTestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRunDNSQueryTestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue struct {
	RunDNSQueryTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestRequest_FieldPathArrayItemValue = (*RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunDNSQueryTestRequest as interface{}
func (fpaiv *RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RunDNSQueryTestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunDNSQueryTestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestRequest'
func (fpaiv *RunDNSQueryTestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RunDNSQueryTestRequest) bool {
	slice := fpaiv.RunDNSQueryTestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunDNSQueryTestRequest_FieldSubPathArrayItemValue struct {
	RunDNSQueryTestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunDNSQueryTestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunDNSQueryTestRequest_FieldSubPathArrayItemValue) AsQueryPathItemValue() (common.DNSQuery_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSQuery_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestRequest'
func (fpaivs *RunDNSQueryTestRequest_FieldSubPathArrayItemValue) ContainsValue(source *RunDNSQueryTestRequest) bool {
	switch fpaivs.Selector() {
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		return fpaivs.subPathItemValue.(common.DNSQuery_FieldPathArrayItemValue).ContainsValue(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequest: %d", fpaivs.Selector()))
	}
}

// RunDNSQueryTestRequest_FieldPathArrayOfValues allows storing slice of values for RunDNSQueryTestRequest fields according to their type
type RunDNSQueryTestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunDNSQueryTestRequest_FieldPath
}

func ParseRunDNSQueryTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RunDNSQueryTestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRunDNSQueryTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunDNSQueryTestRequest_FieldPathArrayOfValues), nil
}

func MustParseRunDNSQueryTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RunDNSQueryTestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRunDNSQueryTestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues struct {
	RunDNSQueryTestRequest_FieldTerminalPath
	values interface{}
}

var _ RunDNSQueryTestRequest_FieldPathArrayOfValues = (*RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunDNSQueryTestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorQuery:
		for _, v := range fpaov.values.([]*common.DNSQuery) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorServer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorPort:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorTcp:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorNoRecursionDesired:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequest_FieldPathSelectorReverse:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsQueryArrayOfValues() ([]*common.DNSQuery, bool) {
	res, ok := fpaov.values.([]*common.DNSQuery)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsServerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsPortArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsTcpArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsNoRecursionDesiredArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequest_FieldTerminalPathArrayOfValues) AsReverseArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type RunDNSQueryTestRequest_FieldSubPathArrayOfValues struct {
	RunDNSQueryTestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunDNSQueryTestRequest_FieldPathArrayOfValues = (*RunDNSQueryTestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunDNSQueryTestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunDNSQueryTestRequest_FieldSubPathArrayOfValues) AsQueryPathArrayOfValues() (common.DNSQuery_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSQuery_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunDNSQueryTestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunDNSQueryTestResponse_FieldPathSelector
	Get(source *RunDNSQueryTestResponse) []interface{}
	GetSingle(source *RunDNSQueryTestResponse) (interface{}, bool)
	ClearValue(item *RunDNSQueryTestResponse)

	// Those methods build corresponding RunDNSQueryTestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunDNSQueryTestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunDNSQueryTestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunDNSQueryTestResponse_FieldPathArrayItemValue
}

type RunDNSQueryTestResponse_FieldPathSelector int32

const (
	RunDNSQueryTestResponse_FieldPathSelectorId      RunDNSQueryTestResponse_FieldPathSelector = 0
	RunDNSQueryTestResponse_FieldPathSelectorRcode   RunDNSQueryTestResponse_FieldPathSelector = 1
	RunDNSQueryTestResponse_FieldPathSelectorFlags   RunDNSQueryTestResponse_FieldPathSelector = 2
	RunDNSQueryTestResponse_FieldPathSelectorQueries RunDNSQueryTestResponse_FieldPathSelector = 3
	RunDNSQueryTestResponse_FieldPathSelectorAnswers RunDNSQueryTestResponse_FieldPathSelector = 4
	RunDNSQueryTestResponse_FieldPathSelectorNs      RunDNSQueryTestResponse_FieldPathSelector = 5
	RunDNSQueryTestResponse_FieldPathSelectorExtras  RunDNSQueryTestResponse_FieldPathSelector = 6
	RunDNSQueryTestResponse_FieldPathSelectorRtt     RunDNSQueryTestResponse_FieldPathSelector = 7
)

func (s RunDNSQueryTestResponse_FieldPathSelector) String() string {
	switch s {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		return "id"
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		return "rcode"
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return "flags"
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return "queries"
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return "answers"
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return "ns"
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return "extras"
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		return "rtt"
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", s))
	}
}

func BuildRunDNSQueryTestResponse_FieldPath(fp gotenobject.RawFieldPath) (RunDNSQueryTestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunDNSQueryTestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "id":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorId}, nil
		case "rcode":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorRcode}, nil
		case "flags":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorFlags}, nil
		case "queries":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorQueries}, nil
		case "answers":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorAnswers}, nil
		case "ns":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorNs}, nil
		case "extras":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorExtras}, nil
		case "rtt":
			return &RunDNSQueryTestResponse_FieldTerminalPath{selector: RunDNSQueryTestResponse_FieldPathSelectorRtt}, nil
		}
	} else {
		switch fp[0] {
		case "queries":
			if subpath, err := common.BuildDNSQuery_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestResponse_FieldSubPath{selector: RunDNSQueryTestResponse_FieldPathSelectorQueries, subPath: subpath}, nil
			}
		case "answers":
			if subpath, err := common.BuildDNSResourceRecord_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestResponse_FieldSubPath{selector: RunDNSQueryTestResponse_FieldPathSelectorAnswers, subPath: subpath}, nil
			}
		case "ns":
			if subpath, err := common.BuildDNSResourceRecord_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestResponse_FieldSubPath{selector: RunDNSQueryTestResponse_FieldPathSelectorNs, subPath: subpath}, nil
			}
		case "extras":
			if subpath, err := common.BuildDNSResourceRecord_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestResponse_FieldSubPath{selector: RunDNSQueryTestResponse_FieldPathSelectorExtras, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunDNSQueryTestResponse", fp)
}

func ParseRunDNSQueryTestResponse_FieldPath(rawField string) (RunDNSQueryTestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunDNSQueryTestResponse_FieldPath(fp)
}

func MustParseRunDNSQueryTestResponse_FieldPath(rawField string) RunDNSQueryTestResponse_FieldPath {
	fp, err := ParseRunDNSQueryTestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunDNSQueryTestResponse_FieldTerminalPath struct {
	selector RunDNSQueryTestResponse_FieldPathSelector
}

var _ RunDNSQueryTestResponse_FieldPath = (*RunDNSQueryTestResponse_FieldTerminalPath)(nil)

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) Selector() RunDNSQueryTestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunDNSQueryTestResponse
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) Get(source *RunDNSQueryTestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunDNSQueryTestResponse_FieldPathSelectorId:
			values = append(values, source.Id)
		case RunDNSQueryTestResponse_FieldPathSelectorRcode:
			values = append(values, source.Rcode)
		case RunDNSQueryTestResponse_FieldPathSelectorFlags:
			for _, value := range source.GetFlags() {
				values = append(values, value)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorQueries:
			for _, value := range source.GetQueries() {
				values = append(values, value)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
			for _, value := range source.GetAnswers() {
				values = append(values, value)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorNs:
			for _, value := range source.GetNs() {
				values = append(values, value)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorExtras:
			for _, value := range source.GetExtras() {
				values = append(values, value)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorRtt:
			if source.Rtt != nil {
				values = append(values, source.Rtt)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunDNSQueryTestResponse))
}

// GetSingle returns value pointed by specific field of from source RunDNSQueryTestResponse
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) GetSingle(source *RunDNSQueryTestResponse) (interface{}, bool) {
	switch fp.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		return source.GetId(), source != nil
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		return source.GetRcode(), source != nil
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		res := source.GetFlags()
		return res, res != nil
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		res := source.GetQueries()
		return res, res != nil
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		res := source.GetAnswers()
		return res, res != nil
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		res := source.GetNs()
		return res, res != nil
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		res := source.GetExtras()
		return res, res != nil
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		res := source.GetRtt()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunDNSQueryTestResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		return uint32(0)
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		return ""
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return ([]string)(nil)
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return ([]*common.DNSQuery)(nil)
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return ([]*common.DNSResourceRecord)(nil)
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return ([]*common.DNSResourceRecord)(nil)
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return ([]*common.DNSResourceRecord)(nil)
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		return (*duration.Duration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) ClearValue(item *RunDNSQueryTestResponse) {
	if item != nil {
		switch fp.selector {
		case RunDNSQueryTestResponse_FieldPathSelectorId:
			item.Id = uint32(0)
		case RunDNSQueryTestResponse_FieldPathSelectorRcode:
			item.Rcode = ""
		case RunDNSQueryTestResponse_FieldPathSelectorFlags:
			item.Flags = nil
		case RunDNSQueryTestResponse_FieldPathSelectorQueries:
			item.Queries = nil
		case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
			item.Answers = nil
		case RunDNSQueryTestResponse_FieldPathSelectorNs:
			item.Ns = nil
		case RunDNSQueryTestResponse_FieldPathSelectorExtras:
			item.Extras = nil
		case RunDNSQueryTestResponse_FieldPathSelectorRtt:
			item.Rtt = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
		}
	}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunDNSQueryTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunDNSQueryTestResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunDNSQueryTestResponse_FieldPathSelectorId ||
		fp.selector == RunDNSQueryTestResponse_FieldPathSelectorRcode ||
		fp.selector == RunDNSQueryTestResponse_FieldPathSelectorFlags ||
		fp.selector == RunDNSQueryTestResponse_FieldPathSelectorRtt
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithIValue(value interface{}) RunDNSQueryTestResponse_FieldPathValue {
	switch fp.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(uint32)}
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.([]string)}
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.([]*common.DNSQuery)}
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.([]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.([]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.([]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		return &RunDNSQueryTestResponse_FieldTerminalPathValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestResponse_FieldPathArrayOfValues {
	fpaov := &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([]uint32)}
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([][]string)}
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([][]*common.DNSQuery)}
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([][]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([][]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([][]*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues{RunDNSQueryTestResponse_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(*common.DNSQuery)}
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(*common.DNSResourceRecord)}
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return &RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue{RunDNSQueryTestResponse_FieldTerminalPath: *fp, value: value.(*common.DNSResourceRecord)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunDNSQueryTestResponse_FieldSubPath struct {
	selector RunDNSQueryTestResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunDNSQueryTestResponse_FieldPath = (*RunDNSQueryTestResponse_FieldSubPath)(nil)

func (fps *RunDNSQueryTestResponse_FieldSubPath) Selector() RunDNSQueryTestResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunDNSQueryTestResponse_FieldSubPath) AsQueriesSubPath() (common.DNSQuery_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSQuery_FieldPath)
	return res, ok
}
func (fps *RunDNSQueryTestResponse_FieldSubPath) AsAnswersSubPath() (common.DNSResourceRecord_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSResourceRecord_FieldPath)
	return res, ok
}
func (fps *RunDNSQueryTestResponse_FieldSubPath) AsNsSubPath() (common.DNSResourceRecord_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSResourceRecord_FieldPath)
	return res, ok
}
func (fps *RunDNSQueryTestResponse_FieldSubPath) AsExtrasSubPath() (common.DNSResourceRecord_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSResourceRecord_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunDNSQueryTestResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunDNSQueryTestResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunDNSQueryTestResponse
func (fps *RunDNSQueryTestResponse_FieldSubPath) Get(source *RunDNSQueryTestResponse) (values []interface{}) {
	switch fps.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		for _, item := range source.GetQueries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		for _, item := range source.GetAnswers() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		for _, item := range source.GetNs() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		for _, item := range source.GetExtras() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fps.selector))
	}
	return
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunDNSQueryTestResponse))
}

// GetSingle returns value of selected field from source RunDNSQueryTestResponse
func (fps *RunDNSQueryTestResponse_FieldSubPath) GetSingle(source *RunDNSQueryTestResponse) (interface{}, bool) {
	switch fps.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		if len(source.GetQueries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQueries()[0])
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		if len(source.GetAnswers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAnswers()[0])
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		if len(source.GetNs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNs()[0])
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		if len(source.GetExtras()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExtras()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fps.selector))
	}
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunDNSQueryTestResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunDNSQueryTestResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) ClearValue(item *RunDNSQueryTestResponse) {
	if item != nil {
		switch fps.selector {
		case RunDNSQueryTestResponse_FieldPathSelectorQueries:
			for _, subItem := range item.Queries {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
			for _, subItem := range item.Answers {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorNs:
			for _, subItem := range item.Ns {
				fps.subPath.ClearValueRaw(subItem)
			}
		case RunDNSQueryTestResponse_FieldPathSelectorExtras:
			for _, subItem := range item.Extras {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fps.selector))
		}
	}
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunDNSQueryTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunDNSQueryTestResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunDNSQueryTestResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithIValue(value interface{}) RunDNSQueryTestResponse_FieldPathValue {
	return &RunDNSQueryTestResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestResponse_FieldPathArrayOfValues {
	return &RunDNSQueryTestResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestResponse_FieldPathArrayItemValue {
	return &RunDNSQueryTestResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunDNSQueryTestResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunDNSQueryTestResponse_FieldPathValue allows storing values for RunDNSQueryTestResponse fields according to their type
type RunDNSQueryTestResponse_FieldPathValue interface {
	RunDNSQueryTestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunDNSQueryTestResponse)
	CompareWith(*RunDNSQueryTestResponse) (cmp int, comparable bool)
}

func ParseRunDNSQueryTestResponse_FieldPathValue(pathStr, valueStr string) (RunDNSQueryTestResponse_FieldPathValue, error) {
	fp, err := ParseRunDNSQueryTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunDNSQueryTestResponse_FieldPathValue), nil
}

func MustParseRunDNSQueryTestResponse_FieldPathValue(pathStr, valueStr string) RunDNSQueryTestResponse_FieldPathValue {
	fpv, err := ParseRunDNSQueryTestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunDNSQueryTestResponse_FieldTerminalPathValue struct {
	RunDNSQueryTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestResponse_FieldPathValue = (*RunDNSQueryTestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunDNSQueryTestResponse' as interface{}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsIdValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsRcodeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsFlagsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsQueriesValue() ([]*common.DNSQuery, bool) {
	res, ok := fpv.value.([]*common.DNSQuery)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsAnswersValue() ([]*common.DNSResourceRecord, bool) {
	res, ok := fpv.value.([]*common.DNSResourceRecord)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsNsValue() ([]*common.DNSResourceRecord, bool) {
	res, ok := fpv.value.([]*common.DNSResourceRecord)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsExtrasValue() ([]*common.DNSResourceRecord, bool) {
	res, ok := fpv.value.([]*common.DNSResourceRecord)
	return res, ok
}
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) AsRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}

// SetTo stores value for selected field for object RunDNSQueryTestResponse
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) SetTo(target **RunDNSQueryTestResponse) {
	if *target == nil {
		*target = new(RunDNSQueryTestResponse)
	}
	switch fpv.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		(*target).Id = fpv.value.(uint32)
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		(*target).Rcode = fpv.value.(string)
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		(*target).Flags = fpv.value.([]string)
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		(*target).Queries = fpv.value.([]*common.DNSQuery)
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		(*target).Answers = fpv.value.([]*common.DNSResourceRecord)
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		(*target).Ns = fpv.value.([]*common.DNSResourceRecord)
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		(*target).Extras = fpv.value.([]*common.DNSResourceRecord)
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		(*target).Rtt = fpv.value.(*duration.Duration)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunDNSQueryTestResponse_FieldTerminalPathValue' with the value under path in 'RunDNSQueryTestResponse'.
func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) CompareWith(source *RunDNSQueryTestResponse) (int, bool) {
	switch fpv.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		leftValue := fpv.value.(string)
		rightValue := source.GetRcode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		return 0, false
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return 0, false
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return 0, false
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return 0, false
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return 0, false
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunDNSQueryTestResponse))
}

type RunDNSQueryTestResponse_FieldSubPathValue struct {
	RunDNSQueryTestResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunDNSQueryTestResponse_FieldPathValue = (*RunDNSQueryTestResponse_FieldSubPathValue)(nil)

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) AsQueriesPathValue() (common.DNSQuery_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSQuery_FieldPathValue)
	return res, ok
}
func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) AsAnswersPathValue() (common.DNSResourceRecord_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSResourceRecord_FieldPathValue)
	return res, ok
}
func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) AsNsPathValue() (common.DNSResourceRecord_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSResourceRecord_FieldPathValue)
	return res, ok
}
func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) AsExtrasPathValue() (common.DNSResourceRecord_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSResourceRecord_FieldPathValue)
	return res, ok
}

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) SetTo(target **RunDNSQueryTestResponse) {
	if *target == nil {
		*target = new(RunDNSQueryTestResponse)
	}
	switch fpvs.Selector() {
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		panic("FieldPath setter is unsupported for array subpaths")
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		panic("FieldPath setter is unsupported for array subpaths")
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		panic("FieldPath setter is unsupported for array subpaths")
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) CompareWith(source *RunDNSQueryTestResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return 0, false // repeated field
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return 0, false // repeated field
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return 0, false // repeated field
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunDNSQueryTestResponse))
}

// RunDNSQueryTestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RunDNSQueryTestResponse according to their type
// Present only for array (repeated) types.
type RunDNSQueryTestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunDNSQueryTestResponse_FieldPath
	ContainsValue(*RunDNSQueryTestResponse) bool
}

// ParseRunDNSQueryTestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunDNSQueryTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunDNSQueryTestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunDNSQueryTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunDNSQueryTestResponse_FieldPathArrayItemValue), nil
}

func MustParseRunDNSQueryTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunDNSQueryTestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunDNSQueryTestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue struct {
	RunDNSQueryTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestResponse_FieldPathArrayItemValue = (*RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunDNSQueryTestResponse as interface{}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) AsFlagsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) AsQueriesItemValue() (*common.DNSQuery, bool) {
	res, ok := fpaiv.value.(*common.DNSQuery)
	return res, ok
}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) AsAnswersItemValue() (*common.DNSResourceRecord, bool) {
	res, ok := fpaiv.value.(*common.DNSResourceRecord)
	return res, ok
}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) AsNsItemValue() (*common.DNSResourceRecord, bool) {
	res, ok := fpaiv.value.(*common.DNSResourceRecord)
	return res, ok
}
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) AsExtrasItemValue() (*common.DNSResourceRecord, bool) {
	res, ok := fpaiv.value.(*common.DNSResourceRecord)
	return res, ok
}

func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunDNSQueryTestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunDNSQueryTestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestResponse'
func (fpaiv *RunDNSQueryTestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunDNSQueryTestResponse) bool {
	slice := fpaiv.RunDNSQueryTestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunDNSQueryTestResponse_FieldSubPathArrayItemValue struct {
	RunDNSQueryTestResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) AsQueriesPathItemValue() (common.DNSQuery_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSQuery_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) AsAnswersPathItemValue() (common.DNSResourceRecord_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSResourceRecord_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) AsNsPathItemValue() (common.DNSResourceRecord_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSResourceRecord_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) AsExtrasPathItemValue() (common.DNSResourceRecord_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSResourceRecord_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestResponse'
func (fpaivs *RunDNSQueryTestResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunDNSQueryTestResponse) bool {
	switch fpaivs.Selector() {
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		return false // repeated/map field
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		return false // repeated/map field
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		return false // repeated/map field
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestResponse: %d", fpaivs.Selector()))
	}
}

// RunDNSQueryTestResponse_FieldPathArrayOfValues allows storing slice of values for RunDNSQueryTestResponse fields according to their type
type RunDNSQueryTestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunDNSQueryTestResponse_FieldPath
}

func ParseRunDNSQueryTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunDNSQueryTestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunDNSQueryTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunDNSQueryTestResponse_FieldPathArrayOfValues), nil
}

func MustParseRunDNSQueryTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunDNSQueryTestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunDNSQueryTestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues struct {
	RunDNSQueryTestResponse_FieldTerminalPath
	values interface{}
}

var _ RunDNSQueryTestResponse_FieldPathArrayOfValues = (*RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunDNSQueryTestResponse_FieldPathSelectorId:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorRcode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorFlags:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorQueries:
		for _, v := range fpaov.values.([][]*common.DNSQuery) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorAnswers:
		for _, v := range fpaov.values.([][]*common.DNSResourceRecord) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorNs:
		for _, v := range fpaov.values.([][]*common.DNSResourceRecord) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorExtras:
		for _, v := range fpaov.values.([][]*common.DNSResourceRecord) {
			values = append(values, v)
		}
	case RunDNSQueryTestResponse_FieldPathSelectorRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsRcodeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsFlagsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsQueriesArrayOfValues() ([][]*common.DNSQuery, bool) {
	res, ok := fpaov.values.([][]*common.DNSQuery)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsAnswersArrayOfValues() ([][]*common.DNSResourceRecord, bool) {
	res, ok := fpaov.values.([][]*common.DNSResourceRecord)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsNsArrayOfValues() ([][]*common.DNSResourceRecord, bool) {
	res, ok := fpaov.values.([][]*common.DNSResourceRecord)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsExtrasArrayOfValues() ([][]*common.DNSResourceRecord, bool) {
	res, ok := fpaov.values.([][]*common.DNSResourceRecord)
	return res, ok
}
func (fpaov *RunDNSQueryTestResponse_FieldTerminalPathArrayOfValues) AsRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}

type RunDNSQueryTestResponse_FieldSubPathArrayOfValues struct {
	RunDNSQueryTestResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunDNSQueryTestResponse_FieldPathArrayOfValues = (*RunDNSQueryTestResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunDNSQueryTestResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunDNSQueryTestResponse_FieldSubPathArrayOfValues) AsQueriesPathArrayOfValues() (common.DNSQuery_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSQuery_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RunDNSQueryTestResponse_FieldSubPathArrayOfValues) AsAnswersPathArrayOfValues() (common.DNSResourceRecord_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSResourceRecord_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RunDNSQueryTestResponse_FieldSubPathArrayOfValues) AsNsPathArrayOfValues() (common.DNSResourceRecord_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSResourceRecord_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *RunDNSQueryTestResponse_FieldSubPathArrayOfValues) AsExtrasPathArrayOfValues() (common.DNSResourceRecord_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSResourceRecord_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunDNSQueryTestRequestToProbe_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunDNSQueryTestRequestToProbe_FieldPathSelector
	Get(source *RunDNSQueryTestRequestToProbe) []interface{}
	GetSingle(source *RunDNSQueryTestRequestToProbe) (interface{}, bool)
	ClearValue(item *RunDNSQueryTestRequestToProbe)

	// Those methods build corresponding RunDNSQueryTestRequestToProbe_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathValue
	WithIArrayOfValues(values interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue
}

type RunDNSQueryTestRequestToProbe_FieldPathSelector int32

const (
	RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery              RunDNSQueryTestRequestToProbe_FieldPathSelector = 0
	RunDNSQueryTestRequestToProbe_FieldPathSelectorServer             RunDNSQueryTestRequestToProbe_FieldPathSelector = 1
	RunDNSQueryTestRequestToProbe_FieldPathSelectorPort               RunDNSQueryTestRequestToProbe_FieldPathSelector = 2
	RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp                RunDNSQueryTestRequestToProbe_FieldPathSelector = 3
	RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired RunDNSQueryTestRequestToProbe_FieldPathSelector = 4
	RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse            RunDNSQueryTestRequestToProbe_FieldPathSelector = 5
)

func (s RunDNSQueryTestRequestToProbe_FieldPathSelector) String() string {
	switch s {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return "query"
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		return "server"
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		return "port"
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		return "tcp"
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		return "no_recursion_desired"
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		return "reverse"
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", s))
	}
}

func BuildRunDNSQueryTestRequestToProbe_FieldPath(fp gotenobject.RawFieldPath) (RunDNSQueryTestRequestToProbe_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunDNSQueryTestRequestToProbe")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "query":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery}, nil
		case "server":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorServer}, nil
		case "port":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorPort}, nil
		case "tcp":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp}, nil
		case "no_recursion_desired", "noRecursionDesired", "no-recursion-desired":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired}, nil
		case "reverse":
			return &RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse}, nil
		}
	} else {
		switch fp[0] {
		case "query":
			if subpath, err := common.BuildDNSQuery_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunDNSQueryTestRequestToProbe_FieldSubPath{selector: RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunDNSQueryTestRequestToProbe", fp)
}

func ParseRunDNSQueryTestRequestToProbe_FieldPath(rawField string) (RunDNSQueryTestRequestToProbe_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunDNSQueryTestRequestToProbe_FieldPath(fp)
}

func MustParseRunDNSQueryTestRequestToProbe_FieldPath(rawField string) RunDNSQueryTestRequestToProbe_FieldPath {
	fp, err := ParseRunDNSQueryTestRequestToProbe_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunDNSQueryTestRequestToProbe_FieldTerminalPath struct {
	selector RunDNSQueryTestRequestToProbe_FieldPathSelector
}

var _ RunDNSQueryTestRequestToProbe_FieldPath = (*RunDNSQueryTestRequestToProbe_FieldTerminalPath)(nil)

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) Selector() RunDNSQueryTestRequestToProbe_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunDNSQueryTestRequestToProbe
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) Get(source *RunDNSQueryTestRequestToProbe) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
			if source.Query != nil {
				values = append(values, source.Query)
			}
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
			values = append(values, source.Server)
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
			values = append(values, source.Port)
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
			values = append(values, source.Tcp)
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
			values = append(values, source.NoRecursionDesired)
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
			values = append(values, source.Reverse)
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
		}
	}
	return
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunDNSQueryTestRequestToProbe))
}

// GetSingle returns value pointed by specific field of from source RunDNSQueryTestRequestToProbe
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) GetSingle(source *RunDNSQueryTestRequestToProbe) (interface{}, bool) {
	switch fp.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		res := source.GetQuery()
		return res, res != nil
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		return source.GetServer(), source != nil
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		return source.GetPort(), source != nil
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		return source.GetTcp(), source != nil
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		return source.GetNoRecursionDesired(), source != nil
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		return source.GetReverse(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunDNSQueryTestRequestToProbe))
}

// GetDefault returns a default value of the field type
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return (*common.DNSQuery)(nil)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		return ""
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		return uint32(0)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		return false
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		return false
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) ClearValue(item *RunDNSQueryTestRequestToProbe) {
	if item != nil {
		switch fp.selector {
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
			item.Query = nil
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
			item.Server = ""
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
			item.Port = uint32(0)
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
			item.Tcp = false
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
			item.NoRecursionDesired = false
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
			item.Reverse = false
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
		}
	}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunDNSQueryTestRequestToProbe))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunDNSQueryTestRequestToProbe_FieldPathSelectorServer ||
		fp.selector == RunDNSQueryTestRequestToProbe_FieldPathSelectorPort ||
		fp.selector == RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp ||
		fp.selector == RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired ||
		fp.selector == RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithIValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathValue {
	switch fp.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(*common.DNSQuery)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(string)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(uint32)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(bool)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(bool)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathValue{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues {
	fpaov := &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]*common.DNSQuery)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]string)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]uint32)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		return &RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues{RunDNSQueryTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunDNSQueryTestRequestToProbe_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunDNSQueryTestRequestToProbe_FieldSubPath struct {
	selector RunDNSQueryTestRequestToProbe_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunDNSQueryTestRequestToProbe_FieldPath = (*RunDNSQueryTestRequestToProbe_FieldSubPath)(nil)

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) Selector() RunDNSQueryTestRequestToProbe_FieldPathSelector {
	return fps.selector
}
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) AsQuerySubPath() (common.DNSQuery_FieldPath, bool) {
	res, ok := fps.subPath.(common.DNSQuery_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunDNSQueryTestRequestToProbe
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) Get(source *RunDNSQueryTestRequestToProbe) (values []interface{}) {
	switch fps.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		values = append(values, fps.subPath.GetRaw(source.GetQuery())...)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fps.selector))
	}
	return
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunDNSQueryTestRequestToProbe))
}

// GetSingle returns value of selected field from source RunDNSQueryTestRequestToProbe
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) GetSingle(source *RunDNSQueryTestRequestToProbe) (interface{}, bool) {
	switch fps.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		if source.GetQuery() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fps.selector))
	}
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunDNSQueryTestRequestToProbe))
}

// GetDefault returns a default value of the field type
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) ClearValue(item *RunDNSQueryTestRequestToProbe) {
	if item != nil {
		switch fps.selector {
		case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
			fps.subPath.ClearValueRaw(item.Query)
		default:
			panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fps.selector))
		}
	}
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunDNSQueryTestRequestToProbe))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunDNSQueryTestRequestToProbe_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithIValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathValue {
	return &RunDNSQueryTestRequestToProbe_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithIArrayOfValues(values interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues {
	return &RunDNSQueryTestRequestToProbe_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithIArrayItemValue(value interface{}) RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue {
	return &RunDNSQueryTestRequestToProbe_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunDNSQueryTestRequestToProbe_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunDNSQueryTestRequestToProbe_FieldPathValue allows storing values for RunDNSQueryTestRequestToProbe fields according to their type
type RunDNSQueryTestRequestToProbe_FieldPathValue interface {
	RunDNSQueryTestRequestToProbe_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunDNSQueryTestRequestToProbe)
	CompareWith(*RunDNSQueryTestRequestToProbe) (cmp int, comparable bool)
}

func ParseRunDNSQueryTestRequestToProbe_FieldPathValue(pathStr, valueStr string) (RunDNSQueryTestRequestToProbe_FieldPathValue, error) {
	fp, err := ParseRunDNSQueryTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequestToProbe field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunDNSQueryTestRequestToProbe_FieldPathValue), nil
}

func MustParseRunDNSQueryTestRequestToProbe_FieldPathValue(pathStr, valueStr string) RunDNSQueryTestRequestToProbe_FieldPathValue {
	fpv, err := ParseRunDNSQueryTestRequestToProbe_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunDNSQueryTestRequestToProbe_FieldTerminalPathValue struct {
	RunDNSQueryTestRequestToProbe_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestRequestToProbe_FieldPathValue = (*RunDNSQueryTestRequestToProbe_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunDNSQueryTestRequestToProbe' as interface{}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsQueryValue() (*common.DNSQuery, bool) {
	res, ok := fpv.value.(*common.DNSQuery)
	return res, ok
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsServerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsPortValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsTcpValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsNoRecursionDesiredValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) AsReverseValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object RunDNSQueryTestRequestToProbe
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) SetTo(target **RunDNSQueryTestRequestToProbe) {
	if *target == nil {
		*target = new(RunDNSQueryTestRequestToProbe)
	}
	switch fpv.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		(*target).Query = fpv.value.(*common.DNSQuery)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		(*target).Server = fpv.value.(string)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		(*target).Port = fpv.value.(uint32)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		(*target).Tcp = fpv.value.(bool)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		(*target).NoRecursionDesired = fpv.value.(bool)
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		(*target).Reverse = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestRequestToProbe)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunDNSQueryTestRequestToProbe_FieldTerminalPathValue' with the value under path in 'RunDNSQueryTestRequestToProbe'.
func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) CompareWith(source *RunDNSQueryTestRequestToProbe) (int, bool) {
	switch fpv.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return 0, false
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		leftValue := fpv.value.(string)
		rightValue := source.GetServer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		leftValue := fpv.value.(bool)
		rightValue := source.GetTcp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoRecursionDesired()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		leftValue := fpv.value.(bool)
		rightValue := source.GetReverse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fpv.selector))
	}
}

func (fpv *RunDNSQueryTestRequestToProbe_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunDNSQueryTestRequestToProbe))
}

type RunDNSQueryTestRequestToProbe_FieldSubPathValue struct {
	RunDNSQueryTestRequestToProbe_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunDNSQueryTestRequestToProbe_FieldPathValue = (*RunDNSQueryTestRequestToProbe_FieldSubPathValue)(nil)

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) AsQueryPathValue() (common.DNSQuery_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.DNSQuery_FieldPathValue)
	return res, ok
}

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) SetTo(target **RunDNSQueryTestRequestToProbe) {
	if *target == nil {
		*target = new(RunDNSQueryTestRequestToProbe)
	}
	switch fpvs.Selector() {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		fpvs.subPathValue.(common.DNSQuery_FieldPathValue).SetTo(&(*target).Query)
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunDNSQueryTestRequestToProbe)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) CompareWith(source *RunDNSQueryTestRequestToProbe) (int, bool) {
	switch fpvs.Selector() {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return fpvs.subPathValue.(common.DNSQuery_FieldPathValue).CompareWith(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fpvs.Selector()))
	}
}

func (fpvs *RunDNSQueryTestRequestToProbe_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunDNSQueryTestRequestToProbe))
}

// RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue allows storing single item in Path-specific values for RunDNSQueryTestRequestToProbe according to their type
// Present only for array (repeated) types.
type RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunDNSQueryTestRequestToProbe_FieldPath
	ContainsValue(*RunDNSQueryTestRequestToProbe) bool
}

// ParseRunDNSQueryTestRequestToProbe_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunDNSQueryTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr string) (RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue, error) {
	fp, err := ParseRunDNSQueryTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequestToProbe field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue), nil
}

func MustParseRunDNSQueryTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr string) RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue {
	fpaiv, err := ParseRunDNSQueryTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue struct {
	RunDNSQueryTestRequestToProbe_FieldTerminalPath
	value interface{}
}

var _ RunDNSQueryTestRequestToProbe_FieldPathArrayItemValue = (*RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunDNSQueryTestRequestToProbe as interface{}
func (fpaiv *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue) GetSingle(source *RunDNSQueryTestRequestToProbe) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunDNSQueryTestRequestToProbe))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestRequestToProbe'
func (fpaiv *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayItemValue) ContainsValue(source *RunDNSQueryTestRequestToProbe) bool {
	slice := fpaiv.RunDNSQueryTestRequestToProbe_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunDNSQueryTestRequestToProbe_FieldSubPathArrayItemValue struct {
	RunDNSQueryTestRequestToProbe_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunDNSQueryTestRequestToProbe_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunDNSQueryTestRequestToProbe_FieldSubPathArrayItemValue) AsQueryPathItemValue() (common.DNSQuery_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.DNSQuery_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunDNSQueryTestRequestToProbe'
func (fpaivs *RunDNSQueryTestRequestToProbe_FieldSubPathArrayItemValue) ContainsValue(source *RunDNSQueryTestRequestToProbe) bool {
	switch fpaivs.Selector() {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		return fpaivs.subPathItemValue.(common.DNSQuery_FieldPathArrayItemValue).ContainsValue(source.GetQuery())
	default:
		panic(fmt.Sprintf("Invalid selector for RunDNSQueryTestRequestToProbe: %d", fpaivs.Selector()))
	}
}

// RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues allows storing slice of values for RunDNSQueryTestRequestToProbe fields according to their type
type RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunDNSQueryTestRequestToProbe_FieldPath
}

func ParseRunDNSQueryTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr string) (RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues, error) {
	fp, err := ParseRunDNSQueryTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunDNSQueryTestRequestToProbe field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues), nil
}

func MustParseRunDNSQueryTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr string) RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues {
	fpaov, err := ParseRunDNSQueryTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues struct {
	RunDNSQueryTestRequestToProbe_FieldTerminalPath
	values interface{}
}

var _ RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues = (*RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorQuery:
		for _, v := range fpaov.values.([]*common.DNSQuery) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorServer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorPort:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorTcp:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorNoRecursionDesired:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunDNSQueryTestRequestToProbe_FieldPathSelectorReverse:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsQueryArrayOfValues() ([]*common.DNSQuery, bool) {
	res, ok := fpaov.values.([]*common.DNSQuery)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsServerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsPortArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsTcpArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsNoRecursionDesiredArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunDNSQueryTestRequestToProbe_FieldTerminalPathArrayOfValues) AsReverseArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type RunDNSQueryTestRequestToProbe_FieldSubPathArrayOfValues struct {
	RunDNSQueryTestRequestToProbe_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunDNSQueryTestRequestToProbe_FieldPathArrayOfValues = (*RunDNSQueryTestRequestToProbe_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunDNSQueryTestRequestToProbe_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunDNSQueryTestRequestToProbe_FieldSubPathArrayOfValues) AsQueryPathArrayOfValues() (common.DNSQuery_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.DNSQuery_FieldPathArrayOfValues)
	return res, ok
}
