// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/dns_query_test_custom.proto
// DO NOT EDIT!!!

package dns_query_test_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [RunDNSQueryTest][ntt.watchdog.v1alpha2.RunDNSQueryTest]
type RunDNSQueryTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	Name *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Query
	//
	// If unspecified,
	// (name, qtype, qclass) = (".", A, IN) will be used by default
	Query *common.DNSQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty" firestore:"query"`
	// Name server's address
	//
	// If unspecified, the agent will pick the dns server configured on the
	// device. On Linux and Mac, typically this is a local resolver. On windows, a
	// DNS server is picked from the list of configured dns servers. If fetching
	// the configured server fails, fall back to choose 8.8.8.8
	Server string `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty" firestore:"server"`
	// Name server's port number
	//
	// If unspecified, default DNS server port 53 is used
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty" firestore:"port"`
	// Whether use TCP or UDP to send DNS query
	//
	// If unspecified, agent will use UDP
	Tcp bool `protobuf:"varint,5,opt,name=tcp,proto3" json:"tcp,omitempty" firestore:"tcp"`
	// Whether skip recursion desired option to send DNS query
	//
	// If unspecified, agent will set the option
	NoRecursionDesired bool `protobuf:"varint,6,opt,name=no_recursion_desired,json=noRecursionDesired,proto3" json:"no_recursion_desired,omitempty" firestore:"noRecursionDesired"`
	// Whether reverse the DNS query
	//
	// If unspecified, agent will skip the option
	//
	// Specifying true means
	// - overwrite the qestion's class to PTR
	// - and make the query's name reversed (eg. 8.8.4.4
	// to 4.4.8.8.in-addr.arpa.)
	Reverse bool `protobuf:"varint,7,opt,name=reverse,proto3" json:"reverse,omitempty" firestore:"reverse"`
	// Default is Text format similar to dig command. Json is for internal use
	// only
	OutputFormat common.OnDemandTestResponseFormat `protobuf:"varint,8,opt,name=output_format,json=outputFormat,proto3,enum=ntt.watchdog.v1alpha2.OnDemandTestResponseFormat" json:"output_format,omitempty" firestore:"outputFormat"`
}

func (m *RunDNSQueryTestRequest) Reset() {
	*m = RunDNSQueryTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunDNSQueryTestRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunDNSQueryTestRequest) ProtoMessage() {}

func (m *RunDNSQueryTestRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunDNSQueryTestRequest) GotenMessage() {}

// Deprecated, Use RunDNSQueryTestRequest.ProtoReflect.Descriptor instead.
func (*RunDNSQueryTestRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescGZIP(), []int{0}
}

func (m *RunDNSQueryTestRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunDNSQueryTestRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunDNSQueryTestRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunDNSQueryTestRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunDNSQueryTestRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RunDNSQueryTestRequest) GetQuery() *common.DNSQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RunDNSQueryTestRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *RunDNSQueryTestRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return uint32(0)
}

func (m *RunDNSQueryTestRequest) GetTcp() bool {
	if m != nil {
		return m.Tcp
	}
	return false
}

func (m *RunDNSQueryTestRequest) GetNoRecursionDesired() bool {
	if m != nil {
		return m.NoRecursionDesired
	}
	return false
}

func (m *RunDNSQueryTestRequest) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *RunDNSQueryTestRequest) GetOutputFormat() common.OnDemandTestResponseFormat {
	if m != nil {
		return m.OutputFormat
	}
	return common.OnDemandTestResponseFormat_TEXT
}

func (m *RunDNSQueryTestRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "RunDNSQueryTestRequest"))
	}
	m.Name = fv
}

func (m *RunDNSQueryTestRequest) SetQuery(fv *common.DNSQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "RunDNSQueryTestRequest"))
	}
	m.Query = fv
}

func (m *RunDNSQueryTestRequest) SetServer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Server", "RunDNSQueryTestRequest"))
	}
	m.Server = fv
}

func (m *RunDNSQueryTestRequest) SetPort(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Port", "RunDNSQueryTestRequest"))
	}
	m.Port = fv
}

func (m *RunDNSQueryTestRequest) SetTcp(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tcp", "RunDNSQueryTestRequest"))
	}
	m.Tcp = fv
}

func (m *RunDNSQueryTestRequest) SetNoRecursionDesired(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoRecursionDesired", "RunDNSQueryTestRequest"))
	}
	m.NoRecursionDesired = fv
}

func (m *RunDNSQueryTestRequest) SetReverse(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reverse", "RunDNSQueryTestRequest"))
	}
	m.Reverse = fv
}

func (m *RunDNSQueryTestRequest) SetOutputFormat(fv common.OnDemandTestResponseFormat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OutputFormat", "RunDNSQueryTestRequest"))
	}
	m.OutputFormat = fv
}

// Response message for method
// [RunDNSQueryTest][ntt.watchdog.v1alpha2.RunDNSQueryTest]
type RunDNSQueryTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Json format is not preferred for the ondemand tests
	JsonResponse *RunDNSQueryTestResponse_JsonResponse `protobuf:"bytes,1,opt,name=json_response,json=jsonResponse,proto3" json:"json_response,omitempty" firestore:"jsonResponse"`
	// Console type text response
	TextResponse string `protobuf:"bytes,2,opt,name=text_response,json=textResponse,proto3" json:"text_response,omitempty" firestore:"textResponse"`
}

func (m *RunDNSQueryTestResponse) Reset() {
	*m = RunDNSQueryTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunDNSQueryTestResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunDNSQueryTestResponse) ProtoMessage() {}

func (m *RunDNSQueryTestResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunDNSQueryTestResponse) GotenMessage() {}

// Deprecated, Use RunDNSQueryTestResponse.ProtoReflect.Descriptor instead.
func (*RunDNSQueryTestResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescGZIP(), []int{1}
}

func (m *RunDNSQueryTestResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunDNSQueryTestResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunDNSQueryTestResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunDNSQueryTestResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunDNSQueryTestResponse) GetJsonResponse() *RunDNSQueryTestResponse_JsonResponse {
	if m != nil {
		return m.JsonResponse
	}
	return nil
}

func (m *RunDNSQueryTestResponse) GetTextResponse() string {
	if m != nil {
		return m.TextResponse
	}
	return ""
}

func (m *RunDNSQueryTestResponse) SetJsonResponse(fv *RunDNSQueryTestResponse_JsonResponse) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "JsonResponse", "RunDNSQueryTestResponse"))
	}
	m.JsonResponse = fv
}

func (m *RunDNSQueryTestResponse) SetTextResponse(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TextResponse", "RunDNSQueryTestResponse"))
	}
	m.TextResponse = fv
}

type RunDNSQueryTestResponse_JsonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Message identifier
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	// Message respoonse code
	// The notifion would follow
	// https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
	Rcode string `protobuf:"bytes,2,opt,name=rcode,proto3" json:"rcode,omitempty" firestore:"rcode"`
	// Flags in the message
	// A list of elements are as follows
	// qr: Query Response
	// aa: Authoritative Answer
	// tc: Truncated Response
	// rd: Recursion Desired
	// ra: Recursion Available
	//  z: Zero
	// ad: Authentic Data
	// cd: Checking Disabled
	Flags []string `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty" firestore:"flags"`
	// Query section
	Queries []*common.DNSQuery `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty" firestore:"queries"`
	// Answer section
	Answers []*common.DNSResourceRecord `protobuf:"bytes,5,rep,name=answers,proto3" json:"answers,omitempty" firestore:"answers"`
	// Authority section
	Ns []*common.DNSResourceRecord `protobuf:"bytes,6,rep,name=ns,proto3" json:"ns,omitempty" firestore:"ns"`
	// Additional section
	Extras []*common.DNSResourceRecord `protobuf:"bytes,7,rep,name=extras,proto3" json:"extras,omitempty" firestore:"extras"`
	// Total time taken to send the Query and receive response
	Rtt *duration.Duration `protobuf:"bytes,8,opt,name=rtt,proto3" json:"rtt,omitempty" firestore:"rtt"`
}

func (m *RunDNSQueryTestResponse_JsonResponse) Reset() {
	*m = RunDNSQueryTestResponse_JsonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunDNSQueryTestResponse_JsonResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunDNSQueryTestResponse_JsonResponse) ProtoMessage() {}

func (m *RunDNSQueryTestResponse_JsonResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunDNSQueryTestResponse_JsonResponse) GotenMessage() {}

// Deprecated, Use RunDNSQueryTestResponse_JsonResponse.ProtoReflect.Descriptor instead.
func (*RunDNSQueryTestResponse_JsonResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *RunDNSQueryTestResponse_JsonResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunDNSQueryTestResponse_JsonResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunDNSQueryTestResponse_JsonResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunDNSQueryTestResponse_JsonResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return uint32(0)
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetRcode() string {
	if m != nil {
		return m.Rcode
	}
	return ""
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetQueries() []*common.DNSQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetAnswers() []*common.DNSResourceRecord {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetNs() []*common.DNSResourceRecord {
	if m != nil {
		return m.Ns
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetExtras() []*common.DNSResourceRecord {
	if m != nil {
		return m.Extras
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) GetRtt() *duration.Duration {
	if m != nil {
		return m.Rtt
	}
	return nil
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetId(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Id = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetRcode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rcode", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Rcode = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetFlags(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Flags", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Flags = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetQueries(fv []*common.DNSQuery) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Queries", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Queries = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetAnswers(fv []*common.DNSResourceRecord) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Answers", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Answers = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetNs(fv []*common.DNSResourceRecord) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ns", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Ns = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetExtras(fv []*common.DNSResourceRecord) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Extras", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Extras = fv
}

func (m *RunDNSQueryTestResponse_JsonResponse) SetRtt(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rtt", "RunDNSQueryTestResponse_JsonResponse"))
	}
	m.Rtt = fv
}

var watchdog_proto_v1alpha2_dns_query_test_custom_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDesc = []byte{
	0x0a, 0x33, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xea, 0x02, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x10, 0xc2,
	0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x95, 0x04, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x4e,
	0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0xf2, 0x02, 0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x39, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x38,
	0x0a, 0x02, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x02, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x74,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x72, 0x74, 0x74, 0x42, 0xd9, 0x01, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x17, 0x44, 0x4e,
	0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x3b, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescData = watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDesc
)

func watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDescData
}

var watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var watchdog_proto_v1alpha2_dns_query_test_custom_proto_goTypes = []interface{}{
	(*RunDNSQueryTestRequest)(nil),               // 0: ntt.watchdog.v1alpha2.RunDNSQueryTestRequest
	(*RunDNSQueryTestResponse)(nil),              // 1: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse
	(*RunDNSQueryTestResponse_JsonResponse)(nil), // 2: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse
	(*common.DNSQuery)(nil),                      // 3: ntt.watchdog.v1alpha2.DNSQuery
	(common.OnDemandTestResponseFormat)(0),       // 4: ntt.watchdog.v1alpha2.OnDemandTestResponseFormat
	(*common.DNSResourceRecord)(nil),             // 5: ntt.watchdog.v1alpha2.DNSResourceRecord
	(*duration.Duration)(nil),                    // 6: google.protobuf.Duration
}
var watchdog_proto_v1alpha2_dns_query_test_custom_proto_depIdxs = []int32{
	3, // 0: ntt.watchdog.v1alpha2.RunDNSQueryTestRequest.query:type_name -> ntt.watchdog.v1alpha2.DNSQuery
	4, // 1: ntt.watchdog.v1alpha2.RunDNSQueryTestRequest.output_format:type_name -> ntt.watchdog.v1alpha2.OnDemandTestResponseFormat
	2, // 2: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.json_response:type_name -> ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse
	3, // 3: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse.queries:type_name -> ntt.watchdog.v1alpha2.DNSQuery
	5, // 4: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse.answers:type_name -> ntt.watchdog.v1alpha2.DNSResourceRecord
	5, // 5: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse.ns:type_name -> ntt.watchdog.v1alpha2.DNSResourceRecord
	5, // 6: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse.extras:type_name -> ntt.watchdog.v1alpha2.DNSResourceRecord
	6, // 7: ntt.watchdog.v1alpha2.RunDNSQueryTestResponse.JsonResponse.rtt:type_name -> google.protobuf.Duration
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_dns_query_test_custom_proto_init() }
func watchdog_proto_v1alpha2_dns_query_test_custom_proto_init() {
	if watchdog_proto_v1alpha2_dns_query_test_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDNSQueryTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDNSQueryTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDNSQueryTestResponse_JsonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_dns_query_test_custom_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_dns_query_test_custom_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_dns_query_test_custom_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_dns_query_test_custom_proto = out.File
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_rawDesc = nil
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_goTypes = nil
	watchdog_proto_v1alpha2_dns_query_test_custom_proto_depIdxs = nil
}
