// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/internet_quality_rating_service.proto
// DO NOT EDIT!!!

package internet_quality_rating_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	internet_quality_rating "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/internet_quality_rating"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &internet_quality_rating.InternetQualityRating{}
	_ = &probe.Probe{}
)

func (o *GetInternetQualityRatingRequest) GotenObjectExt() {}

func (o *GetInternetQualityRatingRequest) MakeFullFieldMask() *GetInternetQualityRatingRequest_FieldMask {
	return FullGetInternetQualityRatingRequest_FieldMask()
}

func (o *GetInternetQualityRatingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetInternetQualityRatingRequest_FieldMask()
}

func (o *GetInternetQualityRatingRequest) MakeDiffFieldMask(other *GetInternetQualityRatingRequest) *GetInternetQualityRatingRequest_FieldMask {
	if o == nil && other == nil {
		return &GetInternetQualityRatingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetInternetQualityRatingRequest_FieldMask()
	}

	res := &GetInternetQualityRatingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetInternetQualityRatingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetInternetQualityRatingRequest))
}

func (o *GetInternetQualityRatingRequest) Clone() *GetInternetQualityRatingRequest {
	if o == nil {
		return nil
	}
	result := &GetInternetQualityRatingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &internet_quality_rating.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.View = o.View
	return result
}

func (o *GetInternetQualityRatingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetInternetQualityRatingRequest) Merge(source *GetInternetQualityRatingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &internet_quality_rating.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetInternetQualityRatingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetInternetQualityRatingRequest))
}

func (o *BatchGetInternetQualityRatingsRequest) GotenObjectExt() {}

func (o *BatchGetInternetQualityRatingsRequest) MakeFullFieldMask() *BatchGetInternetQualityRatingsRequest_FieldMask {
	return FullBatchGetInternetQualityRatingsRequest_FieldMask()
}

func (o *BatchGetInternetQualityRatingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetInternetQualityRatingsRequest_FieldMask()
}

func (o *BatchGetInternetQualityRatingsRequest) MakeDiffFieldMask(other *BatchGetInternetQualityRatingsRequest) *BatchGetInternetQualityRatingsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetInternetQualityRatingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetInternetQualityRatingsRequest_FieldMask()
	}

	res := &BatchGetInternetQualityRatingsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetInternetQualityRatingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetInternetQualityRatingsRequest))
}

func (o *BatchGetInternetQualityRatingsRequest) Clone() *BatchGetInternetQualityRatingsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetInternetQualityRatingsRequest{}
	result.Names = make([]*internet_quality_rating.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &internet_quality_rating.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetInternetQualityRatingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetInternetQualityRatingsRequest) Merge(source *BatchGetInternetQualityRatingsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *internet_quality_rating.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &internet_quality_rating.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetInternetQualityRatingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetInternetQualityRatingsRequest))
}

func (o *BatchGetInternetQualityRatingsResponse) GotenObjectExt() {}

func (o *BatchGetInternetQualityRatingsResponse) MakeFullFieldMask() *BatchGetInternetQualityRatingsResponse_FieldMask {
	return FullBatchGetInternetQualityRatingsResponse_FieldMask()
}

func (o *BatchGetInternetQualityRatingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetInternetQualityRatingsResponse_FieldMask()
}

func (o *BatchGetInternetQualityRatingsResponse) MakeDiffFieldMask(other *BatchGetInternetQualityRatingsResponse) *BatchGetInternetQualityRatingsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetInternetQualityRatingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetInternetQualityRatingsResponse_FieldMask()
	}

	res := &BatchGetInternetQualityRatingsResponse_FieldMask{}

	if len(o.GetInternetQualityRatings()) == len(other.GetInternetQualityRatings()) {
		for i, lValue := range o.GetInternetQualityRatings() {
			rValue := other.GetInternetQualityRatings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetInternetQualityRatingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetInternetQualityRatingsResponse))
}

func (o *BatchGetInternetQualityRatingsResponse) Clone() *BatchGetInternetQualityRatingsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetInternetQualityRatingsResponse{}
	result.InternetQualityRatings = make([]*internet_quality_rating.InternetQualityRating, len(o.InternetQualityRatings))
	for i, sourceValue := range o.InternetQualityRatings {
		result.InternetQualityRatings[i] = sourceValue.Clone()
	}
	result.Missing = make([]*internet_quality_rating.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &internet_quality_rating.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetInternetQualityRatingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetInternetQualityRatingsResponse) Merge(source *BatchGetInternetQualityRatingsResponse) {
	for _, sourceValue := range source.GetInternetQualityRatings() {
		exists := false
		for _, currentValue := range o.InternetQualityRatings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *internet_quality_rating.InternetQualityRating
			if sourceValue != nil {
				newDstElement = new(internet_quality_rating.InternetQualityRating)
				newDstElement.Merge(sourceValue)
			}
			o.InternetQualityRatings = append(o.InternetQualityRatings, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *internet_quality_rating.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &internet_quality_rating.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetInternetQualityRatingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetInternetQualityRatingsResponse))
}

func (o *ListInternetQualityRatingsRequest) GotenObjectExt() {}

func (o *ListInternetQualityRatingsRequest) MakeFullFieldMask() *ListInternetQualityRatingsRequest_FieldMask {
	return FullListInternetQualityRatingsRequest_FieldMask()
}

func (o *ListInternetQualityRatingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListInternetQualityRatingsRequest_FieldMask()
}

func (o *ListInternetQualityRatingsRequest) MakeDiffFieldMask(other *ListInternetQualityRatingsRequest) *ListInternetQualityRatingsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListInternetQualityRatingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListInternetQualityRatingsRequest_FieldMask()
	}

	res := &ListInternetQualityRatingsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListInternetQualityRatingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListInternetQualityRatingsRequest))
}

func (o *ListInternetQualityRatingsRequest) Clone() *ListInternetQualityRatingsRequest {
	if o == nil {
		return nil
	}
	result := &ListInternetQualityRatingsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &internet_quality_rating.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &internet_quality_rating.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &internet_quality_rating.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &internet_quality_rating.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.View = o.View
	return result
}

func (o *ListInternetQualityRatingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListInternetQualityRatingsRequest) Merge(source *ListInternetQualityRatingsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &internet_quality_rating.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &internet_quality_rating.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &internet_quality_rating.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &internet_quality_rating.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListInternetQualityRatingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListInternetQualityRatingsRequest))
}

func (o *ListInternetQualityRatingsResponse) GotenObjectExt() {}

func (o *ListInternetQualityRatingsResponse) MakeFullFieldMask() *ListInternetQualityRatingsResponse_FieldMask {
	return FullListInternetQualityRatingsResponse_FieldMask()
}

func (o *ListInternetQualityRatingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListInternetQualityRatingsResponse_FieldMask()
}

func (o *ListInternetQualityRatingsResponse) MakeDiffFieldMask(other *ListInternetQualityRatingsResponse) *ListInternetQualityRatingsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListInternetQualityRatingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListInternetQualityRatingsResponse_FieldMask()
	}

	res := &ListInternetQualityRatingsResponse_FieldMask{}

	if len(o.GetInternetQualityRatings()) == len(other.GetInternetQualityRatings()) {
		for i, lValue := range o.GetInternetQualityRatings() {
			rValue := other.GetInternetQualityRatings()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListInternetQualityRatingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListInternetQualityRatingsResponse))
}

func (o *ListInternetQualityRatingsResponse) Clone() *ListInternetQualityRatingsResponse {
	if o == nil {
		return nil
	}
	result := &ListInternetQualityRatingsResponse{}
	result.InternetQualityRatings = make([]*internet_quality_rating.InternetQualityRating, len(o.InternetQualityRatings))
	for i, sourceValue := range o.InternetQualityRatings {
		result.InternetQualityRatings[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &internet_quality_rating.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &internet_quality_rating.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListInternetQualityRatingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListInternetQualityRatingsResponse) Merge(source *ListInternetQualityRatingsResponse) {
	for _, sourceValue := range source.GetInternetQualityRatings() {
		exists := false
		for _, currentValue := range o.InternetQualityRatings {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *internet_quality_rating.InternetQualityRating
			if sourceValue != nil {
				newDstElement = new(internet_quality_rating.InternetQualityRating)
				newDstElement.Merge(sourceValue)
			}
			o.InternetQualityRatings = append(o.InternetQualityRatings, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &internet_quality_rating.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &internet_quality_rating.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListInternetQualityRatingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListInternetQualityRatingsResponse))
}

func (o *WatchInternetQualityRatingRequest) GotenObjectExt() {}

func (o *WatchInternetQualityRatingRequest) MakeFullFieldMask() *WatchInternetQualityRatingRequest_FieldMask {
	return FullWatchInternetQualityRatingRequest_FieldMask()
}

func (o *WatchInternetQualityRatingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchInternetQualityRatingRequest_FieldMask()
}

func (o *WatchInternetQualityRatingRequest) MakeDiffFieldMask(other *WatchInternetQualityRatingRequest) *WatchInternetQualityRatingRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchInternetQualityRatingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchInternetQualityRatingRequest_FieldMask()
	}

	res := &WatchInternetQualityRatingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchInternetQualityRatingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchInternetQualityRatingRequest))
}

func (o *WatchInternetQualityRatingRequest) Clone() *WatchInternetQualityRatingRequest {
	if o == nil {
		return nil
	}
	result := &WatchInternetQualityRatingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &internet_quality_rating.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchInternetQualityRatingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchInternetQualityRatingRequest) Merge(source *WatchInternetQualityRatingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &internet_quality_rating.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchInternetQualityRatingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchInternetQualityRatingRequest))
}

func (o *WatchInternetQualityRatingResponse) GotenObjectExt() {}

func (o *WatchInternetQualityRatingResponse) MakeFullFieldMask() *WatchInternetQualityRatingResponse_FieldMask {
	return FullWatchInternetQualityRatingResponse_FieldMask()
}

func (o *WatchInternetQualityRatingResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchInternetQualityRatingResponse_FieldMask()
}

func (o *WatchInternetQualityRatingResponse) MakeDiffFieldMask(other *WatchInternetQualityRatingResponse) *WatchInternetQualityRatingResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchInternetQualityRatingResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchInternetQualityRatingResponse_FieldMask()
	}

	res := &WatchInternetQualityRatingResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingResponse_FieldTerminalPath{selector: WatchInternetQualityRatingResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchInternetQualityRatingResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchInternetQualityRatingResponse))
}

func (o *WatchInternetQualityRatingResponse) Clone() *WatchInternetQualityRatingResponse {
	if o == nil {
		return nil
	}
	result := &WatchInternetQualityRatingResponse{}
	result.Change = proto.Clone(o.Change).(*internet_quality_rating.InternetQualityRatingChange)
	return result
}

func (o *WatchInternetQualityRatingResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchInternetQualityRatingResponse) Merge(source *WatchInternetQualityRatingResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(internet_quality_rating.InternetQualityRatingChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchInternetQualityRatingResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchInternetQualityRatingResponse))
}

func (o *WatchInternetQualityRatingsRequest) GotenObjectExt() {}

func (o *WatchInternetQualityRatingsRequest) MakeFullFieldMask() *WatchInternetQualityRatingsRequest_FieldMask {
	return FullWatchInternetQualityRatingsRequest_FieldMask()
}

func (o *WatchInternetQualityRatingsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchInternetQualityRatingsRequest_FieldMask()
}

func (o *WatchInternetQualityRatingsRequest) MakeDiffFieldMask(other *WatchInternetQualityRatingsRequest) *WatchInternetQualityRatingsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchInternetQualityRatingsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchInternetQualityRatingsRequest_FieldMask()
	}

	res := &WatchInternetQualityRatingsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchInternetQualityRatingsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchInternetQualityRatingsRequest))
}

func (o *WatchInternetQualityRatingsRequest) Clone() *WatchInternetQualityRatingsRequest {
	if o == nil {
		return nil
	}
	result := &WatchInternetQualityRatingsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &internet_quality_rating.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &internet_quality_rating.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &internet_quality_rating.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &internet_quality_rating.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchInternetQualityRatingsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchInternetQualityRatingsRequest) Merge(source *WatchInternetQualityRatingsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &internet_quality_rating.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &internet_quality_rating.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &internet_quality_rating.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &internet_quality_rating.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchInternetQualityRatingsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchInternetQualityRatingsRequest))
}

func (o *WatchInternetQualityRatingsResponse) GotenObjectExt() {}

func (o *WatchInternetQualityRatingsResponse) MakeFullFieldMask() *WatchInternetQualityRatingsResponse_FieldMask {
	return FullWatchInternetQualityRatingsResponse_FieldMask()
}

func (o *WatchInternetQualityRatingsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchInternetQualityRatingsResponse_FieldMask()
}

func (o *WatchInternetQualityRatingsResponse) MakeDiffFieldMask(other *WatchInternetQualityRatingsResponse) *WatchInternetQualityRatingsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchInternetQualityRatingsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchInternetQualityRatingsResponse_FieldMask()
	}

	res := &WatchInternetQualityRatingsResponse_FieldMask{}

	if len(o.GetInternetQualityRatingChanges()) == len(other.GetInternetQualityRatingChanges()) {
		for i, lValue := range o.GetInternetQualityRatingChanges() {
			rValue := other.GetInternetQualityRatingChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldSubPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchInternetQualityRatingsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchInternetQualityRatingsResponse))
}

func (o *WatchInternetQualityRatingsResponse) Clone() *WatchInternetQualityRatingsResponse {
	if o == nil {
		return nil
	}
	result := &WatchInternetQualityRatingsResponse{}
	result.InternetQualityRatingChanges = make([]*internet_quality_rating.InternetQualityRatingChange, len(o.InternetQualityRatingChanges))
	for i, sourceValue := range o.InternetQualityRatingChanges {
		result.InternetQualityRatingChanges[i] = proto.Clone(sourceValue).(*internet_quality_rating.InternetQualityRatingChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchInternetQualityRatingsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchInternetQualityRatingsResponse) Merge(source *WatchInternetQualityRatingsResponse) {
	for _, sourceValue := range source.GetInternetQualityRatingChanges() {
		exists := false
		for _, currentValue := range o.InternetQualityRatingChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *internet_quality_rating.InternetQualityRatingChange
			if sourceValue != nil {
				newDstElement = new(internet_quality_rating.InternetQualityRatingChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.InternetQualityRatingChanges = append(o.InternetQualityRatingChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchInternetQualityRatingsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchInternetQualityRatingsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchInternetQualityRatingsResponse))
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) MakeFullFieldMask() *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask {
	return FullWatchInternetQualityRatingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchInternetQualityRatingsResponse_PageTokenChange_FieldMask()
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchInternetQualityRatingsResponse_PageTokenChange) *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchInternetQualityRatingsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) Clone() *WatchInternetQualityRatingsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchInternetQualityRatingsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &internet_quality_rating.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &internet_quality_rating.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) Merge(source *WatchInternetQualityRatingsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &internet_quality_rating.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &internet_quality_rating.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchInternetQualityRatingsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

func (o *CreateInternetQualityRatingRequest) GotenObjectExt() {}

func (o *CreateInternetQualityRatingRequest) MakeFullFieldMask() *CreateInternetQualityRatingRequest_FieldMask {
	return FullCreateInternetQualityRatingRequest_FieldMask()
}

func (o *CreateInternetQualityRatingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateInternetQualityRatingRequest_FieldMask()
}

func (o *CreateInternetQualityRatingRequest) MakeDiffFieldMask(other *CreateInternetQualityRatingRequest) *CreateInternetQualityRatingRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateInternetQualityRatingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateInternetQualityRatingRequest_FieldMask()
	}

	res := &CreateInternetQualityRatingRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetInternetQualityRating().MakeDiffFieldMask(other.GetInternetQualityRating())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateInternetQualityRatingRequest_FieldSubPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateInternetQualityRatingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateInternetQualityRatingRequest))
}

func (o *CreateInternetQualityRatingRequest) Clone() *CreateInternetQualityRatingRequest {
	if o == nil {
		return nil
	}
	result := &CreateInternetQualityRatingRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &internet_quality_rating.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.InternetQualityRating = o.InternetQualityRating.Clone()
	return result
}

func (o *CreateInternetQualityRatingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateInternetQualityRatingRequest) Merge(source *CreateInternetQualityRatingRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &internet_quality_rating.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetInternetQualityRating() != nil {
		if o.InternetQualityRating == nil {
			o.InternetQualityRating = new(internet_quality_rating.InternetQualityRating)
		}
		o.InternetQualityRating.Merge(source.GetInternetQualityRating())
	}
}

func (o *CreateInternetQualityRatingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateInternetQualityRatingRequest))
}

func (o *UpdateInternetQualityRatingRequest) GotenObjectExt() {}

func (o *UpdateInternetQualityRatingRequest) MakeFullFieldMask() *UpdateInternetQualityRatingRequest_FieldMask {
	return FullUpdateInternetQualityRatingRequest_FieldMask()
}

func (o *UpdateInternetQualityRatingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateInternetQualityRatingRequest_FieldMask()
}

func (o *UpdateInternetQualityRatingRequest) MakeDiffFieldMask(other *UpdateInternetQualityRatingRequest) *UpdateInternetQualityRatingRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateInternetQualityRatingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateInternetQualityRatingRequest_FieldMask()
	}

	res := &UpdateInternetQualityRatingRequest_FieldMask{}
	{
		subMask := o.GetInternetQualityRating().MakeDiffFieldMask(other.GetInternetQualityRating())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateInternetQualityRatingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateInternetQualityRatingRequest))
}

func (o *UpdateInternetQualityRatingRequest) Clone() *UpdateInternetQualityRatingRequest {
	if o == nil {
		return nil
	}
	result := &UpdateInternetQualityRatingRequest{}
	result.InternetQualityRating = o.InternetQualityRating.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateInternetQualityRatingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateInternetQualityRatingRequest) Merge(source *UpdateInternetQualityRatingRequest) {
	if source.GetInternetQualityRating() != nil {
		if o.InternetQualityRating == nil {
			o.InternetQualityRating = new(internet_quality_rating.InternetQualityRating)
		}
		o.InternetQualityRating.Merge(source.GetInternetQualityRating())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateInternetQualityRatingRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateInternetQualityRatingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateInternetQualityRatingRequest))
}

func (o *UpdateInternetQualityRatingRequest_CAS) GotenObjectExt() {}

func (o *UpdateInternetQualityRatingRequest_CAS) MakeFullFieldMask() *UpdateInternetQualityRatingRequest_CAS_FieldMask {
	return FullUpdateInternetQualityRatingRequest_CAS_FieldMask()
}

func (o *UpdateInternetQualityRatingRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateInternetQualityRatingRequest_CAS_FieldMask()
}

func (o *UpdateInternetQualityRatingRequest_CAS) MakeDiffFieldMask(other *UpdateInternetQualityRatingRequest_CAS) *UpdateInternetQualityRatingRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateInternetQualityRatingRequest_CAS_FieldMask()
	}

	res := &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequestCAS_FieldSubPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateInternetQualityRatingRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateInternetQualityRatingRequest_CAS))
}

func (o *UpdateInternetQualityRatingRequest_CAS) Clone() *UpdateInternetQualityRatingRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateInternetQualityRatingRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*internet_quality_rating.InternetQualityRating_FieldMask)
	return result
}

func (o *UpdateInternetQualityRatingRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateInternetQualityRatingRequest_CAS) Merge(source *UpdateInternetQualityRatingRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(internet_quality_rating.InternetQualityRating)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(internet_quality_rating.InternetQualityRating_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateInternetQualityRatingRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateInternetQualityRatingRequest_CAS))
}

func (o *DeleteInternetQualityRatingRequest) GotenObjectExt() {}

func (o *DeleteInternetQualityRatingRequest) MakeFullFieldMask() *DeleteInternetQualityRatingRequest_FieldMask {
	return FullDeleteInternetQualityRatingRequest_FieldMask()
}

func (o *DeleteInternetQualityRatingRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteInternetQualityRatingRequest_FieldMask()
}

func (o *DeleteInternetQualityRatingRequest) MakeDiffFieldMask(other *DeleteInternetQualityRatingRequest) *DeleteInternetQualityRatingRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteInternetQualityRatingRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteInternetQualityRatingRequest_FieldMask()
	}

	res := &DeleteInternetQualityRatingRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteInternetQualityRatingRequest_FieldTerminalPath{selector: DeleteInternetQualityRatingRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteInternetQualityRatingRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteInternetQualityRatingRequest))
}

func (o *DeleteInternetQualityRatingRequest) Clone() *DeleteInternetQualityRatingRequest {
	if o == nil {
		return nil
	}
	result := &DeleteInternetQualityRatingRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &internet_quality_rating.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteInternetQualityRatingRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteInternetQualityRatingRequest) Merge(source *DeleteInternetQualityRatingRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &internet_quality_rating.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteInternetQualityRatingRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteInternetQualityRatingRequest))
}
