// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/internet_quality_rating_service.proto
// DO NOT EDIT!!!

package internet_quality_rating_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	internet_quality_rating "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/internet_quality_rating"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &internet_quality_rating.InternetQualityRating{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetInternetQualityRatingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetInternetQualityRatingRequest_FieldPathSelector
	Get(source *GetInternetQualityRatingRequest) []interface{}
	GetSingle(source *GetInternetQualityRatingRequest) (interface{}, bool)
	ClearValue(item *GetInternetQualityRatingRequest)

	// Those methods build corresponding GetInternetQualityRatingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetInternetQualityRatingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetInternetQualityRatingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetInternetQualityRatingRequest_FieldPathArrayItemValue
}

type GetInternetQualityRatingRequest_FieldPathSelector int32

const (
	GetInternetQualityRatingRequest_FieldPathSelectorName      GetInternetQualityRatingRequest_FieldPathSelector = 0
	GetInternetQualityRatingRequest_FieldPathSelectorFieldMask GetInternetQualityRatingRequest_FieldPathSelector = 1
	GetInternetQualityRatingRequest_FieldPathSelectorView      GetInternetQualityRatingRequest_FieldPathSelector = 2
)

func (s GetInternetQualityRatingRequest_FieldPathSelector) String() string {
	switch s {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		return "name"
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", s))
	}
}

func BuildGetInternetQualityRatingRequest_FieldPath(fp gotenobject.RawFieldPath) (GetInternetQualityRatingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetInternetQualityRatingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetInternetQualityRatingRequest", fp)
}

func ParseGetInternetQualityRatingRequest_FieldPath(rawField string) (GetInternetQualityRatingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetInternetQualityRatingRequest_FieldPath(fp)
}

func MustParseGetInternetQualityRatingRequest_FieldPath(rawField string) GetInternetQualityRatingRequest_FieldPath {
	fp, err := ParseGetInternetQualityRatingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetInternetQualityRatingRequest_FieldTerminalPath struct {
	selector GetInternetQualityRatingRequest_FieldPathSelector
}

var _ GetInternetQualityRatingRequest_FieldPath = (*GetInternetQualityRatingRequest_FieldTerminalPath)(nil)

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) Selector() GetInternetQualityRatingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetInternetQualityRatingRequest
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) Get(source *GetInternetQualityRatingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetInternetQualityRatingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetInternetQualityRatingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetInternetQualityRatingRequest))
}

// GetSingle returns value pointed by specific field of from source GetInternetQualityRatingRequest
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) GetSingle(source *GetInternetQualityRatingRequest) (interface{}, bool) {
	switch fp.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		return (*internet_quality_rating.Reference)(nil)
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) ClearValue(item *GetInternetQualityRatingRequest) {
	if item != nil {
		switch fp.selector {
		case GetInternetQualityRatingRequest_FieldPathSelectorName:
			item.Name = nil
		case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetInternetQualityRatingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
		}
	}
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetInternetQualityRatingRequest_FieldPathSelectorName ||
		fp.selector == GetInternetQualityRatingRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetInternetQualityRatingRequest_FieldPathSelectorView
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithIValue(value interface{}) GetInternetQualityRatingRequest_FieldPathValue {
	switch fp.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		return &GetInternetQualityRatingRequest_FieldTerminalPathValue{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Reference)}
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return &GetInternetQualityRatingRequest_FieldTerminalPathValue{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		return &GetInternetQualityRatingRequest_FieldTerminalPathValue{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov := &GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{GetInternetQualityRatingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		return &GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.Reference)}
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return &GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		return &GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{GetInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetInternetQualityRatingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *GetInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetInternetQualityRatingRequest_FieldPathValue allows storing values for GetInternetQualityRatingRequest fields according to their type
type GetInternetQualityRatingRequest_FieldPathValue interface {
	GetInternetQualityRatingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetInternetQualityRatingRequest)
	CompareWith(*GetInternetQualityRatingRequest) (cmp int, comparable bool)
}

func ParseGetInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) (GetInternetQualityRatingRequest_FieldPathValue, error) {
	fp, err := ParseGetInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetInternetQualityRatingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetInternetQualityRatingRequest_FieldPathValue), nil
}

func MustParseGetInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) GetInternetQualityRatingRequest_FieldPathValue {
	fpv, err := ParseGetInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetInternetQualityRatingRequest_FieldTerminalPathValue struct {
	GetInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ GetInternetQualityRatingRequest_FieldPathValue = (*GetInternetQualityRatingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetInternetQualityRatingRequest' as interface{}
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) AsNameValue() (*internet_quality_rating.Reference, bool) {
	res, ok := fpv.value.(*internet_quality_rating.Reference)
	return res, ok
}
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetInternetQualityRatingRequest
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) SetTo(target **GetInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(GetInternetQualityRatingRequest)
	}
	switch fpv.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*internet_quality_rating.Reference)
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetInternetQualityRatingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetInternetQualityRatingRequest_FieldTerminalPathValue' with the value under path in 'GetInternetQualityRatingRequest'.
func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) CompareWith(source *GetInternetQualityRatingRequest) (int, bool) {
	switch fpv.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*internet_quality_rating.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *GetInternetQualityRatingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetInternetQualityRatingRequest))
}

// GetInternetQualityRatingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetInternetQualityRatingRequest according to their type
// Present only for array (repeated) types.
type GetInternetQualityRatingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetInternetQualityRatingRequest_FieldPath
	ContainsValue(*GetInternetQualityRatingRequest) bool
}

// ParseGetInternetQualityRatingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetInternetQualityRatingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetInternetQualityRatingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetInternetQualityRatingRequest_FieldPathArrayItemValue), nil
}

func MustParseGetInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetInternetQualityRatingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue struct {
	GetInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ GetInternetQualityRatingRequest_FieldPathArrayItemValue = (*GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetInternetQualityRatingRequest as interface{}
func (fpaiv *GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetInternetQualityRatingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetInternetQualityRatingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetInternetQualityRatingRequest'
func (fpaiv *GetInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetInternetQualityRatingRequest) bool {
	slice := fpaiv.GetInternetQualityRatingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetInternetQualityRatingRequest_FieldPathArrayOfValues allows storing slice of values for GetInternetQualityRatingRequest fields according to their type
type GetInternetQualityRatingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetInternetQualityRatingRequest_FieldPath
}

func ParseGetInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetInternetQualityRatingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetInternetQualityRatingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetInternetQualityRatingRequest_FieldPathArrayOfValues), nil
}

func MustParseGetInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues struct {
	GetInternetQualityRatingRequest_FieldTerminalPath
	values interface{}
}

var _ GetInternetQualityRatingRequest_FieldPathArrayOfValues = (*GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetInternetQualityRatingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*internet_quality_rating.Reference) {
			values = append(values, v)
		}
	case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case GetInternetQualityRatingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*internet_quality_rating.Reference, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.Reference)
	return res, ok
}
func (fpaov *GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *GetInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetInternetQualityRatingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetInternetQualityRatingsRequest_FieldPathSelector
	Get(source *BatchGetInternetQualityRatingsRequest) []interface{}
	GetSingle(source *BatchGetInternetQualityRatingsRequest) (interface{}, bool)
	ClearValue(item *BatchGetInternetQualityRatingsRequest)

	// Those methods build corresponding BatchGetInternetQualityRatingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetInternetQualityRatingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue
}

type BatchGetInternetQualityRatingsRequest_FieldPathSelector int32

const (
	BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames     BatchGetInternetQualityRatingsRequest_FieldPathSelector = 0
	BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask BatchGetInternetQualityRatingsRequest_FieldPathSelector = 1
	BatchGetInternetQualityRatingsRequest_FieldPathSelectorView      BatchGetInternetQualityRatingsRequest_FieldPathSelector = 2
)

func (s BatchGetInternetQualityRatingsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", s))
	}
}

func BuildBatchGetInternetQualityRatingsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetInternetQualityRatingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetInternetQualityRatingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetInternetQualityRatingsRequest", fp)
}

func ParseBatchGetInternetQualityRatingsRequest_FieldPath(rawField string) (BatchGetInternetQualityRatingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetInternetQualityRatingsRequest_FieldPath(fp)
}

func MustParseBatchGetInternetQualityRatingsRequest_FieldPath(rawField string) BatchGetInternetQualityRatingsRequest_FieldPath {
	fp, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetInternetQualityRatingsRequest_FieldTerminalPath struct {
	selector BatchGetInternetQualityRatingsRequest_FieldPathSelector
}

var _ BatchGetInternetQualityRatingsRequest_FieldPath = (*BatchGetInternetQualityRatingsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) Selector() BatchGetInternetQualityRatingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetInternetQualityRatingsRequest
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) Get(source *BatchGetInternetQualityRatingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetInternetQualityRatingsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetInternetQualityRatingsRequest
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) GetSingle(source *BatchGetInternetQualityRatingsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetInternetQualityRatingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return ([]*internet_quality_rating.Reference)(nil)
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) ClearValue(item *BatchGetInternetQualityRatingsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetInternetQualityRatingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetInternetQualityRatingsRequest_FieldPathSelectorView
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetInternetQualityRatingsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.([]*internet_quality_rating.Reference)}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([][]*internet_quality_rating.Reference)}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return &BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue{BatchGetInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetInternetQualityRatingsRequest_FieldPathValue allows storing values for BatchGetInternetQualityRatingsRequest fields according to their type
type BatchGetInternetQualityRatingsRequest_FieldPathValue interface {
	BatchGetInternetQualityRatingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetInternetQualityRatingsRequest)
	CompareWith(*BatchGetInternetQualityRatingsRequest) (cmp int, comparable bool)
}

func ParseBatchGetInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetInternetQualityRatingsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetInternetQualityRatingsRequest_FieldPathValue), nil
}

func MustParseBatchGetInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) BatchGetInternetQualityRatingsRequest_FieldPathValue {
	fpv, err := ParseBatchGetInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue struct {
	BatchGetInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetInternetQualityRatingsRequest_FieldPathValue = (*BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetInternetQualityRatingsRequest' as interface{}
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) AsNamesValue() ([]*internet_quality_rating.Reference, bool) {
	res, ok := fpv.value.([]*internet_quality_rating.Reference)
	return res, ok
}
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetInternetQualityRatingsRequest
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) SetTo(target **BatchGetInternetQualityRatingsRequest) {
	if *target == nil {
		*target = new(BatchGetInternetQualityRatingsRequest)
	}
	switch fpv.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*internet_quality_rating.Reference)
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetInternetQualityRatingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetInternetQualityRatingsRequest'.
func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetInternetQualityRatingsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetInternetQualityRatingsRequest))
}

// BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetInternetQualityRatingsRequest according to their type
// Present only for array (repeated) types.
type BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetInternetQualityRatingsRequest_FieldPath
	ContainsValue(*BatchGetInternetQualityRatingsRequest) bool
}

// ParseBatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetInternetQualityRatingsRequest_FieldPathArrayItemValue = (*BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetInternetQualityRatingsRequest as interface{}
func (fpaiv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*internet_quality_rating.Reference, bool) {
	res, ok := fpaiv.value.(*internet_quality_rating.Reference)
	return res, ok
}

func (fpaiv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetInternetQualityRatingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetInternetQualityRatingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetInternetQualityRatingsRequest'
func (fpaiv *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetInternetQualityRatingsRequest) bool {
	slice := fpaiv.BatchGetInternetQualityRatingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetInternetQualityRatingsRequest fields according to their type
type BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetInternetQualityRatingsRequest_FieldPath
}

func ParseBatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetInternetQualityRatingsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetInternetQualityRatingsRequest_FieldPathArrayOfValues = (*BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*internet_quality_rating.Reference) {
			values = append(values, v)
		}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*internet_quality_rating.Reference, bool) {
	res, ok := fpaov.values.([][]*internet_quality_rating.Reference)
	return res, ok
}
func (fpaov *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *BatchGetInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetInternetQualityRatingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetInternetQualityRatingsResponse_FieldPathSelector
	Get(source *BatchGetInternetQualityRatingsResponse) []interface{}
	GetSingle(source *BatchGetInternetQualityRatingsResponse) (interface{}, bool)
	ClearValue(item *BatchGetInternetQualityRatingsResponse)

	// Those methods build corresponding BatchGetInternetQualityRatingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue
}

type BatchGetInternetQualityRatingsResponse_FieldPathSelector int32

const (
	BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings BatchGetInternetQualityRatingsResponse_FieldPathSelector = 0
	BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing                BatchGetInternetQualityRatingsResponse_FieldPathSelector = 1
)

func (s BatchGetInternetQualityRatingsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return "internet_quality_ratings"
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", s))
	}
}

func BuildBatchGetInternetQualityRatingsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetInternetQualityRatingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetInternetQualityRatingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "internet_quality_ratings", "internetQualityRatings", "internet-quality-ratings":
			return &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings}, nil
		case "missing":
			return &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "internet_quality_ratings", "internetQualityRatings", "internet-quality-ratings":
			if subpath, err := internet_quality_rating.BuildInternetQualityRating_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetInternetQualityRatingsResponse_FieldSubPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetInternetQualityRatingsResponse", fp)
}

func ParseBatchGetInternetQualityRatingsResponse_FieldPath(rawField string) (BatchGetInternetQualityRatingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetInternetQualityRatingsResponse_FieldPath(fp)
}

func MustParseBatchGetInternetQualityRatingsResponse_FieldPath(rawField string) BatchGetInternetQualityRatingsResponse_FieldPath {
	fp, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetInternetQualityRatingsResponse_FieldTerminalPath struct {
	selector BatchGetInternetQualityRatingsResponse_FieldPathSelector
}

var _ BatchGetInternetQualityRatingsResponse_FieldPath = (*BatchGetInternetQualityRatingsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) Selector() BatchGetInternetQualityRatingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetInternetQualityRatingsResponse
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) Get(source *BatchGetInternetQualityRatingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			for _, value := range source.GetInternetQualityRatings() {
				values = append(values, value)
			}
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetInternetQualityRatingsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetInternetQualityRatingsResponse
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) GetSingle(source *BatchGetInternetQualityRatingsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		res := source.GetInternetQualityRatings()
		return res, res != nil
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return ([]*internet_quality_rating.InternetQualityRating)(nil)
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return ([]*internet_quality_rating.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) ClearValue(item *BatchGetInternetQualityRatingsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			item.InternetQualityRatings = nil
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.([]*internet_quality_rating.InternetQualityRating)}
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.([]*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([][]*internet_quality_rating.InternetQualityRating)}
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([][]*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating)}
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return &BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue{BatchGetInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetInternetQualityRatingsResponse_FieldSubPath struct {
	selector BatchGetInternetQualityRatingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetInternetQualityRatingsResponse_FieldPath = (*BatchGetInternetQualityRatingsResponse_FieldSubPath)(nil)

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) Selector() BatchGetInternetQualityRatingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) AsInternetQualityRatingsSubPath() (internet_quality_rating.InternetQualityRating_FieldPath, bool) {
	res, ok := fps.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetInternetQualityRatingsResponse
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) Get(source *BatchGetInternetQualityRatingsResponse) (values []interface{}) {
	if asInternetQualityRatingFieldPath, ok := fps.AsInternetQualityRatingsSubPath(); ok {
		for _, item := range source.GetInternetQualityRatings() {
			values = append(values, asInternetQualityRatingFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetInternetQualityRatingsResponse))
}

// GetSingle returns value of selected field from source BatchGetInternetQualityRatingsResponse
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) GetSingle(source *BatchGetInternetQualityRatingsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		if len(source.GetInternetQualityRatings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternetQualityRatings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) ClearValue(item *BatchGetInternetQualityRatingsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			for _, subItem := range item.InternetQualityRatings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathValue {
	return &BatchGetInternetQualityRatingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues {
	return &BatchGetInternetQualityRatingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue {
	return &BatchGetInternetQualityRatingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetInternetQualityRatingsResponse_FieldPathValue allows storing values for BatchGetInternetQualityRatingsResponse fields according to their type
type BatchGetInternetQualityRatingsResponse_FieldPathValue interface {
	BatchGetInternetQualityRatingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetInternetQualityRatingsResponse)
	CompareWith(*BatchGetInternetQualityRatingsResponse) (cmp int, comparable bool)
}

func ParseBatchGetInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetInternetQualityRatingsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetInternetQualityRatingsResponse_FieldPathValue), nil
}

func MustParseBatchGetInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) BatchGetInternetQualityRatingsResponse_FieldPathValue {
	fpv, err := ParseBatchGetInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue struct {
	BatchGetInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetInternetQualityRatingsResponse_FieldPathValue = (*BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetInternetQualityRatingsResponse' as interface{}
func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) AsInternetQualityRatingsValue() ([]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpv.value.([]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) AsMissingValue() ([]*internet_quality_rating.Reference, bool) {
	res, ok := fpv.value.([]*internet_quality_rating.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetInternetQualityRatingsResponse
func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) SetTo(target **BatchGetInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(BatchGetInternetQualityRatingsResponse)
	}
	switch fpv.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		(*target).InternetQualityRatings = fpv.value.([]*internet_quality_rating.InternetQualityRating)
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*internet_quality_rating.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetInternetQualityRatingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetInternetQualityRatingsResponse'.
func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetInternetQualityRatingsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return 0, false
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetInternetQualityRatingsResponse))
}

type BatchGetInternetQualityRatingsResponse_FieldSubPathValue struct {
	BatchGetInternetQualityRatingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetInternetQualityRatingsResponse_FieldPathValue = (*BatchGetInternetQualityRatingsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) AsInternetQualityRatingsPathValue() (internet_quality_rating.InternetQualityRating_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) SetTo(target **BatchGetInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(BatchGetInternetQualityRatingsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetInternetQualityRatingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) CompareWith(source *BatchGetInternetQualityRatingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetInternetQualityRatingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetInternetQualityRatingsResponse))
}

// BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetInternetQualityRatingsResponse according to their type
// Present only for array (repeated) types.
type BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetInternetQualityRatingsResponse_FieldPath
	ContainsValue(*BatchGetInternetQualityRatingsResponse) bool
}

// ParseBatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetInternetQualityRatingsResponse_FieldPathArrayItemValue = (*BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetInternetQualityRatingsResponse as interface{}
func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) AsInternetQualityRatingsItemValue() (*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaiv.value.(*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*internet_quality_rating.Reference, bool) {
	res, ok := fpaiv.value.(*internet_quality_rating.Reference)
	return res, ok
}

func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetInternetQualityRatingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetInternetQualityRatingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetInternetQualityRatingsResponse'
func (fpaiv *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetInternetQualityRatingsResponse) bool {
	slice := fpaiv.BatchGetInternetQualityRatingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetInternetQualityRatingsResponse_FieldSubPathArrayItemValue struct {
	BatchGetInternetQualityRatingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetInternetQualityRatingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetInternetQualityRatingsResponse_FieldSubPathArrayItemValue) AsInternetQualityRatingsPathItemValue() (internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetInternetQualityRatingsResponse'
func (fpaivs *BatchGetInternetQualityRatingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetInternetQualityRatingsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetInternetQualityRatingsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetInternetQualityRatingsResponse fields according to their type
type BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetInternetQualityRatingsResponse_FieldPath
}

func ParseBatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetInternetQualityRatingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetInternetQualityRatingsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues = (*BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		for _, v := range fpaov.values.([][]*internet_quality_rating.InternetQualityRating) {
			values = append(values, v)
		}
	case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*internet_quality_rating.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsInternetQualityRatingsArrayOfValues() ([][]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaov.values.([][]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpaov *BatchGetInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*internet_quality_rating.Reference, bool) {
	res, ok := fpaov.values.([][]*internet_quality_rating.Reference)
	return res, ok
}

type BatchGetInternetQualityRatingsResponse_FieldSubPathArrayOfValues struct {
	BatchGetInternetQualityRatingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetInternetQualityRatingsResponse_FieldPathArrayOfValues = (*BatchGetInternetQualityRatingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetInternetQualityRatingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetInternetQualityRatingsResponse_FieldSubPathArrayOfValues) AsInternetQualityRatingsPathArrayOfValues() (internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListInternetQualityRatingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListInternetQualityRatingsRequest_FieldPathSelector
	Get(source *ListInternetQualityRatingsRequest) []interface{}
	GetSingle(source *ListInternetQualityRatingsRequest) (interface{}, bool)
	ClearValue(item *ListInternetQualityRatingsRequest)

	// Those methods build corresponding ListInternetQualityRatingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListInternetQualityRatingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListInternetQualityRatingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListInternetQualityRatingsRequest_FieldPathArrayItemValue
}

type ListInternetQualityRatingsRequest_FieldPathSelector int32

const (
	ListInternetQualityRatingsRequest_FieldPathSelectorParent    ListInternetQualityRatingsRequest_FieldPathSelector = 0
	ListInternetQualityRatingsRequest_FieldPathSelectorPageSize  ListInternetQualityRatingsRequest_FieldPathSelector = 1
	ListInternetQualityRatingsRequest_FieldPathSelectorPageToken ListInternetQualityRatingsRequest_FieldPathSelector = 2
	ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy   ListInternetQualityRatingsRequest_FieldPathSelector = 3
	ListInternetQualityRatingsRequest_FieldPathSelectorFilter    ListInternetQualityRatingsRequest_FieldPathSelector = 4
	ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask ListInternetQualityRatingsRequest_FieldPathSelector = 5
	ListInternetQualityRatingsRequest_FieldPathSelectorView      ListInternetQualityRatingsRequest_FieldPathSelector = 6
)

func (s ListInternetQualityRatingsRequest_FieldPathSelector) String() string {
	switch s {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		return "parent"
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", s))
	}
}

func BuildListInternetQualityRatingsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListInternetQualityRatingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListInternetQualityRatingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListInternetQualityRatingsRequest", fp)
}

func ParseListInternetQualityRatingsRequest_FieldPath(rawField string) (ListInternetQualityRatingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListInternetQualityRatingsRequest_FieldPath(fp)
}

func MustParseListInternetQualityRatingsRequest_FieldPath(rawField string) ListInternetQualityRatingsRequest_FieldPath {
	fp, err := ParseListInternetQualityRatingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListInternetQualityRatingsRequest_FieldTerminalPath struct {
	selector ListInternetQualityRatingsRequest_FieldPathSelector
}

var _ ListInternetQualityRatingsRequest_FieldPath = (*ListInternetQualityRatingsRequest_FieldTerminalPath)(nil)

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) Selector() ListInternetQualityRatingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListInternetQualityRatingsRequest
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) Get(source *ListInternetQualityRatingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListInternetQualityRatingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListInternetQualityRatingsRequest))
}

// GetSingle returns value pointed by specific field of from source ListInternetQualityRatingsRequest
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) GetSingle(source *ListInternetQualityRatingsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListInternetQualityRatingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		return (*internet_quality_rating.ParentName)(nil)
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return (*internet_quality_rating.OrderBy)(nil)
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return (*internet_quality_rating.Filter)(nil)
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) ClearValue(item *ListInternetQualityRatingsRequest) {
	if item != nil {
		switch fp.selector {
		case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListInternetQualityRatingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListInternetQualityRatingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorParent ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorFilter ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListInternetQualityRatingsRequest_FieldPathSelectorView
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithIValue(value interface{}) ListInternetQualityRatingsRequest_FieldPathValue {
	switch fp.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.ParentName)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.OrderBy)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Filter)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathValue{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov := &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.ParentName)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.OrderBy)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.Filter)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		return &ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListInternetQualityRatingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListInternetQualityRatingsRequest_FieldPathValue allows storing values for ListInternetQualityRatingsRequest fields according to their type
type ListInternetQualityRatingsRequest_FieldPathValue interface {
	ListInternetQualityRatingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListInternetQualityRatingsRequest)
	CompareWith(*ListInternetQualityRatingsRequest) (cmp int, comparable bool)
}

func ParseListInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) (ListInternetQualityRatingsRequest_FieldPathValue, error) {
	fp, err := ParseListInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListInternetQualityRatingsRequest_FieldPathValue), nil
}

func MustParseListInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) ListInternetQualityRatingsRequest_FieldPathValue {
	fpv, err := ParseListInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListInternetQualityRatingsRequest_FieldTerminalPathValue struct {
	ListInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListInternetQualityRatingsRequest_FieldPathValue = (*ListInternetQualityRatingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListInternetQualityRatingsRequest' as interface{}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsParentValue() (*internet_quality_rating.ParentName, bool) {
	res, ok := fpv.value.(*internet_quality_rating.ParentName)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsOrderByValue() (*internet_quality_rating.OrderBy, bool) {
	res, ok := fpv.value.(*internet_quality_rating.OrderBy)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsFilterValue() (*internet_quality_rating.Filter, bool) {
	res, ok := fpv.value.(*internet_quality_rating.Filter)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListInternetQualityRatingsRequest
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) SetTo(target **ListInternetQualityRatingsRequest) {
	if *target == nil {
		*target = new(ListInternetQualityRatingsRequest)
	}
	switch fpv.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*internet_quality_rating.ParentName)
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*internet_quality_rating.OrderBy)
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*internet_quality_rating.Filter)
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListInternetQualityRatingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListInternetQualityRatingsRequest_FieldTerminalPathValue' with the value under path in 'ListInternetQualityRatingsRequest'.
func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWith(source *ListInternetQualityRatingsRequest) (int, bool) {
	switch fpv.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*internet_quality_rating.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *ListInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListInternetQualityRatingsRequest))
}

// ListInternetQualityRatingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListInternetQualityRatingsRequest according to their type
// Present only for array (repeated) types.
type ListInternetQualityRatingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListInternetQualityRatingsRequest_FieldPath
	ContainsValue(*ListInternetQualityRatingsRequest) bool
}

// ParseListInternetQualityRatingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListInternetQualityRatingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListInternetQualityRatingsRequest_FieldPathArrayItemValue), nil
}

func MustParseListInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListInternetQualityRatingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue struct {
	ListInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ ListInternetQualityRatingsRequest_FieldPathArrayItemValue = (*ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListInternetQualityRatingsRequest as interface{}
func (fpaiv *ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListInternetQualityRatingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListInternetQualityRatingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListInternetQualityRatingsRequest'
func (fpaiv *ListInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListInternetQualityRatingsRequest) bool {
	slice := fpaiv.ListInternetQualityRatingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListInternetQualityRatingsRequest_FieldPathArrayOfValues allows storing slice of values for ListInternetQualityRatingsRequest fields according to their type
type ListInternetQualityRatingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListInternetQualityRatingsRequest_FieldPath
}

func ParseListInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListInternetQualityRatingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListInternetQualityRatingsRequest_FieldPathArrayOfValues), nil
}

func MustParseListInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues struct {
	ListInternetQualityRatingsRequest_FieldTerminalPath
	values interface{}
}

var _ ListInternetQualityRatingsRequest_FieldPathArrayOfValues = (*ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*internet_quality_rating.ParentName) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*internet_quality_rating.OrderBy) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*internet_quality_rating.Filter) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*internet_quality_rating.ParentName, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.ParentName)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*internet_quality_rating.OrderBy, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.OrderBy)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*internet_quality_rating.Filter, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.Filter)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListInternetQualityRatingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListInternetQualityRatingsResponse_FieldPathSelector
	Get(source *ListInternetQualityRatingsResponse) []interface{}
	GetSingle(source *ListInternetQualityRatingsResponse) (interface{}, bool)
	ClearValue(item *ListInternetQualityRatingsResponse)

	// Those methods build corresponding ListInternetQualityRatingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListInternetQualityRatingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathArrayItemValue
}

type ListInternetQualityRatingsResponse_FieldPathSelector int32

const (
	ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings ListInternetQualityRatingsResponse_FieldPathSelector = 0
	ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken          ListInternetQualityRatingsResponse_FieldPathSelector = 1
	ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken          ListInternetQualityRatingsResponse_FieldPathSelector = 2
)

func (s ListInternetQualityRatingsResponse_FieldPathSelector) String() string {
	switch s {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return "internet_quality_ratings"
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", s))
	}
}

func BuildListInternetQualityRatingsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListInternetQualityRatingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListInternetQualityRatingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "internet_quality_ratings", "internetQualityRatings", "internet-quality-ratings":
			return &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "internet_quality_ratings", "internetQualityRatings", "internet-quality-ratings":
			if subpath, err := internet_quality_rating.BuildInternetQualityRating_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListInternetQualityRatingsResponse_FieldSubPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListInternetQualityRatingsResponse", fp)
}

func ParseListInternetQualityRatingsResponse_FieldPath(rawField string) (ListInternetQualityRatingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListInternetQualityRatingsResponse_FieldPath(fp)
}

func MustParseListInternetQualityRatingsResponse_FieldPath(rawField string) ListInternetQualityRatingsResponse_FieldPath {
	fp, err := ParseListInternetQualityRatingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListInternetQualityRatingsResponse_FieldTerminalPath struct {
	selector ListInternetQualityRatingsResponse_FieldPathSelector
}

var _ ListInternetQualityRatingsResponse_FieldPath = (*ListInternetQualityRatingsResponse_FieldTerminalPath)(nil)

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) Selector() ListInternetQualityRatingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListInternetQualityRatingsResponse
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) Get(source *ListInternetQualityRatingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			for _, value := range source.GetInternetQualityRatings() {
				values = append(values, value)
			}
		case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListInternetQualityRatingsResponse))
}

// GetSingle returns value pointed by specific field of from source ListInternetQualityRatingsResponse
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) GetSingle(source *ListInternetQualityRatingsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		res := source.GetInternetQualityRatings()
		return res, res != nil
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return ([]*internet_quality_rating.InternetQualityRating)(nil)
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) ClearValue(item *ListInternetQualityRatingsResponse) {
	if item != nil {
		switch fp.selector {
		case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			item.InternetQualityRatings = nil
		case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithIValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathValue {
	switch fp.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathValue{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.([]*internet_quality_rating.InternetQualityRating)}
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathValue{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathValue{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov := &ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([][]*internet_quality_rating.InternetQualityRating)}
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return &ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue{ListInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *ListInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListInternetQualityRatingsResponse_FieldSubPath struct {
	selector ListInternetQualityRatingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListInternetQualityRatingsResponse_FieldPath = (*ListInternetQualityRatingsResponse_FieldSubPath)(nil)

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) Selector() ListInternetQualityRatingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) AsInternetQualityRatingsSubPath() (internet_quality_rating.InternetQualityRating_FieldPath, bool) {
	res, ok := fps.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListInternetQualityRatingsResponse
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) Get(source *ListInternetQualityRatingsResponse) (values []interface{}) {
	if asInternetQualityRatingFieldPath, ok := fps.AsInternetQualityRatingsSubPath(); ok {
		for _, item := range source.GetInternetQualityRatings() {
			values = append(values, asInternetQualityRatingFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListInternetQualityRatingsResponse))
}

// GetSingle returns value of selected field from source ListInternetQualityRatingsResponse
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) GetSingle(source *ListInternetQualityRatingsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		if len(source.GetInternetQualityRatings()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternetQualityRatings()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fps.selector))
	}
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) ClearValue(item *ListInternetQualityRatingsResponse) {
	if item != nil {
		switch fps.selector {
		case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			for _, subItem := range item.InternetQualityRatings {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListInternetQualityRatingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithIValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathValue {
	return &ListInternetQualityRatingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListInternetQualityRatingsResponse_FieldPathArrayOfValues {
	return &ListInternetQualityRatingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListInternetQualityRatingsResponse_FieldPathArrayItemValue {
	return &ListInternetQualityRatingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListInternetQualityRatingsResponse_FieldPathValue allows storing values for ListInternetQualityRatingsResponse fields according to their type
type ListInternetQualityRatingsResponse_FieldPathValue interface {
	ListInternetQualityRatingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListInternetQualityRatingsResponse)
	CompareWith(*ListInternetQualityRatingsResponse) (cmp int, comparable bool)
}

func ParseListInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) (ListInternetQualityRatingsResponse_FieldPathValue, error) {
	fp, err := ParseListInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListInternetQualityRatingsResponse_FieldPathValue), nil
}

func MustParseListInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) ListInternetQualityRatingsResponse_FieldPathValue {
	fpv, err := ParseListInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListInternetQualityRatingsResponse_FieldTerminalPathValue struct {
	ListInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListInternetQualityRatingsResponse_FieldPathValue = (*ListInternetQualityRatingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListInternetQualityRatingsResponse' as interface{}
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) AsInternetQualityRatingsValue() ([]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpv.value.([]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListInternetQualityRatingsResponse
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) SetTo(target **ListInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(ListInternetQualityRatingsResponse)
	}
	switch fpv.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		(*target).InternetQualityRatings = fpv.value.([]*internet_quality_rating.InternetQualityRating)
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListInternetQualityRatingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListInternetQualityRatingsResponse_FieldTerminalPathValue' with the value under path in 'ListInternetQualityRatingsResponse'.
func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWith(source *ListInternetQualityRatingsResponse) (int, bool) {
	switch fpv.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return 0, false
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *ListInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListInternetQualityRatingsResponse))
}

type ListInternetQualityRatingsResponse_FieldSubPathValue struct {
	ListInternetQualityRatingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListInternetQualityRatingsResponse_FieldPathValue = (*ListInternetQualityRatingsResponse_FieldSubPathValue)(nil)

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) AsInternetQualityRatingsPathValue() (internet_quality_rating.InternetQualityRating_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue)
	return res, ok
}

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) SetTo(target **ListInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(ListInternetQualityRatingsResponse)
	}
	switch fpvs.Selector() {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListInternetQualityRatingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) CompareWith(source *ListInternetQualityRatingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListInternetQualityRatingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListInternetQualityRatingsResponse))
}

// ListInternetQualityRatingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListInternetQualityRatingsResponse according to their type
// Present only for array (repeated) types.
type ListInternetQualityRatingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListInternetQualityRatingsResponse_FieldPath
	ContainsValue(*ListInternetQualityRatingsResponse) bool
}

// ParseListInternetQualityRatingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListInternetQualityRatingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListInternetQualityRatingsResponse_FieldPathArrayItemValue), nil
}

func MustParseListInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListInternetQualityRatingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue struct {
	ListInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ ListInternetQualityRatingsResponse_FieldPathArrayItemValue = (*ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListInternetQualityRatingsResponse as interface{}
func (fpaiv *ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) AsInternetQualityRatingsItemValue() (*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaiv.value.(*internet_quality_rating.InternetQualityRating)
	return res, ok
}

func (fpaiv *ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListInternetQualityRatingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListInternetQualityRatingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListInternetQualityRatingsResponse'
func (fpaiv *ListInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListInternetQualityRatingsResponse) bool {
	slice := fpaiv.ListInternetQualityRatingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListInternetQualityRatingsResponse_FieldSubPathArrayItemValue struct {
	ListInternetQualityRatingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListInternetQualityRatingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListInternetQualityRatingsResponse_FieldSubPathArrayItemValue) AsInternetQualityRatingsPathItemValue() (internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListInternetQualityRatingsResponse'
func (fpaivs *ListInternetQualityRatingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListInternetQualityRatingsResponse) bool {
	switch fpaivs.Selector() {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListInternetQualityRatingsResponse: %d", fpaivs.Selector()))
	}
}

// ListInternetQualityRatingsResponse_FieldPathArrayOfValues allows storing slice of values for ListInternetQualityRatingsResponse fields according to their type
type ListInternetQualityRatingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListInternetQualityRatingsResponse_FieldPath
}

func ParseListInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListInternetQualityRatingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListInternetQualityRatingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListInternetQualityRatingsResponse_FieldPathArrayOfValues), nil
}

func MustParseListInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues struct {
	ListInternetQualityRatingsResponse_FieldTerminalPath
	values interface{}
}

var _ ListInternetQualityRatingsResponse_FieldPathArrayOfValues = (*ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
		for _, v := range fpaov.values.([][]*internet_quality_rating.InternetQualityRating) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsInternetQualityRatingsArrayOfValues() ([][]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaov.values.([][]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpaov *ListInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}

type ListInternetQualityRatingsResponse_FieldSubPathArrayOfValues struct {
	ListInternetQualityRatingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListInternetQualityRatingsResponse_FieldPathArrayOfValues = (*ListInternetQualityRatingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListInternetQualityRatingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListInternetQualityRatingsResponse_FieldSubPathArrayOfValues) AsInternetQualityRatingsPathArrayOfValues() (internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchInternetQualityRatingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchInternetQualityRatingRequest_FieldPathSelector
	Get(source *WatchInternetQualityRatingRequest) []interface{}
	GetSingle(source *WatchInternetQualityRatingRequest) (interface{}, bool)
	ClearValue(item *WatchInternetQualityRatingRequest)

	// Those methods build corresponding WatchInternetQualityRatingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchInternetQualityRatingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchInternetQualityRatingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchInternetQualityRatingRequest_FieldPathArrayItemValue
}

type WatchInternetQualityRatingRequest_FieldPathSelector int32

const (
	WatchInternetQualityRatingRequest_FieldPathSelectorName      WatchInternetQualityRatingRequest_FieldPathSelector = 0
	WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask WatchInternetQualityRatingRequest_FieldPathSelector = 1
	WatchInternetQualityRatingRequest_FieldPathSelectorView      WatchInternetQualityRatingRequest_FieldPathSelector = 2
)

func (s WatchInternetQualityRatingRequest_FieldPathSelector) String() string {
	switch s {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		return "name"
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", s))
	}
}

func BuildWatchInternetQualityRatingRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchInternetQualityRatingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchInternetQualityRatingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchInternetQualityRatingRequest", fp)
}

func ParseWatchInternetQualityRatingRequest_FieldPath(rawField string) (WatchInternetQualityRatingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchInternetQualityRatingRequest_FieldPath(fp)
}

func MustParseWatchInternetQualityRatingRequest_FieldPath(rawField string) WatchInternetQualityRatingRequest_FieldPath {
	fp, err := ParseWatchInternetQualityRatingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchInternetQualityRatingRequest_FieldTerminalPath struct {
	selector WatchInternetQualityRatingRequest_FieldPathSelector
}

var _ WatchInternetQualityRatingRequest_FieldPath = (*WatchInternetQualityRatingRequest_FieldTerminalPath)(nil)

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) Selector() WatchInternetQualityRatingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchInternetQualityRatingRequest
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) Get(source *WatchInternetQualityRatingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchInternetQualityRatingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchInternetQualityRatingRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchInternetQualityRatingRequest))
}

// GetSingle returns value pointed by specific field of from source WatchInternetQualityRatingRequest
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) GetSingle(source *WatchInternetQualityRatingRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		return (*internet_quality_rating.Reference)(nil)
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) ClearValue(item *WatchInternetQualityRatingRequest) {
	if item != nil {
		switch fp.selector {
		case WatchInternetQualityRatingRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchInternetQualityRatingRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchInternetQualityRatingRequest_FieldPathSelectorName ||
		fp.selector == WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchInternetQualityRatingRequest_FieldPathSelectorView
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithIValue(value interface{}) WatchInternetQualityRatingRequest_FieldPathValue {
	switch fp.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathValue{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Reference)}
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathValue{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathValue{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov := &WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.Reference)}
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		return &WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchInternetQualityRatingRequest_FieldPathValue allows storing values for WatchInternetQualityRatingRequest fields according to their type
type WatchInternetQualityRatingRequest_FieldPathValue interface {
	WatchInternetQualityRatingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchInternetQualityRatingRequest)
	CompareWith(*WatchInternetQualityRatingRequest) (cmp int, comparable bool)
}

func ParseWatchInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) (WatchInternetQualityRatingRequest_FieldPathValue, error) {
	fp, err := ParseWatchInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchInternetQualityRatingRequest_FieldPathValue), nil
}

func MustParseWatchInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) WatchInternetQualityRatingRequest_FieldPathValue {
	fpv, err := ParseWatchInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchInternetQualityRatingRequest_FieldTerminalPathValue struct {
	WatchInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingRequest_FieldPathValue = (*WatchInternetQualityRatingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchInternetQualityRatingRequest' as interface{}
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) AsNameValue() (*internet_quality_rating.Reference, bool) {
	res, ok := fpv.value.(*internet_quality_rating.Reference)
	return res, ok
}
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchInternetQualityRatingRequest
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) SetTo(target **WatchInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingRequest)
	}
	switch fpv.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*internet_quality_rating.Reference)
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchInternetQualityRatingRequest_FieldTerminalPathValue' with the value under path in 'WatchInternetQualityRatingRequest'.
func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) CompareWith(source *WatchInternetQualityRatingRequest) (int, bool) {
	switch fpv.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*internet_quality_rating.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchInternetQualityRatingRequest))
}

// WatchInternetQualityRatingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchInternetQualityRatingRequest according to their type
// Present only for array (repeated) types.
type WatchInternetQualityRatingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchInternetQualityRatingRequest_FieldPath
	ContainsValue(*WatchInternetQualityRatingRequest) bool
}

// ParseWatchInternetQualityRatingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchInternetQualityRatingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchInternetQualityRatingRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchInternetQualityRatingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue struct {
	WatchInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingRequest_FieldPathArrayItemValue = (*WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchInternetQualityRatingRequest as interface{}
func (fpaiv *WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchInternetQualityRatingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchInternetQualityRatingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchInternetQualityRatingRequest'
func (fpaiv *WatchInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingRequest) bool {
	slice := fpaiv.WatchInternetQualityRatingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchInternetQualityRatingRequest_FieldPathArrayOfValues allows storing slice of values for WatchInternetQualityRatingRequest fields according to their type
type WatchInternetQualityRatingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchInternetQualityRatingRequest_FieldPath
}

func ParseWatchInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchInternetQualityRatingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchInternetQualityRatingRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues struct {
	WatchInternetQualityRatingRequest_FieldTerminalPath
	values interface{}
}

var _ WatchInternetQualityRatingRequest_FieldPathArrayOfValues = (*WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchInternetQualityRatingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*internet_quality_rating.Reference) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*internet_quality_rating.Reference, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.Reference)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchInternetQualityRatingResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchInternetQualityRatingResponse_FieldPathSelector
	Get(source *WatchInternetQualityRatingResponse) []interface{}
	GetSingle(source *WatchInternetQualityRatingResponse) (interface{}, bool)
	ClearValue(item *WatchInternetQualityRatingResponse)

	// Those methods build corresponding WatchInternetQualityRatingResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchInternetQualityRatingResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchInternetQualityRatingResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchInternetQualityRatingResponse_FieldPathArrayItemValue
}

type WatchInternetQualityRatingResponse_FieldPathSelector int32

const (
	WatchInternetQualityRatingResponse_FieldPathSelectorChange WatchInternetQualityRatingResponse_FieldPathSelector = 0
)

func (s WatchInternetQualityRatingResponse_FieldPathSelector) String() string {
	switch s {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", s))
	}
}

func BuildWatchInternetQualityRatingResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchInternetQualityRatingResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchInternetQualityRatingResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchInternetQualityRatingResponse_FieldTerminalPath{selector: WatchInternetQualityRatingResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchInternetQualityRatingResponse", fp)
}

func ParseWatchInternetQualityRatingResponse_FieldPath(rawField string) (WatchInternetQualityRatingResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchInternetQualityRatingResponse_FieldPath(fp)
}

func MustParseWatchInternetQualityRatingResponse_FieldPath(rawField string) WatchInternetQualityRatingResponse_FieldPath {
	fp, err := ParseWatchInternetQualityRatingResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchInternetQualityRatingResponse_FieldTerminalPath struct {
	selector WatchInternetQualityRatingResponse_FieldPathSelector
}

var _ WatchInternetQualityRatingResponse_FieldPath = (*WatchInternetQualityRatingResponse_FieldTerminalPath)(nil)

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) Selector() WatchInternetQualityRatingResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchInternetQualityRatingResponse
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) Get(source *WatchInternetQualityRatingResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchInternetQualityRatingResponse))
}

// GetSingle returns value pointed by specific field of from source WatchInternetQualityRatingResponse
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) GetSingle(source *WatchInternetQualityRatingResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchInternetQualityRatingResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		return (*internet_quality_rating.InternetQualityRatingChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) ClearValue(item *WatchInternetQualityRatingResponse) {
	if item != nil {
		switch fp.selector {
		case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchInternetQualityRatingResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchInternetQualityRatingResponse_FieldPathSelectorChange
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithIValue(value interface{}) WatchInternetQualityRatingResponse_FieldPathValue {
	switch fp.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		return &WatchInternetQualityRatingResponse_FieldTerminalPathValue{WatchInternetQualityRatingResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRatingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingResponse_FieldPathArrayOfValues {
	fpaov := &WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		return &WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingResponse_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRatingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchInternetQualityRatingResponse_FieldPathValue allows storing values for WatchInternetQualityRatingResponse fields according to their type
type WatchInternetQualityRatingResponse_FieldPathValue interface {
	WatchInternetQualityRatingResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchInternetQualityRatingResponse)
	CompareWith(*WatchInternetQualityRatingResponse) (cmp int, comparable bool)
}

func ParseWatchInternetQualityRatingResponse_FieldPathValue(pathStr, valueStr string) (WatchInternetQualityRatingResponse_FieldPathValue, error) {
	fp, err := ParseWatchInternetQualityRatingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchInternetQualityRatingResponse_FieldPathValue), nil
}

func MustParseWatchInternetQualityRatingResponse_FieldPathValue(pathStr, valueStr string) WatchInternetQualityRatingResponse_FieldPathValue {
	fpv, err := ParseWatchInternetQualityRatingResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchInternetQualityRatingResponse_FieldTerminalPathValue struct {
	WatchInternetQualityRatingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingResponse_FieldPathValue = (*WatchInternetQualityRatingResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchInternetQualityRatingResponse' as interface{}
func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) AsChangeValue() (*internet_quality_rating.InternetQualityRatingChange, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRatingChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchInternetQualityRatingResponse
func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) SetTo(target **WatchInternetQualityRatingResponse) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingResponse)
	}
	switch fpv.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*internet_quality_rating.InternetQualityRatingChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchInternetQualityRatingResponse_FieldTerminalPathValue' with the value under path in 'WatchInternetQualityRatingResponse'.
func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) CompareWith(source *WatchInternetQualityRatingResponse) (int, bool) {
	switch fpv.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingResponse: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchInternetQualityRatingResponse))
}

// WatchInternetQualityRatingResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchInternetQualityRatingResponse according to their type
// Present only for array (repeated) types.
type WatchInternetQualityRatingResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchInternetQualityRatingResponse_FieldPath
	ContainsValue(*WatchInternetQualityRatingResponse) bool
}

// ParseWatchInternetQualityRatingResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchInternetQualityRatingResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchInternetQualityRatingResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchInternetQualityRatingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchInternetQualityRatingResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchInternetQualityRatingResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchInternetQualityRatingResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchInternetQualityRatingResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue struct {
	WatchInternetQualityRatingResponse_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingResponse_FieldPathArrayItemValue = (*WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchInternetQualityRatingResponse as interface{}
func (fpaiv *WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchInternetQualityRatingResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchInternetQualityRatingResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchInternetQualityRatingResponse'
func (fpaiv *WatchInternetQualityRatingResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingResponse) bool {
	slice := fpaiv.WatchInternetQualityRatingResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchInternetQualityRatingResponse_FieldPathArrayOfValues allows storing slice of values for WatchInternetQualityRatingResponse fields according to their type
type WatchInternetQualityRatingResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchInternetQualityRatingResponse_FieldPath
}

func ParseWatchInternetQualityRatingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchInternetQualityRatingResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchInternetQualityRatingResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchInternetQualityRatingResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchInternetQualityRatingResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchInternetQualityRatingResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchInternetQualityRatingResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues struct {
	WatchInternetQualityRatingResponse_FieldTerminalPath
	values interface{}
}

var _ WatchInternetQualityRatingResponse_FieldPathArrayOfValues = (*WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRatingChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchInternetQualityRatingResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*internet_quality_rating.InternetQualityRatingChange, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRatingChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchInternetQualityRatingsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchInternetQualityRatingsRequest_FieldPathSelector
	Get(source *WatchInternetQualityRatingsRequest) []interface{}
	GetSingle(source *WatchInternetQualityRatingsRequest) (interface{}, bool)
	ClearValue(item *WatchInternetQualityRatingsRequest)

	// Those methods build corresponding WatchInternetQualityRatingsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchInternetQualityRatingsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsRequest_FieldPathArrayItemValue
}

type WatchInternetQualityRatingsRequest_FieldPathSelector int32

const (
	WatchInternetQualityRatingsRequest_FieldPathSelectorType         WatchInternetQualityRatingsRequest_FieldPathSelector = 0
	WatchInternetQualityRatingsRequest_FieldPathSelectorParent       WatchInternetQualityRatingsRequest_FieldPathSelector = 1
	WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize     WatchInternetQualityRatingsRequest_FieldPathSelector = 2
	WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken    WatchInternetQualityRatingsRequest_FieldPathSelector = 3
	WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy      WatchInternetQualityRatingsRequest_FieldPathSelector = 4
	WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken  WatchInternetQualityRatingsRequest_FieldPathSelector = 5
	WatchInternetQualityRatingsRequest_FieldPathSelectorFilter       WatchInternetQualityRatingsRequest_FieldPathSelector = 6
	WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask    WatchInternetQualityRatingsRequest_FieldPathSelector = 7
	WatchInternetQualityRatingsRequest_FieldPathSelectorView         WatchInternetQualityRatingsRequest_FieldPathSelector = 8
	WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize WatchInternetQualityRatingsRequest_FieldPathSelector = 9
)

func (s WatchInternetQualityRatingsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		return "type"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		return "view"
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", s))
	}
}

func BuildWatchInternetQualityRatingsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchInternetQualityRatingsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchInternetQualityRatingsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchInternetQualityRatingsRequest", fp)
}

func ParseWatchInternetQualityRatingsRequest_FieldPath(rawField string) (WatchInternetQualityRatingsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchInternetQualityRatingsRequest_FieldPath(fp)
}

func MustParseWatchInternetQualityRatingsRequest_FieldPath(rawField string) WatchInternetQualityRatingsRequest_FieldPath {
	fp, err := ParseWatchInternetQualityRatingsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchInternetQualityRatingsRequest_FieldTerminalPath struct {
	selector WatchInternetQualityRatingsRequest_FieldPathSelector
}

var _ WatchInternetQualityRatingsRequest_FieldPath = (*WatchInternetQualityRatingsRequest_FieldTerminalPath)(nil)

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) Selector() WatchInternetQualityRatingsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchInternetQualityRatingsRequest
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) Get(source *WatchInternetQualityRatingsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchInternetQualityRatingsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchInternetQualityRatingsRequest
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) GetSingle(source *WatchInternetQualityRatingsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchInternetQualityRatingsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		return (*internet_quality_rating.ParentReference)(nil)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return (*internet_quality_rating.OrderBy)(nil)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return (*internet_quality_rating.Filter)(nil)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) ClearValue(item *WatchInternetQualityRatingsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchInternetQualityRatingsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorType ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorParent ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorView ||
		fp.selector == WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchInternetQualityRatingsRequest_FieldPathValue {
	switch fp.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.ParentReference)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.OrderBy)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Filter)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathValue{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov := &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.ParentReference)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.OrderBy)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.Filter)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchInternetQualityRatingsRequest_FieldPathValue allows storing values for WatchInternetQualityRatingsRequest fields according to their type
type WatchInternetQualityRatingsRequest_FieldPathValue interface {
	WatchInternetQualityRatingsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchInternetQualityRatingsRequest)
	CompareWith(*WatchInternetQualityRatingsRequest) (cmp int, comparable bool)
}

func ParseWatchInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) (WatchInternetQualityRatingsRequest_FieldPathValue, error) {
	fp, err := ParseWatchInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchInternetQualityRatingsRequest_FieldPathValue), nil
}

func MustParseWatchInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr string) WatchInternetQualityRatingsRequest_FieldPathValue {
	fpv, err := ParseWatchInternetQualityRatingsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchInternetQualityRatingsRequest_FieldTerminalPathValue struct {
	WatchInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsRequest_FieldPathValue = (*WatchInternetQualityRatingsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchInternetQualityRatingsRequest' as interface{}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsParentValue() (*internet_quality_rating.ParentReference, bool) {
	res, ok := fpv.value.(*internet_quality_rating.ParentReference)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsOrderByValue() (*internet_quality_rating.OrderBy, bool) {
	res, ok := fpv.value.(*internet_quality_rating.OrderBy)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsFilterValue() (*internet_quality_rating.Filter, bool) {
	res, ok := fpv.value.(*internet_quality_rating.Filter)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchInternetQualityRatingsRequest
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) SetTo(target **WatchInternetQualityRatingsRequest) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingsRequest)
	}
	switch fpv.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*internet_quality_rating.ParentReference)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*internet_quality_rating.OrderBy)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*internet_quality_rating.Filter)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchInternetQualityRatingsRequest_FieldTerminalPathValue' with the value under path in 'WatchInternetQualityRatingsRequest'.
func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWith(source *WatchInternetQualityRatingsRequest) (int, bool) {
	switch fpv.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*internet_quality_rating.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchInternetQualityRatingsRequest))
}

// WatchInternetQualityRatingsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchInternetQualityRatingsRequest according to their type
// Present only for array (repeated) types.
type WatchInternetQualityRatingsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchInternetQualityRatingsRequest_FieldPath
	ContainsValue(*WatchInternetQualityRatingsRequest) bool
}

// ParseWatchInternetQualityRatingsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchInternetQualityRatingsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchInternetQualityRatingsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchInternetQualityRatingsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchInternetQualityRatingsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue struct {
	WatchInternetQualityRatingsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsRequest_FieldPathArrayItemValue = (*WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchInternetQualityRatingsRequest as interface{}
func (fpaiv *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchInternetQualityRatingsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchInternetQualityRatingsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchInternetQualityRatingsRequest'
func (fpaiv *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingsRequest) bool {
	slice := fpaiv.WatchInternetQualityRatingsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchInternetQualityRatingsRequest_FieldPathArrayOfValues allows storing slice of values for WatchInternetQualityRatingsRequest fields according to their type
type WatchInternetQualityRatingsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchInternetQualityRatingsRequest_FieldPath
}

func ParseWatchInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchInternetQualityRatingsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchInternetQualityRatingsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchInternetQualityRatingsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchInternetQualityRatingsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchInternetQualityRatingsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues struct {
	WatchInternetQualityRatingsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchInternetQualityRatingsRequest_FieldPathArrayOfValues = (*WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*internet_quality_rating.ParentReference) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*internet_quality_rating.OrderBy) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*internet_quality_rating.Filter) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*internet_quality_rating.ParentReference, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.ParentReference)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*internet_quality_rating.OrderBy, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.OrderBy)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*internet_quality_rating.Filter, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.Filter)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchInternetQualityRatingsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchInternetQualityRatingsResponse_FieldPathSelector
	Get(source *WatchInternetQualityRatingsResponse) []interface{}
	GetSingle(source *WatchInternetQualityRatingsResponse) (interface{}, bool)
	ClearValue(item *WatchInternetQualityRatingsResponse)

	// Those methods build corresponding WatchInternetQualityRatingsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayItemValue
}

type WatchInternetQualityRatingsResponse_FieldPathSelector int32

const (
	WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges WatchInternetQualityRatingsResponse_FieldPathSelector = 0
	WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent                    WatchInternetQualityRatingsResponse_FieldPathSelector = 1
	WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange              WatchInternetQualityRatingsResponse_FieldPathSelector = 2
	WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken                  WatchInternetQualityRatingsResponse_FieldPathSelector = 3
	WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize                 WatchInternetQualityRatingsResponse_FieldPathSelector = 4
	WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset                  WatchInternetQualityRatingsResponse_FieldPathSelector = 5
	WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset                  WatchInternetQualityRatingsResponse_FieldPathSelector = 6
)

func (s WatchInternetQualityRatingsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return "internet_quality_rating_changes"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", s))
	}
}

func BuildWatchInternetQualityRatingsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchInternetQualityRatingsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchInternetQualityRatingsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "internet_quality_rating_changes", "internetQualityRatingChanges", "internet-quality-rating-changes":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchInternetQualityRatingsResponse_FieldSubPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchInternetQualityRatingsResponse", fp)
}

func ParseWatchInternetQualityRatingsResponse_FieldPath(rawField string) (WatchInternetQualityRatingsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchInternetQualityRatingsResponse_FieldPath(fp)
}

func MustParseWatchInternetQualityRatingsResponse_FieldPath(rawField string) WatchInternetQualityRatingsResponse_FieldPath {
	fp, err := ParseWatchInternetQualityRatingsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchInternetQualityRatingsResponse_FieldTerminalPath struct {
	selector WatchInternetQualityRatingsResponse_FieldPathSelector
}

var _ WatchInternetQualityRatingsResponse_FieldPath = (*WatchInternetQualityRatingsResponse_FieldTerminalPath)(nil)

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) Selector() WatchInternetQualityRatingsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchInternetQualityRatingsResponse
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) Get(source *WatchInternetQualityRatingsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
			for _, value := range source.GetInternetQualityRatingChanges() {
				values = append(values, value)
			}
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchInternetQualityRatingsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchInternetQualityRatingsResponse
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) GetSingle(source *WatchInternetQualityRatingsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		res := source.GetInternetQualityRatingChanges()
		return res, res != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return ([]*internet_quality_rating.InternetQualityRatingChange)(nil)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchInternetQualityRatingsResponse_PageTokenChange)(nil)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) ClearValue(item *WatchInternetQualityRatingsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
			item.InternetQualityRatingChanges = nil
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges ||
		fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathValue {
	switch fp.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.([]*internet_quality_rating.InternetQualityRatingChange)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*WatchInternetQualityRatingsResponse_PageTokenChange)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov := &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([][]*internet_quality_rating.InternetQualityRatingChange)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]*WatchInternetQualityRatingsResponse_PageTokenChange)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return &WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue{WatchInternetQualityRatingsResponse_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRatingChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchInternetQualityRatingsResponse_FieldSubPath struct {
	selector WatchInternetQualityRatingsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchInternetQualityRatingsResponse_FieldPath = (*WatchInternetQualityRatingsResponse_FieldSubPath)(nil)

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) Selector() WatchInternetQualityRatingsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchInternetQualityRatingsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchInternetQualityRatingsResponse
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) Get(source *WatchInternetQualityRatingsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchInternetQualityRatingsResponse))
}

// GetSingle returns value of selected field from source WatchInternetQualityRatingsResponse
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) GetSingle(source *WatchInternetQualityRatingsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fps.selector))
	}
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchInternetQualityRatingsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) ClearValue(item *WatchInternetQualityRatingsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchInternetQualityRatingsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithIValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathValue {
	return &WatchInternetQualityRatingsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayOfValues {
	return &WatchInternetQualityRatingsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsResponse_FieldPathArrayItemValue {
	return &WatchInternetQualityRatingsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchInternetQualityRatingsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchInternetQualityRatingsResponse_FieldPathValue allows storing values for WatchInternetQualityRatingsResponse fields according to their type
type WatchInternetQualityRatingsResponse_FieldPathValue interface {
	WatchInternetQualityRatingsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchInternetQualityRatingsResponse)
	CompareWith(*WatchInternetQualityRatingsResponse) (cmp int, comparable bool)
}

func ParseWatchInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) (WatchInternetQualityRatingsResponse_FieldPathValue, error) {
	fp, err := ParseWatchInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchInternetQualityRatingsResponse_FieldPathValue), nil
}

func MustParseWatchInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr string) WatchInternetQualityRatingsResponse_FieldPathValue {
	fpv, err := ParseWatchInternetQualityRatingsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchInternetQualityRatingsResponse_FieldTerminalPathValue struct {
	WatchInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsResponse_FieldPathValue = (*WatchInternetQualityRatingsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchInternetQualityRatingsResponse' as interface{}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsInternetQualityRatingChangesValue() ([]*internet_quality_rating.InternetQualityRatingChange, bool) {
	res, ok := fpv.value.([]*internet_quality_rating.InternetQualityRatingChange)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchInternetQualityRatingsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchInternetQualityRatingsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchInternetQualityRatingsResponse
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) SetTo(target **WatchInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingsResponse)
	}
	switch fpv.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		(*target).InternetQualityRatingChanges = fpv.value.([]*internet_quality_rating.InternetQualityRatingChange)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchInternetQualityRatingsResponse_PageTokenChange)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchInternetQualityRatingsResponse_FieldTerminalPathValue' with the value under path in 'WatchInternetQualityRatingsResponse'.
func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWith(source *WatchInternetQualityRatingsResponse) (int, bool) {
	switch fpv.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		return 0, false
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchInternetQualityRatingsResponse))
}

type WatchInternetQualityRatingsResponse_FieldSubPathValue struct {
	WatchInternetQualityRatingsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchInternetQualityRatingsResponse_FieldPathValue = (*WatchInternetQualityRatingsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) SetTo(target **WatchInternetQualityRatingsResponse) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingsResponse)
	}
	switch fpvs.Selector() {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) CompareWith(source *WatchInternetQualityRatingsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchInternetQualityRatingsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchInternetQualityRatingsResponse))
}

// WatchInternetQualityRatingsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchInternetQualityRatingsResponse according to their type
// Present only for array (repeated) types.
type WatchInternetQualityRatingsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchInternetQualityRatingsResponse_FieldPath
	ContainsValue(*WatchInternetQualityRatingsResponse) bool
}

// ParseWatchInternetQualityRatingsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchInternetQualityRatingsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchInternetQualityRatingsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchInternetQualityRatingsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchInternetQualityRatingsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue struct {
	WatchInternetQualityRatingsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsResponse_FieldPathArrayItemValue = (*WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchInternetQualityRatingsResponse as interface{}
func (fpaiv *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) AsInternetQualityRatingChangesItemValue() (*internet_quality_rating.InternetQualityRatingChange, bool) {
	res, ok := fpaiv.value.(*internet_quality_rating.InternetQualityRatingChange)
	return res, ok
}

func (fpaiv *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchInternetQualityRatingsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchInternetQualityRatingsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchInternetQualityRatingsResponse'
func (fpaiv *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingsResponse) bool {
	slice := fpaiv.WatchInternetQualityRatingsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchInternetQualityRatingsResponse_FieldSubPathArrayItemValue struct {
	WatchInternetQualityRatingsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchInternetQualityRatingsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchInternetQualityRatingsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchInternetQualityRatingsResponse'
func (fpaivs *WatchInternetQualityRatingsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingsResponse) bool {
	switch fpaivs.Selector() {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse: %d", fpaivs.Selector()))
	}
}

// WatchInternetQualityRatingsResponse_FieldPathArrayOfValues allows storing slice of values for WatchInternetQualityRatingsResponse fields according to their type
type WatchInternetQualityRatingsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchInternetQualityRatingsResponse_FieldPath
}

func ParseWatchInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchInternetQualityRatingsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchInternetQualityRatingsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchInternetQualityRatingsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchInternetQualityRatingsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchInternetQualityRatingsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchInternetQualityRatingsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues struct {
	WatchInternetQualityRatingsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchInternetQualityRatingsResponse_FieldPathArrayOfValues = (*WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
		for _, v := range fpaov.values.([][]*internet_quality_rating.InternetQualityRatingChange) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchInternetQualityRatingsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsInternetQualityRatingChangesArrayOfValues() ([][]*internet_quality_rating.InternetQualityRatingChange, bool) {
	res, ok := fpaov.values.([][]*internet_quality_rating.InternetQualityRatingChange)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchInternetQualityRatingsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchInternetQualityRatingsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchInternetQualityRatingsResponse_FieldSubPathArrayOfValues struct {
	WatchInternetQualityRatingsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchInternetQualityRatingsResponse_FieldPathArrayOfValues = (*WatchInternetQualityRatingsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchInternetQualityRatingsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchInternetQualityRatingsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchInternetQualityRatingsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchInternetQualityRatingsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchInternetQualityRatingsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchInternetQualityRatingsResponse_PageTokenChange)

	// Those methods build corresponding WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector = 0
	WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchInternetQualityRatingsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchInternetQualityRatingsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchInternetQualityRatingsResponse_PageTokenChange", fp)
}

func ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(rawField string) (WatchInternetQualityRatingsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(rawField string) WatchInternetQualityRatingsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector
}

var _ WatchInternetQualityRatingsResponsePageTokenChange_FieldPath = (*WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) Selector() WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchInternetQualityRatingsResponse_PageTokenChange
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchInternetQualityRatingsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchInternetQualityRatingsResponse_PageTokenChange
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchInternetQualityRatingsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*internet_quality_rating.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchInternetQualityRatingsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue{WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue{WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue interface {
	WatchInternetQualityRatingsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchInternetQualityRatingsResponse_PageTokenChange)
	CompareWith(*WatchInternetQualityRatingsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsResponsePageTokenChange_FieldPathValue = (*WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpv.value.(*internet_quality_rating.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchInternetQualityRatingsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchInternetQualityRatingsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*internet_quality_rating.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchInternetQualityRatingsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchInternetQualityRatingsResponse_PageTokenChange'.
func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchInternetQualityRatingsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchInternetQualityRatingsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

// WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchInternetQualityRatingsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchInternetQualityRatingsResponse_PageTokenChange) bool
}

// ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchInternetQualityRatingsResponse_PageTokenChange as interface{}
func (fpaiv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchInternetQualityRatingsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchInternetQualityRatingsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchInternetQualityRatingsResponsePageTokenChange_FieldPath
}

func ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchInternetQualityRatingsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*internet_quality_rating.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}
func (fpaov *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*internet_quality_rating.PagerCursor, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateInternetQualityRatingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateInternetQualityRatingRequest_FieldPathSelector
	Get(source *CreateInternetQualityRatingRequest) []interface{}
	GetSingle(source *CreateInternetQualityRatingRequest) (interface{}, bool)
	ClearValue(item *CreateInternetQualityRatingRequest)

	// Those methods build corresponding CreateInternetQualityRatingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateInternetQualityRatingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathArrayItemValue
}

type CreateInternetQualityRatingRequest_FieldPathSelector int32

const (
	CreateInternetQualityRatingRequest_FieldPathSelectorParent                CreateInternetQualityRatingRequest_FieldPathSelector = 0
	CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating CreateInternetQualityRatingRequest_FieldPathSelector = 1
)

func (s CreateInternetQualityRatingRequest_FieldPathSelector) String() string {
	switch s {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		return "parent"
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return "internet_quality_rating"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", s))
	}
}

func BuildCreateInternetQualityRatingRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateInternetQualityRatingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateInternetQualityRatingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorParent}, nil
		case "internet_quality_rating", "internetQualityRating", "internet-quality-rating":
			return &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating}, nil
		}
	} else {
		switch fp[0] {
		case "internet_quality_rating", "internetQualityRating", "internet-quality-rating":
			if subpath, err := internet_quality_rating.BuildInternetQualityRating_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateInternetQualityRatingRequest_FieldSubPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateInternetQualityRatingRequest", fp)
}

func ParseCreateInternetQualityRatingRequest_FieldPath(rawField string) (CreateInternetQualityRatingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateInternetQualityRatingRequest_FieldPath(fp)
}

func MustParseCreateInternetQualityRatingRequest_FieldPath(rawField string) CreateInternetQualityRatingRequest_FieldPath {
	fp, err := ParseCreateInternetQualityRatingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateInternetQualityRatingRequest_FieldTerminalPath struct {
	selector CreateInternetQualityRatingRequest_FieldPathSelector
}

var _ CreateInternetQualityRatingRequest_FieldPath = (*CreateInternetQualityRatingRequest_FieldTerminalPath)(nil)

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) Selector() CreateInternetQualityRatingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateInternetQualityRatingRequest
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) Get(source *CreateInternetQualityRatingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			if source.InternetQualityRating != nil {
				values = append(values, source.InternetQualityRating)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateInternetQualityRatingRequest))
}

// GetSingle returns value pointed by specific field of from source CreateInternetQualityRatingRequest
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) GetSingle(source *CreateInternetQualityRatingRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		res := source.GetInternetQualityRating()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		return (*internet_quality_rating.ParentReference)(nil)
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return (*internet_quality_rating.InternetQualityRating)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) ClearValue(item *CreateInternetQualityRatingRequest) {
	if item != nil {
		switch fp.selector {
		case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			item.InternetQualityRating = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateInternetQualityRatingRequest_FieldPathSelectorParent
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithIValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathValue {
	switch fp.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		return &CreateInternetQualityRatingRequest_FieldTerminalPathValue{CreateInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.ParentReference)}
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return &CreateInternetQualityRatingRequest_FieldTerminalPathValue{CreateInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov := &CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{CreateInternetQualityRatingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		return &CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{CreateInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.ParentReference)}
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return &CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{CreateInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *CreateInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateInternetQualityRatingRequest_FieldSubPath struct {
	selector CreateInternetQualityRatingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateInternetQualityRatingRequest_FieldPath = (*CreateInternetQualityRatingRequest_FieldSubPath)(nil)

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) Selector() CreateInternetQualityRatingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) AsInternetQualityRatingSubPath() (internet_quality_rating.InternetQualityRating_FieldPath, bool) {
	res, ok := fps.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateInternetQualityRatingRequest
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) Get(source *CreateInternetQualityRatingRequest) (values []interface{}) {
	if asInternetQualityRatingFieldPath, ok := fps.AsInternetQualityRatingSubPath(); ok {
		values = append(values, asInternetQualityRatingFieldPath.Get(source.GetInternetQualityRating())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateInternetQualityRatingRequest))
}

// GetSingle returns value of selected field from source CreateInternetQualityRatingRequest
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) GetSingle(source *CreateInternetQualityRatingRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		if source.GetInternetQualityRating() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternetQualityRating())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fps.selector))
	}
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) ClearValue(item *CreateInternetQualityRatingRequest) {
	if item != nil {
		switch fps.selector {
		case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			fps.subPath.ClearValueRaw(item.InternetQualityRating)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateInternetQualityRatingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithIValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathValue {
	return &CreateInternetQualityRatingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateInternetQualityRatingRequest_FieldPathArrayOfValues {
	return &CreateInternetQualityRatingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateInternetQualityRatingRequest_FieldPathArrayItemValue {
	return &CreateInternetQualityRatingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateInternetQualityRatingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateInternetQualityRatingRequest_FieldPathValue allows storing values for CreateInternetQualityRatingRequest fields according to their type
type CreateInternetQualityRatingRequest_FieldPathValue interface {
	CreateInternetQualityRatingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateInternetQualityRatingRequest)
	CompareWith(*CreateInternetQualityRatingRequest) (cmp int, comparable bool)
}

func ParseCreateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) (CreateInternetQualityRatingRequest_FieldPathValue, error) {
	fp, err := ParseCreateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateInternetQualityRatingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateInternetQualityRatingRequest_FieldPathValue), nil
}

func MustParseCreateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) CreateInternetQualityRatingRequest_FieldPathValue {
	fpv, err := ParseCreateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateInternetQualityRatingRequest_FieldTerminalPathValue struct {
	CreateInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateInternetQualityRatingRequest_FieldPathValue = (*CreateInternetQualityRatingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateInternetQualityRatingRequest' as interface{}
func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) AsParentValue() (*internet_quality_rating.ParentReference, bool) {
	res, ok := fpv.value.(*internet_quality_rating.ParentReference)
	return res, ok
}
func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) AsInternetQualityRatingValue() (*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating)
	return res, ok
}

// SetTo stores value for selected field for object CreateInternetQualityRatingRequest
func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) SetTo(target **CreateInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(CreateInternetQualityRatingRequest)
	}
	switch fpv.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*internet_quality_rating.ParentReference)
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		(*target).InternetQualityRating = fpv.value.(*internet_quality_rating.InternetQualityRating)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateInternetQualityRatingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateInternetQualityRatingRequest_FieldTerminalPathValue' with the value under path in 'CreateInternetQualityRatingRequest'.
func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) CompareWith(source *CreateInternetQualityRatingRequest) (int, bool) {
	switch fpv.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*internet_quality_rating.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *CreateInternetQualityRatingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateInternetQualityRatingRequest))
}

type CreateInternetQualityRatingRequest_FieldSubPathValue struct {
	CreateInternetQualityRatingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateInternetQualityRatingRequest_FieldPathValue = (*CreateInternetQualityRatingRequest_FieldSubPathValue)(nil)

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) AsInternetQualityRatingPathValue() (internet_quality_rating.InternetQualityRating_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue)
	return res, ok
}

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) SetTo(target **CreateInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(CreateInternetQualityRatingRequest)
	}
	switch fpvs.Selector() {
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).SetTo(&(*target).InternetQualityRating)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateInternetQualityRatingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) CompareWith(source *CreateInternetQualityRatingRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).CompareWith(source.GetInternetQualityRating())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateInternetQualityRatingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateInternetQualityRatingRequest))
}

// CreateInternetQualityRatingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateInternetQualityRatingRequest according to their type
// Present only for array (repeated) types.
type CreateInternetQualityRatingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateInternetQualityRatingRequest_FieldPath
	ContainsValue(*CreateInternetQualityRatingRequest) bool
}

// ParseCreateInternetQualityRatingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateInternetQualityRatingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateInternetQualityRatingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateInternetQualityRatingRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateInternetQualityRatingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue struct {
	CreateInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ CreateInternetQualityRatingRequest_FieldPathArrayItemValue = (*CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateInternetQualityRatingRequest as interface{}
func (fpaiv *CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateInternetQualityRatingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateInternetQualityRatingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateInternetQualityRatingRequest'
func (fpaiv *CreateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateInternetQualityRatingRequest) bool {
	slice := fpaiv.CreateInternetQualityRatingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateInternetQualityRatingRequest_FieldSubPathArrayItemValue struct {
	CreateInternetQualityRatingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateInternetQualityRatingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateInternetQualityRatingRequest_FieldSubPathArrayItemValue) AsInternetQualityRatingPathItemValue() (internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateInternetQualityRatingRequest'
func (fpaivs *CreateInternetQualityRatingRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateInternetQualityRatingRequest) bool {
	switch fpaivs.Selector() {
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue).ContainsValue(source.GetInternetQualityRating())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateInternetQualityRatingRequest: %d", fpaivs.Selector()))
	}
}

// CreateInternetQualityRatingRequest_FieldPathArrayOfValues allows storing slice of values for CreateInternetQualityRatingRequest fields according to their type
type CreateInternetQualityRatingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateInternetQualityRatingRequest_FieldPath
}

func ParseCreateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateInternetQualityRatingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateInternetQualityRatingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateInternetQualityRatingRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues struct {
	CreateInternetQualityRatingRequest_FieldTerminalPath
	values interface{}
}

var _ CreateInternetQualityRatingRequest_FieldPathArrayOfValues = (*CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*internet_quality_rating.ParentReference) {
			values = append(values, v)
		}
	case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*internet_quality_rating.ParentReference, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.ParentReference)
	return res, ok
}
func (fpaov *CreateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsInternetQualityRatingArrayOfValues() ([]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating)
	return res, ok
}

type CreateInternetQualityRatingRequest_FieldSubPathArrayOfValues struct {
	CreateInternetQualityRatingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateInternetQualityRatingRequest_FieldPathArrayOfValues = (*CreateInternetQualityRatingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateInternetQualityRatingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateInternetQualityRatingRequest_FieldSubPathArrayOfValues) AsInternetQualityRatingPathArrayOfValues() (internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateInternetQualityRatingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateInternetQualityRatingRequest_FieldPathSelector
	Get(source *UpdateInternetQualityRatingRequest) []interface{}
	GetSingle(source *UpdateInternetQualityRatingRequest) (interface{}, bool)
	ClearValue(item *UpdateInternetQualityRatingRequest)

	// Those methods build corresponding UpdateInternetQualityRatingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayItemValue
}

type UpdateInternetQualityRatingRequest_FieldPathSelector int32

const (
	UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating UpdateInternetQualityRatingRequest_FieldPathSelector = 0
	UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask            UpdateInternetQualityRatingRequest_FieldPathSelector = 1
	UpdateInternetQualityRatingRequest_FieldPathSelectorCas                   UpdateInternetQualityRatingRequest_FieldPathSelector = 2
)

func (s UpdateInternetQualityRatingRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return "internet_quality_rating"
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", s))
	}
}

func BuildUpdateInternetQualityRatingRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateInternetQualityRatingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateInternetQualityRatingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "internet_quality_rating", "internetQualityRating", "internet-quality-rating":
			return &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "internet_quality_rating", "internetQualityRating", "internet-quality-rating":
			if subpath, err := internet_quality_rating.BuildInternetQualityRating_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateInternetQualityRatingRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateInternetQualityRatingRequest", fp)
}

func ParseUpdateInternetQualityRatingRequest_FieldPath(rawField string) (UpdateInternetQualityRatingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateInternetQualityRatingRequest_FieldPath(fp)
}

func MustParseUpdateInternetQualityRatingRequest_FieldPath(rawField string) UpdateInternetQualityRatingRequest_FieldPath {
	fp, err := ParseUpdateInternetQualityRatingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateInternetQualityRatingRequest_FieldTerminalPath struct {
	selector UpdateInternetQualityRatingRequest_FieldPathSelector
}

var _ UpdateInternetQualityRatingRequest_FieldPath = (*UpdateInternetQualityRatingRequest_FieldTerminalPath)(nil)

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) Selector() UpdateInternetQualityRatingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateInternetQualityRatingRequest
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) Get(source *UpdateInternetQualityRatingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			if source.InternetQualityRating != nil {
				values = append(values, source.InternetQualityRating)
			}
		case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateInternetQualityRatingRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateInternetQualityRatingRequest
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) GetSingle(source *UpdateInternetQualityRatingRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		res := source.GetInternetQualityRating()
		return res, res != nil
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return (*internet_quality_rating.InternetQualityRating)(nil)
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return (*UpdateInternetQualityRatingRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) ClearValue(item *UpdateInternetQualityRatingRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			item.InternetQualityRating = nil
		case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathValue {
	switch fp.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathValue{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating)}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathValue{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathValue{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*UpdateInternetQualityRatingRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov := &UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating)}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return &UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*UpdateInternetQualityRatingRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateInternetQualityRatingRequest_FieldSubPath struct {
	selector UpdateInternetQualityRatingRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateInternetQualityRatingRequest_FieldPath = (*UpdateInternetQualityRatingRequest_FieldSubPath)(nil)

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) Selector() UpdateInternetQualityRatingRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) AsInternetQualityRatingSubPath() (internet_quality_rating.InternetQualityRating_FieldPath, bool) {
	res, ok := fps.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)
	return res, ok
}
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) AsCasSubPath() (UpdateInternetQualityRatingRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateInternetQualityRatingRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateInternetQualityRatingRequest
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) Get(source *UpdateInternetQualityRatingRequest) (values []interface{}) {
	if asInternetQualityRatingFieldPath, ok := fps.AsInternetQualityRatingSubPath(); ok {
		values = append(values, asInternetQualityRatingFieldPath.Get(source.GetInternetQualityRating())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateInternetQualityRatingRequest))
}

// GetSingle returns value of selected field from source UpdateInternetQualityRatingRequest
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) GetSingle(source *UpdateInternetQualityRatingRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		if source.GetInternetQualityRating() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInternetQualityRating())
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fps.selector))
	}
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) ClearValue(item *UpdateInternetQualityRatingRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			fps.subPath.ClearValueRaw(item.InternetQualityRating)
		case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithIValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathValue {
	return &UpdateInternetQualityRatingRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayOfValues {
	return &UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequest_FieldPathArrayItemValue {
	return &UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateInternetQualityRatingRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateInternetQualityRatingRequest_FieldPathValue allows storing values for UpdateInternetQualityRatingRequest fields according to their type
type UpdateInternetQualityRatingRequest_FieldPathValue interface {
	UpdateInternetQualityRatingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateInternetQualityRatingRequest)
	CompareWith(*UpdateInternetQualityRatingRequest) (cmp int, comparable bool)
}

func ParseUpdateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) (UpdateInternetQualityRatingRequest_FieldPathValue, error) {
	fp, err := ParseUpdateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateInternetQualityRatingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateInternetQualityRatingRequest_FieldPathValue), nil
}

func MustParseUpdateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) UpdateInternetQualityRatingRequest_FieldPathValue {
	fpv, err := ParseUpdateInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateInternetQualityRatingRequest_FieldTerminalPathValue struct {
	UpdateInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateInternetQualityRatingRequest_FieldPathValue = (*UpdateInternetQualityRatingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateInternetQualityRatingRequest' as interface{}
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) AsInternetQualityRatingValue() (*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) AsCasValue() (*UpdateInternetQualityRatingRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateInternetQualityRatingRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateInternetQualityRatingRequest
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) SetTo(target **UpdateInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(UpdateInternetQualityRatingRequest)
	}
	switch fpv.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		(*target).InternetQualityRating = fpv.value.(*internet_quality_rating.InternetQualityRating)
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateInternetQualityRatingRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateInternetQualityRatingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateInternetQualityRatingRequest_FieldTerminalPathValue' with the value under path in 'UpdateInternetQualityRatingRequest'.
func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) CompareWith(source *UpdateInternetQualityRatingRequest) (int, bool) {
	switch fpv.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return 0, false
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateInternetQualityRatingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateInternetQualityRatingRequest))
}

type UpdateInternetQualityRatingRequest_FieldSubPathValue struct {
	UpdateInternetQualityRatingRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateInternetQualityRatingRequest_FieldPathValue = (*UpdateInternetQualityRatingRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) AsInternetQualityRatingPathValue() (internet_quality_rating.InternetQualityRating_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) AsCasPathValue() (UpdateInternetQualityRatingRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateInternetQualityRatingRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) SetTo(target **UpdateInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(UpdateInternetQualityRatingRequest)
	}
	switch fpvs.Selector() {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).SetTo(&(*target).InternetQualityRating)
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateInternetQualityRatingRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateInternetQualityRatingRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) CompareWith(source *UpdateInternetQualityRatingRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).CompareWith(source.GetInternetQualityRating())
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateInternetQualityRatingRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateInternetQualityRatingRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateInternetQualityRatingRequest))
}

// UpdateInternetQualityRatingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateInternetQualityRatingRequest according to their type
// Present only for array (repeated) types.
type UpdateInternetQualityRatingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateInternetQualityRatingRequest_FieldPath
	ContainsValue(*UpdateInternetQualityRatingRequest) bool
}

// ParseUpdateInternetQualityRatingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateInternetQualityRatingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateInternetQualityRatingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateInternetQualityRatingRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateInternetQualityRatingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue struct {
	UpdateInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateInternetQualityRatingRequest_FieldPathArrayItemValue = (*UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateInternetQualityRatingRequest as interface{}
func (fpaiv *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateInternetQualityRatingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateInternetQualityRatingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateInternetQualityRatingRequest'
func (fpaiv *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateInternetQualityRatingRequest) bool {
	slice := fpaiv.UpdateInternetQualityRatingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue struct {
	UpdateInternetQualityRatingRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue) AsInternetQualityRatingPathItemValue() (internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateInternetQualityRatingRequest'
func (fpaivs *UpdateInternetQualityRatingRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateInternetQualityRatingRequest) bool {
	switch fpaivs.Selector() {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		return fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue).ContainsValue(source.GetInternetQualityRating())
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest: %d", fpaivs.Selector()))
	}
}

// UpdateInternetQualityRatingRequest_FieldPathArrayOfValues allows storing slice of values for UpdateInternetQualityRatingRequest fields according to their type
type UpdateInternetQualityRatingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateInternetQualityRatingRequest_FieldPath
}

func ParseUpdateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateInternetQualityRatingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateInternetQualityRatingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateInternetQualityRatingRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues struct {
	UpdateInternetQualityRatingRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateInternetQualityRatingRequest_FieldPathArrayOfValues = (*UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating) {
			values = append(values, v)
		}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateInternetQualityRatingRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsInternetQualityRatingArrayOfValues() ([]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpaov *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}
func (fpaov *UpdateInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateInternetQualityRatingRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateInternetQualityRatingRequest_CAS)
	return res, ok
}

type UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues struct {
	UpdateInternetQualityRatingRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateInternetQualityRatingRequest_FieldPathArrayOfValues = (*UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues) AsInternetQualityRatingPathArrayOfValues() (internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateInternetQualityRatingRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateInternetQualityRatingRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateInternetQualityRatingRequestCAS_FieldPathSelector
	Get(source *UpdateInternetQualityRatingRequest_CAS) []interface{}
	GetSingle(source *UpdateInternetQualityRatingRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateInternetQualityRatingRequest_CAS)

	// Those methods build corresponding UpdateInternetQualityRatingRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue
}

type UpdateInternetQualityRatingRequestCAS_FieldPathSelector int32

const (
	UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState UpdateInternetQualityRatingRequestCAS_FieldPathSelector = 0
	UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask        UpdateInternetQualityRatingRequestCAS_FieldPathSelector = 1
)

func (s UpdateInternetQualityRatingRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", s))
	}
}

func BuildUpdateInternetQualityRatingRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateInternetQualityRatingRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateInternetQualityRatingRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := internet_quality_rating.BuildInternetQualityRating_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateInternetQualityRatingRequestCAS_FieldSubPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateInternetQualityRatingRequest_CAS", fp)
}

func ParseUpdateInternetQualityRatingRequestCAS_FieldPath(rawField string) (UpdateInternetQualityRatingRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateInternetQualityRatingRequestCAS_FieldPath(fp)
}

func MustParseUpdateInternetQualityRatingRequestCAS_FieldPath(rawField string) UpdateInternetQualityRatingRequestCAS_FieldPath {
	fp, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateInternetQualityRatingRequestCAS_FieldTerminalPath struct {
	selector UpdateInternetQualityRatingRequestCAS_FieldPathSelector
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPath = (*UpdateInternetQualityRatingRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) Selector() UpdateInternetQualityRatingRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateInternetQualityRatingRequest_CAS
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) Get(source *UpdateInternetQualityRatingRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateInternetQualityRatingRequest_CAS
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) GetSingle(source *UpdateInternetQualityRatingRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return (*internet_quality_rating.InternetQualityRating)(nil)
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		return (*internet_quality_rating.InternetQualityRating_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) ClearValue(item *UpdateInternetQualityRatingRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateInternetQualityRatingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue{UpdateInternetQualityRatingRequestCAS_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating)}
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue{UpdateInternetQualityRatingRequestCAS_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.InternetQualityRating_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequestCAS_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating)}
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues{UpdateInternetQualityRatingRequestCAS_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.InternetQualityRating_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateInternetQualityRatingRequestCAS_FieldSubPath struct {
	selector UpdateInternetQualityRatingRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPath = (*UpdateInternetQualityRatingRequestCAS_FieldSubPath)(nil)

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) Selector() UpdateInternetQualityRatingRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) AsConditionalStateSubPath() (internet_quality_rating.InternetQualityRating_FieldPath, bool) {
	res, ok := fps.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateInternetQualityRatingRequest_CAS
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) Get(source *UpdateInternetQualityRatingRequest_CAS) (values []interface{}) {
	if asInternetQualityRatingFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asInternetQualityRatingFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateInternetQualityRatingRequest_CAS
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) GetSingle(source *UpdateInternetQualityRatingRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) ClearValue(item *UpdateInternetQualityRatingRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateInternetQualityRatingRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathValue {
	return &UpdateInternetQualityRatingRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues {
	return &UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue {
	return &UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateInternetQualityRatingRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateInternetQualityRatingRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateInternetQualityRatingRequestCAS_FieldPathValue interface {
	UpdateInternetQualityRatingRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateInternetQualityRatingRequest_CAS)
	CompareWith(*UpdateInternetQualityRatingRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateInternetQualityRatingRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateInternetQualityRatingRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateInternetQualityRatingRequestCAS_FieldPathValue), nil
}

func MustParseUpdateInternetQualityRatingRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateInternetQualityRatingRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue struct {
	UpdateInternetQualityRatingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPathValue = (*UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateInternetQualityRatingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateInternetQualityRatingRequest_CAS)
	}
	switch fpv.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*internet_quality_rating.InternetQualityRating)
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*internet_quality_rating.InternetQualityRating_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateInternetQualityRatingRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateInternetQualityRatingRequest_CAS'.
func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateInternetQualityRatingRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateInternetQualityRatingRequest_CAS))
}

type UpdateInternetQualityRatingRequestCAS_FieldSubPathValue struct {
	UpdateInternetQualityRatingRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPathValue = (*UpdateInternetQualityRatingRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (internet_quality_rating.InternetQualityRating_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) SetTo(target **UpdateInternetQualityRatingRequest_CAS) {
	if *target == nil {
		*target = new(UpdateInternetQualityRatingRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateInternetQualityRatingRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) CompareWith(source *UpdateInternetQualityRatingRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(internet_quality_rating.InternetQualityRating_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateInternetQualityRatingRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateInternetQualityRatingRequestCAS_FieldPath
	ContainsValue(*UpdateInternetQualityRatingRequest_CAS) bool
}

// ParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateInternetQualityRatingRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPathArrayItemValue = (*UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateInternetQualityRatingRequest_CAS as interface{}
func (fpaiv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateInternetQualityRatingRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateInternetQualityRatingRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateInternetQualityRatingRequest_CAS) bool {
	slice := fpaiv.UpdateInternetQualityRatingRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateInternetQualityRatingRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateInternetQualityRatingRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(internet_quality_rating.InternetQualityRating_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateInternetQualityRatingRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateInternetQualityRatingRequestCAS_FieldPath
}

func ParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateInternetQualityRatingRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues = (*UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating) {
			values = append(values, v)
		}
	case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*internet_quality_rating.InternetQualityRating, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating)
	return res, ok
}
func (fpaov *UpdateInternetQualityRatingRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*internet_quality_rating.InternetQualityRating_FieldMask, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.InternetQualityRating_FieldMask)
	return res, ok
}

type UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateInternetQualityRatingRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateInternetQualityRatingRequestCAS_FieldPathArrayOfValues = (*UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateInternetQualityRatingRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(internet_quality_rating.InternetQualityRating_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteInternetQualityRatingRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteInternetQualityRatingRequest_FieldPathSelector
	Get(source *DeleteInternetQualityRatingRequest) []interface{}
	GetSingle(source *DeleteInternetQualityRatingRequest) (interface{}, bool)
	ClearValue(item *DeleteInternetQualityRatingRequest)

	// Those methods build corresponding DeleteInternetQualityRatingRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteInternetQualityRatingRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteInternetQualityRatingRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteInternetQualityRatingRequest_FieldPathArrayItemValue
}

type DeleteInternetQualityRatingRequest_FieldPathSelector int32

const (
	DeleteInternetQualityRatingRequest_FieldPathSelectorName DeleteInternetQualityRatingRequest_FieldPathSelector = 0
)

func (s DeleteInternetQualityRatingRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", s))
	}
}

func BuildDeleteInternetQualityRatingRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteInternetQualityRatingRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteInternetQualityRatingRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteInternetQualityRatingRequest_FieldTerminalPath{selector: DeleteInternetQualityRatingRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteInternetQualityRatingRequest", fp)
}

func ParseDeleteInternetQualityRatingRequest_FieldPath(rawField string) (DeleteInternetQualityRatingRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteInternetQualityRatingRequest_FieldPath(fp)
}

func MustParseDeleteInternetQualityRatingRequest_FieldPath(rawField string) DeleteInternetQualityRatingRequest_FieldPath {
	fp, err := ParseDeleteInternetQualityRatingRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteInternetQualityRatingRequest_FieldTerminalPath struct {
	selector DeleteInternetQualityRatingRequest_FieldPathSelector
}

var _ DeleteInternetQualityRatingRequest_FieldPath = (*DeleteInternetQualityRatingRequest_FieldTerminalPath)(nil)

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) Selector() DeleteInternetQualityRatingRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteInternetQualityRatingRequest
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) Get(source *DeleteInternetQualityRatingRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteInternetQualityRatingRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteInternetQualityRatingRequest
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) GetSingle(source *DeleteInternetQualityRatingRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteInternetQualityRatingRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		return (*internet_quality_rating.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) ClearValue(item *DeleteInternetQualityRatingRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteInternetQualityRatingRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteInternetQualityRatingRequest_FieldPathSelectorName
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteInternetQualityRatingRequest_FieldPathValue {
	switch fp.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		return &DeleteInternetQualityRatingRequest_FieldTerminalPathValue{DeleteInternetQualityRatingRequest_FieldTerminalPath: *fp, value: value.(*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov := &DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{DeleteInternetQualityRatingRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		return &DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues{DeleteInternetQualityRatingRequest_FieldTerminalPath: *fp, values: values.([]*internet_quality_rating.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteInternetQualityRatingRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fp.selector))
	}
}

func (fp *DeleteInternetQualityRatingRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteInternetQualityRatingRequest_FieldPathValue allows storing values for DeleteInternetQualityRatingRequest fields according to their type
type DeleteInternetQualityRatingRequest_FieldPathValue interface {
	DeleteInternetQualityRatingRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteInternetQualityRatingRequest)
	CompareWith(*DeleteInternetQualityRatingRequest) (cmp int, comparable bool)
}

func ParseDeleteInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) (DeleteInternetQualityRatingRequest_FieldPathValue, error) {
	fp, err := ParseDeleteInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteInternetQualityRatingRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteInternetQualityRatingRequest_FieldPathValue), nil
}

func MustParseDeleteInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr string) DeleteInternetQualityRatingRequest_FieldPathValue {
	fpv, err := ParseDeleteInternetQualityRatingRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteInternetQualityRatingRequest_FieldTerminalPathValue struct {
	DeleteInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteInternetQualityRatingRequest_FieldPathValue = (*DeleteInternetQualityRatingRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteInternetQualityRatingRequest' as interface{}
func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) AsNameValue() (*internet_quality_rating.Reference, bool) {
	res, ok := fpv.value.(*internet_quality_rating.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteInternetQualityRatingRequest
func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) SetTo(target **DeleteInternetQualityRatingRequest) {
	if *target == nil {
		*target = new(DeleteInternetQualityRatingRequest)
	}
	switch fpv.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*internet_quality_rating.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteInternetQualityRatingRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteInternetQualityRatingRequest_FieldTerminalPathValue' with the value under path in 'DeleteInternetQualityRatingRequest'.
func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) CompareWith(source *DeleteInternetQualityRatingRequest) (int, bool) {
	switch fpv.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*internet_quality_rating.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteInternetQualityRatingRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteInternetQualityRatingRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteInternetQualityRatingRequest))
}

// DeleteInternetQualityRatingRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteInternetQualityRatingRequest according to their type
// Present only for array (repeated) types.
type DeleteInternetQualityRatingRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteInternetQualityRatingRequest_FieldPath
	ContainsValue(*DeleteInternetQualityRatingRequest) bool
}

// ParseDeleteInternetQualityRatingRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteInternetQualityRatingRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteInternetQualityRatingRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteInternetQualityRatingRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteInternetQualityRatingRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteInternetQualityRatingRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue struct {
	DeleteInternetQualityRatingRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteInternetQualityRatingRequest_FieldPathArrayItemValue = (*DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteInternetQualityRatingRequest as interface{}
func (fpaiv *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteInternetQualityRatingRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteInternetQualityRatingRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteInternetQualityRatingRequest'
func (fpaiv *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteInternetQualityRatingRequest) bool {
	slice := fpaiv.DeleteInternetQualityRatingRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteInternetQualityRatingRequest_FieldPathArrayOfValues allows storing slice of values for DeleteInternetQualityRatingRequest fields according to their type
type DeleteInternetQualityRatingRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteInternetQualityRatingRequest_FieldPath
}

func ParseDeleteInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteInternetQualityRatingRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteInternetQualityRatingRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteInternetQualityRatingRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteInternetQualityRatingRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteInternetQualityRatingRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteInternetQualityRatingRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues struct {
	DeleteInternetQualityRatingRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteInternetQualityRatingRequest_FieldPathArrayOfValues = (*DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*internet_quality_rating.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteInternetQualityRatingRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*internet_quality_rating.Reference, bool) {
	res, ok := fpaov.values.([]*internet_quality_rating.Reference)
	return res, ok
}
