// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/internet_quality_rating_service.proto
// DO NOT EDIT!!!

package internet_quality_rating_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	internet_quality_rating "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/internet_quality_rating"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &internet_quality_rating.InternetQualityRating{}
	_ = &probe.Probe{}
)

type GetInternetQualityRatingRequest_FieldMask struct {
	Paths []GetInternetQualityRatingRequest_FieldPath
}

func FullGetInternetQualityRatingRequest_FieldMask() *GetInternetQualityRatingRequest_FieldMask {
	res := &GetInternetQualityRatingRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetInternetQualityRatingRequest_FieldTerminalPath{selector: GetInternetQualityRatingRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetInternetQualityRatingRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetInternetQualityRatingRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetInternetQualityRatingRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetInternetQualityRatingRequest_FieldPath(raw)
	})
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Subtract(other *GetInternetQualityRatingRequest_FieldMask) *GetInternetQualityRatingRequest_FieldMask {
	result := &GetInternetQualityRatingRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetInternetQualityRatingRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetInternetQualityRatingRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetInternetQualityRatingRequest_FieldMask) FilterInputFields() *GetInternetQualityRatingRequest_FieldMask {
	result := &GetInternetQualityRatingRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetInternetQualityRatingRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetInternetQualityRatingRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetInternetQualityRatingRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetInternetQualityRatingRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetInternetQualityRatingRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) AppendPath(path GetInternetQualityRatingRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetInternetQualityRatingRequest_FieldPath))
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) GetPaths() []GetInternetQualityRatingRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetInternetQualityRatingRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Set(target, source *GetInternetQualityRatingRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetInternetQualityRatingRequest), source.(*GetInternetQualityRatingRequest))
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) Project(source *GetInternetQualityRatingRequest) *GetInternetQualityRatingRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetInternetQualityRatingRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetInternetQualityRatingRequest_FieldTerminalPath:
			switch tp.selector {
			case GetInternetQualityRatingRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetInternetQualityRatingRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetInternetQualityRatingRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetInternetQualityRatingRequest))
}

func (fieldMask *GetInternetQualityRatingRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetInternetQualityRatingsRequest_FieldMask struct {
	Paths []BatchGetInternetQualityRatingsRequest_FieldPath
}

func FullBatchGetInternetQualityRatingsRequest_FieldMask() *BatchGetInternetQualityRatingsRequest_FieldMask {
	res := &BatchGetInternetQualityRatingsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsRequest_FieldTerminalPath{selector: BatchGetInternetQualityRatingsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetInternetQualityRatingsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetInternetQualityRatingsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Subtract(other *BatchGetInternetQualityRatingsRequest_FieldMask) *BatchGetInternetQualityRatingsRequest_FieldMask {
	result := &BatchGetInternetQualityRatingsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetInternetQualityRatingsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetInternetQualityRatingsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) FilterInputFields() *BatchGetInternetQualityRatingsRequest_FieldMask {
	result := &BatchGetInternetQualityRatingsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetInternetQualityRatingsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetInternetQualityRatingsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetInternetQualityRatingsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) AppendPath(path BatchGetInternetQualityRatingsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetInternetQualityRatingsRequest_FieldPath))
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) GetPaths() []BatchGetInternetQualityRatingsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetInternetQualityRatingsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Set(target, source *BatchGetInternetQualityRatingsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetInternetQualityRatingsRequest), source.(*BatchGetInternetQualityRatingsRequest))
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) Project(source *BatchGetInternetQualityRatingsRequest) *BatchGetInternetQualityRatingsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetInternetQualityRatingsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetInternetQualityRatingsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetInternetQualityRatingsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetInternetQualityRatingsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetInternetQualityRatingsRequest))
}

func (fieldMask *BatchGetInternetQualityRatingsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetInternetQualityRatingsResponse_FieldMask struct {
	Paths []BatchGetInternetQualityRatingsResponse_FieldPath
}

func FullBatchGetInternetQualityRatingsResponse_FieldMask() *BatchGetInternetQualityRatingsResponse_FieldMask {
	res := &BatchGetInternetQualityRatingsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
	res.Paths = append(res.Paths, &BatchGetInternetQualityRatingsResponse_FieldTerminalPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetInternetQualityRatingsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetInternetQualityRatingsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Subtract(other *BatchGetInternetQualityRatingsResponse_FieldMask) *BatchGetInternetQualityRatingsResponse_FieldMask {
	result := &BatchGetInternetQualityRatingsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}
	mySubMasks := map[BatchGetInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetInternetQualityRatingsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetInternetQualityRatingsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetInternetQualityRatingsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
						mySubMasks[BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings] = internet_quality_rating.FullInternetQualityRating_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetInternetQualityRatingsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetInternetQualityRatingsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetInternetQualityRatingsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) FilterInputFields() *BatchGetInternetQualityRatingsResponse_FieldMask {
	result := &BatchGetInternetQualityRatingsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			if _, ok := path.(*BatchGetInternetQualityRatingsResponse_FieldTerminalPath); ok {
				for _, subpath := range internet_quality_rating.FullInternetQualityRating_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetInternetQualityRatingsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetInternetQualityRatingsResponse_FieldSubPath); ok {
				selectedMask := &internet_quality_rating.InternetQualityRating_FieldMask{
					Paths: []internet_quality_rating.InternetQualityRating_FieldPath{sub.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetInternetQualityRatingsResponse_FieldSubPath{selector: BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetInternetQualityRatingsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetInternetQualityRatingsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetInternetQualityRatingsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) AppendPath(path BatchGetInternetQualityRatingsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetInternetQualityRatingsResponse_FieldPath))
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) GetPaths() []BatchGetInternetQualityRatingsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetInternetQualityRatingsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Set(target, source *BatchGetInternetQualityRatingsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetInternetQualityRatingsResponse), source.(*BatchGetInternetQualityRatingsResponse))
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) Project(source *BatchGetInternetQualityRatingsResponse) *BatchGetInternetQualityRatingsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetInternetQualityRatingsResponse{}
	internetQualityRatingsMask := &internet_quality_rating.InternetQualityRating_FieldMask{}
	wholeInternetQualityRatingsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetInternetQualityRatingsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
				result.InternetQualityRatings = source.InternetQualityRatings
				wholeInternetQualityRatingsAccepted = true
			case BatchGetInternetQualityRatingsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetInternetQualityRatingsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
				internetQualityRatingsMask.AppendPath(tp.subPath.(internet_quality_rating.InternetQualityRating_FieldPath))
			}
		}
	}
	if wholeInternetQualityRatingsAccepted == false && len(internetQualityRatingsMask.Paths) > 0 {
		for _, sourceItem := range source.GetInternetQualityRatings() {
			result.InternetQualityRatings = append(result.InternetQualityRatings, internetQualityRatingsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetInternetQualityRatingsResponse))
}

func (fieldMask *BatchGetInternetQualityRatingsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListInternetQualityRatingsRequest_FieldMask struct {
	Paths []ListInternetQualityRatingsRequest_FieldPath
}

func FullListInternetQualityRatingsRequest_FieldMask() *ListInternetQualityRatingsRequest_FieldMask {
	res := &ListInternetQualityRatingsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsRequest_FieldTerminalPath{selector: ListInternetQualityRatingsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListInternetQualityRatingsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListInternetQualityRatingsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListInternetQualityRatingsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Subtract(other *ListInternetQualityRatingsRequest_FieldMask) *ListInternetQualityRatingsRequest_FieldMask {
	result := &ListInternetQualityRatingsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListInternetQualityRatingsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListInternetQualityRatingsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) FilterInputFields() *ListInternetQualityRatingsRequest_FieldMask {
	result := &ListInternetQualityRatingsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListInternetQualityRatingsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListInternetQualityRatingsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListInternetQualityRatingsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListInternetQualityRatingsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) AppendPath(path ListInternetQualityRatingsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListInternetQualityRatingsRequest_FieldPath))
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) GetPaths() []ListInternetQualityRatingsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListInternetQualityRatingsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Set(target, source *ListInternetQualityRatingsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListInternetQualityRatingsRequest), source.(*ListInternetQualityRatingsRequest))
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) Project(source *ListInternetQualityRatingsRequest) *ListInternetQualityRatingsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListInternetQualityRatingsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListInternetQualityRatingsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListInternetQualityRatingsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListInternetQualityRatingsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListInternetQualityRatingsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListInternetQualityRatingsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListInternetQualityRatingsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListInternetQualityRatingsRequest))
}

func (fieldMask *ListInternetQualityRatingsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListInternetQualityRatingsResponse_FieldMask struct {
	Paths []ListInternetQualityRatingsResponse_FieldPath
}

func FullListInternetQualityRatingsResponse_FieldMask() *ListInternetQualityRatingsResponse_FieldMask {
	res := &ListInternetQualityRatingsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListInternetQualityRatingsResponse_FieldTerminalPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListInternetQualityRatingsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListInternetQualityRatingsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListInternetQualityRatingsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Subtract(other *ListInternetQualityRatingsResponse_FieldMask) *ListInternetQualityRatingsResponse_FieldMask {
	result := &ListInternetQualityRatingsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}
	mySubMasks := map[ListInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListInternetQualityRatingsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListInternetQualityRatingsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListInternetQualityRatingsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
						mySubMasks[ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings] = internet_quality_rating.FullInternetQualityRating_FieldMask()
					}
				} else if tp, ok := path.(*ListInternetQualityRatingsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListInternetQualityRatingsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListInternetQualityRatingsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) FilterInputFields() *ListInternetQualityRatingsResponse_FieldMask {
	result := &ListInternetQualityRatingsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
			if _, ok := path.(*ListInternetQualityRatingsResponse_FieldTerminalPath); ok {
				for _, subpath := range internet_quality_rating.FullInternetQualityRating_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListInternetQualityRatingsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListInternetQualityRatingsResponse_FieldSubPath); ok {
				selectedMask := &internet_quality_rating.InternetQualityRating_FieldMask{
					Paths: []internet_quality_rating.InternetQualityRating_FieldPath{sub.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListInternetQualityRatingsResponse_FieldSubPath{selector: ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListInternetQualityRatingsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListInternetQualityRatingsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListInternetQualityRatingsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListInternetQualityRatingsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) AppendPath(path ListInternetQualityRatingsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListInternetQualityRatingsResponse_FieldPath))
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) GetPaths() []ListInternetQualityRatingsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListInternetQualityRatingsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Set(target, source *ListInternetQualityRatingsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListInternetQualityRatingsResponse), source.(*ListInternetQualityRatingsResponse))
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) Project(source *ListInternetQualityRatingsResponse) *ListInternetQualityRatingsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListInternetQualityRatingsResponse{}
	internetQualityRatingsMask := &internet_quality_rating.InternetQualityRating_FieldMask{}
	wholeInternetQualityRatingsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListInternetQualityRatingsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
				result.InternetQualityRatings = source.InternetQualityRatings
				wholeInternetQualityRatingsAccepted = true
			case ListInternetQualityRatingsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListInternetQualityRatingsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListInternetQualityRatingsResponse_FieldSubPath:
			switch tp.selector {
			case ListInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatings:
				internetQualityRatingsMask.AppendPath(tp.subPath.(internet_quality_rating.InternetQualityRating_FieldPath))
			}
		}
	}
	if wholeInternetQualityRatingsAccepted == false && len(internetQualityRatingsMask.Paths) > 0 {
		for _, sourceItem := range source.GetInternetQualityRatings() {
			result.InternetQualityRatings = append(result.InternetQualityRatings, internetQualityRatingsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListInternetQualityRatingsResponse))
}

func (fieldMask *ListInternetQualityRatingsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchInternetQualityRatingRequest_FieldMask struct {
	Paths []WatchInternetQualityRatingRequest_FieldPath
}

func FullWatchInternetQualityRatingRequest_FieldMask() *WatchInternetQualityRatingRequest_FieldMask {
	res := &WatchInternetQualityRatingRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingRequest_FieldTerminalPath{selector: WatchInternetQualityRatingRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchInternetQualityRatingRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchInternetQualityRatingRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchInternetQualityRatingRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Subtract(other *WatchInternetQualityRatingRequest_FieldMask) *WatchInternetQualityRatingRequest_FieldMask {
	result := &WatchInternetQualityRatingRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchInternetQualityRatingRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchInternetQualityRatingRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) FilterInputFields() *WatchInternetQualityRatingRequest_FieldMask {
	result := &WatchInternetQualityRatingRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchInternetQualityRatingRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchInternetQualityRatingRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchInternetQualityRatingRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchInternetQualityRatingRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) AppendPath(path WatchInternetQualityRatingRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchInternetQualityRatingRequest_FieldPath))
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) GetPaths() []WatchInternetQualityRatingRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchInternetQualityRatingRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Set(target, source *WatchInternetQualityRatingRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchInternetQualityRatingRequest), source.(*WatchInternetQualityRatingRequest))
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) Project(source *WatchInternetQualityRatingRequest) *WatchInternetQualityRatingRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchInternetQualityRatingRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchInternetQualityRatingRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchInternetQualityRatingRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchInternetQualityRatingRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchInternetQualityRatingRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchInternetQualityRatingRequest))
}

func (fieldMask *WatchInternetQualityRatingRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchInternetQualityRatingResponse_FieldMask struct {
	Paths []WatchInternetQualityRatingResponse_FieldPath
}

func FullWatchInternetQualityRatingResponse_FieldMask() *WatchInternetQualityRatingResponse_FieldMask {
	res := &WatchInternetQualityRatingResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchInternetQualityRatingResponse_FieldTerminalPath{selector: WatchInternetQualityRatingResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchInternetQualityRatingResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchInternetQualityRatingResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchInternetQualityRatingResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Subtract(other *WatchInternetQualityRatingResponse_FieldMask) *WatchInternetQualityRatingResponse_FieldMask {
	result := &WatchInternetQualityRatingResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchInternetQualityRatingResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchInternetQualityRatingResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) FilterInputFields() *WatchInternetQualityRatingResponse_FieldMask {
	result := &WatchInternetQualityRatingResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchInternetQualityRatingResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchInternetQualityRatingResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchInternetQualityRatingResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchInternetQualityRatingResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) AppendPath(path WatchInternetQualityRatingResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchInternetQualityRatingResponse_FieldPath))
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) GetPaths() []WatchInternetQualityRatingResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchInternetQualityRatingResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Set(target, source *WatchInternetQualityRatingResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchInternetQualityRatingResponse), source.(*WatchInternetQualityRatingResponse))
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) Project(source *WatchInternetQualityRatingResponse) *WatchInternetQualityRatingResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchInternetQualityRatingResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchInternetQualityRatingResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchInternetQualityRatingResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchInternetQualityRatingResponse))
}

func (fieldMask *WatchInternetQualityRatingResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchInternetQualityRatingsRequest_FieldMask struct {
	Paths []WatchInternetQualityRatingsRequest_FieldPath
}

func FullWatchInternetQualityRatingsRequest_FieldMask() *WatchInternetQualityRatingsRequest_FieldMask {
	res := &WatchInternetQualityRatingsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsRequest_FieldTerminalPath{selector: WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchInternetQualityRatingsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchInternetQualityRatingsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchInternetQualityRatingsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Subtract(other *WatchInternetQualityRatingsRequest_FieldMask) *WatchInternetQualityRatingsRequest_FieldMask {
	result := &WatchInternetQualityRatingsRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchInternetQualityRatingsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchInternetQualityRatingsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) FilterInputFields() *WatchInternetQualityRatingsRequest_FieldMask {
	result := &WatchInternetQualityRatingsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchInternetQualityRatingsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchInternetQualityRatingsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchInternetQualityRatingsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchInternetQualityRatingsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) AppendPath(path WatchInternetQualityRatingsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchInternetQualityRatingsRequest_FieldPath))
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) GetPaths() []WatchInternetQualityRatingsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchInternetQualityRatingsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Set(target, source *WatchInternetQualityRatingsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchInternetQualityRatingsRequest), source.(*WatchInternetQualityRatingsRequest))
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) Project(source *WatchInternetQualityRatingsRequest) *WatchInternetQualityRatingsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchInternetQualityRatingsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchInternetQualityRatingsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchInternetQualityRatingsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchInternetQualityRatingsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchInternetQualityRatingsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchInternetQualityRatingsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchInternetQualityRatingsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchInternetQualityRatingsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchInternetQualityRatingsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchInternetQualityRatingsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchInternetQualityRatingsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchInternetQualityRatingsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchInternetQualityRatingsRequest))
}

func (fieldMask *WatchInternetQualityRatingsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchInternetQualityRatingsResponse_FieldMask struct {
	Paths []WatchInternetQualityRatingsResponse_FieldPath
}

func FullWatchInternetQualityRatingsResponse_FieldMask() *WatchInternetQualityRatingsResponse_FieldMask {
	res := &WatchInternetQualityRatingsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponse_FieldTerminalPath{selector: WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchInternetQualityRatingsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchInternetQualityRatingsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchInternetQualityRatingsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Subtract(other *WatchInternetQualityRatingsResponse_FieldMask) *WatchInternetQualityRatingsResponse_FieldMask {
	result := &WatchInternetQualityRatingsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange: &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchInternetQualityRatingsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange: &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchInternetQualityRatingsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchInternetQualityRatingsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchInternetQualityRatingsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange] = FullWatchInternetQualityRatingsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchInternetQualityRatingsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchInternetQualityRatingsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchInternetQualityRatingsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) FilterInputFields() *WatchInternetQualityRatingsResponse_FieldMask {
	result := &WatchInternetQualityRatingsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchInternetQualityRatingsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchInternetQualityRatingsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchInternetQualityRatingsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchInternetQualityRatingsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) AppendPath(path WatchInternetQualityRatingsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchInternetQualityRatingsResponse_FieldPath))
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) GetPaths() []WatchInternetQualityRatingsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchInternetQualityRatingsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Set(target, source *WatchInternetQualityRatingsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchInternetQualityRatingsResponse), source.(*WatchInternetQualityRatingsResponse))
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) Project(source *WatchInternetQualityRatingsResponse) *WatchInternetQualityRatingsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchInternetQualityRatingsResponse{}
	pageTokenChangeMask := &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchInternetQualityRatingsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchInternetQualityRatingsResponse_FieldPathSelectorInternetQualityRatingChanges:
				result.InternetQualityRatingChanges = source.InternetQualityRatingChanges
			case WatchInternetQualityRatingsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchInternetQualityRatingsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchInternetQualityRatingsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchInternetQualityRatingsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchInternetQualityRatingsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchInternetQualityRatingsResponse_FieldSubPath:
			switch tp.selector {
			case WatchInternetQualityRatingsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchInternetQualityRatingsResponse))
}

func (fieldMask *WatchInternetQualityRatingsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchInternetQualityRatingsResponsePageTokenChange_FieldPath
}

func FullWatchInternetQualityRatingsResponse_PageTokenChange_FieldMask() *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask {
	res := &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath{selector: WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Subtract(other *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask {
	result := &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask {
	result := &WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchInternetQualityRatingsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) AppendPath(path WatchInternetQualityRatingsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchInternetQualityRatingsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) GetPaths() []WatchInternetQualityRatingsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchInternetQualityRatingsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Set(target, source *WatchInternetQualityRatingsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchInternetQualityRatingsResponse_PageTokenChange), source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) Project(source *WatchInternetQualityRatingsResponse_PageTokenChange) *WatchInternetQualityRatingsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchInternetQualityRatingsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchInternetQualityRatingsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchInternetQualityRatingsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchInternetQualityRatingsResponse_PageTokenChange))
}

func (fieldMask *WatchInternetQualityRatingsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateInternetQualityRatingRequest_FieldMask struct {
	Paths []CreateInternetQualityRatingRequest_FieldPath
}

func FullCreateInternetQualityRatingRequest_FieldMask() *CreateInternetQualityRatingRequest_FieldMask {
	res := &CreateInternetQualityRatingRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateInternetQualityRatingRequest_FieldTerminalPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating})
	return res
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateInternetQualityRatingRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateInternetQualityRatingRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateInternetQualityRatingRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Subtract(other *CreateInternetQualityRatingRequest_FieldMask) *CreateInternetQualityRatingRequest_FieldMask {
	result := &CreateInternetQualityRatingRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateInternetQualityRatingRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}
	mySubMasks := map[CreateInternetQualityRatingRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateInternetQualityRatingRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateInternetQualityRatingRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateInternetQualityRatingRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
						mySubMasks[CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating] = internet_quality_rating.FullInternetQualityRating_FieldMask()
					}
				} else if tp, ok := path.(*CreateInternetQualityRatingRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateInternetQualityRatingRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateInternetQualityRatingRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) FilterInputFields() *CreateInternetQualityRatingRequest_FieldMask {
	result := &CreateInternetQualityRatingRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			if _, ok := path.(*CreateInternetQualityRatingRequest_FieldTerminalPath); ok {
				for _, subpath := range internet_quality_rating.FullInternetQualityRating_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateInternetQualityRatingRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateInternetQualityRatingRequest_FieldSubPath); ok {
				selectedMask := &internet_quality_rating.InternetQualityRating_FieldMask{
					Paths: []internet_quality_rating.InternetQualityRating_FieldPath{sub.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateInternetQualityRatingRequest_FieldSubPath{selector: CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateInternetQualityRatingRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateInternetQualityRatingRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateInternetQualityRatingRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateInternetQualityRatingRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) AppendPath(path CreateInternetQualityRatingRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateInternetQualityRatingRequest_FieldPath))
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) GetPaths() []CreateInternetQualityRatingRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateInternetQualityRatingRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Set(target, source *CreateInternetQualityRatingRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateInternetQualityRatingRequest), source.(*CreateInternetQualityRatingRequest))
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) Project(source *CreateInternetQualityRatingRequest) *CreateInternetQualityRatingRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateInternetQualityRatingRequest{}
	internetQualityRatingMask := &internet_quality_rating.InternetQualityRating_FieldMask{}
	wholeInternetQualityRatingAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateInternetQualityRatingRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateInternetQualityRatingRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
				result.InternetQualityRating = source.InternetQualityRating
				wholeInternetQualityRatingAccepted = true
			}
		case *CreateInternetQualityRatingRequest_FieldSubPath:
			switch tp.selector {
			case CreateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
				internetQualityRatingMask.AppendPath(tp.subPath.(internet_quality_rating.InternetQualityRating_FieldPath))
			}
		}
	}
	if wholeInternetQualityRatingAccepted == false && len(internetQualityRatingMask.Paths) > 0 {
		result.InternetQualityRating = internetQualityRatingMask.Project(source.GetInternetQualityRating())
	}
	return result
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateInternetQualityRatingRequest))
}

func (fieldMask *CreateInternetQualityRatingRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateInternetQualityRatingRequest_FieldMask struct {
	Paths []UpdateInternetQualityRatingRequest_FieldPath
}

func FullUpdateInternetQualityRatingRequest_FieldMask() *UpdateInternetQualityRatingRequest_FieldMask {
	res := &UpdateInternetQualityRatingRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating})
	res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequest_FieldTerminalPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateInternetQualityRatingRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateInternetQualityRatingRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateInternetQualityRatingRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Subtract(other *UpdateInternetQualityRatingRequest_FieldMask) *UpdateInternetQualityRatingRequest_FieldMask {
	result := &UpdateInternetQualityRatingRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateInternetQualityRatingRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating: &internet_quality_rating.InternetQualityRating_FieldMask{},
		UpdateInternetQualityRatingRequest_FieldPathSelectorCas:                   &UpdateInternetQualityRatingRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateInternetQualityRatingRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating: &internet_quality_rating.InternetQualityRating_FieldMask{},
		UpdateInternetQualityRatingRequest_FieldPathSelectorCas:                   &UpdateInternetQualityRatingRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateInternetQualityRatingRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateInternetQualityRatingRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateInternetQualityRatingRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
						mySubMasks[UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating] = internet_quality_rating.FullInternetQualityRating_FieldMask()
					case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
						mySubMasks[UpdateInternetQualityRatingRequest_FieldPathSelectorCas] = FullUpdateInternetQualityRatingRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateInternetQualityRatingRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateInternetQualityRatingRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) FilterInputFields() *UpdateInternetQualityRatingRequest_FieldMask {
	result := &UpdateInternetQualityRatingRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
			if _, ok := path.(*UpdateInternetQualityRatingRequest_FieldTerminalPath); ok {
				for _, subpath := range internet_quality_rating.FullInternetQualityRating_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateInternetQualityRatingRequest_FieldSubPath); ok {
				selectedMask := &internet_quality_rating.InternetQualityRating_FieldMask{
					Paths: []internet_quality_rating.InternetQualityRating_FieldPath{sub.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating, subPath: allowedPath})
				}
			}
		case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateInternetQualityRatingRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateInternetQualityRatingRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateInternetQualityRatingRequest_FieldSubPath); ok {
				selectedMask := &UpdateInternetQualityRatingRequest_CAS_FieldMask{
					Paths: []UpdateInternetQualityRatingRequestCAS_FieldPath{sub.subPath.(UpdateInternetQualityRatingRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequest_FieldSubPath{selector: UpdateInternetQualityRatingRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateInternetQualityRatingRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateInternetQualityRatingRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateInternetQualityRatingRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateInternetQualityRatingRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) AppendPath(path UpdateInternetQualityRatingRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateInternetQualityRatingRequest_FieldPath))
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) GetPaths() []UpdateInternetQualityRatingRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateInternetQualityRatingRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Set(target, source *UpdateInternetQualityRatingRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateInternetQualityRatingRequest), source.(*UpdateInternetQualityRatingRequest))
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) Project(source *UpdateInternetQualityRatingRequest) *UpdateInternetQualityRatingRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateInternetQualityRatingRequest{}
	internetQualityRatingMask := &internet_quality_rating.InternetQualityRating_FieldMask{}
	wholeInternetQualityRatingAccepted := false
	casMask := &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateInternetQualityRatingRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
				result.InternetQualityRating = source.InternetQualityRating
				wholeInternetQualityRatingAccepted = true
			case UpdateInternetQualityRatingRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateInternetQualityRatingRequest_FieldSubPath:
			switch tp.selector {
			case UpdateInternetQualityRatingRequest_FieldPathSelectorInternetQualityRating:
				internetQualityRatingMask.AppendPath(tp.subPath.(internet_quality_rating.InternetQualityRating_FieldPath))
			case UpdateInternetQualityRatingRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateInternetQualityRatingRequestCAS_FieldPath))
			}
		}
	}
	if wholeInternetQualityRatingAccepted == false && len(internetQualityRatingMask.Paths) > 0 {
		result.InternetQualityRating = internetQualityRatingMask.Project(source.GetInternetQualityRating())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateInternetQualityRatingRequest))
}

func (fieldMask *UpdateInternetQualityRatingRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateInternetQualityRatingRequest_CAS_FieldMask struct {
	Paths []UpdateInternetQualityRatingRequestCAS_FieldPath
}

func FullUpdateInternetQualityRatingRequest_CAS_FieldMask() *UpdateInternetQualityRatingRequest_CAS_FieldMask {
	res := &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateInternetQualityRatingRequestCAS_FieldTerminalPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateInternetQualityRatingRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateInternetQualityRatingRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Subtract(other *UpdateInternetQualityRatingRequest_CAS_FieldMask) *UpdateInternetQualityRatingRequest_CAS_FieldMask {
	result := &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateInternetQualityRatingRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}
	mySubMasks := map[UpdateInternetQualityRatingRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState: &internet_quality_rating.InternetQualityRating_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateInternetQualityRatingRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateInternetQualityRatingRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState] = internet_quality_rating.FullInternetQualityRating_FieldMask()
					}
				} else if tp, ok := path.(*UpdateInternetQualityRatingRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateInternetQualityRatingRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) FilterInputFields() *UpdateInternetQualityRatingRequest_CAS_FieldMask {
	result := &UpdateInternetQualityRatingRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateInternetQualityRatingRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range internet_quality_rating.FullInternetQualityRating_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateInternetQualityRatingRequestCAS_FieldSubPath); ok {
				selectedMask := &internet_quality_rating.InternetQualityRating_FieldMask{
					Paths: []internet_quality_rating.InternetQualityRating_FieldPath{sub.subPath.(internet_quality_rating.InternetQualityRating_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateInternetQualityRatingRequestCAS_FieldSubPath{selector: UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateInternetQualityRatingRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateInternetQualityRatingRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateInternetQualityRatingRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) AppendPath(path UpdateInternetQualityRatingRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateInternetQualityRatingRequestCAS_FieldPath))
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) GetPaths() []UpdateInternetQualityRatingRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateInternetQualityRatingRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Set(target, source *UpdateInternetQualityRatingRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateInternetQualityRatingRequest_CAS), source.(*UpdateInternetQualityRatingRequest_CAS))
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) Project(source *UpdateInternetQualityRatingRequest_CAS) *UpdateInternetQualityRatingRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateInternetQualityRatingRequest_CAS{}
	conditionalStateMask := &internet_quality_rating.InternetQualityRating_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateInternetQualityRatingRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateInternetQualityRatingRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateInternetQualityRatingRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(internet_quality_rating.InternetQualityRating_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateInternetQualityRatingRequest_CAS))
}

func (fieldMask *UpdateInternetQualityRatingRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteInternetQualityRatingRequest_FieldMask struct {
	Paths []DeleteInternetQualityRatingRequest_FieldPath
}

func FullDeleteInternetQualityRatingRequest_FieldMask() *DeleteInternetQualityRatingRequest_FieldMask {
	res := &DeleteInternetQualityRatingRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteInternetQualityRatingRequest_FieldTerminalPath{selector: DeleteInternetQualityRatingRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteInternetQualityRatingRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteInternetQualityRatingRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteInternetQualityRatingRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Subtract(other *DeleteInternetQualityRatingRequest_FieldMask) *DeleteInternetQualityRatingRequest_FieldMask {
	result := &DeleteInternetQualityRatingRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteInternetQualityRatingRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteInternetQualityRatingRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) FilterInputFields() *DeleteInternetQualityRatingRequest_FieldMask {
	result := &DeleteInternetQualityRatingRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteInternetQualityRatingRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteInternetQualityRatingRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteInternetQualityRatingRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteInternetQualityRatingRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) AppendPath(path DeleteInternetQualityRatingRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteInternetQualityRatingRequest_FieldPath))
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) GetPaths() []DeleteInternetQualityRatingRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteInternetQualityRatingRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Set(target, source *DeleteInternetQualityRatingRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteInternetQualityRatingRequest), source.(*DeleteInternetQualityRatingRequest))
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) Project(source *DeleteInternetQualityRatingRequest) *DeleteInternetQualityRatingRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteInternetQualityRatingRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteInternetQualityRatingRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteInternetQualityRatingRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteInternetQualityRatingRequest))
}

func (fieldMask *DeleteInternetQualityRatingRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
