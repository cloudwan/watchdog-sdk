// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/quality_profile_service.proto
// DO NOT EDIT!!!

package quality_profile_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &quality_profile.Profile{}
)

func (o *GetQualityProfileRequest) GotenObjectExt() {}

func (o *GetQualityProfileRequest) MakeFullFieldMask() *GetQualityProfileRequest_FieldMask {
	return FullGetQualityProfileRequest_FieldMask()
}

func (o *GetQualityProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetQualityProfileRequest_FieldMask()
}

func (o *GetQualityProfileRequest) MakeDiffFieldMask(other *GetQualityProfileRequest) *GetQualityProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &GetQualityProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetQualityProfileRequest_FieldMask()
	}

	res := &GetQualityProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetQualityProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetQualityProfileRequest))
}

func (o *GetQualityProfileRequest) Clone() *GetQualityProfileRequest {
	if o == nil {
		return nil
	}
	result := &GetQualityProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &quality_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *GetQualityProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetQualityProfileRequest) Merge(source *GetQualityProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &quality_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetQualityProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetQualityProfileRequest))
}

func (o *BatchGetQualityProfilesRequest) GotenObjectExt() {}

func (o *BatchGetQualityProfilesRequest) MakeFullFieldMask() *BatchGetQualityProfilesRequest_FieldMask {
	return FullBatchGetQualityProfilesRequest_FieldMask()
}

func (o *BatchGetQualityProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetQualityProfilesRequest_FieldMask()
}

func (o *BatchGetQualityProfilesRequest) MakeDiffFieldMask(other *BatchGetQualityProfilesRequest) *BatchGetQualityProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetQualityProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetQualityProfilesRequest_FieldMask()
	}

	res := &BatchGetQualityProfilesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetQualityProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetQualityProfilesRequest))
}

func (o *BatchGetQualityProfilesRequest) Clone() *BatchGetQualityProfilesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetQualityProfilesRequest{}
	result.Names = make([]*quality_profile.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &quality_profile.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetQualityProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetQualityProfilesRequest) Merge(source *BatchGetQualityProfilesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *quality_profile.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &quality_profile.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetQualityProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetQualityProfilesRequest))
}

func (o *BatchGetQualityProfilesResponse) GotenObjectExt() {}

func (o *BatchGetQualityProfilesResponse) MakeFullFieldMask() *BatchGetQualityProfilesResponse_FieldMask {
	return FullBatchGetQualityProfilesResponse_FieldMask()
}

func (o *BatchGetQualityProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetQualityProfilesResponse_FieldMask()
}

func (o *BatchGetQualityProfilesResponse) MakeDiffFieldMask(other *BatchGetQualityProfilesResponse) *BatchGetQualityProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetQualityProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetQualityProfilesResponse_FieldMask()
	}

	res := &BatchGetQualityProfilesResponse_FieldMask{}

	if len(o.GetQualityProfiles()) == len(other.GetQualityProfiles()) {
		for i, lValue := range o.GetQualityProfiles() {
			rValue := other.GetQualityProfiles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetQualityProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetQualityProfilesResponse))
}

func (o *BatchGetQualityProfilesResponse) Clone() *BatchGetQualityProfilesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetQualityProfilesResponse{}
	result.QualityProfiles = make([]*quality_profile.QualityProfile, len(o.QualityProfiles))
	for i, sourceValue := range o.QualityProfiles {
		result.QualityProfiles[i] = sourceValue.Clone()
	}
	result.Missing = make([]*quality_profile.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &quality_profile.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetQualityProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetQualityProfilesResponse) Merge(source *BatchGetQualityProfilesResponse) {
	for _, sourceValue := range source.GetQualityProfiles() {
		exists := false
		for _, currentValue := range o.QualityProfiles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *quality_profile.QualityProfile
			if sourceValue != nil {
				newDstElement = new(quality_profile.QualityProfile)
				newDstElement.Merge(sourceValue)
			}
			o.QualityProfiles = append(o.QualityProfiles, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *quality_profile.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &quality_profile.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetQualityProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetQualityProfilesResponse))
}

func (o *ListQualityProfilesRequest) GotenObjectExt() {}

func (o *ListQualityProfilesRequest) MakeFullFieldMask() *ListQualityProfilesRequest_FieldMask {
	return FullListQualityProfilesRequest_FieldMask()
}

func (o *ListQualityProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListQualityProfilesRequest_FieldMask()
}

func (o *ListQualityProfilesRequest) MakeDiffFieldMask(other *ListQualityProfilesRequest) *ListQualityProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListQualityProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListQualityProfilesRequest_FieldMask()
	}

	res := &ListQualityProfilesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListQualityProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListQualityProfilesRequest))
}

func (o *ListQualityProfilesRequest) Clone() *ListQualityProfilesRequest {
	if o == nil {
		return nil
	}
	result := &ListQualityProfilesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &quality_profile.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &quality_profile.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &quality_profile.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &quality_profile.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListQualityProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListQualityProfilesRequest) Merge(source *ListQualityProfilesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &quality_profile.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &quality_profile.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &quality_profile.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &quality_profile.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListQualityProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListQualityProfilesRequest))
}

func (o *ListQualityProfilesResponse) GotenObjectExt() {}

func (o *ListQualityProfilesResponse) MakeFullFieldMask() *ListQualityProfilesResponse_FieldMask {
	return FullListQualityProfilesResponse_FieldMask()
}

func (o *ListQualityProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListQualityProfilesResponse_FieldMask()
}

func (o *ListQualityProfilesResponse) MakeDiffFieldMask(other *ListQualityProfilesResponse) *ListQualityProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListQualityProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListQualityProfilesResponse_FieldMask()
	}

	res := &ListQualityProfilesResponse_FieldMask{}

	if len(o.GetQualityProfiles()) == len(other.GetQualityProfiles()) {
		for i, lValue := range o.GetQualityProfiles() {
			rValue := other.GetQualityProfiles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListQualityProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListQualityProfilesResponse))
}

func (o *ListQualityProfilesResponse) Clone() *ListQualityProfilesResponse {
	if o == nil {
		return nil
	}
	result := &ListQualityProfilesResponse{}
	result.QualityProfiles = make([]*quality_profile.QualityProfile, len(o.QualityProfiles))
	for i, sourceValue := range o.QualityProfiles {
		result.QualityProfiles[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &quality_profile.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &quality_profile.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListQualityProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListQualityProfilesResponse) Merge(source *ListQualityProfilesResponse) {
	for _, sourceValue := range source.GetQualityProfiles() {
		exists := false
		for _, currentValue := range o.QualityProfiles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *quality_profile.QualityProfile
			if sourceValue != nil {
				newDstElement = new(quality_profile.QualityProfile)
				newDstElement.Merge(sourceValue)
			}
			o.QualityProfiles = append(o.QualityProfiles, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &quality_profile.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &quality_profile.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListQualityProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListQualityProfilesResponse))
}

func (o *WatchQualityProfileRequest) GotenObjectExt() {}

func (o *WatchQualityProfileRequest) MakeFullFieldMask() *WatchQualityProfileRequest_FieldMask {
	return FullWatchQualityProfileRequest_FieldMask()
}

func (o *WatchQualityProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchQualityProfileRequest_FieldMask()
}

func (o *WatchQualityProfileRequest) MakeDiffFieldMask(other *WatchQualityProfileRequest) *WatchQualityProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchQualityProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchQualityProfileRequest_FieldMask()
	}

	res := &WatchQualityProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchQualityProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchQualityProfileRequest))
}

func (o *WatchQualityProfileRequest) Clone() *WatchQualityProfileRequest {
	if o == nil {
		return nil
	}
	result := &WatchQualityProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &quality_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchQualityProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchQualityProfileRequest) Merge(source *WatchQualityProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &quality_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchQualityProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchQualityProfileRequest))
}

func (o *WatchQualityProfileResponse) GotenObjectExt() {}

func (o *WatchQualityProfileResponse) MakeFullFieldMask() *WatchQualityProfileResponse_FieldMask {
	return FullWatchQualityProfileResponse_FieldMask()
}

func (o *WatchQualityProfileResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchQualityProfileResponse_FieldMask()
}

func (o *WatchQualityProfileResponse) MakeDiffFieldMask(other *WatchQualityProfileResponse) *WatchQualityProfileResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchQualityProfileResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchQualityProfileResponse_FieldMask()
	}

	res := &WatchQualityProfileResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchQualityProfileResponse_FieldTerminalPath{selector: WatchQualityProfileResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchQualityProfileResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchQualityProfileResponse))
}

func (o *WatchQualityProfileResponse) Clone() *WatchQualityProfileResponse {
	if o == nil {
		return nil
	}
	result := &WatchQualityProfileResponse{}
	result.Change = proto.Clone(o.Change).(*quality_profile.QualityProfileChange)
	return result
}

func (o *WatchQualityProfileResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchQualityProfileResponse) Merge(source *WatchQualityProfileResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(quality_profile.QualityProfileChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchQualityProfileResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchQualityProfileResponse))
}

func (o *WatchQualityProfilesRequest) GotenObjectExt() {}

func (o *WatchQualityProfilesRequest) MakeFullFieldMask() *WatchQualityProfilesRequest_FieldMask {
	return FullWatchQualityProfilesRequest_FieldMask()
}

func (o *WatchQualityProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchQualityProfilesRequest_FieldMask()
}

func (o *WatchQualityProfilesRequest) MakeDiffFieldMask(other *WatchQualityProfilesRequest) *WatchQualityProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchQualityProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchQualityProfilesRequest_FieldMask()
	}

	res := &WatchQualityProfilesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchQualityProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchQualityProfilesRequest))
}

func (o *WatchQualityProfilesRequest) Clone() *WatchQualityProfilesRequest {
	if o == nil {
		return nil
	}
	result := &WatchQualityProfilesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &quality_profile.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &quality_profile.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &quality_profile.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &quality_profile.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchQualityProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchQualityProfilesRequest) Merge(source *WatchQualityProfilesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &quality_profile.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &quality_profile.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &quality_profile.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &quality_profile.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchQualityProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchQualityProfilesRequest))
}

func (o *WatchQualityProfilesResponse) GotenObjectExt() {}

func (o *WatchQualityProfilesResponse) MakeFullFieldMask() *WatchQualityProfilesResponse_FieldMask {
	return FullWatchQualityProfilesResponse_FieldMask()
}

func (o *WatchQualityProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchQualityProfilesResponse_FieldMask()
}

func (o *WatchQualityProfilesResponse) MakeDiffFieldMask(other *WatchQualityProfilesResponse) *WatchQualityProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchQualityProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchQualityProfilesResponse_FieldMask()
	}

	res := &WatchQualityProfilesResponse_FieldMask{}

	if len(o.GetQualityProfileChanges()) == len(other.GetQualityProfileChanges()) {
		for i, lValue := range o.GetQualityProfileChanges() {
			rValue := other.GetQualityProfileChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldSubPath{selector: WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchQualityProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchQualityProfilesResponse))
}

func (o *WatchQualityProfilesResponse) Clone() *WatchQualityProfilesResponse {
	if o == nil {
		return nil
	}
	result := &WatchQualityProfilesResponse{}
	result.QualityProfileChanges = make([]*quality_profile.QualityProfileChange, len(o.QualityProfileChanges))
	for i, sourceValue := range o.QualityProfileChanges {
		result.QualityProfileChanges[i] = proto.Clone(sourceValue).(*quality_profile.QualityProfileChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchQualityProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchQualityProfilesResponse) Merge(source *WatchQualityProfilesResponse) {
	for _, sourceValue := range source.GetQualityProfileChanges() {
		exists := false
		for _, currentValue := range o.QualityProfileChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *quality_profile.QualityProfileChange
			if sourceValue != nil {
				newDstElement = new(quality_profile.QualityProfileChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.QualityProfileChanges = append(o.QualityProfileChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchQualityProfilesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchQualityProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchQualityProfilesResponse))
}

func (o *WatchQualityProfilesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchQualityProfilesResponse_PageTokenChange) MakeFullFieldMask() *WatchQualityProfilesResponse_PageTokenChange_FieldMask {
	return FullWatchQualityProfilesResponse_PageTokenChange_FieldMask()
}

func (o *WatchQualityProfilesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchQualityProfilesResponse_PageTokenChange_FieldMask()
}

func (o *WatchQualityProfilesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchQualityProfilesResponse_PageTokenChange) *WatchQualityProfilesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchQualityProfilesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchQualityProfilesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchQualityProfilesResponse_PageTokenChange))
}

func (o *WatchQualityProfilesResponse_PageTokenChange) Clone() *WatchQualityProfilesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchQualityProfilesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &quality_profile.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &quality_profile.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchQualityProfilesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchQualityProfilesResponse_PageTokenChange) Merge(source *WatchQualityProfilesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &quality_profile.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &quality_profile.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchQualityProfilesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

func (o *CreateQualityProfileRequest) GotenObjectExt() {}

func (o *CreateQualityProfileRequest) MakeFullFieldMask() *CreateQualityProfileRequest_FieldMask {
	return FullCreateQualityProfileRequest_FieldMask()
}

func (o *CreateQualityProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateQualityProfileRequest_FieldMask()
}

func (o *CreateQualityProfileRequest) MakeDiffFieldMask(other *CreateQualityProfileRequest) *CreateQualityProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateQualityProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateQualityProfileRequest_FieldMask()
	}

	res := &CreateQualityProfileRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetQualityProfile().MakeDiffFieldMask(other.GetQualityProfile())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateQualityProfileRequest_FieldSubPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateQualityProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateQualityProfileRequest))
}

func (o *CreateQualityProfileRequest) Clone() *CreateQualityProfileRequest {
	if o == nil {
		return nil
	}
	result := &CreateQualityProfileRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &quality_profile.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.QualityProfile = o.QualityProfile.Clone()
	return result
}

func (o *CreateQualityProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateQualityProfileRequest) Merge(source *CreateQualityProfileRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &quality_profile.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetQualityProfile() != nil {
		if o.QualityProfile == nil {
			o.QualityProfile = new(quality_profile.QualityProfile)
		}
		o.QualityProfile.Merge(source.GetQualityProfile())
	}
}

func (o *CreateQualityProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateQualityProfileRequest))
}

func (o *UpdateQualityProfileRequest) GotenObjectExt() {}

func (o *UpdateQualityProfileRequest) MakeFullFieldMask() *UpdateQualityProfileRequest_FieldMask {
	return FullUpdateQualityProfileRequest_FieldMask()
}

func (o *UpdateQualityProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateQualityProfileRequest_FieldMask()
}

func (o *UpdateQualityProfileRequest) MakeDiffFieldMask(other *UpdateQualityProfileRequest) *UpdateQualityProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateQualityProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateQualityProfileRequest_FieldMask()
	}

	res := &UpdateQualityProfileRequest_FieldMask{}
	{
		subMask := o.GetQualityProfile().MakeDiffFieldMask(other.GetQualityProfile())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateQualityProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateQualityProfileRequest))
}

func (o *UpdateQualityProfileRequest) Clone() *UpdateQualityProfileRequest {
	if o == nil {
		return nil
	}
	result := &UpdateQualityProfileRequest{}
	result.QualityProfile = o.QualityProfile.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*quality_profile.QualityProfile_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateQualityProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateQualityProfileRequest) Merge(source *UpdateQualityProfileRequest) {
	if source.GetQualityProfile() != nil {
		if o.QualityProfile == nil {
			o.QualityProfile = new(quality_profile.QualityProfile)
		}
		o.QualityProfile.Merge(source.GetQualityProfile())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateQualityProfileRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateQualityProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateQualityProfileRequest))
}

func (o *UpdateQualityProfileRequest_CAS) GotenObjectExt() {}

func (o *UpdateQualityProfileRequest_CAS) MakeFullFieldMask() *UpdateQualityProfileRequest_CAS_FieldMask {
	return FullUpdateQualityProfileRequest_CAS_FieldMask()
}

func (o *UpdateQualityProfileRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateQualityProfileRequest_CAS_FieldMask()
}

func (o *UpdateQualityProfileRequest_CAS) MakeDiffFieldMask(other *UpdateQualityProfileRequest_CAS) *UpdateQualityProfileRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateQualityProfileRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateQualityProfileRequest_CAS_FieldMask()
	}

	res := &UpdateQualityProfileRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateQualityProfileRequestCAS_FieldSubPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateQualityProfileRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateQualityProfileRequest_CAS))
}

func (o *UpdateQualityProfileRequest_CAS) Clone() *UpdateQualityProfileRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateQualityProfileRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*quality_profile.QualityProfile_FieldMask)
	return result
}

func (o *UpdateQualityProfileRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateQualityProfileRequest_CAS) Merge(source *UpdateQualityProfileRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(quality_profile.QualityProfile)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(quality_profile.QualityProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateQualityProfileRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateQualityProfileRequest_CAS))
}

func (o *DeleteQualityProfileRequest) GotenObjectExt() {}

func (o *DeleteQualityProfileRequest) MakeFullFieldMask() *DeleteQualityProfileRequest_FieldMask {
	return FullDeleteQualityProfileRequest_FieldMask()
}

func (o *DeleteQualityProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteQualityProfileRequest_FieldMask()
}

func (o *DeleteQualityProfileRequest) MakeDiffFieldMask(other *DeleteQualityProfileRequest) *DeleteQualityProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteQualityProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteQualityProfileRequest_FieldMask()
	}

	res := &DeleteQualityProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteQualityProfileRequest_FieldTerminalPath{selector: DeleteQualityProfileRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteQualityProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteQualityProfileRequest))
}

func (o *DeleteQualityProfileRequest) Clone() *DeleteQualityProfileRequest {
	if o == nil {
		return nil
	}
	result := &DeleteQualityProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &quality_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteQualityProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteQualityProfileRequest) Merge(source *DeleteQualityProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &quality_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteQualityProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteQualityProfileRequest))
}
