// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/quality_profile_service.proto
// DO NOT EDIT!!!

package quality_profile_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &quality_profile.Profile{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetQualityProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetQualityProfileRequest_FieldPathSelector
	Get(source *GetQualityProfileRequest) []interface{}
	GetSingle(source *GetQualityProfileRequest) (interface{}, bool)
	ClearValue(item *GetQualityProfileRequest)

	// Those methods build corresponding GetQualityProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetQualityProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetQualityProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetQualityProfileRequest_FieldPathArrayItemValue
}

type GetQualityProfileRequest_FieldPathSelector int32

const (
	GetQualityProfileRequest_FieldPathSelectorName      GetQualityProfileRequest_FieldPathSelector = 0
	GetQualityProfileRequest_FieldPathSelectorFieldMask GetQualityProfileRequest_FieldPathSelector = 1
	GetQualityProfileRequest_FieldPathSelectorView      GetQualityProfileRequest_FieldPathSelector = 2
)

func (s GetQualityProfileRequest_FieldPathSelector) String() string {
	switch s {
	case GetQualityProfileRequest_FieldPathSelectorName:
		return "name"
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetQualityProfileRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", s))
	}
}

func BuildGetQualityProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (GetQualityProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetQualityProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetQualityProfileRequest", fp)
}

func ParseGetQualityProfileRequest_FieldPath(rawField string) (GetQualityProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetQualityProfileRequest_FieldPath(fp)
}

func MustParseGetQualityProfileRequest_FieldPath(rawField string) GetQualityProfileRequest_FieldPath {
	fp, err := ParseGetQualityProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetQualityProfileRequest_FieldTerminalPath struct {
	selector GetQualityProfileRequest_FieldPathSelector
}

var _ GetQualityProfileRequest_FieldPath = (*GetQualityProfileRequest_FieldTerminalPath)(nil)

func (fp *GetQualityProfileRequest_FieldTerminalPath) Selector() GetQualityProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetQualityProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetQualityProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetQualityProfileRequest
func (fp *GetQualityProfileRequest_FieldTerminalPath) Get(source *GetQualityProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetQualityProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetQualityProfileRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetQualityProfileRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetQualityProfileRequest))
}

// GetSingle returns value pointed by specific field of from source GetQualityProfileRequest
func (fp *GetQualityProfileRequest_FieldTerminalPath) GetSingle(source *GetQualityProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetQualityProfileRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetQualityProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		return (*quality_profile.Reference)(nil)
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case GetQualityProfileRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) ClearValue(item *GetQualityProfileRequest) {
	if item != nil {
		switch fp.selector {
		case GetQualityProfileRequest_FieldPathSelectorName:
			item.Name = nil
		case GetQualityProfileRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetQualityProfileRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetQualityProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetQualityProfileRequest_FieldPathSelectorName ||
		fp.selector == GetQualityProfileRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetQualityProfileRequest_FieldPathSelectorView
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithIValue(value interface{}) GetQualityProfileRequest_FieldPathValue {
	switch fp.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		return &GetQualityProfileRequest_FieldTerminalPathValue{GetQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		return &GetQualityProfileRequest_FieldTerminalPathValue{GetQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case GetQualityProfileRequest_FieldPathSelectorView:
		return &GetQualityProfileRequest_FieldTerminalPathValue{GetQualityProfileRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetQualityProfileRequest_FieldPathArrayOfValues {
	fpaov := &GetQualityProfileRequest_FieldTerminalPathArrayOfValues{GetQualityProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		return &GetQualityProfileRequest_FieldTerminalPathArrayOfValues{GetQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Reference)}
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		return &GetQualityProfileRequest_FieldTerminalPathArrayOfValues{GetQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case GetQualityProfileRequest_FieldPathSelectorView:
		return &GetQualityProfileRequest_FieldTerminalPathArrayOfValues{GetQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetQualityProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *GetQualityProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetQualityProfileRequest_FieldPathValue allows storing values for GetQualityProfileRequest fields according to their type
type GetQualityProfileRequest_FieldPathValue interface {
	GetQualityProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetQualityProfileRequest)
	CompareWith(*GetQualityProfileRequest) (cmp int, comparable bool)
}

func ParseGetQualityProfileRequest_FieldPathValue(pathStr, valueStr string) (GetQualityProfileRequest_FieldPathValue, error) {
	fp, err := ParseGetQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetQualityProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetQualityProfileRequest_FieldPathValue), nil
}

func MustParseGetQualityProfileRequest_FieldPathValue(pathStr, valueStr string) GetQualityProfileRequest_FieldPathValue {
	fpv, err := ParseGetQualityProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetQualityProfileRequest_FieldTerminalPathValue struct {
	GetQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ GetQualityProfileRequest_FieldPathValue = (*GetQualityProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetQualityProfileRequest' as interface{}
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) AsNameValue() (*quality_profile.Reference, bool) {
	res, ok := fpv.value.(*quality_profile.Reference)
	return res, ok
}
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetQualityProfileRequest
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) SetTo(target **GetQualityProfileRequest) {
	if *target == nil {
		*target = new(GetQualityProfileRequest)
	}
	switch fpv.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*quality_profile.Reference)
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case GetQualityProfileRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetQualityProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetQualityProfileRequest_FieldTerminalPathValue' with the value under path in 'GetQualityProfileRequest'.
func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) CompareWith(source *GetQualityProfileRequest) (int, bool) {
	switch fpv.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*quality_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetQualityProfileRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *GetQualityProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetQualityProfileRequest))
}

// GetQualityProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetQualityProfileRequest according to their type
// Present only for array (repeated) types.
type GetQualityProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetQualityProfileRequest_FieldPath
	ContainsValue(*GetQualityProfileRequest) bool
}

// ParseGetQualityProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetQualityProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetQualityProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetQualityProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseGetQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetQualityProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetQualityProfileRequest_FieldTerminalPathArrayItemValue struct {
	GetQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ GetQualityProfileRequest_FieldPathArrayItemValue = (*GetQualityProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetQualityProfileRequest as interface{}
func (fpaiv *GetQualityProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetQualityProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetQualityProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetQualityProfileRequest'
func (fpaiv *GetQualityProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetQualityProfileRequest) bool {
	slice := fpaiv.GetQualityProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetQualityProfileRequest_FieldPathArrayOfValues allows storing slice of values for GetQualityProfileRequest fields according to their type
type GetQualityProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetQualityProfileRequest_FieldPath
}

func ParseGetQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetQualityProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetQualityProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetQualityProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseGetQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetQualityProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetQualityProfileRequest_FieldTerminalPathArrayOfValues struct {
	GetQualityProfileRequest_FieldTerminalPath
	values interface{}
}

var _ GetQualityProfileRequest_FieldPathArrayOfValues = (*GetQualityProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetQualityProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetQualityProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*quality_profile.Reference) {
			values = append(values, v)
		}
	case GetQualityProfileRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case GetQualityProfileRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetQualityProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([]*quality_profile.Reference)
	return res, ok
}
func (fpaov *GetQualityProfileRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *GetQualityProfileRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetQualityProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetQualityProfilesRequest_FieldPathSelector
	Get(source *BatchGetQualityProfilesRequest) []interface{}
	GetSingle(source *BatchGetQualityProfilesRequest) (interface{}, bool)
	ClearValue(item *BatchGetQualityProfilesRequest)

	// Those methods build corresponding BatchGetQualityProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetQualityProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetQualityProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetQualityProfilesRequest_FieldPathArrayItemValue
}

type BatchGetQualityProfilesRequest_FieldPathSelector int32

const (
	BatchGetQualityProfilesRequest_FieldPathSelectorParent    BatchGetQualityProfilesRequest_FieldPathSelector = 0
	BatchGetQualityProfilesRequest_FieldPathSelectorNames     BatchGetQualityProfilesRequest_FieldPathSelector = 1
	BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask BatchGetQualityProfilesRequest_FieldPathSelector = 2
	BatchGetQualityProfilesRequest_FieldPathSelectorView      BatchGetQualityProfilesRequest_FieldPathSelector = 3
)

func (s BatchGetQualityProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", s))
	}
}

func BuildBatchGetQualityProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetQualityProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetQualityProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetQualityProfilesRequest", fp)
}

func ParseBatchGetQualityProfilesRequest_FieldPath(rawField string) (BatchGetQualityProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetQualityProfilesRequest_FieldPath(fp)
}

func MustParseBatchGetQualityProfilesRequest_FieldPath(rawField string) BatchGetQualityProfilesRequest_FieldPath {
	fp, err := ParseBatchGetQualityProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetQualityProfilesRequest_FieldTerminalPath struct {
	selector BatchGetQualityProfilesRequest_FieldPathSelector
}

var _ BatchGetQualityProfilesRequest_FieldPath = (*BatchGetQualityProfilesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) Selector() BatchGetQualityProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetQualityProfilesRequest
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) Get(source *BatchGetQualityProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetQualityProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetQualityProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetQualityProfilesRequest
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) GetSingle(source *BatchGetQualityProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetQualityProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		return (*quality_profile.Reference)(nil)
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return ([]*quality_profile.Reference)(nil)
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) ClearValue(item *BatchGetQualityProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetQualityProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetQualityProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetQualityProfilesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetQualityProfilesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetQualityProfilesRequest_FieldPathSelectorView
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetQualityProfilesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathValue{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathValue{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, value: value.([]*quality_profile.Reference)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathValue{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathValue{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Reference)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([][]*quality_profile.Reference)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetQualityProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return &BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue{BatchGetQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetQualityProfilesRequest_FieldPathValue allows storing values for BatchGetQualityProfilesRequest fields according to their type
type BatchGetQualityProfilesRequest_FieldPathValue interface {
	BatchGetQualityProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetQualityProfilesRequest)
	CompareWith(*BatchGetQualityProfilesRequest) (cmp int, comparable bool)
}

func ParseBatchGetQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetQualityProfilesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetQualityProfilesRequest_FieldPathValue), nil
}

func MustParseBatchGetQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) BatchGetQualityProfilesRequest_FieldPathValue {
	fpv, err := ParseBatchGetQualityProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetQualityProfilesRequest_FieldTerminalPathValue struct {
	BatchGetQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetQualityProfilesRequest_FieldPathValue = (*BatchGetQualityProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetQualityProfilesRequest' as interface{}
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) AsParentValue() (*quality_profile.Reference, bool) {
	res, ok := fpv.value.(*quality_profile.Reference)
	return res, ok
}
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) AsNamesValue() ([]*quality_profile.Reference, bool) {
	res, ok := fpv.value.([]*quality_profile.Reference)
	return res, ok
}
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetQualityProfilesRequest
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) SetTo(target **BatchGetQualityProfilesRequest) {
	if *target == nil {
		*target = new(BatchGetQualityProfilesRequest)
	}
	switch fpv.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*quality_profile.Reference)
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*quality_profile.Reference)
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetQualityProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetQualityProfilesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetQualityProfilesRequest'.
func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetQualityProfilesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*quality_profile.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetQualityProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetQualityProfilesRequest))
}

// BatchGetQualityProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetQualityProfilesRequest according to their type
// Present only for array (repeated) types.
type BatchGetQualityProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetQualityProfilesRequest_FieldPath
	ContainsValue(*BatchGetQualityProfilesRequest) bool
}

// ParseBatchGetQualityProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetQualityProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetQualityProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetQualityProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetQualityProfilesRequest_FieldPathArrayItemValue = (*BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetQualityProfilesRequest as interface{}
func (fpaiv *BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*quality_profile.Reference, bool) {
	res, ok := fpaiv.value.(*quality_profile.Reference)
	return res, ok
}

func (fpaiv *BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetQualityProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetQualityProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetQualityProfilesRequest'
func (fpaiv *BatchGetQualityProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetQualityProfilesRequest) bool {
	slice := fpaiv.BatchGetQualityProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetQualityProfilesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetQualityProfilesRequest fields according to their type
type BatchGetQualityProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetQualityProfilesRequest_FieldPath
}

func ParseBatchGetQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetQualityProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetQualityProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetQualityProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetQualityProfilesRequest_FieldPathArrayOfValues = (*BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetQualityProfilesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*quality_profile.Reference) {
			values = append(values, v)
		}
	case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*quality_profile.Reference) {
			values = append(values, v)
		}
	case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case BatchGetQualityProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([]*quality_profile.Reference)
	return res, ok
}
func (fpaov *BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([][]*quality_profile.Reference)
	return res, ok
}
func (fpaov *BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *BatchGetQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetQualityProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetQualityProfilesResponse_FieldPathSelector
	Get(source *BatchGetQualityProfilesResponse) []interface{}
	GetSingle(source *BatchGetQualityProfilesResponse) (interface{}, bool)
	ClearValue(item *BatchGetQualityProfilesResponse)

	// Those methods build corresponding BatchGetQualityProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetQualityProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathArrayItemValue
}

type BatchGetQualityProfilesResponse_FieldPathSelector int32

const (
	BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles BatchGetQualityProfilesResponse_FieldPathSelector = 0
	BatchGetQualityProfilesResponse_FieldPathSelectorMissing         BatchGetQualityProfilesResponse_FieldPathSelector = 1
)

func (s BatchGetQualityProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return "quality_profiles"
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", s))
	}
}

func BuildBatchGetQualityProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetQualityProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetQualityProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "quality_profiles", "qualityProfiles", "quality-profiles":
			return &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles}, nil
		case "missing":
			return &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "quality_profiles", "qualityProfiles", "quality-profiles":
			if subpath, err := quality_profile.BuildQualityProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetQualityProfilesResponse_FieldSubPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetQualityProfilesResponse", fp)
}

func ParseBatchGetQualityProfilesResponse_FieldPath(rawField string) (BatchGetQualityProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetQualityProfilesResponse_FieldPath(fp)
}

func MustParseBatchGetQualityProfilesResponse_FieldPath(rawField string) BatchGetQualityProfilesResponse_FieldPath {
	fp, err := ParseBatchGetQualityProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetQualityProfilesResponse_FieldTerminalPath struct {
	selector BatchGetQualityProfilesResponse_FieldPathSelector
}

var _ BatchGetQualityProfilesResponse_FieldPath = (*BatchGetQualityProfilesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) Selector() BatchGetQualityProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetQualityProfilesResponse
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) Get(source *BatchGetQualityProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			for _, value := range source.GetQualityProfiles() {
				values = append(values, value)
			}
		case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetQualityProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetQualityProfilesResponse
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) GetSingle(source *BatchGetQualityProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		res := source.GetQualityProfiles()
		return res, res != nil
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return ([]*quality_profile.QualityProfile)(nil)
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return ([]*quality_profile.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) ClearValue(item *BatchGetQualityProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			item.QualityProfiles = nil
		case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetQualityProfilesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathValue{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, value: value.([]*quality_profile.QualityProfile)}
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathValue{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, value: value.([]*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*quality_profile.QualityProfile)}
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile)}
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue{BatchGetQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetQualityProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetQualityProfilesResponse_FieldSubPath struct {
	selector BatchGetQualityProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetQualityProfilesResponse_FieldPath = (*BatchGetQualityProfilesResponse_FieldSubPath)(nil)

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) Selector() BatchGetQualityProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) AsQualityProfilesSubPath() (quality_profile.QualityProfile_FieldPath, bool) {
	res, ok := fps.subPath.(quality_profile.QualityProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetQualityProfilesResponse
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) Get(source *BatchGetQualityProfilesResponse) (values []interface{}) {
	if asQualityProfileFieldPath, ok := fps.AsQualityProfilesSubPath(); ok {
		for _, item := range source.GetQualityProfiles() {
			values = append(values, asQualityProfileFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetQualityProfilesResponse))
}

// GetSingle returns value of selected field from source BatchGetQualityProfilesResponse
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) GetSingle(source *BatchGetQualityProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		if len(source.GetQualityProfiles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQualityProfiles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) ClearValue(item *BatchGetQualityProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			for _, subItem := range item.QualityProfiles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetQualityProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathValue {
	return &BatchGetQualityProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetQualityProfilesResponse_FieldPathArrayOfValues {
	return &BatchGetQualityProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetQualityProfilesResponse_FieldPathArrayItemValue {
	return &BatchGetQualityProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetQualityProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetQualityProfilesResponse_FieldPathValue allows storing values for BatchGetQualityProfilesResponse fields according to their type
type BatchGetQualityProfilesResponse_FieldPathValue interface {
	BatchGetQualityProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetQualityProfilesResponse)
	CompareWith(*BatchGetQualityProfilesResponse) (cmp int, comparable bool)
}

func ParseBatchGetQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetQualityProfilesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetQualityProfilesResponse_FieldPathValue), nil
}

func MustParseBatchGetQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) BatchGetQualityProfilesResponse_FieldPathValue {
	fpv, err := ParseBatchGetQualityProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetQualityProfilesResponse_FieldTerminalPathValue struct {
	BatchGetQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetQualityProfilesResponse_FieldPathValue = (*BatchGetQualityProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetQualityProfilesResponse' as interface{}
func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) AsQualityProfilesValue() ([]*quality_profile.QualityProfile, bool) {
	res, ok := fpv.value.([]*quality_profile.QualityProfile)
	return res, ok
}
func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) AsMissingValue() ([]*quality_profile.Reference, bool) {
	res, ok := fpv.value.([]*quality_profile.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetQualityProfilesResponse
func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) SetTo(target **BatchGetQualityProfilesResponse) {
	if *target == nil {
		*target = new(BatchGetQualityProfilesResponse)
	}
	switch fpv.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		(*target).QualityProfiles = fpv.value.([]*quality_profile.QualityProfile)
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*quality_profile.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetQualityProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetQualityProfilesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetQualityProfilesResponse'.
func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetQualityProfilesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return 0, false
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetQualityProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetQualityProfilesResponse))
}

type BatchGetQualityProfilesResponse_FieldSubPathValue struct {
	BatchGetQualityProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetQualityProfilesResponse_FieldPathValue = (*BatchGetQualityProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) AsQualityProfilesPathValue() (quality_profile.QualityProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) SetTo(target **BatchGetQualityProfilesResponse) {
	if *target == nil {
		*target = new(BatchGetQualityProfilesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetQualityProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) CompareWith(source *BatchGetQualityProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetQualityProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetQualityProfilesResponse))
}

// BatchGetQualityProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetQualityProfilesResponse according to their type
// Present only for array (repeated) types.
type BatchGetQualityProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetQualityProfilesResponse_FieldPath
	ContainsValue(*BatchGetQualityProfilesResponse) bool
}

// ParseBatchGetQualityProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetQualityProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetQualityProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetQualityProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetQualityProfilesResponse_FieldPathArrayItemValue = (*BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetQualityProfilesResponse as interface{}
func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) AsQualityProfilesItemValue() (*quality_profile.QualityProfile, bool) {
	res, ok := fpaiv.value.(*quality_profile.QualityProfile)
	return res, ok
}
func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*quality_profile.Reference, bool) {
	res, ok := fpaiv.value.(*quality_profile.Reference)
	return res, ok
}

func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetQualityProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetQualityProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetQualityProfilesResponse'
func (fpaiv *BatchGetQualityProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetQualityProfilesResponse) bool {
	slice := fpaiv.BatchGetQualityProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetQualityProfilesResponse_FieldSubPathArrayItemValue struct {
	BatchGetQualityProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetQualityProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetQualityProfilesResponse_FieldSubPathArrayItemValue) AsQualityProfilesPathItemValue() (quality_profile.QualityProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetQualityProfilesResponse'
func (fpaivs *BatchGetQualityProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetQualityProfilesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetQualityProfilesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetQualityProfilesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetQualityProfilesResponse fields according to their type
type BatchGetQualityProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetQualityProfilesResponse_FieldPath
}

func ParseBatchGetQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetQualityProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetQualityProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetQualityProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetQualityProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetQualityProfilesResponse_FieldPathArrayOfValues = (*BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		for _, v := range fpaov.values.([][]*quality_profile.QualityProfile) {
			values = append(values, v)
		}
	case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*quality_profile.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsQualityProfilesArrayOfValues() ([][]*quality_profile.QualityProfile, bool) {
	res, ok := fpaov.values.([][]*quality_profile.QualityProfile)
	return res, ok
}
func (fpaov *BatchGetQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([][]*quality_profile.Reference)
	return res, ok
}

type BatchGetQualityProfilesResponse_FieldSubPathArrayOfValues struct {
	BatchGetQualityProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetQualityProfilesResponse_FieldPathArrayOfValues = (*BatchGetQualityProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetQualityProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetQualityProfilesResponse_FieldSubPathArrayOfValues) AsQualityProfilesPathArrayOfValues() (quality_profile.QualityProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(quality_profile.QualityProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListQualityProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListQualityProfilesRequest_FieldPathSelector
	Get(source *ListQualityProfilesRequest) []interface{}
	GetSingle(source *ListQualityProfilesRequest) (interface{}, bool)
	ClearValue(item *ListQualityProfilesRequest)

	// Those methods build corresponding ListQualityProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListQualityProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListQualityProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListQualityProfilesRequest_FieldPathArrayItemValue
}

type ListQualityProfilesRequest_FieldPathSelector int32

const (
	ListQualityProfilesRequest_FieldPathSelectorParent    ListQualityProfilesRequest_FieldPathSelector = 0
	ListQualityProfilesRequest_FieldPathSelectorPageSize  ListQualityProfilesRequest_FieldPathSelector = 1
	ListQualityProfilesRequest_FieldPathSelectorPageToken ListQualityProfilesRequest_FieldPathSelector = 2
	ListQualityProfilesRequest_FieldPathSelectorOrderBy   ListQualityProfilesRequest_FieldPathSelector = 3
	ListQualityProfilesRequest_FieldPathSelectorFilter    ListQualityProfilesRequest_FieldPathSelector = 4
	ListQualityProfilesRequest_FieldPathSelectorFieldMask ListQualityProfilesRequest_FieldPathSelector = 5
	ListQualityProfilesRequest_FieldPathSelectorView      ListQualityProfilesRequest_FieldPathSelector = 6
)

func (s ListQualityProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		return "parent"
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListQualityProfilesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", s))
	}
}

func BuildListQualityProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListQualityProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListQualityProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListQualityProfilesRequest", fp)
}

func ParseListQualityProfilesRequest_FieldPath(rawField string) (ListQualityProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListQualityProfilesRequest_FieldPath(fp)
}

func MustParseListQualityProfilesRequest_FieldPath(rawField string) ListQualityProfilesRequest_FieldPath {
	fp, err := ParseListQualityProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListQualityProfilesRequest_FieldTerminalPath struct {
	selector ListQualityProfilesRequest_FieldPathSelector
}

var _ ListQualityProfilesRequest_FieldPath = (*ListQualityProfilesRequest_FieldTerminalPath)(nil)

func (fp *ListQualityProfilesRequest_FieldTerminalPath) Selector() ListQualityProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListQualityProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListQualityProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListQualityProfilesRequest
func (fp *ListQualityProfilesRequest_FieldTerminalPath) Get(source *ListQualityProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListQualityProfilesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListQualityProfilesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListQualityProfilesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListQualityProfilesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListQualityProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListQualityProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source ListQualityProfilesRequest
func (fp *ListQualityProfilesRequest_FieldTerminalPath) GetSingle(source *ListQualityProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListQualityProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListQualityProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListQualityProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		return (*quality_profile.ParentName)(nil)
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		return (*quality_profile.PagerCursor)(nil)
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		return (*quality_profile.OrderBy)(nil)
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		return (*quality_profile.Filter)(nil)
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case ListQualityProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) ClearValue(item *ListQualityProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case ListQualityProfilesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListQualityProfilesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListQualityProfilesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListQualityProfilesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListQualityProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListQualityProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListQualityProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListQualityProfilesRequest_FieldPathSelectorParent ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorFilter ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListQualityProfilesRequest_FieldPathSelectorView
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) ListQualityProfilesRequest_FieldPathValue {
	switch fp.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.ParentName)}
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.OrderBy)}
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Filter)}
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case ListQualityProfilesRequest_FieldPathSelectorView:
		return &ListQualityProfilesRequest_FieldTerminalPathValue{ListQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov := &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.ParentName)}
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.OrderBy)}
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Filter)}
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case ListQualityProfilesRequest_FieldPathSelectorView:
		return &ListQualityProfilesRequest_FieldTerminalPathArrayOfValues{ListQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListQualityProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListQualityProfilesRequest_FieldPathValue allows storing values for ListQualityProfilesRequest fields according to their type
type ListQualityProfilesRequest_FieldPathValue interface {
	ListQualityProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListQualityProfilesRequest)
	CompareWith(*ListQualityProfilesRequest) (cmp int, comparable bool)
}

func ParseListQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) (ListQualityProfilesRequest_FieldPathValue, error) {
	fp, err := ParseListQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListQualityProfilesRequest_FieldPathValue), nil
}

func MustParseListQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) ListQualityProfilesRequest_FieldPathValue {
	fpv, err := ParseListQualityProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListQualityProfilesRequest_FieldTerminalPathValue struct {
	ListQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ ListQualityProfilesRequest_FieldPathValue = (*ListQualityProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListQualityProfilesRequest' as interface{}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsParentValue() (*quality_profile.ParentName, bool) {
	res, ok := fpv.value.(*quality_profile.ParentName)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsOrderByValue() (*quality_profile.OrderBy, bool) {
	res, ok := fpv.value.(*quality_profile.OrderBy)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsFilterValue() (*quality_profile.Filter, bool) {
	res, ok := fpv.value.(*quality_profile.Filter)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListQualityProfilesRequest
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) SetTo(target **ListQualityProfilesRequest) {
	if *target == nil {
		*target = new(ListQualityProfilesRequest)
	}
	switch fpv.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*quality_profile.ParentName)
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*quality_profile.PagerCursor)
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*quality_profile.OrderBy)
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*quality_profile.Filter)
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case ListQualityProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListQualityProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListQualityProfilesRequest_FieldTerminalPathValue' with the value under path in 'ListQualityProfilesRequest'.
func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) CompareWith(source *ListQualityProfilesRequest) (int, bool) {
	switch fpv.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*quality_profile.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListQualityProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *ListQualityProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListQualityProfilesRequest))
}

// ListQualityProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListQualityProfilesRequest according to their type
// Present only for array (repeated) types.
type ListQualityProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListQualityProfilesRequest_FieldPath
	ContainsValue(*ListQualityProfilesRequest) bool
}

// ParseListQualityProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListQualityProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListQualityProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseListQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListQualityProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListQualityProfilesRequest_FieldTerminalPathArrayItemValue struct {
	ListQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ ListQualityProfilesRequest_FieldPathArrayItemValue = (*ListQualityProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListQualityProfilesRequest as interface{}
func (fpaiv *ListQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListQualityProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListQualityProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListQualityProfilesRequest'
func (fpaiv *ListQualityProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListQualityProfilesRequest) bool {
	slice := fpaiv.ListQualityProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListQualityProfilesRequest_FieldPathArrayOfValues allows storing slice of values for ListQualityProfilesRequest fields according to their type
type ListQualityProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListQualityProfilesRequest_FieldPath
}

func ParseListQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListQualityProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListQualityProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseListQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListQualityProfilesRequest_FieldTerminalPathArrayOfValues struct {
	ListQualityProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ ListQualityProfilesRequest_FieldPathArrayOfValues = (*ListQualityProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListQualityProfilesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*quality_profile.ParentName) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*quality_profile.OrderBy) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*quality_profile.Filter) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case ListQualityProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*quality_profile.ParentName, bool) {
	res, ok := fpaov.values.([]*quality_profile.ParentName)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*quality_profile.OrderBy, bool) {
	res, ok := fpaov.values.([]*quality_profile.OrderBy)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*quality_profile.Filter, bool) {
	res, ok := fpaov.values.([]*quality_profile.Filter)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *ListQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListQualityProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListQualityProfilesResponse_FieldPathSelector
	Get(source *ListQualityProfilesResponse) []interface{}
	GetSingle(source *ListQualityProfilesResponse) (interface{}, bool)
	ClearValue(item *ListQualityProfilesResponse)

	// Those methods build corresponding ListQualityProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListQualityProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListQualityProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListQualityProfilesResponse_FieldPathArrayItemValue
}

type ListQualityProfilesResponse_FieldPathSelector int32

const (
	ListQualityProfilesResponse_FieldPathSelectorQualityProfiles ListQualityProfilesResponse_FieldPathSelector = 0
	ListQualityProfilesResponse_FieldPathSelectorPrevPageToken   ListQualityProfilesResponse_FieldPathSelector = 1
	ListQualityProfilesResponse_FieldPathSelectorNextPageToken   ListQualityProfilesResponse_FieldPathSelector = 2
)

func (s ListQualityProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return "quality_profiles"
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", s))
	}
}

func BuildListQualityProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListQualityProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListQualityProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "quality_profiles", "qualityProfiles", "quality-profiles":
			return &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "quality_profiles", "qualityProfiles", "quality-profiles":
			if subpath, err := quality_profile.BuildQualityProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListQualityProfilesResponse_FieldSubPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListQualityProfilesResponse", fp)
}

func ParseListQualityProfilesResponse_FieldPath(rawField string) (ListQualityProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListQualityProfilesResponse_FieldPath(fp)
}

func MustParseListQualityProfilesResponse_FieldPath(rawField string) ListQualityProfilesResponse_FieldPath {
	fp, err := ParseListQualityProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListQualityProfilesResponse_FieldTerminalPath struct {
	selector ListQualityProfilesResponse_FieldPathSelector
}

var _ ListQualityProfilesResponse_FieldPath = (*ListQualityProfilesResponse_FieldTerminalPath)(nil)

func (fp *ListQualityProfilesResponse_FieldTerminalPath) Selector() ListQualityProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListQualityProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListQualityProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListQualityProfilesResponse
func (fp *ListQualityProfilesResponse_FieldTerminalPath) Get(source *ListQualityProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			for _, value := range source.GetQualityProfiles() {
				values = append(values, value)
			}
		case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListQualityProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source ListQualityProfilesResponse
func (fp *ListQualityProfilesResponse_FieldTerminalPath) GetSingle(source *ListQualityProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		res := source.GetQualityProfiles()
		return res, res != nil
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListQualityProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return ([]*quality_profile.QualityProfile)(nil)
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		return (*quality_profile.PagerCursor)(nil)
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		return (*quality_profile.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) ClearValue(item *ListQualityProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			item.QualityProfiles = nil
		case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListQualityProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListQualityProfilesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListQualityProfilesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) ListQualityProfilesResponse_FieldPathValue {
	switch fp.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &ListQualityProfilesResponse_FieldTerminalPathValue{ListQualityProfilesResponse_FieldTerminalPath: *fp, value: value.([]*quality_profile.QualityProfile)}
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		return &ListQualityProfilesResponse_FieldTerminalPathValue{ListQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		return &ListQualityProfilesResponse_FieldTerminalPathValue{ListQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov := &ListQualityProfilesResponse_FieldTerminalPathArrayOfValues{ListQualityProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &ListQualityProfilesResponse_FieldTerminalPathArrayOfValues{ListQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*quality_profile.QualityProfile)}
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		return &ListQualityProfilesResponse_FieldTerminalPathArrayOfValues{ListQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		return &ListQualityProfilesResponse_FieldTerminalPathArrayOfValues{ListQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListQualityProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return &ListQualityProfilesResponse_FieldTerminalPathArrayItemValue{ListQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListQualityProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListQualityProfilesResponse_FieldSubPath struct {
	selector ListQualityProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListQualityProfilesResponse_FieldPath = (*ListQualityProfilesResponse_FieldSubPath)(nil)

func (fps *ListQualityProfilesResponse_FieldSubPath) Selector() ListQualityProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListQualityProfilesResponse_FieldSubPath) AsQualityProfilesSubPath() (quality_profile.QualityProfile_FieldPath, bool) {
	res, ok := fps.subPath.(quality_profile.QualityProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListQualityProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListQualityProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListQualityProfilesResponse
func (fps *ListQualityProfilesResponse_FieldSubPath) Get(source *ListQualityProfilesResponse) (values []interface{}) {
	if asQualityProfileFieldPath, ok := fps.AsQualityProfilesSubPath(); ok {
		for _, item := range source.GetQualityProfiles() {
			values = append(values, asQualityProfileFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListQualityProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListQualityProfilesResponse))
}

// GetSingle returns value of selected field from source ListQualityProfilesResponse
func (fps *ListQualityProfilesResponse_FieldSubPath) GetSingle(source *ListQualityProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		if len(source.GetQualityProfiles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQualityProfiles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fps.selector))
	}
}

func (fps *ListQualityProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListQualityProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListQualityProfilesResponse_FieldSubPath) ClearValue(item *ListQualityProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			for _, subItem := range item.QualityProfiles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListQualityProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListQualityProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithIValue(value interface{}) ListQualityProfilesResponse_FieldPathValue {
	return &ListQualityProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListQualityProfilesResponse_FieldPathArrayOfValues {
	return &ListQualityProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListQualityProfilesResponse_FieldPathArrayItemValue {
	return &ListQualityProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListQualityProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListQualityProfilesResponse_FieldPathValue allows storing values for ListQualityProfilesResponse fields according to their type
type ListQualityProfilesResponse_FieldPathValue interface {
	ListQualityProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListQualityProfilesResponse)
	CompareWith(*ListQualityProfilesResponse) (cmp int, comparable bool)
}

func ParseListQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) (ListQualityProfilesResponse_FieldPathValue, error) {
	fp, err := ParseListQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListQualityProfilesResponse_FieldPathValue), nil
}

func MustParseListQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) ListQualityProfilesResponse_FieldPathValue {
	fpv, err := ParseListQualityProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListQualityProfilesResponse_FieldTerminalPathValue struct {
	ListQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ ListQualityProfilesResponse_FieldPathValue = (*ListQualityProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListQualityProfilesResponse' as interface{}
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) AsQualityProfilesValue() ([]*quality_profile.QualityProfile, bool) {
	res, ok := fpv.value.([]*quality_profile.QualityProfile)
	return res, ok
}
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListQualityProfilesResponse
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) SetTo(target **ListQualityProfilesResponse) {
	if *target == nil {
		*target = new(ListQualityProfilesResponse)
	}
	switch fpv.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		(*target).QualityProfiles = fpv.value.([]*quality_profile.QualityProfile)
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*quality_profile.PagerCursor)
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*quality_profile.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListQualityProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListQualityProfilesResponse_FieldTerminalPathValue' with the value under path in 'ListQualityProfilesResponse'.
func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) CompareWith(source *ListQualityProfilesResponse) (int, bool) {
	switch fpv.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return 0, false
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *ListQualityProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListQualityProfilesResponse))
}

type ListQualityProfilesResponse_FieldSubPathValue struct {
	ListQualityProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListQualityProfilesResponse_FieldPathValue = (*ListQualityProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) AsQualityProfilesPathValue() (quality_profile.QualityProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue)
	return res, ok
}

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) SetTo(target **ListQualityProfilesResponse) {
	if *target == nil {
		*target = new(ListQualityProfilesResponse)
	}
	switch fpvs.Selector() {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListQualityProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) CompareWith(source *ListQualityProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListQualityProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListQualityProfilesResponse))
}

// ListQualityProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListQualityProfilesResponse according to their type
// Present only for array (repeated) types.
type ListQualityProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListQualityProfilesResponse_FieldPath
	ContainsValue(*ListQualityProfilesResponse) bool
}

// ParseListQualityProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListQualityProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListQualityProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseListQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListQualityProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListQualityProfilesResponse_FieldTerminalPathArrayItemValue struct {
	ListQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ ListQualityProfilesResponse_FieldPathArrayItemValue = (*ListQualityProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListQualityProfilesResponse as interface{}
func (fpaiv *ListQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListQualityProfilesResponse_FieldTerminalPathArrayItemValue) AsQualityProfilesItemValue() (*quality_profile.QualityProfile, bool) {
	res, ok := fpaiv.value.(*quality_profile.QualityProfile)
	return res, ok
}

func (fpaiv *ListQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListQualityProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListQualityProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListQualityProfilesResponse'
func (fpaiv *ListQualityProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListQualityProfilesResponse) bool {
	slice := fpaiv.ListQualityProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListQualityProfilesResponse_FieldSubPathArrayItemValue struct {
	ListQualityProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListQualityProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListQualityProfilesResponse_FieldSubPathArrayItemValue) AsQualityProfilesPathItemValue() (quality_profile.QualityProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListQualityProfilesResponse'
func (fpaivs *ListQualityProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListQualityProfilesResponse) bool {
	switch fpaivs.Selector() {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListQualityProfilesResponse: %d", fpaivs.Selector()))
	}
}

// ListQualityProfilesResponse_FieldPathArrayOfValues allows storing slice of values for ListQualityProfilesResponse fields according to their type
type ListQualityProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListQualityProfilesResponse_FieldPath
}

func ParseListQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListQualityProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListQualityProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListQualityProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseListQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListQualityProfilesResponse_FieldTerminalPathArrayOfValues struct {
	ListQualityProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ ListQualityProfilesResponse_FieldPathArrayOfValues = (*ListQualityProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListQualityProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
		for _, v := range fpaov.values.([][]*quality_profile.QualityProfile) {
			values = append(values, v)
		}
	case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsQualityProfilesArrayOfValues() ([][]*quality_profile.QualityProfile, bool) {
	res, ok := fpaov.values.([][]*quality_profile.QualityProfile)
	return res, ok
}
func (fpaov *ListQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}
func (fpaov *ListQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}

type ListQualityProfilesResponse_FieldSubPathArrayOfValues struct {
	ListQualityProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListQualityProfilesResponse_FieldPathArrayOfValues = (*ListQualityProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListQualityProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListQualityProfilesResponse_FieldSubPathArrayOfValues) AsQualityProfilesPathArrayOfValues() (quality_profile.QualityProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(quality_profile.QualityProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchQualityProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchQualityProfileRequest_FieldPathSelector
	Get(source *WatchQualityProfileRequest) []interface{}
	GetSingle(source *WatchQualityProfileRequest) (interface{}, bool)
	ClearValue(item *WatchQualityProfileRequest)

	// Those methods build corresponding WatchQualityProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchQualityProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchQualityProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchQualityProfileRequest_FieldPathArrayItemValue
}

type WatchQualityProfileRequest_FieldPathSelector int32

const (
	WatchQualityProfileRequest_FieldPathSelectorName      WatchQualityProfileRequest_FieldPathSelector = 0
	WatchQualityProfileRequest_FieldPathSelectorFieldMask WatchQualityProfileRequest_FieldPathSelector = 1
	WatchQualityProfileRequest_FieldPathSelectorView      WatchQualityProfileRequest_FieldPathSelector = 2
)

func (s WatchQualityProfileRequest_FieldPathSelector) String() string {
	switch s {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		return "name"
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchQualityProfileRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", s))
	}
}

func BuildWatchQualityProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchQualityProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchQualityProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchQualityProfileRequest", fp)
}

func ParseWatchQualityProfileRequest_FieldPath(rawField string) (WatchQualityProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchQualityProfileRequest_FieldPath(fp)
}

func MustParseWatchQualityProfileRequest_FieldPath(rawField string) WatchQualityProfileRequest_FieldPath {
	fp, err := ParseWatchQualityProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchQualityProfileRequest_FieldTerminalPath struct {
	selector WatchQualityProfileRequest_FieldPathSelector
}

var _ WatchQualityProfileRequest_FieldPath = (*WatchQualityProfileRequest_FieldTerminalPath)(nil)

func (fp *WatchQualityProfileRequest_FieldTerminalPath) Selector() WatchQualityProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchQualityProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchQualityProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchQualityProfileRequest
func (fp *WatchQualityProfileRequest_FieldTerminalPath) Get(source *WatchQualityProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchQualityProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchQualityProfileRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchQualityProfileRequest))
}

// GetSingle returns value pointed by specific field of from source WatchQualityProfileRequest
func (fp *WatchQualityProfileRequest_FieldTerminalPath) GetSingle(source *WatchQualityProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchQualityProfileRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchQualityProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		return (*quality_profile.Reference)(nil)
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case WatchQualityProfileRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) ClearValue(item *WatchQualityProfileRequest) {
	if item != nil {
		switch fp.selector {
		case WatchQualityProfileRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchQualityProfileRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchQualityProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchQualityProfileRequest_FieldPathSelectorName ||
		fp.selector == WatchQualityProfileRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchQualityProfileRequest_FieldPathSelectorView
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithIValue(value interface{}) WatchQualityProfileRequest_FieldPathValue {
	switch fp.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		return &WatchQualityProfileRequest_FieldTerminalPathValue{WatchQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		return &WatchQualityProfileRequest_FieldTerminalPathValue{WatchQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case WatchQualityProfileRequest_FieldPathSelectorView:
		return &WatchQualityProfileRequest_FieldTerminalPathValue{WatchQualityProfileRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchQualityProfileRequest_FieldPathArrayOfValues {
	fpaov := &WatchQualityProfileRequest_FieldTerminalPathArrayOfValues{WatchQualityProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		return &WatchQualityProfileRequest_FieldTerminalPathArrayOfValues{WatchQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Reference)}
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		return &WatchQualityProfileRequest_FieldTerminalPathArrayOfValues{WatchQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case WatchQualityProfileRequest_FieldPathSelectorView:
		return &WatchQualityProfileRequest_FieldTerminalPathArrayOfValues{WatchQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchQualityProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchQualityProfileRequest_FieldPathValue allows storing values for WatchQualityProfileRequest fields according to their type
type WatchQualityProfileRequest_FieldPathValue interface {
	WatchQualityProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchQualityProfileRequest)
	CompareWith(*WatchQualityProfileRequest) (cmp int, comparable bool)
}

func ParseWatchQualityProfileRequest_FieldPathValue(pathStr, valueStr string) (WatchQualityProfileRequest_FieldPathValue, error) {
	fp, err := ParseWatchQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchQualityProfileRequest_FieldPathValue), nil
}

func MustParseWatchQualityProfileRequest_FieldPathValue(pathStr, valueStr string) WatchQualityProfileRequest_FieldPathValue {
	fpv, err := ParseWatchQualityProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchQualityProfileRequest_FieldTerminalPathValue struct {
	WatchQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfileRequest_FieldPathValue = (*WatchQualityProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchQualityProfileRequest' as interface{}
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) AsNameValue() (*quality_profile.Reference, bool) {
	res, ok := fpv.value.(*quality_profile.Reference)
	return res, ok
}
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchQualityProfileRequest
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) SetTo(target **WatchQualityProfileRequest) {
	if *target == nil {
		*target = new(WatchQualityProfileRequest)
	}
	switch fpv.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*quality_profile.Reference)
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case WatchQualityProfileRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchQualityProfileRequest_FieldTerminalPathValue' with the value under path in 'WatchQualityProfileRequest'.
func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) CompareWith(source *WatchQualityProfileRequest) (int, bool) {
	switch fpv.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*quality_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchQualityProfileRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchQualityProfileRequest))
}

// WatchQualityProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchQualityProfileRequest according to their type
// Present only for array (repeated) types.
type WatchQualityProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchQualityProfileRequest_FieldPath
	ContainsValue(*WatchQualityProfileRequest) bool
}

// ParseWatchQualityProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchQualityProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchQualityProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchQualityProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchQualityProfileRequest_FieldTerminalPathArrayItemValue struct {
	WatchQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfileRequest_FieldPathArrayItemValue = (*WatchQualityProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchQualityProfileRequest as interface{}
func (fpaiv *WatchQualityProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchQualityProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchQualityProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchQualityProfileRequest'
func (fpaiv *WatchQualityProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchQualityProfileRequest) bool {
	slice := fpaiv.WatchQualityProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchQualityProfileRequest_FieldPathArrayOfValues allows storing slice of values for WatchQualityProfileRequest fields according to their type
type WatchQualityProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchQualityProfileRequest_FieldPath
}

func ParseWatchQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchQualityProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchQualityProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchQualityProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchQualityProfileRequest_FieldTerminalPathArrayOfValues struct {
	WatchQualityProfileRequest_FieldTerminalPath
	values interface{}
}

var _ WatchQualityProfileRequest_FieldPathArrayOfValues = (*WatchQualityProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchQualityProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchQualityProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*quality_profile.Reference) {
			values = append(values, v)
		}
	case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case WatchQualityProfileRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchQualityProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([]*quality_profile.Reference)
	return res, ok
}
func (fpaov *WatchQualityProfileRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *WatchQualityProfileRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchQualityProfileResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchQualityProfileResponse_FieldPathSelector
	Get(source *WatchQualityProfileResponse) []interface{}
	GetSingle(source *WatchQualityProfileResponse) (interface{}, bool)
	ClearValue(item *WatchQualityProfileResponse)

	// Those methods build corresponding WatchQualityProfileResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchQualityProfileResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchQualityProfileResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchQualityProfileResponse_FieldPathArrayItemValue
}

type WatchQualityProfileResponse_FieldPathSelector int32

const (
	WatchQualityProfileResponse_FieldPathSelectorChange WatchQualityProfileResponse_FieldPathSelector = 0
)

func (s WatchQualityProfileResponse_FieldPathSelector) String() string {
	switch s {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", s))
	}
}

func BuildWatchQualityProfileResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchQualityProfileResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchQualityProfileResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchQualityProfileResponse_FieldTerminalPath{selector: WatchQualityProfileResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchQualityProfileResponse", fp)
}

func ParseWatchQualityProfileResponse_FieldPath(rawField string) (WatchQualityProfileResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchQualityProfileResponse_FieldPath(fp)
}

func MustParseWatchQualityProfileResponse_FieldPath(rawField string) WatchQualityProfileResponse_FieldPath {
	fp, err := ParseWatchQualityProfileResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchQualityProfileResponse_FieldTerminalPath struct {
	selector WatchQualityProfileResponse_FieldPathSelector
}

var _ WatchQualityProfileResponse_FieldPath = (*WatchQualityProfileResponse_FieldTerminalPath)(nil)

func (fp *WatchQualityProfileResponse_FieldTerminalPath) Selector() WatchQualityProfileResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchQualityProfileResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchQualityProfileResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchQualityProfileResponse
func (fp *WatchQualityProfileResponse_FieldTerminalPath) Get(source *WatchQualityProfileResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchQualityProfileResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchQualityProfileResponse))
}

// GetSingle returns value pointed by specific field of from source WatchQualityProfileResponse
func (fp *WatchQualityProfileResponse_FieldTerminalPath) GetSingle(source *WatchQualityProfileResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchQualityProfileResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchQualityProfileResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		return (*quality_profile.QualityProfileChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) ClearValue(item *WatchQualityProfileResponse) {
	if item != nil {
		switch fp.selector {
		case WatchQualityProfileResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchQualityProfileResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchQualityProfileResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchQualityProfileResponse_FieldPathSelectorChange
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithIValue(value interface{}) WatchQualityProfileResponse_FieldPathValue {
	switch fp.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		return &WatchQualityProfileResponse_FieldTerminalPathValue{WatchQualityProfileResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchQualityProfileResponse_FieldPathArrayOfValues {
	fpaov := &WatchQualityProfileResponse_FieldTerminalPathArrayOfValues{WatchQualityProfileResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		return &WatchQualityProfileResponse_FieldTerminalPathArrayOfValues{WatchQualityProfileResponse_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchQualityProfileResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfileResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchQualityProfileResponse_FieldPathValue allows storing values for WatchQualityProfileResponse fields according to their type
type WatchQualityProfileResponse_FieldPathValue interface {
	WatchQualityProfileResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchQualityProfileResponse)
	CompareWith(*WatchQualityProfileResponse) (cmp int, comparable bool)
}

func ParseWatchQualityProfileResponse_FieldPathValue(pathStr, valueStr string) (WatchQualityProfileResponse_FieldPathValue, error) {
	fp, err := ParseWatchQualityProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchQualityProfileResponse_FieldPathValue), nil
}

func MustParseWatchQualityProfileResponse_FieldPathValue(pathStr, valueStr string) WatchQualityProfileResponse_FieldPathValue {
	fpv, err := ParseWatchQualityProfileResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchQualityProfileResponse_FieldTerminalPathValue struct {
	WatchQualityProfileResponse_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfileResponse_FieldPathValue = (*WatchQualityProfileResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchQualityProfileResponse' as interface{}
func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) AsChangeValue() (*quality_profile.QualityProfileChange, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfileChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchQualityProfileResponse
func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) SetTo(target **WatchQualityProfileResponse) {
	if *target == nil {
		*target = new(WatchQualityProfileResponse)
	}
	switch fpv.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*quality_profile.QualityProfileChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfileResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchQualityProfileResponse_FieldTerminalPathValue' with the value under path in 'WatchQualityProfileResponse'.
func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) CompareWith(source *WatchQualityProfileResponse) (int, bool) {
	switch fpv.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfileResponse: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfileResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchQualityProfileResponse))
}

// WatchQualityProfileResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchQualityProfileResponse according to their type
// Present only for array (repeated) types.
type WatchQualityProfileResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchQualityProfileResponse_FieldPath
	ContainsValue(*WatchQualityProfileResponse) bool
}

// ParseWatchQualityProfileResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchQualityProfileResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchQualityProfileResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchQualityProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchQualityProfileResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchQualityProfileResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchQualityProfileResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchQualityProfileResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchQualityProfileResponse_FieldTerminalPathArrayItemValue struct {
	WatchQualityProfileResponse_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfileResponse_FieldPathArrayItemValue = (*WatchQualityProfileResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchQualityProfileResponse as interface{}
func (fpaiv *WatchQualityProfileResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchQualityProfileResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchQualityProfileResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchQualityProfileResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchQualityProfileResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchQualityProfileResponse'
func (fpaiv *WatchQualityProfileResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchQualityProfileResponse) bool {
	slice := fpaiv.WatchQualityProfileResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchQualityProfileResponse_FieldPathArrayOfValues allows storing slice of values for WatchQualityProfileResponse fields according to their type
type WatchQualityProfileResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchQualityProfileResponse_FieldPath
}

func ParseWatchQualityProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchQualityProfileResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchQualityProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfileResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchQualityProfileResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchQualityProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchQualityProfileResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchQualityProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchQualityProfileResponse_FieldTerminalPathArrayOfValues struct {
	WatchQualityProfileResponse_FieldTerminalPath
	values interface{}
}

var _ WatchQualityProfileResponse_FieldPathArrayOfValues = (*WatchQualityProfileResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchQualityProfileResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchQualityProfileResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfileChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchQualityProfileResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*quality_profile.QualityProfileChange, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfileChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchQualityProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchQualityProfilesRequest_FieldPathSelector
	Get(source *WatchQualityProfilesRequest) []interface{}
	GetSingle(source *WatchQualityProfilesRequest) (interface{}, bool)
	ClearValue(item *WatchQualityProfilesRequest)

	// Those methods build corresponding WatchQualityProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchQualityProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchQualityProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchQualityProfilesRequest_FieldPathArrayItemValue
}

type WatchQualityProfilesRequest_FieldPathSelector int32

const (
	WatchQualityProfilesRequest_FieldPathSelectorType         WatchQualityProfilesRequest_FieldPathSelector = 0
	WatchQualityProfilesRequest_FieldPathSelectorParent       WatchQualityProfilesRequest_FieldPathSelector = 1
	WatchQualityProfilesRequest_FieldPathSelectorPageSize     WatchQualityProfilesRequest_FieldPathSelector = 2
	WatchQualityProfilesRequest_FieldPathSelectorPageToken    WatchQualityProfilesRequest_FieldPathSelector = 3
	WatchQualityProfilesRequest_FieldPathSelectorOrderBy      WatchQualityProfilesRequest_FieldPathSelector = 4
	WatchQualityProfilesRequest_FieldPathSelectorResumeToken  WatchQualityProfilesRequest_FieldPathSelector = 5
	WatchQualityProfilesRequest_FieldPathSelectorFilter       WatchQualityProfilesRequest_FieldPathSelector = 6
	WatchQualityProfilesRequest_FieldPathSelectorFieldMask    WatchQualityProfilesRequest_FieldPathSelector = 7
	WatchQualityProfilesRequest_FieldPathSelectorView         WatchQualityProfilesRequest_FieldPathSelector = 8
	WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize WatchQualityProfilesRequest_FieldPathSelector = 9
)

func (s WatchQualityProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		return "type"
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		return "view"
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", s))
	}
}

func BuildWatchQualityProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchQualityProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchQualityProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchQualityProfilesRequest", fp)
}

func ParseWatchQualityProfilesRequest_FieldPath(rawField string) (WatchQualityProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchQualityProfilesRequest_FieldPath(fp)
}

func MustParseWatchQualityProfilesRequest_FieldPath(rawField string) WatchQualityProfilesRequest_FieldPath {
	fp, err := ParseWatchQualityProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchQualityProfilesRequest_FieldTerminalPath struct {
	selector WatchQualityProfilesRequest_FieldPathSelector
}

var _ WatchQualityProfilesRequest_FieldPath = (*WatchQualityProfilesRequest_FieldTerminalPath)(nil)

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) Selector() WatchQualityProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchQualityProfilesRequest
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) Get(source *WatchQualityProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchQualityProfilesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchQualityProfilesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchQualityProfilesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchQualityProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchQualityProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchQualityProfilesRequest
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) GetSingle(source *WatchQualityProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchQualityProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		return (*quality_profile.ParentReference)(nil)
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		return (*quality_profile.PagerCursor)(nil)
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		return (*quality_profile.OrderBy)(nil)
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		return (*quality_profile.Filter)(nil)
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) ClearValue(item *WatchQualityProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchQualityProfilesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchQualityProfilesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchQualityProfilesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchQualityProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchQualityProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchQualityProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchQualityProfilesRequest_FieldPathSelectorType ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorParent ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorView ||
		fp.selector == WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchQualityProfilesRequest_FieldPathValue {
	switch fp.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.ParentReference)}
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.OrderBy)}
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Filter)}
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchQualityProfilesRequest_FieldTerminalPathValue{WatchQualityProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov := &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.ParentReference)}
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.OrderBy)}
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Filter)}
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues{WatchQualityProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchQualityProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchQualityProfilesRequest_FieldPathValue allows storing values for WatchQualityProfilesRequest fields according to their type
type WatchQualityProfilesRequest_FieldPathValue interface {
	WatchQualityProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchQualityProfilesRequest)
	CompareWith(*WatchQualityProfilesRequest) (cmp int, comparable bool)
}

func ParseWatchQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) (WatchQualityProfilesRequest_FieldPathValue, error) {
	fp, err := ParseWatchQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchQualityProfilesRequest_FieldPathValue), nil
}

func MustParseWatchQualityProfilesRequest_FieldPathValue(pathStr, valueStr string) WatchQualityProfilesRequest_FieldPathValue {
	fpv, err := ParseWatchQualityProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchQualityProfilesRequest_FieldTerminalPathValue struct {
	WatchQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesRequest_FieldPathValue = (*WatchQualityProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchQualityProfilesRequest' as interface{}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsParentValue() (*quality_profile.ParentReference, bool) {
	res, ok := fpv.value.(*quality_profile.ParentReference)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsOrderByValue() (*quality_profile.OrderBy, bool) {
	res, ok := fpv.value.(*quality_profile.OrderBy)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsFilterValue() (*quality_profile.Filter, bool) {
	res, ok := fpv.value.(*quality_profile.Filter)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchQualityProfilesRequest
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) SetTo(target **WatchQualityProfilesRequest) {
	if *target == nil {
		*target = new(WatchQualityProfilesRequest)
	}
	switch fpv.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*quality_profile.ParentReference)
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*quality_profile.PagerCursor)
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*quality_profile.OrderBy)
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*quality_profile.Filter)
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchQualityProfilesRequest_FieldTerminalPathValue' with the value under path in 'WatchQualityProfilesRequest'.
func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) CompareWith(source *WatchQualityProfilesRequest) (int, bool) {
	switch fpv.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*quality_profile.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchQualityProfilesRequest))
}

// WatchQualityProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchQualityProfilesRequest according to their type
// Present only for array (repeated) types.
type WatchQualityProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchQualityProfilesRequest_FieldPath
	ContainsValue(*WatchQualityProfilesRequest) bool
}

// ParseWatchQualityProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchQualityProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchQualityProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchQualityProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchQualityProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue struct {
	WatchQualityProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesRequest_FieldPathArrayItemValue = (*WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchQualityProfilesRequest as interface{}
func (fpaiv *WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchQualityProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchQualityProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchQualityProfilesRequest'
func (fpaiv *WatchQualityProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchQualityProfilesRequest) bool {
	slice := fpaiv.WatchQualityProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchQualityProfilesRequest_FieldPathArrayOfValues allows storing slice of values for WatchQualityProfilesRequest fields according to their type
type WatchQualityProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchQualityProfilesRequest_FieldPath
}

func ParseWatchQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchQualityProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchQualityProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchQualityProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchQualityProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchQualityProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues struct {
	WatchQualityProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchQualityProfilesRequest_FieldPathArrayOfValues = (*WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchQualityProfilesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*quality_profile.ParentReference) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*quality_profile.OrderBy) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*quality_profile.Filter) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*quality_profile.ParentReference, bool) {
	res, ok := fpaov.values.([]*quality_profile.ParentReference)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*quality_profile.OrderBy, bool) {
	res, ok := fpaov.values.([]*quality_profile.OrderBy)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*quality_profile.Filter, bool) {
	res, ok := fpaov.values.([]*quality_profile.Filter)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchQualityProfilesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchQualityProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchQualityProfilesResponse_FieldPathSelector
	Get(source *WatchQualityProfilesResponse) []interface{}
	GetSingle(source *WatchQualityProfilesResponse) (interface{}, bool)
	ClearValue(item *WatchQualityProfilesResponse)

	// Those methods build corresponding WatchQualityProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchQualityProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchQualityProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchQualityProfilesResponse_FieldPathArrayItemValue
}

type WatchQualityProfilesResponse_FieldPathSelector int32

const (
	WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges WatchQualityProfilesResponse_FieldPathSelector = 0
	WatchQualityProfilesResponse_FieldPathSelectorIsCurrent             WatchQualityProfilesResponse_FieldPathSelector = 1
	WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange       WatchQualityProfilesResponse_FieldPathSelector = 2
	WatchQualityProfilesResponse_FieldPathSelectorResumeToken           WatchQualityProfilesResponse_FieldPathSelector = 3
	WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize          WatchQualityProfilesResponse_FieldPathSelector = 4
	WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset           WatchQualityProfilesResponse_FieldPathSelector = 5
	WatchQualityProfilesResponse_FieldPathSelectorIsHardReset           WatchQualityProfilesResponse_FieldPathSelector = 6
)

func (s WatchQualityProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return "quality_profile_changes"
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", s))
	}
}

func BuildWatchQualityProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchQualityProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchQualityProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "quality_profile_changes", "qualityProfileChanges", "quality-profile-changes":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchQualityProfilesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchQualityProfilesResponse_FieldSubPath{selector: WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchQualityProfilesResponse", fp)
}

func ParseWatchQualityProfilesResponse_FieldPath(rawField string) (WatchQualityProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchQualityProfilesResponse_FieldPath(fp)
}

func MustParseWatchQualityProfilesResponse_FieldPath(rawField string) WatchQualityProfilesResponse_FieldPath {
	fp, err := ParseWatchQualityProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchQualityProfilesResponse_FieldTerminalPath struct {
	selector WatchQualityProfilesResponse_FieldPathSelector
}

var _ WatchQualityProfilesResponse_FieldPath = (*WatchQualityProfilesResponse_FieldTerminalPath)(nil)

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) Selector() WatchQualityProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchQualityProfilesResponse
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) Get(source *WatchQualityProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
			for _, value := range source.GetQualityProfileChanges() {
				values = append(values, value)
			}
		case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchQualityProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchQualityProfilesResponse
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) GetSingle(source *WatchQualityProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		res := source.GetQualityProfileChanges()
		return res, res != nil
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return ([]*quality_profile.QualityProfileChange)(nil)
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchQualityProfilesResponse_PageTokenChange)(nil)
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) ClearValue(item *WatchQualityProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
			item.QualityProfileChanges = nil
		case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchQualityProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges ||
		fp.selector == WatchQualityProfilesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchQualityProfilesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchQualityProfilesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchQualityProfilesResponse_FieldPathValue {
	switch fp.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.([]*quality_profile.QualityProfileChange)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*WatchQualityProfilesResponse_PageTokenChange)}
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		return &WatchQualityProfilesResponse_FieldTerminalPathValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov := &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*quality_profile.QualityProfileChange)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]*WatchQualityProfilesResponse_PageTokenChange)}
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchQualityProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return &WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue{WatchQualityProfilesResponse_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchQualityProfilesResponse_FieldSubPath struct {
	selector WatchQualityProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchQualityProfilesResponse_FieldPath = (*WatchQualityProfilesResponse_FieldSubPath)(nil)

func (fps *WatchQualityProfilesResponse_FieldSubPath) Selector() WatchQualityProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchQualityProfilesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchQualityProfilesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchQualityProfilesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchQualityProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchQualityProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchQualityProfilesResponse
func (fps *WatchQualityProfilesResponse_FieldSubPath) Get(source *WatchQualityProfilesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchQualityProfilesResponse))
}

// GetSingle returns value of selected field from source WatchQualityProfilesResponse
func (fps *WatchQualityProfilesResponse_FieldSubPath) GetSingle(source *WatchQualityProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fps.selector))
	}
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchQualityProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchQualityProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) ClearValue(item *WatchQualityProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchQualityProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchQualityProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithIValue(value interface{}) WatchQualityProfilesResponse_FieldPathValue {
	return &WatchQualityProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchQualityProfilesResponse_FieldPathArrayOfValues {
	return &WatchQualityProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchQualityProfilesResponse_FieldPathArrayItemValue {
	return &WatchQualityProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchQualityProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchQualityProfilesResponse_FieldPathValue allows storing values for WatchQualityProfilesResponse fields according to their type
type WatchQualityProfilesResponse_FieldPathValue interface {
	WatchQualityProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchQualityProfilesResponse)
	CompareWith(*WatchQualityProfilesResponse) (cmp int, comparable bool)
}

func ParseWatchQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) (WatchQualityProfilesResponse_FieldPathValue, error) {
	fp, err := ParseWatchQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchQualityProfilesResponse_FieldPathValue), nil
}

func MustParseWatchQualityProfilesResponse_FieldPathValue(pathStr, valueStr string) WatchQualityProfilesResponse_FieldPathValue {
	fpv, err := ParseWatchQualityProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchQualityProfilesResponse_FieldTerminalPathValue struct {
	WatchQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesResponse_FieldPathValue = (*WatchQualityProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchQualityProfilesResponse' as interface{}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsQualityProfileChangesValue() ([]*quality_profile.QualityProfileChange, bool) {
	res, ok := fpv.value.([]*quality_profile.QualityProfileChange)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchQualityProfilesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchQualityProfilesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchQualityProfilesResponse
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) SetTo(target **WatchQualityProfilesResponse) {
	if *target == nil {
		*target = new(WatchQualityProfilesResponse)
	}
	switch fpv.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		(*target).QualityProfileChanges = fpv.value.([]*quality_profile.QualityProfileChange)
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchQualityProfilesResponse_PageTokenChange)
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchQualityProfilesResponse_FieldTerminalPathValue' with the value under path in 'WatchQualityProfilesResponse'.
func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) CompareWith(source *WatchQualityProfilesResponse) (int, bool) {
	switch fpv.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		return 0, false
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchQualityProfilesResponse))
}

type WatchQualityProfilesResponse_FieldSubPathValue struct {
	WatchQualityProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchQualityProfilesResponse_FieldPathValue = (*WatchQualityProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchQualityProfilesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchQualityProfilesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) SetTo(target **WatchQualityProfilesResponse) {
	if *target == nil {
		*target = new(WatchQualityProfilesResponse)
	}
	switch fpvs.Selector() {
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchQualityProfilesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) CompareWith(source *WatchQualityProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchQualityProfilesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchQualityProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchQualityProfilesResponse))
}

// WatchQualityProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchQualityProfilesResponse according to their type
// Present only for array (repeated) types.
type WatchQualityProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchQualityProfilesResponse_FieldPath
	ContainsValue(*WatchQualityProfilesResponse) bool
}

// ParseWatchQualityProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchQualityProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchQualityProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchQualityProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchQualityProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue struct {
	WatchQualityProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesResponse_FieldPathArrayItemValue = (*WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchQualityProfilesResponse as interface{}
func (fpaiv *WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue) AsQualityProfileChangesItemValue() (*quality_profile.QualityProfileChange, bool) {
	res, ok := fpaiv.value.(*quality_profile.QualityProfileChange)
	return res, ok
}

func (fpaiv *WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchQualityProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchQualityProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchQualityProfilesResponse'
func (fpaiv *WatchQualityProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchQualityProfilesResponse) bool {
	slice := fpaiv.WatchQualityProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchQualityProfilesResponse_FieldSubPathArrayItemValue struct {
	WatchQualityProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchQualityProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchQualityProfilesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchQualityProfilesResponse'
func (fpaivs *WatchQualityProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchQualityProfilesResponse) bool {
	switch fpaivs.Selector() {
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse: %d", fpaivs.Selector()))
	}
}

// WatchQualityProfilesResponse_FieldPathArrayOfValues allows storing slice of values for WatchQualityProfilesResponse fields according to their type
type WatchQualityProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchQualityProfilesResponse_FieldPath
}

func ParseWatchQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchQualityProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchQualityProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchQualityProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchQualityProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchQualityProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchQualityProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues struct {
	WatchQualityProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchQualityProfilesResponse_FieldPathArrayOfValues = (*WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
		for _, v := range fpaov.values.([][]*quality_profile.QualityProfileChange) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchQualityProfilesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsQualityProfileChangesArrayOfValues() ([][]*quality_profile.QualityProfileChange, bool) {
	res, ok := fpaov.values.([][]*quality_profile.QualityProfileChange)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchQualityProfilesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchQualityProfilesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchQualityProfilesResponse_FieldSubPathArrayOfValues struct {
	WatchQualityProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchQualityProfilesResponse_FieldPathArrayOfValues = (*WatchQualityProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchQualityProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchQualityProfilesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchQualityProfilesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchQualityProfilesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchQualityProfilesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchQualityProfilesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchQualityProfilesResponse_PageTokenChange)

	// Those methods build corresponding WatchQualityProfilesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchQualityProfilesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchQualityProfilesResponsePageTokenChange_FieldPathSelector = 0
	WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchQualityProfilesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchQualityProfilesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchQualityProfilesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchQualityProfilesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchQualityProfilesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchQualityProfilesResponse_PageTokenChange", fp)
}

func ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(rawField string) (WatchQualityProfilesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchQualityProfilesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchQualityProfilesResponsePageTokenChange_FieldPath(rawField string) WatchQualityProfilesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchQualityProfilesResponsePageTokenChange_FieldPathSelector
}

var _ WatchQualityProfilesResponsePageTokenChange_FieldPath = (*WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) Selector() WatchQualityProfilesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchQualityProfilesResponse_PageTokenChange
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchQualityProfilesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchQualityProfilesResponse_PageTokenChange
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchQualityProfilesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*quality_profile.PagerCursor)(nil)
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*quality_profile.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchQualityProfilesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchQualityProfilesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue{WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue{WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*quality_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*quality_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchQualityProfilesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchQualityProfilesResponsePageTokenChange_FieldPathValue interface {
	WatchQualityProfilesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchQualityProfilesResponse_PageTokenChange)
	CompareWith(*WatchQualityProfilesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchQualityProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchQualityProfilesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchQualityProfilesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchQualityProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchQualityProfilesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesResponsePageTokenChange_FieldPathValue = (*WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}
func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*quality_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*quality_profile.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchQualityProfilesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchQualityProfilesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*quality_profile.PagerCursor)
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*quality_profile.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchQualityProfilesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchQualityProfilesResponse_PageTokenChange'.
func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchQualityProfilesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchQualityProfilesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

// WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchQualityProfilesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchQualityProfilesResponse_PageTokenChange) bool
}

// ParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchQualityProfilesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchQualityProfilesResponse_PageTokenChange as interface{}
func (fpaiv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchQualityProfilesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchQualityProfilesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchQualityProfilesResponsePageTokenChange_FieldPath
}

func ParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchQualityProfilesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*quality_profile.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}
func (fpaov *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*quality_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*quality_profile.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateQualityProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateQualityProfileRequest_FieldPathSelector
	Get(source *CreateQualityProfileRequest) []interface{}
	GetSingle(source *CreateQualityProfileRequest) (interface{}, bool)
	ClearValue(item *CreateQualityProfileRequest)

	// Those methods build corresponding CreateQualityProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateQualityProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateQualityProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateQualityProfileRequest_FieldPathArrayItemValue
}

type CreateQualityProfileRequest_FieldPathSelector int32

const (
	CreateQualityProfileRequest_FieldPathSelectorParent         CreateQualityProfileRequest_FieldPathSelector = 0
	CreateQualityProfileRequest_FieldPathSelectorQualityProfile CreateQualityProfileRequest_FieldPathSelector = 1
)

func (s CreateQualityProfileRequest_FieldPathSelector) String() string {
	switch s {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		return "parent"
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return "quality_profile"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", s))
	}
}

func BuildCreateQualityProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateQualityProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateQualityProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorParent}, nil
		case "quality_profile", "qualityProfile", "quality-profile":
			return &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile}, nil
		}
	} else {
		switch fp[0] {
		case "quality_profile", "qualityProfile", "quality-profile":
			if subpath, err := quality_profile.BuildQualityProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateQualityProfileRequest_FieldSubPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateQualityProfileRequest", fp)
}

func ParseCreateQualityProfileRequest_FieldPath(rawField string) (CreateQualityProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateQualityProfileRequest_FieldPath(fp)
}

func MustParseCreateQualityProfileRequest_FieldPath(rawField string) CreateQualityProfileRequest_FieldPath {
	fp, err := ParseCreateQualityProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateQualityProfileRequest_FieldTerminalPath struct {
	selector CreateQualityProfileRequest_FieldPathSelector
}

var _ CreateQualityProfileRequest_FieldPath = (*CreateQualityProfileRequest_FieldTerminalPath)(nil)

func (fp *CreateQualityProfileRequest_FieldTerminalPath) Selector() CreateQualityProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateQualityProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateQualityProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateQualityProfileRequest
func (fp *CreateQualityProfileRequest_FieldTerminalPath) Get(source *CreateQualityProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateQualityProfileRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
			if source.QualityProfile != nil {
				values = append(values, source.QualityProfile)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateQualityProfileRequest))
}

// GetSingle returns value pointed by specific field of from source CreateQualityProfileRequest
func (fp *CreateQualityProfileRequest_FieldTerminalPath) GetSingle(source *CreateQualityProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		res := source.GetQualityProfile()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateQualityProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		return (*quality_profile.ParentReference)(nil)
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return (*quality_profile.QualityProfile)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) ClearValue(item *CreateQualityProfileRequest) {
	if item != nil {
		switch fp.selector {
		case CreateQualityProfileRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
			item.QualityProfile = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateQualityProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateQualityProfileRequest_FieldPathSelectorParent
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithIValue(value interface{}) CreateQualityProfileRequest_FieldPathValue {
	switch fp.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		return &CreateQualityProfileRequest_FieldTerminalPathValue{CreateQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.ParentReference)}
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return &CreateQualityProfileRequest_FieldTerminalPathValue{CreateQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateQualityProfileRequest_FieldPathArrayOfValues {
	fpaov := &CreateQualityProfileRequest_FieldTerminalPathArrayOfValues{CreateQualityProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		return &CreateQualityProfileRequest_FieldTerminalPathArrayOfValues{CreateQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.ParentReference)}
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return &CreateQualityProfileRequest_FieldTerminalPathArrayOfValues{CreateQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateQualityProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateQualityProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateQualityProfileRequest_FieldSubPath struct {
	selector CreateQualityProfileRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateQualityProfileRequest_FieldPath = (*CreateQualityProfileRequest_FieldSubPath)(nil)

func (fps *CreateQualityProfileRequest_FieldSubPath) Selector() CreateQualityProfileRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateQualityProfileRequest_FieldSubPath) AsQualityProfileSubPath() (quality_profile.QualityProfile_FieldPath, bool) {
	res, ok := fps.subPath.(quality_profile.QualityProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateQualityProfileRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateQualityProfileRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateQualityProfileRequest
func (fps *CreateQualityProfileRequest_FieldSubPath) Get(source *CreateQualityProfileRequest) (values []interface{}) {
	if asQualityProfileFieldPath, ok := fps.AsQualityProfileSubPath(); ok {
		values = append(values, asQualityProfileFieldPath.Get(source.GetQualityProfile())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateQualityProfileRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateQualityProfileRequest))
}

// GetSingle returns value of selected field from source CreateQualityProfileRequest
func (fps *CreateQualityProfileRequest_FieldSubPath) GetSingle(source *CreateQualityProfileRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		if source.GetQualityProfile() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQualityProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fps.selector))
	}
}

func (fps *CreateQualityProfileRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateQualityProfileRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateQualityProfileRequest_FieldSubPath) ClearValue(item *CreateQualityProfileRequest) {
	if item != nil {
		switch fps.selector {
		case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
			fps.subPath.ClearValueRaw(item.QualityProfile)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateQualityProfileRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateQualityProfileRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithIValue(value interface{}) CreateQualityProfileRequest_FieldPathValue {
	return &CreateQualityProfileRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateQualityProfileRequest_FieldPathArrayOfValues {
	return &CreateQualityProfileRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateQualityProfileRequest_FieldPathArrayItemValue {
	return &CreateQualityProfileRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateQualityProfileRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateQualityProfileRequest_FieldPathValue allows storing values for CreateQualityProfileRequest fields according to their type
type CreateQualityProfileRequest_FieldPathValue interface {
	CreateQualityProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateQualityProfileRequest)
	CompareWith(*CreateQualityProfileRequest) (cmp int, comparable bool)
}

func ParseCreateQualityProfileRequest_FieldPathValue(pathStr, valueStr string) (CreateQualityProfileRequest_FieldPathValue, error) {
	fp, err := ParseCreateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateQualityProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateQualityProfileRequest_FieldPathValue), nil
}

func MustParseCreateQualityProfileRequest_FieldPathValue(pathStr, valueStr string) CreateQualityProfileRequest_FieldPathValue {
	fpv, err := ParseCreateQualityProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateQualityProfileRequest_FieldTerminalPathValue struct {
	CreateQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ CreateQualityProfileRequest_FieldPathValue = (*CreateQualityProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateQualityProfileRequest' as interface{}
func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) AsParentValue() (*quality_profile.ParentReference, bool) {
	res, ok := fpv.value.(*quality_profile.ParentReference)
	return res, ok
}
func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) AsQualityProfileValue() (*quality_profile.QualityProfile, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile)
	return res, ok
}

// SetTo stores value for selected field for object CreateQualityProfileRequest
func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) SetTo(target **CreateQualityProfileRequest) {
	if *target == nil {
		*target = new(CreateQualityProfileRequest)
	}
	switch fpv.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*quality_profile.ParentReference)
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		(*target).QualityProfile = fpv.value.(*quality_profile.QualityProfile)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateQualityProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateQualityProfileRequest_FieldTerminalPathValue' with the value under path in 'CreateQualityProfileRequest'.
func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) CompareWith(source *CreateQualityProfileRequest) (int, bool) {
	switch fpv.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*quality_profile.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *CreateQualityProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateQualityProfileRequest))
}

type CreateQualityProfileRequest_FieldSubPathValue struct {
	CreateQualityProfileRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateQualityProfileRequest_FieldPathValue = (*CreateQualityProfileRequest_FieldSubPathValue)(nil)

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) AsQualityProfilePathValue() (quality_profile.QualityProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue)
	return res, ok
}

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) SetTo(target **CreateQualityProfileRequest) {
	if *target == nil {
		*target = new(CreateQualityProfileRequest)
	}
	switch fpvs.Selector() {
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).SetTo(&(*target).QualityProfile)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateQualityProfileRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) CompareWith(source *CreateQualityProfileRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).CompareWith(source.GetQualityProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateQualityProfileRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateQualityProfileRequest))
}

// CreateQualityProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateQualityProfileRequest according to their type
// Present only for array (repeated) types.
type CreateQualityProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateQualityProfileRequest_FieldPath
	ContainsValue(*CreateQualityProfileRequest) bool
}

// ParseCreateQualityProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateQualityProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateQualityProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateQualityProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateQualityProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateQualityProfileRequest_FieldTerminalPathArrayItemValue struct {
	CreateQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ CreateQualityProfileRequest_FieldPathArrayItemValue = (*CreateQualityProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateQualityProfileRequest as interface{}
func (fpaiv *CreateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateQualityProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateQualityProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateQualityProfileRequest'
func (fpaiv *CreateQualityProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateQualityProfileRequest) bool {
	slice := fpaiv.CreateQualityProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateQualityProfileRequest_FieldSubPathArrayItemValue struct {
	CreateQualityProfileRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateQualityProfileRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateQualityProfileRequest_FieldSubPathArrayItemValue) AsQualityProfilePathItemValue() (quality_profile.QualityProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateQualityProfileRequest'
func (fpaivs *CreateQualityProfileRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateQualityProfileRequest) bool {
	switch fpaivs.Selector() {
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue).ContainsValue(source.GetQualityProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateQualityProfileRequest: %d", fpaivs.Selector()))
	}
}

// CreateQualityProfileRequest_FieldPathArrayOfValues allows storing slice of values for CreateQualityProfileRequest fields according to their type
type CreateQualityProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateQualityProfileRequest_FieldPath
}

func ParseCreateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateQualityProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateQualityProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateQualityProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateQualityProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateQualityProfileRequest_FieldTerminalPathArrayOfValues struct {
	CreateQualityProfileRequest_FieldTerminalPath
	values interface{}
}

var _ CreateQualityProfileRequest_FieldPathArrayOfValues = (*CreateQualityProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateQualityProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateQualityProfileRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*quality_profile.ParentReference) {
			values = append(values, v)
		}
	case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateQualityProfileRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*quality_profile.ParentReference, bool) {
	res, ok := fpaov.values.([]*quality_profile.ParentReference)
	return res, ok
}
func (fpaov *CreateQualityProfileRequest_FieldTerminalPathArrayOfValues) AsQualityProfileArrayOfValues() ([]*quality_profile.QualityProfile, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile)
	return res, ok
}

type CreateQualityProfileRequest_FieldSubPathArrayOfValues struct {
	CreateQualityProfileRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateQualityProfileRequest_FieldPathArrayOfValues = (*CreateQualityProfileRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateQualityProfileRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateQualityProfileRequest_FieldSubPathArrayOfValues) AsQualityProfilePathArrayOfValues() (quality_profile.QualityProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(quality_profile.QualityProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateQualityProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateQualityProfileRequest_FieldPathSelector
	Get(source *UpdateQualityProfileRequest) []interface{}
	GetSingle(source *UpdateQualityProfileRequest) (interface{}, bool)
	ClearValue(item *UpdateQualityProfileRequest)

	// Those methods build corresponding UpdateQualityProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateQualityProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateQualityProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateQualityProfileRequest_FieldPathArrayItemValue
}

type UpdateQualityProfileRequest_FieldPathSelector int32

const (
	UpdateQualityProfileRequest_FieldPathSelectorQualityProfile UpdateQualityProfileRequest_FieldPathSelector = 0
	UpdateQualityProfileRequest_FieldPathSelectorUpdateMask     UpdateQualityProfileRequest_FieldPathSelector = 1
	UpdateQualityProfileRequest_FieldPathSelectorCas            UpdateQualityProfileRequest_FieldPathSelector = 2
)

func (s UpdateQualityProfileRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return "quality_profile"
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", s))
	}
}

func BuildUpdateQualityProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateQualityProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateQualityProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "quality_profile", "qualityProfile", "quality-profile":
			return &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "quality_profile", "qualityProfile", "quality-profile":
			if subpath, err := quality_profile.BuildQualityProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateQualityProfileRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateQualityProfileRequest", fp)
}

func ParseUpdateQualityProfileRequest_FieldPath(rawField string) (UpdateQualityProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateQualityProfileRequest_FieldPath(fp)
}

func MustParseUpdateQualityProfileRequest_FieldPath(rawField string) UpdateQualityProfileRequest_FieldPath {
	fp, err := ParseUpdateQualityProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateQualityProfileRequest_FieldTerminalPath struct {
	selector UpdateQualityProfileRequest_FieldPathSelector
}

var _ UpdateQualityProfileRequest_FieldPath = (*UpdateQualityProfileRequest_FieldTerminalPath)(nil)

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) Selector() UpdateQualityProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateQualityProfileRequest
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) Get(source *UpdateQualityProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
			if source.QualityProfile != nil {
				values = append(values, source.QualityProfile)
			}
		case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateQualityProfileRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateQualityProfileRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateQualityProfileRequest
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) GetSingle(source *UpdateQualityProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		res := source.GetQualityProfile()
		return res, res != nil
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return (*quality_profile.QualityProfile)(nil)
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return (*UpdateQualityProfileRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) ClearValue(item *UpdateQualityProfileRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
			item.QualityProfile = nil
		case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateQualityProfileRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateQualityProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateQualityProfileRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateQualityProfileRequest_FieldPathValue {
	switch fp.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return &UpdateQualityProfileRequest_FieldTerminalPathValue{UpdateQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile)}
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		return &UpdateQualityProfileRequest_FieldTerminalPathValue{UpdateQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return &UpdateQualityProfileRequest_FieldTerminalPathValue{UpdateQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*UpdateQualityProfileRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateQualityProfileRequest_FieldPathArrayOfValues {
	fpaov := &UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return &UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile)}
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		return &UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return &UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*UpdateQualityProfileRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateQualityProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateQualityProfileRequest_FieldSubPath struct {
	selector UpdateQualityProfileRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateQualityProfileRequest_FieldPath = (*UpdateQualityProfileRequest_FieldSubPath)(nil)

func (fps *UpdateQualityProfileRequest_FieldSubPath) Selector() UpdateQualityProfileRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateQualityProfileRequest_FieldSubPath) AsQualityProfileSubPath() (quality_profile.QualityProfile_FieldPath, bool) {
	res, ok := fps.subPath.(quality_profile.QualityProfile_FieldPath)
	return res, ok
}
func (fps *UpdateQualityProfileRequest_FieldSubPath) AsCasSubPath() (UpdateQualityProfileRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateQualityProfileRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateQualityProfileRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateQualityProfileRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateQualityProfileRequest
func (fps *UpdateQualityProfileRequest_FieldSubPath) Get(source *UpdateQualityProfileRequest) (values []interface{}) {
	if asQualityProfileFieldPath, ok := fps.AsQualityProfileSubPath(); ok {
		values = append(values, asQualityProfileFieldPath.Get(source.GetQualityProfile())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateQualityProfileRequest))
}

// GetSingle returns value of selected field from source UpdateQualityProfileRequest
func (fps *UpdateQualityProfileRequest_FieldSubPath) GetSingle(source *UpdateQualityProfileRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		if source.GetQualityProfile() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetQualityProfile())
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fps.selector))
	}
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateQualityProfileRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) ClearValue(item *UpdateQualityProfileRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
			fps.subPath.ClearValueRaw(item.QualityProfile)
		case UpdateQualityProfileRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateQualityProfileRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithIValue(value interface{}) UpdateQualityProfileRequest_FieldPathValue {
	return &UpdateQualityProfileRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateQualityProfileRequest_FieldPathArrayOfValues {
	return &UpdateQualityProfileRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateQualityProfileRequest_FieldPathArrayItemValue {
	return &UpdateQualityProfileRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateQualityProfileRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateQualityProfileRequest_FieldPathValue allows storing values for UpdateQualityProfileRequest fields according to their type
type UpdateQualityProfileRequest_FieldPathValue interface {
	UpdateQualityProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateQualityProfileRequest)
	CompareWith(*UpdateQualityProfileRequest) (cmp int, comparable bool)
}

func ParseUpdateQualityProfileRequest_FieldPathValue(pathStr, valueStr string) (UpdateQualityProfileRequest_FieldPathValue, error) {
	fp, err := ParseUpdateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateQualityProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateQualityProfileRequest_FieldPathValue), nil
}

func MustParseUpdateQualityProfileRequest_FieldPathValue(pathStr, valueStr string) UpdateQualityProfileRequest_FieldPathValue {
	fpv, err := ParseUpdateQualityProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateQualityProfileRequest_FieldTerminalPathValue struct {
	UpdateQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateQualityProfileRequest_FieldPathValue = (*UpdateQualityProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateQualityProfileRequest' as interface{}
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) AsQualityProfileValue() (*quality_profile.QualityProfile, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile)
	return res, ok
}
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) AsCasValue() (*UpdateQualityProfileRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateQualityProfileRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateQualityProfileRequest
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) SetTo(target **UpdateQualityProfileRequest) {
	if *target == nil {
		*target = new(UpdateQualityProfileRequest)
	}
	switch fpv.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		(*target).QualityProfile = fpv.value.(*quality_profile.QualityProfile)
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateQualityProfileRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateQualityProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateQualityProfileRequest_FieldTerminalPathValue' with the value under path in 'UpdateQualityProfileRequest'.
func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) CompareWith(source *UpdateQualityProfileRequest) (int, bool) {
	switch fpv.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return 0, false
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateQualityProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateQualityProfileRequest))
}

type UpdateQualityProfileRequest_FieldSubPathValue struct {
	UpdateQualityProfileRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateQualityProfileRequest_FieldPathValue = (*UpdateQualityProfileRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) AsQualityProfilePathValue() (quality_profile.QualityProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) AsCasPathValue() (UpdateQualityProfileRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateQualityProfileRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) SetTo(target **UpdateQualityProfileRequest) {
	if *target == nil {
		*target = new(UpdateQualityProfileRequest)
	}
	switch fpvs.Selector() {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).SetTo(&(*target).QualityProfile)
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateQualityProfileRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateQualityProfileRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) CompareWith(source *UpdateQualityProfileRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).CompareWith(source.GetQualityProfile())
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateQualityProfileRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateQualityProfileRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateQualityProfileRequest))
}

// UpdateQualityProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateQualityProfileRequest according to their type
// Present only for array (repeated) types.
type UpdateQualityProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateQualityProfileRequest_FieldPath
	ContainsValue(*UpdateQualityProfileRequest) bool
}

// ParseUpdateQualityProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateQualityProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateQualityProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateQualityProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateQualityProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue struct {
	UpdateQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateQualityProfileRequest_FieldPathArrayItemValue = (*UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateQualityProfileRequest as interface{}
func (fpaiv *UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateQualityProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateQualityProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateQualityProfileRequest'
func (fpaiv *UpdateQualityProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateQualityProfileRequest) bool {
	slice := fpaiv.UpdateQualityProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateQualityProfileRequest_FieldSubPathArrayItemValue struct {
	UpdateQualityProfileRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateQualityProfileRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateQualityProfileRequest_FieldSubPathArrayItemValue) AsQualityProfilePathItemValue() (quality_profile.QualityProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateQualityProfileRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateQualityProfileRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateQualityProfileRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateQualityProfileRequest'
func (fpaivs *UpdateQualityProfileRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateQualityProfileRequest) bool {
	switch fpaivs.Selector() {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		return fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue).ContainsValue(source.GetQualityProfile())
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateQualityProfileRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest: %d", fpaivs.Selector()))
	}
}

// UpdateQualityProfileRequest_FieldPathArrayOfValues allows storing slice of values for UpdateQualityProfileRequest fields according to their type
type UpdateQualityProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateQualityProfileRequest_FieldPath
}

func ParseUpdateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateQualityProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateQualityProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateQualityProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateQualityProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues struct {
	UpdateQualityProfileRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateQualityProfileRequest_FieldPathArrayOfValues = (*UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile) {
			values = append(values, v)
		}
	case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	case UpdateQualityProfileRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateQualityProfileRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues) AsQualityProfileArrayOfValues() ([]*quality_profile.QualityProfile, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile)
	return res, ok
}
func (fpaov *UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}
func (fpaov *UpdateQualityProfileRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateQualityProfileRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateQualityProfileRequest_CAS)
	return res, ok
}

type UpdateQualityProfileRequest_FieldSubPathArrayOfValues struct {
	UpdateQualityProfileRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateQualityProfileRequest_FieldPathArrayOfValues = (*UpdateQualityProfileRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateQualityProfileRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateQualityProfileRequest_FieldSubPathArrayOfValues) AsQualityProfilePathArrayOfValues() (quality_profile.QualityProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(quality_profile.QualityProfile_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateQualityProfileRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateQualityProfileRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateQualityProfileRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateQualityProfileRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateQualityProfileRequestCAS_FieldPathSelector
	Get(source *UpdateQualityProfileRequest_CAS) []interface{}
	GetSingle(source *UpdateQualityProfileRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateQualityProfileRequest_CAS)

	// Those methods build corresponding UpdateQualityProfileRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayItemValue
}

type UpdateQualityProfileRequestCAS_FieldPathSelector int32

const (
	UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState UpdateQualityProfileRequestCAS_FieldPathSelector = 0
	UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask        UpdateQualityProfileRequestCAS_FieldPathSelector = 1
)

func (s UpdateQualityProfileRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", s))
	}
}

func BuildUpdateQualityProfileRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateQualityProfileRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateQualityProfileRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := quality_profile.BuildQualityProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateQualityProfileRequestCAS_FieldSubPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateQualityProfileRequest_CAS", fp)
}

func ParseUpdateQualityProfileRequestCAS_FieldPath(rawField string) (UpdateQualityProfileRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateQualityProfileRequestCAS_FieldPath(fp)
}

func MustParseUpdateQualityProfileRequestCAS_FieldPath(rawField string) UpdateQualityProfileRequestCAS_FieldPath {
	fp, err := ParseUpdateQualityProfileRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateQualityProfileRequestCAS_FieldTerminalPath struct {
	selector UpdateQualityProfileRequestCAS_FieldPathSelector
}

var _ UpdateQualityProfileRequestCAS_FieldPath = (*UpdateQualityProfileRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) Selector() UpdateQualityProfileRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateQualityProfileRequest_CAS
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) Get(source *UpdateQualityProfileRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateQualityProfileRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateQualityProfileRequest_CAS
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) GetSingle(source *UpdateQualityProfileRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateQualityProfileRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return (*quality_profile.QualityProfile)(nil)
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		return (*quality_profile.QualityProfile_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) ClearValue(item *UpdateQualityProfileRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateQualityProfileRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateQualityProfileRequestCAS_FieldTerminalPathValue{UpdateQualityProfileRequestCAS_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile)}
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateQualityProfileRequestCAS_FieldTerminalPathValue{UpdateQualityProfileRequestCAS_FieldTerminalPath: *fp, value: value.(*quality_profile.QualityProfile_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequestCAS_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile)}
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateQualityProfileRequestCAS_FieldTerminalPath: *fp, values: values.([]*quality_profile.QualityProfile_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateQualityProfileRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateQualityProfileRequestCAS_FieldSubPath struct {
	selector UpdateQualityProfileRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateQualityProfileRequestCAS_FieldPath = (*UpdateQualityProfileRequestCAS_FieldSubPath)(nil)

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) Selector() UpdateQualityProfileRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) AsConditionalStateSubPath() (quality_profile.QualityProfile_FieldPath, bool) {
	res, ok := fps.subPath.(quality_profile.QualityProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateQualityProfileRequest_CAS
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) Get(source *UpdateQualityProfileRequest_CAS) (values []interface{}) {
	if asQualityProfileFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asQualityProfileFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateQualityProfileRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateQualityProfileRequest_CAS
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) GetSingle(source *UpdateQualityProfileRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateQualityProfileRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) ClearValue(item *UpdateQualityProfileRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateQualityProfileRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathValue {
	return &UpdateQualityProfileRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayOfValues {
	return &UpdateQualityProfileRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateQualityProfileRequestCAS_FieldPathArrayItemValue {
	return &UpdateQualityProfileRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateQualityProfileRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateQualityProfileRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateQualityProfileRequestCAS_FieldPathValue interface {
	UpdateQualityProfileRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateQualityProfileRequest_CAS)
	CompareWith(*UpdateQualityProfileRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateQualityProfileRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateQualityProfileRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateQualityProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateQualityProfileRequestCAS_FieldPathValue), nil
}

func MustParseUpdateQualityProfileRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateQualityProfileRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateQualityProfileRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateQualityProfileRequestCAS_FieldTerminalPathValue struct {
	UpdateQualityProfileRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateQualityProfileRequestCAS_FieldPathValue = (*UpdateQualityProfileRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*quality_profile.QualityProfile, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile)
	return res, ok
}
func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpv.value.(*quality_profile.QualityProfile_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateQualityProfileRequest_CAS) {
	if *target == nil {
		*target = new(UpdateQualityProfileRequest_CAS)
	}
	switch fpv.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*quality_profile.QualityProfile)
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*quality_profile.QualityProfile_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateQualityProfileRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateQualityProfileRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateQualityProfileRequest_CAS'.
func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateQualityProfileRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateQualityProfileRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateQualityProfileRequest_CAS))
}

type UpdateQualityProfileRequestCAS_FieldSubPathValue struct {
	UpdateQualityProfileRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateQualityProfileRequestCAS_FieldPathValue = (*UpdateQualityProfileRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (quality_profile.QualityProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) SetTo(target **UpdateQualityProfileRequest_CAS) {
	if *target == nil {
		*target = new(UpdateQualityProfileRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateQualityProfileRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) CompareWith(source *UpdateQualityProfileRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(quality_profile.QualityProfile_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateQualityProfileRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateQualityProfileRequest_CAS))
}

// UpdateQualityProfileRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateQualityProfileRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateQualityProfileRequestCAS_FieldPath
	ContainsValue(*UpdateQualityProfileRequest_CAS) bool
}

// ParseUpdateQualityProfileRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateQualityProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateQualityProfileRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateQualityProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateQualityProfileRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateQualityProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateQualityProfileRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateQualityProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateQualityProfileRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateQualityProfileRequestCAS_FieldPathArrayItemValue = (*UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateQualityProfileRequest_CAS as interface{}
func (fpaiv *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateQualityProfileRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateQualityProfileRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateQualityProfileRequest_CAS) bool {
	slice := fpaiv.UpdateQualityProfileRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateQualityProfileRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateQualityProfileRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateQualityProfileRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateQualityProfileRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (quality_profile.QualityProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateQualityProfileRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateQualityProfileRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(quality_profile.QualityProfile_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateQualityProfileRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateQualityProfileRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateQualityProfileRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateQualityProfileRequestCAS_FieldPath
}

func ParseUpdateQualityProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateQualityProfileRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateQualityProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateQualityProfileRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateQualityProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateQualityProfileRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateQualityProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateQualityProfileRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateQualityProfileRequestCAS_FieldPathArrayOfValues = (*UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile) {
			values = append(values, v)
		}
	case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*quality_profile.QualityProfile_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*quality_profile.QualityProfile, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile)
	return res, ok
}
func (fpaov *UpdateQualityProfileRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*quality_profile.QualityProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*quality_profile.QualityProfile_FieldMask)
	return res, ok
}

type UpdateQualityProfileRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateQualityProfileRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateQualityProfileRequestCAS_FieldPathArrayOfValues = (*UpdateQualityProfileRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateQualityProfileRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateQualityProfileRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (quality_profile.QualityProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(quality_profile.QualityProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteQualityProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteQualityProfileRequest_FieldPathSelector
	Get(source *DeleteQualityProfileRequest) []interface{}
	GetSingle(source *DeleteQualityProfileRequest) (interface{}, bool)
	ClearValue(item *DeleteQualityProfileRequest)

	// Those methods build corresponding DeleteQualityProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteQualityProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteQualityProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteQualityProfileRequest_FieldPathArrayItemValue
}

type DeleteQualityProfileRequest_FieldPathSelector int32

const (
	DeleteQualityProfileRequest_FieldPathSelectorName DeleteQualityProfileRequest_FieldPathSelector = 0
)

func (s DeleteQualityProfileRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", s))
	}
}

func BuildDeleteQualityProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteQualityProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteQualityProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteQualityProfileRequest_FieldTerminalPath{selector: DeleteQualityProfileRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteQualityProfileRequest", fp)
}

func ParseDeleteQualityProfileRequest_FieldPath(rawField string) (DeleteQualityProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteQualityProfileRequest_FieldPath(fp)
}

func MustParseDeleteQualityProfileRequest_FieldPath(rawField string) DeleteQualityProfileRequest_FieldPath {
	fp, err := ParseDeleteQualityProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteQualityProfileRequest_FieldTerminalPath struct {
	selector DeleteQualityProfileRequest_FieldPathSelector
}

var _ DeleteQualityProfileRequest_FieldPath = (*DeleteQualityProfileRequest_FieldTerminalPath)(nil)

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) Selector() DeleteQualityProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteQualityProfileRequest
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) Get(source *DeleteQualityProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteQualityProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteQualityProfileRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteQualityProfileRequest
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) GetSingle(source *DeleteQualityProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteQualityProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		return (*quality_profile.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) ClearValue(item *DeleteQualityProfileRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteQualityProfileRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteQualityProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteQualityProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteQualityProfileRequest_FieldPathSelectorName
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteQualityProfileRequest_FieldPathValue {
	switch fp.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		return &DeleteQualityProfileRequest_FieldTerminalPathValue{DeleteQualityProfileRequest_FieldTerminalPath: *fp, value: value.(*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteQualityProfileRequest_FieldPathArrayOfValues {
	fpaov := &DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues{DeleteQualityProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		return &DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues{DeleteQualityProfileRequest_FieldTerminalPath: *fp, values: values.([]*quality_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteQualityProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteQualityProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteQualityProfileRequest_FieldPathValue allows storing values for DeleteQualityProfileRequest fields according to their type
type DeleteQualityProfileRequest_FieldPathValue interface {
	DeleteQualityProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteQualityProfileRequest)
	CompareWith(*DeleteQualityProfileRequest) (cmp int, comparable bool)
}

func ParseDeleteQualityProfileRequest_FieldPathValue(pathStr, valueStr string) (DeleteQualityProfileRequest_FieldPathValue, error) {
	fp, err := ParseDeleteQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteQualityProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteQualityProfileRequest_FieldPathValue), nil
}

func MustParseDeleteQualityProfileRequest_FieldPathValue(pathStr, valueStr string) DeleteQualityProfileRequest_FieldPathValue {
	fpv, err := ParseDeleteQualityProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteQualityProfileRequest_FieldTerminalPathValue struct {
	DeleteQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteQualityProfileRequest_FieldPathValue = (*DeleteQualityProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteQualityProfileRequest' as interface{}
func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) AsNameValue() (*quality_profile.Reference, bool) {
	res, ok := fpv.value.(*quality_profile.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteQualityProfileRequest
func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) SetTo(target **DeleteQualityProfileRequest) {
	if *target == nil {
		*target = new(DeleteQualityProfileRequest)
	}
	switch fpv.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*quality_profile.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteQualityProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteQualityProfileRequest_FieldTerminalPathValue' with the value under path in 'DeleteQualityProfileRequest'.
func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) CompareWith(source *DeleteQualityProfileRequest) (int, bool) {
	switch fpv.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*quality_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteQualityProfileRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteQualityProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteQualityProfileRequest))
}

// DeleteQualityProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteQualityProfileRequest according to their type
// Present only for array (repeated) types.
type DeleteQualityProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteQualityProfileRequest_FieldPath
	ContainsValue(*DeleteQualityProfileRequest) bool
}

// ParseDeleteQualityProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteQualityProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteQualityProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteQualityProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteQualityProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteQualityProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue struct {
	DeleteQualityProfileRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteQualityProfileRequest_FieldPathArrayItemValue = (*DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteQualityProfileRequest as interface{}
func (fpaiv *DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteQualityProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteQualityProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteQualityProfileRequest'
func (fpaiv *DeleteQualityProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteQualityProfileRequest) bool {
	slice := fpaiv.DeleteQualityProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteQualityProfileRequest_FieldPathArrayOfValues allows storing slice of values for DeleteQualityProfileRequest fields according to their type
type DeleteQualityProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteQualityProfileRequest_FieldPath
}

func ParseDeleteQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteQualityProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteQualityProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteQualityProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteQualityProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteQualityProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteQualityProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues struct {
	DeleteQualityProfileRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteQualityProfileRequest_FieldPathArrayOfValues = (*DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteQualityProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*quality_profile.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteQualityProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*quality_profile.Reference, bool) {
	res, ok := fpaov.values.([]*quality_profile.Reference)
	return res, ok
}
