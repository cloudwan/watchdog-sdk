// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/quality_profile_service.proto
// DO NOT EDIT!!!

package quality_profile_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &quality_profile.Profile{}
)

type GetQualityProfileRequest_FieldMask struct {
	Paths []GetQualityProfileRequest_FieldPath
}

func FullGetQualityProfileRequest_FieldMask() *GetQualityProfileRequest_FieldMask {
	res := &GetQualityProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetQualityProfileRequest_FieldTerminalPath{selector: GetQualityProfileRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetQualityProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetQualityProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetQualityProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetQualityProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetQualityProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetQualityProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetQualityProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetQualityProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *GetQualityProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetQualityProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetQualityProfileRequest_FieldMask) Subtract(other *GetQualityProfileRequest_FieldMask) *GetQualityProfileRequest_FieldMask {
	result := &GetQualityProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetQualityProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetQualityProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetQualityProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetQualityProfileRequest_FieldMask) FilterInputFields() *GetQualityProfileRequest_FieldMask {
	result := &GetQualityProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetQualityProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetQualityProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetQualityProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetQualityProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetQualityProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetQualityProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetQualityProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetQualityProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetQualityProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetQualityProfileRequest_FieldMask) AppendPath(path GetQualityProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetQualityProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetQualityProfileRequest_FieldPath))
}

func (fieldMask *GetQualityProfileRequest_FieldMask) GetPaths() []GetQualityProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetQualityProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetQualityProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetQualityProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetQualityProfileRequest_FieldMask) Set(target, source *GetQualityProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetQualityProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetQualityProfileRequest), source.(*GetQualityProfileRequest))
}

func (fieldMask *GetQualityProfileRequest_FieldMask) Project(source *GetQualityProfileRequest) *GetQualityProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetQualityProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetQualityProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case GetQualityProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetQualityProfileRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetQualityProfileRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetQualityProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetQualityProfileRequest))
}

func (fieldMask *GetQualityProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetQualityProfilesRequest_FieldMask struct {
	Paths []BatchGetQualityProfilesRequest_FieldPath
}

func FullBatchGetQualityProfilesRequest_FieldMask() *BatchGetQualityProfilesRequest_FieldMask {
	res := &BatchGetQualityProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetQualityProfilesRequest_FieldTerminalPath{selector: BatchGetQualityProfilesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetQualityProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetQualityProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetQualityProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Subtract(other *BatchGetQualityProfilesRequest_FieldMask) *BatchGetQualityProfilesRequest_FieldMask {
	result := &BatchGetQualityProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetQualityProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetQualityProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) FilterInputFields() *BatchGetQualityProfilesRequest_FieldMask {
	result := &BatchGetQualityProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetQualityProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetQualityProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetQualityProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetQualityProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) AppendPath(path BatchGetQualityProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetQualityProfilesRequest_FieldPath))
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) GetPaths() []BatchGetQualityProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetQualityProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Set(target, source *BatchGetQualityProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetQualityProfilesRequest), source.(*BatchGetQualityProfilesRequest))
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) Project(source *BatchGetQualityProfilesRequest) *BatchGetQualityProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetQualityProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetQualityProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetQualityProfilesRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetQualityProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetQualityProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetQualityProfilesRequest))
}

func (fieldMask *BatchGetQualityProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetQualityProfilesResponse_FieldMask struct {
	Paths []BatchGetQualityProfilesResponse_FieldPath
}

func FullBatchGetQualityProfilesResponse_FieldMask() *BatchGetQualityProfilesResponse_FieldMask {
	res := &BatchGetQualityProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles})
	res.Paths = append(res.Paths, &BatchGetQualityProfilesResponse_FieldTerminalPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetQualityProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetQualityProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetQualityProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Subtract(other *BatchGetQualityProfilesResponse_FieldMask) *BatchGetQualityProfilesResponse_FieldMask {
	result := &BatchGetQualityProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles: &quality_profile.QualityProfile_FieldMask{},
	}
	mySubMasks := map[BatchGetQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles: &quality_profile.QualityProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetQualityProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetQualityProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetQualityProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
						mySubMasks[BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles] = quality_profile.FullQualityProfile_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetQualityProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetQualityProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetQualityProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) FilterInputFields() *BatchGetQualityProfilesResponse_FieldMask {
	result := &BatchGetQualityProfilesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			if _, ok := path.(*BatchGetQualityProfilesResponse_FieldTerminalPath); ok {
				for _, subpath := range quality_profile.FullQualityProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetQualityProfilesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetQualityProfilesResponse_FieldSubPath); ok {
				selectedMask := &quality_profile.QualityProfile_FieldMask{
					Paths: []quality_profile.QualityProfile_FieldPath{sub.subPath.(quality_profile.QualityProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetQualityProfilesResponse_FieldSubPath{selector: BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetQualityProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetQualityProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetQualityProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetQualityProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) AppendPath(path BatchGetQualityProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetQualityProfilesResponse_FieldPath))
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) GetPaths() []BatchGetQualityProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetQualityProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Set(target, source *BatchGetQualityProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetQualityProfilesResponse), source.(*BatchGetQualityProfilesResponse))
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) Project(source *BatchGetQualityProfilesResponse) *BatchGetQualityProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetQualityProfilesResponse{}
	qualityProfilesMask := &quality_profile.QualityProfile_FieldMask{}
	wholeQualityProfilesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetQualityProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
				result.QualityProfiles = source.QualityProfiles
				wholeQualityProfilesAccepted = true
			case BatchGetQualityProfilesResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetQualityProfilesResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetQualityProfilesResponse_FieldPathSelectorQualityProfiles:
				qualityProfilesMask.AppendPath(tp.subPath.(quality_profile.QualityProfile_FieldPath))
			}
		}
	}
	if wholeQualityProfilesAccepted == false && len(qualityProfilesMask.Paths) > 0 {
		for _, sourceItem := range source.GetQualityProfiles() {
			result.QualityProfiles = append(result.QualityProfiles, qualityProfilesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetQualityProfilesResponse))
}

func (fieldMask *BatchGetQualityProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListQualityProfilesRequest_FieldMask struct {
	Paths []ListQualityProfilesRequest_FieldPath
}

func FullListQualityProfilesRequest_FieldMask() *ListQualityProfilesRequest_FieldMask {
	res := &ListQualityProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListQualityProfilesRequest_FieldTerminalPath{selector: ListQualityProfilesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListQualityProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListQualityProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListQualityProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListQualityProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Subtract(other *ListQualityProfilesRequest_FieldMask) *ListQualityProfilesRequest_FieldMask {
	result := &ListQualityProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListQualityProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListQualityProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListQualityProfilesRequest_FieldMask) FilterInputFields() *ListQualityProfilesRequest_FieldMask {
	result := &ListQualityProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListQualityProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListQualityProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListQualityProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListQualityProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListQualityProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) AppendPath(path ListQualityProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListQualityProfilesRequest_FieldPath))
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) GetPaths() []ListQualityProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListQualityProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Set(target, source *ListQualityProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListQualityProfilesRequest), source.(*ListQualityProfilesRequest))
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) Project(source *ListQualityProfilesRequest) *ListQualityProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListQualityProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListQualityProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case ListQualityProfilesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListQualityProfilesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListQualityProfilesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListQualityProfilesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListQualityProfilesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListQualityProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListQualityProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListQualityProfilesRequest))
}

func (fieldMask *ListQualityProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListQualityProfilesResponse_FieldMask struct {
	Paths []ListQualityProfilesResponse_FieldPath
}

func FullListQualityProfilesResponse_FieldMask() *ListQualityProfilesResponse_FieldMask {
	res := &ListQualityProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles})
	res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListQualityProfilesResponse_FieldTerminalPath{selector: ListQualityProfilesResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListQualityProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListQualityProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListQualityProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListQualityProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Subtract(other *ListQualityProfilesResponse_FieldMask) *ListQualityProfilesResponse_FieldMask {
	result := &ListQualityProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListQualityProfilesResponse_FieldPathSelectorQualityProfiles: &quality_profile.QualityProfile_FieldMask{},
	}
	mySubMasks := map[ListQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListQualityProfilesResponse_FieldPathSelectorQualityProfiles: &quality_profile.QualityProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListQualityProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListQualityProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListQualityProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
						mySubMasks[ListQualityProfilesResponse_FieldPathSelectorQualityProfiles] = quality_profile.FullQualityProfile_FieldMask()
					}
				} else if tp, ok := path.(*ListQualityProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListQualityProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListQualityProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListQualityProfilesResponse_FieldMask) FilterInputFields() *ListQualityProfilesResponse_FieldMask {
	result := &ListQualityProfilesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
			if _, ok := path.(*ListQualityProfilesResponse_FieldTerminalPath); ok {
				for _, subpath := range quality_profile.FullQualityProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListQualityProfilesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListQualityProfilesResponse_FieldSubPath); ok {
				selectedMask := &quality_profile.QualityProfile_FieldMask{
					Paths: []quality_profile.QualityProfile_FieldPath{sub.subPath.(quality_profile.QualityProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListQualityProfilesResponse_FieldSubPath{selector: ListQualityProfilesResponse_FieldPathSelectorQualityProfiles, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListQualityProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListQualityProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListQualityProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListQualityProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListQualityProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) AppendPath(path ListQualityProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListQualityProfilesResponse_FieldPath))
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) GetPaths() []ListQualityProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListQualityProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Set(target, source *ListQualityProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListQualityProfilesResponse), source.(*ListQualityProfilesResponse))
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) Project(source *ListQualityProfilesResponse) *ListQualityProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListQualityProfilesResponse{}
	qualityProfilesMask := &quality_profile.QualityProfile_FieldMask{}
	wholeQualityProfilesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListQualityProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
				result.QualityProfiles = source.QualityProfiles
				wholeQualityProfilesAccepted = true
			case ListQualityProfilesResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListQualityProfilesResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListQualityProfilesResponse_FieldSubPath:
			switch tp.selector {
			case ListQualityProfilesResponse_FieldPathSelectorQualityProfiles:
				qualityProfilesMask.AppendPath(tp.subPath.(quality_profile.QualityProfile_FieldPath))
			}
		}
	}
	if wholeQualityProfilesAccepted == false && len(qualityProfilesMask.Paths) > 0 {
		for _, sourceItem := range source.GetQualityProfiles() {
			result.QualityProfiles = append(result.QualityProfiles, qualityProfilesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListQualityProfilesResponse))
}

func (fieldMask *ListQualityProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchQualityProfileRequest_FieldMask struct {
	Paths []WatchQualityProfileRequest_FieldPath
}

func FullWatchQualityProfileRequest_FieldMask() *WatchQualityProfileRequest_FieldMask {
	res := &WatchQualityProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchQualityProfileRequest_FieldTerminalPath{selector: WatchQualityProfileRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchQualityProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchQualityProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchQualityProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchQualityProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Subtract(other *WatchQualityProfileRequest_FieldMask) *WatchQualityProfileRequest_FieldMask {
	result := &WatchQualityProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchQualityProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchQualityProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchQualityProfileRequest_FieldMask) FilterInputFields() *WatchQualityProfileRequest_FieldMask {
	result := &WatchQualityProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchQualityProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchQualityProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchQualityProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchQualityProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchQualityProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) AppendPath(path WatchQualityProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchQualityProfileRequest_FieldPath))
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) GetPaths() []WatchQualityProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchQualityProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Set(target, source *WatchQualityProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchQualityProfileRequest), source.(*WatchQualityProfileRequest))
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) Project(source *WatchQualityProfileRequest) *WatchQualityProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchQualityProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchQualityProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchQualityProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchQualityProfileRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchQualityProfileRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchQualityProfileRequest))
}

func (fieldMask *WatchQualityProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchQualityProfileResponse_FieldMask struct {
	Paths []WatchQualityProfileResponse_FieldPath
}

func FullWatchQualityProfileResponse_FieldMask() *WatchQualityProfileResponse_FieldMask {
	res := &WatchQualityProfileResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchQualityProfileResponse_FieldTerminalPath{selector: WatchQualityProfileResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchQualityProfileResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchQualityProfileResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchQualityProfileResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchQualityProfileResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Subtract(other *WatchQualityProfileResponse_FieldMask) *WatchQualityProfileResponse_FieldMask {
	result := &WatchQualityProfileResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchQualityProfileResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchQualityProfileResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchQualityProfileResponse_FieldMask) FilterInputFields() *WatchQualityProfileResponse_FieldMask {
	result := &WatchQualityProfileResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchQualityProfileResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchQualityProfileResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchQualityProfileResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchQualityProfileResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchQualityProfileResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) AppendPath(path WatchQualityProfileResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchQualityProfileResponse_FieldPath))
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) GetPaths() []WatchQualityProfileResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchQualityProfileResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Set(target, source *WatchQualityProfileResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchQualityProfileResponse), source.(*WatchQualityProfileResponse))
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) Project(source *WatchQualityProfileResponse) *WatchQualityProfileResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchQualityProfileResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchQualityProfileResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchQualityProfileResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchQualityProfileResponse))
}

func (fieldMask *WatchQualityProfileResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchQualityProfilesRequest_FieldMask struct {
	Paths []WatchQualityProfilesRequest_FieldPath
}

func FullWatchQualityProfilesRequest_FieldMask() *WatchQualityProfilesRequest_FieldMask {
	res := &WatchQualityProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchQualityProfilesRequest_FieldTerminalPath{selector: WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchQualityProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchQualityProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchQualityProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchQualityProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Subtract(other *WatchQualityProfilesRequest_FieldMask) *WatchQualityProfilesRequest_FieldMask {
	result := &WatchQualityProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchQualityProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchQualityProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchQualityProfilesRequest_FieldMask) FilterInputFields() *WatchQualityProfilesRequest_FieldMask {
	result := &WatchQualityProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchQualityProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchQualityProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchQualityProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchQualityProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchQualityProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) AppendPath(path WatchQualityProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchQualityProfilesRequest_FieldPath))
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) GetPaths() []WatchQualityProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchQualityProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Set(target, source *WatchQualityProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchQualityProfilesRequest), source.(*WatchQualityProfilesRequest))
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) Project(source *WatchQualityProfilesRequest) *WatchQualityProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchQualityProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchQualityProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchQualityProfilesRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchQualityProfilesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchQualityProfilesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchQualityProfilesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchQualityProfilesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchQualityProfilesRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchQualityProfilesRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchQualityProfilesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchQualityProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchQualityProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchQualityProfilesRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchQualityProfilesRequest))
}

func (fieldMask *WatchQualityProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchQualityProfilesResponse_FieldMask struct {
	Paths []WatchQualityProfilesResponse_FieldPath
}

func FullWatchQualityProfilesResponse_FieldMask() *WatchQualityProfilesResponse_FieldMask {
	res := &WatchQualityProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponse_FieldTerminalPath{selector: WatchQualityProfilesResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchQualityProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchQualityProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchQualityProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchQualityProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Subtract(other *WatchQualityProfilesResponse_FieldMask) *WatchQualityProfilesResponse_FieldMask {
	result := &WatchQualityProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange: &WatchQualityProfilesResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchQualityProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange: &WatchQualityProfilesResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchQualityProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchQualityProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchQualityProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange] = FullWatchQualityProfilesResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchQualityProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchQualityProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchQualityProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchQualityProfilesResponse_FieldMask) FilterInputFields() *WatchQualityProfilesResponse_FieldMask {
	result := &WatchQualityProfilesResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchQualityProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchQualityProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchQualityProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchQualityProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchQualityProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) AppendPath(path WatchQualityProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchQualityProfilesResponse_FieldPath))
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) GetPaths() []WatchQualityProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchQualityProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Set(target, source *WatchQualityProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchQualityProfilesResponse), source.(*WatchQualityProfilesResponse))
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) Project(source *WatchQualityProfilesResponse) *WatchQualityProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchQualityProfilesResponse{}
	pageTokenChangeMask := &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchQualityProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchQualityProfilesResponse_FieldPathSelectorQualityProfileChanges:
				result.QualityProfileChanges = source.QualityProfileChanges
			case WatchQualityProfilesResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchQualityProfilesResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchQualityProfilesResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchQualityProfilesResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchQualityProfilesResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchQualityProfilesResponse_FieldSubPath:
			switch tp.selector {
			case WatchQualityProfilesResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchQualityProfilesResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchQualityProfilesResponse))
}

func (fieldMask *WatchQualityProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchQualityProfilesResponse_PageTokenChange_FieldMask struct {
	Paths []WatchQualityProfilesResponsePageTokenChange_FieldPath
}

func FullWatchQualityProfilesResponse_PageTokenChange_FieldMask() *WatchQualityProfilesResponse_PageTokenChange_FieldMask {
	res := &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Subtract(other *WatchQualityProfilesResponse_PageTokenChange_FieldMask) *WatchQualityProfilesResponse_PageTokenChange_FieldMask {
	result := &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchQualityProfilesResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchQualityProfilesResponse_PageTokenChange_FieldMask {
	result := &WatchQualityProfilesResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchQualityProfilesResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchQualityProfilesResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchQualityProfilesResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) AppendPath(path WatchQualityProfilesResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchQualityProfilesResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) GetPaths() []WatchQualityProfilesResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchQualityProfilesResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Set(target, source *WatchQualityProfilesResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchQualityProfilesResponse_PageTokenChange), source.(*WatchQualityProfilesResponse_PageTokenChange))
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) Project(source *WatchQualityProfilesResponse_PageTokenChange) *WatchQualityProfilesResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchQualityProfilesResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchQualityProfilesResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchQualityProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchQualityProfilesResponse_PageTokenChange))
}

func (fieldMask *WatchQualityProfilesResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateQualityProfileRequest_FieldMask struct {
	Paths []CreateQualityProfileRequest_FieldPath
}

func FullCreateQualityProfileRequest_FieldMask() *CreateQualityProfileRequest_FieldMask {
	res := &CreateQualityProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateQualityProfileRequest_FieldTerminalPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile})
	return res
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateQualityProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateQualityProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateQualityProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateQualityProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Subtract(other *CreateQualityProfileRequest_FieldMask) *CreateQualityProfileRequest_FieldMask {
	result := &CreateQualityProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateQualityProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateQualityProfileRequest_FieldPathSelectorQualityProfile: &quality_profile.QualityProfile_FieldMask{},
	}
	mySubMasks := map[CreateQualityProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateQualityProfileRequest_FieldPathSelectorQualityProfile: &quality_profile.QualityProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateQualityProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateQualityProfileRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateQualityProfileRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
						mySubMasks[CreateQualityProfileRequest_FieldPathSelectorQualityProfile] = quality_profile.FullQualityProfile_FieldMask()
					}
				} else if tp, ok := path.(*CreateQualityProfileRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateQualityProfileRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateQualityProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateQualityProfileRequest_FieldMask) FilterInputFields() *CreateQualityProfileRequest_FieldMask {
	result := &CreateQualityProfileRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
			if _, ok := path.(*CreateQualityProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range quality_profile.FullQualityProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateQualityProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateQualityProfileRequest_FieldSubPath); ok {
				selectedMask := &quality_profile.QualityProfile_FieldMask{
					Paths: []quality_profile.QualityProfile_FieldPath{sub.subPath.(quality_profile.QualityProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateQualityProfileRequest_FieldSubPath{selector: CreateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateQualityProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateQualityProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateQualityProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateQualityProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateQualityProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) AppendPath(path CreateQualityProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateQualityProfileRequest_FieldPath))
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) GetPaths() []CreateQualityProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateQualityProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Set(target, source *CreateQualityProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateQualityProfileRequest), source.(*CreateQualityProfileRequest))
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) Project(source *CreateQualityProfileRequest) *CreateQualityProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateQualityProfileRequest{}
	qualityProfileMask := &quality_profile.QualityProfile_FieldMask{}
	wholeQualityProfileAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateQualityProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateQualityProfileRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
				result.QualityProfile = source.QualityProfile
				wholeQualityProfileAccepted = true
			}
		case *CreateQualityProfileRequest_FieldSubPath:
			switch tp.selector {
			case CreateQualityProfileRequest_FieldPathSelectorQualityProfile:
				qualityProfileMask.AppendPath(tp.subPath.(quality_profile.QualityProfile_FieldPath))
			}
		}
	}
	if wholeQualityProfileAccepted == false && len(qualityProfileMask.Paths) > 0 {
		result.QualityProfile = qualityProfileMask.Project(source.GetQualityProfile())
	}
	return result
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateQualityProfileRequest))
}

func (fieldMask *CreateQualityProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateQualityProfileRequest_FieldMask struct {
	Paths []UpdateQualityProfileRequest_FieldPath
}

func FullUpdateQualityProfileRequest_FieldMask() *UpdateQualityProfileRequest_FieldMask {
	res := &UpdateQualityProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile})
	res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateQualityProfileRequest_FieldTerminalPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateQualityProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateQualityProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateQualityProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateQualityProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Subtract(other *UpdateQualityProfileRequest_FieldMask) *UpdateQualityProfileRequest_FieldMask {
	result := &UpdateQualityProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateQualityProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateQualityProfileRequest_FieldPathSelectorQualityProfile: &quality_profile.QualityProfile_FieldMask{},
		UpdateQualityProfileRequest_FieldPathSelectorCas:            &UpdateQualityProfileRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateQualityProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateQualityProfileRequest_FieldPathSelectorQualityProfile: &quality_profile.QualityProfile_FieldMask{},
		UpdateQualityProfileRequest_FieldPathSelectorCas:            &UpdateQualityProfileRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateQualityProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateQualityProfileRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateQualityProfileRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
						mySubMasks[UpdateQualityProfileRequest_FieldPathSelectorQualityProfile] = quality_profile.FullQualityProfile_FieldMask()
					case UpdateQualityProfileRequest_FieldPathSelectorCas:
						mySubMasks[UpdateQualityProfileRequest_FieldPathSelectorCas] = FullUpdateQualityProfileRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateQualityProfileRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateQualityProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateQualityProfileRequest_FieldMask) FilterInputFields() *UpdateQualityProfileRequest_FieldMask {
	result := &UpdateQualityProfileRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
			if _, ok := path.(*UpdateQualityProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range quality_profile.FullQualityProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateQualityProfileRequest_FieldSubPath); ok {
				selectedMask := &quality_profile.QualityProfile_FieldMask{
					Paths: []quality_profile.QualityProfile_FieldPath{sub.subPath.(quality_profile.QualityProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorQualityProfile, subPath: allowedPath})
				}
			}
		case UpdateQualityProfileRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateQualityProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateQualityProfileRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateQualityProfileRequest_FieldSubPath); ok {
				selectedMask := &UpdateQualityProfileRequest_CAS_FieldMask{
					Paths: []UpdateQualityProfileRequestCAS_FieldPath{sub.subPath.(UpdateQualityProfileRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequest_FieldSubPath{selector: UpdateQualityProfileRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateQualityProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateQualityProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateQualityProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateQualityProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateQualityProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) AppendPath(path UpdateQualityProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateQualityProfileRequest_FieldPath))
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) GetPaths() []UpdateQualityProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateQualityProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Set(target, source *UpdateQualityProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateQualityProfileRequest), source.(*UpdateQualityProfileRequest))
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) Project(source *UpdateQualityProfileRequest) *UpdateQualityProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateQualityProfileRequest{}
	qualityProfileMask := &quality_profile.QualityProfile_FieldMask{}
	wholeQualityProfileAccepted := false
	casMask := &UpdateQualityProfileRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateQualityProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
				result.QualityProfile = source.QualityProfile
				wholeQualityProfileAccepted = true
			case UpdateQualityProfileRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateQualityProfileRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateQualityProfileRequest_FieldSubPath:
			switch tp.selector {
			case UpdateQualityProfileRequest_FieldPathSelectorQualityProfile:
				qualityProfileMask.AppendPath(tp.subPath.(quality_profile.QualityProfile_FieldPath))
			case UpdateQualityProfileRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateQualityProfileRequestCAS_FieldPath))
			}
		}
	}
	if wholeQualityProfileAccepted == false && len(qualityProfileMask.Paths) > 0 {
		result.QualityProfile = qualityProfileMask.Project(source.GetQualityProfile())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateQualityProfileRequest))
}

func (fieldMask *UpdateQualityProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateQualityProfileRequest_CAS_FieldMask struct {
	Paths []UpdateQualityProfileRequestCAS_FieldPath
}

func FullUpdateQualityProfileRequest_CAS_FieldMask() *UpdateQualityProfileRequest_CAS_FieldMask {
	res := &UpdateQualityProfileRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateQualityProfileRequestCAS_FieldTerminalPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateQualityProfileRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateQualityProfileRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateQualityProfileRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Subtract(other *UpdateQualityProfileRequest_CAS_FieldMask) *UpdateQualityProfileRequest_CAS_FieldMask {
	result := &UpdateQualityProfileRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateQualityProfileRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState: &quality_profile.QualityProfile_FieldMask{},
	}
	mySubMasks := map[UpdateQualityProfileRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState: &quality_profile.QualityProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateQualityProfileRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateQualityProfileRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateQualityProfileRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState] = quality_profile.FullQualityProfile_FieldMask()
					}
				} else if tp, ok := path.(*UpdateQualityProfileRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateQualityProfileRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateQualityProfileRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) FilterInputFields() *UpdateQualityProfileRequest_CAS_FieldMask {
	result := &UpdateQualityProfileRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateQualityProfileRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range quality_profile.FullQualityProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateQualityProfileRequestCAS_FieldSubPath); ok {
				selectedMask := &quality_profile.QualityProfile_FieldMask{
					Paths: []quality_profile.QualityProfile_FieldPath{sub.subPath.(quality_profile.QualityProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateQualityProfileRequestCAS_FieldSubPath{selector: UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateQualityProfileRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateQualityProfileRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateQualityProfileRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateQualityProfileRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) AppendPath(path UpdateQualityProfileRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateQualityProfileRequestCAS_FieldPath))
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) GetPaths() []UpdateQualityProfileRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateQualityProfileRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Set(target, source *UpdateQualityProfileRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateQualityProfileRequest_CAS), source.(*UpdateQualityProfileRequest_CAS))
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) Project(source *UpdateQualityProfileRequest_CAS) *UpdateQualityProfileRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateQualityProfileRequest_CAS{}
	conditionalStateMask := &quality_profile.QualityProfile_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateQualityProfileRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateQualityProfileRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateQualityProfileRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateQualityProfileRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(quality_profile.QualityProfile_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateQualityProfileRequest_CAS))
}

func (fieldMask *UpdateQualityProfileRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteQualityProfileRequest_FieldMask struct {
	Paths []DeleteQualityProfileRequest_FieldPath
}

func FullDeleteQualityProfileRequest_FieldMask() *DeleteQualityProfileRequest_FieldMask {
	res := &DeleteQualityProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteQualityProfileRequest_FieldTerminalPath{selector: DeleteQualityProfileRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteQualityProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteQualityProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteQualityProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteQualityProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Subtract(other *DeleteQualityProfileRequest_FieldMask) *DeleteQualityProfileRequest_FieldMask {
	result := &DeleteQualityProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteQualityProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteQualityProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteQualityProfileRequest_FieldMask) FilterInputFields() *DeleteQualityProfileRequest_FieldMask {
	result := &DeleteQualityProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteQualityProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteQualityProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteQualityProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteQualityProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteQualityProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) AppendPath(path DeleteQualityProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteQualityProfileRequest_FieldPath))
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) GetPaths() []DeleteQualityProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteQualityProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Set(target, source *DeleteQualityProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteQualityProfileRequest), source.(*DeleteQualityProfileRequest))
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) Project(source *DeleteQualityProfileRequest) *DeleteQualityProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteQualityProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteQualityProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteQualityProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteQualityProfileRequest))
}

func (fieldMask *DeleteQualityProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
