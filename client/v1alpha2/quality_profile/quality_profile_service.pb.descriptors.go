// Code generated by protoc-gen-goten-client
// API: QualityProfileService
// DO NOT EDIT!!!

package quality_profile_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &quality_profile.Profile{}
)

var (
	descriptorsInitialized            bool
	qualityProfileServiceDescriptor   *QualityProfileServiceDescriptor
	getQualityProfileDescriptor       *GetQualityProfileDescriptor
	batchGetQualityProfilesDescriptor *BatchGetQualityProfilesDescriptor
	listQualityProfilesDescriptor     *ListQualityProfilesDescriptor
	watchQualityProfileDescriptor     *WatchQualityProfileDescriptor
	watchQualityProfilesDescriptor    *WatchQualityProfilesDescriptor
	createQualityProfileDescriptor    *CreateQualityProfileDescriptor
	updateQualityProfileDescriptor    *UpdateQualityProfileDescriptor
	deleteQualityProfileDescriptor    *DeleteQualityProfileDescriptor
)

type GetQualityProfileDescriptor struct{}

type GetQualityProfileDescriptorClientMsgHandle struct{}

type GetQualityProfileDescriptorServerMsgHandle struct{}

func (d *GetQualityProfileDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetQualityProfileRequest{}
}

func (d *GetQualityProfileDescriptor) NewEmptyServerMsg() proto.Message {
	return &quality_profile.QualityProfile{}
}

func (d *GetQualityProfileDescriptor) IsUnary() bool {
	return true
}

func (d *GetQualityProfileDescriptor) IsClientStream() bool {
	return false
}

func (d *GetQualityProfileDescriptor) IsServerStream() bool {
	return false
}

func (d *GetQualityProfileDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetQualityProfileDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetQualityProfileDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetQualityProfileDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetQualityProfileDescriptor) GetVerb() string {
	return "get"
}

func (d *GetQualityProfileDescriptor) GetMethodName() string {
	return "GetQualityProfile"
}

func (d *GetQualityProfileDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/GetQualityProfile"
}

func (d *GetQualityProfileDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetQualityProfileDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *GetQualityProfileDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetQualityProfileDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetQualityProfileDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *GetQualityProfileDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *GetQualityProfileDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetQualityProfileDescriptorClientMsgHandle{}
}

func (d *GetQualityProfileDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetQualityProfileDescriptorServerMsgHandle{}
}

func (h *GetQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetQualityProfileRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*quality_profile.Name)(nil)
}

func (h *GetQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetQualityProfileRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetQualityProfileDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetQualityProfileRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*quality_profile.QualityProfile) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*quality_profile.QualityProfile) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetQualityProfileDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*quality_profile.QualityProfile) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetQualityProfileDescriptor() *GetQualityProfileDescriptor {
	return getQualityProfileDescriptor
}

type BatchGetQualityProfilesDescriptor struct{}

type BatchGetQualityProfilesDescriptorClientMsgHandle struct{}

type BatchGetQualityProfilesDescriptorServerMsgHandle struct{}

func (d *BatchGetQualityProfilesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetQualityProfilesRequest{}
}

func (d *BatchGetQualityProfilesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetQualityProfilesResponse{}
}

func (d *BatchGetQualityProfilesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetQualityProfilesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetQualityProfilesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetQualityProfilesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetQualityProfilesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetQualityProfilesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetQualityProfilesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetQualityProfilesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetQualityProfilesDescriptor) GetMethodName() string {
	return "BatchGetQualityProfiles"
}

func (d *BatchGetQualityProfilesDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/BatchGetQualityProfiles"
}

func (d *BatchGetQualityProfilesDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetQualityProfilesDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *BatchGetQualityProfilesDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetQualityProfilesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetQualityProfilesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *BatchGetQualityProfilesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *BatchGetQualityProfilesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetQualityProfilesDescriptorClientMsgHandle{}
}

func (d *BatchGetQualityProfilesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetQualityProfilesDescriptorServerMsgHandle{}
}

func (h *BatchGetQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetQualityProfilesRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetQualityProfilesRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(quality_profile.QualityProfileNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (quality_profile.QualityProfileNameList)(nil)
}

func (h *BatchGetQualityProfilesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetQualityProfilesRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetQualityProfilesResponse) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetQualityProfilesResponse) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetQualityProfiles()
	list := make(quality_profile.QualityProfileNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetQualityProfilesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetQualityProfilesResponse) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetQualityProfilesDescriptor() *BatchGetQualityProfilesDescriptor {
	return batchGetQualityProfilesDescriptor
}

type ListQualityProfilesDescriptor struct{}

type ListQualityProfilesDescriptorClientMsgHandle struct{}

type ListQualityProfilesDescriptorServerMsgHandle struct{}

func (d *ListQualityProfilesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListQualityProfilesRequest{}
}

func (d *ListQualityProfilesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListQualityProfilesResponse{}
}

func (d *ListQualityProfilesDescriptor) IsUnary() bool {
	return true
}

func (d *ListQualityProfilesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListQualityProfilesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListQualityProfilesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListQualityProfilesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListQualityProfilesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListQualityProfilesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListQualityProfilesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListQualityProfilesDescriptor) GetMethodName() string {
	return "ListQualityProfiles"
}

func (d *ListQualityProfilesDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/ListQualityProfiles"
}

func (d *ListQualityProfilesDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListQualityProfilesDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *ListQualityProfilesDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListQualityProfilesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListQualityProfilesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *ListQualityProfilesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *ListQualityProfilesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListQualityProfilesDescriptorClientMsgHandle{}
}

func (d *ListQualityProfilesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListQualityProfilesDescriptorServerMsgHandle{}
}

func (h *ListQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListQualityProfilesRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListQualityProfilesRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListQualityProfilesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListQualityProfilesRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListQualityProfilesResponse) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListQualityProfilesResponse) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetQualityProfiles()
	list := make(quality_profile.QualityProfileNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListQualityProfilesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListQualityProfilesResponse) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListQualityProfilesDescriptor() *ListQualityProfilesDescriptor {
	return listQualityProfilesDescriptor
}

type WatchQualityProfileDescriptor struct{}

type WatchQualityProfileDescriptorClientMsgHandle struct{}

type WatchQualityProfileDescriptorServerMsgHandle struct{}

func (d *WatchQualityProfileDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchQualityProfileRequest{}
}

func (d *WatchQualityProfileDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchQualityProfileResponse{}
}

func (d *WatchQualityProfileDescriptor) IsUnary() bool {
	return false
}

func (d *WatchQualityProfileDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchQualityProfileDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchQualityProfileDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchQualityProfileDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchQualityProfileDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchQualityProfileDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchQualityProfileDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchQualityProfileDescriptor) GetMethodName() string {
	return "WatchQualityProfile"
}

func (d *WatchQualityProfileDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/WatchQualityProfile"
}

func (d *WatchQualityProfileDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchQualityProfileDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *WatchQualityProfileDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchQualityProfileDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchQualityProfileDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *WatchQualityProfileDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *WatchQualityProfileDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchQualityProfileDescriptorClientMsgHandle{}
}

func (d *WatchQualityProfileDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchQualityProfileDescriptorServerMsgHandle{}
}

func (h *WatchQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchQualityProfileRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*quality_profile.Name)(nil)
}

func (h *WatchQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchQualityProfileRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchQualityProfileDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchQualityProfileRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfileResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchQualityProfileResponse) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *quality_profile.QualityProfileChange_Added_:
			return tResChange.Added.GetQualityProfile().GetName()
		case *quality_profile.QualityProfileChange_Modified_:
			return tResChange.Modified.GetName()
		case *quality_profile.QualityProfileChange_Removed_:
			return tResChange.Removed.GetName()
		case *quality_profile.QualityProfileChange_Current_:
			return tResChange.Current.GetQualityProfile().GetName()
		}
	}
	return (*quality_profile.Name)(nil)
}

func (h *WatchQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchQualityProfileResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchQualityProfileResponse) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchQualityProfileDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfileResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchQualityProfileResponse) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchQualityProfileDescriptor() *WatchQualityProfileDescriptor {
	return watchQualityProfileDescriptor
}

type WatchQualityProfilesDescriptor struct{}

type WatchQualityProfilesDescriptorClientMsgHandle struct{}

type WatchQualityProfilesDescriptorServerMsgHandle struct{}

func (d *WatchQualityProfilesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchQualityProfilesRequest{}
}

func (d *WatchQualityProfilesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchQualityProfilesResponse{}
}

func (d *WatchQualityProfilesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchQualityProfilesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchQualityProfilesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchQualityProfilesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchQualityProfilesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchQualityProfilesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchQualityProfilesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchQualityProfilesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchQualityProfilesDescriptor) GetMethodName() string {
	return "WatchQualityProfiles"
}

func (d *WatchQualityProfilesDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/WatchQualityProfiles"
}

func (d *WatchQualityProfilesDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchQualityProfilesDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *WatchQualityProfilesDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchQualityProfilesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchQualityProfilesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *WatchQualityProfilesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *WatchQualityProfilesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchQualityProfilesDescriptorClientMsgHandle{}
}

func (d *WatchQualityProfilesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchQualityProfilesDescriptorServerMsgHandle{}
}

func (h *WatchQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchQualityProfilesRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchQualityProfilesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchQualityProfilesRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchQualityProfilesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfilesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchQualityProfilesRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*quality_profile.ParentName)(nil)
}

func (h *WatchQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchQualityProfilesResponse) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchQualityProfilesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchQualityProfilesResponse) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetQualityProfileChanges()
	list := make(quality_profile.QualityProfileNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *quality_profile.QualityProfileChange_Added_:
			list = append(list, tResChange.Added.GetQualityProfile().GetName())
		case *quality_profile.QualityProfileChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *quality_profile.QualityProfileChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *quality_profile.QualityProfileChange_Current_:
			list = append(list, tResChange.Current.GetQualityProfile().GetName())
		}
	}
	return list
}

func (h *WatchQualityProfilesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchQualityProfilesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchQualityProfilesResponse) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchQualityProfilesDescriptor() *WatchQualityProfilesDescriptor {
	return watchQualityProfilesDescriptor
}

type CreateQualityProfileDescriptor struct{}

type CreateQualityProfileDescriptorClientMsgHandle struct{}

type CreateQualityProfileDescriptorServerMsgHandle struct{}

func (d *CreateQualityProfileDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateQualityProfileRequest{}
}

func (d *CreateQualityProfileDescriptor) NewEmptyServerMsg() proto.Message {
	return &quality_profile.QualityProfile{}
}

func (d *CreateQualityProfileDescriptor) IsUnary() bool {
	return true
}

func (d *CreateQualityProfileDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateQualityProfileDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateQualityProfileDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateQualityProfileDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateQualityProfileDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateQualityProfileDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateQualityProfileDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateQualityProfileDescriptor) GetMethodName() string {
	return "CreateQualityProfile"
}

func (d *CreateQualityProfileDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/CreateQualityProfile"
}

func (d *CreateQualityProfileDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateQualityProfileDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *CreateQualityProfileDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateQualityProfileDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateQualityProfileDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *CreateQualityProfileDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *CreateQualityProfileDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateQualityProfileDescriptorClientMsgHandle{}
}

func (d *CreateQualityProfileDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateQualityProfileDescriptorServerMsgHandle{}
}

func (h *CreateQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateQualityProfileRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetQualityProfile().GetName()
}

func (h *CreateQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateQualityProfileRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateQualityProfileDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateQualityProfileRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*quality_profile.ParentName)(nil)
}

func (h *CreateQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*quality_profile.QualityProfile) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*quality_profile.QualityProfile) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateQualityProfileDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*quality_profile.QualityProfile) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateQualityProfileDescriptor() *CreateQualityProfileDescriptor {
	return createQualityProfileDescriptor
}

type UpdateQualityProfileDescriptor struct{}

type UpdateQualityProfileDescriptorClientMsgHandle struct{}

type UpdateQualityProfileDescriptorServerMsgHandle struct{}

func (d *UpdateQualityProfileDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateQualityProfileRequest{}
}

func (d *UpdateQualityProfileDescriptor) NewEmptyServerMsg() proto.Message {
	return &quality_profile.QualityProfile{}
}

func (d *UpdateQualityProfileDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateQualityProfileDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateQualityProfileDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateQualityProfileDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateQualityProfileDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateQualityProfileDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateQualityProfileDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateQualityProfileDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateQualityProfileDescriptor) GetMethodName() string {
	return "UpdateQualityProfile"
}

func (d *UpdateQualityProfileDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/UpdateQualityProfile"
}

func (d *UpdateQualityProfileDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateQualityProfileDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *UpdateQualityProfileDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateQualityProfileDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateQualityProfileDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *UpdateQualityProfileDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *UpdateQualityProfileDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateQualityProfileDescriptorClientMsgHandle{}
}

func (d *UpdateQualityProfileDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateQualityProfileDescriptorServerMsgHandle{}
}

func (h *UpdateQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateQualityProfileRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetQualityProfile().GetName()
}

func (h *UpdateQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateQualityProfileRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateQualityProfileDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateQualityProfileRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*quality_profile.QualityProfile) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*quality_profile.QualityProfile) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateQualityProfileDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*quality_profile.QualityProfile)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*quality_profile.QualityProfile) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateQualityProfileDescriptor() *UpdateQualityProfileDescriptor {
	return updateQualityProfileDescriptor
}

type DeleteQualityProfileDescriptor struct{}

type DeleteQualityProfileDescriptorClientMsgHandle struct{}

type DeleteQualityProfileDescriptorServerMsgHandle struct{}

func (d *DeleteQualityProfileDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteQualityProfileRequest{}
}

func (d *DeleteQualityProfileDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteQualityProfileDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteQualityProfileDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteQualityProfileDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteQualityProfileDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteQualityProfileDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteQualityProfileDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteQualityProfileDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteQualityProfileDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteQualityProfileDescriptor) GetMethodName() string {
	return "DeleteQualityProfile"
}

func (d *DeleteQualityProfileDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService/DeleteQualityProfile"
}

func (d *DeleteQualityProfileDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteQualityProfileDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *DeleteQualityProfileDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteQualityProfileDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteQualityProfileDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return qualityProfileServiceDescriptor
}

func (d *DeleteQualityProfileDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return quality_profile.GetDescriptor()
}

func (d *DeleteQualityProfileDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteQualityProfileDescriptorClientMsgHandle{}
}

func (d *DeleteQualityProfileDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteQualityProfileDescriptorServerMsgHandle{}
}

func (h *DeleteQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteQualityProfileRequest) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*quality_profile.Name)(nil)
}

func (h *DeleteQualityProfileDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteQualityProfileRequest) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteQualityProfileDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteQualityProfileRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteQualityProfileRequest) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *quality_profile.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteQualityProfileDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*quality_profile.Name
	})
	if ok {
		return quality_profile.QualityProfileNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteQualityProfileDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *quality_profile.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteQualityProfileDescriptor() *DeleteQualityProfileDescriptor {
	return deleteQualityProfileDescriptor
}

type QualityProfileServiceDescriptor struct{}

func (d *QualityProfileServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getQualityProfileDescriptor,
		batchGetQualityProfilesDescriptor,
		listQualityProfilesDescriptor,
		watchQualityProfileDescriptor,
		watchQualityProfilesDescriptor,
		createQualityProfileDescriptor,
		updateQualityProfileDescriptor,
		deleteQualityProfileDescriptor,
	}
}

func (d *QualityProfileServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.QualityProfileService"
}

func (d *QualityProfileServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *QualityProfileServiceDescriptor) GetApiName() string {
	return "QualityProfileService"
}

func (d *QualityProfileServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *QualityProfileServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetQualityProfileServiceDescriptor() *QualityProfileServiceDescriptor {
	return qualityProfileServiceDescriptor
}

func initDescriptors() {
	qualityProfileServiceDescriptor = &QualityProfileServiceDescriptor{}
	getQualityProfileDescriptor = &GetQualityProfileDescriptor{}
	batchGetQualityProfilesDescriptor = &BatchGetQualityProfilesDescriptor{}
	listQualityProfilesDescriptor = &ListQualityProfilesDescriptor{}
	watchQualityProfileDescriptor = &WatchQualityProfileDescriptor{}
	watchQualityProfilesDescriptor = &WatchQualityProfilesDescriptor{}
	createQualityProfileDescriptor = &CreateQualityProfileDescriptor{}
	updateQualityProfileDescriptor = &UpdateQualityProfileDescriptor{}
	deleteQualityProfileDescriptor = &DeleteQualityProfileDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(qualityProfileServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getQualityProfileDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetQualityProfilesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listQualityProfilesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchQualityProfileDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchQualityProfilesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createQualityProfileDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateQualityProfileDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteQualityProfileDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
