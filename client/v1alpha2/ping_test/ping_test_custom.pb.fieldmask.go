// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/ping_test_custom.proto
// DO NOT EDIT!!!

package ping_test_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &probe.Probe{}
)

type RunPingTestRequest_FieldMask struct {
	Paths []RunPingTestRequest_FieldPath
}

func FullRunPingTestRequest_FieldMask() *RunPingTestRequest_FieldMask {
	res := &RunPingTestRequest_FieldMask{}
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorSource})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorDestination})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorSizeBytes})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorCount})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorEchoTimeout})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorDontFragment})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorTtl})
	res.Paths = append(res.Paths, &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorTos})
	return res
}

func (fieldMask *RunPingTestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunPingTestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunPingTestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunPingTestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunPingTestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunPingTestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunPingTestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunPingTestRequest_FieldPath(raw)
	})
}

func (fieldMask *RunPingTestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *RunPingTestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunPingTestRequest_FieldMask) Subtract(other *RunPingTestRequest_FieldMask) *RunPingTestRequest_FieldMask {
	result := &RunPingTestRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunPingTestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunPingTestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunPingTestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunPingTestRequest_FieldMask) FilterInputFields() *RunPingTestRequest_FieldMask {
	result := &RunPingTestRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunPingTestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunPingTestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunPingTestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunPingTestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunPingTestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunPingTestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunPingTestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunPingTestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestRequest_FieldMask) AppendPath(path RunPingTestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunPingTestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunPingTestRequest_FieldPath))
}

func (fieldMask *RunPingTestRequest_FieldMask) GetPaths() []RunPingTestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunPingTestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunPingTestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunPingTestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunPingTestRequest_FieldMask) Set(target, source *RunPingTestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunPingTestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunPingTestRequest), source.(*RunPingTestRequest))
}

func (fieldMask *RunPingTestRequest_FieldMask) Project(source *RunPingTestRequest) *RunPingTestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunPingTestRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunPingTestRequest_FieldTerminalPath:
			switch tp.selector {
			case RunPingTestRequest_FieldPathSelectorName:
				result.Name = source.Name
			case RunPingTestRequest_FieldPathSelectorSource:
				result.Source = source.Source
			case RunPingTestRequest_FieldPathSelectorDestination:
				result.Destination = source.Destination
			case RunPingTestRequest_FieldPathSelectorSizeBytes:
				result.SizeBytes = source.SizeBytes
			case RunPingTestRequest_FieldPathSelectorCount:
				result.Count = source.Count
			case RunPingTestRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case RunPingTestRequest_FieldPathSelectorEchoTimeout:
				result.EchoTimeout = source.EchoTimeout
			case RunPingTestRequest_FieldPathSelectorDontFragment:
				result.DontFragment = source.DontFragment
			case RunPingTestRequest_FieldPathSelectorTtl:
				result.Ttl = source.Ttl
			case RunPingTestRequest_FieldPathSelectorTos:
				result.Tos = source.Tos
			}
		}
	}
	return result
}

func (fieldMask *RunPingTestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunPingTestRequest))
}

func (fieldMask *RunPingTestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunPingTestResponse_FieldMask struct {
	Paths []RunPingTestResponse_FieldPath
}

func FullRunPingTestResponse_FieldMask() *RunPingTestResponse_FieldMask {
	res := &RunPingTestResponse_FieldMask{}
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorFrom})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSizeBytes})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSequenceNumber})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorTtl})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorRtt})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorError})
	res.Paths = append(res.Paths, &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSummary})
	return res
}

func (fieldMask *RunPingTestResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunPingTestResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunPingTestResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunPingTestResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunPingTestResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunPingTestResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunPingTestResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunPingTestResponse_FieldPath(raw)
	})
}

func (fieldMask *RunPingTestResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RunPingTestResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunPingTestResponse_FieldMask) Subtract(other *RunPingTestResponse_FieldMask) *RunPingTestResponse_FieldMask {
	result := &RunPingTestResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[RunPingTestResponse_FieldPathSelector]gotenobject.FieldMask{
		RunPingTestResponse_FieldPathSelectorSummary: &RunPingTestResponse_SummaryStats_FieldMask{},
	}
	mySubMasks := map[RunPingTestResponse_FieldPathSelector]gotenobject.FieldMask{
		RunPingTestResponse_FieldPathSelectorSummary: &RunPingTestResponse_SummaryStats_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunPingTestResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RunPingTestResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RunPingTestResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case RunPingTestResponse_FieldPathSelectorSummary:
						mySubMasks[RunPingTestResponse_FieldPathSelectorSummary] = FullRunPingTestResponse_SummaryStats_FieldMask()
					}
				} else if tp, ok := path.(*RunPingTestResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RunPingTestResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunPingTestResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunPingTestResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunPingTestResponse_FieldMask) FilterInputFields() *RunPingTestResponse_FieldMask {
	result := &RunPingTestResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunPingTestResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunPingTestResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunPingTestResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunPingTestResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunPingTestResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunPingTestResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunPingTestResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunPingTestResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestResponse_FieldMask) AppendPath(path RunPingTestResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunPingTestResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunPingTestResponse_FieldPath))
}

func (fieldMask *RunPingTestResponse_FieldMask) GetPaths() []RunPingTestResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunPingTestResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunPingTestResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunPingTestResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunPingTestResponse_FieldMask) Set(target, source *RunPingTestResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunPingTestResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunPingTestResponse), source.(*RunPingTestResponse))
}

func (fieldMask *RunPingTestResponse_FieldMask) Project(source *RunPingTestResponse) *RunPingTestResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunPingTestResponse{}
	summaryMask := &RunPingTestResponse_SummaryStats_FieldMask{}
	wholeSummaryAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunPingTestResponse_FieldTerminalPath:
			switch tp.selector {
			case RunPingTestResponse_FieldPathSelectorFrom:
				result.From = source.From
			case RunPingTestResponse_FieldPathSelectorSizeBytes:
				result.SizeBytes = source.SizeBytes
			case RunPingTestResponse_FieldPathSelectorSequenceNumber:
				result.SequenceNumber = source.SequenceNumber
			case RunPingTestResponse_FieldPathSelectorTtl:
				result.Ttl = source.Ttl
			case RunPingTestResponse_FieldPathSelectorRtt:
				result.Rtt = source.Rtt
			case RunPingTestResponse_FieldPathSelectorError:
				result.Error = source.Error
			case RunPingTestResponse_FieldPathSelectorSummary:
				result.Summary = source.Summary
				wholeSummaryAccepted = true
			}
		case *RunPingTestResponse_FieldSubPath:
			switch tp.selector {
			case RunPingTestResponse_FieldPathSelectorSummary:
				summaryMask.AppendPath(tp.subPath.(RunPingTestResponseSummaryStats_FieldPath))
			}
		}
	}
	if wholeSummaryAccepted == false && len(summaryMask.Paths) > 0 {
		result.Summary = summaryMask.Project(source.GetSummary())
	}
	return result
}

func (fieldMask *RunPingTestResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunPingTestResponse))
}

func (fieldMask *RunPingTestResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunPingTestResponse_SummaryStats_FieldMask struct {
	Paths []RunPingTestResponseSummaryStats_FieldPath
}

func FullRunPingTestResponse_SummaryStats_FieldMask() *RunPingTestResponse_SummaryStats_FieldMask {
	res := &RunPingTestResponse_SummaryStats_FieldMask{}
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter})
	res.Paths = append(res.Paths, &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio})
	return res
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunPingTestResponseSummaryStats_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunPingTestResponseSummaryStats_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunPingTestResponseSummaryStats_FieldPath(raw)
	})
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) ProtoMessage() {}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Subtract(other *RunPingTestResponse_SummaryStats_FieldMask) *RunPingTestResponse_SummaryStats_FieldMask {
	result := &RunPingTestResponse_SummaryStats_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunPingTestResponseSummaryStats_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunPingTestResponse_SummaryStats_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) FilterInputFields() *RunPingTestResponse_SummaryStats_FieldMask {
	result := &RunPingTestResponse_SummaryStats_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunPingTestResponseSummaryStats_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunPingTestResponseSummaryStats_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunPingTestResponse_SummaryStats_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunPingTestResponse_SummaryStats_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) AppendPath(path RunPingTestResponseSummaryStats_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunPingTestResponseSummaryStats_FieldPath))
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) GetPaths() []RunPingTestResponseSummaryStats_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunPingTestResponseSummaryStats_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Set(target, source *RunPingTestResponse_SummaryStats) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunPingTestResponse_SummaryStats), source.(*RunPingTestResponse_SummaryStats))
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) Project(source *RunPingTestResponse_SummaryStats) *RunPingTestResponse_SummaryStats {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunPingTestResponse_SummaryStats{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunPingTestResponseSummaryStats_FieldTerminalPath:
			switch tp.selector {
			case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
				result.MinRtt = source.MinRtt
			case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
				result.AvgRtt = source.AvgRtt
			case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
				result.MaxRtt = source.MaxRtt
			case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
				result.StddevRtt = source.StddevRtt
			case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
				result.TransmittedCounter = source.TransmittedCounter
			case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
				result.ReceivedCounter = source.ReceivedCounter
			case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
				result.LossRatio = source.LossRatio
			}
		}
	}
	return result
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunPingTestResponse_SummaryStats))
}

func (fieldMask *RunPingTestResponse_SummaryStats_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunPingTestRequestToProbe_FieldMask struct {
	Paths []RunPingTestRequestToProbe_FieldPath
}

func FullRunPingTestRequestToProbe_FieldMask() *RunPingTestRequestToProbe_FieldMask {
	res := &RunPingTestRequestToProbe_FieldMask{}
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorSource})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorDestination})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorSizeBytes})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorCount})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorDontFragment})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorTtl})
	res.Paths = append(res.Paths, &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorTos})
	return res
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunPingTestRequestToProbe_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunPingTestRequestToProbe_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 9)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunPingTestRequestToProbe_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunPingTestRequestToProbe_FieldPath(raw)
	})
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) ProtoMessage() {}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Subtract(other *RunPingTestRequestToProbe_FieldMask) *RunPingTestRequestToProbe_FieldMask {
	result := &RunPingTestRequestToProbe_FieldMask{}
	removedSelectors := make([]bool, 9)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunPingTestRequestToProbe_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunPingTestRequestToProbe_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunPingTestRequestToProbe_FieldMask) FilterInputFields() *RunPingTestRequestToProbe_FieldMask {
	result := &RunPingTestRequestToProbe_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunPingTestRequestToProbe_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunPingTestRequestToProbe_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunPingTestRequestToProbe_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunPingTestRequestToProbe_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunPingTestRequestToProbe_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) AppendPath(path RunPingTestRequestToProbe_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunPingTestRequestToProbe_FieldPath))
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) GetPaths() []RunPingTestRequestToProbe_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunPingTestRequestToProbe_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Set(target, source *RunPingTestRequestToProbe) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunPingTestRequestToProbe), source.(*RunPingTestRequestToProbe))
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) Project(source *RunPingTestRequestToProbe) *RunPingTestRequestToProbe {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunPingTestRequestToProbe{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunPingTestRequestToProbe_FieldTerminalPath:
			switch tp.selector {
			case RunPingTestRequestToProbe_FieldPathSelectorSource:
				result.Source = source.Source
			case RunPingTestRequestToProbe_FieldPathSelectorDestination:
				result.Destination = source.Destination
			case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
				result.SizeBytes = source.SizeBytes
			case RunPingTestRequestToProbe_FieldPathSelectorCount:
				result.Count = source.Count
			case RunPingTestRequestToProbe_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
				result.EchoTimeout = source.EchoTimeout
			case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
				result.DontFragment = source.DontFragment
			case RunPingTestRequestToProbe_FieldPathSelectorTtl:
				result.Ttl = source.Ttl
			case RunPingTestRequestToProbe_FieldPathSelectorTos:
				result.Tos = source.Tos
			}
		}
	}
	return result
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunPingTestRequestToProbe))
}

func (fieldMask *RunPingTestRequestToProbe_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
