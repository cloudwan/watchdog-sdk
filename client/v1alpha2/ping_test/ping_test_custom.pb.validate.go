// Code generated by protoc-gen-goten-validate
// File: watchdog/proto/v1alpha2/ping_test_custom.proto
// DO NOT EDIT!!!

package ping_test_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = durationpb.Duration{}
	_ = timestamppb.Timestamp{}
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (obj *RunPingTestRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if !(obj.SizeBytes >= 2) {
		return gotenvalidate.NewValidationError("RunPingTestRequest", "sizeBytes", obj.SizeBytes, "field must be greater or equal to 2", nil)
	}
	if !(obj.Count >= 1 && obj.Count <= 1000) {
		return gotenvalidate.NewValidationError("RunPingTestRequest", "count", obj.Count, "field must be in range [1, 1000]", nil)
	}
	if obj.Interval != nil && obj.Interval.CheckValid() != nil {
		err := obj.Interval.CheckValid()
		return gotenvalidate.NewValidationError("RunPingTestRequest", "interval", obj.Interval, "could not validate duration", err)
	} else {
		d := obj.Interval.AsDuration()

		if obj.Interval != nil {
			if !(d >= time.Duration(100000000)) {
				return gotenvalidate.NewValidationError("RunPingTestRequest", "interval", d, "field must be greater or equal to 100ms", nil)
			}
		}
	}
	if obj.EchoTimeout != nil && obj.EchoTimeout.CheckValid() != nil {
		err := obj.EchoTimeout.CheckValid()
		return gotenvalidate.NewValidationError("RunPingTestRequest", "echoTimeout", obj.EchoTimeout, "could not validate duration", err)
	} else {
		d := obj.EchoTimeout.AsDuration()

		if obj.EchoTimeout != nil {
			if !(d >= time.Duration(100000000)) {
				return gotenvalidate.NewValidationError("RunPingTestRequest", "echoTimeout", d, "field must be greater or equal to 100ms", nil)
			}
		}
	}
	if !(obj.Ttl >= 1 && obj.Ttl <= 255) {
		return gotenvalidate.NewValidationError("RunPingTestRequest", "ttl", obj.Ttl, "field must be in range [1, 255]", nil)
	}
	if !(obj.Tos >= 0 && obj.Tos <= 255) {
		return gotenvalidate.NewValidationError("RunPingTestRequest", "tos", obj.Tos, "field must be in range [0, 255]", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *RunPingTestResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.JsonResponse).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("RunPingTestResponse", "jsonResponse", obj.JsonResponse, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *RunPingTestResponse_JsonResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Summary).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("JsonResponse", "summary", obj.Summary, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *RunPingTestResponse_JsonResponse_SummaryStats) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
