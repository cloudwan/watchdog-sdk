// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/ping_test_custom.proto
// DO NOT EDIT!!!

package ping_test_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunPingTestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunPingTestRequest_FieldPathSelector
	Get(source *RunPingTestRequest) []interface{}
	GetSingle(source *RunPingTestRequest) (interface{}, bool)
	ClearValue(item *RunPingTestRequest)

	// Those methods build corresponding RunPingTestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunPingTestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RunPingTestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunPingTestRequest_FieldPathArrayItemValue
}

type RunPingTestRequest_FieldPathSelector int32

const (
	RunPingTestRequest_FieldPathSelectorName         RunPingTestRequest_FieldPathSelector = 0
	RunPingTestRequest_FieldPathSelectorSource       RunPingTestRequest_FieldPathSelector = 1
	RunPingTestRequest_FieldPathSelectorDestination  RunPingTestRequest_FieldPathSelector = 2
	RunPingTestRequest_FieldPathSelectorSizeBytes    RunPingTestRequest_FieldPathSelector = 3
	RunPingTestRequest_FieldPathSelectorCount        RunPingTestRequest_FieldPathSelector = 4
	RunPingTestRequest_FieldPathSelectorInterval     RunPingTestRequest_FieldPathSelector = 5
	RunPingTestRequest_FieldPathSelectorEchoTimeout  RunPingTestRequest_FieldPathSelector = 6
	RunPingTestRequest_FieldPathSelectorDontFragment RunPingTestRequest_FieldPathSelector = 7
	RunPingTestRequest_FieldPathSelectorTtl          RunPingTestRequest_FieldPathSelector = 8
	RunPingTestRequest_FieldPathSelectorTos          RunPingTestRequest_FieldPathSelector = 9
)

func (s RunPingTestRequest_FieldPathSelector) String() string {
	switch s {
	case RunPingTestRequest_FieldPathSelectorName:
		return "name"
	case RunPingTestRequest_FieldPathSelectorSource:
		return "source"
	case RunPingTestRequest_FieldPathSelectorDestination:
		return "destination"
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case RunPingTestRequest_FieldPathSelectorCount:
		return "count"
	case RunPingTestRequest_FieldPathSelectorInterval:
		return "interval"
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		return "echo_timeout"
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		return "dont_fragment"
	case RunPingTestRequest_FieldPathSelectorTtl:
		return "ttl"
	case RunPingTestRequest_FieldPathSelectorTos:
		return "tos"
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", s))
	}
}

func BuildRunPingTestRequest_FieldPath(fp gotenobject.RawFieldPath) (RunPingTestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunPingTestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorName}, nil
		case "source":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorSource}, nil
		case "destination":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorDestination}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorSizeBytes}, nil
		case "count":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorCount}, nil
		case "interval":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorInterval}, nil
		case "echo_timeout", "echoTimeout", "echo-timeout":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorEchoTimeout}, nil
		case "dont_fragment", "dontFragment", "dont-fragment":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorDontFragment}, nil
		case "ttl":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorTtl}, nil
		case "tos":
			return &RunPingTestRequest_FieldTerminalPath{selector: RunPingTestRequest_FieldPathSelectorTos}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunPingTestRequest", fp)
}

func ParseRunPingTestRequest_FieldPath(rawField string) (RunPingTestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunPingTestRequest_FieldPath(fp)
}

func MustParseRunPingTestRequest_FieldPath(rawField string) RunPingTestRequest_FieldPath {
	fp, err := ParseRunPingTestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunPingTestRequest_FieldTerminalPath struct {
	selector RunPingTestRequest_FieldPathSelector
}

var _ RunPingTestRequest_FieldPath = (*RunPingTestRequest_FieldTerminalPath)(nil)

func (fp *RunPingTestRequest_FieldTerminalPath) Selector() RunPingTestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunPingTestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunPingTestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunPingTestRequest
func (fp *RunPingTestRequest_FieldTerminalPath) Get(source *RunPingTestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunPingTestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RunPingTestRequest_FieldPathSelectorSource:
			values = append(values, source.Source)
		case RunPingTestRequest_FieldPathSelectorDestination:
			values = append(values, source.Destination)
		case RunPingTestRequest_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case RunPingTestRequest_FieldPathSelectorCount:
			values = append(values, source.Count)
		case RunPingTestRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case RunPingTestRequest_FieldPathSelectorEchoTimeout:
			if source.EchoTimeout != nil {
				values = append(values, source.EchoTimeout)
			}
		case RunPingTestRequest_FieldPathSelectorDontFragment:
			values = append(values, source.DontFragment)
		case RunPingTestRequest_FieldPathSelectorTtl:
			values = append(values, source.Ttl)
		case RunPingTestRequest_FieldPathSelectorTos:
			values = append(values, source.Tos)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RunPingTestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunPingTestRequest))
}

// GetSingle returns value pointed by specific field of from source RunPingTestRequest
func (fp *RunPingTestRequest_FieldTerminalPath) GetSingle(source *RunPingTestRequest) (interface{}, bool) {
	switch fp.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RunPingTestRequest_FieldPathSelectorSource:
		return source.GetSource(), source != nil
	case RunPingTestRequest_FieldPathSelectorDestination:
		return source.GetDestination(), source != nil
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case RunPingTestRequest_FieldPathSelectorCount:
		return source.GetCount(), source != nil
	case RunPingTestRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		res := source.GetEchoTimeout()
		return res, res != nil
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		return source.GetDontFragment(), source != nil
	case RunPingTestRequest_FieldPathSelectorTtl:
		return source.GetTtl(), source != nil
	case RunPingTestRequest_FieldPathSelectorTos:
		return source.GetTos(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
	}
}

func (fp *RunPingTestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunPingTestRequest))
}

// GetDefault returns a default value of the field type
func (fp *RunPingTestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case RunPingTestRequest_FieldPathSelectorSource:
		return ""
	case RunPingTestRequest_FieldPathSelectorDestination:
		return ""
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		return int32(0)
	case RunPingTestRequest_FieldPathSelectorCount:
		return int32(0)
	case RunPingTestRequest_FieldPathSelectorInterval:
		return (*duration.Duration)(nil)
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		return (*duration.Duration)(nil)
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		return false
	case RunPingTestRequest_FieldPathSelectorTtl:
		return int32(0)
	case RunPingTestRequest_FieldPathSelectorTos:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
	}
}

func (fp *RunPingTestRequest_FieldTerminalPath) ClearValue(item *RunPingTestRequest) {
	if item != nil {
		switch fp.selector {
		case RunPingTestRequest_FieldPathSelectorName:
			item.Name = nil
		case RunPingTestRequest_FieldPathSelectorSource:
			item.Source = ""
		case RunPingTestRequest_FieldPathSelectorDestination:
			item.Destination = ""
		case RunPingTestRequest_FieldPathSelectorSizeBytes:
			item.SizeBytes = int32(0)
		case RunPingTestRequest_FieldPathSelectorCount:
			item.Count = int32(0)
		case RunPingTestRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case RunPingTestRequest_FieldPathSelectorEchoTimeout:
			item.EchoTimeout = nil
		case RunPingTestRequest_FieldPathSelectorDontFragment:
			item.DontFragment = false
		case RunPingTestRequest_FieldPathSelectorTtl:
			item.Ttl = int32(0)
		case RunPingTestRequest_FieldPathSelectorTos:
			item.Tos = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
		}
	}
}

func (fp *RunPingTestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunPingTestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunPingTestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunPingTestRequest_FieldPathSelectorName ||
		fp.selector == RunPingTestRequest_FieldPathSelectorSource ||
		fp.selector == RunPingTestRequest_FieldPathSelectorDestination ||
		fp.selector == RunPingTestRequest_FieldPathSelectorSizeBytes ||
		fp.selector == RunPingTestRequest_FieldPathSelectorCount ||
		fp.selector == RunPingTestRequest_FieldPathSelectorInterval ||
		fp.selector == RunPingTestRequest_FieldPathSelectorEchoTimeout ||
		fp.selector == RunPingTestRequest_FieldPathSelectorDontFragment ||
		fp.selector == RunPingTestRequest_FieldPathSelectorTtl ||
		fp.selector == RunPingTestRequest_FieldPathSelectorTos
}

func (fp *RunPingTestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithIValue(value interface{}) RunPingTestRequest_FieldPathValue {
	switch fp.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case RunPingTestRequest_FieldPathSelectorSource:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestRequest_FieldPathSelectorDestination:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequest_FieldPathSelectorCount:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequest_FieldPathSelectorInterval:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(bool)}
	case RunPingTestRequest_FieldPathSelectorTtl:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequest_FieldPathSelectorTos:
		return &RunPingTestRequest_FieldTerminalPathValue{RunPingTestRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
	}
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunPingTestRequest_FieldPathArrayOfValues {
	fpaov := &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case RunPingTestRequest_FieldPathSelectorSource:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestRequest_FieldPathSelectorDestination:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequest_FieldPathSelectorCount:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequest_FieldPathSelectorInterval:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunPingTestRequest_FieldPathSelectorTtl:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequest_FieldPathSelectorTos:
		return &RunPingTestRequest_FieldTerminalPathArrayOfValues{RunPingTestRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunPingTestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fp.selector))
	}
}

func (fp *RunPingTestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunPingTestRequest_FieldPathValue allows storing values for RunPingTestRequest fields according to their type
type RunPingTestRequest_FieldPathValue interface {
	RunPingTestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunPingTestRequest)
	CompareWith(*RunPingTestRequest) (cmp int, comparable bool)
}

func ParseRunPingTestRequest_FieldPathValue(pathStr, valueStr string) (RunPingTestRequest_FieldPathValue, error) {
	fp, err := ParseRunPingTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunPingTestRequest_FieldPathValue), nil
}

func MustParseRunPingTestRequest_FieldPathValue(pathStr, valueStr string) RunPingTestRequest_FieldPathValue {
	fpv, err := ParseRunPingTestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunPingTestRequest_FieldTerminalPathValue struct {
	RunPingTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunPingTestRequest_FieldPathValue = (*RunPingTestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunPingTestRequest' as interface{}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsSourceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsDestinationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsSizeBytesValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsEchoTimeoutValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsDontFragmentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsTtlValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequest_FieldTerminalPathValue) AsTosValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object RunPingTestRequest
func (fpv *RunPingTestRequest_FieldTerminalPathValue) SetTo(target **RunPingTestRequest) {
	if *target == nil {
		*target = new(RunPingTestRequest)
	}
	switch fpv.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case RunPingTestRequest_FieldPathSelectorSource:
		(*target).Source = fpv.value.(string)
	case RunPingTestRequest_FieldPathSelectorDestination:
		(*target).Destination = fpv.value.(string)
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int32)
	case RunPingTestRequest_FieldPathSelectorCount:
		(*target).Count = fpv.value.(int32)
	case RunPingTestRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*duration.Duration)
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		(*target).EchoTimeout = fpv.value.(*duration.Duration)
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		(*target).DontFragment = fpv.value.(bool)
	case RunPingTestRequest_FieldPathSelectorTtl:
		(*target).Ttl = fpv.value.(int32)
	case RunPingTestRequest_FieldPathSelectorTos:
		(*target).Tos = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunPingTestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunPingTestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunPingTestRequest_FieldTerminalPathValue' with the value under path in 'RunPingTestRequest'.
func (fpv *RunPingTestRequest_FieldTerminalPathValue) CompareWith(source *RunPingTestRequest) (int, bool) {
	switch fpv.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorSource:
		leftValue := fpv.value.(string)
		rightValue := source.GetSource()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorDestination:
		leftValue := fpv.value.(string)
		rightValue := source.GetDestination()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetEchoTimeout()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDontFragment()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorTtl:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTtl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequest_FieldPathSelectorTos:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTos()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunPingTestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunPingTestRequest))
}

// RunPingTestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RunPingTestRequest according to their type
// Present only for array (repeated) types.
type RunPingTestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunPingTestRequest_FieldPath
	ContainsValue(*RunPingTestRequest) bool
}

// ParseRunPingTestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunPingTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RunPingTestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRunPingTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunPingTestRequest_FieldPathArrayItemValue), nil
}

func MustParseRunPingTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) RunPingTestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRunPingTestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunPingTestRequest_FieldTerminalPathArrayItemValue struct {
	RunPingTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunPingTestRequest_FieldPathArrayItemValue = (*RunPingTestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunPingTestRequest as interface{}
func (fpaiv *RunPingTestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunPingTestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RunPingTestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunPingTestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunPingTestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunPingTestRequest'
func (fpaiv *RunPingTestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RunPingTestRequest) bool {
	slice := fpaiv.RunPingTestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunPingTestRequest_FieldPathArrayOfValues allows storing slice of values for RunPingTestRequest fields according to their type
type RunPingTestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunPingTestRequest_FieldPath
}

func ParseRunPingTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RunPingTestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRunPingTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunPingTestRequest_FieldPathArrayOfValues), nil
}

func MustParseRunPingTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RunPingTestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRunPingTestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunPingTestRequest_FieldTerminalPathArrayOfValues struct {
	RunPingTestRequest_FieldTerminalPath
	values interface{}
}

var _ RunPingTestRequest_FieldPathArrayOfValues = (*RunPingTestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunPingTestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorSource:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorDestination:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorEchoTimeout:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorDontFragment:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorTtl:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequest_FieldPathSelectorTos:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsSourceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsDestinationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsEchoTimeoutArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsDontFragmentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsTtlArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequest_FieldTerminalPathArrayOfValues) AsTosArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunPingTestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunPingTestResponse_FieldPathSelector
	Get(source *RunPingTestResponse) []interface{}
	GetSingle(source *RunPingTestResponse) (interface{}, bool)
	ClearValue(item *RunPingTestResponse)

	// Those methods build corresponding RunPingTestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunPingTestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunPingTestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunPingTestResponse_FieldPathArrayItemValue
}

type RunPingTestResponse_FieldPathSelector int32

const (
	RunPingTestResponse_FieldPathSelectorFrom           RunPingTestResponse_FieldPathSelector = 0
	RunPingTestResponse_FieldPathSelectorSizeBytes      RunPingTestResponse_FieldPathSelector = 1
	RunPingTestResponse_FieldPathSelectorSequenceNumber RunPingTestResponse_FieldPathSelector = 2
	RunPingTestResponse_FieldPathSelectorTtl            RunPingTestResponse_FieldPathSelector = 3
	RunPingTestResponse_FieldPathSelectorRtt            RunPingTestResponse_FieldPathSelector = 4
	RunPingTestResponse_FieldPathSelectorError          RunPingTestResponse_FieldPathSelector = 5
	RunPingTestResponse_FieldPathSelectorSummary        RunPingTestResponse_FieldPathSelector = 6
)

func (s RunPingTestResponse_FieldPathSelector) String() string {
	switch s {
	case RunPingTestResponse_FieldPathSelectorFrom:
		return "from"
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		return "sequence_number"
	case RunPingTestResponse_FieldPathSelectorTtl:
		return "ttl"
	case RunPingTestResponse_FieldPathSelectorRtt:
		return "rtt"
	case RunPingTestResponse_FieldPathSelectorError:
		return "error"
	case RunPingTestResponse_FieldPathSelectorSummary:
		return "summary"
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", s))
	}
}

func BuildRunPingTestResponse_FieldPath(fp gotenobject.RawFieldPath) (RunPingTestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunPingTestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "from":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorFrom}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSizeBytes}, nil
		case "sequence_number", "sequenceNumber", "sequence-number":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSequenceNumber}, nil
		case "ttl":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorTtl}, nil
		case "rtt":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorRtt}, nil
		case "error":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorError}, nil
		case "summary":
			return &RunPingTestResponse_FieldTerminalPath{selector: RunPingTestResponse_FieldPathSelectorSummary}, nil
		}
	} else {
		switch fp[0] {
		case "summary":
			if subpath, err := BuildRunPingTestResponseSummaryStats_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunPingTestResponse_FieldSubPath{selector: RunPingTestResponse_FieldPathSelectorSummary, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunPingTestResponse", fp)
}

func ParseRunPingTestResponse_FieldPath(rawField string) (RunPingTestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunPingTestResponse_FieldPath(fp)
}

func MustParseRunPingTestResponse_FieldPath(rawField string) RunPingTestResponse_FieldPath {
	fp, err := ParseRunPingTestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunPingTestResponse_FieldTerminalPath struct {
	selector RunPingTestResponse_FieldPathSelector
}

var _ RunPingTestResponse_FieldPath = (*RunPingTestResponse_FieldTerminalPath)(nil)

func (fp *RunPingTestResponse_FieldTerminalPath) Selector() RunPingTestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunPingTestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunPingTestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunPingTestResponse
func (fp *RunPingTestResponse_FieldTerminalPath) Get(source *RunPingTestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunPingTestResponse_FieldPathSelectorFrom:
			values = append(values, source.From)
		case RunPingTestResponse_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case RunPingTestResponse_FieldPathSelectorSequenceNumber:
			values = append(values, source.SequenceNumber)
		case RunPingTestResponse_FieldPathSelectorTtl:
			values = append(values, source.Ttl)
		case RunPingTestResponse_FieldPathSelectorRtt:
			if source.Rtt != nil {
				values = append(values, source.Rtt)
			}
		case RunPingTestResponse_FieldPathSelectorError:
			values = append(values, source.Error)
		case RunPingTestResponse_FieldPathSelectorSummary:
			if source.Summary != nil {
				values = append(values, source.Summary)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunPingTestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunPingTestResponse))
}

// GetSingle returns value pointed by specific field of from source RunPingTestResponse
func (fp *RunPingTestResponse_FieldTerminalPath) GetSingle(source *RunPingTestResponse) (interface{}, bool) {
	switch fp.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		return source.GetFrom(), source != nil
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		return source.GetSequenceNumber(), source != nil
	case RunPingTestResponse_FieldPathSelectorTtl:
		return source.GetTtl(), source != nil
	case RunPingTestResponse_FieldPathSelectorRtt:
		res := source.GetRtt()
		return res, res != nil
	case RunPingTestResponse_FieldPathSelectorError:
		return source.GetError(), source != nil
	case RunPingTestResponse_FieldPathSelectorSummary:
		res := source.GetSummary()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
	}
}

func (fp *RunPingTestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunPingTestResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunPingTestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		return ""
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		return int32(0)
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		return int32(0)
	case RunPingTestResponse_FieldPathSelectorTtl:
		return int32(0)
	case RunPingTestResponse_FieldPathSelectorRtt:
		return (*duration.Duration)(nil)
	case RunPingTestResponse_FieldPathSelectorError:
		return ""
	case RunPingTestResponse_FieldPathSelectorSummary:
		return (*RunPingTestResponse_SummaryStats)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
	}
}

func (fp *RunPingTestResponse_FieldTerminalPath) ClearValue(item *RunPingTestResponse) {
	if item != nil {
		switch fp.selector {
		case RunPingTestResponse_FieldPathSelectorFrom:
			item.From = ""
		case RunPingTestResponse_FieldPathSelectorSizeBytes:
			item.SizeBytes = int32(0)
		case RunPingTestResponse_FieldPathSelectorSequenceNumber:
			item.SequenceNumber = int32(0)
		case RunPingTestResponse_FieldPathSelectorTtl:
			item.Ttl = int32(0)
		case RunPingTestResponse_FieldPathSelectorRtt:
			item.Rtt = nil
		case RunPingTestResponse_FieldPathSelectorError:
			item.Error = ""
		case RunPingTestResponse_FieldPathSelectorSummary:
			item.Summary = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
		}
	}
}

func (fp *RunPingTestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunPingTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunPingTestResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunPingTestResponse_FieldPathSelectorFrom ||
		fp.selector == RunPingTestResponse_FieldPathSelectorSizeBytes ||
		fp.selector == RunPingTestResponse_FieldPathSelectorSequenceNumber ||
		fp.selector == RunPingTestResponse_FieldPathSelectorTtl ||
		fp.selector == RunPingTestResponse_FieldPathSelectorRtt ||
		fp.selector == RunPingTestResponse_FieldPathSelectorError
}

func (fp *RunPingTestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithIValue(value interface{}) RunPingTestResponse_FieldPathValue {
	switch fp.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestResponse_FieldPathSelectorTtl:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestResponse_FieldPathSelectorRtt:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestResponse_FieldPathSelectorError:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestResponse_FieldPathSelectorSummary:
		return &RunPingTestResponse_FieldTerminalPathValue{RunPingTestResponse_FieldTerminalPath: *fp, value: value.(*RunPingTestResponse_SummaryStats)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
	}
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunPingTestResponse_FieldPathArrayOfValues {
	fpaov := &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestResponse_FieldPathSelectorTtl:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestResponse_FieldPathSelectorRtt:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestResponse_FieldPathSelectorError:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestResponse_FieldPathSelectorSummary:
		return &RunPingTestResponse_FieldTerminalPathArrayOfValues{RunPingTestResponse_FieldTerminalPath: *fp, values: values.([]*RunPingTestResponse_SummaryStats)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunPingTestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fp.selector))
	}
}

func (fp *RunPingTestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunPingTestResponse_FieldSubPath struct {
	selector RunPingTestResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunPingTestResponse_FieldPath = (*RunPingTestResponse_FieldSubPath)(nil)

func (fps *RunPingTestResponse_FieldSubPath) Selector() RunPingTestResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunPingTestResponse_FieldSubPath) AsSummarySubPath() (RunPingTestResponseSummaryStats_FieldPath, bool) {
	res, ok := fps.subPath.(RunPingTestResponseSummaryStats_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunPingTestResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunPingTestResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunPingTestResponse
func (fps *RunPingTestResponse_FieldSubPath) Get(source *RunPingTestResponse) (values []interface{}) {
	switch fps.selector {
	case RunPingTestResponse_FieldPathSelectorSummary:
		values = append(values, fps.subPath.GetRaw(source.GetSummary())...)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fps.selector))
	}
	return
}

func (fps *RunPingTestResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunPingTestResponse))
}

// GetSingle returns value of selected field from source RunPingTestResponse
func (fps *RunPingTestResponse_FieldSubPath) GetSingle(source *RunPingTestResponse) (interface{}, bool) {
	switch fps.selector {
	case RunPingTestResponse_FieldPathSelectorSummary:
		if source.GetSummary() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSummary())
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fps.selector))
	}
}

func (fps *RunPingTestResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunPingTestResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunPingTestResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunPingTestResponse_FieldSubPath) ClearValue(item *RunPingTestResponse) {
	if item != nil {
		switch fps.selector {
		case RunPingTestResponse_FieldPathSelectorSummary:
			fps.subPath.ClearValueRaw(item.Summary)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fps.selector))
		}
	}
}

func (fps *RunPingTestResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunPingTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunPingTestResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunPingTestResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunPingTestResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunPingTestResponse_FieldSubPath) WithIValue(value interface{}) RunPingTestResponse_FieldPathValue {
	return &RunPingTestResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunPingTestResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunPingTestResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunPingTestResponse_FieldPathArrayOfValues {
	return &RunPingTestResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunPingTestResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunPingTestResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunPingTestResponse_FieldPathArrayItemValue {
	return &RunPingTestResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunPingTestResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunPingTestResponse_FieldPathValue allows storing values for RunPingTestResponse fields according to their type
type RunPingTestResponse_FieldPathValue interface {
	RunPingTestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunPingTestResponse)
	CompareWith(*RunPingTestResponse) (cmp int, comparable bool)
}

func ParseRunPingTestResponse_FieldPathValue(pathStr, valueStr string) (RunPingTestResponse_FieldPathValue, error) {
	fp, err := ParseRunPingTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunPingTestResponse_FieldPathValue), nil
}

func MustParseRunPingTestResponse_FieldPathValue(pathStr, valueStr string) RunPingTestResponse_FieldPathValue {
	fpv, err := ParseRunPingTestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunPingTestResponse_FieldTerminalPathValue struct {
	RunPingTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunPingTestResponse_FieldPathValue = (*RunPingTestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunPingTestResponse' as interface{}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsFromValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsSizeBytesValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsSequenceNumberValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsTtlValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsErrorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestResponse_FieldTerminalPathValue) AsSummaryValue() (*RunPingTestResponse_SummaryStats, bool) {
	res, ok := fpv.value.(*RunPingTestResponse_SummaryStats)
	return res, ok
}

// SetTo stores value for selected field for object RunPingTestResponse
func (fpv *RunPingTestResponse_FieldTerminalPathValue) SetTo(target **RunPingTestResponse) {
	if *target == nil {
		*target = new(RunPingTestResponse)
	}
	switch fpv.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		(*target).From = fpv.value.(string)
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int32)
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		(*target).SequenceNumber = fpv.value.(int32)
	case RunPingTestResponse_FieldPathSelectorTtl:
		(*target).Ttl = fpv.value.(int32)
	case RunPingTestResponse_FieldPathSelectorRtt:
		(*target).Rtt = fpv.value.(*duration.Duration)
	case RunPingTestResponse_FieldPathSelectorError:
		(*target).Error = fpv.value.(string)
	case RunPingTestResponse_FieldPathSelectorSummary:
		(*target).Summary = fpv.value.(*RunPingTestResponse_SummaryStats)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunPingTestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunPingTestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunPingTestResponse_FieldTerminalPathValue' with the value under path in 'RunPingTestResponse'.
func (fpv *RunPingTestResponse_FieldTerminalPathValue) CompareWith(source *RunPingTestResponse) (int, bool) {
	switch fpv.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		leftValue := fpv.value.(string)
		rightValue := source.GetFrom()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSequenceNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorTtl:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTtl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorError:
		leftValue := fpv.value.(string)
		rightValue := source.GetError()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponse_FieldPathSelectorSummary:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunPingTestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunPingTestResponse))
}

type RunPingTestResponse_FieldSubPathValue struct {
	RunPingTestResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunPingTestResponse_FieldPathValue = (*RunPingTestResponse_FieldSubPathValue)(nil)

func (fpvs *RunPingTestResponse_FieldSubPathValue) AsSummaryPathValue() (RunPingTestResponseSummaryStats_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RunPingTestResponseSummaryStats_FieldPathValue)
	return res, ok
}

func (fpvs *RunPingTestResponse_FieldSubPathValue) SetTo(target **RunPingTestResponse) {
	if *target == nil {
		*target = new(RunPingTestResponse)
	}
	switch fpvs.Selector() {
	case RunPingTestResponse_FieldPathSelectorSummary:
		fpvs.subPathValue.(RunPingTestResponseSummaryStats_FieldPathValue).SetTo(&(*target).Summary)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunPingTestResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunPingTestResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunPingTestResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunPingTestResponse_FieldSubPathValue) CompareWith(source *RunPingTestResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunPingTestResponse_FieldPathSelectorSummary:
		return fpvs.subPathValue.(RunPingTestResponseSummaryStats_FieldPathValue).CompareWith(source.GetSummary())
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunPingTestResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunPingTestResponse))
}

// RunPingTestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RunPingTestResponse according to their type
// Present only for array (repeated) types.
type RunPingTestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunPingTestResponse_FieldPath
	ContainsValue(*RunPingTestResponse) bool
}

// ParseRunPingTestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunPingTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunPingTestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunPingTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunPingTestResponse_FieldPathArrayItemValue), nil
}

func MustParseRunPingTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunPingTestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunPingTestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunPingTestResponse_FieldTerminalPathArrayItemValue struct {
	RunPingTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunPingTestResponse_FieldPathArrayItemValue = (*RunPingTestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunPingTestResponse as interface{}
func (fpaiv *RunPingTestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunPingTestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunPingTestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunPingTestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunPingTestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunPingTestResponse'
func (fpaiv *RunPingTestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunPingTestResponse) bool {
	slice := fpaiv.RunPingTestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunPingTestResponse_FieldSubPathArrayItemValue struct {
	RunPingTestResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunPingTestResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunPingTestResponse_FieldSubPathArrayItemValue) AsSummaryPathItemValue() (RunPingTestResponseSummaryStats_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RunPingTestResponseSummaryStats_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunPingTestResponse'
func (fpaivs *RunPingTestResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunPingTestResponse) bool {
	switch fpaivs.Selector() {
	case RunPingTestResponse_FieldPathSelectorSummary:
		return fpaivs.subPathItemValue.(RunPingTestResponseSummaryStats_FieldPathArrayItemValue).ContainsValue(source.GetSummary())
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse: %d", fpaivs.Selector()))
	}
}

// RunPingTestResponse_FieldPathArrayOfValues allows storing slice of values for RunPingTestResponse fields according to their type
type RunPingTestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunPingTestResponse_FieldPath
}

func ParseRunPingTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunPingTestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunPingTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunPingTestResponse_FieldPathArrayOfValues), nil
}

func MustParseRunPingTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunPingTestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunPingTestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunPingTestResponse_FieldTerminalPathArrayOfValues struct {
	RunPingTestResponse_FieldTerminalPath
	values interface{}
}

var _ RunPingTestResponse_FieldPathArrayOfValues = (*RunPingTestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunPingTestResponse_FieldPathSelectorFrom:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorSequenceNumber:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorTtl:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorError:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestResponse_FieldPathSelectorSummary:
		for _, v := range fpaov.values.([]*RunPingTestResponse_SummaryStats) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsFromArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsSequenceNumberArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsTtlArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestResponse_FieldTerminalPathArrayOfValues) AsSummaryArrayOfValues() ([]*RunPingTestResponse_SummaryStats, bool) {
	res, ok := fpaov.values.([]*RunPingTestResponse_SummaryStats)
	return res, ok
}

type RunPingTestResponse_FieldSubPathArrayOfValues struct {
	RunPingTestResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunPingTestResponse_FieldPathArrayOfValues = (*RunPingTestResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunPingTestResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunPingTestResponse_FieldSubPathArrayOfValues) AsSummaryPathArrayOfValues() (RunPingTestResponseSummaryStats_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RunPingTestResponseSummaryStats_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunPingTestResponseSummaryStats_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunPingTestResponseSummaryStats_FieldPathSelector
	Get(source *RunPingTestResponse_SummaryStats) []interface{}
	GetSingle(source *RunPingTestResponse_SummaryStats) (interface{}, bool)
	ClearValue(item *RunPingTestResponse_SummaryStats)

	// Those methods build corresponding RunPingTestResponseSummaryStats_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunPingTestResponseSummaryStats_FieldPathValue
	WithIArrayOfValues(values interface{}) RunPingTestResponseSummaryStats_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunPingTestResponseSummaryStats_FieldPathArrayItemValue
}

type RunPingTestResponseSummaryStats_FieldPathSelector int32

const (
	RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt             RunPingTestResponseSummaryStats_FieldPathSelector = 0
	RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt             RunPingTestResponseSummaryStats_FieldPathSelector = 1
	RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt             RunPingTestResponseSummaryStats_FieldPathSelector = 2
	RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt          RunPingTestResponseSummaryStats_FieldPathSelector = 3
	RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter RunPingTestResponseSummaryStats_FieldPathSelector = 4
	RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter    RunPingTestResponseSummaryStats_FieldPathSelector = 5
	RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio          RunPingTestResponseSummaryStats_FieldPathSelector = 6
)

func (s RunPingTestResponseSummaryStats_FieldPathSelector) String() string {
	switch s {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		return "min_rtt"
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		return "avg_rtt"
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		return "max_rtt"
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		return "stddev_rtt"
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		return "transmitted_counter"
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		return "received_counter"
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		return "loss_ratio"
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", s))
	}
}

func BuildRunPingTestResponseSummaryStats_FieldPath(fp gotenobject.RawFieldPath) (RunPingTestResponseSummaryStats_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunPingTestResponse_SummaryStats")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "min_rtt", "minRtt", "min-rtt":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt}, nil
		case "avg_rtt", "avgRtt", "avg-rtt":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt}, nil
		case "max_rtt", "maxRtt", "max-rtt":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt}, nil
		case "stddev_rtt", "stddevRtt", "stddev-rtt":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt}, nil
		case "transmitted_counter", "transmittedCounter", "transmitted-counter":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter}, nil
		case "received_counter", "receivedCounter", "received-counter":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter}, nil
		case "loss_ratio", "lossRatio", "loss-ratio":
			return &RunPingTestResponseSummaryStats_FieldTerminalPath{selector: RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunPingTestResponse_SummaryStats", fp)
}

func ParseRunPingTestResponseSummaryStats_FieldPath(rawField string) (RunPingTestResponseSummaryStats_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunPingTestResponseSummaryStats_FieldPath(fp)
}

func MustParseRunPingTestResponseSummaryStats_FieldPath(rawField string) RunPingTestResponseSummaryStats_FieldPath {
	fp, err := ParseRunPingTestResponseSummaryStats_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunPingTestResponseSummaryStats_FieldTerminalPath struct {
	selector RunPingTestResponseSummaryStats_FieldPathSelector
}

var _ RunPingTestResponseSummaryStats_FieldPath = (*RunPingTestResponseSummaryStats_FieldTerminalPath)(nil)

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) Selector() RunPingTestResponseSummaryStats_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunPingTestResponse_SummaryStats
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) Get(source *RunPingTestResponse_SummaryStats) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
			if source.MinRtt != nil {
				values = append(values, source.MinRtt)
			}
		case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
			if source.AvgRtt != nil {
				values = append(values, source.AvgRtt)
			}
		case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
			if source.MaxRtt != nil {
				values = append(values, source.MaxRtt)
			}
		case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
			if source.StddevRtt != nil {
				values = append(values, source.StddevRtt)
			}
		case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
			values = append(values, source.TransmittedCounter)
		case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
			values = append(values, source.ReceivedCounter)
		case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
			values = append(values, source.LossRatio)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
		}
	}
	return
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunPingTestResponse_SummaryStats))
}

// GetSingle returns value pointed by specific field of from source RunPingTestResponse_SummaryStats
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) GetSingle(source *RunPingTestResponse_SummaryStats) (interface{}, bool) {
	switch fp.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		res := source.GetMinRtt()
		return res, res != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		res := source.GetAvgRtt()
		return res, res != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		res := source.GetMaxRtt()
		return res, res != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		res := source.GetStddevRtt()
		return res, res != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		return source.GetTransmittedCounter(), source != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		return source.GetReceivedCounter(), source != nil
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		return source.GetLossRatio(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
	}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunPingTestResponse_SummaryStats))
}

// GetDefault returns a default value of the field type
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		return (*duration.Duration)(nil)
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		return (*duration.Duration)(nil)
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		return (*duration.Duration)(nil)
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		return (*duration.Duration)(nil)
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		return int32(0)
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		return int32(0)
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
	}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) ClearValue(item *RunPingTestResponse_SummaryStats) {
	if item != nil {
		switch fp.selector {
		case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
			item.MinRtt = nil
		case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
			item.AvgRtt = nil
		case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
			item.MaxRtt = nil
		case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
			item.StddevRtt = nil
		case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
			item.TransmittedCounter = int32(0)
		case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
			item.ReceivedCounter = int32(0)
		case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
			item.LossRatio = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
		}
	}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunPingTestResponse_SummaryStats))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter ||
		fp.selector == RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithIValue(value interface{}) RunPingTestResponseSummaryStats_FieldPathValue {
	switch fp.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathValue{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
	}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunPingTestResponseSummaryStats_FieldPathArrayOfValues {
	fpaov := &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		return &RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues{RunPingTestResponseSummaryStats_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunPingTestResponseSummaryStats_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fp.selector))
	}
}

func (fp *RunPingTestResponseSummaryStats_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunPingTestResponseSummaryStats_FieldPathValue allows storing values for SummaryStats fields according to their type
type RunPingTestResponseSummaryStats_FieldPathValue interface {
	RunPingTestResponseSummaryStats_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunPingTestResponse_SummaryStats)
	CompareWith(*RunPingTestResponse_SummaryStats) (cmp int, comparable bool)
}

func ParseRunPingTestResponseSummaryStats_FieldPathValue(pathStr, valueStr string) (RunPingTestResponseSummaryStats_FieldPathValue, error) {
	fp, err := ParseRunPingTestResponseSummaryStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SummaryStats field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunPingTestResponseSummaryStats_FieldPathValue), nil
}

func MustParseRunPingTestResponseSummaryStats_FieldPathValue(pathStr, valueStr string) RunPingTestResponseSummaryStats_FieldPathValue {
	fpv, err := ParseRunPingTestResponseSummaryStats_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunPingTestResponseSummaryStats_FieldTerminalPathValue struct {
	RunPingTestResponseSummaryStats_FieldTerminalPath
	value interface{}
}

var _ RunPingTestResponseSummaryStats_FieldPathValue = (*RunPingTestResponseSummaryStats_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SummaryStats' as interface{}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsMinRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsAvgRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsMaxRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsStddevRttValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsTransmittedCounterValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsReceivedCounterValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) AsLossRatioValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object SummaryStats
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) SetTo(target **RunPingTestResponse_SummaryStats) {
	if *target == nil {
		*target = new(RunPingTestResponse_SummaryStats)
	}
	switch fpv.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		(*target).MinRtt = fpv.value.(*duration.Duration)
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		(*target).AvgRtt = fpv.value.(*duration.Duration)
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		(*target).MaxRtt = fpv.value.(*duration.Duration)
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		(*target).StddevRtt = fpv.value.(*duration.Duration)
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		(*target).TransmittedCounter = fpv.value.(int32)
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		(*target).ReceivedCounter = fpv.value.(int32)
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		(*target).LossRatio = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fpv.selector))
	}
}

func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunPingTestResponse_SummaryStats)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunPingTestResponseSummaryStats_FieldTerminalPathValue' with the value under path in 'RunPingTestResponse_SummaryStats'.
func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) CompareWith(source *RunPingTestResponse_SummaryStats) (int, bool) {
	switch fpv.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetMinRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetAvgRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetMaxRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetStddevRtt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTransmittedCounter()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		leftValue := fpv.value.(int32)
		rightValue := source.GetReceivedCounter()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		leftValue := fpv.value.(float64)
		rightValue := source.GetLossRatio()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestResponse_SummaryStats: %d", fpv.selector))
	}
}

func (fpv *RunPingTestResponseSummaryStats_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunPingTestResponse_SummaryStats))
}

// RunPingTestResponseSummaryStats_FieldPathArrayItemValue allows storing single item in Path-specific values for SummaryStats according to their type
// Present only for array (repeated) types.
type RunPingTestResponseSummaryStats_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunPingTestResponseSummaryStats_FieldPath
	ContainsValue(*RunPingTestResponse_SummaryStats) bool
}

// ParseRunPingTestResponseSummaryStats_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunPingTestResponseSummaryStats_FieldPathArrayItemValue(pathStr, valueStr string) (RunPingTestResponseSummaryStats_FieldPathArrayItemValue, error) {
	fp, err := ParseRunPingTestResponseSummaryStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SummaryStats field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunPingTestResponseSummaryStats_FieldPathArrayItemValue), nil
}

func MustParseRunPingTestResponseSummaryStats_FieldPathArrayItemValue(pathStr, valueStr string) RunPingTestResponseSummaryStats_FieldPathArrayItemValue {
	fpaiv, err := ParseRunPingTestResponseSummaryStats_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue struct {
	RunPingTestResponseSummaryStats_FieldTerminalPath
	value interface{}
}

var _ RunPingTestResponseSummaryStats_FieldPathArrayItemValue = (*RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunPingTestResponse_SummaryStats as interface{}
func (fpaiv *RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue) GetSingle(source *RunPingTestResponse_SummaryStats) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunPingTestResponse_SummaryStats))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SummaryStats'
func (fpaiv *RunPingTestResponseSummaryStats_FieldTerminalPathArrayItemValue) ContainsValue(source *RunPingTestResponse_SummaryStats) bool {
	slice := fpaiv.RunPingTestResponseSummaryStats_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunPingTestResponseSummaryStats_FieldPathArrayOfValues allows storing slice of values for SummaryStats fields according to their type
type RunPingTestResponseSummaryStats_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunPingTestResponseSummaryStats_FieldPath
}

func ParseRunPingTestResponseSummaryStats_FieldPathArrayOfValues(pathStr, valuesStr string) (RunPingTestResponseSummaryStats_FieldPathArrayOfValues, error) {
	fp, err := ParseRunPingTestResponseSummaryStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SummaryStats field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunPingTestResponseSummaryStats_FieldPathArrayOfValues), nil
}

func MustParseRunPingTestResponseSummaryStats_FieldPathArrayOfValues(pathStr, valuesStr string) RunPingTestResponseSummaryStats_FieldPathArrayOfValues {
	fpaov, err := ParseRunPingTestResponseSummaryStats_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues struct {
	RunPingTestResponseSummaryStats_FieldTerminalPath
	values interface{}
}

var _ RunPingTestResponseSummaryStats_FieldPathArrayOfValues = (*RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunPingTestResponseSummaryStats_FieldPathSelectorMinRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorAvgRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorMaxRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorStddevRtt:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorTransmittedCounter:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorReceivedCounter:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestResponseSummaryStats_FieldPathSelectorLossRatio:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsMinRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsAvgRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsMaxRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsStddevRttArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsTransmittedCounterArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsReceivedCounterArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestResponseSummaryStats_FieldTerminalPathArrayOfValues) AsLossRatioArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunPingTestRequestToProbe_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunPingTestRequestToProbe_FieldPathSelector
	Get(source *RunPingTestRequestToProbe) []interface{}
	GetSingle(source *RunPingTestRequestToProbe) (interface{}, bool)
	ClearValue(item *RunPingTestRequestToProbe)

	// Those methods build corresponding RunPingTestRequestToProbe_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunPingTestRequestToProbe_FieldPathValue
	WithIArrayOfValues(values interface{}) RunPingTestRequestToProbe_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunPingTestRequestToProbe_FieldPathArrayItemValue
}

type RunPingTestRequestToProbe_FieldPathSelector int32

const (
	RunPingTestRequestToProbe_FieldPathSelectorSource       RunPingTestRequestToProbe_FieldPathSelector = 0
	RunPingTestRequestToProbe_FieldPathSelectorDestination  RunPingTestRequestToProbe_FieldPathSelector = 1
	RunPingTestRequestToProbe_FieldPathSelectorSizeBytes    RunPingTestRequestToProbe_FieldPathSelector = 2
	RunPingTestRequestToProbe_FieldPathSelectorCount        RunPingTestRequestToProbe_FieldPathSelector = 3
	RunPingTestRequestToProbe_FieldPathSelectorInterval     RunPingTestRequestToProbe_FieldPathSelector = 4
	RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout  RunPingTestRequestToProbe_FieldPathSelector = 5
	RunPingTestRequestToProbe_FieldPathSelectorDontFragment RunPingTestRequestToProbe_FieldPathSelector = 6
	RunPingTestRequestToProbe_FieldPathSelectorTtl          RunPingTestRequestToProbe_FieldPathSelector = 7
	RunPingTestRequestToProbe_FieldPathSelectorTos          RunPingTestRequestToProbe_FieldPathSelector = 8
)

func (s RunPingTestRequestToProbe_FieldPathSelector) String() string {
	switch s {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		return "source"
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		return "destination"
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		return "count"
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		return "interval"
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		return "echo_timeout"
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		return "dont_fragment"
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		return "ttl"
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		return "tos"
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", s))
	}
}

func BuildRunPingTestRequestToProbe_FieldPath(fp gotenobject.RawFieldPath) (RunPingTestRequestToProbe_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunPingTestRequestToProbe")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "source":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorSource}, nil
		case "destination":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorDestination}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorSizeBytes}, nil
		case "count":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorCount}, nil
		case "interval":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorInterval}, nil
		case "echo_timeout", "echoTimeout", "echo-timeout":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout}, nil
		case "dont_fragment", "dontFragment", "dont-fragment":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorDontFragment}, nil
		case "ttl":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorTtl}, nil
		case "tos":
			return &RunPingTestRequestToProbe_FieldTerminalPath{selector: RunPingTestRequestToProbe_FieldPathSelectorTos}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunPingTestRequestToProbe", fp)
}

func ParseRunPingTestRequestToProbe_FieldPath(rawField string) (RunPingTestRequestToProbe_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunPingTestRequestToProbe_FieldPath(fp)
}

func MustParseRunPingTestRequestToProbe_FieldPath(rawField string) RunPingTestRequestToProbe_FieldPath {
	fp, err := ParseRunPingTestRequestToProbe_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunPingTestRequestToProbe_FieldTerminalPath struct {
	selector RunPingTestRequestToProbe_FieldPathSelector
}

var _ RunPingTestRequestToProbe_FieldPath = (*RunPingTestRequestToProbe_FieldTerminalPath)(nil)

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) Selector() RunPingTestRequestToProbe_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunPingTestRequestToProbe
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) Get(source *RunPingTestRequestToProbe) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunPingTestRequestToProbe_FieldPathSelectorSource:
			values = append(values, source.Source)
		case RunPingTestRequestToProbe_FieldPathSelectorDestination:
			values = append(values, source.Destination)
		case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case RunPingTestRequestToProbe_FieldPathSelectorCount:
			values = append(values, source.Count)
		case RunPingTestRequestToProbe_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
			if source.EchoTimeout != nil {
				values = append(values, source.EchoTimeout)
			}
		case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
			values = append(values, source.DontFragment)
		case RunPingTestRequestToProbe_FieldPathSelectorTtl:
			values = append(values, source.Ttl)
		case RunPingTestRequestToProbe_FieldPathSelectorTos:
			values = append(values, source.Tos)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
		}
	}
	return
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunPingTestRequestToProbe))
}

// GetSingle returns value pointed by specific field of from source RunPingTestRequestToProbe
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) GetSingle(source *RunPingTestRequestToProbe) (interface{}, bool) {
	switch fp.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		return source.GetSource(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		return source.GetDestination(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		return source.GetCount(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		res := source.GetEchoTimeout()
		return res, res != nil
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		return source.GetDontFragment(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		return source.GetTtl(), source != nil
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		return source.GetTos(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunPingTestRequestToProbe))
}

// GetDefault returns a default value of the field type
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		return ""
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		return ""
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		return int32(0)
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		return int32(0)
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		return (*duration.Duration)(nil)
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		return (*duration.Duration)(nil)
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		return false
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		return int32(0)
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) ClearValue(item *RunPingTestRequestToProbe) {
	if item != nil {
		switch fp.selector {
		case RunPingTestRequestToProbe_FieldPathSelectorSource:
			item.Source = ""
		case RunPingTestRequestToProbe_FieldPathSelectorDestination:
			item.Destination = ""
		case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
			item.SizeBytes = int32(0)
		case RunPingTestRequestToProbe_FieldPathSelectorCount:
			item.Count = int32(0)
		case RunPingTestRequestToProbe_FieldPathSelectorInterval:
			item.Interval = nil
		case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
			item.EchoTimeout = nil
		case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
			item.DontFragment = false
		case RunPingTestRequestToProbe_FieldPathSelectorTtl:
			item.Ttl = int32(0)
		case RunPingTestRequestToProbe_FieldPathSelectorTos:
			item.Tos = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
		}
	}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunPingTestRequestToProbe))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunPingTestRequestToProbe_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunPingTestRequestToProbe_FieldPathSelectorSource ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorDestination ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorSizeBytes ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorCount ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorInterval ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorDontFragment ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorTtl ||
		fp.selector == RunPingTestRequestToProbe_FieldPathSelectorTos
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithIValue(value interface{}) RunPingTestRequestToProbe_FieldPathValue {
	switch fp.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(string)}
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(bool)}
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		return &RunPingTestRequestToProbe_FieldTerminalPathValue{RunPingTestRequestToProbe_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunPingTestRequestToProbe_FieldPathArrayOfValues {
	fpaov := &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]string)}
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]bool)}
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		return &RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues{RunPingTestRequestToProbe_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunPingTestRequestToProbe_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fp.selector))
	}
}

func (fp *RunPingTestRequestToProbe_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunPingTestRequestToProbe_FieldPathValue allows storing values for RunPingTestRequestToProbe fields according to their type
type RunPingTestRequestToProbe_FieldPathValue interface {
	RunPingTestRequestToProbe_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunPingTestRequestToProbe)
	CompareWith(*RunPingTestRequestToProbe) (cmp int, comparable bool)
}

func ParseRunPingTestRequestToProbe_FieldPathValue(pathStr, valueStr string) (RunPingTestRequestToProbe_FieldPathValue, error) {
	fp, err := ParseRunPingTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequestToProbe field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunPingTestRequestToProbe_FieldPathValue), nil
}

func MustParseRunPingTestRequestToProbe_FieldPathValue(pathStr, valueStr string) RunPingTestRequestToProbe_FieldPathValue {
	fpv, err := ParseRunPingTestRequestToProbe_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunPingTestRequestToProbe_FieldTerminalPathValue struct {
	RunPingTestRequestToProbe_FieldTerminalPath
	value interface{}
}

var _ RunPingTestRequestToProbe_FieldPathValue = (*RunPingTestRequestToProbe_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunPingTestRequestToProbe' as interface{}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsSourceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsDestinationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsSizeBytesValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsEchoTimeoutValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsDontFragmentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsTtlValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) AsTosValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object RunPingTestRequestToProbe
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) SetTo(target **RunPingTestRequestToProbe) {
	if *target == nil {
		*target = new(RunPingTestRequestToProbe)
	}
	switch fpv.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		(*target).Source = fpv.value.(string)
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		(*target).Destination = fpv.value.(string)
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int32)
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		(*target).Count = fpv.value.(int32)
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*duration.Duration)
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		(*target).EchoTimeout = fpv.value.(*duration.Duration)
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		(*target).DontFragment = fpv.value.(bool)
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		(*target).Ttl = fpv.value.(int32)
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		(*target).Tos = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fpv.selector))
	}
}

func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunPingTestRequestToProbe)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunPingTestRequestToProbe_FieldTerminalPathValue' with the value under path in 'RunPingTestRequestToProbe'.
func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) CompareWith(source *RunPingTestRequestToProbe) (int, bool) {
	switch fpv.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		leftValue := fpv.value.(string)
		rightValue := source.GetSource()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		leftValue := fpv.value.(string)
		rightValue := source.GetDestination()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetEchoTimeout()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDontFragment()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTtl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTos()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunPingTestRequestToProbe: %d", fpv.selector))
	}
}

func (fpv *RunPingTestRequestToProbe_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunPingTestRequestToProbe))
}

// RunPingTestRequestToProbe_FieldPathArrayItemValue allows storing single item in Path-specific values for RunPingTestRequestToProbe according to their type
// Present only for array (repeated) types.
type RunPingTestRequestToProbe_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunPingTestRequestToProbe_FieldPath
	ContainsValue(*RunPingTestRequestToProbe) bool
}

// ParseRunPingTestRequestToProbe_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunPingTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr string) (RunPingTestRequestToProbe_FieldPathArrayItemValue, error) {
	fp, err := ParseRunPingTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequestToProbe field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunPingTestRequestToProbe_FieldPathArrayItemValue), nil
}

func MustParseRunPingTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr string) RunPingTestRequestToProbe_FieldPathArrayItemValue {
	fpaiv, err := ParseRunPingTestRequestToProbe_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue struct {
	RunPingTestRequestToProbe_FieldTerminalPath
	value interface{}
}

var _ RunPingTestRequestToProbe_FieldPathArrayItemValue = (*RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunPingTestRequestToProbe as interface{}
func (fpaiv *RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue) GetSingle(source *RunPingTestRequestToProbe) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunPingTestRequestToProbe))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunPingTestRequestToProbe'
func (fpaiv *RunPingTestRequestToProbe_FieldTerminalPathArrayItemValue) ContainsValue(source *RunPingTestRequestToProbe) bool {
	slice := fpaiv.RunPingTestRequestToProbe_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunPingTestRequestToProbe_FieldPathArrayOfValues allows storing slice of values for RunPingTestRequestToProbe fields according to their type
type RunPingTestRequestToProbe_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunPingTestRequestToProbe_FieldPath
}

func ParseRunPingTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr string) (RunPingTestRequestToProbe_FieldPathArrayOfValues, error) {
	fp, err := ParseRunPingTestRequestToProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunPingTestRequestToProbe field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunPingTestRequestToProbe_FieldPathArrayOfValues), nil
}

func MustParseRunPingTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr string) RunPingTestRequestToProbe_FieldPathArrayOfValues {
	fpaov, err := ParseRunPingTestRequestToProbe_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues struct {
	RunPingTestRequestToProbe_FieldTerminalPath
	values interface{}
}

var _ RunPingTestRequestToProbe_FieldPathArrayOfValues = (*RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunPingTestRequestToProbe_FieldPathSelectorSource:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorDestination:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorEchoTimeout:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorDontFragment:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorTtl:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunPingTestRequestToProbe_FieldPathSelectorTos:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsSourceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsDestinationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsEchoTimeoutArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsDontFragmentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsTtlArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunPingTestRequestToProbe_FieldTerminalPathArrayOfValues) AsTosArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
