// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_group_service.proto
// DO NOT EDIT!!!

package probe_group_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbeGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbeGroupRequest_FieldPathSelector
	Get(source *GetProbeGroupRequest) []interface{}
	GetSingle(source *GetProbeGroupRequest) (interface{}, bool)
	ClearValue(item *GetProbeGroupRequest)

	// Those methods build corresponding GetProbeGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbeGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbeGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbeGroupRequest_FieldPathArrayItemValue
}

type GetProbeGroupRequest_FieldPathSelector int32

const (
	GetProbeGroupRequest_FieldPathSelectorName      GetProbeGroupRequest_FieldPathSelector = 0
	GetProbeGroupRequest_FieldPathSelectorFieldMask GetProbeGroupRequest_FieldPathSelector = 1
	GetProbeGroupRequest_FieldPathSelectorView      GetProbeGroupRequest_FieldPathSelector = 2
)

func (s GetProbeGroupRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbeGroupRequest_FieldPathSelectorName:
		return "name"
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbeGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", s))
	}
}

func BuildGetProbeGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbeGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbeGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbeGroupRequest", fp)
}

func ParseGetProbeGroupRequest_FieldPath(rawField string) (GetProbeGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbeGroupRequest_FieldPath(fp)
}

func MustParseGetProbeGroupRequest_FieldPath(rawField string) GetProbeGroupRequest_FieldPath {
	fp, err := ParseGetProbeGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbeGroupRequest_FieldTerminalPath struct {
	selector GetProbeGroupRequest_FieldPathSelector
}

var _ GetProbeGroupRequest_FieldPath = (*GetProbeGroupRequest_FieldTerminalPath)(nil)

func (fp *GetProbeGroupRequest_FieldTerminalPath) Selector() GetProbeGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbeGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbeGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbeGroupRequest
func (fp *GetProbeGroupRequest_FieldTerminalPath) Get(source *GetProbeGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbeGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbeGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbeGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbeGroupRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbeGroupRequest
func (fp *GetProbeGroupRequest_FieldTerminalPath) GetSingle(source *GetProbeGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbeGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbeGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		return (*probe_group.Reference)(nil)
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case GetProbeGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) ClearValue(item *GetProbeGroupRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbeGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbeGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbeGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbeGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbeGroupRequest_FieldPathSelectorName ||
		fp.selector == GetProbeGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbeGroupRequest_FieldPathSelectorView
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbeGroupRequest_FieldPathValue {
	switch fp.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		return &GetProbeGroupRequest_FieldTerminalPathValue{GetProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		return &GetProbeGroupRequest_FieldTerminalPathValue{GetProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case GetProbeGroupRequest_FieldPathSelectorView:
		return &GetProbeGroupRequest_FieldTerminalPathValue{GetProbeGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbeGroupRequest_FieldPathArrayOfValues {
	fpaov := &GetProbeGroupRequest_FieldTerminalPathArrayOfValues{GetProbeGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		return &GetProbeGroupRequest_FieldTerminalPathArrayOfValues{GetProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Reference)}
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		return &GetProbeGroupRequest_FieldTerminalPathArrayOfValues{GetProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case GetProbeGroupRequest_FieldPathSelectorView:
		return &GetProbeGroupRequest_FieldTerminalPathArrayOfValues{GetProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbeGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *GetProbeGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbeGroupRequest_FieldPathValue allows storing values for GetProbeGroupRequest fields according to their type
type GetProbeGroupRequest_FieldPathValue interface {
	GetProbeGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbeGroupRequest)
	CompareWith(*GetProbeGroupRequest) (cmp int, comparable bool)
}

func ParseGetProbeGroupRequest_FieldPathValue(pathStr, valueStr string) (GetProbeGroupRequest_FieldPathValue, error) {
	fp, err := ParseGetProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbeGroupRequest_FieldPathValue), nil
}

func MustParseGetProbeGroupRequest_FieldPathValue(pathStr, valueStr string) GetProbeGroupRequest_FieldPathValue {
	fpv, err := ParseGetProbeGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbeGroupRequest_FieldTerminalPathValue struct {
	GetProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbeGroupRequest_FieldPathValue = (*GetProbeGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbeGroupRequest' as interface{}
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) AsNameValue() (*probe_group.Reference, bool) {
	res, ok := fpv.value.(*probe_group.Reference)
	return res, ok
}
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbeGroupRequest
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) SetTo(target **GetProbeGroupRequest) {
	if *target == nil {
		*target = new(GetProbeGroupRequest)
	}
	switch fpv.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe_group.Reference)
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case GetProbeGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbeGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbeGroupRequest_FieldTerminalPathValue' with the value under path in 'GetProbeGroupRequest'.
func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) CompareWith(source *GetProbeGroupRequest) (int, bool) {
	switch fpv.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbeGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbeGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbeGroupRequest))
}

// GetProbeGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbeGroupRequest according to their type
// Present only for array (repeated) types.
type GetProbeGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbeGroupRequest_FieldPath
	ContainsValue(*GetProbeGroupRequest) bool
}

// ParseGetProbeGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbeGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbeGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbeGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbeGroupRequest_FieldTerminalPathArrayItemValue struct {
	GetProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbeGroupRequest_FieldPathArrayItemValue = (*GetProbeGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbeGroupRequest as interface{}
func (fpaiv *GetProbeGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbeGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbeGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbeGroupRequest'
func (fpaiv *GetProbeGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbeGroupRequest) bool {
	slice := fpaiv.GetProbeGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbeGroupRequest_FieldPathArrayOfValues allows storing slice of values for GetProbeGroupRequest fields according to their type
type GetProbeGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbeGroupRequest_FieldPath
}

func ParseGetProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbeGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbeGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbeGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbeGroupRequest_FieldTerminalPathArrayOfValues struct {
	GetProbeGroupRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbeGroupRequest_FieldPathArrayOfValues = (*GetProbeGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbeGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbeGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe_group.Reference) {
			values = append(values, v)
		}
	case GetProbeGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case GetProbeGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbeGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([]*probe_group.Reference)
	return res, ok
}
func (fpaov *GetProbeGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *GetProbeGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbeGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbeGroupsRequest_FieldPathSelector
	Get(source *BatchGetProbeGroupsRequest) []interface{}
	GetSingle(source *BatchGetProbeGroupsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbeGroupsRequest)

	// Those methods build corresponding BatchGetProbeGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbeGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbeGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbeGroupsRequest_FieldPathArrayItemValue
}

type BatchGetProbeGroupsRequest_FieldPathSelector int32

const (
	BatchGetProbeGroupsRequest_FieldPathSelectorNames     BatchGetProbeGroupsRequest_FieldPathSelector = 0
	BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask BatchGetProbeGroupsRequest_FieldPathSelector = 1
	BatchGetProbeGroupsRequest_FieldPathSelectorView      BatchGetProbeGroupsRequest_FieldPathSelector = 2
)

func (s BatchGetProbeGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", s))
	}
}

func BuildBatchGetProbeGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbeGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbeGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbeGroupsRequest", fp)
}

func ParseBatchGetProbeGroupsRequest_FieldPath(rawField string) (BatchGetProbeGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbeGroupsRequest_FieldPath(fp)
}

func MustParseBatchGetProbeGroupsRequest_FieldPath(rawField string) BatchGetProbeGroupsRequest_FieldPath {
	fp, err := ParseBatchGetProbeGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbeGroupsRequest_FieldTerminalPath struct {
	selector BatchGetProbeGroupsRequest_FieldPathSelector
}

var _ BatchGetProbeGroupsRequest_FieldPath = (*BatchGetProbeGroupsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) Selector() BatchGetProbeGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbeGroupsRequest
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) Get(source *BatchGetProbeGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbeGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbeGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbeGroupsRequest
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbeGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbeGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return ([]*probe_group.Reference)(nil)
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbeGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbeGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbeGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbeGroupsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbeGroupsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbeGroupsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathValue{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, value: value.([]*probe_group.Reference)}
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathValue{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathValue{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([][]*probe_group.Reference)}
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbeGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return &BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue{BatchGetProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbeGroupsRequest_FieldPathValue allows storing values for BatchGetProbeGroupsRequest fields according to their type
type BatchGetProbeGroupsRequest_FieldPathValue interface {
	BatchGetProbeGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbeGroupsRequest)
	CompareWith(*BatchGetProbeGroupsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbeGroupsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbeGroupsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbeGroupsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbeGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbeGroupsRequest_FieldTerminalPathValue struct {
	BatchGetProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbeGroupsRequest_FieldPathValue = (*BatchGetProbeGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbeGroupsRequest' as interface{}
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probe_group.Reference, bool) {
	res, ok := fpv.value.([]*probe_group.Reference)
	return res, ok
}
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbeGroupsRequest
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbeGroupsRequest) {
	if *target == nil {
		*target = new(BatchGetProbeGroupsRequest)
	}
	switch fpv.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probe_group.Reference)
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbeGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbeGroupsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbeGroupsRequest'.
func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbeGroupsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbeGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbeGroupsRequest))
}

// BatchGetProbeGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbeGroupsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbeGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbeGroupsRequest_FieldPath
	ContainsValue(*BatchGetProbeGroupsRequest) bool
}

// ParseBatchGetProbeGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbeGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbeGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbeGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbeGroupsRequest_FieldPathArrayItemValue = (*BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbeGroupsRequest as interface{}
func (fpaiv *BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probe_group.Reference, bool) {
	res, ok := fpaiv.value.(*probe_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbeGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbeGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbeGroupsRequest'
func (fpaiv *BatchGetProbeGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbeGroupsRequest) bool {
	slice := fpaiv.BatchGetProbeGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbeGroupsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbeGroupsRequest fields according to their type
type BatchGetProbeGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbeGroupsRequest_FieldPath
}

func ParseBatchGetProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbeGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbeGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbeGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbeGroupsRequest_FieldPathArrayOfValues = (*BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probe_group.Reference) {
			values = append(values, v)
		}
	case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbeGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([][]*probe_group.Reference)
	return res, ok
}
func (fpaov *BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbeGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbeGroupsResponse_FieldPathSelector
	Get(source *BatchGetProbeGroupsResponse) []interface{}
	GetSingle(source *BatchGetProbeGroupsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbeGroupsResponse)

	// Those methods build corresponding BatchGetProbeGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbeGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathArrayItemValue
}

type BatchGetProbeGroupsResponse_FieldPathSelector int32

const (
	BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups BatchGetProbeGroupsResponse_FieldPathSelector = 0
	BatchGetProbeGroupsResponse_FieldPathSelectorMissing     BatchGetProbeGroupsResponse_FieldPathSelector = 1
)

func (s BatchGetProbeGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return "probe_groups"
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", s))
	}
}

func BuildBatchGetProbeGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbeGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbeGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			return &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups}, nil
		case "missing":
			return &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbeGroupsResponse_FieldSubPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbeGroupsResponse", fp)
}

func ParseBatchGetProbeGroupsResponse_FieldPath(rawField string) (BatchGetProbeGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbeGroupsResponse_FieldPath(fp)
}

func MustParseBatchGetProbeGroupsResponse_FieldPath(rawField string) BatchGetProbeGroupsResponse_FieldPath {
	fp, err := ParseBatchGetProbeGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbeGroupsResponse_FieldTerminalPath struct {
	selector BatchGetProbeGroupsResponse_FieldPathSelector
}

var _ BatchGetProbeGroupsResponse_FieldPath = (*BatchGetProbeGroupsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) Selector() BatchGetProbeGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbeGroupsResponse
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) Get(source *BatchGetProbeGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, value := range source.GetProbeGroups() {
				values = append(values, value)
			}
		case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbeGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbeGroupsResponse
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbeGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		res := source.GetProbeGroups()
		return res, res != nil
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return ([]*probe_group.ProbeGroup)(nil)
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return ([]*probe_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbeGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
			item.ProbeGroups = nil
		case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbeGroupsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathValue{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probe_group.ProbeGroup)}
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathValue{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probe_group.ProbeGroup)}
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return &BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue{BatchGetProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbeGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbeGroupsResponse_FieldSubPath struct {
	selector BatchGetProbeGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbeGroupsResponse_FieldPath = (*BatchGetProbeGroupsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) Selector() BatchGetProbeGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) AsProbeGroupsSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbeGroupsResponse
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) Get(source *BatchGetProbeGroupsResponse) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsProbeGroupsSubPath(); ok {
		for _, item := range source.GetProbeGroups() {
			values = append(values, asProbeGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbeGroupsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbeGroupsResponse
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) GetSingle(source *BatchGetProbeGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		if len(source.GetProbeGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) ClearValue(item *BatchGetProbeGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, subItem := range item.ProbeGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbeGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProbeGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathValue {
	return &BatchGetProbeGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbeGroupsResponse_FieldPathArrayOfValues {
	return &BatchGetProbeGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbeGroupsResponse_FieldPathArrayItemValue {
	return &BatchGetProbeGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbeGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbeGroupsResponse_FieldPathValue allows storing values for BatchGetProbeGroupsResponse fields according to their type
type BatchGetProbeGroupsResponse_FieldPathValue interface {
	BatchGetProbeGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbeGroupsResponse)
	CompareWith(*BatchGetProbeGroupsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbeGroupsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbeGroupsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbeGroupsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbeGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbeGroupsResponse_FieldTerminalPathValue struct {
	BatchGetProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbeGroupsResponse_FieldPathValue = (*BatchGetProbeGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbeGroupsResponse' as interface{}
func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) AsProbeGroupsValue() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.([]*probe_group.ProbeGroup)
	return res, ok
}
func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probe_group.Reference, bool) {
	res, ok := fpv.value.([]*probe_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbeGroupsResponse
func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbeGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetProbeGroupsResponse)
	}
	switch fpv.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		(*target).ProbeGroups = fpv.value.([]*probe_group.ProbeGroup)
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probe_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbeGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbeGroupsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbeGroupsResponse'.
func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbeGroupsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbeGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbeGroupsResponse))
}

type BatchGetProbeGroupsResponse_FieldSubPathValue struct {
	BatchGetProbeGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbeGroupsResponse_FieldPathValue = (*BatchGetProbeGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) AsProbeGroupsPathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) SetTo(target **BatchGetProbeGroupsResponse) {
	if *target == nil {
		*target = new(BatchGetProbeGroupsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbeGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbeGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbeGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbeGroupsResponse))
}

// BatchGetProbeGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbeGroupsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbeGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbeGroupsResponse_FieldPath
	ContainsValue(*BatchGetProbeGroupsResponse) bool
}

// ParseBatchGetProbeGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbeGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbeGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbeGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbeGroupsResponse_FieldPathArrayItemValue = (*BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbeGroupsResponse as interface{}
func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) AsProbeGroupsItemValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpaiv.value.(*probe_group.ProbeGroup)
	return res, ok
}
func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probe_group.Reference, bool) {
	res, ok := fpaiv.value.(*probe_group.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbeGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbeGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbeGroupsResponse'
func (fpaiv *BatchGetProbeGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbeGroupsResponse) bool {
	slice := fpaiv.BatchGetProbeGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbeGroupsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbeGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbeGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbeGroupsResponse_FieldSubPathArrayItemValue) AsProbeGroupsPathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbeGroupsResponse'
func (fpaivs *BatchGetProbeGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbeGroupsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbeGroupsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbeGroupsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbeGroupsResponse fields according to their type
type BatchGetProbeGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbeGroupsResponse_FieldPath
}

func ParseBatchGetProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbeGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbeGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbeGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbeGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbeGroupsResponse_FieldPathArrayOfValues = (*BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
		for _, v := range fpaov.values.([][]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probe_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsProbeGroupsArrayOfValues() ([][]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([][]*probe_group.ProbeGroup)
	return res, ok
}
func (fpaov *BatchGetProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([][]*probe_group.Reference)
	return res, ok
}

type BatchGetProbeGroupsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbeGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbeGroupsResponse_FieldPathArrayOfValues = (*BatchGetProbeGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbeGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbeGroupsResponse_FieldSubPathArrayOfValues) AsProbeGroupsPathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbeGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbeGroupsRequest_FieldPathSelector
	Get(source *ListProbeGroupsRequest) []interface{}
	GetSingle(source *ListProbeGroupsRequest) (interface{}, bool)
	ClearValue(item *ListProbeGroupsRequest)

	// Those methods build corresponding ListProbeGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbeGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbeGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbeGroupsRequest_FieldPathArrayItemValue
}

type ListProbeGroupsRequest_FieldPathSelector int32

const (
	ListProbeGroupsRequest_FieldPathSelectorParent    ListProbeGroupsRequest_FieldPathSelector = 0
	ListProbeGroupsRequest_FieldPathSelectorPageSize  ListProbeGroupsRequest_FieldPathSelector = 1
	ListProbeGroupsRequest_FieldPathSelectorPageToken ListProbeGroupsRequest_FieldPathSelector = 2
	ListProbeGroupsRequest_FieldPathSelectorOrderBy   ListProbeGroupsRequest_FieldPathSelector = 3
	ListProbeGroupsRequest_FieldPathSelectorFilter    ListProbeGroupsRequest_FieldPathSelector = 4
	ListProbeGroupsRequest_FieldPathSelectorFieldMask ListProbeGroupsRequest_FieldPathSelector = 5
	ListProbeGroupsRequest_FieldPathSelectorView      ListProbeGroupsRequest_FieldPathSelector = 6
)

func (s ListProbeGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbeGroupsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", s))
	}
}

func BuildListProbeGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbeGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbeGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbeGroupsRequest", fp)
}

func ParseListProbeGroupsRequest_FieldPath(rawField string) (ListProbeGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbeGroupsRequest_FieldPath(fp)
}

func MustParseListProbeGroupsRequest_FieldPath(rawField string) ListProbeGroupsRequest_FieldPath {
	fp, err := ParseListProbeGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbeGroupsRequest_FieldTerminalPath struct {
	selector ListProbeGroupsRequest_FieldPathSelector
}

var _ ListProbeGroupsRequest_FieldPath = (*ListProbeGroupsRequest_FieldTerminalPath)(nil)

func (fp *ListProbeGroupsRequest_FieldTerminalPath) Selector() ListProbeGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbeGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbeGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbeGroupsRequest
func (fp *ListProbeGroupsRequest_FieldTerminalPath) Get(source *ListProbeGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbeGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbeGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbeGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbeGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbeGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbeGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbeGroupsRequest
func (fp *ListProbeGroupsRequest_FieldTerminalPath) GetSingle(source *ListProbeGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbeGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbeGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbeGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		return (*probe_group.ParentName)(nil)
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		return (*probe_group.PagerCursor)(nil)
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		return (*probe_group.OrderBy)(nil)
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		return (*probe_group.Filter)(nil)
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case ListProbeGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) ClearValue(item *ListProbeGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbeGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbeGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbeGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbeGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbeGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbeGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbeGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbeGroupsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbeGroupsRequest_FieldPathSelectorView
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbeGroupsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ParentName)}
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.OrderBy)}
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Filter)}
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case ListProbeGroupsRequest_FieldPathSelectorView:
		return &ListProbeGroupsRequest_FieldTerminalPathValue{ListProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ParentName)}
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.OrderBy)}
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Filter)}
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case ListProbeGroupsRequest_FieldPathSelectorView:
		return &ListProbeGroupsRequest_FieldTerminalPathArrayOfValues{ListProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbeGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbeGroupsRequest_FieldPathValue allows storing values for ListProbeGroupsRequest fields according to their type
type ListProbeGroupsRequest_FieldPathValue interface {
	ListProbeGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbeGroupsRequest)
	CompareWith(*ListProbeGroupsRequest) (cmp int, comparable bool)
}

func ParseListProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) (ListProbeGroupsRequest_FieldPathValue, error) {
	fp, err := ParseListProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbeGroupsRequest_FieldPathValue), nil
}

func MustParseListProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) ListProbeGroupsRequest_FieldPathValue {
	fpv, err := ParseListProbeGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbeGroupsRequest_FieldTerminalPathValue struct {
	ListProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbeGroupsRequest_FieldPathValue = (*ListProbeGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbeGroupsRequest' as interface{}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probe_group.ParentName, bool) {
	res, ok := fpv.value.(*probe_group.ParentName)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probe_group.OrderBy, bool) {
	res, ok := fpv.value.(*probe_group.OrderBy)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probe_group.Filter, bool) {
	res, ok := fpv.value.(*probe_group.Filter)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbeGroupsRequest
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) SetTo(target **ListProbeGroupsRequest) {
	if *target == nil {
		*target = new(ListProbeGroupsRequest)
	}
	switch fpv.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe_group.ParentName)
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe_group.PagerCursor)
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe_group.OrderBy)
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe_group.Filter)
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case ListProbeGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbeGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbeGroupsRequest_FieldTerminalPathValue' with the value under path in 'ListProbeGroupsRequest'.
func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) CompareWith(source *ListProbeGroupsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe_group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbeGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbeGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbeGroupsRequest))
}

// ListProbeGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbeGroupsRequest according to their type
// Present only for array (repeated) types.
type ListProbeGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbeGroupsRequest_FieldPath
	ContainsValue(*ListProbeGroupsRequest) bool
}

// ParseListProbeGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbeGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbeGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbeGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbeGroupsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbeGroupsRequest_FieldPathArrayItemValue = (*ListProbeGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbeGroupsRequest as interface{}
func (fpaiv *ListProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbeGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbeGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbeGroupsRequest'
func (fpaiv *ListProbeGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbeGroupsRequest) bool {
	slice := fpaiv.ListProbeGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbeGroupsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbeGroupsRequest fields according to their type
type ListProbeGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbeGroupsRequest_FieldPath
}

func ParseListProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbeGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbeGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbeGroupsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbeGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbeGroupsRequest_FieldPathArrayOfValues = (*ListProbeGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbeGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe_group.ParentName) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe_group.OrderBy) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe_group.Filter) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case ListProbeGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe_group.ParentName, bool) {
	res, ok := fpaov.values.([]*probe_group.ParentName)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe_group.OrderBy)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe_group.Filter, bool) {
	res, ok := fpaov.values.([]*probe_group.Filter)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *ListProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbeGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbeGroupsResponse_FieldPathSelector
	Get(source *ListProbeGroupsResponse) []interface{}
	GetSingle(source *ListProbeGroupsResponse) (interface{}, bool)
	ClearValue(item *ListProbeGroupsResponse)

	// Those methods build corresponding ListProbeGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbeGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbeGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbeGroupsResponse_FieldPathArrayItemValue
}

type ListProbeGroupsResponse_FieldPathSelector int32

const (
	ListProbeGroupsResponse_FieldPathSelectorProbeGroups   ListProbeGroupsResponse_FieldPathSelector = 0
	ListProbeGroupsResponse_FieldPathSelectorPrevPageToken ListProbeGroupsResponse_FieldPathSelector = 1
	ListProbeGroupsResponse_FieldPathSelectorNextPageToken ListProbeGroupsResponse_FieldPathSelector = 2
)

func (s ListProbeGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return "probe_groups"
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", s))
	}
}

func BuildListProbeGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbeGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbeGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			return &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbeGroupsResponse_FieldSubPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbeGroupsResponse", fp)
}

func ParseListProbeGroupsResponse_FieldPath(rawField string) (ListProbeGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbeGroupsResponse_FieldPath(fp)
}

func MustParseListProbeGroupsResponse_FieldPath(rawField string) ListProbeGroupsResponse_FieldPath {
	fp, err := ParseListProbeGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbeGroupsResponse_FieldTerminalPath struct {
	selector ListProbeGroupsResponse_FieldPathSelector
}

var _ ListProbeGroupsResponse_FieldPath = (*ListProbeGroupsResponse_FieldTerminalPath)(nil)

func (fp *ListProbeGroupsResponse_FieldTerminalPath) Selector() ListProbeGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbeGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbeGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbeGroupsResponse
func (fp *ListProbeGroupsResponse_FieldTerminalPath) Get(source *ListProbeGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, value := range source.GetProbeGroups() {
				values = append(values, value)
			}
		case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbeGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbeGroupsResponse
func (fp *ListProbeGroupsResponse_FieldTerminalPath) GetSingle(source *ListProbeGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		res := source.GetProbeGroups()
		return res, res != nil
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbeGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return ([]*probe_group.ProbeGroup)(nil)
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*probe_group.PagerCursor)(nil)
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return (*probe_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) ClearValue(item *ListProbeGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
			item.ProbeGroups = nil
		case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbeGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbeGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbeGroupsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbeGroupsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &ListProbeGroupsResponse_FieldTerminalPathValue{ListProbeGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probe_group.ProbeGroup)}
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbeGroupsResponse_FieldTerminalPathValue{ListProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListProbeGroupsResponse_FieldTerminalPathValue{ListProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbeGroupsResponse_FieldTerminalPathArrayOfValues{ListProbeGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &ListProbeGroupsResponse_FieldTerminalPathArrayOfValues{ListProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probe_group.ProbeGroup)}
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbeGroupsResponse_FieldTerminalPathArrayOfValues{ListProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return &ListProbeGroupsResponse_FieldTerminalPathArrayOfValues{ListProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbeGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &ListProbeGroupsResponse_FieldTerminalPathArrayItemValue{ListProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *ListProbeGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbeGroupsResponse_FieldSubPath struct {
	selector ListProbeGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbeGroupsResponse_FieldPath = (*ListProbeGroupsResponse_FieldSubPath)(nil)

func (fps *ListProbeGroupsResponse_FieldSubPath) Selector() ListProbeGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbeGroupsResponse_FieldSubPath) AsProbeGroupsSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbeGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbeGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbeGroupsResponse
func (fps *ListProbeGroupsResponse_FieldSubPath) Get(source *ListProbeGroupsResponse) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsProbeGroupsSubPath(); ok {
		for _, item := range source.GetProbeGroups() {
			values = append(values, asProbeGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbeGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbeGroupsResponse))
}

// GetSingle returns value of selected field from source ListProbeGroupsResponse
func (fps *ListProbeGroupsResponse_FieldSubPath) GetSingle(source *ListProbeGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		if len(source.GetProbeGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fps.selector))
	}
}

func (fps *ListProbeGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbeGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbeGroupsResponse_FieldSubPath) ClearValue(item *ListProbeGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, subItem := range item.ProbeGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbeGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbeGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbeGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProbeGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithIValue(value interface{}) ListProbeGroupsResponse_FieldPathValue {
	return &ListProbeGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbeGroupsResponse_FieldPathArrayOfValues {
	return &ListProbeGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbeGroupsResponse_FieldPathArrayItemValue {
	return &ListProbeGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbeGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbeGroupsResponse_FieldPathValue allows storing values for ListProbeGroupsResponse fields according to their type
type ListProbeGroupsResponse_FieldPathValue interface {
	ListProbeGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbeGroupsResponse)
	CompareWith(*ListProbeGroupsResponse) (cmp int, comparable bool)
}

func ParseListProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) (ListProbeGroupsResponse_FieldPathValue, error) {
	fp, err := ParseListProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbeGroupsResponse_FieldPathValue), nil
}

func MustParseListProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) ListProbeGroupsResponse_FieldPathValue {
	fpv, err := ParseListProbeGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbeGroupsResponse_FieldTerminalPathValue struct {
	ListProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbeGroupsResponse_FieldPathValue = (*ListProbeGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbeGroupsResponse' as interface{}
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) AsProbeGroupsValue() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.([]*probe_group.ProbeGroup)
	return res, ok
}
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbeGroupsResponse
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) SetTo(target **ListProbeGroupsResponse) {
	if *target == nil {
		*target = new(ListProbeGroupsResponse)
	}
	switch fpv.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		(*target).ProbeGroups = fpv.value.([]*probe_group.ProbeGroup)
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe_group.PagerCursor)
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbeGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbeGroupsResponse_FieldTerminalPathValue' with the value under path in 'ListProbeGroupsResponse'.
func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) CompareWith(source *ListProbeGroupsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbeGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbeGroupsResponse))
}

type ListProbeGroupsResponse_FieldSubPathValue struct {
	ListProbeGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbeGroupsResponse_FieldPathValue = (*ListProbeGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) AsProbeGroupsPathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) SetTo(target **ListProbeGroupsResponse) {
	if *target == nil {
		*target = new(ListProbeGroupsResponse)
	}
	switch fpvs.Selector() {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbeGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) CompareWith(source *ListProbeGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbeGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbeGroupsResponse))
}

// ListProbeGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbeGroupsResponse according to their type
// Present only for array (repeated) types.
type ListProbeGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbeGroupsResponse_FieldPath
	ContainsValue(*ListProbeGroupsResponse) bool
}

// ParseListProbeGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbeGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbeGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbeGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbeGroupsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbeGroupsResponse_FieldPathArrayItemValue = (*ListProbeGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbeGroupsResponse as interface{}
func (fpaiv *ListProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbeGroupsResponse_FieldTerminalPathArrayItemValue) AsProbeGroupsItemValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpaiv.value.(*probe_group.ProbeGroup)
	return res, ok
}

func (fpaiv *ListProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbeGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbeGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbeGroupsResponse'
func (fpaiv *ListProbeGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbeGroupsResponse) bool {
	slice := fpaiv.ListProbeGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbeGroupsResponse_FieldSubPathArrayItemValue struct {
	ListProbeGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbeGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbeGroupsResponse_FieldSubPathArrayItemValue) AsProbeGroupsPathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbeGroupsResponse'
func (fpaivs *ListProbeGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbeGroupsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbeGroupsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbeGroupsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbeGroupsResponse fields according to their type
type ListProbeGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbeGroupsResponse_FieldPath
}

func ParseListProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbeGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbeGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbeGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbeGroupsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbeGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbeGroupsResponse_FieldPathArrayOfValues = (*ListProbeGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbeGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
		for _, v := range fpaov.values.([][]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsProbeGroupsArrayOfValues() ([][]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([][]*probe_group.ProbeGroup)
	return res, ok
}
func (fpaov *ListProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *ListProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}

type ListProbeGroupsResponse_FieldSubPathArrayOfValues struct {
	ListProbeGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbeGroupsResponse_FieldPathArrayOfValues = (*ListProbeGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbeGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbeGroupsResponse_FieldSubPathArrayOfValues) AsProbeGroupsPathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeGroupRequest_FieldPathSelector
	Get(source *WatchProbeGroupRequest) []interface{}
	GetSingle(source *WatchProbeGroupRequest) (interface{}, bool)
	ClearValue(item *WatchProbeGroupRequest)

	// Those methods build corresponding WatchProbeGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeGroupRequest_FieldPathArrayItemValue
}

type WatchProbeGroupRequest_FieldPathSelector int32

const (
	WatchProbeGroupRequest_FieldPathSelectorName      WatchProbeGroupRequest_FieldPathSelector = 0
	WatchProbeGroupRequest_FieldPathSelectorFieldMask WatchProbeGroupRequest_FieldPathSelector = 1
	WatchProbeGroupRequest_FieldPathSelectorView      WatchProbeGroupRequest_FieldPathSelector = 2
)

func (s WatchProbeGroupRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		return "name"
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbeGroupRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", s))
	}
}

func BuildWatchProbeGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeGroupRequest", fp)
}

func ParseWatchProbeGroupRequest_FieldPath(rawField string) (WatchProbeGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeGroupRequest_FieldPath(fp)
}

func MustParseWatchProbeGroupRequest_FieldPath(rawField string) WatchProbeGroupRequest_FieldPath {
	fp, err := ParseWatchProbeGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeGroupRequest_FieldTerminalPath struct {
	selector WatchProbeGroupRequest_FieldPathSelector
}

var _ WatchProbeGroupRequest_FieldPath = (*WatchProbeGroupRequest_FieldTerminalPath)(nil)

func (fp *WatchProbeGroupRequest_FieldTerminalPath) Selector() WatchProbeGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeGroupRequest
func (fp *WatchProbeGroupRequest_FieldTerminalPath) Get(source *WatchProbeGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbeGroupRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeGroupRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbeGroupRequest
func (fp *WatchProbeGroupRequest_FieldTerminalPath) GetSingle(source *WatchProbeGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbeGroupRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		return (*probe_group.Reference)(nil)
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case WatchProbeGroupRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) ClearValue(item *WatchProbeGroupRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbeGroupRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbeGroupRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeGroupRequest_FieldPathSelectorName ||
		fp.selector == WatchProbeGroupRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbeGroupRequest_FieldPathSelectorView
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbeGroupRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		return &WatchProbeGroupRequest_FieldTerminalPathValue{WatchProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		return &WatchProbeGroupRequest_FieldTerminalPathValue{WatchProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case WatchProbeGroupRequest_FieldPathSelectorView:
		return &WatchProbeGroupRequest_FieldTerminalPathValue{WatchProbeGroupRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeGroupRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbeGroupRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		return &WatchProbeGroupRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Reference)}
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		return &WatchProbeGroupRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case WatchProbeGroupRequest_FieldPathSelectorView:
		return &WatchProbeGroupRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeGroupRequest_FieldPathValue allows storing values for WatchProbeGroupRequest fields according to their type
type WatchProbeGroupRequest_FieldPathValue interface {
	WatchProbeGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeGroupRequest)
	CompareWith(*WatchProbeGroupRequest) (cmp int, comparable bool)
}

func ParseWatchProbeGroupRequest_FieldPathValue(pathStr, valueStr string) (WatchProbeGroupRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeGroupRequest_FieldPathValue), nil
}

func MustParseWatchProbeGroupRequest_FieldPathValue(pathStr, valueStr string) WatchProbeGroupRequest_FieldPathValue {
	fpv, err := ParseWatchProbeGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeGroupRequest_FieldTerminalPathValue struct {
	WatchProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupRequest_FieldPathValue = (*WatchProbeGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeGroupRequest' as interface{}
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) AsNameValue() (*probe_group.Reference, bool) {
	res, ok := fpv.value.(*probe_group.Reference)
	return res, ok
}
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeGroupRequest
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) SetTo(target **WatchProbeGroupRequest) {
	if *target == nil {
		*target = new(WatchProbeGroupRequest)
	}
	switch fpv.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe_group.Reference)
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case WatchProbeGroupRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeGroupRequest_FieldTerminalPathValue' with the value under path in 'WatchProbeGroupRequest'.
func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) CompareWith(source *WatchProbeGroupRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbeGroupRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeGroupRequest))
}

// WatchProbeGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeGroupRequest according to their type
// Present only for array (repeated) types.
type WatchProbeGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeGroupRequest_FieldPath
	ContainsValue(*WatchProbeGroupRequest) bool
}

// ParseWatchProbeGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeGroupRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupRequest_FieldPathArrayItemValue = (*WatchProbeGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeGroupRequest as interface{}
func (fpaiv *WatchProbeGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeGroupRequest'
func (fpaiv *WatchProbeGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeGroupRequest) bool {
	slice := fpaiv.WatchProbeGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeGroupRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbeGroupRequest fields according to their type
type WatchProbeGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeGroupRequest_FieldPath
}

func ParseWatchProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeGroupRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbeGroupRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbeGroupRequest_FieldPathArrayOfValues = (*WatchProbeGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe_group.Reference) {
			values = append(values, v)
		}
	case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchProbeGroupRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([]*probe_group.Reference)
	return res, ok
}
func (fpaov *WatchProbeGroupRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchProbeGroupRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeGroupResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeGroupResponse_FieldPathSelector
	Get(source *WatchProbeGroupResponse) []interface{}
	GetSingle(source *WatchProbeGroupResponse) (interface{}, bool)
	ClearValue(item *WatchProbeGroupResponse)

	// Those methods build corresponding WatchProbeGroupResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeGroupResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeGroupResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeGroupResponse_FieldPathArrayItemValue
}

type WatchProbeGroupResponse_FieldPathSelector int32

const (
	WatchProbeGroupResponse_FieldPathSelectorChange WatchProbeGroupResponse_FieldPathSelector = 0
)

func (s WatchProbeGroupResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", s))
	}
}

func BuildWatchProbeGroupResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeGroupResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeGroupResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbeGroupResponse_FieldTerminalPath{selector: WatchProbeGroupResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeGroupResponse", fp)
}

func ParseWatchProbeGroupResponse_FieldPath(rawField string) (WatchProbeGroupResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeGroupResponse_FieldPath(fp)
}

func MustParseWatchProbeGroupResponse_FieldPath(rawField string) WatchProbeGroupResponse_FieldPath {
	fp, err := ParseWatchProbeGroupResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeGroupResponse_FieldTerminalPath struct {
	selector WatchProbeGroupResponse_FieldPathSelector
}

var _ WatchProbeGroupResponse_FieldPath = (*WatchProbeGroupResponse_FieldTerminalPath)(nil)

func (fp *WatchProbeGroupResponse_FieldTerminalPath) Selector() WatchProbeGroupResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeGroupResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeGroupResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeGroupResponse
func (fp *WatchProbeGroupResponse_FieldTerminalPath) Get(source *WatchProbeGroupResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeGroupResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeGroupResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbeGroupResponse
func (fp *WatchProbeGroupResponse_FieldTerminalPath) GetSingle(source *WatchProbeGroupResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeGroupResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeGroupResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		return (*probe_group.ProbeGroupChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) ClearValue(item *WatchProbeGroupResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbeGroupResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeGroupResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeGroupResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeGroupResponse_FieldPathSelectorChange
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbeGroupResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		return &WatchProbeGroupResponse_FieldTerminalPathValue{WatchProbeGroupResponse_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeGroupResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbeGroupResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		return &WatchProbeGroupResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupResponse_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeGroupResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeGroupResponse_FieldPathValue allows storing values for WatchProbeGroupResponse fields according to their type
type WatchProbeGroupResponse_FieldPathValue interface {
	WatchProbeGroupResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeGroupResponse)
	CompareWith(*WatchProbeGroupResponse) (cmp int, comparable bool)
}

func ParseWatchProbeGroupResponse_FieldPathValue(pathStr, valueStr string) (WatchProbeGroupResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbeGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeGroupResponse_FieldPathValue), nil
}

func MustParseWatchProbeGroupResponse_FieldPathValue(pathStr, valueStr string) WatchProbeGroupResponse_FieldPathValue {
	fpv, err := ParseWatchProbeGroupResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeGroupResponse_FieldTerminalPathValue struct {
	WatchProbeGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupResponse_FieldPathValue = (*WatchProbeGroupResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeGroupResponse' as interface{}
func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) AsChangeValue() (*probe_group.ProbeGroupChange, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroupChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeGroupResponse
func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) SetTo(target **WatchProbeGroupResponse) {
	if *target == nil {
		*target = new(WatchProbeGroupResponse)
	}
	switch fpv.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probe_group.ProbeGroupChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeGroupResponse_FieldTerminalPathValue' with the value under path in 'WatchProbeGroupResponse'.
func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) CompareWith(source *WatchProbeGroupResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeGroupResponse))
}

// WatchProbeGroupResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeGroupResponse according to their type
// Present only for array (repeated) types.
type WatchProbeGroupResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeGroupResponse_FieldPath
	ContainsValue(*WatchProbeGroupResponse) bool
}

// ParseWatchProbeGroupResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeGroupResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeGroupResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeGroupResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeGroupResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeGroupResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeGroupResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbeGroupResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupResponse_FieldPathArrayItemValue = (*WatchProbeGroupResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeGroupResponse as interface{}
func (fpaiv *WatchProbeGroupResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeGroupResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeGroupResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeGroupResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeGroupResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeGroupResponse'
func (fpaiv *WatchProbeGroupResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeGroupResponse) bool {
	slice := fpaiv.WatchProbeGroupResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeGroupResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbeGroupResponse fields according to their type
type WatchProbeGroupResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeGroupResponse_FieldPath
}

func ParseWatchProbeGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeGroupResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeGroupResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeGroupResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeGroupResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeGroupResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeGroupResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbeGroupResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbeGroupResponse_FieldPathArrayOfValues = (*WatchProbeGroupResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeGroupResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeGroupResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroupChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeGroupResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probe_group.ProbeGroupChange, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroupChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeGroupsRequest_FieldPathSelector
	Get(source *WatchProbeGroupsRequest) []interface{}
	GetSingle(source *WatchProbeGroupsRequest) (interface{}, bool)
	ClearValue(item *WatchProbeGroupsRequest)

	// Those methods build corresponding WatchProbeGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeGroupsRequest_FieldPathArrayItemValue
}

type WatchProbeGroupsRequest_FieldPathSelector int32

const (
	WatchProbeGroupsRequest_FieldPathSelectorType         WatchProbeGroupsRequest_FieldPathSelector = 0
	WatchProbeGroupsRequest_FieldPathSelectorParent       WatchProbeGroupsRequest_FieldPathSelector = 1
	WatchProbeGroupsRequest_FieldPathSelectorPageSize     WatchProbeGroupsRequest_FieldPathSelector = 2
	WatchProbeGroupsRequest_FieldPathSelectorPageToken    WatchProbeGroupsRequest_FieldPathSelector = 3
	WatchProbeGroupsRequest_FieldPathSelectorOrderBy      WatchProbeGroupsRequest_FieldPathSelector = 4
	WatchProbeGroupsRequest_FieldPathSelectorResumeToken  WatchProbeGroupsRequest_FieldPathSelector = 5
	WatchProbeGroupsRequest_FieldPathSelectorFilter       WatchProbeGroupsRequest_FieldPathSelector = 6
	WatchProbeGroupsRequest_FieldPathSelectorFieldMask    WatchProbeGroupsRequest_FieldPathSelector = 7
	WatchProbeGroupsRequest_FieldPathSelectorView         WatchProbeGroupsRequest_FieldPathSelector = 8
	WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize WatchProbeGroupsRequest_FieldPathSelector = 9
)

func (s WatchProbeGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", s))
	}
}

func BuildWatchProbeGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeGroupsRequest", fp)
}

func ParseWatchProbeGroupsRequest_FieldPath(rawField string) (WatchProbeGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeGroupsRequest_FieldPath(fp)
}

func MustParseWatchProbeGroupsRequest_FieldPath(rawField string) WatchProbeGroupsRequest_FieldPath {
	fp, err := ParseWatchProbeGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeGroupsRequest_FieldTerminalPath struct {
	selector WatchProbeGroupsRequest_FieldPathSelector
}

var _ WatchProbeGroupsRequest_FieldPath = (*WatchProbeGroupsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) Selector() WatchProbeGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeGroupsRequest
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) Get(source *WatchProbeGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeGroupsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbeGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbeGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbeGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbeGroupsRequest
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) GetSingle(source *WatchProbeGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		return (*probe_group.ParentReference)(nil)
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		return (*probe_group.PagerCursor)(nil)
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return (*probe_group.OrderBy)(nil)
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		return (*probe_group.Filter)(nil)
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) ClearValue(item *WatchProbeGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbeGroupsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbeGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbeGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbeGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeGroupsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbeGroupsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ParentReference)}
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.OrderBy)}
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Filter)}
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbeGroupsRequest_FieldTerminalPathValue{WatchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ParentReference)}
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.OrderBy)}
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Filter)}
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues{WatchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeGroupsRequest_FieldPathValue allows storing values for WatchProbeGroupsRequest fields according to their type
type WatchProbeGroupsRequest_FieldPathValue interface {
	WatchProbeGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeGroupsRequest)
	CompareWith(*WatchProbeGroupsRequest) (cmp int, comparable bool)
}

func ParseWatchProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbeGroupsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeGroupsRequest_FieldPathValue), nil
}

func MustParseWatchProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) WatchProbeGroupsRequest_FieldPathValue {
	fpv, err := ParseWatchProbeGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeGroupsRequest_FieldTerminalPathValue struct {
	WatchProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsRequest_FieldPathValue = (*WatchProbeGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeGroupsRequest' as interface{}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probe_group.ParentReference, bool) {
	res, ok := fpv.value.(*probe_group.ParentReference)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probe_group.OrderBy, bool) {
	res, ok := fpv.value.(*probe_group.OrderBy)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probe_group.Filter, bool) {
	res, ok := fpv.value.(*probe_group.Filter)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeGroupsRequest
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) SetTo(target **WatchProbeGroupsRequest) {
	if *target == nil {
		*target = new(WatchProbeGroupsRequest)
	}
	switch fpv.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe_group.ParentReference)
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe_group.PagerCursor)
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe_group.OrderBy)
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe_group.Filter)
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeGroupsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbeGroupsRequest'.
func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbeGroupsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeGroupsRequest))
}

// WatchProbeGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeGroupsRequest according to their type
// Present only for array (repeated) types.
type WatchProbeGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeGroupsRequest_FieldPath
	ContainsValue(*WatchProbeGroupsRequest) bool
}

// ParseWatchProbeGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsRequest_FieldPathArrayItemValue = (*WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeGroupsRequest as interface{}
func (fpaiv *WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeGroupsRequest'
func (fpaiv *WatchProbeGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeGroupsRequest) bool {
	slice := fpaiv.WatchProbeGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeGroupsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbeGroupsRequest fields according to their type
type WatchProbeGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeGroupsRequest_FieldPath
}

func ParseWatchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbeGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbeGroupsRequest_FieldPathArrayOfValues = (*WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeGroupsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe_group.ParentReference) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe_group.OrderBy) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe_group.Filter) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*probe_group.ParentReference)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe_group.OrderBy)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe_group.Filter, bool) {
	res, ok := fpaov.values.([]*probe_group.Filter)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeGroupsResponse_FieldPathSelector
	Get(source *WatchProbeGroupsResponse) []interface{}
	GetSingle(source *WatchProbeGroupsResponse) (interface{}, bool)
	ClearValue(item *WatchProbeGroupsResponse)

	// Those methods build corresponding WatchProbeGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeGroupsResponse_FieldPathArrayItemValue
}

type WatchProbeGroupsResponse_FieldPathSelector int32

const (
	WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges WatchProbeGroupsResponse_FieldPathSelector = 0
	WatchProbeGroupsResponse_FieldPathSelectorIsCurrent         WatchProbeGroupsResponse_FieldPathSelector = 1
	WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange   WatchProbeGroupsResponse_FieldPathSelector = 2
	WatchProbeGroupsResponse_FieldPathSelectorResumeToken       WatchProbeGroupsResponse_FieldPathSelector = 3
	WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize      WatchProbeGroupsResponse_FieldPathSelector = 4
	WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset       WatchProbeGroupsResponse_FieldPathSelector = 5
	WatchProbeGroupsResponse_FieldPathSelectorIsHardReset       WatchProbeGroupsResponse_FieldPathSelector = 6
)

func (s WatchProbeGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return "probe_group_changes"
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", s))
	}
}

func BuildWatchProbeGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_group_changes", "probeGroupChanges", "probe-group-changes":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbeGroupsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbeGroupsResponse_FieldSubPath{selector: WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeGroupsResponse", fp)
}

func ParseWatchProbeGroupsResponse_FieldPath(rawField string) (WatchProbeGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeGroupsResponse_FieldPath(fp)
}

func MustParseWatchProbeGroupsResponse_FieldPath(rawField string) WatchProbeGroupsResponse_FieldPath {
	fp, err := ParseWatchProbeGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeGroupsResponse_FieldTerminalPath struct {
	selector WatchProbeGroupsResponse_FieldPathSelector
}

var _ WatchProbeGroupsResponse_FieldPath = (*WatchProbeGroupsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) Selector() WatchProbeGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeGroupsResponse
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) Get(source *WatchProbeGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
			for _, value := range source.GetProbeGroupChanges() {
				values = append(values, value)
			}
		case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbeGroupsResponse
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) GetSingle(source *WatchProbeGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		res := source.GetProbeGroupChanges()
		return res, res != nil
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return ([]*probe_group.ProbeGroupChange)(nil)
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbeGroupsResponse_PageTokenChange)(nil)
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) ClearValue(item *WatchProbeGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
			item.ProbeGroupChanges = nil
		case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges ||
		fp.selector == WatchProbeGroupsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbeGroupsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbeGroupsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbeGroupsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probe_group.ProbeGroupChange)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbeGroupsResponse_PageTokenChange)}
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbeGroupsResponse_FieldTerminalPathValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probe_group.ProbeGroupChange)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbeGroupsResponse_PageTokenChange)}
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return &WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue{WatchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroupChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbeGroupsResponse_FieldSubPath struct {
	selector WatchProbeGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbeGroupsResponse_FieldPath = (*WatchProbeGroupsResponse_FieldSubPath)(nil)

func (fps *WatchProbeGroupsResponse_FieldSubPath) Selector() WatchProbeGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbeGroupsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbeGroupsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbeGroupsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbeGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbeGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbeGroupsResponse
func (fps *WatchProbeGroupsResponse_FieldSubPath) Get(source *WatchProbeGroupsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbeGroupsResponse))
}

// GetSingle returns value of selected field from source WatchProbeGroupsResponse
func (fps *WatchProbeGroupsResponse_FieldSubPath) GetSingle(source *WatchProbeGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbeGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) ClearValue(item *WatchProbeGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbeGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProbeGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbeGroupsResponse_FieldPathValue {
	return &WatchProbeGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbeGroupsResponse_FieldPathArrayOfValues {
	return &WatchProbeGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbeGroupsResponse_FieldPathArrayItemValue {
	return &WatchProbeGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbeGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbeGroupsResponse_FieldPathValue allows storing values for WatchProbeGroupsResponse fields according to their type
type WatchProbeGroupsResponse_FieldPathValue interface {
	WatchProbeGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeGroupsResponse)
	CompareWith(*WatchProbeGroupsResponse) (cmp int, comparable bool)
}

func ParseWatchProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbeGroupsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeGroupsResponse_FieldPathValue), nil
}

func MustParseWatchProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) WatchProbeGroupsResponse_FieldPathValue {
	fpv, err := ParseWatchProbeGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeGroupsResponse_FieldTerminalPathValue struct {
	WatchProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsResponse_FieldPathValue = (*WatchProbeGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeGroupsResponse' as interface{}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsProbeGroupChangesValue() ([]*probe_group.ProbeGroupChange, bool) {
	res, ok := fpv.value.([]*probe_group.ProbeGroupChange)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbeGroupsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbeGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeGroupsResponse
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) SetTo(target **WatchProbeGroupsResponse) {
	if *target == nil {
		*target = new(WatchProbeGroupsResponse)
	}
	switch fpv.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		(*target).ProbeGroupChanges = fpv.value.([]*probe_group.ProbeGroupChange)
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbeGroupsResponse_PageTokenChange)
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeGroupsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbeGroupsResponse'.
func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbeGroupsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		return 0, false
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeGroupsResponse))
}

type WatchProbeGroupsResponse_FieldSubPathValue struct {
	WatchProbeGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbeGroupsResponse_FieldPathValue = (*WatchProbeGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbeGroupsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbeGroupsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) SetTo(target **WatchProbeGroupsResponse) {
	if *target == nil {
		*target = new(WatchProbeGroupsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbeGroupsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) CompareWith(source *WatchProbeGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbeGroupsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbeGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbeGroupsResponse))
}

// WatchProbeGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeGroupsResponse according to their type
// Present only for array (repeated) types.
type WatchProbeGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeGroupsResponse_FieldPath
	ContainsValue(*WatchProbeGroupsResponse) bool
}

// ParseWatchProbeGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsResponse_FieldPathArrayItemValue = (*WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeGroupsResponse as interface{}
func (fpaiv *WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue) AsProbeGroupChangesItemValue() (*probe_group.ProbeGroupChange, bool) {
	res, ok := fpaiv.value.(*probe_group.ProbeGroupChange)
	return res, ok
}

func (fpaiv *WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeGroupsResponse'
func (fpaiv *WatchProbeGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeGroupsResponse) bool {
	slice := fpaiv.WatchProbeGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbeGroupsResponse_FieldSubPathArrayItemValue struct {
	WatchProbeGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbeGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbeGroupsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeGroupsResponse'
func (fpaivs *WatchProbeGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbeGroupsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbeGroupsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbeGroupsResponse fields according to their type
type WatchProbeGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeGroupsResponse_FieldPath
}

func ParseWatchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbeGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbeGroupsResponse_FieldPathArrayOfValues = (*WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
		for _, v := range fpaov.values.([][]*probe_group.ProbeGroupChange) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbeGroupsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsProbeGroupChangesArrayOfValues() ([][]*probe_group.ProbeGroupChange, bool) {
	res, ok := fpaov.values.([][]*probe_group.ProbeGroupChange)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbeGroupsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbeGroupsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbeGroupsResponse_FieldSubPathArrayOfValues struct {
	WatchProbeGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbeGroupsResponse_FieldPathArrayOfValues = (*WatchProbeGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbeGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbeGroupsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeGroupsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeGroupsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbeGroupsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbeGroupsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbeGroupsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbeGroupsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbeGroupsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbeGroupsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbeGroupsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbeGroupsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbeGroupsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeGroupsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeGroupsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeGroupsResponse_PageTokenChange", fp)
}

func ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(rawField string) (WatchProbeGroupsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeGroupsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbeGroupsResponsePageTokenChange_FieldPath(rawField string) WatchProbeGroupsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbeGroupsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbeGroupsResponsePageTokenChange_FieldPath = (*WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbeGroupsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeGroupsResponse_PageTokenChange
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbeGroupsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbeGroupsResponse_PageTokenChange
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbeGroupsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probe_group.PagerCursor)(nil)
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probe_group.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbeGroupsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeGroupsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue{WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeGroupsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbeGroupsResponsePageTokenChange_FieldPathValue interface {
	WatchProbeGroupsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeGroupsResponse_PageTokenChange)
	CompareWith(*WatchProbeGroupsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbeGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbeGroupsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeGroupsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbeGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbeGroupsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsResponsePageTokenChange_FieldPathValue = (*WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbeGroupsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbeGroupsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe_group.PagerCursor)
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe_group.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeGroupsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbeGroupsResponse_PageTokenChange'.
func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbeGroupsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeGroupsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

// WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeGroupsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbeGroupsResponse_PageTokenChange) bool
}

// ParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbeGroupsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeGroupsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeGroupsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeGroupsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeGroupsResponsePageTokenChange_FieldPath
}

func ParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbeGroupsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbeGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbeGroupRequest_FieldPathSelector
	Get(source *CreateProbeGroupRequest) []interface{}
	GetSingle(source *CreateProbeGroupRequest) (interface{}, bool)
	ClearValue(item *CreateProbeGroupRequest)

	// Those methods build corresponding CreateProbeGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbeGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbeGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbeGroupRequest_FieldPathArrayItemValue
}

type CreateProbeGroupRequest_FieldPathSelector int32

const (
	CreateProbeGroupRequest_FieldPathSelectorParent     CreateProbeGroupRequest_FieldPathSelector = 0
	CreateProbeGroupRequest_FieldPathSelectorProbeGroup CreateProbeGroupRequest_FieldPathSelector = 1
)

func (s CreateProbeGroupRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return "probe_group"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", s))
	}
}

func BuildCreateProbeGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbeGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbeGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorParent}, nil
		case "probe_group", "probeGroup", "probe-group":
			return &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup}, nil
		}
	} else {
		switch fp[0] {
		case "probe_group", "probeGroup", "probe-group":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbeGroupRequest_FieldSubPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbeGroupRequest", fp)
}

func ParseCreateProbeGroupRequest_FieldPath(rawField string) (CreateProbeGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbeGroupRequest_FieldPath(fp)
}

func MustParseCreateProbeGroupRequest_FieldPath(rawField string) CreateProbeGroupRequest_FieldPath {
	fp, err := ParseCreateProbeGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbeGroupRequest_FieldTerminalPath struct {
	selector CreateProbeGroupRequest_FieldPathSelector
}

var _ CreateProbeGroupRequest_FieldPath = (*CreateProbeGroupRequest_FieldTerminalPath)(nil)

func (fp *CreateProbeGroupRequest_FieldTerminalPath) Selector() CreateProbeGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbeGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbeGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbeGroupRequest
func (fp *CreateProbeGroupRequest_FieldTerminalPath) Get(source *CreateProbeGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbeGroupRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
			if source.ProbeGroup != nil {
				values = append(values, source.ProbeGroup)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbeGroupRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbeGroupRequest
func (fp *CreateProbeGroupRequest_FieldTerminalPath) GetSingle(source *CreateProbeGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		res := source.GetProbeGroup()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbeGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		return (*probe_group.ParentReference)(nil)
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return (*probe_group.ProbeGroup)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) ClearValue(item *CreateProbeGroupRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbeGroupRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
			item.ProbeGroup = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbeGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbeGroupRequest_FieldPathSelectorParent
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbeGroupRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		return &CreateProbeGroupRequest_FieldTerminalPathValue{CreateProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ParentReference)}
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return &CreateProbeGroupRequest_FieldTerminalPathValue{CreateProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbeGroupRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbeGroupRequest_FieldTerminalPathArrayOfValues{CreateProbeGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		return &CreateProbeGroupRequest_FieldTerminalPathArrayOfValues{CreateProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ParentReference)}
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return &CreateProbeGroupRequest_FieldTerminalPathArrayOfValues{CreateProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbeGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbeGroupRequest_FieldSubPath struct {
	selector CreateProbeGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbeGroupRequest_FieldPath = (*CreateProbeGroupRequest_FieldSubPath)(nil)

func (fps *CreateProbeGroupRequest_FieldSubPath) Selector() CreateProbeGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbeGroupRequest_FieldSubPath) AsProbeGroupSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbeGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbeGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbeGroupRequest
func (fps *CreateProbeGroupRequest_FieldSubPath) Get(source *CreateProbeGroupRequest) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsProbeGroupSubPath(); ok {
		values = append(values, asProbeGroupFieldPath.Get(source.GetProbeGroup())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbeGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbeGroupRequest))
}

// GetSingle returns value of selected field from source CreateProbeGroupRequest
func (fps *CreateProbeGroupRequest_FieldSubPath) GetSingle(source *CreateProbeGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		if source.GetProbeGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fps.selector))
	}
}

func (fps *CreateProbeGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbeGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbeGroupRequest_FieldSubPath) ClearValue(item *CreateProbeGroupRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
			fps.subPath.ClearValueRaw(item.ProbeGroup)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbeGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbeGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbeGroupRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProbeGroupRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithIValue(value interface{}) CreateProbeGroupRequest_FieldPathValue {
	return &CreateProbeGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbeGroupRequest_FieldPathArrayOfValues {
	return &CreateProbeGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbeGroupRequest_FieldPathArrayItemValue {
	return &CreateProbeGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbeGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbeGroupRequest_FieldPathValue allows storing values for CreateProbeGroupRequest fields according to their type
type CreateProbeGroupRequest_FieldPathValue interface {
	CreateProbeGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbeGroupRequest)
	CompareWith(*CreateProbeGroupRequest) (cmp int, comparable bool)
}

func ParseCreateProbeGroupRequest_FieldPathValue(pathStr, valueStr string) (CreateProbeGroupRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbeGroupRequest_FieldPathValue), nil
}

func MustParseCreateProbeGroupRequest_FieldPathValue(pathStr, valueStr string) CreateProbeGroupRequest_FieldPathValue {
	fpv, err := ParseCreateProbeGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbeGroupRequest_FieldTerminalPathValue struct {
	CreateProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbeGroupRequest_FieldPathValue = (*CreateProbeGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbeGroupRequest' as interface{}
func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) AsParentValue() (*probe_group.ParentReference, bool) {
	res, ok := fpv.value.(*probe_group.ParentReference)
	return res, ok
}
func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) AsProbeGroupValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbeGroupRequest
func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) SetTo(target **CreateProbeGroupRequest) {
	if *target == nil {
		*target = new(CreateProbeGroupRequest)
	}
	switch fpv.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe_group.ParentReference)
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		(*target).ProbeGroup = fpv.value.(*probe_group.ProbeGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbeGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbeGroupRequest_FieldTerminalPathValue' with the value under path in 'CreateProbeGroupRequest'.
func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) CompareWith(source *CreateProbeGroupRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe_group.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbeGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbeGroupRequest))
}

type CreateProbeGroupRequest_FieldSubPathValue struct {
	CreateProbeGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbeGroupRequest_FieldPathValue = (*CreateProbeGroupRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) AsProbeGroupPathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) SetTo(target **CreateProbeGroupRequest) {
	if *target == nil {
		*target = new(CreateProbeGroupRequest)
	}
	switch fpvs.Selector() {
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).SetTo(&(*target).ProbeGroup)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbeGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) CompareWith(source *CreateProbeGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).CompareWith(source.GetProbeGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbeGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbeGroupRequest))
}

// CreateProbeGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbeGroupRequest according to their type
// Present only for array (repeated) types.
type CreateProbeGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbeGroupRequest_FieldPath
	ContainsValue(*CreateProbeGroupRequest) bool
}

// ParseCreateProbeGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbeGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbeGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbeGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbeGroupRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbeGroupRequest_FieldPathArrayItemValue = (*CreateProbeGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbeGroupRequest as interface{}
func (fpaiv *CreateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbeGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbeGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbeGroupRequest'
func (fpaiv *CreateProbeGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbeGroupRequest) bool {
	slice := fpaiv.CreateProbeGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbeGroupRequest_FieldSubPathArrayItemValue struct {
	CreateProbeGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbeGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbeGroupRequest_FieldSubPathArrayItemValue) AsProbeGroupPathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbeGroupRequest'
func (fpaivs *CreateProbeGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbeGroupRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue).ContainsValue(source.GetProbeGroup())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeGroupRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbeGroupRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbeGroupRequest fields according to their type
type CreateProbeGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbeGroupRequest_FieldPath
}

func ParseCreateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbeGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbeGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbeGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbeGroupRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbeGroupRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbeGroupRequest_FieldPathArrayOfValues = (*CreateProbeGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbeGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbeGroupRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe_group.ParentReference) {
			values = append(values, v)
		}
	case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbeGroupRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe_group.ParentReference, bool) {
	res, ok := fpaov.values.([]*probe_group.ParentReference)
	return res, ok
}
func (fpaov *CreateProbeGroupRequest_FieldTerminalPathArrayOfValues) AsProbeGroupArrayOfValues() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup)
	return res, ok
}

type CreateProbeGroupRequest_FieldSubPathArrayOfValues struct {
	CreateProbeGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbeGroupRequest_FieldPathArrayOfValues = (*CreateProbeGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbeGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbeGroupRequest_FieldSubPathArrayOfValues) AsProbeGroupPathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbeGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbeGroupRequest_FieldPathSelector
	Get(source *UpdateProbeGroupRequest) []interface{}
	GetSingle(source *UpdateProbeGroupRequest) (interface{}, bool)
	ClearValue(item *UpdateProbeGroupRequest)

	// Those methods build corresponding UpdateProbeGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbeGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbeGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbeGroupRequest_FieldPathArrayItemValue
}

type UpdateProbeGroupRequest_FieldPathSelector int32

const (
	UpdateProbeGroupRequest_FieldPathSelectorProbeGroup UpdateProbeGroupRequest_FieldPathSelector = 0
	UpdateProbeGroupRequest_FieldPathSelectorUpdateMask UpdateProbeGroupRequest_FieldPathSelector = 1
	UpdateProbeGroupRequest_FieldPathSelectorCas        UpdateProbeGroupRequest_FieldPathSelector = 2
)

func (s UpdateProbeGroupRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return "probe_group"
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", s))
	}
}

func BuildUpdateProbeGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbeGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbeGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_group", "probeGroup", "probe-group":
			return &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probe_group", "probeGroup", "probe-group":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbeGroupRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbeGroupRequest", fp)
}

func ParseUpdateProbeGroupRequest_FieldPath(rawField string) (UpdateProbeGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbeGroupRequest_FieldPath(fp)
}

func MustParseUpdateProbeGroupRequest_FieldPath(rawField string) UpdateProbeGroupRequest_FieldPath {
	fp, err := ParseUpdateProbeGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbeGroupRequest_FieldTerminalPath struct {
	selector UpdateProbeGroupRequest_FieldPathSelector
}

var _ UpdateProbeGroupRequest_FieldPath = (*UpdateProbeGroupRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) Selector() UpdateProbeGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbeGroupRequest
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) Get(source *UpdateProbeGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
			if source.ProbeGroup != nil {
				values = append(values, source.ProbeGroup)
			}
		case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbeGroupRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbeGroupRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbeGroupRequest
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) GetSingle(source *UpdateProbeGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		res := source.GetProbeGroup()
		return res, res != nil
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return (*probe_group.ProbeGroup)(nil)
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return (*UpdateProbeGroupRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) ClearValue(item *UpdateProbeGroupRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
			item.ProbeGroup = nil
		case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbeGroupRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbeGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbeGroupRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbeGroupRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return &UpdateProbeGroupRequest_FieldTerminalPathValue{UpdateProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbeGroupRequest_FieldTerminalPathValue{UpdateProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return &UpdateProbeGroupRequest_FieldTerminalPathValue{UpdateProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbeGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbeGroupRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return &UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup)}
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return &UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbeGroupRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbeGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbeGroupRequest_FieldSubPath struct {
	selector UpdateProbeGroupRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbeGroupRequest_FieldPath = (*UpdateProbeGroupRequest_FieldSubPath)(nil)

func (fps *UpdateProbeGroupRequest_FieldSubPath) Selector() UpdateProbeGroupRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbeGroupRequest_FieldSubPath) AsProbeGroupSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}
func (fps *UpdateProbeGroupRequest_FieldSubPath) AsCasSubPath() (UpdateProbeGroupRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbeGroupRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbeGroupRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbeGroupRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbeGroupRequest
func (fps *UpdateProbeGroupRequest_FieldSubPath) Get(source *UpdateProbeGroupRequest) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsProbeGroupSubPath(); ok {
		values = append(values, asProbeGroupFieldPath.Get(source.GetProbeGroup())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbeGroupRequest))
}

// GetSingle returns value of selected field from source UpdateProbeGroupRequest
func (fps *UpdateProbeGroupRequest_FieldSubPath) GetSingle(source *UpdateProbeGroupRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		if source.GetProbeGroup() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeGroup())
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbeGroupRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) ClearValue(item *UpdateProbeGroupRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
			fps.subPath.ClearValueRaw(item.ProbeGroup)
		case UpdateProbeGroupRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbeGroupRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbeGroupRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbeGroupRequest_FieldPathValue {
	return &UpdateProbeGroupRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbeGroupRequest_FieldPathArrayOfValues {
	return &UpdateProbeGroupRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbeGroupRequest_FieldPathArrayItemValue {
	return &UpdateProbeGroupRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbeGroupRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbeGroupRequest_FieldPathValue allows storing values for UpdateProbeGroupRequest fields according to their type
type UpdateProbeGroupRequest_FieldPathValue interface {
	UpdateProbeGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbeGroupRequest)
	CompareWith(*UpdateProbeGroupRequest) (cmp int, comparable bool)
}

func ParseUpdateProbeGroupRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbeGroupRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbeGroupRequest_FieldPathValue), nil
}

func MustParseUpdateProbeGroupRequest_FieldPathValue(pathStr, valueStr string) UpdateProbeGroupRequest_FieldPathValue {
	fpv, err := ParseUpdateProbeGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbeGroupRequest_FieldTerminalPathValue struct {
	UpdateProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeGroupRequest_FieldPathValue = (*UpdateProbeGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbeGroupRequest' as interface{}
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) AsProbeGroupValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup)
	return res, ok
}
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbeGroupRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbeGroupRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbeGroupRequest
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) SetTo(target **UpdateProbeGroupRequest) {
	if *target == nil {
		*target = new(UpdateProbeGroupRequest)
	}
	switch fpv.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		(*target).ProbeGroup = fpv.value.(*probe_group.ProbeGroup)
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbeGroupRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbeGroupRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbeGroupRequest'.
func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbeGroupRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return 0, false
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbeGroupRequest))
}

type UpdateProbeGroupRequest_FieldSubPathValue struct {
	UpdateProbeGroupRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbeGroupRequest_FieldPathValue = (*UpdateProbeGroupRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) AsProbeGroupPathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbeGroupRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbeGroupRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) SetTo(target **UpdateProbeGroupRequest) {
	if *target == nil {
		*target = new(UpdateProbeGroupRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).SetTo(&(*target).ProbeGroup)
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbeGroupRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeGroupRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) CompareWith(source *UpdateProbeGroupRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).CompareWith(source.GetProbeGroup())
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbeGroupRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeGroupRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbeGroupRequest))
}

// UpdateProbeGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbeGroupRequest according to their type
// Present only for array (repeated) types.
type UpdateProbeGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbeGroupRequest_FieldPath
	ContainsValue(*UpdateProbeGroupRequest) bool
}

// ParseUpdateProbeGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbeGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbeGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbeGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeGroupRequest_FieldPathArrayItemValue = (*UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbeGroupRequest as interface{}
func (fpaiv *UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbeGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbeGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbeGroupRequest'
func (fpaiv *UpdateProbeGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbeGroupRequest) bool {
	slice := fpaiv.UpdateProbeGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbeGroupRequest_FieldSubPathArrayItemValue struct {
	UpdateProbeGroupRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbeGroupRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbeGroupRequest_FieldSubPathArrayItemValue) AsProbeGroupPathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbeGroupRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbeGroupRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbeGroupRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbeGroupRequest'
func (fpaivs *UpdateProbeGroupRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbeGroupRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		return fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue).ContainsValue(source.GetProbeGroup())
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbeGroupRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbeGroupRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbeGroupRequest fields according to their type
type UpdateProbeGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbeGroupRequest_FieldPath
}

func ParseUpdateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbeGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbeGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbeGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbeGroupRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbeGroupRequest_FieldPathArrayOfValues = (*UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbeGroupRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbeGroupRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues) AsProbeGroupArrayOfValues() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup)
	return res, ok
}
func (fpaov *UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbeGroupRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbeGroupRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbeGroupRequest_CAS)
	return res, ok
}

type UpdateProbeGroupRequest_FieldSubPathArrayOfValues struct {
	UpdateProbeGroupRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbeGroupRequest_FieldPathArrayOfValues = (*UpdateProbeGroupRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbeGroupRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbeGroupRequest_FieldSubPathArrayOfValues) AsProbeGroupPathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbeGroupRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbeGroupRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbeGroupRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbeGroupRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbeGroupRequestCAS_FieldPathSelector
	Get(source *UpdateProbeGroupRequest_CAS) []interface{}
	GetSingle(source *UpdateProbeGroupRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbeGroupRequest_CAS)

	// Those methods build corresponding UpdateProbeGroupRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayItemValue
}

type UpdateProbeGroupRequestCAS_FieldPathSelector int32

const (
	UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState UpdateProbeGroupRequestCAS_FieldPathSelector = 0
	UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask        UpdateProbeGroupRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbeGroupRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", s))
	}
}

func BuildUpdateProbeGroupRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbeGroupRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbeGroupRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeGroupRequestCAS_FieldSubPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbeGroupRequest_CAS", fp)
}

func ParseUpdateProbeGroupRequestCAS_FieldPath(rawField string) (UpdateProbeGroupRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbeGroupRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbeGroupRequestCAS_FieldPath(rawField string) UpdateProbeGroupRequestCAS_FieldPath {
	fp, err := ParseUpdateProbeGroupRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbeGroupRequestCAS_FieldTerminalPath struct {
	selector UpdateProbeGroupRequestCAS_FieldPathSelector
}

var _ UpdateProbeGroupRequestCAS_FieldPath = (*UpdateProbeGroupRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) Selector() UpdateProbeGroupRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbeGroupRequest_CAS
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) Get(source *UpdateProbeGroupRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbeGroupRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbeGroupRequest_CAS
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbeGroupRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbeGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return (*probe_group.ProbeGroup)(nil)
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbeGroupRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbeGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbeGroupRequestCAS_FieldTerminalPathValue{UpdateProbeGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbeGroupRequestCAS_FieldTerminalPathValue{UpdateProbeGroupRequestCAS_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup)}
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeGroupRequestCAS_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeGroupRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbeGroupRequestCAS_FieldSubPath struct {
	selector UpdateProbeGroupRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbeGroupRequestCAS_FieldPath = (*UpdateProbeGroupRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) Selector() UpdateProbeGroupRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbeGroupRequest_CAS
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) Get(source *UpdateProbeGroupRequest_CAS) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbeGroupFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbeGroupRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbeGroupRequest_CAS
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) GetSingle(source *UpdateProbeGroupRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbeGroupRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) ClearValue(item *UpdateProbeGroupRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbeGroupRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathValue {
	return &UpdateProbeGroupRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbeGroupRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbeGroupRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbeGroupRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbeGroupRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbeGroupRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbeGroupRequestCAS_FieldPathValue interface {
	UpdateProbeGroupRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbeGroupRequest_CAS)
	CompareWith(*UpdateProbeGroupRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbeGroupRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbeGroupRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbeGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbeGroupRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbeGroupRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbeGroupRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbeGroupRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbeGroupRequestCAS_FieldTerminalPathValue struct {
	UpdateProbeGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeGroupRequestCAS_FieldPathValue = (*UpdateProbeGroupRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup)
	return res, ok
}
func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbeGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbeGroupRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probe_group.ProbeGroup)
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeGroupRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbeGroupRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbeGroupRequest_CAS'.
func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbeGroupRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeGroupRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbeGroupRequest_CAS))
}

type UpdateProbeGroupRequestCAS_FieldSubPathValue struct {
	UpdateProbeGroupRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbeGroupRequestCAS_FieldPathValue = (*UpdateProbeGroupRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbeGroupRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbeGroupRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeGroupRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbeGroupRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeGroupRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbeGroupRequest_CAS))
}

// UpdateProbeGroupRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbeGroupRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbeGroupRequestCAS_FieldPath
	ContainsValue(*UpdateProbeGroupRequest_CAS) bool
}

// ParseUpdateProbeGroupRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbeGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbeGroupRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbeGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbeGroupRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbeGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbeGroupRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbeGroupRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbeGroupRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeGroupRequestCAS_FieldPathArrayItemValue = (*UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbeGroupRequest_CAS as interface{}
func (fpaiv *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbeGroupRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbeGroupRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbeGroupRequest_CAS) bool {
	slice := fpaiv.UpdateProbeGroupRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbeGroupRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbeGroupRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbeGroupRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbeGroupRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbeGroupRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbeGroupRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeGroupRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbeGroupRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbeGroupRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbeGroupRequestCAS_FieldPath
}

func ParseUpdateProbeGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbeGroupRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbeGroupRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbeGroupRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbeGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbeGroupRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbeGroupRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbeGroupRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbeGroupRequestCAS_FieldPathArrayOfValues = (*UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup)
	return res, ok
}
func (fpaov *UpdateProbeGroupRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}

type UpdateProbeGroupRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbeGroupRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbeGroupRequestCAS_FieldPathArrayOfValues = (*UpdateProbeGroupRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbeGroupRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbeGroupRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbeGroupRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbeGroupRequest_FieldPathSelector
	Get(source *DeleteProbeGroupRequest) []interface{}
	GetSingle(source *DeleteProbeGroupRequest) (interface{}, bool)
	ClearValue(item *DeleteProbeGroupRequest)

	// Those methods build corresponding DeleteProbeGroupRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbeGroupRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbeGroupRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbeGroupRequest_FieldPathArrayItemValue
}

type DeleteProbeGroupRequest_FieldPathSelector int32

const (
	DeleteProbeGroupRequest_FieldPathSelectorName DeleteProbeGroupRequest_FieldPathSelector = 0
)

func (s DeleteProbeGroupRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", s))
	}
}

func BuildDeleteProbeGroupRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbeGroupRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbeGroupRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbeGroupRequest_FieldTerminalPath{selector: DeleteProbeGroupRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbeGroupRequest", fp)
}

func ParseDeleteProbeGroupRequest_FieldPath(rawField string) (DeleteProbeGroupRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbeGroupRequest_FieldPath(fp)
}

func MustParseDeleteProbeGroupRequest_FieldPath(rawField string) DeleteProbeGroupRequest_FieldPath {
	fp, err := ParseDeleteProbeGroupRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbeGroupRequest_FieldTerminalPath struct {
	selector DeleteProbeGroupRequest_FieldPathSelector
}

var _ DeleteProbeGroupRequest_FieldPath = (*DeleteProbeGroupRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) Selector() DeleteProbeGroupRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbeGroupRequest
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) Get(source *DeleteProbeGroupRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbeGroupRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbeGroupRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbeGroupRequest
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) GetSingle(source *DeleteProbeGroupRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbeGroupRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		return (*probe_group.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) ClearValue(item *DeleteProbeGroupRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbeGroupRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbeGroupRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbeGroupRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbeGroupRequest_FieldPathSelectorName
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbeGroupRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		return &DeleteProbeGroupRequest_FieldTerminalPathValue{DeleteProbeGroupRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbeGroupRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues{DeleteProbeGroupRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		return &DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues{DeleteProbeGroupRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbeGroupRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeGroupRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbeGroupRequest_FieldPathValue allows storing values for DeleteProbeGroupRequest fields according to their type
type DeleteProbeGroupRequest_FieldPathValue interface {
	DeleteProbeGroupRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbeGroupRequest)
	CompareWith(*DeleteProbeGroupRequest) (cmp int, comparable bool)
}

func ParseDeleteProbeGroupRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbeGroupRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeGroupRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbeGroupRequest_FieldPathValue), nil
}

func MustParseDeleteProbeGroupRequest_FieldPathValue(pathStr, valueStr string) DeleteProbeGroupRequest_FieldPathValue {
	fpv, err := ParseDeleteProbeGroupRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbeGroupRequest_FieldTerminalPathValue struct {
	DeleteProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbeGroupRequest_FieldPathValue = (*DeleteProbeGroupRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbeGroupRequest' as interface{}
func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) AsNameValue() (*probe_group.Reference, bool) {
	res, ok := fpv.value.(*probe_group.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbeGroupRequest
func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) SetTo(target **DeleteProbeGroupRequest) {
	if *target == nil {
		*target = new(DeleteProbeGroupRequest)
	}
	switch fpv.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe_group.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbeGroupRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbeGroupRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbeGroupRequest'.
func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbeGroupRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe_group.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeGroupRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbeGroupRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbeGroupRequest))
}

// DeleteProbeGroupRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbeGroupRequest according to their type
// Present only for array (repeated) types.
type DeleteProbeGroupRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbeGroupRequest_FieldPath
	ContainsValue(*DeleteProbeGroupRequest) bool
}

// ParseDeleteProbeGroupRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbeGroupRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeGroupRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbeGroupRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbeGroupRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbeGroupRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbeGroupRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbeGroupRequest_FieldPathArrayItemValue = (*DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbeGroupRequest as interface{}
func (fpaiv *DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbeGroupRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbeGroupRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbeGroupRequest'
func (fpaiv *DeleteProbeGroupRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbeGroupRequest) bool {
	slice := fpaiv.DeleteProbeGroupRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbeGroupRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbeGroupRequest fields according to their type
type DeleteProbeGroupRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbeGroupRequest_FieldPath
}

func ParseDeleteProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbeGroupRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbeGroupRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeGroupRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbeGroupRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbeGroupRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbeGroupRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbeGroupRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbeGroupRequest_FieldPathArrayOfValues = (*DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbeGroupRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe_group.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbeGroupRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([]*probe_group.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbeGroupsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbeGroupsRequest_FieldPathSelector
	Get(source *SearchProbeGroupsRequest) []interface{}
	GetSingle(source *SearchProbeGroupsRequest) (interface{}, bool)
	ClearValue(item *SearchProbeGroupsRequest)

	// Those methods build corresponding SearchProbeGroupsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbeGroupsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbeGroupsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbeGroupsRequest_FieldPathArrayItemValue
}

type SearchProbeGroupsRequest_FieldPathSelector int32

const (
	SearchProbeGroupsRequest_FieldPathSelectorParent    SearchProbeGroupsRequest_FieldPathSelector = 0
	SearchProbeGroupsRequest_FieldPathSelectorPageSize  SearchProbeGroupsRequest_FieldPathSelector = 1
	SearchProbeGroupsRequest_FieldPathSelectorPageToken SearchProbeGroupsRequest_FieldPathSelector = 2
	SearchProbeGroupsRequest_FieldPathSelectorOrderBy   SearchProbeGroupsRequest_FieldPathSelector = 3
	SearchProbeGroupsRequest_FieldPathSelectorFilter    SearchProbeGroupsRequest_FieldPathSelector = 4
	SearchProbeGroupsRequest_FieldPathSelectorFieldMask SearchProbeGroupsRequest_FieldPathSelector = 5
	SearchProbeGroupsRequest_FieldPathSelectorView      SearchProbeGroupsRequest_FieldPathSelector = 6
	SearchProbeGroupsRequest_FieldPathSelectorPhrase    SearchProbeGroupsRequest_FieldPathSelector = 7
)

func (s SearchProbeGroupsRequest_FieldPathSelector) String() string {
	switch s {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		return "parent"
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		return "view"
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", s))
	}
}

func BuildSearchProbeGroupsRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchProbeGroupsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbeGroupsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbeGroupsRequest", fp)
}

func ParseSearchProbeGroupsRequest_FieldPath(rawField string) (SearchProbeGroupsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbeGroupsRequest_FieldPath(fp)
}

func MustParseSearchProbeGroupsRequest_FieldPath(rawField string) SearchProbeGroupsRequest_FieldPath {
	fp, err := ParseSearchProbeGroupsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbeGroupsRequest_FieldTerminalPath struct {
	selector SearchProbeGroupsRequest_FieldPathSelector
}

var _ SearchProbeGroupsRequest_FieldPath = (*SearchProbeGroupsRequest_FieldTerminalPath)(nil)

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) Selector() SearchProbeGroupsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbeGroupsRequest
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) Get(source *SearchProbeGroupsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbeGroupsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchProbeGroupsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchProbeGroupsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbeGroupsRequest))
}

// GetSingle returns value pointed by specific field of from source SearchProbeGroupsRequest
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) GetSingle(source *SearchProbeGroupsRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbeGroupsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		return (*probe_group.ParentName)(nil)
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		return (*probe_group.PagerCursor)(nil)
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return (*probe_group.OrderBy)(nil)
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		return (*probe_group.Filter)(nil)
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return (*probe_group.ProbeGroup_FieldMask)(nil)
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) ClearValue(item *SearchProbeGroupsRequest) {
	if item != nil {
		switch fp.selector {
		case SearchProbeGroupsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchProbeGroupsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchProbeGroupsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbeGroupsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbeGroupsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbeGroupsRequest_FieldPathSelectorParent ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorFilter ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorView ||
		fp.selector == SearchProbeGroupsRequest_FieldPathSelectorPhrase
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithIValue(value interface{}) SearchProbeGroupsRequest_FieldPathValue {
	switch fp.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ParentName)}
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.OrderBy)}
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.Filter)}
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup_FieldMask)}
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		return &SearchProbeGroupsRequest_FieldTerminalPathValue{SearchProbeGroupsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov := &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ParentName)}
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.OrderBy)}
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.Filter)}
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]*probe_group.ProbeGroup_FieldMask)}
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		return &SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues{SearchProbeGroupsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbeGroupsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchProbeGroupsRequest_FieldPathValue allows storing values for SearchProbeGroupsRequest fields according to their type
type SearchProbeGroupsRequest_FieldPathValue interface {
	SearchProbeGroupsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbeGroupsRequest)
	CompareWith(*SearchProbeGroupsRequest) (cmp int, comparable bool)
}

func ParseSearchProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) (SearchProbeGroupsRequest_FieldPathValue, error) {
	fp, err := ParseSearchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbeGroupsRequest_FieldPathValue), nil
}

func MustParseSearchProbeGroupsRequest_FieldPathValue(pathStr, valueStr string) SearchProbeGroupsRequest_FieldPathValue {
	fpv, err := ParseSearchProbeGroupsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbeGroupsRequest_FieldTerminalPathValue struct {
	SearchProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbeGroupsRequest_FieldPathValue = (*SearchProbeGroupsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbeGroupsRequest' as interface{}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsParentValue() (*probe_group.ParentName, bool) {
	res, ok := fpv.value.(*probe_group.ParentName)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsOrderByValue() (*probe_group.OrderBy, bool) {
	res, ok := fpv.value.(*probe_group.OrderBy)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsFilterValue() (*probe_group.Filter, bool) {
	res, ok := fpv.value.(*probe_group.Filter)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpv.value.(*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbeGroupsRequest
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) SetTo(target **SearchProbeGroupsRequest) {
	if *target == nil {
		*target = new(SearchProbeGroupsRequest)
	}
	switch fpv.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe_group.ParentName)
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe_group.PagerCursor)
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe_group.OrderBy)
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe_group.Filter)
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe_group.ProbeGroup_FieldMask)
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbeGroupsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbeGroupsRequest_FieldTerminalPathValue' with the value under path in 'SearchProbeGroupsRequest'.
func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) CompareWith(source *SearchProbeGroupsRequest) (int, bool) {
	switch fpv.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe_group.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbeGroupsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbeGroupsRequest))
}

// SearchProbeGroupsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbeGroupsRequest according to their type
// Present only for array (repeated) types.
type SearchProbeGroupsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbeGroupsRequest_FieldPath
	ContainsValue(*SearchProbeGroupsRequest) bool
}

// ParseSearchProbeGroupsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbeGroupsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbeGroupsRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbeGroupsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbeGroupsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue struct {
	SearchProbeGroupsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbeGroupsRequest_FieldPathArrayItemValue = (*SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbeGroupsRequest as interface{}
func (fpaiv *SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbeGroupsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbeGroupsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbeGroupsRequest'
func (fpaiv *SearchProbeGroupsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbeGroupsRequest) bool {
	slice := fpaiv.SearchProbeGroupsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchProbeGroupsRequest_FieldPathArrayOfValues allows storing slice of values for SearchProbeGroupsRequest fields according to their type
type SearchProbeGroupsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbeGroupsRequest_FieldPath
}

func ParseSearchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbeGroupsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbeGroupsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbeGroupsRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbeGroupsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbeGroupsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues struct {
	SearchProbeGroupsRequest_FieldTerminalPath
	values interface{}
}

var _ SearchProbeGroupsRequest_FieldPathArrayOfValues = (*SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbeGroupsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe_group.ParentName) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe_group.OrderBy) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe_group.Filter) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe_group.ProbeGroup_FieldMask) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe_group.ParentName, bool) {
	res, ok := fpaov.values.([]*probe_group.ParentName)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe_group.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe_group.OrderBy)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe_group.Filter, bool) {
	res, ok := fpaov.values.([]*probe_group.Filter)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe_group.ProbeGroup_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe_group.ProbeGroup_FieldMask)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchProbeGroupsRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbeGroupsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbeGroupsResponse_FieldPathSelector
	Get(source *SearchProbeGroupsResponse) []interface{}
	GetSingle(source *SearchProbeGroupsResponse) (interface{}, bool)
	ClearValue(item *SearchProbeGroupsResponse)

	// Those methods build corresponding SearchProbeGroupsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbeGroupsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbeGroupsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbeGroupsResponse_FieldPathArrayItemValue
}

type SearchProbeGroupsResponse_FieldPathSelector int32

const (
	SearchProbeGroupsResponse_FieldPathSelectorProbeGroups       SearchProbeGroupsResponse_FieldPathSelector = 0
	SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken     SearchProbeGroupsResponse_FieldPathSelector = 1
	SearchProbeGroupsResponse_FieldPathSelectorNextPageToken     SearchProbeGroupsResponse_FieldPathSelector = 2
	SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset     SearchProbeGroupsResponse_FieldPathSelector = 3
	SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount SearchProbeGroupsResponse_FieldPathSelector = 4
)

func (s SearchProbeGroupsResponse_FieldPathSelector) String() string {
	switch s {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return "probe_groups"
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", s))
	}
}

func BuildSearchProbeGroupsResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchProbeGroupsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbeGroupsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			return &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probe_groups", "probeGroups", "probe-groups":
			if subpath, err := probe_group.BuildProbeGroup_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchProbeGroupsResponse_FieldSubPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbeGroupsResponse", fp)
}

func ParseSearchProbeGroupsResponse_FieldPath(rawField string) (SearchProbeGroupsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbeGroupsResponse_FieldPath(fp)
}

func MustParseSearchProbeGroupsResponse_FieldPath(rawField string) SearchProbeGroupsResponse_FieldPath {
	fp, err := ParseSearchProbeGroupsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbeGroupsResponse_FieldTerminalPath struct {
	selector SearchProbeGroupsResponse_FieldPathSelector
}

var _ SearchProbeGroupsResponse_FieldPath = (*SearchProbeGroupsResponse_FieldTerminalPath)(nil)

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) Selector() SearchProbeGroupsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbeGroupsResponse
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) Get(source *SearchProbeGroupsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, value := range source.GetProbeGroups() {
				values = append(values, value)
			}
		case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbeGroupsResponse))
}

// GetSingle returns value pointed by specific field of from source SearchProbeGroupsResponse
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) GetSingle(source *SearchProbeGroupsResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		res := source.GetProbeGroups()
		return res, res != nil
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return ([]*probe_group.ProbeGroup)(nil)
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return (*probe_group.PagerCursor)(nil)
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return (*probe_group.PagerCursor)(nil)
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) ClearValue(item *SearchProbeGroupsResponse) {
	if item != nil {
		switch fp.selector {
		case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
			item.ProbeGroups = nil
		case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbeGroupsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchProbeGroupsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithIValue(value interface{}) SearchProbeGroupsResponse_FieldPathValue {
	switch fp.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &SearchProbeGroupsResponse_FieldTerminalPathValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.([]*probe_group.ProbeGroup)}
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbeGroupsResponse_FieldTerminalPathValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbeGroupsResponse_FieldTerminalPathValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.PagerCursor)}
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbeGroupsResponse_FieldTerminalPathValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbeGroupsResponse_FieldTerminalPathValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov := &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([][]*probe_group.ProbeGroup)}
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]*probe_group.PagerCursor)}
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues{SearchProbeGroupsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbeGroupsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return &SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue{SearchProbeGroupsResponse_FieldTerminalPath: *fp, value: value.(*probe_group.ProbeGroup)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbeGroupsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchProbeGroupsResponse_FieldSubPath struct {
	selector SearchProbeGroupsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchProbeGroupsResponse_FieldPath = (*SearchProbeGroupsResponse_FieldSubPath)(nil)

func (fps *SearchProbeGroupsResponse_FieldSubPath) Selector() SearchProbeGroupsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchProbeGroupsResponse_FieldSubPath) AsProbeGroupsSubPath() (probe_group.ProbeGroup_FieldPath, bool) {
	res, ok := fps.subPath.(probe_group.ProbeGroup_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchProbeGroupsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchProbeGroupsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchProbeGroupsResponse
func (fps *SearchProbeGroupsResponse_FieldSubPath) Get(source *SearchProbeGroupsResponse) (values []interface{}) {
	if asProbeGroupFieldPath, ok := fps.AsProbeGroupsSubPath(); ok {
		for _, item := range source.GetProbeGroups() {
			values = append(values, asProbeGroupFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchProbeGroupsResponse))
}

// GetSingle returns value of selected field from source SearchProbeGroupsResponse
func (fps *SearchProbeGroupsResponse_FieldSubPath) GetSingle(source *SearchProbeGroupsResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		if len(source.GetProbeGroups()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeGroups()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fps.selector))
	}
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchProbeGroupsResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchProbeGroupsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) ClearValue(item *SearchProbeGroupsResponse) {
	if item != nil {
		switch fps.selector {
		case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
			for _, subItem := range item.ProbeGroups {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchProbeGroupsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchProbeGroupsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SearchProbeGroupsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithIValue(value interface{}) SearchProbeGroupsResponse_FieldPathValue {
	return &SearchProbeGroupsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchProbeGroupsResponse_FieldPathArrayOfValues {
	return &SearchProbeGroupsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchProbeGroupsResponse_FieldPathArrayItemValue {
	return &SearchProbeGroupsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchProbeGroupsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchProbeGroupsResponse_FieldPathValue allows storing values for SearchProbeGroupsResponse fields according to their type
type SearchProbeGroupsResponse_FieldPathValue interface {
	SearchProbeGroupsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbeGroupsResponse)
	CompareWith(*SearchProbeGroupsResponse) (cmp int, comparable bool)
}

func ParseSearchProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) (SearchProbeGroupsResponse_FieldPathValue, error) {
	fp, err := ParseSearchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbeGroupsResponse_FieldPathValue), nil
}

func MustParseSearchProbeGroupsResponse_FieldPathValue(pathStr, valueStr string) SearchProbeGroupsResponse_FieldPathValue {
	fpv, err := ParseSearchProbeGroupsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbeGroupsResponse_FieldTerminalPathValue struct {
	SearchProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbeGroupsResponse_FieldPathValue = (*SearchProbeGroupsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbeGroupsResponse' as interface{}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) AsProbeGroupsValue() ([]*probe_group.ProbeGroup, bool) {
	res, ok := fpv.value.([]*probe_group.ProbeGroup)
	return res, ok
}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probe_group.PagerCursor, bool) {
	res, ok := fpv.value.(*probe_group.PagerCursor)
	return res, ok
}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbeGroupsResponse
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) SetTo(target **SearchProbeGroupsResponse) {
	if *target == nil {
		*target = new(SearchProbeGroupsResponse)
	}
	switch fpv.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		(*target).ProbeGroups = fpv.value.([]*probe_group.ProbeGroup)
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe_group.PagerCursor)
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe_group.PagerCursor)
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbeGroupsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbeGroupsResponse_FieldTerminalPathValue' with the value under path in 'SearchProbeGroupsResponse'.
func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) CompareWith(source *SearchProbeGroupsResponse) (int, bool) {
	switch fpv.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbeGroupsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbeGroupsResponse))
}

type SearchProbeGroupsResponse_FieldSubPathValue struct {
	SearchProbeGroupsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchProbeGroupsResponse_FieldPathValue = (*SearchProbeGroupsResponse_FieldSubPathValue)(nil)

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) AsProbeGroupsPathValue() (probe_group.ProbeGroup_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe_group.ProbeGroup_FieldPathValue)
	return res, ok
}

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) SetTo(target **SearchProbeGroupsResponse) {
	if *target == nil {
		*target = new(SearchProbeGroupsResponse)
	}
	switch fpvs.Selector() {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbeGroupsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) CompareWith(source *SearchProbeGroupsResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbeGroupsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchProbeGroupsResponse))
}

// SearchProbeGroupsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbeGroupsResponse according to their type
// Present only for array (repeated) types.
type SearchProbeGroupsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbeGroupsResponse_FieldPath
	ContainsValue(*SearchProbeGroupsResponse) bool
}

// ParseSearchProbeGroupsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbeGroupsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbeGroupsResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbeGroupsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbeGroupsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue struct {
	SearchProbeGroupsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbeGroupsResponse_FieldPathArrayItemValue = (*SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbeGroupsResponse as interface{}
func (fpaiv *SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue) AsProbeGroupsItemValue() (*probe_group.ProbeGroup, bool) {
	res, ok := fpaiv.value.(*probe_group.ProbeGroup)
	return res, ok
}

func (fpaiv *SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbeGroupsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbeGroupsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbeGroupsResponse'
func (fpaiv *SearchProbeGroupsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbeGroupsResponse) bool {
	slice := fpaiv.SearchProbeGroupsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchProbeGroupsResponse_FieldSubPathArrayItemValue struct {
	SearchProbeGroupsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchProbeGroupsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchProbeGroupsResponse_FieldSubPathArrayItemValue) AsProbeGroupsPathItemValue() (probe_group.ProbeGroup_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe_group.ProbeGroup_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbeGroupsResponse'
func (fpaivs *SearchProbeGroupsResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchProbeGroupsResponse) bool {
	switch fpaivs.Selector() {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbeGroupsResponse: %d", fpaivs.Selector()))
	}
}

// SearchProbeGroupsResponse_FieldPathArrayOfValues allows storing slice of values for SearchProbeGroupsResponse fields according to their type
type SearchProbeGroupsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbeGroupsResponse_FieldPath
}

func ParseSearchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbeGroupsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbeGroupsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbeGroupsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbeGroupsResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbeGroupsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbeGroupsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues struct {
	SearchProbeGroupsResponse_FieldTerminalPath
	values interface{}
}

var _ SearchProbeGroupsResponse_FieldPathArrayOfValues = (*SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
		for _, v := range fpaov.values.([][]*probe_group.ProbeGroup) {
			values = append(values, v)
		}
	case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe_group.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsProbeGroupsArrayOfValues() ([][]*probe_group.ProbeGroup, bool) {
	res, ok := fpaov.values.([][]*probe_group.ProbeGroup)
	return res, ok
}
func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe_group.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe_group.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbeGroupsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchProbeGroupsResponse_FieldSubPathArrayOfValues struct {
	SearchProbeGroupsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchProbeGroupsResponse_FieldPathArrayOfValues = (*SearchProbeGroupsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchProbeGroupsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchProbeGroupsResponse_FieldSubPathArrayOfValues) AsProbeGroupsPathArrayOfValues() (probe_group.ProbeGroup_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe_group.ProbeGroup_FieldPathArrayOfValues)
	return res, ok
}
