// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_group_service.proto
// DO NOT EDIT!!!

package probe_group_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

func (o *GetProbeGroupRequest) GotenObjectExt() {}

func (o *GetProbeGroupRequest) MakeFullFieldMask() *GetProbeGroupRequest_FieldMask {
	return FullGetProbeGroupRequest_FieldMask()
}

func (o *GetProbeGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbeGroupRequest_FieldMask()
}

func (o *GetProbeGroupRequest) MakeDiffFieldMask(other *GetProbeGroupRequest) *GetProbeGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbeGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbeGroupRequest_FieldMask()
	}

	res := &GetProbeGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbeGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbeGroupRequest))
}

func (o *GetProbeGroupRequest) Clone() *GetProbeGroupRequest {
	if o == nil {
		return nil
	}
	result := &GetProbeGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbeGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbeGroupRequest) Merge(source *GetProbeGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbeGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbeGroupRequest))
}

func (o *BatchGetProbeGroupsRequest) GotenObjectExt() {}

func (o *BatchGetProbeGroupsRequest) MakeFullFieldMask() *BatchGetProbeGroupsRequest_FieldMask {
	return FullBatchGetProbeGroupsRequest_FieldMask()
}

func (o *BatchGetProbeGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbeGroupsRequest_FieldMask()
}

func (o *BatchGetProbeGroupsRequest) MakeDiffFieldMask(other *BatchGetProbeGroupsRequest) *BatchGetProbeGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbeGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbeGroupsRequest_FieldMask()
	}

	res := &BatchGetProbeGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbeGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbeGroupsRequest))
}

func (o *BatchGetProbeGroupsRequest) Clone() *BatchGetProbeGroupsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbeGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe_group.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*probe_group.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probe_group.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbeGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbeGroupsRequest) Merge(source *BatchGetProbeGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe_group.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probe_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbeGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbeGroupsRequest))
}

func (o *BatchGetProbeGroupsResponse) GotenObjectExt() {}

func (o *BatchGetProbeGroupsResponse) MakeFullFieldMask() *BatchGetProbeGroupsResponse_FieldMask {
	return FullBatchGetProbeGroupsResponse_FieldMask()
}

func (o *BatchGetProbeGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbeGroupsResponse_FieldMask()
}

func (o *BatchGetProbeGroupsResponse) MakeDiffFieldMask(other *BatchGetProbeGroupsResponse) *BatchGetProbeGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbeGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbeGroupsResponse_FieldMask()
	}

	res := &BatchGetProbeGroupsResponse_FieldMask{}

	if len(o.GetProbeGroups()) == len(other.GetProbeGroups()) {
		for i, lValue := range o.GetProbeGroups() {
			rValue := other.GetProbeGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbeGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbeGroupsResponse))
}

func (o *BatchGetProbeGroupsResponse) Clone() *BatchGetProbeGroupsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbeGroupsResponse{}
	result.ProbeGroups = make([]*probe_group.ProbeGroup, len(o.ProbeGroups))
	for i, sourceValue := range o.ProbeGroups {
		result.ProbeGroups[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probe_group.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probe_group.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbeGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbeGroupsResponse) Merge(source *BatchGetProbeGroupsResponse) {
	for _, sourceValue := range source.GetProbeGroups() {
		exists := false
		for _, currentValue := range o.ProbeGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.ProbeGroup
			if sourceValue != nil {
				newDstElement = new(probe_group.ProbeGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbeGroups = append(o.ProbeGroups, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probe_group.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbeGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbeGroupsResponse))
}

func (o *ListProbeGroupsRequest) GotenObjectExt() {}

func (o *ListProbeGroupsRequest) MakeFullFieldMask() *ListProbeGroupsRequest_FieldMask {
	return FullListProbeGroupsRequest_FieldMask()
}

func (o *ListProbeGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbeGroupsRequest_FieldMask()
}

func (o *ListProbeGroupsRequest) MakeDiffFieldMask(other *ListProbeGroupsRequest) *ListProbeGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbeGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbeGroupsRequest_FieldMask()
	}

	res := &ListProbeGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProbeGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbeGroupsRequest))
}

func (o *ListProbeGroupsRequest) Clone() *ListProbeGroupsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbeGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe_group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProbeGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbeGroupsRequest) Merge(source *ListProbeGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe_group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProbeGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbeGroupsRequest))
}

func (o *ListProbeGroupsResponse) GotenObjectExt() {}

func (o *ListProbeGroupsResponse) MakeFullFieldMask() *ListProbeGroupsResponse_FieldMask {
	return FullListProbeGroupsResponse_FieldMask()
}

func (o *ListProbeGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbeGroupsResponse_FieldMask()
}

func (o *ListProbeGroupsResponse) MakeDiffFieldMask(other *ListProbeGroupsResponse) *ListProbeGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbeGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbeGroupsResponse_FieldMask()
	}

	res := &ListProbeGroupsResponse_FieldMask{}

	if len(o.GetProbeGroups()) == len(other.GetProbeGroups()) {
		for i, lValue := range o.GetProbeGroups() {
			rValue := other.GetProbeGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProbeGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbeGroupsResponse))
}

func (o *ListProbeGroupsResponse) Clone() *ListProbeGroupsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbeGroupsResponse{}
	result.ProbeGroups = make([]*probe_group.ProbeGroup, len(o.ProbeGroups))
	for i, sourceValue := range o.ProbeGroups {
		result.ProbeGroups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProbeGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbeGroupsResponse) Merge(source *ListProbeGroupsResponse) {
	for _, sourceValue := range source.GetProbeGroups() {
		exists := false
		for _, currentValue := range o.ProbeGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.ProbeGroup
			if sourceValue != nil {
				newDstElement = new(probe_group.ProbeGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbeGroups = append(o.ProbeGroups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProbeGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbeGroupsResponse))
}

func (o *WatchProbeGroupRequest) GotenObjectExt() {}

func (o *WatchProbeGroupRequest) MakeFullFieldMask() *WatchProbeGroupRequest_FieldMask {
	return FullWatchProbeGroupRequest_FieldMask()
}

func (o *WatchProbeGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeGroupRequest_FieldMask()
}

func (o *WatchProbeGroupRequest) MakeDiffFieldMask(other *WatchProbeGroupRequest) *WatchProbeGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeGroupRequest_FieldMask()
	}

	res := &WatchProbeGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbeGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeGroupRequest))
}

func (o *WatchProbeGroupRequest) Clone() *WatchProbeGroupRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbeGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbeGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeGroupRequest) Merge(source *WatchProbeGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbeGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeGroupRequest))
}

func (o *WatchProbeGroupResponse) GotenObjectExt() {}

func (o *WatchProbeGroupResponse) MakeFullFieldMask() *WatchProbeGroupResponse_FieldMask {
	return FullWatchProbeGroupResponse_FieldMask()
}

func (o *WatchProbeGroupResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeGroupResponse_FieldMask()
}

func (o *WatchProbeGroupResponse) MakeDiffFieldMask(other *WatchProbeGroupResponse) *WatchProbeGroupResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeGroupResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeGroupResponse_FieldMask()
	}

	res := &WatchProbeGroupResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbeGroupResponse_FieldTerminalPath{selector: WatchProbeGroupResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbeGroupResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeGroupResponse))
}

func (o *WatchProbeGroupResponse) Clone() *WatchProbeGroupResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbeGroupResponse{}
	result.Change = proto.Clone(o.Change).(*probe_group.ProbeGroupChange)
	return result
}

func (o *WatchProbeGroupResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeGroupResponse) Merge(source *WatchProbeGroupResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probe_group.ProbeGroupChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbeGroupResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeGroupResponse))
}

func (o *WatchProbeGroupsRequest) GotenObjectExt() {}

func (o *WatchProbeGroupsRequest) MakeFullFieldMask() *WatchProbeGroupsRequest_FieldMask {
	return FullWatchProbeGroupsRequest_FieldMask()
}

func (o *WatchProbeGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeGroupsRequest_FieldMask()
}

func (o *WatchProbeGroupsRequest) MakeDiffFieldMask(other *WatchProbeGroupsRequest) *WatchProbeGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeGroupsRequest_FieldMask()
	}

	res := &WatchProbeGroupsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbeGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeGroupsRequest))
}

func (o *WatchProbeGroupsRequest) Clone() *WatchProbeGroupsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbeGroupsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbeGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeGroupsRequest) Merge(source *WatchProbeGroupsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbeGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeGroupsRequest))
}

func (o *WatchProbeGroupsResponse) GotenObjectExt() {}

func (o *WatchProbeGroupsResponse) MakeFullFieldMask() *WatchProbeGroupsResponse_FieldMask {
	return FullWatchProbeGroupsResponse_FieldMask()
}

func (o *WatchProbeGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeGroupsResponse_FieldMask()
}

func (o *WatchProbeGroupsResponse) MakeDiffFieldMask(other *WatchProbeGroupsResponse) *WatchProbeGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeGroupsResponse_FieldMask()
	}

	res := &WatchProbeGroupsResponse_FieldMask{}

	if len(o.GetProbeGroupChanges()) == len(other.GetProbeGroupChanges()) {
		for i, lValue := range o.GetProbeGroupChanges() {
			rValue := other.GetProbeGroupChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldSubPath{selector: WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbeGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeGroupsResponse))
}

func (o *WatchProbeGroupsResponse) Clone() *WatchProbeGroupsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbeGroupsResponse{}
	result.ProbeGroupChanges = make([]*probe_group.ProbeGroupChange, len(o.ProbeGroupChanges))
	for i, sourceValue := range o.ProbeGroupChanges {
		result.ProbeGroupChanges[i] = proto.Clone(sourceValue).(*probe_group.ProbeGroupChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbeGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeGroupsResponse) Merge(source *WatchProbeGroupsResponse) {
	for _, sourceValue := range source.GetProbeGroupChanges() {
		exists := false
		for _, currentValue := range o.ProbeGroupChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.ProbeGroupChange
			if sourceValue != nil {
				newDstElement = new(probe_group.ProbeGroupChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbeGroupChanges = append(o.ProbeGroupChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbeGroupsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbeGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeGroupsResponse))
}

func (o *WatchProbeGroupsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbeGroupsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbeGroupsResponse_PageTokenChange_FieldMask {
	return FullWatchProbeGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbeGroupsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeGroupsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbeGroupsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbeGroupsResponse_PageTokenChange) *WatchProbeGroupsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeGroupsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbeGroupsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeGroupsResponse_PageTokenChange))
}

func (o *WatchProbeGroupsResponse_PageTokenChange) Clone() *WatchProbeGroupsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbeGroupsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbeGroupsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeGroupsResponse_PageTokenChange) Merge(source *WatchProbeGroupsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbeGroupsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

func (o *CreateProbeGroupRequest) GotenObjectExt() {}

func (o *CreateProbeGroupRequest) MakeFullFieldMask() *CreateProbeGroupRequest_FieldMask {
	return FullCreateProbeGroupRequest_FieldMask()
}

func (o *CreateProbeGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbeGroupRequest_FieldMask()
}

func (o *CreateProbeGroupRequest) MakeDiffFieldMask(other *CreateProbeGroupRequest) *CreateProbeGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbeGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbeGroupRequest_FieldMask()
	}

	res := &CreateProbeGroupRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbeGroup().MakeDiffFieldMask(other.GetProbeGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbeGroupRequest_FieldSubPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbeGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbeGroupRequest))
}

func (o *CreateProbeGroupRequest) Clone() *CreateProbeGroupRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbeGroupRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe_group.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbeGroup = o.ProbeGroup.Clone()
	return result
}

func (o *CreateProbeGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbeGroupRequest) Merge(source *CreateProbeGroupRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe_group.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbeGroup() != nil {
		if o.ProbeGroup == nil {
			o.ProbeGroup = new(probe_group.ProbeGroup)
		}
		o.ProbeGroup.Merge(source.GetProbeGroup())
	}
}

func (o *CreateProbeGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbeGroupRequest))
}

func (o *UpdateProbeGroupRequest) GotenObjectExt() {}

func (o *UpdateProbeGroupRequest) MakeFullFieldMask() *UpdateProbeGroupRequest_FieldMask {
	return FullUpdateProbeGroupRequest_FieldMask()
}

func (o *UpdateProbeGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbeGroupRequest_FieldMask()
}

func (o *UpdateProbeGroupRequest) MakeDiffFieldMask(other *UpdateProbeGroupRequest) *UpdateProbeGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbeGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbeGroupRequest_FieldMask()
	}

	res := &UpdateProbeGroupRequest_FieldMask{}
	{
		subMask := o.GetProbeGroup().MakeDiffFieldMask(other.GetProbeGroup())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbeGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbeGroupRequest))
}

func (o *UpdateProbeGroupRequest) Clone() *UpdateProbeGroupRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbeGroupRequest{}
	result.ProbeGroup = o.ProbeGroup.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probe_group.ProbeGroup_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbeGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbeGroupRequest) Merge(source *UpdateProbeGroupRequest) {
	if source.GetProbeGroup() != nil {
		if o.ProbeGroup == nil {
			o.ProbeGroup = new(probe_group.ProbeGroup)
		}
		o.ProbeGroup.Merge(source.GetProbeGroup())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbeGroupRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbeGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbeGroupRequest))
}

func (o *UpdateProbeGroupRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbeGroupRequest_CAS) MakeFullFieldMask() *UpdateProbeGroupRequest_CAS_FieldMask {
	return FullUpdateProbeGroupRequest_CAS_FieldMask()
}

func (o *UpdateProbeGroupRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbeGroupRequest_CAS_FieldMask()
}

func (o *UpdateProbeGroupRequest_CAS) MakeDiffFieldMask(other *UpdateProbeGroupRequest_CAS) *UpdateProbeGroupRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbeGroupRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbeGroupRequest_CAS_FieldMask()
	}

	res := &UpdateProbeGroupRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeGroupRequestCAS_FieldSubPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbeGroupRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbeGroupRequest_CAS))
}

func (o *UpdateProbeGroupRequest_CAS) Clone() *UpdateProbeGroupRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbeGroupRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	return result
}

func (o *UpdateProbeGroupRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbeGroupRequest_CAS) Merge(source *UpdateProbeGroupRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probe_group.ProbeGroup)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbeGroupRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbeGroupRequest_CAS))
}

func (o *DeleteProbeGroupRequest) GotenObjectExt() {}

func (o *DeleteProbeGroupRequest) MakeFullFieldMask() *DeleteProbeGroupRequest_FieldMask {
	return FullDeleteProbeGroupRequest_FieldMask()
}

func (o *DeleteProbeGroupRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbeGroupRequest_FieldMask()
}

func (o *DeleteProbeGroupRequest) MakeDiffFieldMask(other *DeleteProbeGroupRequest) *DeleteProbeGroupRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbeGroupRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbeGroupRequest_FieldMask()
	}

	res := &DeleteProbeGroupRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbeGroupRequest_FieldTerminalPath{selector: DeleteProbeGroupRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbeGroupRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbeGroupRequest))
}

func (o *DeleteProbeGroupRequest) Clone() *DeleteProbeGroupRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbeGroupRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe_group.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbeGroupRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbeGroupRequest) Merge(source *DeleteProbeGroupRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe_group.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbeGroupRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbeGroupRequest))
}

func (o *SearchProbeGroupsRequest) GotenObjectExt() {}

func (o *SearchProbeGroupsRequest) MakeFullFieldMask() *SearchProbeGroupsRequest_FieldMask {
	return FullSearchProbeGroupsRequest_FieldMask()
}

func (o *SearchProbeGroupsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbeGroupsRequest_FieldMask()
}

func (o *SearchProbeGroupsRequest) MakeDiffFieldMask(other *SearchProbeGroupsRequest) *SearchProbeGroupsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbeGroupsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbeGroupsRequest_FieldMask()
	}

	res := &SearchProbeGroupsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbeGroupsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbeGroupsRequest))
}

func (o *SearchProbeGroupsRequest) Clone() *SearchProbeGroupsRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbeGroupsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe_group.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe_group.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe_group.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe_group.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe_group.ProbeGroup_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbeGroupsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbeGroupsRequest) Merge(source *SearchProbeGroupsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe_group.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe_group.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe_group.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe_group.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe_group.ProbeGroup_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbeGroupsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbeGroupsRequest))
}

func (o *SearchProbeGroupsResponse) GotenObjectExt() {}

func (o *SearchProbeGroupsResponse) MakeFullFieldMask() *SearchProbeGroupsResponse_FieldMask {
	return FullSearchProbeGroupsResponse_FieldMask()
}

func (o *SearchProbeGroupsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbeGroupsResponse_FieldMask()
}

func (o *SearchProbeGroupsResponse) MakeDiffFieldMask(other *SearchProbeGroupsResponse) *SearchProbeGroupsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbeGroupsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbeGroupsResponse_FieldMask()
	}

	res := &SearchProbeGroupsResponse_FieldMask{}

	if len(o.GetProbeGroups()) == len(other.GetProbeGroups()) {
		for i, lValue := range o.GetProbeGroups() {
			rValue := other.GetProbeGroups()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbeGroupsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbeGroupsResponse))
}

func (o *SearchProbeGroupsResponse) Clone() *SearchProbeGroupsResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbeGroupsResponse{}
	result.ProbeGroups = make([]*probe_group.ProbeGroup, len(o.ProbeGroups))
	for i, sourceValue := range o.ProbeGroups {
		result.ProbeGroups[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe_group.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe_group.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbeGroupsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbeGroupsResponse) Merge(source *SearchProbeGroupsResponse) {
	for _, sourceValue := range source.GetProbeGroups() {
		exists := false
		for _, currentValue := range o.ProbeGroups {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe_group.ProbeGroup
			if sourceValue != nil {
				newDstElement = new(probe_group.ProbeGroup)
				newDstElement.Merge(sourceValue)
			}
			o.ProbeGroups = append(o.ProbeGroups, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe_group.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe_group.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbeGroupsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbeGroupsResponse))
}
