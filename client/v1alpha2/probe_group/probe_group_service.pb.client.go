// Code generated by protoc-gen-goten-client
// API: ProbeGroupService
// DO NOT EDIT!!!

package probe_group_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probe_group.ProbeGroup{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbeGroupServiceClient is the client API for ProbeGroupService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbeGroupServiceClient interface {
	GetProbeGroup(ctx context.Context, in *GetProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error)
	BatchGetProbeGroups(ctx context.Context, in *BatchGetProbeGroupsRequest, opts ...grpc.CallOption) (*BatchGetProbeGroupsResponse, error)
	ListProbeGroups(ctx context.Context, in *ListProbeGroupsRequest, opts ...grpc.CallOption) (*ListProbeGroupsResponse, error)
	WatchProbeGroup(ctx context.Context, in *WatchProbeGroupRequest, opts ...grpc.CallOption) (WatchProbeGroupClientStream, error)
	WatchProbeGroups(ctx context.Context, in *WatchProbeGroupsRequest, opts ...grpc.CallOption) (WatchProbeGroupsClientStream, error)
	CreateProbeGroup(ctx context.Context, in *CreateProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error)
	UpdateProbeGroup(ctx context.Context, in *UpdateProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error)
	DeleteProbeGroup(ctx context.Context, in *DeleteProbeGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchProbeGroups(ctx context.Context, in *SearchProbeGroupsRequest, opts ...grpc.CallOption) (*SearchProbeGroupsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbeGroupServiceClient(cc grpc.ClientConnInterface) ProbeGroupServiceClient {
	return &client{cc}
}

func (c *client) GetProbeGroup(ctx context.Context, in *GetProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error) {
	out := new(probe_group.ProbeGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/GetProbeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbeGroups(ctx context.Context, in *BatchGetProbeGroupsRequest, opts ...grpc.CallOption) (*BatchGetProbeGroupsResponse, error) {
	out := new(BatchGetProbeGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/BatchGetProbeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbeGroups(ctx context.Context, in *ListProbeGroupsRequest, opts ...grpc.CallOption) (*ListProbeGroupsResponse, error) {
	out := new(ListProbeGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/ListProbeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbeGroup(ctx context.Context, in *WatchProbeGroupRequest, opts ...grpc.CallOption) (WatchProbeGroupClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbeGroup",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbeGroupService/WatchProbeGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbeGroupWatchProbeGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbeGroupClientStream interface {
	Recv() (*WatchProbeGroupResponse, error)
	grpc.ClientStream
}

type watchProbeGroupWatchProbeGroupClient struct {
	grpc.ClientStream
}

func (x *watchProbeGroupWatchProbeGroupClient) Recv() (*WatchProbeGroupResponse, error) {
	m := new(WatchProbeGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbeGroups(ctx context.Context, in *WatchProbeGroupsRequest, opts ...grpc.CallOption) (WatchProbeGroupsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbeGroups",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbeGroupService/WatchProbeGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbeGroupsWatchProbeGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbeGroupsClientStream interface {
	Recv() (*WatchProbeGroupsResponse, error)
	grpc.ClientStream
}

type watchProbeGroupsWatchProbeGroupsClient struct {
	grpc.ClientStream
}

func (x *watchProbeGroupsWatchProbeGroupsClient) Recv() (*WatchProbeGroupsResponse, error) {
	m := new(WatchProbeGroupsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbeGroup(ctx context.Context, in *CreateProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error) {
	out := new(probe_group.ProbeGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/CreateProbeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbeGroup(ctx context.Context, in *UpdateProbeGroupRequest, opts ...grpc.CallOption) (*probe_group.ProbeGroup, error) {
	out := new(probe_group.ProbeGroup)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/UpdateProbeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbeGroup(ctx context.Context, in *DeleteProbeGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/DeleteProbeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchProbeGroups(ctx context.Context, in *SearchProbeGroupsRequest, opts ...grpc.CallOption) (*SearchProbeGroupsResponse, error) {
	out := new(SearchProbeGroupsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeGroupService/SearchProbeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
