// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_group_service.proto
// DO NOT EDIT!!!

package probe_group_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

type GetProbeGroupRequest_FieldMask struct {
	Paths []GetProbeGroupRequest_FieldPath
}

func FullGetProbeGroupRequest_FieldMask() *GetProbeGroupRequest_FieldMask {
	res := &GetProbeGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetProbeGroupRequest_FieldTerminalPath{selector: GetProbeGroupRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetProbeGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetProbeGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetProbeGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetProbeGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetProbeGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetProbeGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetProbeGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetProbeGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *GetProbeGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetProbeGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetProbeGroupRequest_FieldMask) Subtract(other *GetProbeGroupRequest_FieldMask) *GetProbeGroupRequest_FieldMask {
	result := &GetProbeGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetProbeGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetProbeGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetProbeGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetProbeGroupRequest_FieldMask) FilterInputFields() *GetProbeGroupRequest_FieldMask {
	result := &GetProbeGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetProbeGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetProbeGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetProbeGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetProbeGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetProbeGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetProbeGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetProbeGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetProbeGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetProbeGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetProbeGroupRequest_FieldMask) AppendPath(path GetProbeGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetProbeGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetProbeGroupRequest_FieldPath))
}

func (fieldMask *GetProbeGroupRequest_FieldMask) GetPaths() []GetProbeGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetProbeGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetProbeGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetProbeGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetProbeGroupRequest_FieldMask) Set(target, source *GetProbeGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetProbeGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetProbeGroupRequest), source.(*GetProbeGroupRequest))
}

func (fieldMask *GetProbeGroupRequest_FieldMask) Project(source *GetProbeGroupRequest) *GetProbeGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetProbeGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetProbeGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case GetProbeGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetProbeGroupRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetProbeGroupRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetProbeGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetProbeGroupRequest))
}

func (fieldMask *GetProbeGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetProbeGroupsRequest_FieldMask struct {
	Paths []BatchGetProbeGroupsRequest_FieldPath
}

func FullBatchGetProbeGroupsRequest_FieldMask() *BatchGetProbeGroupsRequest_FieldMask {
	res := &BatchGetProbeGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetProbeGroupsRequest_FieldTerminalPath{selector: BatchGetProbeGroupsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetProbeGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetProbeGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetProbeGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Subtract(other *BatchGetProbeGroupsRequest_FieldMask) *BatchGetProbeGroupsRequest_FieldMask {
	result := &BatchGetProbeGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetProbeGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetProbeGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) FilterInputFields() *BatchGetProbeGroupsRequest_FieldMask {
	result := &BatchGetProbeGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetProbeGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetProbeGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetProbeGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetProbeGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) AppendPath(path BatchGetProbeGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetProbeGroupsRequest_FieldPath))
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) GetPaths() []BatchGetProbeGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetProbeGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Set(target, source *BatchGetProbeGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetProbeGroupsRequest), source.(*BatchGetProbeGroupsRequest))
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) Project(source *BatchGetProbeGroupsRequest) *BatchGetProbeGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetProbeGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetProbeGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetProbeGroupsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetProbeGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetProbeGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetProbeGroupsRequest))
}

func (fieldMask *BatchGetProbeGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetProbeGroupsResponse_FieldMask struct {
	Paths []BatchGetProbeGroupsResponse_FieldPath
}

func FullBatchGetProbeGroupsResponse_FieldMask() *BatchGetProbeGroupsResponse_FieldMask {
	res := &BatchGetProbeGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups})
	res.Paths = append(res.Paths, &BatchGetProbeGroupsResponse_FieldTerminalPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetProbeGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetProbeGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetProbeGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Subtract(other *BatchGetProbeGroupsResponse_FieldMask) *BatchGetProbeGroupsResponse_FieldMask {
	result := &BatchGetProbeGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}
	mySubMasks := map[BatchGetProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetProbeGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetProbeGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetProbeGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
						mySubMasks[BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups] = probe_group.FullProbeGroup_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetProbeGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetProbeGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetProbeGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) FilterInputFields() *BatchGetProbeGroupsResponse_FieldMask {
	result := &BatchGetProbeGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
			if _, ok := path.(*BatchGetProbeGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetProbeGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetProbeGroupsResponse_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetProbeGroupsResponse_FieldSubPath{selector: BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetProbeGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetProbeGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetProbeGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetProbeGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) AppendPath(path BatchGetProbeGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetProbeGroupsResponse_FieldPath))
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) GetPaths() []BatchGetProbeGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetProbeGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Set(target, source *BatchGetProbeGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetProbeGroupsResponse), source.(*BatchGetProbeGroupsResponse))
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) Project(source *BatchGetProbeGroupsResponse) *BatchGetProbeGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetProbeGroupsResponse{}
	probeGroupsMask := &probe_group.ProbeGroup_FieldMask{}
	wholeProbeGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetProbeGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
				result.ProbeGroups = source.ProbeGroups
				wholeProbeGroupsAccepted = true
			case BatchGetProbeGroupsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetProbeGroupsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetProbeGroupsResponse_FieldPathSelectorProbeGroups:
				probeGroupsMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			}
		}
	}
	if wholeProbeGroupsAccepted == false && len(probeGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbeGroups() {
			result.ProbeGroups = append(result.ProbeGroups, probeGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetProbeGroupsResponse))
}

func (fieldMask *BatchGetProbeGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListProbeGroupsRequest_FieldMask struct {
	Paths []ListProbeGroupsRequest_FieldPath
}

func FullListProbeGroupsRequest_FieldMask() *ListProbeGroupsRequest_FieldMask {
	res := &ListProbeGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListProbeGroupsRequest_FieldTerminalPath{selector: ListProbeGroupsRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListProbeGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListProbeGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListProbeGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListProbeGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Subtract(other *ListProbeGroupsRequest_FieldMask) *ListProbeGroupsRequest_FieldMask {
	result := &ListProbeGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListProbeGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListProbeGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListProbeGroupsRequest_FieldMask) FilterInputFields() *ListProbeGroupsRequest_FieldMask {
	result := &ListProbeGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListProbeGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListProbeGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListProbeGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListProbeGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListProbeGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) AppendPath(path ListProbeGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListProbeGroupsRequest_FieldPath))
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) GetPaths() []ListProbeGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListProbeGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Set(target, source *ListProbeGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListProbeGroupsRequest), source.(*ListProbeGroupsRequest))
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) Project(source *ListProbeGroupsRequest) *ListProbeGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListProbeGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListProbeGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListProbeGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListProbeGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListProbeGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListProbeGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListProbeGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListProbeGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListProbeGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			case ListProbeGroupsRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListProbeGroupsRequest))
}

func (fieldMask *ListProbeGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListProbeGroupsResponse_FieldMask struct {
	Paths []ListProbeGroupsResponse_FieldPath
}

func FullListProbeGroupsResponse_FieldMask() *ListProbeGroupsResponse_FieldMask {
	res := &ListProbeGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups})
	res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListProbeGroupsResponse_FieldTerminalPath{selector: ListProbeGroupsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListProbeGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListProbeGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListProbeGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListProbeGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Subtract(other *ListProbeGroupsResponse_FieldMask) *ListProbeGroupsResponse_FieldMask {
	result := &ListProbeGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}
	mySubMasks := map[ListProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListProbeGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListProbeGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListProbeGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
						mySubMasks[ListProbeGroupsResponse_FieldPathSelectorProbeGroups] = probe_group.FullProbeGroup_FieldMask()
					}
				} else if tp, ok := path.(*ListProbeGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListProbeGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListProbeGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListProbeGroupsResponse_FieldMask) FilterInputFields() *ListProbeGroupsResponse_FieldMask {
	result := &ListProbeGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
			if _, ok := path.(*ListProbeGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListProbeGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListProbeGroupsResponse_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListProbeGroupsResponse_FieldSubPath{selector: ListProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListProbeGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListProbeGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListProbeGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListProbeGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListProbeGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) AppendPath(path ListProbeGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListProbeGroupsResponse_FieldPath))
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) GetPaths() []ListProbeGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListProbeGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Set(target, source *ListProbeGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListProbeGroupsResponse), source.(*ListProbeGroupsResponse))
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) Project(source *ListProbeGroupsResponse) *ListProbeGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListProbeGroupsResponse{}
	probeGroupsMask := &probe_group.ProbeGroup_FieldMask{}
	wholeProbeGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListProbeGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
				result.ProbeGroups = source.ProbeGroups
				wholeProbeGroupsAccepted = true
			case ListProbeGroupsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListProbeGroupsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListProbeGroupsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListProbeGroupsResponse_FieldSubPath:
			switch tp.selector {
			case ListProbeGroupsResponse_FieldPathSelectorProbeGroups:
				probeGroupsMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			}
		}
	}
	if wholeProbeGroupsAccepted == false && len(probeGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbeGroups() {
			result.ProbeGroups = append(result.ProbeGroups, probeGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListProbeGroupsResponse))
}

func (fieldMask *ListProbeGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbeGroupRequest_FieldMask struct {
	Paths []WatchProbeGroupRequest_FieldPath
}

func FullWatchProbeGroupRequest_FieldMask() *WatchProbeGroupRequest_FieldMask {
	res := &WatchProbeGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchProbeGroupRequest_FieldTerminalPath{selector: WatchProbeGroupRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbeGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbeGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbeGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbeGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Subtract(other *WatchProbeGroupRequest_FieldMask) *WatchProbeGroupRequest_FieldMask {
	result := &WatchProbeGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbeGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbeGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbeGroupRequest_FieldMask) FilterInputFields() *WatchProbeGroupRequest_FieldMask {
	result := &WatchProbeGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbeGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbeGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbeGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbeGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbeGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) AppendPath(path WatchProbeGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbeGroupRequest_FieldPath))
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) GetPaths() []WatchProbeGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbeGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Set(target, source *WatchProbeGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbeGroupRequest), source.(*WatchProbeGroupRequest))
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) Project(source *WatchProbeGroupRequest) *WatchProbeGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbeGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbeGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchProbeGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchProbeGroupRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchProbeGroupRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbeGroupRequest))
}

func (fieldMask *WatchProbeGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbeGroupResponse_FieldMask struct {
	Paths []WatchProbeGroupResponse_FieldPath
}

func FullWatchProbeGroupResponse_FieldMask() *WatchProbeGroupResponse_FieldMask {
	res := &WatchProbeGroupResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbeGroupResponse_FieldTerminalPath{selector: WatchProbeGroupResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbeGroupResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbeGroupResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbeGroupResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbeGroupResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Subtract(other *WatchProbeGroupResponse_FieldMask) *WatchProbeGroupResponse_FieldMask {
	result := &WatchProbeGroupResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbeGroupResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbeGroupResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbeGroupResponse_FieldMask) FilterInputFields() *WatchProbeGroupResponse_FieldMask {
	result := &WatchProbeGroupResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbeGroupResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbeGroupResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbeGroupResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbeGroupResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbeGroupResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) AppendPath(path WatchProbeGroupResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbeGroupResponse_FieldPath))
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) GetPaths() []WatchProbeGroupResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbeGroupResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Set(target, source *WatchProbeGroupResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbeGroupResponse), source.(*WatchProbeGroupResponse))
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) Project(source *WatchProbeGroupResponse) *WatchProbeGroupResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbeGroupResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbeGroupResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchProbeGroupResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbeGroupResponse))
}

func (fieldMask *WatchProbeGroupResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbeGroupsRequest_FieldMask struct {
	Paths []WatchProbeGroupsRequest_FieldPath
}

func FullWatchProbeGroupsRequest_FieldMask() *WatchProbeGroupsRequest_FieldMask {
	res := &WatchProbeGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchProbeGroupsRequest_FieldTerminalPath{selector: WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbeGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbeGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbeGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbeGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Subtract(other *WatchProbeGroupsRequest_FieldMask) *WatchProbeGroupsRequest_FieldMask {
	result := &WatchProbeGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbeGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbeGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbeGroupsRequest_FieldMask) FilterInputFields() *WatchProbeGroupsRequest_FieldMask {
	result := &WatchProbeGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbeGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbeGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbeGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbeGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbeGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) AppendPath(path WatchProbeGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbeGroupsRequest_FieldPath))
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) GetPaths() []WatchProbeGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbeGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Set(target, source *WatchProbeGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbeGroupsRequest), source.(*WatchProbeGroupsRequest))
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) Project(source *WatchProbeGroupsRequest) *WatchProbeGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbeGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbeGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchProbeGroupsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchProbeGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchProbeGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchProbeGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchProbeGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchProbeGroupsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchProbeGroupsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchProbeGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchProbeGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchProbeGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchProbeGroupsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbeGroupsRequest))
}

func (fieldMask *WatchProbeGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbeGroupsResponse_FieldMask struct {
	Paths []WatchProbeGroupsResponse_FieldPath
}

func FullWatchProbeGroupsResponse_FieldMask() *WatchProbeGroupsResponse_FieldMask {
	res := &WatchProbeGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponse_FieldTerminalPath{selector: WatchProbeGroupsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbeGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbeGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbeGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbeGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Subtract(other *WatchProbeGroupsResponse_FieldMask) *WatchProbeGroupsResponse_FieldMask {
	result := &WatchProbeGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange: &WatchProbeGroupsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange: &WatchProbeGroupsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbeGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchProbeGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchProbeGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange] = FullWatchProbeGroupsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchProbeGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchProbeGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbeGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbeGroupsResponse_FieldMask) FilterInputFields() *WatchProbeGroupsResponse_FieldMask {
	result := &WatchProbeGroupsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbeGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbeGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbeGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbeGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbeGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) AppendPath(path WatchProbeGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbeGroupsResponse_FieldPath))
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) GetPaths() []WatchProbeGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbeGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Set(target, source *WatchProbeGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbeGroupsResponse), source.(*WatchProbeGroupsResponse))
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) Project(source *WatchProbeGroupsResponse) *WatchProbeGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbeGroupsResponse{}
	pageTokenChangeMask := &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbeGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchProbeGroupsResponse_FieldPathSelectorProbeGroupChanges:
				result.ProbeGroupChanges = source.ProbeGroupChanges
			case WatchProbeGroupsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchProbeGroupsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchProbeGroupsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchProbeGroupsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchProbeGroupsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchProbeGroupsResponse_FieldSubPath:
			switch tp.selector {
			case WatchProbeGroupsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchProbeGroupsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbeGroupsResponse))
}

func (fieldMask *WatchProbeGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchProbeGroupsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchProbeGroupsResponsePageTokenChange_FieldPath
}

func FullWatchProbeGroupsResponse_PageTokenChange_FieldMask() *WatchProbeGroupsResponse_PageTokenChange_FieldMask {
	res := &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Subtract(other *WatchProbeGroupsResponse_PageTokenChange_FieldMask) *WatchProbeGroupsResponse_PageTokenChange_FieldMask {
	result := &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchProbeGroupsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchProbeGroupsResponse_PageTokenChange_FieldMask {
	result := &WatchProbeGroupsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchProbeGroupsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchProbeGroupsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchProbeGroupsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) AppendPath(path WatchProbeGroupsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchProbeGroupsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) GetPaths() []WatchProbeGroupsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchProbeGroupsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Set(target, source *WatchProbeGroupsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchProbeGroupsResponse_PageTokenChange), source.(*WatchProbeGroupsResponse_PageTokenChange))
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) Project(source *WatchProbeGroupsResponse_PageTokenChange) *WatchProbeGroupsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchProbeGroupsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchProbeGroupsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchProbeGroupsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchProbeGroupsResponse_PageTokenChange))
}

func (fieldMask *WatchProbeGroupsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateProbeGroupRequest_FieldMask struct {
	Paths []CreateProbeGroupRequest_FieldPath
}

func FullCreateProbeGroupRequest_FieldMask() *CreateProbeGroupRequest_FieldMask {
	res := &CreateProbeGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateProbeGroupRequest_FieldTerminalPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup})
	return res
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateProbeGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateProbeGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateProbeGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateProbeGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Subtract(other *CreateProbeGroupRequest_FieldMask) *CreateProbeGroupRequest_FieldMask {
	result := &CreateProbeGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateProbeGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateProbeGroupRequest_FieldPathSelectorProbeGroup: &probe_group.ProbeGroup_FieldMask{},
	}
	mySubMasks := map[CreateProbeGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateProbeGroupRequest_FieldPathSelectorProbeGroup: &probe_group.ProbeGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateProbeGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateProbeGroupRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateProbeGroupRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
						mySubMasks[CreateProbeGroupRequest_FieldPathSelectorProbeGroup] = probe_group.FullProbeGroup_FieldMask()
					}
				} else if tp, ok := path.(*CreateProbeGroupRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateProbeGroupRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateProbeGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateProbeGroupRequest_FieldMask) FilterInputFields() *CreateProbeGroupRequest_FieldMask {
	result := &CreateProbeGroupRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
			if _, ok := path.(*CreateProbeGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateProbeGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateProbeGroupRequest_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateProbeGroupRequest_FieldSubPath{selector: CreateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateProbeGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateProbeGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateProbeGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateProbeGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateProbeGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) AppendPath(path CreateProbeGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateProbeGroupRequest_FieldPath))
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) GetPaths() []CreateProbeGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateProbeGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Set(target, source *CreateProbeGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateProbeGroupRequest), source.(*CreateProbeGroupRequest))
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) Project(source *CreateProbeGroupRequest) *CreateProbeGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateProbeGroupRequest{}
	probeGroupMask := &probe_group.ProbeGroup_FieldMask{}
	wholeProbeGroupAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateProbeGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateProbeGroupRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
				result.ProbeGroup = source.ProbeGroup
				wholeProbeGroupAccepted = true
			}
		case *CreateProbeGroupRequest_FieldSubPath:
			switch tp.selector {
			case CreateProbeGroupRequest_FieldPathSelectorProbeGroup:
				probeGroupMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			}
		}
	}
	if wholeProbeGroupAccepted == false && len(probeGroupMask.Paths) > 0 {
		result.ProbeGroup = probeGroupMask.Project(source.GetProbeGroup())
	}
	return result
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateProbeGroupRequest))
}

func (fieldMask *CreateProbeGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateProbeGroupRequest_FieldMask struct {
	Paths []UpdateProbeGroupRequest_FieldPath
}

func FullUpdateProbeGroupRequest_FieldMask() *UpdateProbeGroupRequest_FieldMask {
	res := &UpdateProbeGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup})
	res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateProbeGroupRequest_FieldTerminalPath{selector: UpdateProbeGroupRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateProbeGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateProbeGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateProbeGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateProbeGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Subtract(other *UpdateProbeGroupRequest_FieldMask) *UpdateProbeGroupRequest_FieldMask {
	result := &UpdateProbeGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateProbeGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbeGroupRequest_FieldPathSelectorProbeGroup: &probe_group.ProbeGroup_FieldMask{},
		UpdateProbeGroupRequest_FieldPathSelectorCas:        &UpdateProbeGroupRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateProbeGroupRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbeGroupRequest_FieldPathSelectorProbeGroup: &probe_group.ProbeGroup_FieldMask{},
		UpdateProbeGroupRequest_FieldPathSelectorCas:        &UpdateProbeGroupRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateProbeGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateProbeGroupRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateProbeGroupRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
						mySubMasks[UpdateProbeGroupRequest_FieldPathSelectorProbeGroup] = probe_group.FullProbeGroup_FieldMask()
					case UpdateProbeGroupRequest_FieldPathSelectorCas:
						mySubMasks[UpdateProbeGroupRequest_FieldPathSelectorCas] = FullUpdateProbeGroupRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateProbeGroupRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateProbeGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateProbeGroupRequest_FieldMask) FilterInputFields() *UpdateProbeGroupRequest_FieldMask {
	result := &UpdateProbeGroupRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
			if _, ok := path.(*UpdateProbeGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbeGroupRequest_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorProbeGroup, subPath: allowedPath})
				}
			}
		case UpdateProbeGroupRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateProbeGroupRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateProbeGroupRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbeGroupRequest_FieldSubPath); ok {
				selectedMask := &UpdateProbeGroupRequest_CAS_FieldMask{
					Paths: []UpdateProbeGroupRequestCAS_FieldPath{sub.subPath.(UpdateProbeGroupRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequest_FieldSubPath{selector: UpdateProbeGroupRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateProbeGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateProbeGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateProbeGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateProbeGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateProbeGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) AppendPath(path UpdateProbeGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateProbeGroupRequest_FieldPath))
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) GetPaths() []UpdateProbeGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateProbeGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Set(target, source *UpdateProbeGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateProbeGroupRequest), source.(*UpdateProbeGroupRequest))
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) Project(source *UpdateProbeGroupRequest) *UpdateProbeGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateProbeGroupRequest{}
	probeGroupMask := &probe_group.ProbeGroup_FieldMask{}
	wholeProbeGroupAccepted := false
	casMask := &UpdateProbeGroupRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateProbeGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
				result.ProbeGroup = source.ProbeGroup
				wholeProbeGroupAccepted = true
			case UpdateProbeGroupRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateProbeGroupRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateProbeGroupRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateProbeGroupRequest_FieldSubPath:
			switch tp.selector {
			case UpdateProbeGroupRequest_FieldPathSelectorProbeGroup:
				probeGroupMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			case UpdateProbeGroupRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateProbeGroupRequestCAS_FieldPath))
			}
		}
	}
	if wholeProbeGroupAccepted == false && len(probeGroupMask.Paths) > 0 {
		result.ProbeGroup = probeGroupMask.Project(source.GetProbeGroup())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateProbeGroupRequest))
}

func (fieldMask *UpdateProbeGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateProbeGroupRequest_CAS_FieldMask struct {
	Paths []UpdateProbeGroupRequestCAS_FieldPath
}

func FullUpdateProbeGroupRequest_CAS_FieldMask() *UpdateProbeGroupRequest_CAS_FieldMask {
	res := &UpdateProbeGroupRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateProbeGroupRequestCAS_FieldTerminalPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateProbeGroupRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateProbeGroupRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateProbeGroupRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Subtract(other *UpdateProbeGroupRequest_CAS_FieldMask) *UpdateProbeGroupRequest_CAS_FieldMask {
	result := &UpdateProbeGroupRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateProbeGroupRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState: &probe_group.ProbeGroup_FieldMask{},
	}
	mySubMasks := map[UpdateProbeGroupRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState: &probe_group.ProbeGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateProbeGroupRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateProbeGroupRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateProbeGroupRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState] = probe_group.FullProbeGroup_FieldMask()
					}
				} else if tp, ok := path.(*UpdateProbeGroupRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateProbeGroupRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateProbeGroupRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) FilterInputFields() *UpdateProbeGroupRequest_CAS_FieldMask {
	result := &UpdateProbeGroupRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateProbeGroupRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateProbeGroupRequestCAS_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateProbeGroupRequestCAS_FieldSubPath{selector: UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateProbeGroupRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateProbeGroupRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateProbeGroupRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateProbeGroupRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) AppendPath(path UpdateProbeGroupRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateProbeGroupRequestCAS_FieldPath))
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) GetPaths() []UpdateProbeGroupRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateProbeGroupRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Set(target, source *UpdateProbeGroupRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateProbeGroupRequest_CAS), source.(*UpdateProbeGroupRequest_CAS))
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) Project(source *UpdateProbeGroupRequest_CAS) *UpdateProbeGroupRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateProbeGroupRequest_CAS{}
	conditionalStateMask := &probe_group.ProbeGroup_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateProbeGroupRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateProbeGroupRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateProbeGroupRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateProbeGroupRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateProbeGroupRequest_CAS))
}

func (fieldMask *UpdateProbeGroupRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteProbeGroupRequest_FieldMask struct {
	Paths []DeleteProbeGroupRequest_FieldPath
}

func FullDeleteProbeGroupRequest_FieldMask() *DeleteProbeGroupRequest_FieldMask {
	res := &DeleteProbeGroupRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteProbeGroupRequest_FieldTerminalPath{selector: DeleteProbeGroupRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteProbeGroupRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteProbeGroupRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteProbeGroupRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteProbeGroupRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Subtract(other *DeleteProbeGroupRequest_FieldMask) *DeleteProbeGroupRequest_FieldMask {
	result := &DeleteProbeGroupRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteProbeGroupRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteProbeGroupRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteProbeGroupRequest_FieldMask) FilterInputFields() *DeleteProbeGroupRequest_FieldMask {
	result := &DeleteProbeGroupRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteProbeGroupRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteProbeGroupRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteProbeGroupRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteProbeGroupRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteProbeGroupRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) AppendPath(path DeleteProbeGroupRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteProbeGroupRequest_FieldPath))
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) GetPaths() []DeleteProbeGroupRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteProbeGroupRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Set(target, source *DeleteProbeGroupRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteProbeGroupRequest), source.(*DeleteProbeGroupRequest))
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) Project(source *DeleteProbeGroupRequest) *DeleteProbeGroupRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteProbeGroupRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteProbeGroupRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteProbeGroupRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteProbeGroupRequest))
}

func (fieldMask *DeleteProbeGroupRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SearchProbeGroupsRequest_FieldMask struct {
	Paths []SearchProbeGroupsRequest_FieldPath
}

func FullSearchProbeGroupsRequest_FieldMask() *SearchProbeGroupsRequest_FieldMask {
	res := &SearchProbeGroupsRequest_FieldMask{}
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &SearchProbeGroupsRequest_FieldTerminalPath{selector: SearchProbeGroupsRequest_FieldPathSelectorPhrase})
	return res
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SearchProbeGroupsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSearchProbeGroupsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SearchProbeGroupsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSearchProbeGroupsRequest_FieldPath(raw)
	})
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Subtract(other *SearchProbeGroupsRequest_FieldMask) *SearchProbeGroupsRequest_FieldMask {
	result := &SearchProbeGroupsRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SearchProbeGroupsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SearchProbeGroupsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SearchProbeGroupsRequest_FieldMask) FilterInputFields() *SearchProbeGroupsRequest_FieldMask {
	result := &SearchProbeGroupsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SearchProbeGroupsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SearchProbeGroupsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSearchProbeGroupsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SearchProbeGroupsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SearchProbeGroupsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) AppendPath(path SearchProbeGroupsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SearchProbeGroupsRequest_FieldPath))
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) GetPaths() []SearchProbeGroupsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSearchProbeGroupsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Set(target, source *SearchProbeGroupsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SearchProbeGroupsRequest), source.(*SearchProbeGroupsRequest))
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) Project(source *SearchProbeGroupsRequest) *SearchProbeGroupsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SearchProbeGroupsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SearchProbeGroupsRequest_FieldTerminalPath:
			switch tp.selector {
			case SearchProbeGroupsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case SearchProbeGroupsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case SearchProbeGroupsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case SearchProbeGroupsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case SearchProbeGroupsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case SearchProbeGroupsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case SearchProbeGroupsRequest_FieldPathSelectorView:
				result.View = source.View
			case SearchProbeGroupsRequest_FieldPathSelectorPhrase:
				result.Phrase = source.Phrase
			}
		}
	}
	return result
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SearchProbeGroupsRequest))
}

func (fieldMask *SearchProbeGroupsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SearchProbeGroupsResponse_FieldMask struct {
	Paths []SearchProbeGroupsResponse_FieldPath
}

func FullSearchProbeGroupsResponse_FieldMask() *SearchProbeGroupsResponse_FieldMask {
	res := &SearchProbeGroupsResponse_FieldMask{}
	res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups})
	res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &SearchProbeGroupsResponse_FieldTerminalPath{selector: SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SearchProbeGroupsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSearchProbeGroupsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SearchProbeGroupsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSearchProbeGroupsResponse_FieldPath(raw)
	})
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Subtract(other *SearchProbeGroupsResponse_FieldMask) *SearchProbeGroupsResponse_FieldMask {
	result := &SearchProbeGroupsResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[SearchProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		SearchProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}
	mySubMasks := map[SearchProbeGroupsResponse_FieldPathSelector]gotenobject.FieldMask{
		SearchProbeGroupsResponse_FieldPathSelectorProbeGroups: &probe_group.ProbeGroup_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SearchProbeGroupsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *SearchProbeGroupsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*SearchProbeGroupsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
						mySubMasks[SearchProbeGroupsResponse_FieldPathSelectorProbeGroups] = probe_group.FullProbeGroup_FieldMask()
					}
				} else if tp, ok := path.(*SearchProbeGroupsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &SearchProbeGroupsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SearchProbeGroupsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SearchProbeGroupsResponse_FieldMask) FilterInputFields() *SearchProbeGroupsResponse_FieldMask {
	result := &SearchProbeGroupsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
			if _, ok := path.(*SearchProbeGroupsResponse_FieldTerminalPath); ok {
				for _, subpath := range probe_group.FullProbeGroup_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SearchProbeGroupsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*SearchProbeGroupsResponse_FieldSubPath); ok {
				selectedMask := &probe_group.ProbeGroup_FieldMask{
					Paths: []probe_group.ProbeGroup_FieldPath{sub.subPath.(probe_group.ProbeGroup_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SearchProbeGroupsResponse_FieldSubPath{selector: SearchProbeGroupsResponse_FieldPathSelectorProbeGroups, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SearchProbeGroupsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SearchProbeGroupsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSearchProbeGroupsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SearchProbeGroupsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SearchProbeGroupsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) AppendPath(path SearchProbeGroupsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SearchProbeGroupsResponse_FieldPath))
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) GetPaths() []SearchProbeGroupsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSearchProbeGroupsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Set(target, source *SearchProbeGroupsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SearchProbeGroupsResponse), source.(*SearchProbeGroupsResponse))
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) Project(source *SearchProbeGroupsResponse) *SearchProbeGroupsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SearchProbeGroupsResponse{}
	probeGroupsMask := &probe_group.ProbeGroup_FieldMask{}
	wholeProbeGroupsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SearchProbeGroupsResponse_FieldTerminalPath:
			switch tp.selector {
			case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
				result.ProbeGroups = source.ProbeGroups
				wholeProbeGroupsAccepted = true
			case SearchProbeGroupsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case SearchProbeGroupsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case SearchProbeGroupsResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case SearchProbeGroupsResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *SearchProbeGroupsResponse_FieldSubPath:
			switch tp.selector {
			case SearchProbeGroupsResponse_FieldPathSelectorProbeGroups:
				probeGroupsMask.AppendPath(tp.subPath.(probe_group.ProbeGroup_FieldPath))
			}
		}
	}
	if wholeProbeGroupsAccepted == false && len(probeGroupsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbeGroups() {
			result.ProbeGroups = append(result.ProbeGroups, probeGroupsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SearchProbeGroupsResponse))
}

func (fieldMask *SearchProbeGroupsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
