// Code generated by protoc-gen-goten-client
// API: ProbeGroupService
// DO NOT EDIT!!!

package probe_group_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probe_group.ProbeGroup{}
)

var (
	descriptorsInitialized        bool
	probeGroupServiceDescriptor   *ProbeGroupServiceDescriptor
	getProbeGroupDescriptor       *GetProbeGroupDescriptor
	batchGetProbeGroupsDescriptor *BatchGetProbeGroupsDescriptor
	listProbeGroupsDescriptor     *ListProbeGroupsDescriptor
	watchProbeGroupDescriptor     *WatchProbeGroupDescriptor
	watchProbeGroupsDescriptor    *WatchProbeGroupsDescriptor
	createProbeGroupDescriptor    *CreateProbeGroupDescriptor
	updateProbeGroupDescriptor    *UpdateProbeGroupDescriptor
	deleteProbeGroupDescriptor    *DeleteProbeGroupDescriptor
	searchProbeGroupsDescriptor   *SearchProbeGroupsDescriptor
)

type GetProbeGroupDescriptor struct{}

type GetProbeGroupDescriptorClientMsgHandle struct{}

type GetProbeGroupDescriptorServerMsgHandle struct{}

func (d *GetProbeGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbeGroupRequest{}
}

func (d *GetProbeGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probe_group.ProbeGroup{}
}

func (d *GetProbeGroupDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbeGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbeGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbeGroupDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProbeGroupDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProbeGroupDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProbeGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbeGroupDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbeGroupDescriptor) GetMethodName() string {
	return "GetProbeGroup"
}

func (d *GetProbeGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/GetProbeGroup"
}

func (d *GetProbeGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbeGroupDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *GetProbeGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbeGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbeGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *GetProbeGroupDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *GetProbeGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbeGroupDescriptorClientMsgHandle{}
}

func (d *GetProbeGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbeGroupDescriptorServerMsgHandle{}
}

func (h *GetProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProbeGroupRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe_group.Name)(nil)
}

func (h *GetProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProbeGroupRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbeGroupDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProbeGroupRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probe_group.ProbeGroup) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probe_group.ProbeGroup) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbeGroupDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probe_group.ProbeGroup) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbeGroupDescriptor() *GetProbeGroupDescriptor {
	return getProbeGroupDescriptor
}

type BatchGetProbeGroupsDescriptor struct{}

type BatchGetProbeGroupsDescriptorClientMsgHandle struct{}

type BatchGetProbeGroupsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbeGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbeGroupsRequest{}
}

func (d *BatchGetProbeGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbeGroupsResponse{}
}

func (d *BatchGetProbeGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbeGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbeGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbeGroupsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProbeGroupsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProbeGroupsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProbeGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbeGroupsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbeGroupsDescriptor) GetMethodName() string {
	return "BatchGetProbeGroups"
}

func (d *BatchGetProbeGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/BatchGetProbeGroups"
}

func (d *BatchGetProbeGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbeGroupsDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *BatchGetProbeGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbeGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbeGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *BatchGetProbeGroupsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *BatchGetProbeGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbeGroupsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbeGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbeGroupsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbeGroupsRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbeGroupsRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(probe_group.ProbeGroupNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (probe_group.ProbeGroupNameList)(nil)
}

func (h *BatchGetProbeGroupsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbeGroupsRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbeGroupsResponse) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbeGroupsResponse) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbeGroups()
	list := make(probe_group.ProbeGroupNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProbeGroupsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbeGroupsResponse) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbeGroupsDescriptor() *BatchGetProbeGroupsDescriptor {
	return batchGetProbeGroupsDescriptor
}

type ListProbeGroupsDescriptor struct{}

type ListProbeGroupsDescriptorClientMsgHandle struct{}

type ListProbeGroupsDescriptorServerMsgHandle struct{}

func (d *ListProbeGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbeGroupsRequest{}
}

func (d *ListProbeGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbeGroupsResponse{}
}

func (d *ListProbeGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbeGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbeGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbeGroupsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProbeGroupsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProbeGroupsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProbeGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbeGroupsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbeGroupsDescriptor) GetMethodName() string {
	return "ListProbeGroups"
}

func (d *ListProbeGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/ListProbeGroups"
}

func (d *ListProbeGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbeGroupsDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *ListProbeGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbeGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbeGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *ListProbeGroupsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *ListProbeGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbeGroupsDescriptorClientMsgHandle{}
}

func (d *ListProbeGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbeGroupsDescriptorServerMsgHandle{}
}

func (h *ListProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbeGroupsRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbeGroupsRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbeGroupsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbeGroupsRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbeGroupsResponse) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbeGroupsResponse) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbeGroups()
	list := make(probe_group.ProbeGroupNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProbeGroupsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbeGroupsResponse) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProbeGroupsDescriptor() *ListProbeGroupsDescriptor {
	return listProbeGroupsDescriptor
}

type WatchProbeGroupDescriptor struct{}

type WatchProbeGroupDescriptorClientMsgHandle struct{}

type WatchProbeGroupDescriptorServerMsgHandle struct{}

func (d *WatchProbeGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbeGroupRequest{}
}

func (d *WatchProbeGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbeGroupResponse{}
}

func (d *WatchProbeGroupDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbeGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbeGroupDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbeGroupDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProbeGroupDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProbeGroupDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbeGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbeGroupDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbeGroupDescriptor) GetMethodName() string {
	return "WatchProbeGroup"
}

func (d *WatchProbeGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/WatchProbeGroup"
}

func (d *WatchProbeGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbeGroupDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *WatchProbeGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbeGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbeGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *WatchProbeGroupDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *WatchProbeGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbeGroupDescriptorClientMsgHandle{}
}

func (d *WatchProbeGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbeGroupDescriptorServerMsgHandle{}
}

func (h *WatchProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbeGroupRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe_group.Name)(nil)
}

func (h *WatchProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbeGroupRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbeGroupDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbeGroupRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbeGroupResponse) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *probe_group.ProbeGroupChange_Added_:
			return tResChange.Added.GetProbeGroup().GetName()
		case *probe_group.ProbeGroupChange_Modified_:
			return tResChange.Modified.GetName()
		case *probe_group.ProbeGroupChange_Removed_:
			return tResChange.Removed.GetName()
		case *probe_group.ProbeGroupChange_Current_:
			return tResChange.Current.GetProbeGroup().GetName()
		}
	}
	return (*probe_group.Name)(nil)
}

func (h *WatchProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbeGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbeGroupResponse) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbeGroupDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbeGroupResponse) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbeGroupDescriptor() *WatchProbeGroupDescriptor {
	return watchProbeGroupDescriptor
}

type WatchProbeGroupsDescriptor struct{}

type WatchProbeGroupsDescriptorClientMsgHandle struct{}

type WatchProbeGroupsDescriptorServerMsgHandle struct{}

func (d *WatchProbeGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbeGroupsRequest{}
}

func (d *WatchProbeGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbeGroupsResponse{}
}

func (d *WatchProbeGroupsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbeGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbeGroupsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbeGroupsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProbeGroupsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProbeGroupsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbeGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbeGroupsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbeGroupsDescriptor) GetMethodName() string {
	return "WatchProbeGroups"
}

func (d *WatchProbeGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/WatchProbeGroups"
}

func (d *WatchProbeGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbeGroupsDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *WatchProbeGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbeGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbeGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *WatchProbeGroupsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *WatchProbeGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbeGroupsDescriptorClientMsgHandle{}
}

func (d *WatchProbeGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbeGroupsDescriptorServerMsgHandle{}
}

func (h *WatchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbeGroupsRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbeGroupsRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbeGroupsRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probe_group.ParentName)(nil)
}

func (h *WatchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbeGroupsResponse) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbeGroupsResponse) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProbeGroupChanges()
	list := make(probe_group.ProbeGroupNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *probe_group.ProbeGroupChange_Added_:
			list = append(list, tResChange.Added.GetProbeGroup().GetName())
		case *probe_group.ProbeGroupChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *probe_group.ProbeGroupChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *probe_group.ProbeGroupChange_Current_:
			list = append(list, tResChange.Current.GetProbeGroup().GetName())
		}
	}
	return list
}

func (h *WatchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbeGroupsResponse) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbeGroupsDescriptor() *WatchProbeGroupsDescriptor {
	return watchProbeGroupsDescriptor
}

type CreateProbeGroupDescriptor struct{}

type CreateProbeGroupDescriptorClientMsgHandle struct{}

type CreateProbeGroupDescriptorServerMsgHandle struct{}

func (d *CreateProbeGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbeGroupRequest{}
}

func (d *CreateProbeGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probe_group.ProbeGroup{}
}

func (d *CreateProbeGroupDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbeGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbeGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbeGroupDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProbeGroupDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProbeGroupDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProbeGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbeGroupDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbeGroupDescriptor) GetMethodName() string {
	return "CreateProbeGroup"
}

func (d *CreateProbeGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/CreateProbeGroup"
}

func (d *CreateProbeGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbeGroupDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *CreateProbeGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbeGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbeGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *CreateProbeGroupDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *CreateProbeGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbeGroupDescriptorClientMsgHandle{}
}

func (d *CreateProbeGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbeGroupDescriptorServerMsgHandle{}
}

func (h *CreateProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProbeGroupRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbeGroup().GetName()
}

func (h *CreateProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProbeGroupRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbeGroupDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProbeGroupRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probe_group.ParentName)(nil)
}

func (h *CreateProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probe_group.ProbeGroup) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probe_group.ProbeGroup) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbeGroupDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probe_group.ProbeGroup) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbeGroupDescriptor() *CreateProbeGroupDescriptor {
	return createProbeGroupDescriptor
}

type UpdateProbeGroupDescriptor struct{}

type UpdateProbeGroupDescriptorClientMsgHandle struct{}

type UpdateProbeGroupDescriptorServerMsgHandle struct{}

func (d *UpdateProbeGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbeGroupRequest{}
}

func (d *UpdateProbeGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &probe_group.ProbeGroup{}
}

func (d *UpdateProbeGroupDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbeGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbeGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbeGroupDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProbeGroupDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProbeGroupDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProbeGroupDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbeGroupDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbeGroupDescriptor) GetMethodName() string {
	return "UpdateProbeGroup"
}

func (d *UpdateProbeGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/UpdateProbeGroup"
}

func (d *UpdateProbeGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbeGroupDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *UpdateProbeGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbeGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbeGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *UpdateProbeGroupDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *UpdateProbeGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbeGroupDescriptorClientMsgHandle{}
}

func (d *UpdateProbeGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbeGroupDescriptorServerMsgHandle{}
}

func (h *UpdateProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProbeGroupRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbeGroup().GetName()
}

func (h *UpdateProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProbeGroupRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbeGroupDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProbeGroupRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probe_group.ProbeGroup) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probe_group.ProbeGroup) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbeGroupDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probe_group.ProbeGroup)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probe_group.ProbeGroup) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbeGroupDescriptor() *UpdateProbeGroupDescriptor {
	return updateProbeGroupDescriptor
}

type DeleteProbeGroupDescriptor struct{}

type DeleteProbeGroupDescriptorClientMsgHandle struct{}

type DeleteProbeGroupDescriptorServerMsgHandle struct{}

func (d *DeleteProbeGroupDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbeGroupRequest{}
}

func (d *DeleteProbeGroupDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbeGroupDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbeGroupDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbeGroupDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbeGroupDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProbeGroupDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProbeGroupDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProbeGroupDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbeGroupDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbeGroupDescriptor) GetMethodName() string {
	return "DeleteProbeGroup"
}

func (d *DeleteProbeGroupDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/DeleteProbeGroup"
}

func (d *DeleteProbeGroupDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbeGroupDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *DeleteProbeGroupDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbeGroupDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbeGroupDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *DeleteProbeGroupDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *DeleteProbeGroupDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbeGroupDescriptorClientMsgHandle{}
}

func (d *DeleteProbeGroupDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbeGroupDescriptorServerMsgHandle{}
}

func (h *DeleteProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProbeGroupRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe_group.Name)(nil)
}

func (h *DeleteProbeGroupDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProbeGroupRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbeGroupDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbeGroupRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProbeGroupRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbeGroupDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbeGroupDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbeGroupDescriptor() *DeleteProbeGroupDescriptor {
	return deleteProbeGroupDescriptor
}

type SearchProbeGroupsDescriptor struct{}

type SearchProbeGroupsDescriptorClientMsgHandle struct{}

type SearchProbeGroupsDescriptorServerMsgHandle struct{}

func (d *SearchProbeGroupsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchProbeGroupsRequest{}
}

func (d *SearchProbeGroupsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchProbeGroupsResponse{}
}

func (d *SearchProbeGroupsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchProbeGroupsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchProbeGroupsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchProbeGroupsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *SearchProbeGroupsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *SearchProbeGroupsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *SearchProbeGroupsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchProbeGroupsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchProbeGroupsDescriptor) GetMethodName() string {
	return "SearchProbeGroups"
}

func (d *SearchProbeGroupsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService/SearchProbeGroups"
}

func (d *SearchProbeGroupsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SearchProbeGroupsDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *SearchProbeGroupsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SearchProbeGroupsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SearchProbeGroupsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probeGroupServiceDescriptor
}

func (d *SearchProbeGroupsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe_group.GetDescriptor()
}

func (d *SearchProbeGroupsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbeGroupsDescriptorClientMsgHandle{}
}

func (d *SearchProbeGroupsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbeGroupsDescriptorServerMsgHandle{}
}

func (h *SearchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbeGroupsRequest) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbeGroupsRequest) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchProbeGroupsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbeGroupsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbeGroupsRequest) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *SearchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbeGroupsResponse) *probe_group.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbeGroupsResponse) []*probe_group.Name
	})
	if ok {
		return probe_group.ProbeGroupNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbeGroups()
	list := make(probe_group.ProbeGroupNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *SearchProbeGroupsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbeGroupsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbeGroupsResponse) *probe_group.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetSearchProbeGroupsDescriptor() *SearchProbeGroupsDescriptor {
	return searchProbeGroupsDescriptor
}

type ProbeGroupServiceDescriptor struct{}

func (d *ProbeGroupServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbeGroupDescriptor,
		batchGetProbeGroupsDescriptor,
		listProbeGroupsDescriptor,
		watchProbeGroupDescriptor,
		watchProbeGroupsDescriptor,
		createProbeGroupDescriptor,
		updateProbeGroupDescriptor,
		deleteProbeGroupDescriptor,
		searchProbeGroupsDescriptor,
	}
}

func (d *ProbeGroupServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbeGroupService"
}

func (d *ProbeGroupServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbeGroupServiceDescriptor) GetApiName() string {
	return "ProbeGroupService"
}

func (d *ProbeGroupServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbeGroupServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbeGroupServiceDescriptor() *ProbeGroupServiceDescriptor {
	return probeGroupServiceDescriptor
}

func initDescriptors() {
	probeGroupServiceDescriptor = &ProbeGroupServiceDescriptor{}
	getProbeGroupDescriptor = &GetProbeGroupDescriptor{}
	batchGetProbeGroupsDescriptor = &BatchGetProbeGroupsDescriptor{}
	listProbeGroupsDescriptor = &ListProbeGroupsDescriptor{}
	watchProbeGroupDescriptor = &WatchProbeGroupDescriptor{}
	watchProbeGroupsDescriptor = &WatchProbeGroupsDescriptor{}
	createProbeGroupDescriptor = &CreateProbeGroupDescriptor{}
	updateProbeGroupDescriptor = &UpdateProbeGroupDescriptor{}
	deleteProbeGroupDescriptor = &DeleteProbeGroupDescriptor{}
	searchProbeGroupsDescriptor = &SearchProbeGroupsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probeGroupServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbeGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbeGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbeGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbeGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbeGroupsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbeGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbeGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbeGroupDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchProbeGroupsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
