// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probe_group_service.proto
// DO NOT EDIT!!!

package probe_group_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetProbeGroup][ntt.watchdog.v1alpha2.GetProbeGroup]
type GetProbeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.ProbeGroup
	Name *probe_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,3,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetProbeGroupRequest) Reset() {
	*m = GetProbeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetProbeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetProbeGroupRequest) ProtoMessage() {}

func (m *GetProbeGroupRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetProbeGroupRequest) GotenMessage() {}

// Deprecated, Use GetProbeGroupRequest.ProtoReflect.Descriptor instead.
func (*GetProbeGroupRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetProbeGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetProbeGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetProbeGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetProbeGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetProbeGroupRequest) GetName() *probe_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetProbeGroupRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetProbeGroupRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetProbeGroupRequest) SetName(fv *probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetProbeGroupRequest"))
	}
	m.Name = fv
}

func (m *GetProbeGroupRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetProbeGroupRequest"))
	}
	m.FieldMask = fv
}

func (m *GetProbeGroupRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetProbeGroupRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetProbeGroups][ntt.watchdog.v1alpha2.BatchGetProbeGroups]
type BatchGetProbeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of ProbeGroups
	Names []*probe_group.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,3,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetProbeGroupsRequest) Reset() {
	*m = BatchGetProbeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetProbeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetProbeGroupsRequest) ProtoMessage() {}

func (m *BatchGetProbeGroupsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetProbeGroupsRequest) GotenMessage() {}

// Deprecated, Use BatchGetProbeGroupsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetProbeGroupsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetProbeGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetProbeGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetProbeGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetProbeGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetProbeGroupsRequest) GetNames() []*probe_group.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetProbeGroupsRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetProbeGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetProbeGroupsRequest) SetNames(fv []*probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetProbeGroupsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetProbeGroupsRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetProbeGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetProbeGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetProbeGroupsRequest"))
	}
	m.View = fv
}

// BatchGetProbeGroupsResponse
type BatchGetProbeGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found ProbeGroups
	ProbeGroups []*probe_group.ProbeGroup `protobuf:"bytes,1,rep,name=probe_groups,json=probeGroups,proto3" json:"probe_groups,omitempty" firestore:"probeGroups"`
	// list of not found ProbeGroups
	Missing []*probe_group.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetProbeGroupsResponse) Reset() {
	*m = BatchGetProbeGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetProbeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetProbeGroupsResponse) ProtoMessage() {}

func (m *BatchGetProbeGroupsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetProbeGroupsResponse) GotenMessage() {}

// Deprecated, Use BatchGetProbeGroupsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetProbeGroupsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetProbeGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetProbeGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetProbeGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetProbeGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetProbeGroupsResponse) GetProbeGroups() []*probe_group.ProbeGroup {
	if m != nil {
		return m.ProbeGroups
	}
	return nil
}

func (m *BatchGetProbeGroupsResponse) GetMissing() []*probe_group.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetProbeGroupsResponse) SetProbeGroups(fv []*probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroups", "BatchGetProbeGroupsResponse"))
	}
	m.ProbeGroups = fv
}

func (m *BatchGetProbeGroupsResponse) SetMissing(fv []*probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetProbeGroupsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListProbeGroups][ntt.watchdog.v1alpha2.ListProbeGroups]
type ListProbeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.watchdog.v1alpha2.ProbeGroup
	Parent *probe_group.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbeGroups than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListProbeGroupsResponse.next_page_token][ntt.watchdog.v1alpha2.ListProbeGroupsResponse.next_page_token]
	PageToken *probe_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *probe_group.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probe_group.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,6,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListProbeGroupsRequest) Reset() {
	*m = ListProbeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProbeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProbeGroupsRequest) ProtoMessage() {}

func (m *ListProbeGroupsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProbeGroupsRequest) GotenMessage() {}

// Deprecated, Use ListProbeGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListProbeGroupsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListProbeGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProbeGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProbeGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProbeGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProbeGroupsRequest) GetParent() *probe_group.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListProbeGroupsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListProbeGroupsRequest) GetPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListProbeGroupsRequest) GetOrderBy() *probe_group.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListProbeGroupsRequest) GetFilter() *probe_group.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListProbeGroupsRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListProbeGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListProbeGroupsRequest) SetParent(fv *probe_group.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListProbeGroupsRequest"))
	}
	m.Parent = fv
}

func (m *ListProbeGroupsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListProbeGroupsRequest"))
	}
	m.PageSize = fv
}

func (m *ListProbeGroupsRequest) SetPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListProbeGroupsRequest"))
	}
	m.PageToken = fv
}

func (m *ListProbeGroupsRequest) SetOrderBy(fv *probe_group.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListProbeGroupsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListProbeGroupsRequest) SetFilter(fv *probe_group.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListProbeGroupsRequest"))
	}
	m.Filter = fv
}

func (m *ListProbeGroupsRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListProbeGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListProbeGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListProbeGroupsRequest"))
	}
	m.View = fv
}

// Request message for method
// [ListProbeGroups][ntt.watchdog.v1alpha2.ListProbeGroups]
type ListProbeGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of ProbeGroups
	ProbeGroups []*probe_group.ProbeGroup `protobuf:"bytes,1,rep,name=probe_groups,json=probeGroups,proto3" json:"probe_groups,omitempty" firestore:"probeGroups"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListProbeGroupsRequest.page_token][ntt.watchdog.v1alpha2.ListProbeGroupsRequest.page_token]
	PrevPageToken *probe_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListProbeGroupsRequest.page_token][ntt.watchdog.v1alpha2.ListProbeGroupsRequest.page_token]
	NextPageToken *probe_group.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListProbeGroupsResponse) Reset() {
	*m = ListProbeGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProbeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProbeGroupsResponse) ProtoMessage() {}

func (m *ListProbeGroupsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProbeGroupsResponse) GotenMessage() {}

// Deprecated, Use ListProbeGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListProbeGroupsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListProbeGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProbeGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProbeGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProbeGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProbeGroupsResponse) GetProbeGroups() []*probe_group.ProbeGroup {
	if m != nil {
		return m.ProbeGroups
	}
	return nil
}

func (m *ListProbeGroupsResponse) GetPrevPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListProbeGroupsResponse) GetNextPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListProbeGroupsResponse) SetProbeGroups(fv []*probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroups", "ListProbeGroupsResponse"))
	}
	m.ProbeGroups = fv
}

func (m *ListProbeGroupsResponse) SetPrevPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListProbeGroupsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListProbeGroupsResponse) SetNextPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListProbeGroupsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method
// [WatchProbeGroup][ntt.watchdog.v1alpha2.WatchProbeGroup]
type WatchProbeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.watchdog.v1alpha2.ProbeGroup
	Name *probe_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,2,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchProbeGroupRequest) Reset() {
	*m = WatchProbeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbeGroupRequest) ProtoMessage() {}

func (m *WatchProbeGroupRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbeGroupRequest) GotenMessage() {}

// Deprecated, Use WatchProbeGroupRequest.ProtoReflect.Descriptor instead.
func (*WatchProbeGroupRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchProbeGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbeGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbeGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbeGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbeGroupRequest) GetName() *probe_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchProbeGroupRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchProbeGroupRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchProbeGroupRequest) SetName(fv *probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchProbeGroupRequest"))
	}
	m.Name = fv
}

func (m *WatchProbeGroupRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchProbeGroupRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchProbeGroupRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchProbeGroupRequest"))
	}
	m.View = fv
}

// WatchProbeGroupResponse
type WatchProbeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *probe_group.ProbeGroupChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchProbeGroupResponse) Reset() {
	*m = WatchProbeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbeGroupResponse) ProtoMessage() {}

func (m *WatchProbeGroupResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbeGroupResponse) GotenMessage() {}

// Deprecated, Use WatchProbeGroupResponse.ProtoReflect.Descriptor instead.
func (*WatchProbeGroupResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchProbeGroupResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbeGroupResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbeGroupResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbeGroupResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbeGroupResponse) GetChange() *probe_group.ProbeGroupChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchProbeGroupResponse) SetChange(fv *probe_group.ProbeGroupChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchProbeGroupResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchProbeGroups][ntt.watchdog.v1alpha2.WatchProbeGroups]
type WatchProbeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.watchdog.v1alpha2.ProbeGroup
	Parent *probe_group.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbeGroups than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *probe_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *probe_group.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probe_group.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to ProbeGroup that don't
	// affect any of masked fields won't be sent back.
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,6,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// ProbeGroup that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchProbeGroupsRequest) Reset() {
	*m = WatchProbeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbeGroupsRequest) ProtoMessage() {}

func (m *WatchProbeGroupsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbeGroupsRequest) GotenMessage() {}

// Deprecated, Use WatchProbeGroupsRequest.ProtoReflect.Descriptor instead.
func (*WatchProbeGroupsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchProbeGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbeGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbeGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbeGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbeGroupsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchProbeGroupsRequest) GetParent() *probe_group.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchProbeGroupsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchProbeGroupsRequest) GetPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchProbeGroupsRequest) GetOrderBy() *probe_group.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchProbeGroupsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchProbeGroupsRequest) GetFilter() *probe_group.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchProbeGroupsRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchProbeGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchProbeGroupsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchProbeGroupsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchProbeGroupsRequest"))
	}
	m.Type = fv
}

func (m *WatchProbeGroupsRequest) SetParent(fv *probe_group.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchProbeGroupsRequest"))
	}
	m.Parent = fv
}

func (m *WatchProbeGroupsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchProbeGroupsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchProbeGroupsRequest) SetPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchProbeGroupsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchProbeGroupsRequest) SetOrderBy(fv *probe_group.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchProbeGroupsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchProbeGroupsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchProbeGroupsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchProbeGroupsRequest) SetFilter(fv *probe_group.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchProbeGroupsRequest"))
	}
	m.Filter = fv
}

func (m *WatchProbeGroupsRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchProbeGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchProbeGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchProbeGroupsRequest"))
	}
	m.View = fv
}

func (m *WatchProbeGroupsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchProbeGroupsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchProbeGroupsResponse
type WatchProbeGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of ProbeGroups
	ProbeGroupChanges []*probe_group.ProbeGroupChange `protobuf:"bytes,2,rep,name=probe_group_changes,json=probeGroupChanges,proto3" json:"probe_group_changes,omitempty" firestore:"probeGroupChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All ProbeGroups will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchProbeGroupsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (ProbeGroups will contains changes
	// of type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchProbeGroupsResponse) Reset() {
	*m = WatchProbeGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbeGroupsResponse) ProtoMessage() {}

func (m *WatchProbeGroupsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbeGroupsResponse) GotenMessage() {}

// Deprecated, Use WatchProbeGroupsResponse.ProtoReflect.Descriptor instead.
func (*WatchProbeGroupsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchProbeGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbeGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbeGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbeGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbeGroupsResponse) GetProbeGroupChanges() []*probe_group.ProbeGroupChange {
	if m != nil {
		return m.ProbeGroupChanges
	}
	return nil
}

func (m *WatchProbeGroupsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchProbeGroupsResponse) GetPageTokenChange() *WatchProbeGroupsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchProbeGroupsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchProbeGroupsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchProbeGroupsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchProbeGroupsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchProbeGroupsResponse) SetProbeGroupChanges(fv []*probe_group.ProbeGroupChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroupChanges", "WatchProbeGroupsResponse"))
	}
	m.ProbeGroupChanges = fv
}

func (m *WatchProbeGroupsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchProbeGroupsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchProbeGroupsResponse) SetPageTokenChange(fv *WatchProbeGroupsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchProbeGroupsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchProbeGroupsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchProbeGroupsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchProbeGroupsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchProbeGroupsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchProbeGroupsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchProbeGroupsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchProbeGroupsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchProbeGroupsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateProbeGroup][ntt.watchdog.v1alpha2.CreateProbeGroup]
type CreateProbeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.watchdog.v1alpha2.ProbeGroup
	Parent *probe_group.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// ProbeGroup resource body
	ProbeGroup *probe_group.ProbeGroup `protobuf:"bytes,2,opt,name=probe_group,json=probeGroup,proto3" json:"probe_group,omitempty" firestore:"probeGroup"`
}

func (m *CreateProbeGroupRequest) Reset() {
	*m = CreateProbeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateProbeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateProbeGroupRequest) ProtoMessage() {}

func (m *CreateProbeGroupRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateProbeGroupRequest) GotenMessage() {}

// Deprecated, Use CreateProbeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateProbeGroupRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateProbeGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateProbeGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateProbeGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateProbeGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateProbeGroupRequest) GetParent() *probe_group.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateProbeGroupRequest) GetProbeGroup() *probe_group.ProbeGroup {
	if m != nil {
		return m.ProbeGroup
	}
	return nil
}

func (m *CreateProbeGroupRequest) SetParent(fv *probe_group.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateProbeGroupRequest"))
	}
	m.Parent = fv
}

func (m *CreateProbeGroupRequest) SetProbeGroup(fv *probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroup", "CreateProbeGroupRequest"))
	}
	m.ProbeGroup = fv
}

// Request message for method
// [UpdateProbeGroup][ntt.watchdog.v1alpha2.UpdateProbeGroup]
type UpdateProbeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ProbeGroup resource body
	ProbeGroup *probe_group.ProbeGroup `protobuf:"bytes,2,opt,name=probe_group,json=probeGroup,proto3" json:"probe_group,omitempty" firestore:"probeGroup"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,3,opt,customtype=ProbeGroup_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateProbeGroupRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateProbeGroupRequest) Reset() {
	*m = UpdateProbeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateProbeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateProbeGroupRequest) ProtoMessage() {}

func (m *UpdateProbeGroupRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateProbeGroupRequest) GotenMessage() {}

// Deprecated, Use UpdateProbeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateProbeGroupRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateProbeGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateProbeGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateProbeGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateProbeGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateProbeGroupRequest) GetProbeGroup() *probe_group.ProbeGroup {
	if m != nil {
		return m.ProbeGroup
	}
	return nil
}

func (m *UpdateProbeGroupRequest) GetUpdateMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateProbeGroupRequest) GetCas() *UpdateProbeGroupRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateProbeGroupRequest) SetProbeGroup(fv *probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroup", "UpdateProbeGroupRequest"))
	}
	m.ProbeGroup = fv
}

func (m *UpdateProbeGroupRequest) SetUpdateMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateProbeGroupRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateProbeGroupRequest) SetCas(fv *UpdateProbeGroupRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateProbeGroupRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeleteProbeGroup][ntt.watchdog.v1alpha2.DeleteProbeGroup]
type DeleteProbeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.ProbeGroup
	Name *probe_group.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteProbeGroupRequest) Reset() {
	*m = DeleteProbeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteProbeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteProbeGroupRequest) ProtoMessage() {}

func (m *DeleteProbeGroupRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteProbeGroupRequest) GotenMessage() {}

// Deprecated, Use DeleteProbeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteProbeGroupRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteProbeGroupRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteProbeGroupRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteProbeGroupRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteProbeGroupRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteProbeGroupRequest) GetName() *probe_group.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteProbeGroupRequest) SetName(fv *probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteProbeGroupRequest"))
	}
	m.Name = fv
}

// Request message for method
// [SearchProbeGroups][ntt.watchdog.v1alpha2.SearchProbeGroups]
type SearchProbeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.watchdog.v1alpha2.ProbeGroup
	Parent *probe_group.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbeGroups than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [SearchProbeGroupsResponse.next_page_token][ntt.watchdog.v1alpha2.SearchProbeGroupsResponse.next_page_token]
	PageToken *probe_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *probe_group.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probe_group.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,6,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Optional search phrase used to further filter results.
	Phrase string `protobuf:"bytes,8,opt,name=phrase,proto3" json:"phrase,omitempty" firestore:"phrase"`
}

func (m *SearchProbeGroupsRequest) Reset() {
	*m = SearchProbeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchProbeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchProbeGroupsRequest) ProtoMessage() {}

func (m *SearchProbeGroupsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchProbeGroupsRequest) GotenMessage() {}

// Deprecated, Use SearchProbeGroupsRequest.ProtoReflect.Descriptor instead.
func (*SearchProbeGroupsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{12}
}

func (m *SearchProbeGroupsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchProbeGroupsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchProbeGroupsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchProbeGroupsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchProbeGroupsRequest) GetParent() *probe_group.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SearchProbeGroupsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *SearchProbeGroupsRequest) GetPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *SearchProbeGroupsRequest) GetOrderBy() *probe_group.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SearchProbeGroupsRequest) GetFilter() *probe_group.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchProbeGroupsRequest) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchProbeGroupsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *SearchProbeGroupsRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *SearchProbeGroupsRequest) SetParent(fv *probe_group.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "SearchProbeGroupsRequest"))
	}
	m.Parent = fv
}

func (m *SearchProbeGroupsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "SearchProbeGroupsRequest"))
	}
	m.PageSize = fv
}

func (m *SearchProbeGroupsRequest) SetPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "SearchProbeGroupsRequest"))
	}
	m.PageToken = fv
}

func (m *SearchProbeGroupsRequest) SetOrderBy(fv *probe_group.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "SearchProbeGroupsRequest"))
	}
	m.OrderBy = fv
}

func (m *SearchProbeGroupsRequest) SetFilter(fv *probe_group.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "SearchProbeGroupsRequest"))
	}
	m.Filter = fv
}

func (m *SearchProbeGroupsRequest) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "SearchProbeGroupsRequest"))
	}
	m.FieldMask = fv
}

func (m *SearchProbeGroupsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "SearchProbeGroupsRequest"))
	}
	m.View = fv
}

func (m *SearchProbeGroupsRequest) SetPhrase(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phrase", "SearchProbeGroupsRequest"))
	}
	m.Phrase = fv
}

// Request message for method
// [SearchProbeGroups][ntt.watchdog.v1alpha2.SearchProbeGroups]
type SearchProbeGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of ProbeGroups
	ProbeGroups []*probe_group.ProbeGroup `protobuf:"bytes,1,rep,name=probe_groups,json=probeGroups,proto3" json:"probe_groups,omitempty" firestore:"probeGroups"`
	// A token to retrieve previous page of results. Pass this value in the
	// [SearchProbeGroupsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbeGroupsRequest.page_token]
	PrevPageToken *probe_group.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [SearchProbeGroupsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbeGroupsRequest.page_token]
	NextPageToken *probe_group.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page (0 if no page tokens were given). Page
	// index can be computed from offset and limit provided in a request
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total ProbeGroups across all pages.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *SearchProbeGroupsResponse) Reset() {
	*m = SearchProbeGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchProbeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchProbeGroupsResponse) ProtoMessage() {}

func (m *SearchProbeGroupsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchProbeGroupsResponse) GotenMessage() {}

// Deprecated, Use SearchProbeGroupsResponse.ProtoReflect.Descriptor instead.
func (*SearchProbeGroupsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{13}
}

func (m *SearchProbeGroupsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchProbeGroupsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchProbeGroupsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchProbeGroupsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchProbeGroupsResponse) GetProbeGroups() []*probe_group.ProbeGroup {
	if m != nil {
		return m.ProbeGroups
	}
	return nil
}

func (m *SearchProbeGroupsResponse) GetPrevPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *SearchProbeGroupsResponse) GetNextPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *SearchProbeGroupsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *SearchProbeGroupsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *SearchProbeGroupsResponse) SetProbeGroups(fv []*probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroups", "SearchProbeGroupsResponse"))
	}
	m.ProbeGroups = fv
}

func (m *SearchProbeGroupsResponse) SetPrevPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "SearchProbeGroupsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *SearchProbeGroupsResponse) SetNextPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "SearchProbeGroupsResponse"))
	}
	m.NextPageToken = fv
}

func (m *SearchProbeGroupsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "SearchProbeGroupsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *SearchProbeGroupsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "SearchProbeGroupsResponse"))
	}
	m.TotalResultsCount = fv
}

type WatchProbeGroupsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *probe_group.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *probe_group.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchProbeGroupsResponse_PageTokenChange) Reset() {
	*m = WatchProbeGroupsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbeGroupsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbeGroupsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchProbeGroupsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbeGroupsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchProbeGroupsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchProbeGroupsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchProbeGroupsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbeGroupsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbeGroupsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbeGroupsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbeGroupsResponse_PageTokenChange) GetPrevPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchProbeGroupsResponse_PageTokenChange) GetNextPageToken() *probe_group.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchProbeGroupsResponse_PageTokenChange) SetPrevPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchProbeGroupsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchProbeGroupsResponse_PageTokenChange) SetNextPageToken(fv *probe_group.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchProbeGroupsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateProbeGroupRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *probe_group.ProbeGroup `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *probe_group.ProbeGroup_FieldMask `protobuf:"bytes,2,opt,customtype=ProbeGroup_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateProbeGroupRequest_CAS) Reset() {
	*m = UpdateProbeGroupRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateProbeGroupRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateProbeGroupRequest_CAS) ProtoMessage() {}

func (m *UpdateProbeGroupRequest_CAS) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateProbeGroupRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateProbeGroupRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateProbeGroupRequest_CAS) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateProbeGroupRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateProbeGroupRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateProbeGroupRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateProbeGroupRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateProbeGroupRequest_CAS) GetConditionalState() *probe_group.ProbeGroup {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateProbeGroupRequest_CAS) GetFieldMask() *probe_group.ProbeGroup_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateProbeGroupRequest_CAS) SetConditionalState(fv *probe_group.ProbeGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateProbeGroupRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateProbeGroupRequest_CAS) SetFieldMask(fv *probe_group.ProbeGroup_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateProbeGroupRequest_CAS"))
	}
	m.FieldMask = fv
}

var watchdog_proto_v1alpha2_probe_group_service_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probe_group_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0xc1, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda,
	0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf4, 0x02, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x3a, 0x0c, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12,
	0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x2a, 0x0c, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x1a, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2,
	0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2,
	0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22,
	0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9, 0x01, 0x0a,
	0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5a, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x85, 0x04, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x42, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x2a, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x1a, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21,
	0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9b, 0x04, 0x0a,
	0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x6b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x89,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21,
	0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x42, 0x0c, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x1e, 0xc2, 0x85, 0x2c, 0x1a, 0x32, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0xa4, 0x01,
	0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x28, 0xc2, 0x85, 0x2c, 0x24, 0x32, 0x10, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x12, 0x0c, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x0e, 0x3a, 0x0c, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x2a, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x1a, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21,
	0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xb3, 0x13, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xe6, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x84, 0x01, 0x82, 0xdb, 0x21, 0x21, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x2a, 0x7d, 0x92, 0x97, 0x22, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x8e, 0x02, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82, 0xdb, 0x21, 0x31,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x32, 0x0e, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22,
	0x26, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x89, 0x02, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96,
	0x01, 0x82, 0xdb, 0x21, 0x30, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x0e, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x97, 0x22, 0x23,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x85, 0x02, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xdb, 0x21,
	0x25, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x05, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x9d, 0x02, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xdb, 0x21, 0x38, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x15, 0x12,
	0x13, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x92, 0x97, 0x22, 0x24, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x96, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xae, 0x01, 0x82, 0xdb, 0x21, 0x35, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x2a, 0x15, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x29, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x97, 0x22, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xa1, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0xb9, 0x01, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0d, 0x12, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x35, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x2a, 0x7d, 0x92, 0x97, 0x22, 0x2e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xe3, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x86, 0x01, 0x82, 0xdb, 0x21, 0x1c,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02,
	0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5,
	0x22, 0x03, 0x12, 0x9a, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xdb,
	0x21, 0x32, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x0e, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x12, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x92, 0x97, 0x22, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x1a,
	0x30, 0xca, 0x41, 0x13, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x42, 0xf8, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x4e, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x8a, 0xff, 0xd0, 0x02, 0x4e,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x16, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x3b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probe_group_service_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probe_group_service_proto_rawDescData = watchdog_proto_v1alpha2_probe_group_service_proto_rawDesc
)

func watchdog_proto_v1alpha2_probe_group_service_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probe_group_service_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probe_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probe_group_service_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probe_group_service_proto_rawDescData
}

var watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var watchdog_proto_v1alpha2_probe_group_service_proto_goTypes = []interface{}{
	(*GetProbeGroupRequest)(nil),                     // 0: ntt.watchdog.v1alpha2.GetProbeGroupRequest
	(*BatchGetProbeGroupsRequest)(nil),               // 1: ntt.watchdog.v1alpha2.BatchGetProbeGroupsRequest
	(*BatchGetProbeGroupsResponse)(nil),              // 2: ntt.watchdog.v1alpha2.BatchGetProbeGroupsResponse
	(*ListProbeGroupsRequest)(nil),                   // 3: ntt.watchdog.v1alpha2.ListProbeGroupsRequest
	(*ListProbeGroupsResponse)(nil),                  // 4: ntt.watchdog.v1alpha2.ListProbeGroupsResponse
	(*WatchProbeGroupRequest)(nil),                   // 5: ntt.watchdog.v1alpha2.WatchProbeGroupRequest
	(*WatchProbeGroupResponse)(nil),                  // 6: ntt.watchdog.v1alpha2.WatchProbeGroupResponse
	(*WatchProbeGroupsRequest)(nil),                  // 7: ntt.watchdog.v1alpha2.WatchProbeGroupsRequest
	(*WatchProbeGroupsResponse)(nil),                 // 8: ntt.watchdog.v1alpha2.WatchProbeGroupsResponse
	(*CreateProbeGroupRequest)(nil),                  // 9: ntt.watchdog.v1alpha2.CreateProbeGroupRequest
	(*UpdateProbeGroupRequest)(nil),                  // 10: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest
	(*DeleteProbeGroupRequest)(nil),                  // 11: ntt.watchdog.v1alpha2.DeleteProbeGroupRequest
	(*SearchProbeGroupsRequest)(nil),                 // 12: ntt.watchdog.v1alpha2.SearchProbeGroupsRequest
	(*SearchProbeGroupsResponse)(nil),                // 13: ntt.watchdog.v1alpha2.SearchProbeGroupsResponse
	(*WatchProbeGroupsResponse_PageTokenChange)(nil), // 14: ntt.watchdog.v1alpha2.WatchProbeGroupsResponse.PageTokenChange
	(*UpdateProbeGroupRequest_CAS)(nil),              // 15: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.CAS
	(*probe_group.ProbeGroup_FieldMask)(nil),         // 16: ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	(view.View)(0),                                   // 17: goten.view.View
	(*probe_group.ProbeGroup)(nil),                   // 18: ntt.watchdog.v1alpha2.ProbeGroup
	(*probe_group.ProbeGroupChange)(nil),             // 19: ntt.watchdog.v1alpha2.ProbeGroupChange
	(watch_type.WatchType)(0),                        // 20: goten.watch_type.WatchType
	(*empty.Empty)(nil),                              // 21: google.protobuf.Empty
}
var watchdog_proto_v1alpha2_probe_group_service_proto_depIdxs = []int32{
	16, // 0: ntt.watchdog.v1alpha2.GetProbeGroupRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 1: ntt.watchdog.v1alpha2.GetProbeGroupRequest.view:type_name -> goten.view.View
	16, // 2: ntt.watchdog.v1alpha2.BatchGetProbeGroupsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 3: ntt.watchdog.v1alpha2.BatchGetProbeGroupsRequest.view:type_name -> goten.view.View
	18, // 4: ntt.watchdog.v1alpha2.BatchGetProbeGroupsResponse.probe_groups:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	16, // 5: ntt.watchdog.v1alpha2.ListProbeGroupsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 6: ntt.watchdog.v1alpha2.ListProbeGroupsRequest.view:type_name -> goten.view.View
	18, // 7: ntt.watchdog.v1alpha2.ListProbeGroupsResponse.probe_groups:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	16, // 8: ntt.watchdog.v1alpha2.WatchProbeGroupRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 9: ntt.watchdog.v1alpha2.WatchProbeGroupRequest.view:type_name -> goten.view.View
	19, // 10: ntt.watchdog.v1alpha2.WatchProbeGroupResponse.change:type_name -> ntt.watchdog.v1alpha2.ProbeGroupChange
	20, // 11: ntt.watchdog.v1alpha2.WatchProbeGroupsRequest.type:type_name -> goten.watch_type.WatchType
	16, // 12: ntt.watchdog.v1alpha2.WatchProbeGroupsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 13: ntt.watchdog.v1alpha2.WatchProbeGroupsRequest.view:type_name -> goten.view.View
	19, // 14: ntt.watchdog.v1alpha2.WatchProbeGroupsResponse.probe_group_changes:type_name -> ntt.watchdog.v1alpha2.ProbeGroupChange
	14, // 15: ntt.watchdog.v1alpha2.WatchProbeGroupsResponse.page_token_change:type_name -> ntt.watchdog.v1alpha2.WatchProbeGroupsResponse.PageTokenChange
	18, // 16: ntt.watchdog.v1alpha2.CreateProbeGroupRequest.probe_group:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	18, // 17: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.probe_group:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	16, // 18: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.update_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	15, // 19: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.cas:type_name -> ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.CAS
	16, // 20: ntt.watchdog.v1alpha2.SearchProbeGroupsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	17, // 21: ntt.watchdog.v1alpha2.SearchProbeGroupsRequest.view:type_name -> goten.view.View
	18, // 22: ntt.watchdog.v1alpha2.SearchProbeGroupsResponse.probe_groups:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	18, // 23: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.CAS.conditional_state:type_name -> ntt.watchdog.v1alpha2.ProbeGroup
	16, // 24: ntt.watchdog.v1alpha2.UpdateProbeGroupRequest.CAS.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbeGroup_FieldMask
	0,  // 25: ntt.watchdog.v1alpha2.ProbeGroupService.GetProbeGroup:input_type -> ntt.watchdog.v1alpha2.GetProbeGroupRequest
	1,  // 26: ntt.watchdog.v1alpha2.ProbeGroupService.BatchGetProbeGroups:input_type -> ntt.watchdog.v1alpha2.BatchGetProbeGroupsRequest
	3,  // 27: ntt.watchdog.v1alpha2.ProbeGroupService.ListProbeGroups:input_type -> ntt.watchdog.v1alpha2.ListProbeGroupsRequest
	5,  // 28: ntt.watchdog.v1alpha2.ProbeGroupService.WatchProbeGroup:input_type -> ntt.watchdog.v1alpha2.WatchProbeGroupRequest
	7,  // 29: ntt.watchdog.v1alpha2.ProbeGroupService.WatchProbeGroups:input_type -> ntt.watchdog.v1alpha2.WatchProbeGroupsRequest
	9,  // 30: ntt.watchdog.v1alpha2.ProbeGroupService.CreateProbeGroup:input_type -> ntt.watchdog.v1alpha2.CreateProbeGroupRequest
	10, // 31: ntt.watchdog.v1alpha2.ProbeGroupService.UpdateProbeGroup:input_type -> ntt.watchdog.v1alpha2.UpdateProbeGroupRequest
	11, // 32: ntt.watchdog.v1alpha2.ProbeGroupService.DeleteProbeGroup:input_type -> ntt.watchdog.v1alpha2.DeleteProbeGroupRequest
	12, // 33: ntt.watchdog.v1alpha2.ProbeGroupService.SearchProbeGroups:input_type -> ntt.watchdog.v1alpha2.SearchProbeGroupsRequest
	18, // 34: ntt.watchdog.v1alpha2.ProbeGroupService.GetProbeGroup:output_type -> ntt.watchdog.v1alpha2.ProbeGroup
	2,  // 35: ntt.watchdog.v1alpha2.ProbeGroupService.BatchGetProbeGroups:output_type -> ntt.watchdog.v1alpha2.BatchGetProbeGroupsResponse
	4,  // 36: ntt.watchdog.v1alpha2.ProbeGroupService.ListProbeGroups:output_type -> ntt.watchdog.v1alpha2.ListProbeGroupsResponse
	6,  // 37: ntt.watchdog.v1alpha2.ProbeGroupService.WatchProbeGroup:output_type -> ntt.watchdog.v1alpha2.WatchProbeGroupResponse
	8,  // 38: ntt.watchdog.v1alpha2.ProbeGroupService.WatchProbeGroups:output_type -> ntt.watchdog.v1alpha2.WatchProbeGroupsResponse
	18, // 39: ntt.watchdog.v1alpha2.ProbeGroupService.CreateProbeGroup:output_type -> ntt.watchdog.v1alpha2.ProbeGroup
	18, // 40: ntt.watchdog.v1alpha2.ProbeGroupService.UpdateProbeGroup:output_type -> ntt.watchdog.v1alpha2.ProbeGroup
	21, // 41: ntt.watchdog.v1alpha2.ProbeGroupService.DeleteProbeGroup:output_type -> google.protobuf.Empty
	13, // 42: ntt.watchdog.v1alpha2.ProbeGroupService.SearchProbeGroups:output_type -> ntt.watchdog.v1alpha2.SearchProbeGroupsResponse
	34, // [34:43] is the sub-list for method output_type
	25, // [25:34] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probe_group_service_proto_init() }
func watchdog_proto_v1alpha2_probe_group_service_proto_init() {
	if watchdog_proto_v1alpha2_probe_group_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProbeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetProbeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetProbeGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProbeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProbeGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbeGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProbeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProbeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProbeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProbeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProbeGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbeGroupsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProbeGroupRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probe_group_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           watchdog_proto_v1alpha2_probe_group_service_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probe_group_service_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_probe_group_service_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probe_group_service_proto = out.File
	watchdog_proto_v1alpha2_probe_group_service_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probe_group_service_proto_goTypes = nil
	watchdog_proto_v1alpha2_probe_group_service_proto_depIdxs = nil
}
