// Code generated by protoc-gen-goten-client
// API: ProbingDistributionService
// DO NOT EDIT!!!

package probing_distribution_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_distribution.ProbingDistribution{}
)

var (
	descriptorsInitialized                 bool
	probingDistributionServiceDescriptor   *ProbingDistributionServiceDescriptor
	getProbingDistributionDescriptor       *GetProbingDistributionDescriptor
	batchGetProbingDistributionsDescriptor *BatchGetProbingDistributionsDescriptor
	listProbingDistributionsDescriptor     *ListProbingDistributionsDescriptor
	watchProbingDistributionDescriptor     *WatchProbingDistributionDescriptor
	watchProbingDistributionsDescriptor    *WatchProbingDistributionsDescriptor
	createProbingDistributionDescriptor    *CreateProbingDistributionDescriptor
	updateProbingDistributionDescriptor    *UpdateProbingDistributionDescriptor
	deleteProbingDistributionDescriptor    *DeleteProbingDistributionDescriptor
	searchProbingDistributionsDescriptor   *SearchProbingDistributionsDescriptor
)

type GetProbingDistributionDescriptor struct{}

type GetProbingDistributionDescriptorClientMsgHandle struct{}

type GetProbingDistributionDescriptorServerMsgHandle struct{}

func (d *GetProbingDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbingDistributionRequest{}
}

func (d *GetProbingDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_distribution.ProbingDistribution{}
}

func (d *GetProbingDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbingDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbingDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbingDistributionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProbingDistributionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProbingDistributionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProbingDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbingDistributionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbingDistributionDescriptor) GetMethodName() string {
	return "GetProbingDistribution"
}

func (d *GetProbingDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/GetProbingDistribution"
}

func (d *GetProbingDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbingDistributionDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *GetProbingDistributionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbingDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbingDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *GetProbingDistributionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *GetProbingDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingDistributionDescriptorClientMsgHandle{}
}

func (d *GetProbingDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingDistributionDescriptorServerMsgHandle{}
}

func (h *GetProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProbingDistributionRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_distribution.Name)(nil)
}

func (h *GetProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProbingDistributionRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingDistributionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProbingDistributionRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_distribution.ProbingDistribution) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_distribution.ProbingDistribution) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingDistributionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_distribution.ProbingDistribution) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbingDistributionDescriptor() *GetProbingDistributionDescriptor {
	return getProbingDistributionDescriptor
}

type BatchGetProbingDistributionsDescriptor struct{}

type BatchGetProbingDistributionsDescriptorClientMsgHandle struct{}

type BatchGetProbingDistributionsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbingDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbingDistributionsRequest{}
}

func (d *BatchGetProbingDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbingDistributionsResponse{}
}

func (d *BatchGetProbingDistributionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbingDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbingDistributionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbingDistributionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProbingDistributionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProbingDistributionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProbingDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbingDistributionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbingDistributionsDescriptor) GetMethodName() string {
	return "BatchGetProbingDistributions"
}

func (d *BatchGetProbingDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/BatchGetProbingDistributions"
}

func (d *BatchGetProbingDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbingDistributionsDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *BatchGetProbingDistributionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbingDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbingDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *BatchGetProbingDistributionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *BatchGetProbingDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingDistributionsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbingDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingDistributionsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingDistributionsRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingDistributionsRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(probing_distribution.ProbingDistributionNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (probing_distribution.ProbingDistributionNameList)(nil)
}

func (h *BatchGetProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingDistributionsRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingDistributionsResponse) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingDistributionsResponse) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingDistributions()
	list := make(probing_distribution.ProbingDistributionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingDistributionsResponse) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbingDistributionsDescriptor() *BatchGetProbingDistributionsDescriptor {
	return batchGetProbingDistributionsDescriptor
}

type ListProbingDistributionsDescriptor struct{}

type ListProbingDistributionsDescriptorClientMsgHandle struct{}

type ListProbingDistributionsDescriptorServerMsgHandle struct{}

func (d *ListProbingDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbingDistributionsRequest{}
}

func (d *ListProbingDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbingDistributionsResponse{}
}

func (d *ListProbingDistributionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbingDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbingDistributionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbingDistributionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProbingDistributionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProbingDistributionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProbingDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbingDistributionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbingDistributionsDescriptor) GetMethodName() string {
	return "ListProbingDistributions"
}

func (d *ListProbingDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/ListProbingDistributions"
}

func (d *ListProbingDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbingDistributionsDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *ListProbingDistributionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbingDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbingDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *ListProbingDistributionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *ListProbingDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingDistributionsDescriptorClientMsgHandle{}
}

func (d *ListProbingDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingDistributionsDescriptorServerMsgHandle{}
}

func (h *ListProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingDistributionsRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingDistributionsRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingDistributionsRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingDistributionsResponse) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingDistributionsResponse) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingDistributions()
	list := make(probing_distribution.ProbingDistributionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingDistributionsResponse) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProbingDistributionsDescriptor() *ListProbingDistributionsDescriptor {
	return listProbingDistributionsDescriptor
}

type WatchProbingDistributionDescriptor struct{}

type WatchProbingDistributionDescriptorClientMsgHandle struct{}

type WatchProbingDistributionDescriptorServerMsgHandle struct{}

func (d *WatchProbingDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingDistributionRequest{}
}

func (d *WatchProbingDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingDistributionResponse{}
}

func (d *WatchProbingDistributionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingDistributionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingDistributionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProbingDistributionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProbingDistributionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingDistributionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingDistributionDescriptor) GetMethodName() string {
	return "WatchProbingDistribution"
}

func (d *WatchProbingDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/WatchProbingDistribution"
}

func (d *WatchProbingDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingDistributionDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *WatchProbingDistributionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *WatchProbingDistributionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *WatchProbingDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingDistributionDescriptorClientMsgHandle{}
}

func (d *WatchProbingDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingDistributionDescriptorServerMsgHandle{}
}

func (h *WatchProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingDistributionRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_distribution.Name)(nil)
}

func (h *WatchProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingDistributionRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingDistributionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingDistributionRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingDistributionResponse) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *probing_distribution.ProbingDistributionChange_Added_:
			return tResChange.Added.GetProbingDistribution().GetName()
		case *probing_distribution.ProbingDistributionChange_Modified_:
			return tResChange.Modified.GetName()
		case *probing_distribution.ProbingDistributionChange_Removed_:
			return tResChange.Removed.GetName()
		case *probing_distribution.ProbingDistributionChange_Current_:
			return tResChange.Current.GetProbingDistribution().GetName()
		}
	}
	return (*probing_distribution.Name)(nil)
}

func (h *WatchProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingDistributionResponse) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingDistributionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingDistributionResponse) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingDistributionDescriptor() *WatchProbingDistributionDescriptor {
	return watchProbingDistributionDescriptor
}

type WatchProbingDistributionsDescriptor struct{}

type WatchProbingDistributionsDescriptorClientMsgHandle struct{}

type WatchProbingDistributionsDescriptorServerMsgHandle struct{}

func (d *WatchProbingDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingDistributionsRequest{}
}

func (d *WatchProbingDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingDistributionsResponse{}
}

func (d *WatchProbingDistributionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingDistributionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingDistributionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProbingDistributionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProbingDistributionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingDistributionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingDistributionsDescriptor) GetMethodName() string {
	return "WatchProbingDistributions"
}

func (d *WatchProbingDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/WatchProbingDistributions"
}

func (d *WatchProbingDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingDistributionsDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *WatchProbingDistributionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *WatchProbingDistributionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *WatchProbingDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingDistributionsDescriptorClientMsgHandle{}
}

func (d *WatchProbingDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingDistributionsDescriptorServerMsgHandle{}
}

func (h *WatchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingDistributionsRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingDistributionsRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingDistributionsRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_distribution.ParentName)(nil)
}

func (h *WatchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingDistributionsResponse) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingDistributionsResponse) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProbingDistributionChanges()
	list := make(probing_distribution.ProbingDistributionNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *probing_distribution.ProbingDistributionChange_Added_:
			list = append(list, tResChange.Added.GetProbingDistribution().GetName())
		case *probing_distribution.ProbingDistributionChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *probing_distribution.ProbingDistributionChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *probing_distribution.ProbingDistributionChange_Current_:
			list = append(list, tResChange.Current.GetProbingDistribution().GetName())
		}
	}
	return list
}

func (h *WatchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingDistributionsResponse) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingDistributionsDescriptor() *WatchProbingDistributionsDescriptor {
	return watchProbingDistributionsDescriptor
}

type CreateProbingDistributionDescriptor struct{}

type CreateProbingDistributionDescriptorClientMsgHandle struct{}

type CreateProbingDistributionDescriptorServerMsgHandle struct{}

func (d *CreateProbingDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbingDistributionRequest{}
}

func (d *CreateProbingDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_distribution.ProbingDistribution{}
}

func (d *CreateProbingDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbingDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbingDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbingDistributionDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProbingDistributionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProbingDistributionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProbingDistributionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbingDistributionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbingDistributionDescriptor) GetMethodName() string {
	return "CreateProbingDistribution"
}

func (d *CreateProbingDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/CreateProbingDistribution"
}

func (d *CreateProbingDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbingDistributionDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *CreateProbingDistributionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbingDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbingDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *CreateProbingDistributionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *CreateProbingDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingDistributionDescriptorClientMsgHandle{}
}

func (d *CreateProbingDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingDistributionDescriptorServerMsgHandle{}
}

func (h *CreateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProbingDistributionRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingDistribution().GetName()
}

func (h *CreateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProbingDistributionRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProbingDistributionRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_distribution.ParentName)(nil)
}

func (h *CreateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_distribution.ProbingDistribution) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_distribution.ProbingDistribution) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_distribution.ProbingDistribution) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbingDistributionDescriptor() *CreateProbingDistributionDescriptor {
	return createProbingDistributionDescriptor
}

type UpdateProbingDistributionDescriptor struct{}

type UpdateProbingDistributionDescriptorClientMsgHandle struct{}

type UpdateProbingDistributionDescriptorServerMsgHandle struct{}

func (d *UpdateProbingDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbingDistributionRequest{}
}

func (d *UpdateProbingDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_distribution.ProbingDistribution{}
}

func (d *UpdateProbingDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbingDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbingDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbingDistributionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProbingDistributionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProbingDistributionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProbingDistributionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbingDistributionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbingDistributionDescriptor) GetMethodName() string {
	return "UpdateProbingDistribution"
}

func (d *UpdateProbingDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/UpdateProbingDistribution"
}

func (d *UpdateProbingDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbingDistributionDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *UpdateProbingDistributionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbingDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbingDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *UpdateProbingDistributionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *UpdateProbingDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingDistributionDescriptorClientMsgHandle{}
}

func (d *UpdateProbingDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingDistributionDescriptorServerMsgHandle{}
}

func (h *UpdateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProbingDistributionRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingDistribution().GetName()
}

func (h *UpdateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProbingDistributionRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingDistributionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProbingDistributionRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_distribution.ProbingDistribution) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_distribution.ProbingDistribution) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingDistributionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_distribution.ProbingDistribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_distribution.ProbingDistribution) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbingDistributionDescriptor() *UpdateProbingDistributionDescriptor {
	return updateProbingDistributionDescriptor
}

type DeleteProbingDistributionDescriptor struct{}

type DeleteProbingDistributionDescriptorClientMsgHandle struct{}

type DeleteProbingDistributionDescriptorServerMsgHandle struct{}

func (d *DeleteProbingDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbingDistributionRequest{}
}

func (d *DeleteProbingDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbingDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbingDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbingDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbingDistributionDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProbingDistributionDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProbingDistributionDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProbingDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbingDistributionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbingDistributionDescriptor) GetMethodName() string {
	return "DeleteProbingDistribution"
}

func (d *DeleteProbingDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/DeleteProbingDistribution"
}

func (d *DeleteProbingDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbingDistributionDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *DeleteProbingDistributionDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbingDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbingDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *DeleteProbingDistributionDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *DeleteProbingDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingDistributionDescriptorClientMsgHandle{}
}

func (d *DeleteProbingDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingDistributionDescriptorServerMsgHandle{}
}

func (h *DeleteProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProbingDistributionRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_distribution.Name)(nil)
}

func (h *DeleteProbingDistributionDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProbingDistributionRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingDistributionDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProbingDistributionRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingDistributionDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingDistributionDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbingDistributionDescriptor() *DeleteProbingDistributionDescriptor {
	return deleteProbingDistributionDescriptor
}

type SearchProbingDistributionsDescriptor struct{}

type SearchProbingDistributionsDescriptorClientMsgHandle struct{}

type SearchProbingDistributionsDescriptorServerMsgHandle struct{}

func (d *SearchProbingDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchProbingDistributionsRequest{}
}

func (d *SearchProbingDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchProbingDistributionsResponse{}
}

func (d *SearchProbingDistributionsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchProbingDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchProbingDistributionsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchProbingDistributionsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *SearchProbingDistributionsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *SearchProbingDistributionsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *SearchProbingDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchProbingDistributionsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchProbingDistributionsDescriptor) GetMethodName() string {
	return "SearchProbingDistributions"
}

func (d *SearchProbingDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService/SearchProbingDistributions"
}

func (d *SearchProbingDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SearchProbingDistributionsDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *SearchProbingDistributionsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SearchProbingDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SearchProbingDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingDistributionServiceDescriptor
}

func (d *SearchProbingDistributionsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_distribution.GetDescriptor()
}

func (d *SearchProbingDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingDistributionsDescriptorClientMsgHandle{}
}

func (d *SearchProbingDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingDistributionsDescriptorServerMsgHandle{}
}

func (h *SearchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbingDistributionsRequest) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbingDistributionsRequest) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchProbingDistributionsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbingDistributionsRequest) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *SearchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbingDistributionsResponse) *probing_distribution.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbingDistributionsResponse) []*probing_distribution.Name
	})
	if ok {
		return probing_distribution.ProbingDistributionNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingDistributions()
	list := make(probing_distribution.ProbingDistributionNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *SearchProbingDistributionsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbingDistributionsResponse) *probing_distribution.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetSearchProbingDistributionsDescriptor() *SearchProbingDistributionsDescriptor {
	return searchProbingDistributionsDescriptor
}

type ProbingDistributionServiceDescriptor struct{}

func (d *ProbingDistributionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbingDistributionDescriptor,
		batchGetProbingDistributionsDescriptor,
		listProbingDistributionsDescriptor,
		watchProbingDistributionDescriptor,
		watchProbingDistributionsDescriptor,
		createProbingDistributionDescriptor,
		updateProbingDistributionDescriptor,
		deleteProbingDistributionDescriptor,
		searchProbingDistributionsDescriptor,
	}
}

func (d *ProbingDistributionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbingDistributionService"
}

func (d *ProbingDistributionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbingDistributionServiceDescriptor) GetApiName() string {
	return "ProbingDistributionService"
}

func (d *ProbingDistributionServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbingDistributionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbingDistributionServiceDescriptor() *ProbingDistributionServiceDescriptor {
	return probingDistributionServiceDescriptor
}

func initDescriptors() {
	probingDistributionServiceDescriptor = &ProbingDistributionServiceDescriptor{}
	getProbingDistributionDescriptor = &GetProbingDistributionDescriptor{}
	batchGetProbingDistributionsDescriptor = &BatchGetProbingDistributionsDescriptor{}
	listProbingDistributionsDescriptor = &ListProbingDistributionsDescriptor{}
	watchProbingDistributionDescriptor = &WatchProbingDistributionDescriptor{}
	watchProbingDistributionsDescriptor = &WatchProbingDistributionsDescriptor{}
	createProbingDistributionDescriptor = &CreateProbingDistributionDescriptor{}
	updateProbingDistributionDescriptor = &UpdateProbingDistributionDescriptor{}
	deleteProbingDistributionDescriptor = &DeleteProbingDistributionDescriptor{}
	searchProbingDistributionsDescriptor = &SearchProbingDistributionsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probingDistributionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbingDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbingDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbingDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbingDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbingDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbingDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchProbingDistributionsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
