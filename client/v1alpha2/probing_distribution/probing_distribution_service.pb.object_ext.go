// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_distribution_service.proto
// DO NOT EDIT!!!

package probing_distribution_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

func (o *GetProbingDistributionRequest) GotenObjectExt() {}

func (o *GetProbingDistributionRequest) MakeFullFieldMask() *GetProbingDistributionRequest_FieldMask {
	return FullGetProbingDistributionRequest_FieldMask()
}

func (o *GetProbingDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbingDistributionRequest_FieldMask()
}

func (o *GetProbingDistributionRequest) MakeDiffFieldMask(other *GetProbingDistributionRequest) *GetProbingDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbingDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbingDistributionRequest_FieldMask()
	}

	res := &GetProbingDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbingDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbingDistributionRequest))
}

func (o *GetProbingDistributionRequest) Clone() *GetProbingDistributionRequest {
	if o == nil {
		return nil
	}
	result := &GetProbingDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbingDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbingDistributionRequest) Merge(source *GetProbingDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbingDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbingDistributionRequest))
}

func (o *BatchGetProbingDistributionsRequest) GotenObjectExt() {}

func (o *BatchGetProbingDistributionsRequest) MakeFullFieldMask() *BatchGetProbingDistributionsRequest_FieldMask {
	return FullBatchGetProbingDistributionsRequest_FieldMask()
}

func (o *BatchGetProbingDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingDistributionsRequest_FieldMask()
}

func (o *BatchGetProbingDistributionsRequest) MakeDiffFieldMask(other *BatchGetProbingDistributionsRequest) *BatchGetProbingDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingDistributionsRequest_FieldMask()
	}

	res := &BatchGetProbingDistributionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbingDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingDistributionsRequest))
}

func (o *BatchGetProbingDistributionsRequest) Clone() *BatchGetProbingDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingDistributionsRequest{}
	result.Names = make([]*probing_distribution.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probing_distribution.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbingDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingDistributionsRequest) Merge(source *BatchGetProbingDistributionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbingDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingDistributionsRequest))
}

func (o *BatchGetProbingDistributionsResponse) GotenObjectExt() {}

func (o *BatchGetProbingDistributionsResponse) MakeFullFieldMask() *BatchGetProbingDistributionsResponse_FieldMask {
	return FullBatchGetProbingDistributionsResponse_FieldMask()
}

func (o *BatchGetProbingDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingDistributionsResponse_FieldMask()
}

func (o *BatchGetProbingDistributionsResponse) MakeDiffFieldMask(other *BatchGetProbingDistributionsResponse) *BatchGetProbingDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingDistributionsResponse_FieldMask()
	}

	res := &BatchGetProbingDistributionsResponse_FieldMask{}

	if len(o.GetProbingDistributions()) == len(other.GetProbingDistributions()) {
		for i, lValue := range o.GetProbingDistributions() {
			rValue := other.GetProbingDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbingDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingDistributionsResponse))
}

func (o *BatchGetProbingDistributionsResponse) Clone() *BatchGetProbingDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingDistributionsResponse{}
	result.ProbingDistributions = make([]*probing_distribution.ProbingDistribution, len(o.ProbingDistributions))
	for i, sourceValue := range o.ProbingDistributions {
		result.ProbingDistributions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probing_distribution.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probing_distribution.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbingDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingDistributionsResponse) Merge(source *BatchGetProbingDistributionsResponse) {
	for _, sourceValue := range source.GetProbingDistributions() {
		exists := false
		for _, currentValue := range o.ProbingDistributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.ProbingDistribution
			if sourceValue != nil {
				newDstElement = new(probing_distribution.ProbingDistribution)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingDistributions = append(o.ProbingDistributions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbingDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingDistributionsResponse))
}

func (o *ListProbingDistributionsRequest) GotenObjectExt() {}

func (o *ListProbingDistributionsRequest) MakeFullFieldMask() *ListProbingDistributionsRequest_FieldMask {
	return FullListProbingDistributionsRequest_FieldMask()
}

func (o *ListProbingDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingDistributionsRequest_FieldMask()
}

func (o *ListProbingDistributionsRequest) MakeDiffFieldMask(other *ListProbingDistributionsRequest) *ListProbingDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbingDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingDistributionsRequest_FieldMask()
	}

	res := &ListProbingDistributionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListProbingDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingDistributionsRequest))
}

func (o *ListProbingDistributionsRequest) Clone() *ListProbingDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbingDistributionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_distribution.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_distribution.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_distribution.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_distribution.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListProbingDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingDistributionsRequest) Merge(source *ListProbingDistributionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_distribution.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_distribution.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_distribution.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_distribution.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListProbingDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingDistributionsRequest))
}

func (o *ListProbingDistributionsResponse) GotenObjectExt() {}

func (o *ListProbingDistributionsResponse) MakeFullFieldMask() *ListProbingDistributionsResponse_FieldMask {
	return FullListProbingDistributionsResponse_FieldMask()
}

func (o *ListProbingDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingDistributionsResponse_FieldMask()
}

func (o *ListProbingDistributionsResponse) MakeDiffFieldMask(other *ListProbingDistributionsResponse) *ListProbingDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbingDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingDistributionsResponse_FieldMask()
	}

	res := &ListProbingDistributionsResponse_FieldMask{}

	if len(o.GetProbingDistributions()) == len(other.GetProbingDistributions()) {
		for i, lValue := range o.GetProbingDistributions() {
			rValue := other.GetProbingDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListProbingDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingDistributionsResponse))
}

func (o *ListProbingDistributionsResponse) Clone() *ListProbingDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbingDistributionsResponse{}
	result.ProbingDistributions = make([]*probing_distribution.ProbingDistribution, len(o.ProbingDistributions))
	for i, sourceValue := range o.ProbingDistributions {
		result.ProbingDistributions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_distribution.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_distribution.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListProbingDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingDistributionsResponse) Merge(source *ListProbingDistributionsResponse) {
	for _, sourceValue := range source.GetProbingDistributions() {
		exists := false
		for _, currentValue := range o.ProbingDistributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.ProbingDistribution
			if sourceValue != nil {
				newDstElement = new(probing_distribution.ProbingDistribution)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingDistributions = append(o.ProbingDistributions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_distribution.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_distribution.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListProbingDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingDistributionsResponse))
}

func (o *WatchProbingDistributionRequest) GotenObjectExt() {}

func (o *WatchProbingDistributionRequest) MakeFullFieldMask() *WatchProbingDistributionRequest_FieldMask {
	return FullWatchProbingDistributionRequest_FieldMask()
}

func (o *WatchProbingDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingDistributionRequest_FieldMask()
}

func (o *WatchProbingDistributionRequest) MakeDiffFieldMask(other *WatchProbingDistributionRequest) *WatchProbingDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingDistributionRequest_FieldMask()
	}

	res := &WatchProbingDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbingDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingDistributionRequest))
}

func (o *WatchProbingDistributionRequest) Clone() *WatchProbingDistributionRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbingDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingDistributionRequest) Merge(source *WatchProbingDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbingDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingDistributionRequest))
}

func (o *WatchProbingDistributionResponse) GotenObjectExt() {}

func (o *WatchProbingDistributionResponse) MakeFullFieldMask() *WatchProbingDistributionResponse_FieldMask {
	return FullWatchProbingDistributionResponse_FieldMask()
}

func (o *WatchProbingDistributionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingDistributionResponse_FieldMask()
}

func (o *WatchProbingDistributionResponse) MakeDiffFieldMask(other *WatchProbingDistributionResponse) *WatchProbingDistributionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingDistributionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingDistributionResponse_FieldMask()
	}

	res := &WatchProbingDistributionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbingDistributionResponse_FieldTerminalPath{selector: WatchProbingDistributionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbingDistributionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingDistributionResponse))
}

func (o *WatchProbingDistributionResponse) Clone() *WatchProbingDistributionResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingDistributionResponse{}
	result.Change = proto.Clone(o.Change).(*probing_distribution.ProbingDistributionChange)
	return result
}

func (o *WatchProbingDistributionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingDistributionResponse) Merge(source *WatchProbingDistributionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probing_distribution.ProbingDistributionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbingDistributionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingDistributionResponse))
}

func (o *WatchProbingDistributionsRequest) GotenObjectExt() {}

func (o *WatchProbingDistributionsRequest) MakeFullFieldMask() *WatchProbingDistributionsRequest_FieldMask {
	return FullWatchProbingDistributionsRequest_FieldMask()
}

func (o *WatchProbingDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingDistributionsRequest_FieldMask()
}

func (o *WatchProbingDistributionsRequest) MakeDiffFieldMask(other *WatchProbingDistributionsRequest) *WatchProbingDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingDistributionsRequest_FieldMask()
	}

	res := &WatchProbingDistributionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbingDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingDistributionsRequest))
}

func (o *WatchProbingDistributionsRequest) Clone() *WatchProbingDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingDistributionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_distribution.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_distribution.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_distribution.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_distribution.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbingDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingDistributionsRequest) Merge(source *WatchProbingDistributionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_distribution.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_distribution.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_distribution.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_distribution.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbingDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingDistributionsRequest))
}

func (o *WatchProbingDistributionsResponse) GotenObjectExt() {}

func (o *WatchProbingDistributionsResponse) MakeFullFieldMask() *WatchProbingDistributionsResponse_FieldMask {
	return FullWatchProbingDistributionsResponse_FieldMask()
}

func (o *WatchProbingDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingDistributionsResponse_FieldMask()
}

func (o *WatchProbingDistributionsResponse) MakeDiffFieldMask(other *WatchProbingDistributionsResponse) *WatchProbingDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingDistributionsResponse_FieldMask()
	}

	res := &WatchProbingDistributionsResponse_FieldMask{}

	if len(o.GetProbingDistributionChanges()) == len(other.GetProbingDistributionChanges()) {
		for i, lValue := range o.GetProbingDistributionChanges() {
			rValue := other.GetProbingDistributionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldSubPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbingDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingDistributionsResponse))
}

func (o *WatchProbingDistributionsResponse) Clone() *WatchProbingDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingDistributionsResponse{}
	result.ProbingDistributionChanges = make([]*probing_distribution.ProbingDistributionChange, len(o.ProbingDistributionChanges))
	for i, sourceValue := range o.ProbingDistributionChanges {
		result.ProbingDistributionChanges[i] = proto.Clone(sourceValue).(*probing_distribution.ProbingDistributionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbingDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingDistributionsResponse) Merge(source *WatchProbingDistributionsResponse) {
	for _, sourceValue := range source.GetProbingDistributionChanges() {
		exists := false
		for _, currentValue := range o.ProbingDistributionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.ProbingDistributionChange
			if sourceValue != nil {
				newDstElement = new(probing_distribution.ProbingDistributionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbingDistributionChanges = append(o.ProbingDistributionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbingDistributionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbingDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingDistributionsResponse))
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbingDistributionsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbingDistributionsResponse_PageTokenChange_FieldMask {
	return FullWatchProbingDistributionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingDistributionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbingDistributionsResponse_PageTokenChange) *WatchProbingDistributionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingDistributionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingDistributionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbingDistributionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingDistributionsResponse_PageTokenChange))
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) Clone() *WatchProbingDistributionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbingDistributionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_distribution.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_distribution.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) Merge(source *WatchProbingDistributionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_distribution.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_distribution.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbingDistributionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingDistributionsResponse_PageTokenChange))
}

func (o *CreateProbingDistributionRequest) GotenObjectExt() {}

func (o *CreateProbingDistributionRequest) MakeFullFieldMask() *CreateProbingDistributionRequest_FieldMask {
	return FullCreateProbingDistributionRequest_FieldMask()
}

func (o *CreateProbingDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbingDistributionRequest_FieldMask()
}

func (o *CreateProbingDistributionRequest) MakeDiffFieldMask(other *CreateProbingDistributionRequest) *CreateProbingDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbingDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbingDistributionRequest_FieldMask()
	}

	res := &CreateProbingDistributionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbingDistributionRequest_FieldTerminalPath{selector: CreateProbingDistributionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbingDistribution().MakeDiffFieldMask(other.GetProbingDistribution())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbingDistributionRequest_FieldTerminalPath{selector: CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbingDistributionRequest_FieldSubPath{selector: CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbingDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbingDistributionRequest))
}

func (o *CreateProbingDistributionRequest) Clone() *CreateProbingDistributionRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbingDistributionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_distribution.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingDistribution = o.ProbingDistribution.Clone()
	return result
}

func (o *CreateProbingDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbingDistributionRequest) Merge(source *CreateProbingDistributionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_distribution.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbingDistribution() != nil {
		if o.ProbingDistribution == nil {
			o.ProbingDistribution = new(probing_distribution.ProbingDistribution)
		}
		o.ProbingDistribution.Merge(source.GetProbingDistribution())
	}
}

func (o *CreateProbingDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbingDistributionRequest))
}

func (o *UpdateProbingDistributionRequest) GotenObjectExt() {}

func (o *UpdateProbingDistributionRequest) MakeFullFieldMask() *UpdateProbingDistributionRequest_FieldMask {
	return FullUpdateProbingDistributionRequest_FieldMask()
}

func (o *UpdateProbingDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingDistributionRequest_FieldMask()
}

func (o *UpdateProbingDistributionRequest) MakeDiffFieldMask(other *UpdateProbingDistributionRequest) *UpdateProbingDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingDistributionRequest_FieldMask()
	}

	res := &UpdateProbingDistributionRequest_FieldMask{}
	{
		subMask := o.GetProbingDistribution().MakeDiffFieldMask(other.GetProbingDistribution())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingDistributionRequest_FieldSubPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingDistributionRequest_FieldSubPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbingDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingDistributionRequest))
}

func (o *UpdateProbingDistributionRequest) Clone() *UpdateProbingDistributionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbingDistributionRequest{}
	result.ProbingDistribution = o.ProbingDistribution.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbingDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingDistributionRequest) Merge(source *UpdateProbingDistributionRequest) {
	if source.GetProbingDistribution() != nil {
		if o.ProbingDistribution == nil {
			o.ProbingDistribution = new(probing_distribution.ProbingDistribution)
		}
		o.ProbingDistribution.Merge(source.GetProbingDistribution())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbingDistributionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbingDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingDistributionRequest))
}

func (o *UpdateProbingDistributionRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbingDistributionRequest_CAS) MakeFullFieldMask() *UpdateProbingDistributionRequest_CAS_FieldMask {
	return FullUpdateProbingDistributionRequest_CAS_FieldMask()
}

func (o *UpdateProbingDistributionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingDistributionRequest_CAS_FieldMask()
}

func (o *UpdateProbingDistributionRequest_CAS) MakeDiffFieldMask(other *UpdateProbingDistributionRequest_CAS) *UpdateProbingDistributionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingDistributionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingDistributionRequest_CAS_FieldMask()
	}

	res := &UpdateProbingDistributionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingDistributionRequestCAS_FieldTerminalPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingDistributionRequestCAS_FieldSubPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbingDistributionRequestCAS_FieldTerminalPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbingDistributionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingDistributionRequest_CAS))
}

func (o *UpdateProbingDistributionRequest_CAS) Clone() *UpdateProbingDistributionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbingDistributionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	return result
}

func (o *UpdateProbingDistributionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingDistributionRequest_CAS) Merge(source *UpdateProbingDistributionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probing_distribution.ProbingDistribution)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbingDistributionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingDistributionRequest_CAS))
}

func (o *DeleteProbingDistributionRequest) GotenObjectExt() {}

func (o *DeleteProbingDistributionRequest) MakeFullFieldMask() *DeleteProbingDistributionRequest_FieldMask {
	return FullDeleteProbingDistributionRequest_FieldMask()
}

func (o *DeleteProbingDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbingDistributionRequest_FieldMask()
}

func (o *DeleteProbingDistributionRequest) MakeDiffFieldMask(other *DeleteProbingDistributionRequest) *DeleteProbingDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbingDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbingDistributionRequest_FieldMask()
	}

	res := &DeleteProbingDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbingDistributionRequest_FieldTerminalPath{selector: DeleteProbingDistributionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbingDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbingDistributionRequest))
}

func (o *DeleteProbingDistributionRequest) Clone() *DeleteProbingDistributionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbingDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbingDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbingDistributionRequest) Merge(source *DeleteProbingDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbingDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbingDistributionRequest))
}

func (o *SearchProbingDistributionsRequest) GotenObjectExt() {}

func (o *SearchProbingDistributionsRequest) MakeFullFieldMask() *SearchProbingDistributionsRequest_FieldMask {
	return FullSearchProbingDistributionsRequest_FieldMask()
}

func (o *SearchProbingDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingDistributionsRequest_FieldMask()
}

func (o *SearchProbingDistributionsRequest) MakeDiffFieldMask(other *SearchProbingDistributionsRequest) *SearchProbingDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingDistributionsRequest_FieldMask()
	}

	res := &SearchProbingDistributionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsRequest_FieldTerminalPath{selector: SearchProbingDistributionsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbingDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingDistributionsRequest))
}

func (o *SearchProbingDistributionsRequest) Clone() *SearchProbingDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbingDistributionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_distribution.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_distribution.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_distribution.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_distribution.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_distribution.ProbingDistribution_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbingDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingDistributionsRequest) Merge(source *SearchProbingDistributionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_distribution.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_distribution.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_distribution.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_distribution.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_distribution.ProbingDistribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbingDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingDistributionsRequest))
}

func (o *SearchProbingDistributionsResponse) GotenObjectExt() {}

func (o *SearchProbingDistributionsResponse) MakeFullFieldMask() *SearchProbingDistributionsResponse_FieldMask {
	return FullSearchProbingDistributionsResponse_FieldMask()
}

func (o *SearchProbingDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingDistributionsResponse_FieldMask()
}

func (o *SearchProbingDistributionsResponse) MakeDiffFieldMask(other *SearchProbingDistributionsResponse) *SearchProbingDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingDistributionsResponse_FieldMask()
	}

	res := &SearchProbingDistributionsResponse_FieldMask{}

	if len(o.GetProbingDistributions()) == len(other.GetProbingDistributions()) {
		for i, lValue := range o.GetProbingDistributions() {
			rValue := other.GetProbingDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorProbingDistributions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbingDistributionsResponse_FieldTerminalPath{selector: SearchProbingDistributionsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbingDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingDistributionsResponse))
}

func (o *SearchProbingDistributionsResponse) Clone() *SearchProbingDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbingDistributionsResponse{}
	result.ProbingDistributions = make([]*probing_distribution.ProbingDistribution, len(o.ProbingDistributions))
	for i, sourceValue := range o.ProbingDistributions {
		result.ProbingDistributions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_distribution.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_distribution.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbingDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingDistributionsResponse) Merge(source *SearchProbingDistributionsResponse) {
	for _, sourceValue := range source.GetProbingDistributions() {
		exists := false
		for _, currentValue := range o.ProbingDistributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.ProbingDistribution
			if sourceValue != nil {
				newDstElement = new(probing_distribution.ProbingDistribution)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingDistributions = append(o.ProbingDistributions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_distribution.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_distribution.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbingDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingDistributionsResponse))
}
