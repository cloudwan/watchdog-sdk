// Code generated by protoc-gen-goten-client
// API: ProbingDistributionService
// DO NOT EDIT!!!

package probing_distribution_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_distribution.ProbingDistribution{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbingDistributionServiceClient is the client API for ProbingDistributionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbingDistributionServiceClient interface {
	GetProbingDistribution(ctx context.Context, in *GetProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error)
	BatchGetProbingDistributions(ctx context.Context, in *BatchGetProbingDistributionsRequest, opts ...grpc.CallOption) (*BatchGetProbingDistributionsResponse, error)
	ListProbingDistributions(ctx context.Context, in *ListProbingDistributionsRequest, opts ...grpc.CallOption) (*ListProbingDistributionsResponse, error)
	WatchProbingDistribution(ctx context.Context, in *WatchProbingDistributionRequest, opts ...grpc.CallOption) (WatchProbingDistributionClientStream, error)
	WatchProbingDistributions(ctx context.Context, in *WatchProbingDistributionsRequest, opts ...grpc.CallOption) (WatchProbingDistributionsClientStream, error)
	CreateProbingDistribution(ctx context.Context, in *CreateProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error)
	UpdateProbingDistribution(ctx context.Context, in *UpdateProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error)
	DeleteProbingDistribution(ctx context.Context, in *DeleteProbingDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchProbingDistributions(ctx context.Context, in *SearchProbingDistributionsRequest, opts ...grpc.CallOption) (*SearchProbingDistributionsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbingDistributionServiceClient(cc grpc.ClientConnInterface) ProbingDistributionServiceClient {
	return &client{cc}
}

func (c *client) GetProbingDistribution(ctx context.Context, in *GetProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error) {
	out := new(probing_distribution.ProbingDistribution)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/GetProbingDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbingDistributions(ctx context.Context, in *BatchGetProbingDistributionsRequest, opts ...grpc.CallOption) (*BatchGetProbingDistributionsResponse, error) {
	out := new(BatchGetProbingDistributionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/BatchGetProbingDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbingDistributions(ctx context.Context, in *ListProbingDistributionsRequest, opts ...grpc.CallOption) (*ListProbingDistributionsResponse, error) {
	out := new(ListProbingDistributionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/ListProbingDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbingDistribution(ctx context.Context, in *WatchProbingDistributionRequest, opts ...grpc.CallOption) (WatchProbingDistributionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingDistribution",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingDistributionService/WatchProbingDistribution", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingDistributionWatchProbingDistributionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingDistributionClientStream interface {
	Recv() (*WatchProbingDistributionResponse, error)
	grpc.ClientStream
}

type watchProbingDistributionWatchProbingDistributionClient struct {
	grpc.ClientStream
}

func (x *watchProbingDistributionWatchProbingDistributionClient) Recv() (*WatchProbingDistributionResponse, error) {
	m := new(WatchProbingDistributionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbingDistributions(ctx context.Context, in *WatchProbingDistributionsRequest, opts ...grpc.CallOption) (WatchProbingDistributionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingDistributions",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbingDistributionService/WatchProbingDistributions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingDistributionsWatchProbingDistributionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingDistributionsClientStream interface {
	Recv() (*WatchProbingDistributionsResponse, error)
	grpc.ClientStream
}

type watchProbingDistributionsWatchProbingDistributionsClient struct {
	grpc.ClientStream
}

func (x *watchProbingDistributionsWatchProbingDistributionsClient) Recv() (*WatchProbingDistributionsResponse, error) {
	m := new(WatchProbingDistributionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbingDistribution(ctx context.Context, in *CreateProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error) {
	out := new(probing_distribution.ProbingDistribution)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/CreateProbingDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbingDistribution(ctx context.Context, in *UpdateProbingDistributionRequest, opts ...grpc.CallOption) (*probing_distribution.ProbingDistribution, error) {
	out := new(probing_distribution.ProbingDistribution)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/UpdateProbingDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbingDistribution(ctx context.Context, in *DeleteProbingDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/DeleteProbingDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchProbingDistributions(ctx context.Context, in *SearchProbingDistributionsRequest, opts ...grpc.CallOption) (*SearchProbingDistributionsResponse, error) {
	out := new(SearchProbingDistributionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbingDistributionService/SearchProbingDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
