// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/admin_area_service.proto
// DO NOT EDIT!!!

package admin_area_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &admin_area.BBox{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetAdminArea][ntt.watchdog.v1alpha2.GetAdminArea]
type GetAdminAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.AdminArea
	Name *admin_area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,3,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetAdminAreaRequest) Reset() {
	*m = GetAdminAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetAdminAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetAdminAreaRequest) ProtoMessage() {}

func (m *GetAdminAreaRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetAdminAreaRequest) GotenMessage() {}

// Deprecated, Use GetAdminAreaRequest.ProtoReflect.Descriptor instead.
func (*GetAdminAreaRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetAdminAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetAdminAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetAdminAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetAdminAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetAdminAreaRequest) GetName() *admin_area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetAdminAreaRequest) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetAdminAreaRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetAdminAreaRequest) SetName(fv *admin_area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetAdminAreaRequest"))
	}
	m.Name = fv
}

func (m *GetAdminAreaRequest) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetAdminAreaRequest"))
	}
	m.FieldMask = fv
}

func (m *GetAdminAreaRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetAdminAreaRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetAdminAreas][ntt.watchdog.v1alpha2.BatchGetAdminAreas]
type BatchGetAdminAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of AdminAreas
	Names []*admin_area.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,3,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetAdminAreasRequest) Reset() {
	*m = BatchGetAdminAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAdminAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAdminAreasRequest) ProtoMessage() {}

func (m *BatchGetAdminAreasRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAdminAreasRequest) GotenMessage() {}

// Deprecated, Use BatchGetAdminAreasRequest.ProtoReflect.Descriptor instead.
func (*BatchGetAdminAreasRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetAdminAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAdminAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAdminAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAdminAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAdminAreasRequest) GetNames() []*admin_area.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetAdminAreasRequest) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetAdminAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetAdminAreasRequest) SetNames(fv []*admin_area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetAdminAreasRequest"))
	}
	m.Names = fv
}

func (m *BatchGetAdminAreasRequest) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetAdminAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetAdminAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetAdminAreasRequest"))
	}
	m.View = fv
}

// BatchGetAdminAreasResponse
type BatchGetAdminAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found AdminAreas
	AdminAreas []*admin_area.AdminArea `protobuf:"bytes,1,rep,name=admin_areas,json=adminAreas,proto3" json:"admin_areas,omitempty" firestore:"adminAreas"`
	// list of not found AdminAreas
	Missing []*admin_area.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetAdminAreasResponse) Reset() {
	*m = BatchGetAdminAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAdminAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAdminAreasResponse) ProtoMessage() {}

func (m *BatchGetAdminAreasResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAdminAreasResponse) GotenMessage() {}

// Deprecated, Use BatchGetAdminAreasResponse.ProtoReflect.Descriptor instead.
func (*BatchGetAdminAreasResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetAdminAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAdminAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAdminAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAdminAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAdminAreasResponse) GetAdminAreas() []*admin_area.AdminArea {
	if m != nil {
		return m.AdminAreas
	}
	return nil
}

func (m *BatchGetAdminAreasResponse) GetMissing() []*admin_area.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetAdminAreasResponse) SetAdminAreas(fv []*admin_area.AdminArea) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAreas", "BatchGetAdminAreasResponse"))
	}
	m.AdminAreas = fv
}

func (m *BatchGetAdminAreasResponse) SetMissing(fv []*admin_area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetAdminAreasResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListAdminAreas][ntt.watchdog.v1alpha2.ListAdminAreas]
type ListAdminAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer AdminAreas than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListAdminAreasResponse.next_page_token][ntt.watchdog.v1alpha2.ListAdminAreasResponse.next_page_token]
	PageToken *admin_area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *admin_area.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *admin_area.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,6,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListAdminAreasRequest) Reset() {
	*m = ListAdminAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAdminAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAdminAreasRequest) ProtoMessage() {}

func (m *ListAdminAreasRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAdminAreasRequest) GotenMessage() {}

// Deprecated, Use ListAdminAreasRequest.ProtoReflect.Descriptor instead.
func (*ListAdminAreasRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListAdminAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAdminAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAdminAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAdminAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAdminAreasRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListAdminAreasRequest) GetPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListAdminAreasRequest) GetOrderBy() *admin_area.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAdminAreasRequest) GetFilter() *admin_area.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAdminAreasRequest) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListAdminAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListAdminAreasRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListAdminAreasRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListAdminAreasRequest"))
	}
	m.PageSize = fv
}

func (m *ListAdminAreasRequest) SetPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListAdminAreasRequest"))
	}
	m.PageToken = fv
}

func (m *ListAdminAreasRequest) SetOrderBy(fv *admin_area.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListAdminAreasRequest"))
	}
	m.OrderBy = fv
}

func (m *ListAdminAreasRequest) SetFilter(fv *admin_area.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListAdminAreasRequest"))
	}
	m.Filter = fv
}

func (m *ListAdminAreasRequest) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListAdminAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *ListAdminAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListAdminAreasRequest"))
	}
	m.View = fv
}

func (m *ListAdminAreasRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListAdminAreasRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListAdminAreas][ntt.watchdog.v1alpha2.ListAdminAreas]
type ListAdminAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of AdminAreas
	AdminAreas []*admin_area.AdminArea `protobuf:"bytes,1,rep,name=admin_areas,json=adminAreas,proto3" json:"admin_areas,omitempty" firestore:"adminAreas"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListAdminAreasRequest.page_token][ntt.watchdog.v1alpha2.ListAdminAreasRequest.page_token]
	PrevPageToken *admin_area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListAdminAreasRequest.page_token][ntt.watchdog.v1alpha2.ListAdminAreasRequest.page_token]
	NextPageToken *admin_area.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total AdminAreas across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListAdminAreasResponse) Reset() {
	*m = ListAdminAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAdminAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAdminAreasResponse) ProtoMessage() {}

func (m *ListAdminAreasResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAdminAreasResponse) GotenMessage() {}

// Deprecated, Use ListAdminAreasResponse.ProtoReflect.Descriptor instead.
func (*ListAdminAreasResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListAdminAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAdminAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAdminAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAdminAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAdminAreasResponse) GetAdminAreas() []*admin_area.AdminArea {
	if m != nil {
		return m.AdminAreas
	}
	return nil
}

func (m *ListAdminAreasResponse) GetPrevPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListAdminAreasResponse) GetNextPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListAdminAreasResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListAdminAreasResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListAdminAreasResponse) SetAdminAreas(fv []*admin_area.AdminArea) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAreas", "ListAdminAreasResponse"))
	}
	m.AdminAreas = fv
}

func (m *ListAdminAreasResponse) SetPrevPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListAdminAreasResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListAdminAreasResponse) SetNextPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListAdminAreasResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListAdminAreasResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListAdminAreasResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListAdminAreasResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListAdminAreasResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchAdminArea][ntt.watchdog.v1alpha2.WatchAdminArea]
type WatchAdminAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.watchdog.v1alpha2.AdminArea
	Name *admin_area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,2,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchAdminAreaRequest) Reset() {
	*m = WatchAdminAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAdminAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAdminAreaRequest) ProtoMessage() {}

func (m *WatchAdminAreaRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAdminAreaRequest) GotenMessage() {}

// Deprecated, Use WatchAdminAreaRequest.ProtoReflect.Descriptor instead.
func (*WatchAdminAreaRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchAdminAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAdminAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAdminAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAdminAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAdminAreaRequest) GetName() *admin_area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchAdminAreaRequest) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAdminAreaRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAdminAreaRequest) SetName(fv *admin_area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchAdminAreaRequest"))
	}
	m.Name = fv
}

func (m *WatchAdminAreaRequest) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAdminAreaRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAdminAreaRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAdminAreaRequest"))
	}
	m.View = fv
}

// WatchAdminAreaResponse
type WatchAdminAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *admin_area.AdminAreaChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchAdminAreaResponse) Reset() {
	*m = WatchAdminAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAdminAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAdminAreaResponse) ProtoMessage() {}

func (m *WatchAdminAreaResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAdminAreaResponse) GotenMessage() {}

// Deprecated, Use WatchAdminAreaResponse.ProtoReflect.Descriptor instead.
func (*WatchAdminAreaResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchAdminAreaResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAdminAreaResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAdminAreaResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAdminAreaResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAdminAreaResponse) GetChange() *admin_area.AdminAreaChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchAdminAreaResponse) SetChange(fv *admin_area.AdminAreaChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchAdminAreaResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchAdminAreas][ntt.watchdog.v1alpha2.WatchAdminAreas]
type WatchAdminAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Requested page size. Server may return fewer AdminAreas than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *admin_area.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *admin_area.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *admin_area.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to AdminArea that don't affect
	// any of masked fields won't be sent back.
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,6,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// AdminArea that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchAdminAreasRequest) Reset() {
	*m = WatchAdminAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAdminAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAdminAreasRequest) ProtoMessage() {}

func (m *WatchAdminAreasRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAdminAreasRequest) GotenMessage() {}

// Deprecated, Use WatchAdminAreasRequest.ProtoReflect.Descriptor instead.
func (*WatchAdminAreasRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchAdminAreasRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAdminAreasRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAdminAreasRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAdminAreasRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAdminAreasRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchAdminAreasRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchAdminAreasRequest) GetPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchAdminAreasRequest) GetOrderBy() *admin_area.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchAdminAreasRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAdminAreasRequest) GetStartingTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchAdminAreasRequest) GetFilter() *admin_area.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchAdminAreasRequest) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAdminAreasRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAdminAreasRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchAdminAreasRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchAdminAreasRequest"))
	}
	m.Type = fv
}

func (m *WatchAdminAreasRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchAdminAreasRequest"))
	}
	m.PageSize = fv
}

func (m *WatchAdminAreasRequest) SetPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchAdminAreasRequest"))
	}
	m.PageToken = fv
}

func (m *WatchAdminAreasRequest) SetOrderBy(fv *admin_area.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchAdminAreasRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchAdminAreasRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAdminAreasRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchAdminAreasRequest) SetStartingTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchAdminAreasRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchAdminAreasRequest) SetFilter(fv *admin_area.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchAdminAreasRequest"))
	}
	m.Filter = fv
}

func (m *WatchAdminAreasRequest) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAdminAreasRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAdminAreasRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAdminAreasRequest"))
	}
	m.View = fv
}

func (m *WatchAdminAreasRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchAdminAreasRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchAdminAreasResponse
type WatchAdminAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of AdminAreas
	AdminAreaChanges []*admin_area.AdminAreaChange `protobuf:"bytes,2,rep,name=admin_area_changes,json=adminAreaChanges,proto3" json:"admin_area_changes,omitempty" firestore:"adminAreaChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All AdminAreas will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchAdminAreasResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (AdminAreas will contains changes
	// of type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchAdminAreasResponse) Reset() {
	*m = WatchAdminAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAdminAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAdminAreasResponse) ProtoMessage() {}

func (m *WatchAdminAreasResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAdminAreasResponse) GotenMessage() {}

// Deprecated, Use WatchAdminAreasResponse.ProtoReflect.Descriptor instead.
func (*WatchAdminAreasResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchAdminAreasResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAdminAreasResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAdminAreasResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAdminAreasResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAdminAreasResponse) GetAdminAreaChanges() []*admin_area.AdminAreaChange {
	if m != nil {
		return m.AdminAreaChanges
	}
	return nil
}

func (m *WatchAdminAreasResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchAdminAreasResponse) GetPageTokenChange() *WatchAdminAreasResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchAdminAreasResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAdminAreasResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchAdminAreasResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchAdminAreasResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchAdminAreasResponse) SetAdminAreaChanges(fv []*admin_area.AdminAreaChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminAreaChanges", "WatchAdminAreasResponse"))
	}
	m.AdminAreaChanges = fv
}

func (m *WatchAdminAreasResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchAdminAreasResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchAdminAreasResponse) SetPageTokenChange(fv *WatchAdminAreasResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchAdminAreasResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchAdminAreasResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAdminAreasResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchAdminAreasResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchAdminAreasResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchAdminAreasResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchAdminAreasResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchAdminAreasResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchAdminAreasResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateAdminArea][ntt.watchdog.v1alpha2.CreateAdminArea]
type CreateAdminAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AdminArea resource body
	AdminArea *admin_area.AdminArea `protobuf:"bytes,2,opt,name=admin_area,json=adminArea,proto3" json:"admin_area,omitempty" firestore:"adminArea"`
}

func (m *CreateAdminAreaRequest) Reset() {
	*m = CreateAdminAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAdminAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAdminAreaRequest) ProtoMessage() {}

func (m *CreateAdminAreaRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAdminAreaRequest) GotenMessage() {}

// Deprecated, Use CreateAdminAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateAdminAreaRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateAdminAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAdminAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAdminAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAdminAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateAdminAreaRequest) GetAdminArea() *admin_area.AdminArea {
	if m != nil {
		return m.AdminArea
	}
	return nil
}

func (m *CreateAdminAreaRequest) SetAdminArea(fv *admin_area.AdminArea) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea", "CreateAdminAreaRequest"))
	}
	m.AdminArea = fv
}

// Request message for method
// [UpdateAdminArea][ntt.watchdog.v1alpha2.UpdateAdminArea]
type UpdateAdminAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AdminArea resource body
	AdminArea *admin_area.AdminArea `protobuf:"bytes,2,opt,name=admin_area,json=adminArea,proto3" json:"admin_area,omitempty" firestore:"adminArea"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,3,opt,customtype=AdminArea_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateAdminAreaRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
}

func (m *UpdateAdminAreaRequest) Reset() {
	*m = UpdateAdminAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAdminAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAdminAreaRequest) ProtoMessage() {}

func (m *UpdateAdminAreaRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAdminAreaRequest) GotenMessage() {}

// Deprecated, Use UpdateAdminAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdminAreaRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateAdminAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAdminAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAdminAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAdminAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAdminAreaRequest) GetAdminArea() *admin_area.AdminArea {
	if m != nil {
		return m.AdminArea
	}
	return nil
}

func (m *UpdateAdminAreaRequest) GetUpdateMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateAdminAreaRequest) GetCas() *UpdateAdminAreaRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateAdminAreaRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateAdminAreaRequest) SetAdminArea(fv *admin_area.AdminArea) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea", "UpdateAdminAreaRequest"))
	}
	m.AdminArea = fv
}

func (m *UpdateAdminAreaRequest) SetUpdateMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateAdminAreaRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateAdminAreaRequest) SetCas(fv *UpdateAdminAreaRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateAdminAreaRequest"))
	}
	m.Cas = fv
}

func (m *UpdateAdminAreaRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateAdminAreaRequest"))
	}
	m.AllowMissing = fv
}

// Request message for method
// [DeleteAdminArea][ntt.watchdog.v1alpha2.DeleteAdminArea]
type DeleteAdminAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.AdminArea
	Name *admin_area.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteAdminAreaRequest) Reset() {
	*m = DeleteAdminAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteAdminAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteAdminAreaRequest) ProtoMessage() {}

func (m *DeleteAdminAreaRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteAdminAreaRequest) GotenMessage() {}

// Deprecated, Use DeleteAdminAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdminAreaRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteAdminAreaRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteAdminAreaRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteAdminAreaRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteAdminAreaRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteAdminAreaRequest) GetName() *admin_area.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteAdminAreaRequest) SetName(fv *admin_area.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteAdminAreaRequest"))
	}
	m.Name = fv
}

type WatchAdminAreasResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *admin_area.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *admin_area.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchAdminAreasResponse_PageTokenChange) Reset() {
	*m = WatchAdminAreasResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAdminAreasResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAdminAreasResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchAdminAreasResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAdminAreasResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchAdminAreasResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchAdminAreasResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchAdminAreasResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAdminAreasResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAdminAreasResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAdminAreasResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAdminAreasResponse_PageTokenChange) GetPrevPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchAdminAreasResponse_PageTokenChange) GetNextPageToken() *admin_area.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchAdminAreasResponse_PageTokenChange) SetPrevPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchAdminAreasResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchAdminAreasResponse_PageTokenChange) SetNextPageToken(fv *admin_area.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchAdminAreasResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateAdminAreaRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *admin_area.AdminArea `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *admin_area.AdminArea_FieldMask `protobuf:"bytes,2,opt,customtype=AdminArea_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateAdminAreaRequest_CAS) Reset() {
	*m = UpdateAdminAreaRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAdminAreaRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAdminAreaRequest_CAS) ProtoMessage() {}

func (m *UpdateAdminAreaRequest_CAS) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAdminAreaRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateAdminAreaRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateAdminAreaRequest_CAS) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateAdminAreaRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAdminAreaRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAdminAreaRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAdminAreaRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAdminAreaRequest_CAS) GetConditionalState() *admin_area.AdminArea {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateAdminAreaRequest_CAS) GetFieldMask() *admin_area.AdminArea_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateAdminAreaRequest_CAS) SetConditionalState(fv *admin_area.AdminArea) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateAdminAreaRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateAdminAreaRequest_CAS) SetFieldMask(fv *admin_area.AdminArea_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateAdminAreaRequest_CAS"))
	}
	m.FieldMask = fv
}

var watchdog_proto_v1alpha2_admin_area_service_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_admin_area_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11,
	0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32,
	0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xef, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22,
	0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x2a,
	0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a,
	0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x58, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x2a, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6,
	0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x94, 0x04, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x1a, 0x87, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x3a, 0x26, 0xc2, 0x85, 0x2c, 0x22, 0x32, 0x0f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x0f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xee, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d,
	0x32, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x03, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x1a, 0xa2, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4d, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d,
	0x32, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x26, 0xc2, 0x85, 0x2c, 0x22, 0x32, 0x0f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b,
	0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0xba, 0x9d, 0x22, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe2, 0x0f, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd8, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x22, 0x7a, 0x82, 0xdb, 0x21,
	0x20, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x03, 0x67, 0x65,
	0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8,
	0xd5, 0x22, 0x00, 0x80, 0xcc, 0x26, 0x01, 0x12, 0x8b, 0x02, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x30,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20,
	0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0d, 0x12, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x25, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22,
	0x00, 0x80, 0xcc, 0x26, 0x01, 0x12, 0xe1, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xdb, 0x21, 0x26, 0x0a, 0x09, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x2a, 0x00, 0x32, 0x0d, 0x12, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x73, 0x92, 0x97, 0x22, 0x1a, 0x12, 0x18, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0xc8, 0xd5, 0x22, 0x00, 0x80, 0xcc, 0x26, 0x01, 0x12, 0xf8, 0x01, 0x0a, 0x0e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xdb, 0x21, 0x24,
	0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x05, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x80, 0xcc,
	0x26, 0x01, 0x30, 0x01, 0x12, 0xf6, 0x01, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xdb, 0x21, 0x2e, 0x0a, 0x09,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x14, 0x12, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x3a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1b, 0x12, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x80, 0xcc, 0x26, 0x01, 0x30, 0x01, 0x12, 0xee, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x22, 0x89, 0x01, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x0c,
	0x12, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x3a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x92, 0x97, 0x22, 0x1c, 0x12, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x80, 0xcc, 0x26, 0x01, 0x12, 0x90,
	0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x22, 0xab, 0x01, 0x82, 0xdb, 0x21, 0x29, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0c, 0x12,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x1a, 0x28, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x2c, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x80, 0xcc, 0x26,
	0x01, 0x12, 0xd6, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7c, 0x82, 0xdb,
	0x21, 0x1b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5,
	0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x80, 0xcc, 0x26, 0x01, 0x1a, 0x30, 0xca, 0x41, 0x13, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xf1, 0x02, 0xe8,
	0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x4c, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x8a, 0xff, 0xd0, 0x02, 0x4c, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x42, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x49, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_admin_area_service_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_admin_area_service_proto_rawDescData = watchdog_proto_v1alpha2_admin_area_service_proto_rawDesc
)

func watchdog_proto_v1alpha2_admin_area_service_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_admin_area_service_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_admin_area_service_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_admin_area_service_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_admin_area_service_proto_rawDescData
}

var watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var watchdog_proto_v1alpha2_admin_area_service_proto_goTypes = []interface{}{
	(*GetAdminAreaRequest)(nil),                     // 0: ntt.watchdog.v1alpha2.GetAdminAreaRequest
	(*BatchGetAdminAreasRequest)(nil),               // 1: ntt.watchdog.v1alpha2.BatchGetAdminAreasRequest
	(*BatchGetAdminAreasResponse)(nil),              // 2: ntt.watchdog.v1alpha2.BatchGetAdminAreasResponse
	(*ListAdminAreasRequest)(nil),                   // 3: ntt.watchdog.v1alpha2.ListAdminAreasRequest
	(*ListAdminAreasResponse)(nil),                  // 4: ntt.watchdog.v1alpha2.ListAdminAreasResponse
	(*WatchAdminAreaRequest)(nil),                   // 5: ntt.watchdog.v1alpha2.WatchAdminAreaRequest
	(*WatchAdminAreaResponse)(nil),                  // 6: ntt.watchdog.v1alpha2.WatchAdminAreaResponse
	(*WatchAdminAreasRequest)(nil),                  // 7: ntt.watchdog.v1alpha2.WatchAdminAreasRequest
	(*WatchAdminAreasResponse)(nil),                 // 8: ntt.watchdog.v1alpha2.WatchAdminAreasResponse
	(*CreateAdminAreaRequest)(nil),                  // 9: ntt.watchdog.v1alpha2.CreateAdminAreaRequest
	(*UpdateAdminAreaRequest)(nil),                  // 10: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest
	(*DeleteAdminAreaRequest)(nil),                  // 11: ntt.watchdog.v1alpha2.DeleteAdminAreaRequest
	(*WatchAdminAreasResponse_PageTokenChange)(nil), // 12: ntt.watchdog.v1alpha2.WatchAdminAreasResponse.PageTokenChange
	(*UpdateAdminAreaRequest_CAS)(nil),              // 13: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.CAS
	(*admin_area.AdminArea_FieldMask)(nil),          // 14: ntt.watchdog.v1alpha2.AdminArea_FieldMask
	(view.View)(0),                                  // 15: goten.view.View
	(*admin_area.AdminArea)(nil),                    // 16: ntt.watchdog.v1alpha2.AdminArea
	(*admin_area.AdminAreaChange)(nil),              // 17: ntt.watchdog.v1alpha2.AdminAreaChange
	(watch_type.WatchType)(0),                       // 18: goten.watch_type.WatchType
	(*timestamp.Timestamp)(nil),                     // 19: google.protobuf.Timestamp
	(*empty.Empty)(nil),                             // 20: google.protobuf.Empty
}
var watchdog_proto_v1alpha2_admin_area_service_proto_depIdxs = []int32{
	14, // 0: ntt.watchdog.v1alpha2.GetAdminAreaRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	15, // 1: ntt.watchdog.v1alpha2.GetAdminAreaRequest.view:type_name -> goten.view.View
	14, // 2: ntt.watchdog.v1alpha2.BatchGetAdminAreasRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	15, // 3: ntt.watchdog.v1alpha2.BatchGetAdminAreasRequest.view:type_name -> goten.view.View
	16, // 4: ntt.watchdog.v1alpha2.BatchGetAdminAreasResponse.admin_areas:type_name -> ntt.watchdog.v1alpha2.AdminArea
	14, // 5: ntt.watchdog.v1alpha2.ListAdminAreasRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	15, // 6: ntt.watchdog.v1alpha2.ListAdminAreasRequest.view:type_name -> goten.view.View
	16, // 7: ntt.watchdog.v1alpha2.ListAdminAreasResponse.admin_areas:type_name -> ntt.watchdog.v1alpha2.AdminArea
	14, // 8: ntt.watchdog.v1alpha2.WatchAdminAreaRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	15, // 9: ntt.watchdog.v1alpha2.WatchAdminAreaRequest.view:type_name -> goten.view.View
	17, // 10: ntt.watchdog.v1alpha2.WatchAdminAreaResponse.change:type_name -> ntt.watchdog.v1alpha2.AdminAreaChange
	18, // 11: ntt.watchdog.v1alpha2.WatchAdminAreasRequest.type:type_name -> goten.watch_type.WatchType
	19, // 12: ntt.watchdog.v1alpha2.WatchAdminAreasRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.watchdog.v1alpha2.WatchAdminAreasRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	15, // 14: ntt.watchdog.v1alpha2.WatchAdminAreasRequest.view:type_name -> goten.view.View
	17, // 15: ntt.watchdog.v1alpha2.WatchAdminAreasResponse.admin_area_changes:type_name -> ntt.watchdog.v1alpha2.AdminAreaChange
	12, // 16: ntt.watchdog.v1alpha2.WatchAdminAreasResponse.page_token_change:type_name -> ntt.watchdog.v1alpha2.WatchAdminAreasResponse.PageTokenChange
	16, // 17: ntt.watchdog.v1alpha2.CreateAdminAreaRequest.admin_area:type_name -> ntt.watchdog.v1alpha2.AdminArea
	16, // 18: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.admin_area:type_name -> ntt.watchdog.v1alpha2.AdminArea
	14, // 19: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.update_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	13, // 20: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.cas:type_name -> ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.CAS
	16, // 21: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.CAS.conditional_state:type_name -> ntt.watchdog.v1alpha2.AdminArea
	14, // 22: ntt.watchdog.v1alpha2.UpdateAdminAreaRequest.CAS.field_mask:type_name -> ntt.watchdog.v1alpha2.AdminArea_FieldMask
	0,  // 23: ntt.watchdog.v1alpha2.AdminAreaService.GetAdminArea:input_type -> ntt.watchdog.v1alpha2.GetAdminAreaRequest
	1,  // 24: ntt.watchdog.v1alpha2.AdminAreaService.BatchGetAdminAreas:input_type -> ntt.watchdog.v1alpha2.BatchGetAdminAreasRequest
	3,  // 25: ntt.watchdog.v1alpha2.AdminAreaService.ListAdminAreas:input_type -> ntt.watchdog.v1alpha2.ListAdminAreasRequest
	5,  // 26: ntt.watchdog.v1alpha2.AdminAreaService.WatchAdminArea:input_type -> ntt.watchdog.v1alpha2.WatchAdminAreaRequest
	7,  // 27: ntt.watchdog.v1alpha2.AdminAreaService.WatchAdminAreas:input_type -> ntt.watchdog.v1alpha2.WatchAdminAreasRequest
	9,  // 28: ntt.watchdog.v1alpha2.AdminAreaService.CreateAdminArea:input_type -> ntt.watchdog.v1alpha2.CreateAdminAreaRequest
	10, // 29: ntt.watchdog.v1alpha2.AdminAreaService.UpdateAdminArea:input_type -> ntt.watchdog.v1alpha2.UpdateAdminAreaRequest
	11, // 30: ntt.watchdog.v1alpha2.AdminAreaService.DeleteAdminArea:input_type -> ntt.watchdog.v1alpha2.DeleteAdminAreaRequest
	16, // 31: ntt.watchdog.v1alpha2.AdminAreaService.GetAdminArea:output_type -> ntt.watchdog.v1alpha2.AdminArea
	2,  // 32: ntt.watchdog.v1alpha2.AdminAreaService.BatchGetAdminAreas:output_type -> ntt.watchdog.v1alpha2.BatchGetAdminAreasResponse
	4,  // 33: ntt.watchdog.v1alpha2.AdminAreaService.ListAdminAreas:output_type -> ntt.watchdog.v1alpha2.ListAdminAreasResponse
	6,  // 34: ntt.watchdog.v1alpha2.AdminAreaService.WatchAdminArea:output_type -> ntt.watchdog.v1alpha2.WatchAdminAreaResponse
	8,  // 35: ntt.watchdog.v1alpha2.AdminAreaService.WatchAdminAreas:output_type -> ntt.watchdog.v1alpha2.WatchAdminAreasResponse
	16, // 36: ntt.watchdog.v1alpha2.AdminAreaService.CreateAdminArea:output_type -> ntt.watchdog.v1alpha2.AdminArea
	16, // 37: ntt.watchdog.v1alpha2.AdminAreaService.UpdateAdminArea:output_type -> ntt.watchdog.v1alpha2.AdminArea
	20, // 38: ntt.watchdog.v1alpha2.AdminAreaService.DeleteAdminArea:output_type -> google.protobuf.Empty
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_admin_area_service_proto_init() }
func watchdog_proto_v1alpha2_admin_area_service_proto_init() {
	if watchdog_proto_v1alpha2_admin_area_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAdminAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAdminAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdminAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdminAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminAreasResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdminAreaRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_admin_area_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           watchdog_proto_v1alpha2_admin_area_service_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_admin_area_service_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_admin_area_service_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_admin_area_service_proto = out.File
	watchdog_proto_v1alpha2_admin_area_service_proto_rawDesc = nil
	watchdog_proto_v1alpha2_admin_area_service_proto_goTypes = nil
	watchdog_proto_v1alpha2_admin_area_service_proto_depIdxs = nil
}
