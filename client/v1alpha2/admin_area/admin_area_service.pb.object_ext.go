// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/admin_area_service.proto
// DO NOT EDIT!!!

package admin_area_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &admin_area.BBox{}
)

func (o *GetAdminAreaRequest) GotenObjectExt() {}

func (o *GetAdminAreaRequest) MakeFullFieldMask() *GetAdminAreaRequest_FieldMask {
	return FullGetAdminAreaRequest_FieldMask()
}

func (o *GetAdminAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAdminAreaRequest_FieldMask()
}

func (o *GetAdminAreaRequest) MakeDiffFieldMask(other *GetAdminAreaRequest) *GetAdminAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAdminAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAdminAreaRequest_FieldMask()
	}

	res := &GetAdminAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAdminAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAdminAreaRequest))
}

func (o *GetAdminAreaRequest) Clone() *GetAdminAreaRequest {
	if o == nil {
		return nil
	}
	result := &GetAdminAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &admin_area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAdminAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAdminAreaRequest) Merge(source *GetAdminAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &admin_area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAdminAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAdminAreaRequest))
}

func (o *BatchGetAdminAreasRequest) GotenObjectExt() {}

func (o *BatchGetAdminAreasRequest) MakeFullFieldMask() *BatchGetAdminAreasRequest_FieldMask {
	return FullBatchGetAdminAreasRequest_FieldMask()
}

func (o *BatchGetAdminAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAdminAreasRequest_FieldMask()
}

func (o *BatchGetAdminAreasRequest) MakeDiffFieldMask(other *BatchGetAdminAreasRequest) *BatchGetAdminAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAdminAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAdminAreasRequest_FieldMask()
	}

	res := &BatchGetAdminAreasRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAdminAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAdminAreasRequest))
}

func (o *BatchGetAdminAreasRequest) Clone() *BatchGetAdminAreasRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAdminAreasRequest{}
	result.Names = make([]*admin_area.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &admin_area.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAdminAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAdminAreasRequest) Merge(source *BatchGetAdminAreasRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *admin_area.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &admin_area.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAdminAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAdminAreasRequest))
}

func (o *BatchGetAdminAreasResponse) GotenObjectExt() {}

func (o *BatchGetAdminAreasResponse) MakeFullFieldMask() *BatchGetAdminAreasResponse_FieldMask {
	return FullBatchGetAdminAreasResponse_FieldMask()
}

func (o *BatchGetAdminAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAdminAreasResponse_FieldMask()
}

func (o *BatchGetAdminAreasResponse) MakeDiffFieldMask(other *BatchGetAdminAreasResponse) *BatchGetAdminAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAdminAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAdminAreasResponse_FieldMask()
	}

	res := &BatchGetAdminAreasResponse_FieldMask{}

	if len(o.GetAdminAreas()) == len(other.GetAdminAreas()) {
		for i, lValue := range o.GetAdminAreas() {
			rValue := other.GetAdminAreas()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAdminAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAdminAreasResponse))
}

func (o *BatchGetAdminAreasResponse) Clone() *BatchGetAdminAreasResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAdminAreasResponse{}
	result.AdminAreas = make([]*admin_area.AdminArea, len(o.AdminAreas))
	for i, sourceValue := range o.AdminAreas {
		result.AdminAreas[i] = sourceValue.Clone()
	}
	result.Missing = make([]*admin_area.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &admin_area.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAdminAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAdminAreasResponse) Merge(source *BatchGetAdminAreasResponse) {
	for _, sourceValue := range source.GetAdminAreas() {
		exists := false
		for _, currentValue := range o.AdminAreas {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *admin_area.AdminArea
			if sourceValue != nil {
				newDstElement = new(admin_area.AdminArea)
				newDstElement.Merge(sourceValue)
			}
			o.AdminAreas = append(o.AdminAreas, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *admin_area.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &admin_area.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAdminAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAdminAreasResponse))
}

func (o *ListAdminAreasRequest) GotenObjectExt() {}

func (o *ListAdminAreasRequest) MakeFullFieldMask() *ListAdminAreasRequest_FieldMask {
	return FullListAdminAreasRequest_FieldMask()
}

func (o *ListAdminAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAdminAreasRequest_FieldMask()
}

func (o *ListAdminAreasRequest) MakeDiffFieldMask(other *ListAdminAreasRequest) *ListAdminAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAdminAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAdminAreasRequest_FieldMask()
	}

	res := &ListAdminAreasRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListAdminAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAdminAreasRequest))
}

func (o *ListAdminAreasRequest) Clone() *ListAdminAreasRequest {
	if o == nil {
		return nil
	}
	result := &ListAdminAreasRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &admin_area.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &admin_area.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &admin_area.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListAdminAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAdminAreasRequest) Merge(source *ListAdminAreasRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &admin_area.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &admin_area.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &admin_area.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListAdminAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAdminAreasRequest))
}

func (o *ListAdminAreasResponse) GotenObjectExt() {}

func (o *ListAdminAreasResponse) MakeFullFieldMask() *ListAdminAreasResponse_FieldMask {
	return FullListAdminAreasResponse_FieldMask()
}

func (o *ListAdminAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAdminAreasResponse_FieldMask()
}

func (o *ListAdminAreasResponse) MakeDiffFieldMask(other *ListAdminAreasResponse) *ListAdminAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAdminAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAdminAreasResponse_FieldMask()
	}

	res := &ListAdminAreasResponse_FieldMask{}

	if len(o.GetAdminAreas()) == len(other.GetAdminAreas()) {
		for i, lValue := range o.GetAdminAreas() {
			rValue := other.GetAdminAreas()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorAdminAreas})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorAdminAreas})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListAdminAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAdminAreasResponse))
}

func (o *ListAdminAreasResponse) Clone() *ListAdminAreasResponse {
	if o == nil {
		return nil
	}
	result := &ListAdminAreasResponse{}
	result.AdminAreas = make([]*admin_area.AdminArea, len(o.AdminAreas))
	for i, sourceValue := range o.AdminAreas {
		result.AdminAreas[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &admin_area.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &admin_area.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListAdminAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAdminAreasResponse) Merge(source *ListAdminAreasResponse) {
	for _, sourceValue := range source.GetAdminAreas() {
		exists := false
		for _, currentValue := range o.AdminAreas {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *admin_area.AdminArea
			if sourceValue != nil {
				newDstElement = new(admin_area.AdminArea)
				newDstElement.Merge(sourceValue)
			}
			o.AdminAreas = append(o.AdminAreas, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &admin_area.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &admin_area.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListAdminAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAdminAreasResponse))
}

func (o *WatchAdminAreaRequest) GotenObjectExt() {}

func (o *WatchAdminAreaRequest) MakeFullFieldMask() *WatchAdminAreaRequest_FieldMask {
	return FullWatchAdminAreaRequest_FieldMask()
}

func (o *WatchAdminAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAdminAreaRequest_FieldMask()
}

func (o *WatchAdminAreaRequest) MakeDiffFieldMask(other *WatchAdminAreaRequest) *WatchAdminAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAdminAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAdminAreaRequest_FieldMask()
	}

	res := &WatchAdminAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAdminAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAdminAreaRequest))
}

func (o *WatchAdminAreaRequest) Clone() *WatchAdminAreaRequest {
	if o == nil {
		return nil
	}
	result := &WatchAdminAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &admin_area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAdminAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAdminAreaRequest) Merge(source *WatchAdminAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &admin_area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAdminAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAdminAreaRequest))
}

func (o *WatchAdminAreaResponse) GotenObjectExt() {}

func (o *WatchAdminAreaResponse) MakeFullFieldMask() *WatchAdminAreaResponse_FieldMask {
	return FullWatchAdminAreaResponse_FieldMask()
}

func (o *WatchAdminAreaResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAdminAreaResponse_FieldMask()
}

func (o *WatchAdminAreaResponse) MakeDiffFieldMask(other *WatchAdminAreaResponse) *WatchAdminAreaResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAdminAreaResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAdminAreaResponse_FieldMask()
	}

	res := &WatchAdminAreaResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAdminAreaResponse_FieldTerminalPath{selector: WatchAdminAreaResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAdminAreaResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAdminAreaResponse))
}

func (o *WatchAdminAreaResponse) Clone() *WatchAdminAreaResponse {
	if o == nil {
		return nil
	}
	result := &WatchAdminAreaResponse{}
	result.Change = proto.Clone(o.Change).(*admin_area.AdminAreaChange)
	return result
}

func (o *WatchAdminAreaResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAdminAreaResponse) Merge(source *WatchAdminAreaResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(admin_area.AdminAreaChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAdminAreaResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAdminAreaResponse))
}

func (o *WatchAdminAreasRequest) GotenObjectExt() {}

func (o *WatchAdminAreasRequest) MakeFullFieldMask() *WatchAdminAreasRequest_FieldMask {
	return FullWatchAdminAreasRequest_FieldMask()
}

func (o *WatchAdminAreasRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAdminAreasRequest_FieldMask()
}

func (o *WatchAdminAreasRequest) MakeDiffFieldMask(other *WatchAdminAreasRequest) *WatchAdminAreasRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAdminAreasRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAdminAreasRequest_FieldMask()
	}

	res := &WatchAdminAreasRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAdminAreasRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAdminAreasRequest))
}

func (o *WatchAdminAreasRequest) Clone() *WatchAdminAreasRequest {
	if o == nil {
		return nil
	}
	result := &WatchAdminAreasRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &admin_area.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &admin_area.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &admin_area.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAdminAreasRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAdminAreasRequest) Merge(source *WatchAdminAreasRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &admin_area.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &admin_area.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &admin_area.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAdminAreasRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAdminAreasRequest))
}

func (o *WatchAdminAreasResponse) GotenObjectExt() {}

func (o *WatchAdminAreasResponse) MakeFullFieldMask() *WatchAdminAreasResponse_FieldMask {
	return FullWatchAdminAreasResponse_FieldMask()
}

func (o *WatchAdminAreasResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAdminAreasResponse_FieldMask()
}

func (o *WatchAdminAreasResponse) MakeDiffFieldMask(other *WatchAdminAreasResponse) *WatchAdminAreasResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAdminAreasResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAdminAreasResponse_FieldMask()
	}

	res := &WatchAdminAreasResponse_FieldMask{}

	if len(o.GetAdminAreaChanges()) == len(other.GetAdminAreaChanges()) {
		for i, lValue := range o.GetAdminAreaChanges() {
			rValue := other.GetAdminAreaChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldSubPath{selector: WatchAdminAreasResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAdminAreasResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAdminAreasResponse))
}

func (o *WatchAdminAreasResponse) Clone() *WatchAdminAreasResponse {
	if o == nil {
		return nil
	}
	result := &WatchAdminAreasResponse{}
	result.AdminAreaChanges = make([]*admin_area.AdminAreaChange, len(o.AdminAreaChanges))
	for i, sourceValue := range o.AdminAreaChanges {
		result.AdminAreaChanges[i] = proto.Clone(sourceValue).(*admin_area.AdminAreaChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAdminAreasResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAdminAreasResponse) Merge(source *WatchAdminAreasResponse) {
	for _, sourceValue := range source.GetAdminAreaChanges() {
		exists := false
		for _, currentValue := range o.AdminAreaChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *admin_area.AdminAreaChange
			if sourceValue != nil {
				newDstElement = new(admin_area.AdminAreaChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AdminAreaChanges = append(o.AdminAreaChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAdminAreasResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAdminAreasResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAdminAreasResponse))
}

func (o *WatchAdminAreasResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAdminAreasResponse_PageTokenChange) MakeFullFieldMask() *WatchAdminAreasResponse_PageTokenChange_FieldMask {
	return FullWatchAdminAreasResponse_PageTokenChange_FieldMask()
}

func (o *WatchAdminAreasResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAdminAreasResponse_PageTokenChange_FieldMask()
}

func (o *WatchAdminAreasResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAdminAreasResponse_PageTokenChange) *WatchAdminAreasResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAdminAreasResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAdminAreasResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAdminAreasResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAdminAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAdminAreasResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAdminAreasResponse_PageTokenChange))
}

func (o *WatchAdminAreasResponse_PageTokenChange) Clone() *WatchAdminAreasResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAdminAreasResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &admin_area.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &admin_area.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAdminAreasResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAdminAreasResponse_PageTokenChange) Merge(source *WatchAdminAreasResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &admin_area.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &admin_area.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAdminAreasResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAdminAreasResponse_PageTokenChange))
}

func (o *CreateAdminAreaRequest) GotenObjectExt() {}

func (o *CreateAdminAreaRequest) MakeFullFieldMask() *CreateAdminAreaRequest_FieldMask {
	return FullCreateAdminAreaRequest_FieldMask()
}

func (o *CreateAdminAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAdminAreaRequest_FieldMask()
}

func (o *CreateAdminAreaRequest) MakeDiffFieldMask(other *CreateAdminAreaRequest) *CreateAdminAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAdminAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAdminAreaRequest_FieldMask()
	}

	res := &CreateAdminAreaRequest_FieldMask{}
	{
		subMask := o.GetAdminArea().MakeDiffFieldMask(other.GetAdminArea())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAdminAreaRequest_FieldTerminalPath{selector: CreateAdminAreaRequest_FieldPathSelectorAdminArea})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAdminAreaRequest_FieldSubPath{selector: CreateAdminAreaRequest_FieldPathSelectorAdminArea, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAdminAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAdminAreaRequest))
}

func (o *CreateAdminAreaRequest) Clone() *CreateAdminAreaRequest {
	if o == nil {
		return nil
	}
	result := &CreateAdminAreaRequest{}
	result.AdminArea = o.AdminArea.Clone()
	return result
}

func (o *CreateAdminAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAdminAreaRequest) Merge(source *CreateAdminAreaRequest) {
	if source.GetAdminArea() != nil {
		if o.AdminArea == nil {
			o.AdminArea = new(admin_area.AdminArea)
		}
		o.AdminArea.Merge(source.GetAdminArea())
	}
}

func (o *CreateAdminAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAdminAreaRequest))
}

func (o *UpdateAdminAreaRequest) GotenObjectExt() {}

func (o *UpdateAdminAreaRequest) MakeFullFieldMask() *UpdateAdminAreaRequest_FieldMask {
	return FullUpdateAdminAreaRequest_FieldMask()
}

func (o *UpdateAdminAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAdminAreaRequest_FieldMask()
}

func (o *UpdateAdminAreaRequest) MakeDiffFieldMask(other *UpdateAdminAreaRequest) *UpdateAdminAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAdminAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAdminAreaRequest_FieldMask()
	}

	res := &UpdateAdminAreaRequest_FieldMask{}
	{
		subMask := o.GetAdminArea().MakeDiffFieldMask(other.GetAdminArea())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorAdminArea})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldSubPath{selector: UpdateAdminAreaRequest_FieldPathSelectorAdminArea, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldSubPath{selector: UpdateAdminAreaRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateAdminAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAdminAreaRequest))
}

func (o *UpdateAdminAreaRequest) Clone() *UpdateAdminAreaRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAdminAreaRequest{}
	result.AdminArea = o.AdminArea.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*admin_area.AdminArea_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateAdminAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAdminAreaRequest) Merge(source *UpdateAdminAreaRequest) {
	if source.GetAdminArea() != nil {
		if o.AdminArea == nil {
			o.AdminArea = new(admin_area.AdminArea)
		}
		o.AdminArea.Merge(source.GetAdminArea())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAdminAreaRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateAdminAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAdminAreaRequest))
}

func (o *UpdateAdminAreaRequest_CAS) GotenObjectExt() {}

func (o *UpdateAdminAreaRequest_CAS) MakeFullFieldMask() *UpdateAdminAreaRequest_CAS_FieldMask {
	return FullUpdateAdminAreaRequest_CAS_FieldMask()
}

func (o *UpdateAdminAreaRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAdminAreaRequest_CAS_FieldMask()
}

func (o *UpdateAdminAreaRequest_CAS) MakeDiffFieldMask(other *UpdateAdminAreaRequest_CAS) *UpdateAdminAreaRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAdminAreaRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAdminAreaRequest_CAS_FieldMask()
	}

	res := &UpdateAdminAreaRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAdminAreaRequestCAS_FieldTerminalPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAdminAreaRequestCAS_FieldSubPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAdminAreaRequestCAS_FieldTerminalPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAdminAreaRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAdminAreaRequest_CAS))
}

func (o *UpdateAdminAreaRequest_CAS) Clone() *UpdateAdminAreaRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAdminAreaRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*admin_area.AdminArea_FieldMask)
	return result
}

func (o *UpdateAdminAreaRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAdminAreaRequest_CAS) Merge(source *UpdateAdminAreaRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(admin_area.AdminArea)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(admin_area.AdminArea_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAdminAreaRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAdminAreaRequest_CAS))
}

func (o *DeleteAdminAreaRequest) GotenObjectExt() {}

func (o *DeleteAdminAreaRequest) MakeFullFieldMask() *DeleteAdminAreaRequest_FieldMask {
	return FullDeleteAdminAreaRequest_FieldMask()
}

func (o *DeleteAdminAreaRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAdminAreaRequest_FieldMask()
}

func (o *DeleteAdminAreaRequest) MakeDiffFieldMask(other *DeleteAdminAreaRequest) *DeleteAdminAreaRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAdminAreaRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAdminAreaRequest_FieldMask()
	}

	res := &DeleteAdminAreaRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAdminAreaRequest_FieldTerminalPath{selector: DeleteAdminAreaRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAdminAreaRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAdminAreaRequest))
}

func (o *DeleteAdminAreaRequest) Clone() *DeleteAdminAreaRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAdminAreaRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &admin_area.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAdminAreaRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAdminAreaRequest) Merge(source *DeleteAdminAreaRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &admin_area.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAdminAreaRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAdminAreaRequest))
}
