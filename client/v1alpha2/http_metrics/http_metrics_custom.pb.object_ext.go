// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_metrics_custom.proto
// DO NOT EDIT!!!

package http_metrics_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

func (o *ReportHTTPMetricsRequest) GotenObjectExt() {}

func (o *ReportHTTPMetricsRequest) MakeFullFieldMask() *ReportHTTPMetricsRequest_FieldMask {
	return FullReportHTTPMetricsRequest_FieldMask()
}

func (o *ReportHTTPMetricsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullReportHTTPMetricsRequest_FieldMask()
}

func (o *ReportHTTPMetricsRequest) MakeDiffFieldMask(other *ReportHTTPMetricsRequest) *ReportHTTPMetricsRequest_FieldMask {
	if o == nil && other == nil {
		return &ReportHTTPMetricsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullReportHTTPMetricsRequest_FieldMask()
	}

	res := &ReportHTTPMetricsRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorName})
	}

	if len(o.GetHttpStats()) == len(other.GetHttpStats()) {
		for i, lValue := range o.GetHttpStats() {
			rValue := other.GetHttpStats()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorHttpStats})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorHttpStats})
	}
	return res
}

func (o *ReportHTTPMetricsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ReportHTTPMetricsRequest))
}

func (o *ReportHTTPMetricsRequest) Clone() *ReportHTTPMetricsRequest {
	if o == nil {
		return nil
	}
	result := &ReportHTTPMetricsRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.HttpStats = make([]*HTTPStat, len(o.HttpStats))
	for i, sourceValue := range o.HttpStats {
		result.HttpStats[i] = sourceValue.Clone()
	}
	return result
}

func (o *ReportHTTPMetricsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ReportHTTPMetricsRequest) Merge(source *ReportHTTPMetricsRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	for _, sourceValue := range source.GetHttpStats() {
		exists := false
		for _, currentValue := range o.HttpStats {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *HTTPStat
			if sourceValue != nil {
				newDstElement = new(HTTPStat)
				newDstElement.Merge(sourceValue)
			}
			o.HttpStats = append(o.HttpStats, newDstElement)
		}
	}

}

func (o *ReportHTTPMetricsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ReportHTTPMetricsRequest))
}

func (o *GetHTTPMetricsRequest) GotenObjectExt() {}

func (o *GetHTTPMetricsRequest) MakeFullFieldMask() *GetHTTPMetricsRequest_FieldMask {
	return FullGetHTTPMetricsRequest_FieldMask()
}

func (o *GetHTTPMetricsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetHTTPMetricsRequest_FieldMask()
}

func (o *GetHTTPMetricsRequest) MakeDiffFieldMask(other *GetHTTPMetricsRequest) *GetHTTPMetricsRequest_FieldMask {
	if o == nil && other == nil {
		return &GetHTTPMetricsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetHTTPMetricsRequest_FieldMask()
	}

	res := &GetHTTPMetricsRequest_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorProbe})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorTarget})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldSubPath{selector: GetHTTPMetricsRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *GetHTTPMetricsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetHTTPMetricsRequest))
}

func (o *GetHTTPMetricsRequest) Clone() *GetHTTPMetricsRequest {
	if o == nil {
		return nil
	}
	result := &GetHTTPMetricsRequest{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *GetHTTPMetricsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetHTTPMetricsRequest) Merge(source *GetHTTPMetricsRequest) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *GetHTTPMetricsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetHTTPMetricsRequest))
}

func (o *GetHTTPMetricsResponse) GotenObjectExt() {}

func (o *GetHTTPMetricsResponse) MakeFullFieldMask() *GetHTTPMetricsResponse_FieldMask {
	return FullGetHTTPMetricsResponse_FieldMask()
}

func (o *GetHTTPMetricsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetHTTPMetricsResponse_FieldMask()
}

func (o *GetHTTPMetricsResponse) MakeDiffFieldMask(other *GetHTTPMetricsResponse) *GetHTTPMetricsResponse_FieldMask {
	if o == nil && other == nil {
		return &GetHTTPMetricsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetHTTPMetricsResponse_FieldMask()
	}

	res := &GetHTTPMetricsResponse_FieldMask{}

	if len(o.GetHttpMetrics()) == len(other.GetHttpMetrics()) {
		for i, lValue := range o.GetHttpMetrics() {
			rValue := other.GetHttpMetrics()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *GetHTTPMetricsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetHTTPMetricsResponse))
}

func (o *GetHTTPMetricsResponse) Clone() *GetHTTPMetricsResponse {
	if o == nil {
		return nil
	}
	result := &GetHTTPMetricsResponse{}
	result.HttpMetrics = make([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair, len(o.HttpMetrics))
	for i, sourceValue := range o.HttpMetrics {
		result.HttpMetrics[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	return result
}

func (o *GetHTTPMetricsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetHTTPMetricsResponse) Merge(source *GetHTTPMetricsResponse) {
	for _, sourceValue := range source.GetHttpMetrics() {
		exists := false
		for _, currentValue := range o.HttpMetrics {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair
			if sourceValue != nil {
				newDstElement = new(GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
				newDstElement.Merge(sourceValue)
			}
			o.HttpMetrics = append(o.HttpMetrics, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
}

func (o *GetHTTPMetricsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetHTTPMetricsResponse))
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) GotenObjectExt() {}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MakeFullFieldMask() *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask {
	return FullGetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask()
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask()
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MakeDiffFieldMask(other *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask {
	if o == nil && other == nil {
		return &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask()
	}

	res := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget})
	}

	if len(o.GetHttpStats()) == len(other.GetHttpStats()) {
		for i, lValue := range o.GetHttpStats() {
			rValue := other.GetHttpStats()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats})
	}
	return res
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Clone() *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair {
	if o == nil {
		return nil
	}
	result := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.HttpStats = make([]*HTTPStat, len(o.HttpStats))
	for i, sourceValue := range o.HttpStats {
		result.HttpStats[i] = sourceValue.Clone()
	}
	return result
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Merge(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	for _, sourceValue := range source.GetHttpStats() {
		exists := false
		for _, currentValue := range o.HttpStats {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *HTTPStat
			if sourceValue != nil {
				newDstElement = new(HTTPStat)
				newDstElement.Merge(sourceValue)
			}
			o.HttpStats = append(o.HttpStats, newDstElement)
		}
	}

}

func (o *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

func (o *HTTPStat) GotenObjectExt() {}

func (o *HTTPStat) MakeFullFieldMask() *HTTPStat_FieldMask {
	return FullHTTPStat_FieldMask()
}

func (o *HTTPStat) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHTTPStat_FieldMask()
}

func (o *HTTPStat) MakeDiffFieldMask(other *HTTPStat) *HTTPStat_FieldMask {
	if o == nil && other == nil {
		return &HTTPStat_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHTTPStat_FieldMask()
	}

	res := &HTTPStat_FieldMask{}
	if o.GetDnsLookupTime() != other.GetDnsLookupTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorDnsLookupTime})
	}
	if o.GetTcpConnectTime() != other.GetTcpConnectTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTcpConnectTime})
	}
	if o.GetTlsHandshakeTime() != other.GetTlsHandshakeTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTlsHandshakeTime})
	}
	if o.GetRequestSendTime() != other.GetRequestSendTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorRequestSendTime})
	}
	if o.GetTimeToFirstByte() != other.GetTimeToFirstByte() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTimeToFirstByte})
	}
	if o.GetTtfbAfterRequestSend() != other.GetTtfbAfterRequestSend() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTtfbAfterRequestSend})
	}
	if o.GetContentDownloadTime() != other.GetContentDownloadTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorContentDownloadTime})
	}
	if o.GetTotalResponseTime() != other.GetTotalResponseTime() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTotalResponseTime})
	}
	if o.GetResponseCode() != other.GetResponseCode() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorResponseCode})
	}
	if o.GetServerIpAddress() != other.GetServerIpAddress() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorServerIpAddress})
	}
	if o.GetIpVersion() != other.GetIpVersion() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorIpVersion})
	}
	if o.GetFailedStage() != other.GetFailedStage() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorFailedStage})
	}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTime})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTarget})
	}
	return res
}

func (o *HTTPStat) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HTTPStat))
}

func (o *HTTPStat) Clone() *HTTPStat {
	if o == nil {
		return nil
	}
	result := &HTTPStat{}
	result.DnsLookupTime = o.DnsLookupTime
	result.TcpConnectTime = o.TcpConnectTime
	result.TlsHandshakeTime = o.TlsHandshakeTime
	result.RequestSendTime = o.RequestSendTime
	result.TimeToFirstByte = o.TimeToFirstByte
	result.TtfbAfterRequestSend = o.TtfbAfterRequestSend
	result.ContentDownloadTime = o.ContentDownloadTime
	result.TotalResponseTime = o.TotalResponseTime
	result.ResponseCode = o.ResponseCode
	result.ServerIpAddress = o.ServerIpAddress
	result.IpVersion = o.IpVersion
	result.FailedStage = o.FailedStage
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *HTTPStat) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HTTPStat) Merge(source *HTTPStat) {
	o.DnsLookupTime = source.GetDnsLookupTime()
	o.TcpConnectTime = source.GetTcpConnectTime()
	o.TlsHandshakeTime = source.GetTlsHandshakeTime()
	o.RequestSendTime = source.GetRequestSendTime()
	o.TimeToFirstByte = source.GetTimeToFirstByte()
	o.TtfbAfterRequestSend = source.GetTtfbAfterRequestSend()
	o.ContentDownloadTime = source.GetContentDownloadTime()
	o.TotalResponseTime = source.GetTotalResponseTime()
	o.ResponseCode = source.GetResponseCode()
	o.ServerIpAddress = source.GetServerIpAddress()
	o.IpVersion = source.GetIpVersion()
	o.FailedStage = source.GetFailedStage()
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
}

func (o *HTTPStat) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HTTPStat))
}
