// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_metrics_custom.proto
// DO NOT EDIT!!!

package http_metrics_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ReportHTTPMetricsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ReportHTTPMetricsRequest_FieldPathSelector
	Get(source *ReportHTTPMetricsRequest) []interface{}
	GetSingle(source *ReportHTTPMetricsRequest) (interface{}, bool)
	ClearValue(item *ReportHTTPMetricsRequest)

	// Those methods build corresponding ReportHTTPMetricsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ReportHTTPMetricsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ReportHTTPMetricsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ReportHTTPMetricsRequest_FieldPathArrayItemValue
}

type ReportHTTPMetricsRequest_FieldPathSelector int32

const (
	ReportHTTPMetricsRequest_FieldPathSelectorName      ReportHTTPMetricsRequest_FieldPathSelector = 0
	ReportHTTPMetricsRequest_FieldPathSelectorHttpStats ReportHTTPMetricsRequest_FieldPathSelector = 1
)

func (s ReportHTTPMetricsRequest_FieldPathSelector) String() string {
	switch s {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		return "name"
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return "http_stats"
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", s))
	}
}

func BuildReportHTTPMetricsRequest_FieldPath(fp gotenobject.RawFieldPath) (ReportHTTPMetricsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ReportHTTPMetricsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorName}, nil
		case "http_stats", "httpStats", "http-stats":
			return &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorHttpStats}, nil
		}
	} else {
		switch fp[0] {
		case "http_stats", "httpStats", "http-stats":
			if subpath, err := BuildHTTPStat_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ReportHTTPMetricsRequest_FieldSubPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorHttpStats, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ReportHTTPMetricsRequest", fp)
}

func ParseReportHTTPMetricsRequest_FieldPath(rawField string) (ReportHTTPMetricsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildReportHTTPMetricsRequest_FieldPath(fp)
}

func MustParseReportHTTPMetricsRequest_FieldPath(rawField string) ReportHTTPMetricsRequest_FieldPath {
	fp, err := ParseReportHTTPMetricsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ReportHTTPMetricsRequest_FieldTerminalPath struct {
	selector ReportHTTPMetricsRequest_FieldPathSelector
}

var _ ReportHTTPMetricsRequest_FieldPath = (*ReportHTTPMetricsRequest_FieldTerminalPath)(nil)

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) Selector() ReportHTTPMetricsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ReportHTTPMetricsRequest
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) Get(source *ReportHTTPMetricsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ReportHTTPMetricsRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
			for _, value := range source.GetHttpStats() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ReportHTTPMetricsRequest))
}

// GetSingle returns value pointed by specific field of from source ReportHTTPMetricsRequest
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) GetSingle(source *ReportHTTPMetricsRequest) (interface{}, bool) {
	switch fp.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		res := source.GetHttpStats()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ReportHTTPMetricsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return ([]*HTTPStat)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) ClearValue(item *ReportHTTPMetricsRequest) {
	if item != nil {
		switch fp.selector {
		case ReportHTTPMetricsRequest_FieldPathSelectorName:
			item.Name = nil
		case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
			item.HttpStats = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
		}
	}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ReportHTTPMetricsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ReportHTTPMetricsRequest_FieldPathSelectorName
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithIValue(value interface{}) ReportHTTPMetricsRequest_FieldPathValue {
	switch fp.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		return &ReportHTTPMetricsRequest_FieldTerminalPathValue{ReportHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return &ReportHTTPMetricsRequest_FieldTerminalPathValue{ReportHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.([]*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ReportHTTPMetricsRequest_FieldPathArrayOfValues {
	fpaov := &ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues{ReportHTTPMetricsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		return &ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues{ReportHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return &ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues{ReportHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([][]*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ReportHTTPMetricsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return &ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue{ReportHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *ReportHTTPMetricsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ReportHTTPMetricsRequest_FieldSubPath struct {
	selector ReportHTTPMetricsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ReportHTTPMetricsRequest_FieldPath = (*ReportHTTPMetricsRequest_FieldSubPath)(nil)

func (fps *ReportHTTPMetricsRequest_FieldSubPath) Selector() ReportHTTPMetricsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ReportHTTPMetricsRequest_FieldSubPath) AsHttpStatsSubPath() (HTTPStat_FieldPath, bool) {
	res, ok := fps.subPath.(HTTPStat_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ReportHTTPMetricsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ReportHTTPMetricsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ReportHTTPMetricsRequest
func (fps *ReportHTTPMetricsRequest_FieldSubPath) Get(source *ReportHTTPMetricsRequest) (values []interface{}) {
	switch fps.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		for _, item := range source.GetHttpStats() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fps.selector))
	}
	return
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ReportHTTPMetricsRequest))
}

// GetSingle returns value of selected field from source ReportHTTPMetricsRequest
func (fps *ReportHTTPMetricsRequest_FieldSubPath) GetSingle(source *ReportHTTPMetricsRequest) (interface{}, bool) {
	switch fps.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		if len(source.GetHttpStats()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpStats()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fps.selector))
	}
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ReportHTTPMetricsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ReportHTTPMetricsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) ClearValue(item *ReportHTTPMetricsRequest) {
	if item != nil {
		switch fps.selector {
		case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
			for _, subItem := range item.HttpStats {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fps.selector))
		}
	}
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ReportHTTPMetricsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ReportHTTPMetricsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ReportHTTPMetricsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithIValue(value interface{}) ReportHTTPMetricsRequest_FieldPathValue {
	return &ReportHTTPMetricsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ReportHTTPMetricsRequest_FieldPathArrayOfValues {
	return &ReportHTTPMetricsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ReportHTTPMetricsRequest_FieldPathArrayItemValue {
	return &ReportHTTPMetricsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ReportHTTPMetricsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ReportHTTPMetricsRequest_FieldPathValue allows storing values for ReportHTTPMetricsRequest fields according to their type
type ReportHTTPMetricsRequest_FieldPathValue interface {
	ReportHTTPMetricsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ReportHTTPMetricsRequest)
	CompareWith(*ReportHTTPMetricsRequest) (cmp int, comparable bool)
}

func ParseReportHTTPMetricsRequest_FieldPathValue(pathStr, valueStr string) (ReportHTTPMetricsRequest_FieldPathValue, error) {
	fp, err := ParseReportHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHTTPMetricsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ReportHTTPMetricsRequest_FieldPathValue), nil
}

func MustParseReportHTTPMetricsRequest_FieldPathValue(pathStr, valueStr string) ReportHTTPMetricsRequest_FieldPathValue {
	fpv, err := ParseReportHTTPMetricsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ReportHTTPMetricsRequest_FieldTerminalPathValue struct {
	ReportHTTPMetricsRequest_FieldTerminalPath
	value interface{}
}

var _ ReportHTTPMetricsRequest_FieldPathValue = (*ReportHTTPMetricsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReportHTTPMetricsRequest' as interface{}
func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) AsHttpStatsValue() ([]*HTTPStat, bool) {
	res, ok := fpv.value.([]*HTTPStat)
	return res, ok
}

// SetTo stores value for selected field for object ReportHTTPMetricsRequest
func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) SetTo(target **ReportHTTPMetricsRequest) {
	if *target == nil {
		*target = new(ReportHTTPMetricsRequest)
	}
	switch fpv.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		(*target).HttpStats = fpv.value.([]*HTTPStat)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fpv.selector))
	}
}

func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHTTPMetricsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportHTTPMetricsRequest_FieldTerminalPathValue' with the value under path in 'ReportHTTPMetricsRequest'.
func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) CompareWith(source *ReportHTTPMetricsRequest) (int, bool) {
	switch fpv.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fpv.selector))
	}
}

func (fpv *ReportHTTPMetricsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ReportHTTPMetricsRequest))
}

type ReportHTTPMetricsRequest_FieldSubPathValue struct {
	ReportHTTPMetricsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ReportHTTPMetricsRequest_FieldPathValue = (*ReportHTTPMetricsRequest_FieldSubPathValue)(nil)

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) AsHttpStatsPathValue() (HTTPStat_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(HTTPStat_FieldPathValue)
	return res, ok
}

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) SetTo(target **ReportHTTPMetricsRequest) {
	if *target == nil {
		*target = new(ReportHTTPMetricsRequest)
	}
	switch fpvs.Selector() {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHTTPMetricsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) CompareWith(source *ReportHTTPMetricsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportHTTPMetricsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ReportHTTPMetricsRequest))
}

// ReportHTTPMetricsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ReportHTTPMetricsRequest according to their type
// Present only for array (repeated) types.
type ReportHTTPMetricsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ReportHTTPMetricsRequest_FieldPath
	ContainsValue(*ReportHTTPMetricsRequest) bool
}

// ParseReportHTTPMetricsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseReportHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ReportHTTPMetricsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseReportHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHTTPMetricsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ReportHTTPMetricsRequest_FieldPathArrayItemValue), nil
}

func MustParseReportHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ReportHTTPMetricsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseReportHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue struct {
	ReportHTTPMetricsRequest_FieldTerminalPath
	value interface{}
}

var _ ReportHTTPMetricsRequest_FieldPathArrayItemValue = (*ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ReportHTTPMetricsRequest as interface{}
func (fpaiv *ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue) AsHttpStatsItemValue() (*HTTPStat, bool) {
	res, ok := fpaiv.value.(*HTTPStat)
	return res, ok
}

func (fpaiv *ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ReportHTTPMetricsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ReportHTTPMetricsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportHTTPMetricsRequest'
func (fpaiv *ReportHTTPMetricsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ReportHTTPMetricsRequest) bool {
	slice := fpaiv.ReportHTTPMetricsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ReportHTTPMetricsRequest_FieldSubPathArrayItemValue struct {
	ReportHTTPMetricsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ReportHTTPMetricsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ReportHTTPMetricsRequest_FieldSubPathArrayItemValue) AsHttpStatsPathItemValue() (HTTPStat_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(HTTPStat_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportHTTPMetricsRequest'
func (fpaivs *ReportHTTPMetricsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ReportHTTPMetricsRequest) bool {
	switch fpaivs.Selector() {
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHTTPMetricsRequest: %d", fpaivs.Selector()))
	}
}

// ReportHTTPMetricsRequest_FieldPathArrayOfValues allows storing slice of values for ReportHTTPMetricsRequest fields according to their type
type ReportHTTPMetricsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ReportHTTPMetricsRequest_FieldPath
}

func ParseReportHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ReportHTTPMetricsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseReportHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHTTPMetricsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ReportHTTPMetricsRequest_FieldPathArrayOfValues), nil
}

func MustParseReportHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ReportHTTPMetricsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseReportHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues struct {
	ReportHTTPMetricsRequest_FieldTerminalPath
	values interface{}
}

var _ ReportHTTPMetricsRequest_FieldPathArrayOfValues = (*ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ReportHTTPMetricsRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
		for _, v := range fpaov.values.([][]*HTTPStat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ReportHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsHttpStatsArrayOfValues() ([][]*HTTPStat, bool) {
	res, ok := fpaov.values.([][]*HTTPStat)
	return res, ok
}

type ReportHTTPMetricsRequest_FieldSubPathArrayOfValues struct {
	ReportHTTPMetricsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ReportHTTPMetricsRequest_FieldPathArrayOfValues = (*ReportHTTPMetricsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ReportHTTPMetricsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ReportHTTPMetricsRequest_FieldSubPathArrayOfValues) AsHttpStatsPathArrayOfValues() (HTTPStat_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(HTTPStat_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetHTTPMetricsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetHTTPMetricsRequest_FieldPathSelector
	Get(source *GetHTTPMetricsRequest) []interface{}
	GetSingle(source *GetHTTPMetricsRequest) (interface{}, bool)
	ClearValue(item *GetHTTPMetricsRequest)

	// Those methods build corresponding GetHTTPMetricsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetHTTPMetricsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetHTTPMetricsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetHTTPMetricsRequest_FieldPathArrayItemValue
}

type GetHTTPMetricsRequest_FieldPathSelector int32

const (
	GetHTTPMetricsRequest_FieldPathSelectorProbe     GetHTTPMetricsRequest_FieldPathSelector = 0
	GetHTTPMetricsRequest_FieldPathSelectorTarget    GetHTTPMetricsRequest_FieldPathSelector = 1
	GetHTTPMetricsRequest_FieldPathSelectorInterval  GetHTTPMetricsRequest_FieldPathSelector = 2
	GetHTTPMetricsRequest_FieldPathSelectorPageSize  GetHTTPMetricsRequest_FieldPathSelector = 3
	GetHTTPMetricsRequest_FieldPathSelectorPageToken GetHTTPMetricsRequest_FieldPathSelector = 4
)

func (s GetHTTPMetricsRequest_FieldPathSelector) String() string {
	switch s {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		return "probe"
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		return "target"
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return "interval"
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", s))
	}
}

func BuildGetHTTPMetricsRequest_FieldPath(fp gotenobject.RawFieldPath) (GetHTTPMetricsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetHTTPMetricsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorProbe}, nil
		case "target":
			return &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorTarget}, nil
		case "interval":
			return &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetHTTPMetricsRequest_FieldSubPath{selector: GetHTTPMetricsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetHTTPMetricsRequest", fp)
}

func ParseGetHTTPMetricsRequest_FieldPath(rawField string) (GetHTTPMetricsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetHTTPMetricsRequest_FieldPath(fp)
}

func MustParseGetHTTPMetricsRequest_FieldPath(rawField string) GetHTTPMetricsRequest_FieldPath {
	fp, err := ParseGetHTTPMetricsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetHTTPMetricsRequest_FieldTerminalPath struct {
	selector GetHTTPMetricsRequest_FieldPathSelector
}

var _ GetHTTPMetricsRequest_FieldPath = (*GetHTTPMetricsRequest_FieldTerminalPath)(nil)

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) Selector() GetHTTPMetricsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetHTTPMetricsRequest
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) Get(source *GetHTTPMetricsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetHTTPMetricsRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case GetHTTPMetricsRequest_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case GetHTTPMetricsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetHTTPMetricsRequest))
}

// GetSingle returns value pointed by specific field of from source GetHTTPMetricsRequest
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) GetSingle(source *GetHTTPMetricsRequest) (interface{}, bool) {
	switch fp.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetHTTPMetricsRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return (*common.TimeInterval)(nil)
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) ClearValue(item *GetHTTPMetricsRequest) {
	if item != nil {
		switch fp.selector {
		case GetHTTPMetricsRequest_FieldPathSelectorProbe:
			item.Probe = nil
		case GetHTTPMetricsRequest_FieldPathSelectorTarget:
			item.Target = nil
		case GetHTTPMetricsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
		}
	}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetHTTPMetricsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetHTTPMetricsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetHTTPMetricsRequest_FieldPathSelectorProbe ||
		fp.selector == GetHTTPMetricsRequest_FieldPathSelectorTarget ||
		fp.selector == GetHTTPMetricsRequest_FieldPathSelectorPageSize ||
		fp.selector == GetHTTPMetricsRequest_FieldPathSelectorPageToken
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithIValue(value interface{}) GetHTTPMetricsRequest_FieldPathValue {
	switch fp.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		return &GetHTTPMetricsRequest_FieldTerminalPathValue{GetHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		return &GetHTTPMetricsRequest_FieldTerminalPathValue{GetHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return &GetHTTPMetricsRequest_FieldTerminalPathValue{GetHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(*common.TimeInterval)}
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		return &GetHTTPMetricsRequest_FieldTerminalPathValue{GetHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		return &GetHTTPMetricsRequest_FieldTerminalPathValue{GetHTTPMetricsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsRequest_FieldPathArrayOfValues {
	fpaov := &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		return &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		return &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]*common.TimeInterval)}
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		return &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		return &GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues{GetHTTPMetricsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetHTTPMetricsRequest_FieldSubPath struct {
	selector GetHTTPMetricsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetHTTPMetricsRequest_FieldPath = (*GetHTTPMetricsRequest_FieldSubPath)(nil)

func (fps *GetHTTPMetricsRequest_FieldSubPath) Selector() GetHTTPMetricsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *GetHTTPMetricsRequest_FieldSubPath) AsIntervalSubPath() (common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetHTTPMetricsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetHTTPMetricsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetHTTPMetricsRequest
func (fps *GetHTTPMetricsRequest_FieldSubPath) Get(source *GetHTTPMetricsRequest) (values []interface{}) {
	switch fps.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		values = append(values, fps.subPath.GetRaw(source.GetInterval())...)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fps.selector))
	}
	return
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetHTTPMetricsRequest))
}

// GetSingle returns value of selected field from source GetHTTPMetricsRequest
func (fps *GetHTTPMetricsRequest_FieldSubPath) GetSingle(source *GetHTTPMetricsRequest) (interface{}, bool) {
	switch fps.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fps.selector))
	}
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetHTTPMetricsRequest))
}

// GetDefault returns a default value of the field type
func (fps *GetHTTPMetricsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) ClearValue(item *GetHTTPMetricsRequest) {
	if item != nil {
		switch fps.selector {
		case GetHTTPMetricsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fps.selector))
		}
	}
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetHTTPMetricsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetHTTPMetricsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetHTTPMetricsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithIValue(value interface{}) GetHTTPMetricsRequest_FieldPathValue {
	return &GetHTTPMetricsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsRequest_FieldPathArrayOfValues {
	return &GetHTTPMetricsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsRequest_FieldPathArrayItemValue {
	return &GetHTTPMetricsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetHTTPMetricsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetHTTPMetricsRequest_FieldPathValue allows storing values for GetHTTPMetricsRequest fields according to their type
type GetHTTPMetricsRequest_FieldPathValue interface {
	GetHTTPMetricsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetHTTPMetricsRequest)
	CompareWith(*GetHTTPMetricsRequest) (cmp int, comparable bool)
}

func ParseGetHTTPMetricsRequest_FieldPathValue(pathStr, valueStr string) (GetHTTPMetricsRequest_FieldPathValue, error) {
	fp, err := ParseGetHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetHTTPMetricsRequest_FieldPathValue), nil
}

func MustParseGetHTTPMetricsRequest_FieldPathValue(pathStr, valueStr string) GetHTTPMetricsRequest_FieldPathValue {
	fpv, err := ParseGetHTTPMetricsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetHTTPMetricsRequest_FieldTerminalPathValue struct {
	GetHTTPMetricsRequest_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsRequest_FieldPathValue = (*GetHTTPMetricsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetHTTPMetricsRequest' as interface{}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) AsIntervalValue() (*common.TimeInterval, bool) {
	res, ok := fpv.value.(*common.TimeInterval)
	return res, ok
}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetHTTPMetricsRequest
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) SetTo(target **GetHTTPMetricsRequest) {
	if *target == nil {
		*target = new(GetHTTPMetricsRequest)
	}
	switch fpv.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*common.TimeInterval)
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHTTPMetricsRequest_FieldTerminalPathValue' with the value under path in 'GetHTTPMetricsRequest'.
func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) CompareWith(source *GetHTTPMetricsRequest) (int, bool) {
	switch fpv.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return 0, false
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetHTTPMetricsRequest))
}

type GetHTTPMetricsRequest_FieldSubPathValue struct {
	GetHTTPMetricsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetHTTPMetricsRequest_FieldPathValue = (*GetHTTPMetricsRequest_FieldSubPathValue)(nil)

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) AsIntervalPathValue() (common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) SetTo(target **GetHTTPMetricsRequest) {
	if *target == nil {
		*target = new(GetHTTPMetricsRequest)
	}
	switch fpvs.Selector() {
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) CompareWith(source *GetHTTPMetricsRequest) (int, bool) {
	switch fpvs.Selector() {
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetHTTPMetricsRequest))
}

// GetHTTPMetricsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetHTTPMetricsRequest according to their type
// Present only for array (repeated) types.
type GetHTTPMetricsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetHTTPMetricsRequest_FieldPath
	ContainsValue(*GetHTTPMetricsRequest) bool
}

// ParseGetHTTPMetricsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetHTTPMetricsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetHTTPMetricsRequest_FieldPathArrayItemValue), nil
}

func MustParseGetHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetHTTPMetricsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetHTTPMetricsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue struct {
	GetHTTPMetricsRequest_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsRequest_FieldPathArrayItemValue = (*GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetHTTPMetricsRequest as interface{}
func (fpaiv *GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetHTTPMetricsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetHTTPMetricsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHTTPMetricsRequest'
func (fpaiv *GetHTTPMetricsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetHTTPMetricsRequest) bool {
	slice := fpaiv.GetHTTPMetricsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetHTTPMetricsRequest_FieldSubPathArrayItemValue struct {
	GetHTTPMetricsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetHTTPMetricsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetHTTPMetricsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHTTPMetricsRequest'
func (fpaivs *GetHTTPMetricsRequest_FieldSubPathArrayItemValue) ContainsValue(source *GetHTTPMetricsRequest) bool {
	switch fpaivs.Selector() {
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsRequest: %d", fpaivs.Selector()))
	}
}

// GetHTTPMetricsRequest_FieldPathArrayOfValues allows storing slice of values for GetHTTPMetricsRequest fields according to their type
type GetHTTPMetricsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetHTTPMetricsRequest_FieldPath
}

func ParseGetHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetHTTPMetricsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetHTTPMetricsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetHTTPMetricsRequest_FieldPathArrayOfValues), nil
}

func MustParseGetHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetHTTPMetricsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetHTTPMetricsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues struct {
	GetHTTPMetricsRequest_FieldTerminalPath
	values interface{}
}

var _ GetHTTPMetricsRequest_FieldPathArrayOfValues = (*GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetHTTPMetricsRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetHTTPMetricsRequest_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case GetHTTPMetricsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*common.TimeInterval) {
			values = append(values, v)
		}
	case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*common.TimeInterval)
	return res, ok
}
func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *GetHTTPMetricsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetHTTPMetricsRequest_FieldSubPathArrayOfValues struct {
	GetHTTPMetricsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetHTTPMetricsRequest_FieldPathArrayOfValues = (*GetHTTPMetricsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetHTTPMetricsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetHTTPMetricsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetHTTPMetricsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetHTTPMetricsResponse_FieldPathSelector
	Get(source *GetHTTPMetricsResponse) []interface{}
	GetSingle(source *GetHTTPMetricsResponse) (interface{}, bool)
	ClearValue(item *GetHTTPMetricsResponse)

	// Those methods build corresponding GetHTTPMetricsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetHTTPMetricsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetHTTPMetricsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetHTTPMetricsResponse_FieldPathArrayItemValue
}

type GetHTTPMetricsResponse_FieldPathSelector int32

const (
	GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics   GetHTTPMetricsResponse_FieldPathSelector = 0
	GetHTTPMetricsResponse_FieldPathSelectorNextPageToken GetHTTPMetricsResponse_FieldPathSelector = 1
)

func (s GetHTTPMetricsResponse_FieldPathSelector) String() string {
	switch s {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return "http_metrics"
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", s))
	}
}

func BuildGetHTTPMetricsResponse_FieldPath(fp gotenobject.RawFieldPath) (GetHTTPMetricsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetHTTPMetricsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "http_metrics", "httpMetrics", "http-metrics":
			return &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "http_metrics", "httpMetrics", "http-metrics":
			if subpath, err := BuildGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetHTTPMetricsResponse_FieldSubPath{selector: GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetHTTPMetricsResponse", fp)
}

func ParseGetHTTPMetricsResponse_FieldPath(rawField string) (GetHTTPMetricsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetHTTPMetricsResponse_FieldPath(fp)
}

func MustParseGetHTTPMetricsResponse_FieldPath(rawField string) GetHTTPMetricsResponse_FieldPath {
	fp, err := ParseGetHTTPMetricsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetHTTPMetricsResponse_FieldTerminalPath struct {
	selector GetHTTPMetricsResponse_FieldPathSelector
}

var _ GetHTTPMetricsResponse_FieldPath = (*GetHTTPMetricsResponse_FieldTerminalPath)(nil)

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) Selector() GetHTTPMetricsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetHTTPMetricsResponse
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) Get(source *GetHTTPMetricsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
			for _, value := range source.GetHttpMetrics() {
				values = append(values, value)
			}
		case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetHTTPMetricsResponse))
}

// GetSingle returns value pointed by specific field of from source GetHTTPMetricsResponse
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) GetSingle(source *GetHTTPMetricsResponse) (interface{}, bool) {
	switch fp.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		res := source.GetHttpMetrics()
		return res, res != nil
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetHTTPMetricsResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return ([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)(nil)
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) ClearValue(item *GetHTTPMetricsResponse) {
	if item != nil {
		switch fp.selector {
		case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
			item.HttpMetrics = nil
		case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
		}
	}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetHTTPMetricsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetHTTPMetricsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetHTTPMetricsResponse_FieldPathSelectorNextPageToken
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithIValue(value interface{}) GetHTTPMetricsResponse_FieldPathValue {
	switch fp.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return &GetHTTPMetricsResponse_FieldTerminalPathValue{GetHTTPMetricsResponse_FieldTerminalPath: *fp, value: value.([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)}
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		return &GetHTTPMetricsResponse_FieldTerminalPathValue{GetHTTPMetricsResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsResponse_FieldPathArrayOfValues {
	fpaov := &GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return &GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponse_FieldTerminalPath: *fp, values: values.([][]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)}
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		return &GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return &GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue{GetHTTPMetricsResponse_FieldTerminalPath: *fp, value: value.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetHTTPMetricsResponse_FieldSubPath struct {
	selector GetHTTPMetricsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetHTTPMetricsResponse_FieldPath = (*GetHTTPMetricsResponse_FieldSubPath)(nil)

func (fps *GetHTTPMetricsResponse_FieldSubPath) Selector() GetHTTPMetricsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *GetHTTPMetricsResponse_FieldSubPath) AsHttpMetricsSubPath() (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath, bool) {
	res, ok := fps.subPath.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetHTTPMetricsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetHTTPMetricsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetHTTPMetricsResponse
func (fps *GetHTTPMetricsResponse_FieldSubPath) Get(source *GetHTTPMetricsResponse) (values []interface{}) {
	switch fps.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		for _, item := range source.GetHttpMetrics() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fps.selector))
	}
	return
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetHTTPMetricsResponse))
}

// GetSingle returns value of selected field from source GetHTTPMetricsResponse
func (fps *GetHTTPMetricsResponse_FieldSubPath) GetSingle(source *GetHTTPMetricsResponse) (interface{}, bool) {
	switch fps.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		if len(source.GetHttpMetrics()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpMetrics()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fps.selector))
	}
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetHTTPMetricsResponse))
}

// GetDefault returns a default value of the field type
func (fps *GetHTTPMetricsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) ClearValue(item *GetHTTPMetricsResponse) {
	if item != nil {
		switch fps.selector {
		case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
			for _, subItem := range item.HttpMetrics {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fps.selector))
		}
	}
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetHTTPMetricsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetHTTPMetricsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetHTTPMetricsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithIValue(value interface{}) GetHTTPMetricsResponse_FieldPathValue {
	return &GetHTTPMetricsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsResponse_FieldPathArrayOfValues {
	return &GetHTTPMetricsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsResponse_FieldPathArrayItemValue {
	return &GetHTTPMetricsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetHTTPMetricsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetHTTPMetricsResponse_FieldPathValue allows storing values for GetHTTPMetricsResponse fields according to their type
type GetHTTPMetricsResponse_FieldPathValue interface {
	GetHTTPMetricsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetHTTPMetricsResponse)
	CompareWith(*GetHTTPMetricsResponse) (cmp int, comparable bool)
}

func ParseGetHTTPMetricsResponse_FieldPathValue(pathStr, valueStr string) (GetHTTPMetricsResponse_FieldPathValue, error) {
	fp, err := ParseGetHTTPMetricsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetHTTPMetricsResponse_FieldPathValue), nil
}

func MustParseGetHTTPMetricsResponse_FieldPathValue(pathStr, valueStr string) GetHTTPMetricsResponse_FieldPathValue {
	fpv, err := ParseGetHTTPMetricsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetHTTPMetricsResponse_FieldTerminalPathValue struct {
	GetHTTPMetricsResponse_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsResponse_FieldPathValue = (*GetHTTPMetricsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetHTTPMetricsResponse' as interface{}
func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) AsHttpMetricsValue() ([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair, bool) {
	res, ok := fpv.value.([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	return res, ok
}
func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetHTTPMetricsResponse
func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) SetTo(target **GetHTTPMetricsResponse) {
	if *target == nil {
		*target = new(GetHTTPMetricsResponse)
	}
	switch fpv.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		(*target).HttpMetrics = fpv.value.([]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHTTPMetricsResponse_FieldTerminalPathValue' with the value under path in 'GetHTTPMetricsResponse'.
func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) CompareWith(source *GetHTTPMetricsResponse) (int, bool) {
	switch fpv.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return 0, false
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetHTTPMetricsResponse))
}

type GetHTTPMetricsResponse_FieldSubPathValue struct {
	GetHTTPMetricsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetHTTPMetricsResponse_FieldPathValue = (*GetHTTPMetricsResponse_FieldSubPathValue)(nil)

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) AsHttpMetricsPathValue() (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue)
	return res, ok
}

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) SetTo(target **GetHTTPMetricsResponse) {
	if *target == nil {
		*target = new(GetHTTPMetricsResponse)
	}
	switch fpvs.Selector() {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) CompareWith(source *GetHTTPMetricsResponse) (int, bool) {
	switch fpvs.Selector() {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetHTTPMetricsResponse))
}

// GetHTTPMetricsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetHTTPMetricsResponse according to their type
// Present only for array (repeated) types.
type GetHTTPMetricsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetHTTPMetricsResponse_FieldPath
	ContainsValue(*GetHTTPMetricsResponse) bool
}

// ParseGetHTTPMetricsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetHTTPMetricsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetHTTPMetricsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetHTTPMetricsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetHTTPMetricsResponse_FieldPathArrayItemValue), nil
}

func MustParseGetHTTPMetricsResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetHTTPMetricsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetHTTPMetricsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue struct {
	GetHTTPMetricsResponse_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsResponse_FieldPathArrayItemValue = (*GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetHTTPMetricsResponse as interface{}
func (fpaiv *GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue) AsHttpMetricsItemValue() (*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair, bool) {
	res, ok := fpaiv.value.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	return res, ok
}

func (fpaiv *GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetHTTPMetricsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetHTTPMetricsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHTTPMetricsResponse'
func (fpaiv *GetHTTPMetricsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetHTTPMetricsResponse) bool {
	slice := fpaiv.GetHTTPMetricsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetHTTPMetricsResponse_FieldSubPathArrayItemValue struct {
	GetHTTPMetricsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetHTTPMetricsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetHTTPMetricsResponse_FieldSubPathArrayItemValue) AsHttpMetricsPathItemValue() (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHTTPMetricsResponse'
func (fpaivs *GetHTTPMetricsResponse_FieldSubPathArrayItemValue) ContainsValue(source *GetHTTPMetricsResponse) bool {
	switch fpaivs.Selector() {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse: %d", fpaivs.Selector()))
	}
}

// GetHTTPMetricsResponse_FieldPathArrayOfValues allows storing slice of values for GetHTTPMetricsResponse fields according to their type
type GetHTTPMetricsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetHTTPMetricsResponse_FieldPath
}

func ParseGetHTTPMetricsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetHTTPMetricsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetHTTPMetricsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHTTPMetricsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetHTTPMetricsResponse_FieldPathArrayOfValues), nil
}

func MustParseGetHTTPMetricsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetHTTPMetricsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetHTTPMetricsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues struct {
	GetHTTPMetricsResponse_FieldTerminalPath
	values interface{}
}

var _ GetHTTPMetricsResponse_FieldPathArrayOfValues = (*GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
		for _, v := range fpaov.values.([][]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
			values = append(values, v)
		}
	case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues) AsHttpMetricsArrayOfValues() ([][]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair, bool) {
	res, ok := fpaov.values.([][]*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	return res, ok
}
func (fpaov *GetHTTPMetricsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetHTTPMetricsResponse_FieldSubPathArrayOfValues struct {
	GetHTTPMetricsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetHTTPMetricsResponse_FieldPathArrayOfValues = (*GetHTTPMetricsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetHTTPMetricsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetHTTPMetricsResponse_FieldSubPathArrayOfValues) AsHttpMetricsPathArrayOfValues() (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector
	Get(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) []interface{}
	GetSingle(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (interface{}, bool)
	ClearValue(item *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)

	// Those methods build corresponding GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue
	WithIArrayOfValues(values interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector int32

const (
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe     GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector = 0
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget    GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector = 1
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector = 2
)

func (s GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector) String() string {
	switch s {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		return "probe"
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		return "target"
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return "http_stats"
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", s))
	}
}

func BuildGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(fp gotenobject.RawFieldPath) (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe}, nil
		case "target":
			return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget}, nil
		case "http_stats", "httpStats", "http-stats":
			return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats}, nil
		}
	} else {
		switch fp[0] {
		case "http_stats", "httpStats", "http-stats":
			if subpath, err := BuildHTTPStat_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair", fp)
}

func ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(rawField string) (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(fp)
}

func MustParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(rawField string) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath {
	fp, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath struct {
	selector GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath)(nil)

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) Selector() GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) Get(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
			for _, value := range source.GetHttpStats() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
		}
	}
	return
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// GetSingle returns value pointed by specific field of from source GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) GetSingle(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (interface{}, bool) {
	switch fp.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		res := source.GetHttpStats()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// GetDefault returns a default value of the field type
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return ([]*HTTPStat)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) ClearValue(item *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if item != nil {
		switch fp.selector {
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
			item.Probe = nil
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
			item.Target = nil
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
			item.HttpStats = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
		}
	}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe ||
		fp.selector == GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithIValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue {
	switch fp.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, value: value.([]*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues {
	fpaov := &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, values: values.([][]*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue {
	switch fp.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue{GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath: *fp, value: value.(*HTTPStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fp.selector))
	}
}

func (fp *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath struct {
	selector GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath)(nil)

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) Selector() GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector {
	return fps.selector
}
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) AsHttpStatsSubPath() (HTTPStat_FieldPath, bool) {
	res, ok := fps.subPath.(HTTPStat_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) Get(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (values []interface{}) {
	switch fps.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		for _, item := range source.GetHttpStats() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fps.selector))
	}
	return
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// GetSingle returns value of selected field from source GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) GetSingle(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (interface{}, bool) {
	switch fps.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		if len(source.GetHttpStats()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpStats()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fps.selector))
	}
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// GetDefault returns a default value of the field type
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) ClearValue(item *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if item != nil {
		switch fps.selector {
		case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
			for _, subItem := range item.HttpStats {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fps.selector))
		}
	}
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithIValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue {
	return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithIArrayOfValues(values interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues {
	return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithIArrayItemValue(value interface{}) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue {
	return &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue allows storing values for HTTPMetricsPerAgentTargetPair fields according to their type
type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue interface {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	CompareWith(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (cmp int, comparable bool)
}

func ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue(pathStr, valueStr string) (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue, error) {
	fp, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPMetricsPerAgentTargetPair field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue), nil
}

func MustParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue(pathStr, valueStr string) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue {
	fpv, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'HTTPMetricsPerAgentTargetPair' as interface{}
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) AsHttpStatsValue() ([]*HTTPStat, bool) {
	res, ok := fpv.value.([]*HTTPStat)
	return res, ok
}

// SetTo stores value for selected field for object HTTPMetricsPerAgentTargetPair
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) SetTo(target **GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if *target == nil {
		*target = new(GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	}
	switch fpv.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		(*target).HttpStats = fpv.value.([]*HTTPStat)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue' with the value under path in 'GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair'.
func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) CompareWith(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (int, bool) {
	switch fpv.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fpv.selector))
	}
}

func (fpv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathValue = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue)(nil)

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) AsHttpStatsPathValue() (HTTPStat_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(HTTPStat_FieldPathValue)
	return res, ok
}

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) SetTo(target **GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if *target == nil {
		*target = new(GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	}
	switch fpvs.Selector() {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) CompareWith(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (int, bool) {
	switch fpvs.Selector() {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue allows storing single item in Path-specific values for HTTPMetricsPerAgentTargetPair according to their type
// Present only for array (repeated) types.
type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
	ContainsValue(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) bool
}

// ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue(pathStr, valueStr string) (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue, error) {
	fp, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPMetricsPerAgentTargetPair field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue), nil
}

func MustParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue(pathStr, valueStr string) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue {
	fpaiv, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath
	value interface{}
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayItemValue = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair as interface{}
func (fpaiv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue) AsHttpStatsItemValue() (*HTTPStat, bool) {
	res, ok := fpaiv.value.(*HTTPStat)
	return res, ok
}

func (fpaiv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue) GetSingle(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

// Contains returns a boolean indicating if value that is being held is present in given 'HTTPMetricsPerAgentTargetPair'
func (fpaiv *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayItemValue) ContainsValue(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) bool {
	slice := fpaiv.GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayItemValue struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayItemValue) AsHttpStatsPathItemValue() (HTTPStat_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(HTTPStat_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'HTTPMetricsPerAgentTargetPair'
func (fpaivs *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayItemValue) ContainsValue(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) bool {
	switch fpaivs.Selector() {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair: %d", fpaivs.Selector()))
	}
}

// GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues allows storing slice of values for HTTPMetricsPerAgentTargetPair fields according to their type
type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
}

func ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues(pathStr, valuesStr string) (GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues, error) {
	fp, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPMetricsPerAgentTargetPair field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues), nil
}

func MustParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues(pathStr, valuesStr string) GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues {
	fpaov, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath
	values interface{}
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
		for _, v := range fpaov.values.([][]*HTTPStat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPathArrayOfValues) AsHttpStatsArrayOfValues() ([][]*HTTPStat, bool) {
	res, ok := fpaov.values.([][]*HTTPStat)
	return res, ok
}

type GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayOfValues struct {
	GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathArrayOfValues = (*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPathArrayOfValues) AsHttpStatsPathArrayOfValues() (HTTPStat_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(HTTPStat_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type HTTPStat_FieldPath interface {
	gotenobject.FieldPath
	Selector() HTTPStat_FieldPathSelector
	Get(source *HTTPStat) []interface{}
	GetSingle(source *HTTPStat) (interface{}, bool)
	ClearValue(item *HTTPStat)

	// Those methods build corresponding HTTPStat_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) HTTPStat_FieldPathValue
	WithIArrayOfValues(values interface{}) HTTPStat_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) HTTPStat_FieldPathArrayItemValue
}

type HTTPStat_FieldPathSelector int32

const (
	HTTPStat_FieldPathSelectorDnsLookupTime        HTTPStat_FieldPathSelector = 0
	HTTPStat_FieldPathSelectorTcpConnectTime       HTTPStat_FieldPathSelector = 1
	HTTPStat_FieldPathSelectorTlsHandshakeTime     HTTPStat_FieldPathSelector = 2
	HTTPStat_FieldPathSelectorRequestSendTime      HTTPStat_FieldPathSelector = 3
	HTTPStat_FieldPathSelectorTimeToFirstByte      HTTPStat_FieldPathSelector = 4
	HTTPStat_FieldPathSelectorTtfbAfterRequestSend HTTPStat_FieldPathSelector = 5
	HTTPStat_FieldPathSelectorContentDownloadTime  HTTPStat_FieldPathSelector = 6
	HTTPStat_FieldPathSelectorTotalResponseTime    HTTPStat_FieldPathSelector = 7
	HTTPStat_FieldPathSelectorResponseCode         HTTPStat_FieldPathSelector = 8
	HTTPStat_FieldPathSelectorServerIpAddress      HTTPStat_FieldPathSelector = 9
	HTTPStat_FieldPathSelectorIpVersion            HTTPStat_FieldPathSelector = 10
	HTTPStat_FieldPathSelectorFailedStage          HTTPStat_FieldPathSelector = 11
	HTTPStat_FieldPathSelectorTime                 HTTPStat_FieldPathSelector = 12
	HTTPStat_FieldPathSelectorTarget               HTTPStat_FieldPathSelector = 13
)

func (s HTTPStat_FieldPathSelector) String() string {
	switch s {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		return "dns_lookup_time"
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		return "tcp_connect_time"
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		return "tls_handshake_time"
	case HTTPStat_FieldPathSelectorRequestSendTime:
		return "request_send_time"
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		return "time_to_first_byte"
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		return "ttfb_after_request_send"
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		return "content_download_time"
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		return "total_response_time"
	case HTTPStat_FieldPathSelectorResponseCode:
		return "response_code"
	case HTTPStat_FieldPathSelectorServerIpAddress:
		return "server_ip_address"
	case HTTPStat_FieldPathSelectorIpVersion:
		return "ip_version"
	case HTTPStat_FieldPathSelectorFailedStage:
		return "failed_stage"
	case HTTPStat_FieldPathSelectorTime:
		return "time"
	case HTTPStat_FieldPathSelectorTarget:
		return "target"
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", s))
	}
}

func BuildHTTPStat_FieldPath(fp gotenobject.RawFieldPath) (HTTPStat_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object HTTPStat")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "dns_lookup_time", "dnsLookupTime", "dns-lookup-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorDnsLookupTime}, nil
		case "tcp_connect_time", "tcpConnectTime", "tcp-connect-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTcpConnectTime}, nil
		case "tls_handshake_time", "tlsHandshakeTime", "tls-handshake-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTlsHandshakeTime}, nil
		case "request_send_time", "requestSendTime", "request-send-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorRequestSendTime}, nil
		case "time_to_first_byte", "timeToFirstByte", "time-to-first-byte":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTimeToFirstByte}, nil
		case "ttfb_after_request_send", "ttfbAfterRequestSend", "ttfb-after-request-send":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTtfbAfterRequestSend}, nil
		case "content_download_time", "contentDownloadTime", "content-download-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorContentDownloadTime}, nil
		case "total_response_time", "totalResponseTime", "total-response-time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTotalResponseTime}, nil
		case "response_code", "responseCode", "response-code":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorResponseCode}, nil
		case "server_ip_address", "serverIpAddress", "server-ip-address":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorServerIpAddress}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorIpVersion}, nil
		case "failed_stage", "failedStage", "failed-stage":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorFailedStage}, nil
		case "time":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTime}, nil
		case "target":
			return &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTarget}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object HTTPStat", fp)
}

func ParseHTTPStat_FieldPath(rawField string) (HTTPStat_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildHTTPStat_FieldPath(fp)
}

func MustParseHTTPStat_FieldPath(rawField string) HTTPStat_FieldPath {
	fp, err := ParseHTTPStat_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type HTTPStat_FieldTerminalPath struct {
	selector HTTPStat_FieldPathSelector
}

var _ HTTPStat_FieldPath = (*HTTPStat_FieldTerminalPath)(nil)

func (fp *HTTPStat_FieldTerminalPath) Selector() HTTPStat_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *HTTPStat_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *HTTPStat_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source HTTPStat
func (fp *HTTPStat_FieldTerminalPath) Get(source *HTTPStat) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case HTTPStat_FieldPathSelectorDnsLookupTime:
			values = append(values, source.DnsLookupTime)
		case HTTPStat_FieldPathSelectorTcpConnectTime:
			values = append(values, source.TcpConnectTime)
		case HTTPStat_FieldPathSelectorTlsHandshakeTime:
			values = append(values, source.TlsHandshakeTime)
		case HTTPStat_FieldPathSelectorRequestSendTime:
			values = append(values, source.RequestSendTime)
		case HTTPStat_FieldPathSelectorTimeToFirstByte:
			values = append(values, source.TimeToFirstByte)
		case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
			values = append(values, source.TtfbAfterRequestSend)
		case HTTPStat_FieldPathSelectorContentDownloadTime:
			values = append(values, source.ContentDownloadTime)
		case HTTPStat_FieldPathSelectorTotalResponseTime:
			values = append(values, source.TotalResponseTime)
		case HTTPStat_FieldPathSelectorResponseCode:
			values = append(values, source.ResponseCode)
		case HTTPStat_FieldPathSelectorServerIpAddress:
			values = append(values, source.ServerIpAddress)
		case HTTPStat_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case HTTPStat_FieldPathSelectorFailedStage:
			values = append(values, source.FailedStage)
		case HTTPStat_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case HTTPStat_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
		}
	}
	return
}

func (fp *HTTPStat_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*HTTPStat))
}

// GetSingle returns value pointed by specific field of from source HTTPStat
func (fp *HTTPStat_FieldTerminalPath) GetSingle(source *HTTPStat) (interface{}, bool) {
	switch fp.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		return source.GetDnsLookupTime(), source != nil
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		return source.GetTcpConnectTime(), source != nil
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		return source.GetTlsHandshakeTime(), source != nil
	case HTTPStat_FieldPathSelectorRequestSendTime:
		return source.GetRequestSendTime(), source != nil
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		return source.GetTimeToFirstByte(), source != nil
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		return source.GetTtfbAfterRequestSend(), source != nil
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		return source.GetContentDownloadTime(), source != nil
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		return source.GetTotalResponseTime(), source != nil
	case HTTPStat_FieldPathSelectorResponseCode:
		return source.GetResponseCode(), source != nil
	case HTTPStat_FieldPathSelectorServerIpAddress:
		return source.GetServerIpAddress(), source != nil
	case HTTPStat_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case HTTPStat_FieldPathSelectorFailedStage:
		return source.GetFailedStage(), source != nil
	case HTTPStat_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case HTTPStat_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
	}
}

func (fp *HTTPStat_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*HTTPStat))
}

// GetDefault returns a default value of the field type
func (fp *HTTPStat_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorRequestSendTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		return float64(0)
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		return float64(0)
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		return float64(0)
	case HTTPStat_FieldPathSelectorResponseCode:
		return int32(0)
	case HTTPStat_FieldPathSelectorServerIpAddress:
		return ""
	case HTTPStat_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case HTTPStat_FieldPathSelectorFailedStage:
		return HTTPStat_no_failure
	case HTTPStat_FieldPathSelectorTime:
		return (*timestamp.Timestamp)(nil)
	case HTTPStat_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
	}
}

func (fp *HTTPStat_FieldTerminalPath) ClearValue(item *HTTPStat) {
	if item != nil {
		switch fp.selector {
		case HTTPStat_FieldPathSelectorDnsLookupTime:
			item.DnsLookupTime = float64(0)
		case HTTPStat_FieldPathSelectorTcpConnectTime:
			item.TcpConnectTime = float64(0)
		case HTTPStat_FieldPathSelectorTlsHandshakeTime:
			item.TlsHandshakeTime = float64(0)
		case HTTPStat_FieldPathSelectorRequestSendTime:
			item.RequestSendTime = float64(0)
		case HTTPStat_FieldPathSelectorTimeToFirstByte:
			item.TimeToFirstByte = float64(0)
		case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
			item.TtfbAfterRequestSend = float64(0)
		case HTTPStat_FieldPathSelectorContentDownloadTime:
			item.ContentDownloadTime = float64(0)
		case HTTPStat_FieldPathSelectorTotalResponseTime:
			item.TotalResponseTime = float64(0)
		case HTTPStat_FieldPathSelectorResponseCode:
			item.ResponseCode = int32(0)
		case HTTPStat_FieldPathSelectorServerIpAddress:
			item.ServerIpAddress = ""
		case HTTPStat_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case HTTPStat_FieldPathSelectorFailedStage:
			item.FailedStage = HTTPStat_no_failure
		case HTTPStat_FieldPathSelectorTime:
			item.Time = nil
		case HTTPStat_FieldPathSelectorTarget:
			item.Target = nil
		default:
			panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
		}
	}
}

func (fp *HTTPStat_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*HTTPStat))
}

// IsLeaf - whether field path is holds simple value
func (fp *HTTPStat_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == HTTPStat_FieldPathSelectorDnsLookupTime ||
		fp.selector == HTTPStat_FieldPathSelectorTcpConnectTime ||
		fp.selector == HTTPStat_FieldPathSelectorTlsHandshakeTime ||
		fp.selector == HTTPStat_FieldPathSelectorRequestSendTime ||
		fp.selector == HTTPStat_FieldPathSelectorTimeToFirstByte ||
		fp.selector == HTTPStat_FieldPathSelectorTtfbAfterRequestSend ||
		fp.selector == HTTPStat_FieldPathSelectorContentDownloadTime ||
		fp.selector == HTTPStat_FieldPathSelectorTotalResponseTime ||
		fp.selector == HTTPStat_FieldPathSelectorResponseCode ||
		fp.selector == HTTPStat_FieldPathSelectorServerIpAddress ||
		fp.selector == HTTPStat_FieldPathSelectorIpVersion ||
		fp.selector == HTTPStat_FieldPathSelectorFailedStage ||
		fp.selector == HTTPStat_FieldPathSelectorTime ||
		fp.selector == HTTPStat_FieldPathSelectorTarget
}

func (fp *HTTPStat_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *HTTPStat_FieldTerminalPath) WithIValue(value interface{}) HTTPStat_FieldPathValue {
	switch fp.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorRequestSendTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(float64)}
	case HTTPStat_FieldPathSelectorResponseCode:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(int32)}
	case HTTPStat_FieldPathSelectorServerIpAddress:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(string)}
	case HTTPStat_FieldPathSelectorIpVersion:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case HTTPStat_FieldPathSelectorFailedStage:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(HTTPStat_FailedStage)}
	case HTTPStat_FieldPathSelectorTime:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case HTTPStat_FieldPathSelectorTarget:
		return &HTTPStat_FieldTerminalPathValue{HTTPStat_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
	}
}

func (fp *HTTPStat_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *HTTPStat_FieldTerminalPath) WithIArrayOfValues(values interface{}) HTTPStat_FieldPathArrayOfValues {
	fpaov := &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp}
	switch fp.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorRequestSendTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]float64)}
	case HTTPStat_FieldPathSelectorResponseCode:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]int32)}
	case HTTPStat_FieldPathSelectorServerIpAddress:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]string)}
	case HTTPStat_FieldPathSelectorIpVersion:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case HTTPStat_FieldPathSelectorFailedStage:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]HTTPStat_FailedStage)}
	case HTTPStat_FieldPathSelectorTime:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case HTTPStat_FieldPathSelectorTarget:
		return &HTTPStat_FieldTerminalPathArrayOfValues{HTTPStat_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
	}
	return fpaov
}

func (fp *HTTPStat_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *HTTPStat_FieldTerminalPath) WithIArrayItemValue(value interface{}) HTTPStat_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fp.selector))
	}
}

func (fp *HTTPStat_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// HTTPStat_FieldPathValue allows storing values for HTTPStat fields according to their type
type HTTPStat_FieldPathValue interface {
	HTTPStat_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **HTTPStat)
	CompareWith(*HTTPStat) (cmp int, comparable bool)
}

func ParseHTTPStat_FieldPathValue(pathStr, valueStr string) (HTTPStat_FieldPathValue, error) {
	fp, err := ParseHTTPStat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPStat field path value from %s: %v", valueStr, err)
	}
	return fpv.(HTTPStat_FieldPathValue), nil
}

func MustParseHTTPStat_FieldPathValue(pathStr, valueStr string) HTTPStat_FieldPathValue {
	fpv, err := ParseHTTPStat_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type HTTPStat_FieldTerminalPathValue struct {
	HTTPStat_FieldTerminalPath
	value interface{}
}

var _ HTTPStat_FieldPathValue = (*HTTPStat_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'HTTPStat' as interface{}
func (fpv *HTTPStat_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsDnsLookupTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTcpConnectTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTlsHandshakeTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsRequestSendTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTimeToFirstByteValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTtfbAfterRequestSendValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsContentDownloadTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTotalResponseTimeValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsResponseCodeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsServerIpAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsFailedStageValue() (HTTPStat_FailedStage, bool) {
	res, ok := fpv.value.(HTTPStat_FailedStage)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *HTTPStat_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}

// SetTo stores value for selected field for object HTTPStat
func (fpv *HTTPStat_FieldTerminalPathValue) SetTo(target **HTTPStat) {
	if *target == nil {
		*target = new(HTTPStat)
	}
	switch fpv.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		(*target).DnsLookupTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		(*target).TcpConnectTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		(*target).TlsHandshakeTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorRequestSendTime:
		(*target).RequestSendTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		(*target).TimeToFirstByte = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		(*target).TtfbAfterRequestSend = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		(*target).ContentDownloadTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		(*target).TotalResponseTime = fpv.value.(float64)
	case HTTPStat_FieldPathSelectorResponseCode:
		(*target).ResponseCode = fpv.value.(int32)
	case HTTPStat_FieldPathSelectorServerIpAddress:
		(*target).ServerIpAddress = fpv.value.(string)
	case HTTPStat_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case HTTPStat_FieldPathSelectorFailedStage:
		(*target).FailedStage = fpv.value.(HTTPStat_FailedStage)
	case HTTPStat_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamp.Timestamp)
	case HTTPStat_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fpv.selector))
	}
}

func (fpv *HTTPStat_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*HTTPStat)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'HTTPStat_FieldTerminalPathValue' with the value under path in 'HTTPStat'.
func (fpv *HTTPStat_FieldTerminalPathValue) CompareWith(source *HTTPStat) (int, bool) {
	switch fpv.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetDnsLookupTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetTcpConnectTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetTlsHandshakeTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorRequestSendTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetRequestSendTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		leftValue := fpv.value.(float64)
		rightValue := source.GetTimeToFirstByte()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		leftValue := fpv.value.(float64)
		rightValue := source.GetTtfbAfterRequestSend()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetContentDownloadTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		leftValue := fpv.value.(float64)
		rightValue := source.GetTotalResponseTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorResponseCode:
		leftValue := fpv.value.(int32)
		rightValue := source.GetResponseCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorServerIpAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetServerIpAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorFailedStage:
		leftValue := fpv.value.(HTTPStat_FailedStage)
		rightValue := source.GetFailedStage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case HTTPStat_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for HTTPStat: %d", fpv.selector))
	}
}

func (fpv *HTTPStat_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*HTTPStat))
}

// HTTPStat_FieldPathArrayItemValue allows storing single item in Path-specific values for HTTPStat according to their type
// Present only for array (repeated) types.
type HTTPStat_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	HTTPStat_FieldPath
	ContainsValue(*HTTPStat) bool
}

// ParseHTTPStat_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseHTTPStat_FieldPathArrayItemValue(pathStr, valueStr string) (HTTPStat_FieldPathArrayItemValue, error) {
	fp, err := ParseHTTPStat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPStat field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(HTTPStat_FieldPathArrayItemValue), nil
}

func MustParseHTTPStat_FieldPathArrayItemValue(pathStr, valueStr string) HTTPStat_FieldPathArrayItemValue {
	fpaiv, err := ParseHTTPStat_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type HTTPStat_FieldTerminalPathArrayItemValue struct {
	HTTPStat_FieldTerminalPath
	value interface{}
}

var _ HTTPStat_FieldPathArrayItemValue = (*HTTPStat_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object HTTPStat as interface{}
func (fpaiv *HTTPStat_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *HTTPStat_FieldTerminalPathArrayItemValue) GetSingle(source *HTTPStat) (interface{}, bool) {
	return nil, false
}

func (fpaiv *HTTPStat_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*HTTPStat))
}

// Contains returns a boolean indicating if value that is being held is present in given 'HTTPStat'
func (fpaiv *HTTPStat_FieldTerminalPathArrayItemValue) ContainsValue(source *HTTPStat) bool {
	slice := fpaiv.HTTPStat_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// HTTPStat_FieldPathArrayOfValues allows storing slice of values for HTTPStat fields according to their type
type HTTPStat_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	HTTPStat_FieldPath
}

func ParseHTTPStat_FieldPathArrayOfValues(pathStr, valuesStr string) (HTTPStat_FieldPathArrayOfValues, error) {
	fp, err := ParseHTTPStat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HTTPStat field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(HTTPStat_FieldPathArrayOfValues), nil
}

func MustParseHTTPStat_FieldPathArrayOfValues(pathStr, valuesStr string) HTTPStat_FieldPathArrayOfValues {
	fpaov, err := ParseHTTPStat_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type HTTPStat_FieldTerminalPathArrayOfValues struct {
	HTTPStat_FieldTerminalPath
	values interface{}
}

var _ HTTPStat_FieldPathArrayOfValues = (*HTTPStat_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case HTTPStat_FieldPathSelectorDnsLookupTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTcpConnectTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTlsHandshakeTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorRequestSendTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTimeToFirstByte:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTtfbAfterRequestSend:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorContentDownloadTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTotalResponseTime:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorResponseCode:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorServerIpAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorFailedStage:
		for _, v := range fpaov.values.([]HTTPStat_FailedStage) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case HTTPStat_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsDnsLookupTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTcpConnectTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTlsHandshakeTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsRequestSendTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTimeToFirstByteArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTtfbAfterRequestSendArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsContentDownloadTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTotalResponseTimeArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsResponseCodeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsServerIpAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsFailedStageArrayOfValues() ([]HTTPStat_FailedStage, bool) {
	res, ok := fpaov.values.([]HTTPStat_FailedStage)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *HTTPStat_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
