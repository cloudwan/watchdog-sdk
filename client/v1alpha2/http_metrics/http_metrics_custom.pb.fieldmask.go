// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_metrics_custom.proto
// DO NOT EDIT!!!

package http_metrics_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

type ReportHTTPMetricsRequest_FieldMask struct {
	Paths []ReportHTTPMetricsRequest_FieldPath
}

func FullReportHTTPMetricsRequest_FieldMask() *ReportHTTPMetricsRequest_FieldMask {
	res := &ReportHTTPMetricsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ReportHTTPMetricsRequest_FieldTerminalPath{selector: ReportHTTPMetricsRequest_FieldPathSelectorHttpStats})
	return res
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ReportHTTPMetricsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseReportHTTPMetricsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ReportHTTPMetricsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseReportHTTPMetricsRequest_FieldPath(raw)
	})
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Subtract(other *ReportHTTPMetricsRequest_FieldMask) *ReportHTTPMetricsRequest_FieldMask {
	result := &ReportHTTPMetricsRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ReportHTTPMetricsRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportHTTPMetricsRequest_FieldPathSelectorHttpStats: &HTTPStat_FieldMask{},
	}
	mySubMasks := map[ReportHTTPMetricsRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportHTTPMetricsRequest_FieldPathSelectorHttpStats: &HTTPStat_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ReportHTTPMetricsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ReportHTTPMetricsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ReportHTTPMetricsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
						mySubMasks[ReportHTTPMetricsRequest_FieldPathSelectorHttpStats] = FullHTTPStat_FieldMask()
					}
				} else if tp, ok := path.(*ReportHTTPMetricsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ReportHTTPMetricsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ReportHTTPMetricsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ReportHTTPMetricsRequest_FieldMask) FilterInputFields() *ReportHTTPMetricsRequest_FieldMask {
	result := &ReportHTTPMetricsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ReportHTTPMetricsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ReportHTTPMetricsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseReportHTTPMetricsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ReportHTTPMetricsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ReportHTTPMetricsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) AppendPath(path ReportHTTPMetricsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ReportHTTPMetricsRequest_FieldPath))
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) GetPaths() []ReportHTTPMetricsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseReportHTTPMetricsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Set(target, source *ReportHTTPMetricsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ReportHTTPMetricsRequest), source.(*ReportHTTPMetricsRequest))
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) Project(source *ReportHTTPMetricsRequest) *ReportHTTPMetricsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ReportHTTPMetricsRequest{}
	httpStatsMask := &HTTPStat_FieldMask{}
	wholeHttpStatsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ReportHTTPMetricsRequest_FieldTerminalPath:
			switch tp.selector {
			case ReportHTTPMetricsRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
				result.HttpStats = source.HttpStats
				wholeHttpStatsAccepted = true
			}
		case *ReportHTTPMetricsRequest_FieldSubPath:
			switch tp.selector {
			case ReportHTTPMetricsRequest_FieldPathSelectorHttpStats:
				httpStatsMask.AppendPath(tp.subPath.(HTTPStat_FieldPath))
			}
		}
	}
	if wholeHttpStatsAccepted == false && len(httpStatsMask.Paths) > 0 {
		for _, sourceItem := range source.GetHttpStats() {
			result.HttpStats = append(result.HttpStats, httpStatsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ReportHTTPMetricsRequest))
}

func (fieldMask *ReportHTTPMetricsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetHTTPMetricsRequest_FieldMask struct {
	Paths []GetHTTPMetricsRequest_FieldPath
}

func FullGetHTTPMetricsRequest_FieldMask() *GetHTTPMetricsRequest_FieldMask {
	res := &GetHTTPMetricsRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &GetHTTPMetricsRequest_FieldTerminalPath{selector: GetHTTPMetricsRequest_FieldPathSelectorPageToken})
	return res
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetHTTPMetricsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetHTTPMetricsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetHTTPMetricsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetHTTPMetricsRequest_FieldPath(raw)
	})
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Subtract(other *GetHTTPMetricsRequest_FieldMask) *GetHTTPMetricsRequest_FieldMask {
	result := &GetHTTPMetricsRequest_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[GetHTTPMetricsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}
	mySubMasks := map[GetHTTPMetricsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetHTTPMetricsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetHTTPMetricsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetHTTPMetricsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case GetHTTPMetricsRequest_FieldPathSelectorInterval:
						mySubMasks[GetHTTPMetricsRequest_FieldPathSelectorInterval] = common.FullTimeInterval_FieldMask()
					}
				} else if tp, ok := path.(*GetHTTPMetricsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetHTTPMetricsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetHTTPMetricsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetHTTPMetricsRequest_FieldMask) FilterInputFields() *GetHTTPMetricsRequest_FieldMask {
	result := &GetHTTPMetricsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetHTTPMetricsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetHTTPMetricsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetHTTPMetricsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetHTTPMetricsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetHTTPMetricsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) AppendPath(path GetHTTPMetricsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetHTTPMetricsRequest_FieldPath))
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) GetPaths() []GetHTTPMetricsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetHTTPMetricsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Set(target, source *GetHTTPMetricsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetHTTPMetricsRequest), source.(*GetHTTPMetricsRequest))
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) Project(source *GetHTTPMetricsRequest) *GetHTTPMetricsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetHTTPMetricsRequest{}
	intervalMask := &common.TimeInterval_FieldMask{}
	wholeIntervalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetHTTPMetricsRequest_FieldTerminalPath:
			switch tp.selector {
			case GetHTTPMetricsRequest_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case GetHTTPMetricsRequest_FieldPathSelectorTarget:
				result.Target = source.Target
			case GetHTTPMetricsRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
				wholeIntervalAccepted = true
			case GetHTTPMetricsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case GetHTTPMetricsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			}
		case *GetHTTPMetricsRequest_FieldSubPath:
			switch tp.selector {
			case GetHTTPMetricsRequest_FieldPathSelectorInterval:
				intervalMask.AppendPath(tp.subPath.(common.TimeInterval_FieldPath))
			}
		}
	}
	if wholeIntervalAccepted == false && len(intervalMask.Paths) > 0 {
		result.Interval = intervalMask.Project(source.GetInterval())
	}
	return result
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetHTTPMetricsRequest))
}

func (fieldMask *GetHTTPMetricsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetHTTPMetricsResponse_FieldMask struct {
	Paths []GetHTTPMetricsResponse_FieldPath
}

func FullGetHTTPMetricsResponse_FieldMask() *GetHTTPMetricsResponse_FieldMask {
	res := &GetHTTPMetricsResponse_FieldMask{}
	res.Paths = append(res.Paths, &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics})
	res.Paths = append(res.Paths, &GetHTTPMetricsResponse_FieldTerminalPath{selector: GetHTTPMetricsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetHTTPMetricsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetHTTPMetricsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetHTTPMetricsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetHTTPMetricsResponse_FieldPath(raw)
	})
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Subtract(other *GetHTTPMetricsResponse_FieldMask) *GetHTTPMetricsResponse_FieldMask {
	result := &GetHTTPMetricsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[GetHTTPMetricsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics: &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{},
	}
	mySubMasks := map[GetHTTPMetricsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics: &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetHTTPMetricsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetHTTPMetricsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetHTTPMetricsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
						mySubMasks[GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics] = FullGetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask()
					}
				} else if tp, ok := path.(*GetHTTPMetricsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetHTTPMetricsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetHTTPMetricsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetHTTPMetricsResponse_FieldMask) FilterInputFields() *GetHTTPMetricsResponse_FieldMask {
	result := &GetHTTPMetricsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetHTTPMetricsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetHTTPMetricsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetHTTPMetricsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetHTTPMetricsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetHTTPMetricsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) AppendPath(path GetHTTPMetricsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetHTTPMetricsResponse_FieldPath))
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) GetPaths() []GetHTTPMetricsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetHTTPMetricsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Set(target, source *GetHTTPMetricsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetHTTPMetricsResponse), source.(*GetHTTPMetricsResponse))
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) Project(source *GetHTTPMetricsResponse) *GetHTTPMetricsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetHTTPMetricsResponse{}
	httpMetricsMask := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	wholeHttpMetricsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetHTTPMetricsResponse_FieldTerminalPath:
			switch tp.selector {
			case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
				result.HttpMetrics = source.HttpMetrics
				wholeHttpMetricsAccepted = true
			case GetHTTPMetricsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *GetHTTPMetricsResponse_FieldSubPath:
			switch tp.selector {
			case GetHTTPMetricsResponse_FieldPathSelectorHttpMetrics:
				httpMetricsMask.AppendPath(tp.subPath.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath))
			}
		}
	}
	if wholeHttpMetricsAccepted == false && len(httpMetricsMask.Paths) > 0 {
		for _, sourceItem := range source.GetHttpMetrics() {
			result.HttpMetrics = append(result.HttpMetrics, httpMetricsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetHTTPMetricsResponse))
}

func (fieldMask *GetHTTPMetricsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask struct {
	Paths []GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath
}

func FullGetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask() *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask {
	res := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath{selector: GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats})
	return res
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(raw)
	})
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) ProtoMessage() {}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Subtract(other *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask {
	result := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats: &HTTPStat_FieldMask{},
	}
	mySubMasks := map[GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelector]gotenobject.FieldMask{
		GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats: &HTTPStat_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath); ok {
					switch tp.selector {
					case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
						mySubMasks[GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats] = FullHTTPStat_FieldMask()
					}
				} else if tp, ok := path.(*GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) FilterInputFields() *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask {
	result := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) AppendPath(path GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath))
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) GetPaths() []GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Set(target, source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair), source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) Project(source *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair{}
	httpStatsMask := &HTTPStat_FieldMask{}
	wholeHttpStatsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldTerminalPath:
			switch tp.selector {
			case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorTarget:
				result.Target = source.Target
			case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
				result.HttpStats = source.HttpStats
				wholeHttpStatsAccepted = true
			}
		case *GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldSubPath:
			switch tp.selector {
			case GetHTTPMetricsResponseHTTPMetricsPerAgentTargetPair_FieldPathSelectorHttpStats:
				httpStatsMask.AppendPath(tp.subPath.(HTTPStat_FieldPath))
			}
		}
	}
	if wholeHttpStatsAccepted == false && len(httpStatsMask.Paths) > 0 {
		for _, sourceItem := range source.GetHttpStats() {
			result.HttpStats = append(result.HttpStats, httpStatsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair))
}

func (fieldMask *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HTTPStat_FieldMask struct {
	Paths []HTTPStat_FieldPath
}

func FullHTTPStat_FieldMask() *HTTPStat_FieldMask {
	res := &HTTPStat_FieldMask{}
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorDnsLookupTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTcpConnectTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTlsHandshakeTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorRequestSendTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTimeToFirstByte})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorContentDownloadTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTotalResponseTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorResponseCode})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorServerIpAddress})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorIpVersion})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorFailedStage})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTime})
	res.Paths = append(res.Paths, &HTTPStat_FieldTerminalPath{selector: HTTPStat_FieldPathSelectorTarget})
	return res
}

func (fieldMask *HTTPStat_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HTTPStat_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HTTPStat_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHTTPStat_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HTTPStat_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 13)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HTTPStat_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HTTPStat_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHTTPStat_FieldPath(raw)
	})
}

func (fieldMask *HTTPStat_FieldMask) ProtoMessage() {}

func (fieldMask *HTTPStat_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HTTPStat_FieldMask) Subtract(other *HTTPStat_FieldMask) *HTTPStat_FieldMask {
	result := &HTTPStat_FieldMask{}
	removedSelectors := make([]bool, 13)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HTTPStat_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HTTPStat_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HTTPStat_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HTTPStat_FieldMask) FilterInputFields() *HTTPStat_FieldMask {
	result := &HTTPStat_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HTTPStat_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HTTPStat_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HTTPStat_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHTTPStat_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HTTPStat_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HTTPStat_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPStat_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HTTPStat_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HTTPStat_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPStat_FieldMask) AppendPath(path HTTPStat_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HTTPStat_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HTTPStat_FieldPath))
}

func (fieldMask *HTTPStat_FieldMask) GetPaths() []HTTPStat_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HTTPStat_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HTTPStat_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHTTPStat_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HTTPStat_FieldMask) Set(target, source *HTTPStat) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HTTPStat_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HTTPStat), source.(*HTTPStat))
}

func (fieldMask *HTTPStat_FieldMask) Project(source *HTTPStat) *HTTPStat {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HTTPStat{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HTTPStat_FieldTerminalPath:
			switch tp.selector {
			case HTTPStat_FieldPathSelectorDnsLookupTime:
				result.DnsLookupTime = source.DnsLookupTime
			case HTTPStat_FieldPathSelectorTcpConnectTime:
				result.TcpConnectTime = source.TcpConnectTime
			case HTTPStat_FieldPathSelectorTlsHandshakeTime:
				result.TlsHandshakeTime = source.TlsHandshakeTime
			case HTTPStat_FieldPathSelectorRequestSendTime:
				result.RequestSendTime = source.RequestSendTime
			case HTTPStat_FieldPathSelectorTimeToFirstByte:
				result.TimeToFirstByte = source.TimeToFirstByte
			case HTTPStat_FieldPathSelectorContentDownloadTime:
				result.ContentDownloadTime = source.ContentDownloadTime
			case HTTPStat_FieldPathSelectorTotalResponseTime:
				result.TotalResponseTime = source.TotalResponseTime
			case HTTPStat_FieldPathSelectorResponseCode:
				result.ResponseCode = source.ResponseCode
			case HTTPStat_FieldPathSelectorServerIpAddress:
				result.ServerIpAddress = source.ServerIpAddress
			case HTTPStat_FieldPathSelectorIpVersion:
				result.IpVersion = source.IpVersion
			case HTTPStat_FieldPathSelectorFailedStage:
				result.FailedStage = source.FailedStage
			case HTTPStat_FieldPathSelectorTime:
				result.Time = source.Time
			case HTTPStat_FieldPathSelectorTarget:
				result.Target = source.Target
			}
		}
	}
	return result
}

func (fieldMask *HTTPStat_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HTTPStat))
}

func (fieldMask *HTTPStat_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
