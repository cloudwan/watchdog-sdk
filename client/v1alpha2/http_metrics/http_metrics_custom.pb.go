// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/http_metrics_custom.proto
// DO NOT EDIT!!!

package http_metrics_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPStat_FailedStage int32

const (
	HTTPStat_no_failure                 HTTPStat_FailedStage = 0
	HTTPStat_dns_failed                 HTTPStat_FailedStage = 1
	HTTPStat_tcp_connect_failed         HTTPStat_FailedStage = 2
	HTTPStat_proxy_connect_failed       HTTPStat_FailedStage = 9
	HTTPStat_tls_handshake_failed       HTTPStat_FailedStage = 3
	HTTPStat_request_send_failed        HTTPStat_FailedStage = 4
	HTTPStat_first_byte_response_failed HTTPStat_FailedStage = 5
	HTTPStat_response_timeout           HTTPStat_FailedStage = 6
	// completed within timeout
	HTTPStat_response_failed      HTTPStat_FailedStage = 7
	HTTPStat_response_code_failed HTTPStat_FailedStage = 8
)

var (
	HTTPStat_FailedStage_name = map[int32]string{
		0: "no_failure",
		1: "dns_failed",
		2: "tcp_connect_failed",
		9: "proxy_connect_failed",
		3: "tls_handshake_failed",
		4: "request_send_failed",
		5: "first_byte_response_failed",
		6: "response_timeout",
		7: "response_failed",
		8: "response_code_failed",
	}

	HTTPStat_FailedStage_value = map[string]int32{
		"no_failure":                 0,
		"dns_failed":                 1,
		"tcp_connect_failed":         2,
		"proxy_connect_failed":       9,
		"tls_handshake_failed":       3,
		"request_send_failed":        4,
		"first_byte_response_failed": 5,
		"response_timeout":           6,
		"response_failed":            7,
		"response_code_failed":       8,
	}
)

func (x HTTPStat_FailedStage) Enum() *HTTPStat_FailedStage {
	p := new(HTTPStat_FailedStage)
	*p = x
	return p
}

func (x HTTPStat_FailedStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (HTTPStat_FailedStage) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_enumTypes[0].Descriptor()
}

func (HTTPStat_FailedStage) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_http_metrics_custom_proto_enumTypes[0]
}

func (x HTTPStat_FailedStage) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use HTTPStat_FailedStage.ProtoReflect.Descriptor instead.
func (HTTPStat_FailedStage) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{3, 0}
}

// Request message for method
// [ReportHTTPMetrics][ntt.watchdog.v1alpha2.ReportHTTPMetrics]
type ReportHTTPMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	Name      *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	HttpStats []*HTTPStat      `protobuf:"bytes,3,rep,name=http_stats,json=httpStats,proto3" json:"http_stats,omitempty" firestore:"httpStats"`
}

func (m *ReportHTTPMetricsRequest) Reset() {
	*m = ReportHTTPMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportHTTPMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportHTTPMetricsRequest) ProtoMessage() {}

func (m *ReportHTTPMetricsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportHTTPMetricsRequest) GotenMessage() {}

// Deprecated, Use ReportHTTPMetricsRequest.ProtoReflect.Descriptor instead.
func (*ReportHTTPMetricsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ReportHTTPMetricsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportHTTPMetricsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportHTTPMetricsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportHTTPMetricsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReportHTTPMetricsRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReportHTTPMetricsRequest) GetHttpStats() []*HTTPStat {
	if m != nil {
		return m.HttpStats
	}
	return nil
}

func (m *ReportHTTPMetricsRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ReportHTTPMetricsRequest"))
	}
	m.Name = fv
}

func (m *ReportHTTPMetricsRequest) SetHttpStats(fv []*HTTPStat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpStats", "ReportHTTPMetricsRequest"))
	}
	m.HttpStats = fv
}

// Request message for method
// [GetHTTPMetrics][ntt.watchdog.v1alpha2.GetHTTPMetrics]
type GetHTTPMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	// Atleast one of Probe Name or ProbingTarget Name is mandatory.
	Probe *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	//  reference of ntt.watchdog.v1alpha2.ProbingTarget
	// Atleast one of Probe Name or ProbingTarget Name is mandatory.
	Target *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	// Interval for which the hop report is required
	Interval *common.TimeInterval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// A positive number that is the maximum number of results to return. If
	// `page_size` is empty or more than 100,000 results, the effective
	// `page_size` is 100,000 results.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// If this field is not empty then it must contain the `nextPageToken` value
	// returned by a previous call to this method.  Using this field causes the
	// method to return additional results from the previous method call.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
}

func (m *GetHTTPMetricsRequest) Reset() {
	*m = GetHTTPMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetHTTPMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetHTTPMetricsRequest) ProtoMessage() {}

func (m *GetHTTPMetricsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetHTTPMetricsRequest) GotenMessage() {}

// Deprecated, Use GetHTTPMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPMetricsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{1}
}

func (m *GetHTTPMetricsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetHTTPMetricsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetHTTPMetricsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetHTTPMetricsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetHTTPMetricsRequest) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *GetHTTPMetricsRequest) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GetHTTPMetricsRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *GetHTTPMetricsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *GetHTTPMetricsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *GetHTTPMetricsRequest) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "GetHTTPMetricsRequest"))
	}
	m.Probe = fv
}

func (m *GetHTTPMetricsRequest) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "GetHTTPMetricsRequest"))
	}
	m.Target = fv
}

func (m *GetHTTPMetricsRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "GetHTTPMetricsRequest"))
	}
	m.Interval = fv
}

func (m *GetHTTPMetricsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "GetHTTPMetricsRequest"))
	}
	m.PageSize = fv
}

func (m *GetHTTPMetricsRequest) SetPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "GetHTTPMetricsRequest"))
	}
	m.PageToken = fv
}

// Response message for method
// [GetHTTPMetrics][ntt.watchdog.v1alpha2.GetHTTPMetrics]
type GetHTTPMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HttpMetrics   []*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair `protobuf:"bytes,1,rep,name=http_metrics,json=httpMetrics,proto3" json:"http_metrics,omitempty" firestore:"httpMetrics"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `pageToken` in the next call to this method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *GetHTTPMetricsResponse) Reset() {
	*m = GetHTTPMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetHTTPMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetHTTPMetricsResponse) ProtoMessage() {}

func (m *GetHTTPMetricsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetHTTPMetricsResponse) GotenMessage() {}

// Deprecated, Use GetHTTPMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetHTTPMetricsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{2}
}

func (m *GetHTTPMetricsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetHTTPMetricsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetHTTPMetricsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetHTTPMetricsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetHTTPMetricsResponse) GetHttpMetrics() []*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair {
	if m != nil {
		return m.HttpMetrics
	}
	return nil
}

func (m *GetHTTPMetricsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *GetHTTPMetricsResponse) SetHttpMetrics(fv []*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpMetrics", "GetHTTPMetricsResponse"))
	}
	m.HttpMetrics = fv
}

func (m *GetHTTPMetricsResponse) SetNextPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "GetHTTPMetricsResponse"))
	}
	m.NextPageToken = fv
}

type HTTPStat struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	DnsLookupTime        float64                   `protobuf:"fixed64,1,opt,name=dns_lookup_time,json=dnsLookupTime,proto3" json:"dns_lookup_time,omitempty" firestore:"dnsLookupTime"`
	TcpConnectTime       float64                   `protobuf:"fixed64,2,opt,name=tcp_connect_time,json=tcpConnectTime,proto3" json:"tcp_connect_time,omitempty" firestore:"tcpConnectTime"`
	ProxyConnectTime     float64                   `protobuf:"fixed64,15,opt,name=proxy_connect_time,json=proxyConnectTime,proto3" json:"proxy_connect_time,omitempty" firestore:"proxyConnectTime"`
	TlsHandshakeTime     float64                   `protobuf:"fixed64,3,opt,name=tls_handshake_time,json=tlsHandshakeTime,proto3" json:"tls_handshake_time,omitempty" firestore:"tlsHandshakeTime"`
	RequestSendTime      float64                   `protobuf:"fixed64,4,opt,name=request_send_time,json=requestSendTime,proto3" json:"request_send_time,omitempty" firestore:"requestSendTime"`
	TimeToFirstByte      float64                   `protobuf:"fixed64,5,opt,name=time_to_first_byte,json=timeToFirstByte,proto3" json:"time_to_first_byte,omitempty" firestore:"timeToFirstByte"`
	TtfbAfterRequestSend float64                   `protobuf:"fixed64,14,opt,name=ttfb_after_request_send,json=ttfbAfterRequestSend,proto3" json:"ttfb_after_request_send,omitempty" firestore:"ttfbAfterRequestSend"`
	ContentDownloadTime  float64                   `protobuf:"fixed64,6,opt,name=content_download_time,json=contentDownloadTime,proto3" json:"content_download_time,omitempty" firestore:"contentDownloadTime"`
	TotalResponseTime    float64                   `protobuf:"fixed64,7,opt,name=total_response_time,json=totalResponseTime,proto3" json:"total_response_time,omitempty" firestore:"totalResponseTime"`
	ResponseCode         int32                     `protobuf:"varint,8,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty" firestore:"responseCode"`
	ServerIpAddress      string                    `protobuf:"bytes,9,opt,name=server_ip_address,json=serverIpAddress,proto3" json:"server_ip_address,omitempty" firestore:"serverIpAddress"`
	IpVersion            common.IpVersion          `protobuf:"varint,10,opt,name=ip_version,json=ipVersion,proto3,enum=ntt.watchdog.v1alpha2.IpVersion" json:"ip_version,omitempty" firestore:"ipVersion"`
	FailedStage          HTTPStat_FailedStage      `protobuf:"varint,11,opt,name=failed_stage,json=failedStage,proto3,enum=ntt.watchdog.v1alpha2.HTTPStat_FailedStage" json:"failed_stage,omitempty" firestore:"failedStage"`
	Error                string                    `protobuf:"bytes,16,opt,name=error,proto3" json:"error,omitempty" firestore:"error"`
	Time                 *timestamp.Timestamp      `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
	Target               *probing_target.Reference `protobuf:"bytes,13,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	// Local Interface IP Address
	SourceIpAddress     string `protobuf:"bytes,17,opt,name=source_ip_address,json=sourceIpAddress,proto3" json:"source_ip_address,omitempty" firestore:"sourceIpAddress"`
	SourceInterfaceName string `protobuf:"bytes,18,opt,name=source_interface_name,json=sourceInterfaceName,proto3" json:"source_interface_name,omitempty" firestore:"sourceInterfaceName"`
}

func (m *HTTPStat) Reset() {
	*m = HTTPStat{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HTTPStat) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HTTPStat) ProtoMessage() {}

func (m *HTTPStat) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HTTPStat) GotenMessage() {}

// Deprecated, Use HTTPStat.ProtoReflect.Descriptor instead.
func (*HTTPStat) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{3}
}

func (m *HTTPStat) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HTTPStat) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HTTPStat) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HTTPStat) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HTTPStat) GetDnsLookupTime() float64 {
	if m != nil {
		return m.DnsLookupTime
	}
	return float64(0)
}

func (m *HTTPStat) GetTcpConnectTime() float64 {
	if m != nil {
		return m.TcpConnectTime
	}
	return float64(0)
}

func (m *HTTPStat) GetProxyConnectTime() float64 {
	if m != nil {
		return m.ProxyConnectTime
	}
	return float64(0)
}

func (m *HTTPStat) GetTlsHandshakeTime() float64 {
	if m != nil {
		return m.TlsHandshakeTime
	}
	return float64(0)
}

func (m *HTTPStat) GetRequestSendTime() float64 {
	if m != nil {
		return m.RequestSendTime
	}
	return float64(0)
}

func (m *HTTPStat) GetTimeToFirstByte() float64 {
	if m != nil {
		return m.TimeToFirstByte
	}
	return float64(0)
}

func (m *HTTPStat) GetTtfbAfterRequestSend() float64 {
	if m != nil {
		return m.TtfbAfterRequestSend
	}
	return float64(0)
}

func (m *HTTPStat) GetContentDownloadTime() float64 {
	if m != nil {
		return m.ContentDownloadTime
	}
	return float64(0)
}

func (m *HTTPStat) GetTotalResponseTime() float64 {
	if m != nil {
		return m.TotalResponseTime
	}
	return float64(0)
}

func (m *HTTPStat) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return int32(0)
}

func (m *HTTPStat) GetServerIpAddress() string {
	if m != nil {
		return m.ServerIpAddress
	}
	return ""
}

func (m *HTTPStat) GetIpVersion() common.IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return common.IpVersion_IPVERSION_ANY
}

func (m *HTTPStat) GetFailedStage() HTTPStat_FailedStage {
	if m != nil {
		return m.FailedStage
	}
	return HTTPStat_no_failure
}

func (m *HTTPStat) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HTTPStat) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *HTTPStat) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *HTTPStat) GetSourceIpAddress() string {
	if m != nil {
		return m.SourceIpAddress
	}
	return ""
}

func (m *HTTPStat) GetSourceInterfaceName() string {
	if m != nil {
		return m.SourceInterfaceName
	}
	return ""
}

func (m *HTTPStat) SetDnsLookupTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DnsLookupTime", "HTTPStat"))
	}
	m.DnsLookupTime = fv
}

func (m *HTTPStat) SetTcpConnectTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TcpConnectTime", "HTTPStat"))
	}
	m.TcpConnectTime = fv
}

func (m *HTTPStat) SetProxyConnectTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConnectTime", "HTTPStat"))
	}
	m.ProxyConnectTime = fv
}

func (m *HTTPStat) SetTlsHandshakeTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TlsHandshakeTime", "HTTPStat"))
	}
	m.TlsHandshakeTime = fv
}

func (m *HTTPStat) SetRequestSendTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestSendTime", "HTTPStat"))
	}
	m.RequestSendTime = fv
}

func (m *HTTPStat) SetTimeToFirstByte(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeToFirstByte", "HTTPStat"))
	}
	m.TimeToFirstByte = fv
}

func (m *HTTPStat) SetTtfbAfterRequestSend(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TtfbAfterRequestSend", "HTTPStat"))
	}
	m.TtfbAfterRequestSend = fv
}

func (m *HTTPStat) SetContentDownloadTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContentDownloadTime", "HTTPStat"))
	}
	m.ContentDownloadTime = fv
}

func (m *HTTPStat) SetTotalResponseTime(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResponseTime", "HTTPStat"))
	}
	m.TotalResponseTime = fv
}

func (m *HTTPStat) SetResponseCode(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseCode", "HTTPStat"))
	}
	m.ResponseCode = fv
}

func (m *HTTPStat) SetServerIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerIpAddress", "HTTPStat"))
	}
	m.ServerIpAddress = fv
}

func (m *HTTPStat) SetIpVersion(fv common.IpVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpVersion", "HTTPStat"))
	}
	m.IpVersion = fv
}

func (m *HTTPStat) SetFailedStage(fv HTTPStat_FailedStage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailedStage", "HTTPStat"))
	}
	m.FailedStage = fv
}

func (m *HTTPStat) SetError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "HTTPStat"))
	}
	m.Error = fv
}

func (m *HTTPStat) SetTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "HTTPStat"))
	}
	m.Time = fv
}

func (m *HTTPStat) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "HTTPStat"))
	}
	m.Target = fv
}

func (m *HTTPStat) SetSourceIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceIpAddress", "HTTPStat"))
	}
	m.SourceIpAddress = fv
}

func (m *HTTPStat) SetSourceInterfaceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceInterfaceName", "HTTPStat"))
	}
	m.SourceInterfaceName = fv
}

type GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Probe         *probe.Reference          `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	Target        *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	HttpStats     []*HTTPStat               `protobuf:"bytes,3,rep,name=http_stats,json=httpStats,proto3" json:"http_stats,omitempty" firestore:"httpStats"`
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Reset() {
	*m = GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) ProtoMessage() {}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) GotenMessage() {}

// Deprecated, Use GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair.ProtoReflect.Descriptor instead.
func (*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP(), []int{2, 0}
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) GetHttpStats() []*HTTPStat {
	if m != nil {
		return m.HttpStats
	}
	return nil
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair"))
	}
	m.Probe = fv
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair"))
	}
	m.Target = fv
}

func (m *GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair) SetHttpStats(fv []*HTTPStat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpStats", "GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair"))
	}
	m.HttpStats = fv
}

var watchdog_proto_v1alpha2_http_metrics_custom_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDesc = []byte{
	0x0a, 0x31, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda,
	0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08, 0x1a, 0x04, 0x08, 0xa0, 0x8d,
	0x06, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x22, 0xc2, 0x85,
	0x2c, 0x1e, 0x32, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x32, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x3a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x3a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0xe6, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0xb3, 0x01, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11,
	0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xe1, 0x08, 0x0a, 0x08, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x64, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x74, 0x66, 0x62, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x74, 0x74, 0x66, 0x62, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x42, 0xd4, 0x01,
	0xe8, 0xde, 0x21, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x42, 0x16, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescData = watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDesc
)

func watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDescData
}

var watchdog_proto_v1alpha2_http_metrics_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var watchdog_proto_v1alpha2_http_metrics_custom_proto_goTypes = []interface{}{
	(HTTPStat_FailedStage)(0),                                    // 0: ntt.watchdog.v1alpha2.HTTPStat_FailedStage
	(*ReportHTTPMetricsRequest)(nil),                             // 1: ntt.watchdog.v1alpha2.ReportHTTPMetricsRequest
	(*GetHTTPMetricsRequest)(nil),                                // 2: ntt.watchdog.v1alpha2.GetHTTPMetricsRequest
	(*GetHTTPMetricsResponse)(nil),                               // 3: ntt.watchdog.v1alpha2.GetHTTPMetricsResponse
	(*HTTPStat)(nil),                                             // 4: ntt.watchdog.v1alpha2.HTTPStat
	(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair)(nil), // 5: ntt.watchdog.v1alpha2.GetHTTPMetricsResponse.HTTPMetricsPerAgentTargetPair
	(*common.TimeInterval)(nil),                                  // 6: ntt.watchdog.v1alpha2.TimeInterval
	(common.IpVersion)(0),                                        // 7: ntt.watchdog.v1alpha2.IpVersion
	(*timestamp.Timestamp)(nil),                                  // 8: google.protobuf.Timestamp
}
var watchdog_proto_v1alpha2_http_metrics_custom_proto_depIdxs = []int32{
	4, // 0: ntt.watchdog.v1alpha2.ReportHTTPMetricsRequest.http_stats:type_name -> ntt.watchdog.v1alpha2.HTTPStat
	6, // 1: ntt.watchdog.v1alpha2.GetHTTPMetricsRequest.interval:type_name -> ntt.watchdog.v1alpha2.TimeInterval
	5, // 2: ntt.watchdog.v1alpha2.GetHTTPMetricsResponse.http_metrics:type_name -> ntt.watchdog.v1alpha2.GetHTTPMetricsResponse.HTTPMetricsPerAgentTargetPair
	7, // 3: ntt.watchdog.v1alpha2.HTTPStat.ip_version:type_name -> ntt.watchdog.v1alpha2.IpVersion
	0, // 4: ntt.watchdog.v1alpha2.HTTPStat.failed_stage:type_name -> ntt.watchdog.v1alpha2.HTTPStat_FailedStage
	8, // 5: ntt.watchdog.v1alpha2.HTTPStat.time:type_name -> google.protobuf.Timestamp
	4, // 6: ntt.watchdog.v1alpha2.GetHTTPMetricsResponse.HTTPMetricsPerAgentTargetPair.http_stats:type_name -> ntt.watchdog.v1alpha2.HTTPStat
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_http_metrics_custom_proto_init() }
func watchdog_proto_v1alpha2_http_metrics_custom_proto_init() {
	if watchdog_proto_v1alpha2_http_metrics_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHTTPMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPMetricsResponse_HTTPMetricsPerAgentTargetPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_http_metrics_custom_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_http_metrics_custom_proto_depIdxs,
		EnumInfos:         watchdog_proto_v1alpha2_http_metrics_custom_proto_enumTypes,
		MessageInfos:      watchdog_proto_v1alpha2_http_metrics_custom_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_http_metrics_custom_proto = out.File
	watchdog_proto_v1alpha2_http_metrics_custom_proto_rawDesc = nil
	watchdog_proto_v1alpha2_http_metrics_custom_proto_goTypes = nil
	watchdog_proto_v1alpha2_http_metrics_custom_proto_depIdxs = nil
}
