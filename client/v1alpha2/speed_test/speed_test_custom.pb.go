// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/speed_test_custom.proto
// DO NOT EDIT!!!

package speed_test_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_session "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_session"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
	_ = &probing_session.ProbingSession{}
	_ = &probing_target.ProbingTarget{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeedTestDirection int32

const (
	SpeedTestDirection_Download SpeedTestDirection = 0
	SpeedTestDirection_Upload   SpeedTestDirection = 1
)

var (
	SpeedTestDirection_name = map[int32]string{
		0: "Download",
		1: "Upload",
	}

	SpeedTestDirection_value = map[string]int32{
		"Download": 0,
		"Upload":   1,
	}
)

func (x SpeedTestDirection) Enum() *SpeedTestDirection {
	p := new(SpeedTestDirection)
	*p = x
	return p
}

func (x SpeedTestDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SpeedTestDirection) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_speed_test_custom_proto_enumTypes[0].Descriptor()
}

func (SpeedTestDirection) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_speed_test_custom_proto_enumTypes[0]
}

func (x SpeedTestDirection) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SpeedTestDirection.ProtoReflect.Descriptor instead.
func (SpeedTestDirection) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescGZIP(), []int{0}
}

// Request message for method [RunSpeedTest][ntt.watchdog.v1alpha2.RunSpeedTest]
type RunSpeedTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	Name      *probe.Reference   `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Direction SpeedTestDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=ntt.watchdog.v1alpha2.SpeedTestDirection" json:"direction,omitempty" firestore:"direction"`
	// Reference to probing session to run speedtest
	// Optional. If not specified the agent selects nearest server
	// or the test is run to the recently used speedtest server
	// Request should have both probingSession and probingTarget
	ProbingSession *probing_session.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=probing_session,json=probingSession,proto3" json:"probing_session,omitempty" firestore:"probingSession"`
	// Reference to probing target to run speedtest
	// Optional. If not specified the agent selects nearest server
	// or the test is run to the recently used speedtest server
	// Request should have both probingSession and probingTarget
	ProbingTarget *probing_target.Reference `protobuf:"bytes,4,opt,customtype=Reference,name=probing_target,json=probingTarget,proto3" json:"probing_target,omitempty" firestore:"probingTarget"`
}

func (m *RunSpeedTestRequest) Reset() {
	*m = RunSpeedTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunSpeedTestRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunSpeedTestRequest) ProtoMessage() {}

func (m *RunSpeedTestRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunSpeedTestRequest) GotenMessage() {}

// Deprecated, Use RunSpeedTestRequest.ProtoReflect.Descriptor instead.
func (*RunSpeedTestRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescGZIP(), []int{0}
}

func (m *RunSpeedTestRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunSpeedTestRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunSpeedTestRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunSpeedTestRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunSpeedTestRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RunSpeedTestRequest) GetDirection() SpeedTestDirection {
	if m != nil {
		return m.Direction
	}
	return SpeedTestDirection_Download
}

func (m *RunSpeedTestRequest) GetProbingSession() *probing_session.Reference {
	if m != nil {
		return m.ProbingSession
	}
	return nil
}

func (m *RunSpeedTestRequest) GetProbingTarget() *probing_target.Reference {
	if m != nil {
		return m.ProbingTarget
	}
	return nil
}

func (m *RunSpeedTestRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "RunSpeedTestRequest"))
	}
	m.Name = fv
}

func (m *RunSpeedTestRequest) SetDirection(fv SpeedTestDirection) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Direction", "RunSpeedTestRequest"))
	}
	m.Direction = fv
}

func (m *RunSpeedTestRequest) SetProbingSession(fv *probing_session.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingSession", "RunSpeedTestRequest"))
	}
	m.ProbingSession = fv
}

func (m *RunSpeedTestRequest) SetProbingTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTarget", "RunSpeedTestRequest"))
	}
	m.ProbingTarget = fv
}

// Response message for method
// [RunSpeedTest][ntt.watchdog.v1alpha2.RunSpeedTest]
type RunSpeedTestResponse struct {
	state                      protoimpl.MessageState
	sizeCache                  protoimpl.SizeCache
	unknownFields              protoimpl.UnknownFields
	Direction                  SpeedTestDirection         `protobuf:"varint,1,opt,name=direction,proto3,enum=ntt.watchdog.v1alpha2.SpeedTestDirection" json:"direction,omitempty" firestore:"direction"`
	SpeedMbps                  float64                    `protobuf:"fixed64,2,opt,name=speed_mbps,json=speedMbps,proto3" json:"speed_mbps,omitempty" firestore:"speedMbps"`
	ServerName                 string                     `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty" firestore:"serverName"`
	ServerIp                   string                     `protobuf:"bytes,4,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty" firestore:"serverIp"`
	ServerLatency              float64                    `protobuf:"fixed64,5,opt,name=server_latency,json=serverLatency,proto3" json:"server_latency,omitempty" firestore:"serverLatency"`
	ServerRetransmitPercentage float64                    `protobuf:"fixed64,6,opt,name=server_retransmit_percentage,json=serverRetransmitPercentage,proto3" json:"server_retransmit_percentage,omitempty" firestore:"serverRetransmitPercentage"`
	ProbingSession             *probing_session.Reference `protobuf:"bytes,7,opt,customtype=Reference,name=probing_session,json=probingSession,proto3" json:"probing_session,omitempty" firestore:"probingSession"`
	Target                     *probing_target.Reference  `protobuf:"bytes,8,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	LocalIp                    string                     `protobuf:"bytes,9,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty" firestore:"localIp"`
	LocalInterface             string                     `protobuf:"bytes,10,opt,name=local_interface,json=localInterface,proto3" json:"local_interface,omitempty" firestore:"localInterface"`
	BytesTransferred           int64                      `protobuf:"varint,11,opt,name=bytes_transferred,json=bytesTransferred,proto3" json:"bytes_transferred,omitempty" firestore:"bytesTransferred"`
}

func (m *RunSpeedTestResponse) Reset() {
	*m = RunSpeedTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunSpeedTestResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunSpeedTestResponse) ProtoMessage() {}

func (m *RunSpeedTestResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunSpeedTestResponse) GotenMessage() {}

// Deprecated, Use RunSpeedTestResponse.ProtoReflect.Descriptor instead.
func (*RunSpeedTestResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescGZIP(), []int{1}
}

func (m *RunSpeedTestResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunSpeedTestResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunSpeedTestResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunSpeedTestResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunSpeedTestResponse) GetDirection() SpeedTestDirection {
	if m != nil {
		return m.Direction
	}
	return SpeedTestDirection_Download
}

func (m *RunSpeedTestResponse) GetSpeedMbps() float64 {
	if m != nil {
		return m.SpeedMbps
	}
	return float64(0)
}

func (m *RunSpeedTestResponse) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *RunSpeedTestResponse) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *RunSpeedTestResponse) GetServerLatency() float64 {
	if m != nil {
		return m.ServerLatency
	}
	return float64(0)
}

func (m *RunSpeedTestResponse) GetServerRetransmitPercentage() float64 {
	if m != nil {
		return m.ServerRetransmitPercentage
	}
	return float64(0)
}

func (m *RunSpeedTestResponse) GetProbingSession() *probing_session.Reference {
	if m != nil {
		return m.ProbingSession
	}
	return nil
}

func (m *RunSpeedTestResponse) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RunSpeedTestResponse) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

func (m *RunSpeedTestResponse) GetLocalInterface() string {
	if m != nil {
		return m.LocalInterface
	}
	return ""
}

func (m *RunSpeedTestResponse) GetBytesTransferred() int64 {
	if m != nil {
		return m.BytesTransferred
	}
	return int64(0)
}

func (m *RunSpeedTestResponse) SetDirection(fv SpeedTestDirection) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Direction", "RunSpeedTestResponse"))
	}
	m.Direction = fv
}

func (m *RunSpeedTestResponse) SetSpeedMbps(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpeedMbps", "RunSpeedTestResponse"))
	}
	m.SpeedMbps = fv
}

func (m *RunSpeedTestResponse) SetServerName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerName", "RunSpeedTestResponse"))
	}
	m.ServerName = fv
}

func (m *RunSpeedTestResponse) SetServerIp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerIp", "RunSpeedTestResponse"))
	}
	m.ServerIp = fv
}

func (m *RunSpeedTestResponse) SetServerLatency(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerLatency", "RunSpeedTestResponse"))
	}
	m.ServerLatency = fv
}

func (m *RunSpeedTestResponse) SetServerRetransmitPercentage(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerRetransmitPercentage", "RunSpeedTestResponse"))
	}
	m.ServerRetransmitPercentage = fv
}

func (m *RunSpeedTestResponse) SetProbingSession(fv *probing_session.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingSession", "RunSpeedTestResponse"))
	}
	m.ProbingSession = fv
}

func (m *RunSpeedTestResponse) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "RunSpeedTestResponse"))
	}
	m.Target = fv
}

func (m *RunSpeedTestResponse) SetLocalIp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocalIp", "RunSpeedTestResponse"))
	}
	m.LocalIp = fv
}

func (m *RunSpeedTestResponse) SetLocalInterface(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocalInterface", "RunSpeedTestResponse"))
	}
	m.LocalInterface = fv
}

func (m *RunSpeedTestResponse) SetBytesTransferred(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BytesTransferred", "RunSpeedTestResponse"))
	}
	m.BytesTransferred = fv
}

type RunSpeedTestRequestToProbe struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	Direction      SpeedTestDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=ntt.watchdog.v1alpha2.SpeedTestDirection" json:"direction,omitempty" firestore:"direction"`
	TargetName     string             `protobuf:"bytes,2,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty" firestore:"targetName"`
	ProbingSession string             `protobuf:"bytes,3,opt,name=probing_session,json=probingSession,proto3" json:"probing_session,omitempty" firestore:"probingSession"`
}

func (m *RunSpeedTestRequestToProbe) Reset() {
	*m = RunSpeedTestRequestToProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RunSpeedTestRequestToProbe) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RunSpeedTestRequestToProbe) ProtoMessage() {}

func (m *RunSpeedTestRequestToProbe) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RunSpeedTestRequestToProbe) GotenMessage() {}

// Deprecated, Use RunSpeedTestRequestToProbe.ProtoReflect.Descriptor instead.
func (*RunSpeedTestRequestToProbe) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescGZIP(), []int{2}
}

func (m *RunSpeedTestRequestToProbe) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RunSpeedTestRequestToProbe) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RunSpeedTestRequestToProbe) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RunSpeedTestRequestToProbe) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RunSpeedTestRequestToProbe) GetDirection() SpeedTestDirection {
	if m != nil {
		return m.Direction
	}
	return SpeedTestDirection_Download
}

func (m *RunSpeedTestRequestToProbe) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *RunSpeedTestRequestToProbe) GetProbingSession() string {
	if m != nil {
		return m.ProbingSession
	}
	return ""
}

func (m *RunSpeedTestRequestToProbe) SetDirection(fv SpeedTestDirection) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Direction", "RunSpeedTestRequestToProbe"))
	}
	m.Direction = fv
}

func (m *RunSpeedTestRequestToProbe) SetTargetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetName", "RunSpeedTestRequestToProbe"))
	}
	m.TargetName = fv
}

func (m *RunSpeedTestRequestToProbe) SetProbingSession(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingSession", "RunSpeedTestRequestToProbe"))
	}
	m.ProbingSession = fv
}

var watchdog_proto_v1alpha2_speed_test_custom_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_speed_test_custom_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x12, 0x12, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c,
	0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x04, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2,
	0xda, 0x21, 0x12, 0x12, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x2e, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x42, 0xce, 0x01, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x14, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x00, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x3b, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2,
	0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescData = watchdog_proto_v1alpha2_speed_test_custom_proto_rawDesc
)

func watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_speed_test_custom_proto_rawDescData
}

var watchdog_proto_v1alpha2_speed_test_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var watchdog_proto_v1alpha2_speed_test_custom_proto_goTypes = []interface{}{
	(SpeedTestDirection)(0),            // 0: ntt.watchdog.v1alpha2.SpeedTestDirection
	(*RunSpeedTestRequest)(nil),        // 1: ntt.watchdog.v1alpha2.RunSpeedTestRequest
	(*RunSpeedTestResponse)(nil),       // 2: ntt.watchdog.v1alpha2.RunSpeedTestResponse
	(*RunSpeedTestRequestToProbe)(nil), // 3: ntt.watchdog.v1alpha2.RunSpeedTestRequestToProbe
}
var watchdog_proto_v1alpha2_speed_test_custom_proto_depIdxs = []int32{
	0, // 0: ntt.watchdog.v1alpha2.RunSpeedTestRequest.direction:type_name -> ntt.watchdog.v1alpha2.SpeedTestDirection
	0, // 1: ntt.watchdog.v1alpha2.RunSpeedTestResponse.direction:type_name -> ntt.watchdog.v1alpha2.SpeedTestDirection
	0, // 2: ntt.watchdog.v1alpha2.RunSpeedTestRequestToProbe.direction:type_name -> ntt.watchdog.v1alpha2.SpeedTestDirection
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_speed_test_custom_proto_init() }
func watchdog_proto_v1alpha2_speed_test_custom_proto_init() {
	if watchdog_proto_v1alpha2_speed_test_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSpeedTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSpeedTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSpeedTestRequestToProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_speed_test_custom_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_speed_test_custom_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_speed_test_custom_proto_depIdxs,
		EnumInfos:         watchdog_proto_v1alpha2_speed_test_custom_proto_enumTypes,
		MessageInfos:      watchdog_proto_v1alpha2_speed_test_custom_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_speed_test_custom_proto = out.File
	watchdog_proto_v1alpha2_speed_test_custom_proto_rawDesc = nil
	watchdog_proto_v1alpha2_speed_test_custom_proto_goTypes = nil
	watchdog_proto_v1alpha2_speed_test_custom_proto_depIdxs = nil
}
