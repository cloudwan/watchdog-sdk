// Code generated by protoc-gen-goten-client
// API: SpeedTestService
// DO NOT EDIT!!!

package speed_test_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
)

var (
	descriptorsInitialized     bool
	speedTestServiceDescriptor *SpeedTestServiceDescriptor
	runSpeedTestDescriptor     *RunSpeedTestDescriptor
)

type RunSpeedTestDescriptor struct{}

type RunSpeedTestDescriptorClientMsgHandle struct{}

type RunSpeedTestDescriptorServerMsgHandle struct{}

func (d *RunSpeedTestDescriptor) NewEmptyClientMsg() proto.Message {
	return &RunSpeedTestRequest{}
}

func (d *RunSpeedTestDescriptor) NewEmptyServerMsg() proto.Message {
	return &RunSpeedTestResponse{}
}

func (d *RunSpeedTestDescriptor) IsUnary() bool {
	return false
}

func (d *RunSpeedTestDescriptor) IsClientStream() bool {
	return false
}

func (d *RunSpeedTestDescriptor) IsServerStream() bool {
	return true
}

func (d *RunSpeedTestDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *RunSpeedTestDescriptor) IsPluralSubject() bool {
	return false
}

func (d *RunSpeedTestDescriptor) HasSubjectResource() bool {
	return true
}

func (d *RunSpeedTestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RunSpeedTestDescriptor) GetVerb() string {
	return "runSpeedTest"
}

func (d *RunSpeedTestDescriptor) GetMethodName() string {
	return "RunSpeedTest"
}

func (d *RunSpeedTestDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SpeedTestService/RunSpeedTest"
}

func (d *RunSpeedTestDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *RunSpeedTestDescriptor) GetApiName() string {
	return "SpeedTestService"
}

func (d *RunSpeedTestDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *RunSpeedTestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RunSpeedTestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return speedTestServiceDescriptor
}

func (d *RunSpeedTestDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *RunSpeedTestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunSpeedTestDescriptorClientMsgHandle{}
}

func (d *RunSpeedTestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunSpeedTestDescriptorServerMsgHandle{}
}

func (h *RunSpeedTestDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunSpeedTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RunSpeedTestRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe.Name)(nil)
}

func (h *RunSpeedTestDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunSpeedTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RunSpeedTestRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RunSpeedTestDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunSpeedTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RunSpeedTestRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *RunSpeedTestDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunSpeedTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RunSpeedTestResponse) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *RunSpeedTestDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunSpeedTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RunSpeedTestResponse) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RunSpeedTestDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunSpeedTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RunSpeedTestResponse) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetRunSpeedTestDescriptor() *RunSpeedTestDescriptor {
	return runSpeedTestDescriptor
}

type SpeedTestServiceDescriptor struct{}

func (d *SpeedTestServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		runSpeedTestDescriptor,
	}
}

func (d *SpeedTestServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.SpeedTestService"
}

func (d *SpeedTestServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SpeedTestServiceDescriptor) GetApiName() string {
	return "SpeedTestService"
}

func (d *SpeedTestServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SpeedTestServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetSpeedTestServiceDescriptor() *SpeedTestServiceDescriptor {
	return speedTestServiceDescriptor
}

func initDescriptors() {
	speedTestServiceDescriptor = &SpeedTestServiceDescriptor{}
	runSpeedTestDescriptor = &RunSpeedTestDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(speedTestServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(runSpeedTestDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
