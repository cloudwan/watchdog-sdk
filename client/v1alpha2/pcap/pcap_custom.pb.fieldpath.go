// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/pcap_custom.proto
// DO NOT EDIT!!!

package pcap_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ReportPcapRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ReportPcapRequest_FieldPathSelector
	Get(source *ReportPcapRequest) []interface{}
	GetSingle(source *ReportPcapRequest) (interface{}, bool)
	ClearValue(item *ReportPcapRequest)

	// Those methods build corresponding ReportPcapRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ReportPcapRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ReportPcapRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ReportPcapRequest_FieldPathArrayItemValue
}

type ReportPcapRequest_FieldPathSelector int32

const (
	ReportPcapRequest_FieldPathSelectorName      ReportPcapRequest_FieldPathSelector = 0
	ReportPcapRequest_FieldPathSelectorFilter    ReportPcapRequest_FieldPathSelector = 1
	ReportPcapRequest_FieldPathSelectorStartTime ReportPcapRequest_FieldPathSelector = 2
	ReportPcapRequest_FieldPathSelectorEndTime   ReportPcapRequest_FieldPathSelector = 3
	ReportPcapRequest_FieldPathSelectorPcapBytes ReportPcapRequest_FieldPathSelector = 4
)

func (s ReportPcapRequest_FieldPathSelector) String() string {
	switch s {
	case ReportPcapRequest_FieldPathSelectorName:
		return "name"
	case ReportPcapRequest_FieldPathSelectorFilter:
		return "filter"
	case ReportPcapRequest_FieldPathSelectorStartTime:
		return "start_time"
	case ReportPcapRequest_FieldPathSelectorEndTime:
		return "end_time"
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		return "pcap_bytes"
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", s))
	}
}

func BuildReportPcapRequest_FieldPath(fp gotenobject.RawFieldPath) (ReportPcapRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ReportPcapRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorName}, nil
		case "filter":
			return &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorFilter}, nil
		case "start_time", "startTime", "start-time":
			return &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorStartTime}, nil
		case "end_time", "endTime", "end-time":
			return &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorEndTime}, nil
		case "pcap_bytes", "pcapBytes", "pcap-bytes":
			return &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorPcapBytes}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ReportPcapRequest", fp)
}

func ParseReportPcapRequest_FieldPath(rawField string) (ReportPcapRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildReportPcapRequest_FieldPath(fp)
}

func MustParseReportPcapRequest_FieldPath(rawField string) ReportPcapRequest_FieldPath {
	fp, err := ParseReportPcapRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ReportPcapRequest_FieldTerminalPath struct {
	selector ReportPcapRequest_FieldPathSelector
}

var _ ReportPcapRequest_FieldPath = (*ReportPcapRequest_FieldTerminalPath)(nil)

func (fp *ReportPcapRequest_FieldTerminalPath) Selector() ReportPcapRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ReportPcapRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ReportPcapRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ReportPcapRequest
func (fp *ReportPcapRequest_FieldTerminalPath) Get(source *ReportPcapRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ReportPcapRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ReportPcapRequest_FieldPathSelectorFilter:
			values = append(values, source.Filter)
		case ReportPcapRequest_FieldPathSelectorStartTime:
			if source.StartTime != nil {
				values = append(values, source.StartTime)
			}
		case ReportPcapRequest_FieldPathSelectorEndTime:
			if source.EndTime != nil {
				values = append(values, source.EndTime)
			}
		case ReportPcapRequest_FieldPathSelectorPcapBytes:
			values = append(values, source.PcapBytes)
		default:
			panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ReportPcapRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ReportPcapRequest))
}

// GetSingle returns value pointed by specific field of from source ReportPcapRequest
func (fp *ReportPcapRequest_FieldTerminalPath) GetSingle(source *ReportPcapRequest) (interface{}, bool) {
	switch fp.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ReportPcapRequest_FieldPathSelectorFilter:
		return source.GetFilter(), source != nil
	case ReportPcapRequest_FieldPathSelectorStartTime:
		res := source.GetStartTime()
		return res, res != nil
	case ReportPcapRequest_FieldPathSelectorEndTime:
		res := source.GetEndTime()
		return res, res != nil
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		res := source.GetPcapBytes()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
	}
}

func (fp *ReportPcapRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ReportPcapRequest))
}

// GetDefault returns a default value of the field type
func (fp *ReportPcapRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ReportPcapRequest_FieldPathSelectorFilter:
		return ""
	case ReportPcapRequest_FieldPathSelectorStartTime:
		return (*timestamp.Timestamp)(nil)
	case ReportPcapRequest_FieldPathSelectorEndTime:
		return (*timestamp.Timestamp)(nil)
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
	}
}

func (fp *ReportPcapRequest_FieldTerminalPath) ClearValue(item *ReportPcapRequest) {
	if item != nil {
		switch fp.selector {
		case ReportPcapRequest_FieldPathSelectorName:
			item.Name = nil
		case ReportPcapRequest_FieldPathSelectorFilter:
			item.Filter = ""
		case ReportPcapRequest_FieldPathSelectorStartTime:
			item.StartTime = nil
		case ReportPcapRequest_FieldPathSelectorEndTime:
			item.EndTime = nil
		case ReportPcapRequest_FieldPathSelectorPcapBytes:
			item.PcapBytes = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
		}
	}
}

func (fp *ReportPcapRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ReportPcapRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ReportPcapRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ReportPcapRequest_FieldPathSelectorName ||
		fp.selector == ReportPcapRequest_FieldPathSelectorFilter ||
		fp.selector == ReportPcapRequest_FieldPathSelectorStartTime ||
		fp.selector == ReportPcapRequest_FieldPathSelectorEndTime ||
		fp.selector == ReportPcapRequest_FieldPathSelectorPcapBytes
}

func (fp *ReportPcapRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithIValue(value interface{}) ReportPcapRequest_FieldPathValue {
	switch fp.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		return &ReportPcapRequest_FieldTerminalPathValue{ReportPcapRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ReportPcapRequest_FieldPathSelectorFilter:
		return &ReportPcapRequest_FieldTerminalPathValue{ReportPcapRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ReportPcapRequest_FieldPathSelectorStartTime:
		return &ReportPcapRequest_FieldTerminalPathValue{ReportPcapRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case ReportPcapRequest_FieldPathSelectorEndTime:
		return &ReportPcapRequest_FieldTerminalPathValue{ReportPcapRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		return &ReportPcapRequest_FieldTerminalPathValue{ReportPcapRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
	}
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ReportPcapRequest_FieldPathArrayOfValues {
	fpaov := &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		return &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ReportPcapRequest_FieldPathSelectorFilter:
		return &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ReportPcapRequest_FieldPathSelectorStartTime:
		return &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case ReportPcapRequest_FieldPathSelectorEndTime:
		return &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		return &ReportPcapRequest_FieldTerminalPathArrayOfValues{ReportPcapRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ReportPcapRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fp.selector))
	}
}

func (fp *ReportPcapRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ReportPcapRequest_FieldPathValue allows storing values for ReportPcapRequest fields according to their type
type ReportPcapRequest_FieldPathValue interface {
	ReportPcapRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ReportPcapRequest)
	CompareWith(*ReportPcapRequest) (cmp int, comparable bool)
}

func ParseReportPcapRequest_FieldPathValue(pathStr, valueStr string) (ReportPcapRequest_FieldPathValue, error) {
	fp, err := ParseReportPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportPcapRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ReportPcapRequest_FieldPathValue), nil
}

func MustParseReportPcapRequest_FieldPathValue(pathStr, valueStr string) ReportPcapRequest_FieldPathValue {
	fpv, err := ParseReportPcapRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ReportPcapRequest_FieldTerminalPathValue struct {
	ReportPcapRequest_FieldTerminalPath
	value interface{}
}

var _ ReportPcapRequest_FieldPathValue = (*ReportPcapRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReportPcapRequest' as interface{}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) AsFilterValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) AsStartTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) AsEndTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *ReportPcapRequest_FieldTerminalPathValue) AsPcapBytesValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object ReportPcapRequest
func (fpv *ReportPcapRequest_FieldTerminalPathValue) SetTo(target **ReportPcapRequest) {
	if *target == nil {
		*target = new(ReportPcapRequest)
	}
	switch fpv.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ReportPcapRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(string)
	case ReportPcapRequest_FieldPathSelectorStartTime:
		(*target).StartTime = fpv.value.(*timestamp.Timestamp)
	case ReportPcapRequest_FieldPathSelectorEndTime:
		(*target).EndTime = fpv.value.(*timestamp.Timestamp)
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		(*target).PcapBytes = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fpv.selector))
	}
}

func (fpv *ReportPcapRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportPcapRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportPcapRequest_FieldTerminalPathValue' with the value under path in 'ReportPcapRequest'.
func (fpv *ReportPcapRequest_FieldTerminalPathValue) CompareWith(source *ReportPcapRequest) (int, bool) {
	switch fpv.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ReportPcapRequest_FieldPathSelectorFilter:
		leftValue := fpv.value.(string)
		rightValue := source.GetFilter()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportPcapRequest_FieldPathSelectorStartTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportPcapRequest_FieldPathSelectorEndTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetEndTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ReportPcapRequest: %d", fpv.selector))
	}
}

func (fpv *ReportPcapRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ReportPcapRequest))
}

// ReportPcapRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ReportPcapRequest according to their type
// Present only for array (repeated) types.
type ReportPcapRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ReportPcapRequest_FieldPath
	ContainsValue(*ReportPcapRequest) bool
}

// ParseReportPcapRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseReportPcapRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ReportPcapRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseReportPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportPcapRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ReportPcapRequest_FieldPathArrayItemValue), nil
}

func MustParseReportPcapRequest_FieldPathArrayItemValue(pathStr, valueStr string) ReportPcapRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseReportPcapRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ReportPcapRequest_FieldTerminalPathArrayItemValue struct {
	ReportPcapRequest_FieldTerminalPath
	value interface{}
}

var _ ReportPcapRequest_FieldPathArrayItemValue = (*ReportPcapRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ReportPcapRequest as interface{}
func (fpaiv *ReportPcapRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ReportPcapRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ReportPcapRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ReportPcapRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ReportPcapRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportPcapRequest'
func (fpaiv *ReportPcapRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ReportPcapRequest) bool {
	slice := fpaiv.ReportPcapRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ReportPcapRequest_FieldPathArrayOfValues allows storing slice of values for ReportPcapRequest fields according to their type
type ReportPcapRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ReportPcapRequest_FieldPath
}

func ParseReportPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ReportPcapRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseReportPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportPcapRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ReportPcapRequest_FieldPathArrayOfValues), nil
}

func MustParseReportPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ReportPcapRequest_FieldPathArrayOfValues {
	fpaov, err := ParseReportPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ReportPcapRequest_FieldTerminalPathArrayOfValues struct {
	ReportPcapRequest_FieldTerminalPath
	values interface{}
}

var _ ReportPcapRequest_FieldPathArrayOfValues = (*ReportPcapRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ReportPcapRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ReportPcapRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ReportPcapRequest_FieldPathSelectorStartTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case ReportPcapRequest_FieldPathSelectorEndTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case ReportPcapRequest_FieldPathSelectorPcapBytes:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) AsStartTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) AsEndTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *ReportPcapRequest_FieldTerminalPathArrayOfValues) AsPcapBytesArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPcapRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPcapRequest_FieldPathSelector
	Get(source *GetPcapRequest) []interface{}
	GetSingle(source *GetPcapRequest) (interface{}, bool)
	ClearValue(item *GetPcapRequest)

	// Those methods build corresponding GetPcapRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPcapRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPcapRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPcapRequest_FieldPathArrayItemValue
}

type GetPcapRequest_FieldPathSelector int32

const (
	GetPcapRequest_FieldPathSelectorProbe     GetPcapRequest_FieldPathSelector = 0
	GetPcapRequest_FieldPathSelectorInterval  GetPcapRequest_FieldPathSelector = 1
	GetPcapRequest_FieldPathSelectorPageSize  GetPcapRequest_FieldPathSelector = 2
	GetPcapRequest_FieldPathSelectorPageToken GetPcapRequest_FieldPathSelector = 3
)

func (s GetPcapRequest_FieldPathSelector) String() string {
	switch s {
	case GetPcapRequest_FieldPathSelectorProbe:
		return "probe"
	case GetPcapRequest_FieldPathSelectorInterval:
		return "interval"
	case GetPcapRequest_FieldPathSelectorPageSize:
		return "page_size"
	case GetPcapRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", s))
	}
}

func BuildGetPcapRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPcapRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPcapRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorProbe}, nil
		case "interval":
			return &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetPcapRequest_FieldSubPath{selector: GetPcapRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPcapRequest", fp)
}

func ParseGetPcapRequest_FieldPath(rawField string) (GetPcapRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPcapRequest_FieldPath(fp)
}

func MustParseGetPcapRequest_FieldPath(rawField string) GetPcapRequest_FieldPath {
	fp, err := ParseGetPcapRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPcapRequest_FieldTerminalPath struct {
	selector GetPcapRequest_FieldPathSelector
}

var _ GetPcapRequest_FieldPath = (*GetPcapRequest_FieldTerminalPath)(nil)

func (fp *GetPcapRequest_FieldTerminalPath) Selector() GetPcapRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPcapRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPcapRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPcapRequest
func (fp *GetPcapRequest_FieldTerminalPath) Get(source *GetPcapRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPcapRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case GetPcapRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case GetPcapRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case GetPcapRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPcapRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPcapRequest))
}

// GetSingle returns value pointed by specific field of from source GetPcapRequest
func (fp *GetPcapRequest_FieldTerminalPath) GetSingle(source *GetPcapRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case GetPcapRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case GetPcapRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case GetPcapRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
	}
}

func (fp *GetPcapRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPcapRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPcapRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case GetPcapRequest_FieldPathSelectorInterval:
		return (*common.TimeInterval)(nil)
	case GetPcapRequest_FieldPathSelectorPageSize:
		return int32(0)
	case GetPcapRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
	}
}

func (fp *GetPcapRequest_FieldTerminalPath) ClearValue(item *GetPcapRequest) {
	if item != nil {
		switch fp.selector {
		case GetPcapRequest_FieldPathSelectorProbe:
			item.Probe = nil
		case GetPcapRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case GetPcapRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case GetPcapRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPcapRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPcapRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPcapRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPcapRequest_FieldPathSelectorProbe ||
		fp.selector == GetPcapRequest_FieldPathSelectorPageSize ||
		fp.selector == GetPcapRequest_FieldPathSelectorPageToken
}

func (fp *GetPcapRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPcapRequest_FieldTerminalPath) WithIValue(value interface{}) GetPcapRequest_FieldPathValue {
	switch fp.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		return &GetPcapRequest_FieldTerminalPathValue{GetPcapRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetPcapRequest_FieldPathSelectorInterval:
		return &GetPcapRequest_FieldTerminalPathValue{GetPcapRequest_FieldTerminalPath: *fp, value: value.(*common.TimeInterval)}
	case GetPcapRequest_FieldPathSelectorPageSize:
		return &GetPcapRequest_FieldTerminalPathValue{GetPcapRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case GetPcapRequest_FieldPathSelectorPageToken:
		return &GetPcapRequest_FieldTerminalPathValue{GetPcapRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
	}
}

func (fp *GetPcapRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPcapRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPcapRequest_FieldPathArrayOfValues {
	fpaov := &GetPcapRequest_FieldTerminalPathArrayOfValues{GetPcapRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		return &GetPcapRequest_FieldTerminalPathArrayOfValues{GetPcapRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetPcapRequest_FieldPathSelectorInterval:
		return &GetPcapRequest_FieldTerminalPathArrayOfValues{GetPcapRequest_FieldTerminalPath: *fp, values: values.([]*common.TimeInterval)}
	case GetPcapRequest_FieldPathSelectorPageSize:
		return &GetPcapRequest_FieldTerminalPathArrayOfValues{GetPcapRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case GetPcapRequest_FieldPathSelectorPageToken:
		return &GetPcapRequest_FieldTerminalPathArrayOfValues{GetPcapRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPcapRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPcapRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPcapRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fp.selector))
	}
}

func (fp *GetPcapRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetPcapRequest_FieldSubPath struct {
	selector GetPcapRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetPcapRequest_FieldPath = (*GetPcapRequest_FieldSubPath)(nil)

func (fps *GetPcapRequest_FieldSubPath) Selector() GetPcapRequest_FieldPathSelector {
	return fps.selector
}
func (fps *GetPcapRequest_FieldSubPath) AsIntervalSubPath() (common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetPcapRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetPcapRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetPcapRequest
func (fps *GetPcapRequest_FieldSubPath) Get(source *GetPcapRequest) (values []interface{}) {
	switch fps.selector {
	case GetPcapRequest_FieldPathSelectorInterval:
		values = append(values, fps.subPath.GetRaw(source.GetInterval())...)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fps.selector))
	}
	return
}

func (fps *GetPcapRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetPcapRequest))
}

// GetSingle returns value of selected field from source GetPcapRequest
func (fps *GetPcapRequest_FieldSubPath) GetSingle(source *GetPcapRequest) (interface{}, bool) {
	switch fps.selector {
	case GetPcapRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fps.selector))
	}
}

func (fps *GetPcapRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetPcapRequest))
}

// GetDefault returns a default value of the field type
func (fps *GetPcapRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetPcapRequest_FieldSubPath) ClearValue(item *GetPcapRequest) {
	if item != nil {
		switch fps.selector {
		case GetPcapRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fps.selector))
		}
	}
}

func (fps *GetPcapRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetPcapRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetPcapRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetPcapRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetPcapRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetPcapRequest_FieldSubPath) WithIValue(value interface{}) GetPcapRequest_FieldPathValue {
	return &GetPcapRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetPcapRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetPcapRequest_FieldSubPath) WithIArrayOfValues(values interface{}) GetPcapRequest_FieldPathArrayOfValues {
	return &GetPcapRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetPcapRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetPcapRequest_FieldSubPath) WithIArrayItemValue(value interface{}) GetPcapRequest_FieldPathArrayItemValue {
	return &GetPcapRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetPcapRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetPcapRequest_FieldPathValue allows storing values for GetPcapRequest fields according to their type
type GetPcapRequest_FieldPathValue interface {
	GetPcapRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPcapRequest)
	CompareWith(*GetPcapRequest) (cmp int, comparable bool)
}

func ParseGetPcapRequest_FieldPathValue(pathStr, valueStr string) (GetPcapRequest_FieldPathValue, error) {
	fp, err := ParseGetPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPcapRequest_FieldPathValue), nil
}

func MustParseGetPcapRequest_FieldPathValue(pathStr, valueStr string) GetPcapRequest_FieldPathValue {
	fpv, err := ParseGetPcapRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPcapRequest_FieldTerminalPathValue struct {
	GetPcapRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapRequest_FieldPathValue = (*GetPcapRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPcapRequest' as interface{}
func (fpv *GetPcapRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPcapRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetPcapRequest_FieldTerminalPathValue) AsIntervalValue() (*common.TimeInterval, bool) {
	res, ok := fpv.value.(*common.TimeInterval)
	return res, ok
}
func (fpv *GetPcapRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *GetPcapRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetPcapRequest
func (fpv *GetPcapRequest_FieldTerminalPathValue) SetTo(target **GetPcapRequest) {
	if *target == nil {
		*target = new(GetPcapRequest)
	}
	switch fpv.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case GetPcapRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*common.TimeInterval)
	case GetPcapRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case GetPcapRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPcapRequest_FieldTerminalPathValue' with the value under path in 'GetPcapRequest'.
func (fpv *GetPcapRequest_FieldTerminalPathValue) CompareWith(source *GetPcapRequest) (int, bool) {
	switch fpv.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPcapRequest_FieldPathSelectorInterval:
		return 0, false
	case GetPcapRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetPcapRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPcapRequest))
}

type GetPcapRequest_FieldSubPathValue struct {
	GetPcapRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetPcapRequest_FieldPathValue = (*GetPcapRequest_FieldSubPathValue)(nil)

func (fpvs *GetPcapRequest_FieldSubPathValue) AsIntervalPathValue() (common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *GetPcapRequest_FieldSubPathValue) SetTo(target **GetPcapRequest) {
	if *target == nil {
		*target = new(GetPcapRequest)
	}
	switch fpvs.Selector() {
	case GetPcapRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetPcapRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetPcapRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetPcapRequest_FieldSubPathValue) CompareWith(source *GetPcapRequest) (int, bool) {
	switch fpvs.Selector() {
	case GetPcapRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetPcapRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetPcapRequest))
}

// GetPcapRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPcapRequest according to their type
// Present only for array (repeated) types.
type GetPcapRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPcapRequest_FieldPath
	ContainsValue(*GetPcapRequest) bool
}

// ParseGetPcapRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPcapRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPcapRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPcapRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPcapRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPcapRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPcapRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPcapRequest_FieldTerminalPathArrayItemValue struct {
	GetPcapRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapRequest_FieldPathArrayItemValue = (*GetPcapRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPcapRequest as interface{}
func (fpaiv *GetPcapRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPcapRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPcapRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPcapRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPcapRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapRequest'
func (fpaiv *GetPcapRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPcapRequest) bool {
	slice := fpaiv.GetPcapRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetPcapRequest_FieldSubPathArrayItemValue struct {
	GetPcapRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetPcapRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetPcapRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapRequest'
func (fpaivs *GetPcapRequest_FieldSubPathArrayItemValue) ContainsValue(source *GetPcapRequest) bool {
	switch fpaivs.Selector() {
	case GetPcapRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapRequest: %d", fpaivs.Selector()))
	}
}

// GetPcapRequest_FieldPathArrayOfValues allows storing slice of values for GetPcapRequest fields according to their type
type GetPcapRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPcapRequest_FieldPath
}

func ParseGetPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPcapRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPcapRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPcapRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPcapRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPcapRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPcapRequest_FieldTerminalPathArrayOfValues struct {
	GetPcapRequest_FieldTerminalPath
	values interface{}
}

var _ GetPcapRequest_FieldPathArrayOfValues = (*GetPcapRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPcapRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPcapRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetPcapRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*common.TimeInterval) {
			values = append(values, v)
		}
	case GetPcapRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case GetPcapRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPcapRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetPcapRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*common.TimeInterval)
	return res, ok
}
func (fpaov *GetPcapRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *GetPcapRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetPcapRequest_FieldSubPathArrayOfValues struct {
	GetPcapRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetPcapRequest_FieldPathArrayOfValues = (*GetPcapRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetPcapRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetPcapRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPcapResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPcapResponse_FieldPathSelector
	Get(source *GetPcapResponse) []interface{}
	GetSingle(source *GetPcapResponse) (interface{}, bool)
	ClearValue(item *GetPcapResponse)

	// Those methods build corresponding GetPcapResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPcapResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPcapResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPcapResponse_FieldPathArrayItemValue
}

type GetPcapResponse_FieldPathSelector int32

const (
	GetPcapResponse_FieldPathSelectorPcapBytes GetPcapResponse_FieldPathSelector = 0
)

func (s GetPcapResponse_FieldPathSelector) String() string {
	switch s {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		return "pcap_bytes"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", s))
	}
}

func BuildGetPcapResponse_FieldPath(fp gotenobject.RawFieldPath) (GetPcapResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPcapResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pcap_bytes", "pcapBytes", "pcap-bytes":
			return &GetPcapResponse_FieldTerminalPath{selector: GetPcapResponse_FieldPathSelectorPcapBytes}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPcapResponse", fp)
}

func ParseGetPcapResponse_FieldPath(rawField string) (GetPcapResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPcapResponse_FieldPath(fp)
}

func MustParseGetPcapResponse_FieldPath(rawField string) GetPcapResponse_FieldPath {
	fp, err := ParseGetPcapResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPcapResponse_FieldTerminalPath struct {
	selector GetPcapResponse_FieldPathSelector
}

var _ GetPcapResponse_FieldPath = (*GetPcapResponse_FieldTerminalPath)(nil)

func (fp *GetPcapResponse_FieldTerminalPath) Selector() GetPcapResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPcapResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPcapResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPcapResponse
func (fp *GetPcapResponse_FieldTerminalPath) Get(source *GetPcapResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPcapResponse_FieldPathSelectorPcapBytes:
			values = append(values, source.PcapBytes)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPcapResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPcapResponse))
}

// GetSingle returns value pointed by specific field of from source GetPcapResponse
func (fp *GetPcapResponse_FieldTerminalPath) GetSingle(source *GetPcapResponse) (interface{}, bool) {
	switch fp.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		res := source.GetPcapBytes()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
	}
}

func (fp *GetPcapResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPcapResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetPcapResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
	}
}

func (fp *GetPcapResponse_FieldTerminalPath) ClearValue(item *GetPcapResponse) {
	if item != nil {
		switch fp.selector {
		case GetPcapResponse_FieldPathSelectorPcapBytes:
			item.PcapBytes = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
		}
	}
}

func (fp *GetPcapResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPcapResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPcapResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPcapResponse_FieldPathSelectorPcapBytes
}

func (fp *GetPcapResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPcapResponse_FieldTerminalPath) WithIValue(value interface{}) GetPcapResponse_FieldPathValue {
	switch fp.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		return &GetPcapResponse_FieldTerminalPathValue{GetPcapResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
	}
}

func (fp *GetPcapResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPcapResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPcapResponse_FieldPathArrayOfValues {
	fpaov := &GetPcapResponse_FieldTerminalPathArrayOfValues{GetPcapResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		return &GetPcapResponse_FieldTerminalPathArrayOfValues{GetPcapResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPcapResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPcapResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPcapResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fp.selector))
	}
}

func (fp *GetPcapResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPcapResponse_FieldPathValue allows storing values for GetPcapResponse fields according to their type
type GetPcapResponse_FieldPathValue interface {
	GetPcapResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPcapResponse)
	CompareWith(*GetPcapResponse) (cmp int, comparable bool)
}

func ParseGetPcapResponse_FieldPathValue(pathStr, valueStr string) (GetPcapResponse_FieldPathValue, error) {
	fp, err := ParseGetPcapResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPcapResponse_FieldPathValue), nil
}

func MustParseGetPcapResponse_FieldPathValue(pathStr, valueStr string) GetPcapResponse_FieldPathValue {
	fpv, err := ParseGetPcapResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPcapResponse_FieldTerminalPathValue struct {
	GetPcapResponse_FieldTerminalPath
	value interface{}
}

var _ GetPcapResponse_FieldPathValue = (*GetPcapResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPcapResponse' as interface{}
func (fpv *GetPcapResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPcapResponse_FieldTerminalPathValue) AsPcapBytesValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object GetPcapResponse
func (fpv *GetPcapResponse_FieldTerminalPathValue) SetTo(target **GetPcapResponse) {
	if *target == nil {
		*target = new(GetPcapResponse)
	}
	switch fpv.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		(*target).PcapBytes = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fpv.selector))
	}
}

func (fpv *GetPcapResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPcapResponse_FieldTerminalPathValue' with the value under path in 'GetPcapResponse'.
func (fpv *GetPcapResponse_FieldTerminalPathValue) CompareWith(source *GetPcapResponse) (int, bool) {
	switch fpv.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapResponse: %d", fpv.selector))
	}
}

func (fpv *GetPcapResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPcapResponse))
}

// GetPcapResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPcapResponse according to their type
// Present only for array (repeated) types.
type GetPcapResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPcapResponse_FieldPath
	ContainsValue(*GetPcapResponse) bool
}

// ParseGetPcapResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPcapResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetPcapResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPcapResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPcapResponse_FieldPathArrayItemValue), nil
}

func MustParseGetPcapResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetPcapResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPcapResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPcapResponse_FieldTerminalPathArrayItemValue struct {
	GetPcapResponse_FieldTerminalPath
	value interface{}
}

var _ GetPcapResponse_FieldPathArrayItemValue = (*GetPcapResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPcapResponse as interface{}
func (fpaiv *GetPcapResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPcapResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetPcapResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPcapResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPcapResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapResponse'
func (fpaiv *GetPcapResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPcapResponse) bool {
	slice := fpaiv.GetPcapResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPcapResponse_FieldPathArrayOfValues allows storing slice of values for GetPcapResponse fields according to their type
type GetPcapResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPcapResponse_FieldPath
}

func ParseGetPcapResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPcapResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPcapResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPcapResponse_FieldPathArrayOfValues), nil
}

func MustParseGetPcapResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetPcapResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetPcapResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPcapResponse_FieldTerminalPathArrayOfValues struct {
	GetPcapResponse_FieldTerminalPath
	values interface{}
}

var _ GetPcapResponse_FieldPathArrayOfValues = (*GetPcapResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPcapResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPcapResponse_FieldPathSelectorPcapBytes:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPcapResponse_FieldTerminalPathArrayOfValues) AsPcapBytesArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPcapFileFromAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPcapFileFromAgentRequest_FieldPathSelector
	Get(source *GetPcapFileFromAgentRequest) []interface{}
	GetSingle(source *GetPcapFileFromAgentRequest) (interface{}, bool)
	ClearValue(item *GetPcapFileFromAgentRequest)

	// Those methods build corresponding GetPcapFileFromAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPcapFileFromAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPcapFileFromAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPcapFileFromAgentRequest_FieldPathArrayItemValue
}

type GetPcapFileFromAgentRequest_FieldPathSelector int32

const (
	GetPcapFileFromAgentRequest_FieldPathSelectorName GetPcapFileFromAgentRequest_FieldPathSelector = 0
)

func (s GetPcapFileFromAgentRequest_FieldPathSelector) String() string {
	switch s {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", s))
	}
}

func BuildGetPcapFileFromAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPcapFileFromAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPcapFileFromAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPcapFileFromAgentRequest_FieldTerminalPath{selector: GetPcapFileFromAgentRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPcapFileFromAgentRequest", fp)
}

func ParseGetPcapFileFromAgentRequest_FieldPath(rawField string) (GetPcapFileFromAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPcapFileFromAgentRequest_FieldPath(fp)
}

func MustParseGetPcapFileFromAgentRequest_FieldPath(rawField string) GetPcapFileFromAgentRequest_FieldPath {
	fp, err := ParseGetPcapFileFromAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPcapFileFromAgentRequest_FieldTerminalPath struct {
	selector GetPcapFileFromAgentRequest_FieldPathSelector
}

var _ GetPcapFileFromAgentRequest_FieldPath = (*GetPcapFileFromAgentRequest_FieldTerminalPath)(nil)

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) Selector() GetPcapFileFromAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPcapFileFromAgentRequest
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) Get(source *GetPcapFileFromAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPcapFileFromAgentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPcapFileFromAgentRequest))
}

// GetSingle returns value pointed by specific field of from source GetPcapFileFromAgentRequest
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) GetSingle(source *GetPcapFileFromAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPcapFileFromAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) ClearValue(item *GetPcapFileFromAgentRequest) {
	if item != nil {
		switch fp.selector {
		case GetPcapFileFromAgentRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPcapFileFromAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPcapFileFromAgentRequest_FieldPathSelectorName
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithIValue(value interface{}) GetPcapFileFromAgentRequest_FieldPathValue {
	switch fp.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		return &GetPcapFileFromAgentRequest_FieldTerminalPathValue{GetPcapFileFromAgentRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPcapFileFromAgentRequest_FieldPathArrayOfValues {
	fpaov := &GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues{GetPcapFileFromAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		return &GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues{GetPcapFileFromAgentRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPcapFileFromAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileFromAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPcapFileFromAgentRequest_FieldPathValue allows storing values for GetPcapFileFromAgentRequest fields according to their type
type GetPcapFileFromAgentRequest_FieldPathValue interface {
	GetPcapFileFromAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPcapFileFromAgentRequest)
	CompareWith(*GetPcapFileFromAgentRequest) (cmp int, comparable bool)
}

func ParseGetPcapFileFromAgentRequest_FieldPathValue(pathStr, valueStr string) (GetPcapFileFromAgentRequest_FieldPathValue, error) {
	fp, err := ParseGetPcapFileFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileFromAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPcapFileFromAgentRequest_FieldPathValue), nil
}

func MustParseGetPcapFileFromAgentRequest_FieldPathValue(pathStr, valueStr string) GetPcapFileFromAgentRequest_FieldPathValue {
	fpv, err := ParseGetPcapFileFromAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPcapFileFromAgentRequest_FieldTerminalPathValue struct {
	GetPcapFileFromAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileFromAgentRequest_FieldPathValue = (*GetPcapFileFromAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPcapFileFromAgentRequest' as interface{}
func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object GetPcapFileFromAgentRequest
func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) SetTo(target **GetPcapFileFromAgentRequest) {
	if *target == nil {
		*target = new(GetPcapFileFromAgentRequest)
	}
	switch fpv.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapFileFromAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPcapFileFromAgentRequest_FieldTerminalPathValue' with the value under path in 'GetPcapFileFromAgentRequest'.
func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) CompareWith(source *GetPcapFileFromAgentRequest) (int, bool) {
	switch fpv.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileFromAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileFromAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPcapFileFromAgentRequest))
}

// GetPcapFileFromAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPcapFileFromAgentRequest according to their type
// Present only for array (repeated) types.
type GetPcapFileFromAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPcapFileFromAgentRequest_FieldPath
	ContainsValue(*GetPcapFileFromAgentRequest) bool
}

// ParseGetPcapFileFromAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPcapFileFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPcapFileFromAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPcapFileFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileFromAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPcapFileFromAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPcapFileFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPcapFileFromAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPcapFileFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue struct {
	GetPcapFileFromAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileFromAgentRequest_FieldPathArrayItemValue = (*GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPcapFileFromAgentRequest as interface{}
func (fpaiv *GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPcapFileFromAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPcapFileFromAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapFileFromAgentRequest'
func (fpaiv *GetPcapFileFromAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPcapFileFromAgentRequest) bool {
	slice := fpaiv.GetPcapFileFromAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPcapFileFromAgentRequest_FieldPathArrayOfValues allows storing slice of values for GetPcapFileFromAgentRequest fields according to their type
type GetPcapFileFromAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPcapFileFromAgentRequest_FieldPath
}

func ParseGetPcapFileFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPcapFileFromAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPcapFileFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileFromAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPcapFileFromAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPcapFileFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPcapFileFromAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPcapFileFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues struct {
	GetPcapFileFromAgentRequest_FieldTerminalPath
	values interface{}
}

var _ GetPcapFileFromAgentRequest_FieldPathArrayOfValues = (*GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPcapFileFromAgentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPcapFileFromAgentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPcapFileInfoFromAgentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPcapFileInfoFromAgentRequest_FieldPathSelector
	Get(source *GetPcapFileInfoFromAgentRequest) []interface{}
	GetSingle(source *GetPcapFileInfoFromAgentRequest) (interface{}, bool)
	ClearValue(item *GetPcapFileInfoFromAgentRequest)

	// Those methods build corresponding GetPcapFileInfoFromAgentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPcapFileInfoFromAgentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue
}

type GetPcapFileInfoFromAgentRequest_FieldPathSelector int32

const (
	GetPcapFileInfoFromAgentRequest_FieldPathSelectorName GetPcapFileInfoFromAgentRequest_FieldPathSelector = 0
)

func (s GetPcapFileInfoFromAgentRequest_FieldPathSelector) String() string {
	switch s {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", s))
	}
}

func BuildGetPcapFileInfoFromAgentRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPcapFileInfoFromAgentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPcapFileInfoFromAgentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPcapFileInfoFromAgentRequest_FieldTerminalPath{selector: GetPcapFileInfoFromAgentRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPcapFileInfoFromAgentRequest", fp)
}

func ParseGetPcapFileInfoFromAgentRequest_FieldPath(rawField string) (GetPcapFileInfoFromAgentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPcapFileInfoFromAgentRequest_FieldPath(fp)
}

func MustParseGetPcapFileInfoFromAgentRequest_FieldPath(rawField string) GetPcapFileInfoFromAgentRequest_FieldPath {
	fp, err := ParseGetPcapFileInfoFromAgentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPcapFileInfoFromAgentRequest_FieldTerminalPath struct {
	selector GetPcapFileInfoFromAgentRequest_FieldPathSelector
}

var _ GetPcapFileInfoFromAgentRequest_FieldPath = (*GetPcapFileInfoFromAgentRequest_FieldTerminalPath)(nil)

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) Selector() GetPcapFileInfoFromAgentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPcapFileInfoFromAgentRequest
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) Get(source *GetPcapFileInfoFromAgentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPcapFileInfoFromAgentRequest))
}

// GetSingle returns value pointed by specific field of from source GetPcapFileInfoFromAgentRequest
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) GetSingle(source *GetPcapFileInfoFromAgentRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPcapFileInfoFromAgentRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) ClearValue(item *GetPcapFileInfoFromAgentRequest) {
	if item != nil {
		switch fp.selector {
		case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPcapFileInfoFromAgentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPcapFileInfoFromAgentRequest_FieldPathSelectorName
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithIValue(value interface{}) GetPcapFileInfoFromAgentRequest_FieldPathValue {
	switch fp.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		return &GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue{GetPcapFileInfoFromAgentRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues {
	fpaov := &GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		return &GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPcapFileInfoFromAgentRequest_FieldPathValue allows storing values for GetPcapFileInfoFromAgentRequest fields according to their type
type GetPcapFileInfoFromAgentRequest_FieldPathValue interface {
	GetPcapFileInfoFromAgentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPcapFileInfoFromAgentRequest)
	CompareWith(*GetPcapFileInfoFromAgentRequest) (cmp int, comparable bool)
}

func ParseGetPcapFileInfoFromAgentRequest_FieldPathValue(pathStr, valueStr string) (GetPcapFileInfoFromAgentRequest_FieldPathValue, error) {
	fp, err := ParseGetPcapFileInfoFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPcapFileInfoFromAgentRequest_FieldPathValue), nil
}

func MustParseGetPcapFileInfoFromAgentRequest_FieldPathValue(pathStr, valueStr string) GetPcapFileInfoFromAgentRequest_FieldPathValue {
	fpv, err := ParseGetPcapFileInfoFromAgentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue struct {
	GetPcapFileInfoFromAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileInfoFromAgentRequest_FieldPathValue = (*GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPcapFileInfoFromAgentRequest' as interface{}
func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object GetPcapFileInfoFromAgentRequest
func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) SetTo(target **GetPcapFileInfoFromAgentRequest) {
	if *target == nil {
		*target = new(GetPcapFileInfoFromAgentRequest)
	}
	switch fpv.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapFileInfoFromAgentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue' with the value under path in 'GetPcapFileInfoFromAgentRequest'.
func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) CompareWith(source *GetPcapFileInfoFromAgentRequest) (int, bool) {
	switch fpv.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPcapFileInfoFromAgentRequest))
}

// GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPcapFileInfoFromAgentRequest according to their type
// Present only for array (repeated) types.
type GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPcapFileInfoFromAgentRequest_FieldPath
	ContainsValue(*GetPcapFileInfoFromAgentRequest) bool
}

// ParseGetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPcapFileInfoFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue struct {
	GetPcapFileInfoFromAgentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileInfoFromAgentRequest_FieldPathArrayItemValue = (*GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPcapFileInfoFromAgentRequest as interface{}
func (fpaiv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPcapFileInfoFromAgentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPcapFileInfoFromAgentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapFileInfoFromAgentRequest'
func (fpaiv *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPcapFileInfoFromAgentRequest) bool {
	slice := fpaiv.GetPcapFileInfoFromAgentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues allows storing slice of values for GetPcapFileInfoFromAgentRequest fields according to their type
type GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPcapFileInfoFromAgentRequest_FieldPath
}

func ParseGetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPcapFileInfoFromAgentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues struct {
	GetPcapFileInfoFromAgentRequest_FieldTerminalPath
	values interface{}
}

var _ GetPcapFileInfoFromAgentRequest_FieldPathArrayOfValues = (*GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPcapFileInfoFromAgentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPcapFileInfoFromAgentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPcapFileInfoFromAgentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPcapFileInfoFromAgentResponse_FieldPathSelector
	Get(source *GetPcapFileInfoFromAgentResponse) []interface{}
	GetSingle(source *GetPcapFileInfoFromAgentResponse) (interface{}, bool)
	ClearValue(item *GetPcapFileInfoFromAgentResponse)

	// Those methods build corresponding GetPcapFileInfoFromAgentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPcapFileInfoFromAgentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue
}

type GetPcapFileInfoFromAgentResponse_FieldPathSelector int32

const (
	GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime GetPcapFileInfoFromAgentResponse_FieldPathSelector = 0
	GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime   GetPcapFileInfoFromAgentResponse_FieldPathSelector = 1
	GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes GetPcapFileInfoFromAgentResponse_FieldPathSelector = 2
)

func (s GetPcapFileInfoFromAgentResponse_FieldPathSelector) String() string {
	switch s {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		return "start_time"
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		return "end_time"
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		return "size_bytes"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", s))
	}
}

func BuildGetPcapFileInfoFromAgentResponse_FieldPath(fp gotenobject.RawFieldPath) (GetPcapFileInfoFromAgentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPcapFileInfoFromAgentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "start_time", "startTime", "start-time":
			return &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime}, nil
		case "end_time", "endTime", "end-time":
			return &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPcapFileInfoFromAgentResponse", fp)
}

func ParseGetPcapFileInfoFromAgentResponse_FieldPath(rawField string) (GetPcapFileInfoFromAgentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPcapFileInfoFromAgentResponse_FieldPath(fp)
}

func MustParseGetPcapFileInfoFromAgentResponse_FieldPath(rawField string) GetPcapFileInfoFromAgentResponse_FieldPath {
	fp, err := ParseGetPcapFileInfoFromAgentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPcapFileInfoFromAgentResponse_FieldTerminalPath struct {
	selector GetPcapFileInfoFromAgentResponse_FieldPathSelector
}

var _ GetPcapFileInfoFromAgentResponse_FieldPath = (*GetPcapFileInfoFromAgentResponse_FieldTerminalPath)(nil)

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) Selector() GetPcapFileInfoFromAgentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPcapFileInfoFromAgentResponse
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) Get(source *GetPcapFileInfoFromAgentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
			if source.StartTime != nil {
				values = append(values, source.StartTime)
			}
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
			if source.EndTime != nil {
				values = append(values, source.EndTime)
			}
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPcapFileInfoFromAgentResponse))
}

// GetSingle returns value pointed by specific field of from source GetPcapFileInfoFromAgentResponse
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) GetSingle(source *GetPcapFileInfoFromAgentResponse) (interface{}, bool) {
	switch fp.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		res := source.GetStartTime()
		return res, res != nil
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		res := source.GetEndTime()
		return res, res != nil
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPcapFileInfoFromAgentResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		return (*timestamp.Timestamp)(nil)
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		return (*timestamp.Timestamp)(nil)
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) ClearValue(item *GetPcapFileInfoFromAgentResponse) {
	if item != nil {
		switch fp.selector {
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
			item.StartTime = nil
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
			item.EndTime = nil
		case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
		}
	}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPcapFileInfoFromAgentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime ||
		fp.selector == GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime ||
		fp.selector == GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithIValue(value interface{}) GetPcapFileInfoFromAgentResponse_FieldPathValue {
	switch fp.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues {
	fpaov := &GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		return &GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues{GetPcapFileInfoFromAgentResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fp.selector))
	}
}

func (fp *GetPcapFileInfoFromAgentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPcapFileInfoFromAgentResponse_FieldPathValue allows storing values for GetPcapFileInfoFromAgentResponse fields according to their type
type GetPcapFileInfoFromAgentResponse_FieldPathValue interface {
	GetPcapFileInfoFromAgentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPcapFileInfoFromAgentResponse)
	CompareWith(*GetPcapFileInfoFromAgentResponse) (cmp int, comparable bool)
}

func ParseGetPcapFileInfoFromAgentResponse_FieldPathValue(pathStr, valueStr string) (GetPcapFileInfoFromAgentResponse_FieldPathValue, error) {
	fp, err := ParseGetPcapFileInfoFromAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPcapFileInfoFromAgentResponse_FieldPathValue), nil
}

func MustParseGetPcapFileInfoFromAgentResponse_FieldPathValue(pathStr, valueStr string) GetPcapFileInfoFromAgentResponse_FieldPathValue {
	fpv, err := ParseGetPcapFileInfoFromAgentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue struct {
	GetPcapFileInfoFromAgentResponse_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileInfoFromAgentResponse_FieldPathValue = (*GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPcapFileInfoFromAgentResponse' as interface{}
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) AsStartTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) AsEndTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object GetPcapFileInfoFromAgentResponse
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) SetTo(target **GetPcapFileInfoFromAgentResponse) {
	if *target == nil {
		*target = new(GetPcapFileInfoFromAgentResponse)
	}
	switch fpv.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		(*target).StartTime = fpv.value.(*timestamp.Timestamp)
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		(*target).EndTime = fpv.value.(*timestamp.Timestamp)
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPcapFileInfoFromAgentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue' with the value under path in 'GetPcapFileInfoFromAgentResponse'.
func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) CompareWith(source *GetPcapFileInfoFromAgentResponse) (int, bool) {
	switch fpv.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetEndTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPcapFileInfoFromAgentResponse: %d", fpv.selector))
	}
}

func (fpv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPcapFileInfoFromAgentResponse))
}

// GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPcapFileInfoFromAgentResponse according to their type
// Present only for array (repeated) types.
type GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPcapFileInfoFromAgentResponse_FieldPath
	ContainsValue(*GetPcapFileInfoFromAgentResponse) bool
}

// ParseGetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPcapFileInfoFromAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue), nil
}

func MustParseGetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue struct {
	GetPcapFileInfoFromAgentResponse_FieldTerminalPath
	value interface{}
}

var _ GetPcapFileInfoFromAgentResponse_FieldPathArrayItemValue = (*GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPcapFileInfoFromAgentResponse as interface{}
func (fpaiv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetPcapFileInfoFromAgentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPcapFileInfoFromAgentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPcapFileInfoFromAgentResponse'
func (fpaiv *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPcapFileInfoFromAgentResponse) bool {
	slice := fpaiv.GetPcapFileInfoFromAgentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues allows storing slice of values for GetPcapFileInfoFromAgentResponse fields according to their type
type GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPcapFileInfoFromAgentResponse_FieldPath
}

func ParseGetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPcapFileInfoFromAgentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPcapFileInfoFromAgentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues), nil
}

func MustParseGetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues struct {
	GetPcapFileInfoFromAgentResponse_FieldTerminalPath
	values interface{}
}

var _ GetPcapFileInfoFromAgentResponse_FieldPathArrayOfValues = (*GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues) AsStartTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues) AsEndTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *GetPcapFileInfoFromAgentResponse_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckPcapIsRunningRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckPcapIsRunningRequest_FieldPathSelector
	Get(source *CheckPcapIsRunningRequest) []interface{}
	GetSingle(source *CheckPcapIsRunningRequest) (interface{}, bool)
	ClearValue(item *CheckPcapIsRunningRequest)

	// Those methods build corresponding CheckPcapIsRunningRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckPcapIsRunningRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckPcapIsRunningRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckPcapIsRunningRequest_FieldPathArrayItemValue
}

type CheckPcapIsRunningRequest_FieldPathSelector int32

const (
	CheckPcapIsRunningRequest_FieldPathSelectorName CheckPcapIsRunningRequest_FieldPathSelector = 0
)

func (s CheckPcapIsRunningRequest_FieldPathSelector) String() string {
	switch s {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", s))
	}
}

func BuildCheckPcapIsRunningRequest_FieldPath(fp gotenobject.RawFieldPath) (CheckPcapIsRunningRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckPcapIsRunningRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &CheckPcapIsRunningRequest_FieldTerminalPath{selector: CheckPcapIsRunningRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckPcapIsRunningRequest", fp)
}

func ParseCheckPcapIsRunningRequest_FieldPath(rawField string) (CheckPcapIsRunningRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckPcapIsRunningRequest_FieldPath(fp)
}

func MustParseCheckPcapIsRunningRequest_FieldPath(rawField string) CheckPcapIsRunningRequest_FieldPath {
	fp, err := ParseCheckPcapIsRunningRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckPcapIsRunningRequest_FieldTerminalPath struct {
	selector CheckPcapIsRunningRequest_FieldPathSelector
}

var _ CheckPcapIsRunningRequest_FieldPath = (*CheckPcapIsRunningRequest_FieldTerminalPath)(nil)

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) Selector() CheckPcapIsRunningRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckPcapIsRunningRequest
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) Get(source *CheckPcapIsRunningRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckPcapIsRunningRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckPcapIsRunningRequest))
}

// GetSingle returns value pointed by specific field of from source CheckPcapIsRunningRequest
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) GetSingle(source *CheckPcapIsRunningRequest) (interface{}, bool) {
	switch fp.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckPcapIsRunningRequest))
}

// GetDefault returns a default value of the field type
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) ClearValue(item *CheckPcapIsRunningRequest) {
	if item != nil {
		switch fp.selector {
		case CheckPcapIsRunningRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
		}
	}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckPcapIsRunningRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CheckPcapIsRunningRequest_FieldPathSelectorName
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithIValue(value interface{}) CheckPcapIsRunningRequest_FieldPathValue {
	switch fp.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		return &CheckPcapIsRunningRequest_FieldTerminalPathValue{CheckPcapIsRunningRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckPcapIsRunningRequest_FieldPathArrayOfValues {
	fpaov := &CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues{CheckPcapIsRunningRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		return &CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues{CheckPcapIsRunningRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckPcapIsRunningRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CheckPcapIsRunningRequest_FieldPathValue allows storing values for CheckPcapIsRunningRequest fields according to their type
type CheckPcapIsRunningRequest_FieldPathValue interface {
	CheckPcapIsRunningRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckPcapIsRunningRequest)
	CompareWith(*CheckPcapIsRunningRequest) (cmp int, comparable bool)
}

func ParseCheckPcapIsRunningRequest_FieldPathValue(pathStr, valueStr string) (CheckPcapIsRunningRequest_FieldPathValue, error) {
	fp, err := ParseCheckPcapIsRunningRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckPcapIsRunningRequest_FieldPathValue), nil
}

func MustParseCheckPcapIsRunningRequest_FieldPathValue(pathStr, valueStr string) CheckPcapIsRunningRequest_FieldPathValue {
	fpv, err := ParseCheckPcapIsRunningRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckPcapIsRunningRequest_FieldTerminalPathValue struct {
	CheckPcapIsRunningRequest_FieldTerminalPath
	value interface{}
}

var _ CheckPcapIsRunningRequest_FieldPathValue = (*CheckPcapIsRunningRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckPcapIsRunningRequest' as interface{}
func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object CheckPcapIsRunningRequest
func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) SetTo(target **CheckPcapIsRunningRequest) {
	if *target == nil {
		*target = new(CheckPcapIsRunningRequest)
	}
	switch fpv.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fpv.selector))
	}
}

func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPcapIsRunningRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckPcapIsRunningRequest_FieldTerminalPathValue' with the value under path in 'CheckPcapIsRunningRequest'.
func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) CompareWith(source *CheckPcapIsRunningRequest) (int, bool) {
	switch fpv.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningRequest: %d", fpv.selector))
	}
}

func (fpv *CheckPcapIsRunningRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckPcapIsRunningRequest))
}

// CheckPcapIsRunningRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckPcapIsRunningRequest according to their type
// Present only for array (repeated) types.
type CheckPcapIsRunningRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckPcapIsRunningRequest_FieldPath
	ContainsValue(*CheckPcapIsRunningRequest) bool
}

// ParseCheckPcapIsRunningRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckPcapIsRunningRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CheckPcapIsRunningRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckPcapIsRunningRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckPcapIsRunningRequest_FieldPathArrayItemValue), nil
}

func MustParseCheckPcapIsRunningRequest_FieldPathArrayItemValue(pathStr, valueStr string) CheckPcapIsRunningRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckPcapIsRunningRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue struct {
	CheckPcapIsRunningRequest_FieldTerminalPath
	value interface{}
}

var _ CheckPcapIsRunningRequest_FieldPathArrayItemValue = (*CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckPcapIsRunningRequest as interface{}
func (fpaiv *CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CheckPcapIsRunningRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckPcapIsRunningRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPcapIsRunningRequest'
func (fpaiv *CheckPcapIsRunningRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckPcapIsRunningRequest) bool {
	slice := fpaiv.CheckPcapIsRunningRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CheckPcapIsRunningRequest_FieldPathArrayOfValues allows storing slice of values for CheckPcapIsRunningRequest fields according to their type
type CheckPcapIsRunningRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckPcapIsRunningRequest_FieldPath
}

func ParseCheckPcapIsRunningRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckPcapIsRunningRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckPcapIsRunningRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckPcapIsRunningRequest_FieldPathArrayOfValues), nil
}

func MustParseCheckPcapIsRunningRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CheckPcapIsRunningRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCheckPcapIsRunningRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues struct {
	CheckPcapIsRunningRequest_FieldTerminalPath
	values interface{}
}

var _ CheckPcapIsRunningRequest_FieldPathArrayOfValues = (*CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckPcapIsRunningRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckPcapIsRunningRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CheckPcapIsRunningResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CheckPcapIsRunningResponse_FieldPathSelector
	Get(source *CheckPcapIsRunningResponse) []interface{}
	GetSingle(source *CheckPcapIsRunningResponse) (interface{}, bool)
	ClearValue(item *CheckPcapIsRunningResponse)

	// Those methods build corresponding CheckPcapIsRunningResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CheckPcapIsRunningResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CheckPcapIsRunningResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CheckPcapIsRunningResponse_FieldPathArrayItemValue
}

type CheckPcapIsRunningResponse_FieldPathSelector int32

const (
	CheckPcapIsRunningResponse_FieldPathSelectorIsRunning CheckPcapIsRunningResponse_FieldPathSelector = 0
)

func (s CheckPcapIsRunningResponse_FieldPathSelector) String() string {
	switch s {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		return "is_running"
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", s))
	}
}

func BuildCheckPcapIsRunningResponse_FieldPath(fp gotenobject.RawFieldPath) (CheckPcapIsRunningResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CheckPcapIsRunningResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "is_running", "isRunning", "is-running":
			return &CheckPcapIsRunningResponse_FieldTerminalPath{selector: CheckPcapIsRunningResponse_FieldPathSelectorIsRunning}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CheckPcapIsRunningResponse", fp)
}

func ParseCheckPcapIsRunningResponse_FieldPath(rawField string) (CheckPcapIsRunningResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCheckPcapIsRunningResponse_FieldPath(fp)
}

func MustParseCheckPcapIsRunningResponse_FieldPath(rawField string) CheckPcapIsRunningResponse_FieldPath {
	fp, err := ParseCheckPcapIsRunningResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CheckPcapIsRunningResponse_FieldTerminalPath struct {
	selector CheckPcapIsRunningResponse_FieldPathSelector
}

var _ CheckPcapIsRunningResponse_FieldPath = (*CheckPcapIsRunningResponse_FieldTerminalPath)(nil)

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) Selector() CheckPcapIsRunningResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CheckPcapIsRunningResponse
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) Get(source *CheckPcapIsRunningResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
			values = append(values, source.IsRunning)
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CheckPcapIsRunningResponse))
}

// GetSingle returns value pointed by specific field of from source CheckPcapIsRunningResponse
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) GetSingle(source *CheckPcapIsRunningResponse) (interface{}, bool) {
	switch fp.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		return source.GetIsRunning(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CheckPcapIsRunningResponse))
}

// GetDefault returns a default value of the field type
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) ClearValue(item *CheckPcapIsRunningResponse) {
	if item != nil {
		switch fp.selector {
		case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
			item.IsRunning = false
		default:
			panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
		}
	}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CheckPcapIsRunningResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CheckPcapIsRunningResponse_FieldPathSelectorIsRunning
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithIValue(value interface{}) CheckPcapIsRunningResponse_FieldPathValue {
	switch fp.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		return &CheckPcapIsRunningResponse_FieldTerminalPathValue{CheckPcapIsRunningResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CheckPcapIsRunningResponse_FieldPathArrayOfValues {
	fpaov := &CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues{CheckPcapIsRunningResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		return &CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues{CheckPcapIsRunningResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CheckPcapIsRunningResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fp.selector))
	}
}

func (fp *CheckPcapIsRunningResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CheckPcapIsRunningResponse_FieldPathValue allows storing values for CheckPcapIsRunningResponse fields according to their type
type CheckPcapIsRunningResponse_FieldPathValue interface {
	CheckPcapIsRunningResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CheckPcapIsRunningResponse)
	CompareWith(*CheckPcapIsRunningResponse) (cmp int, comparable bool)
}

func ParseCheckPcapIsRunningResponse_FieldPathValue(pathStr, valueStr string) (CheckPcapIsRunningResponse_FieldPathValue, error) {
	fp, err := ParseCheckPcapIsRunningResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CheckPcapIsRunningResponse_FieldPathValue), nil
}

func MustParseCheckPcapIsRunningResponse_FieldPathValue(pathStr, valueStr string) CheckPcapIsRunningResponse_FieldPathValue {
	fpv, err := ParseCheckPcapIsRunningResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CheckPcapIsRunningResponse_FieldTerminalPathValue struct {
	CheckPcapIsRunningResponse_FieldTerminalPath
	value interface{}
}

var _ CheckPcapIsRunningResponse_FieldPathValue = (*CheckPcapIsRunningResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CheckPcapIsRunningResponse' as interface{}
func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) AsIsRunningValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object CheckPcapIsRunningResponse
func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) SetTo(target **CheckPcapIsRunningResponse) {
	if *target == nil {
		*target = new(CheckPcapIsRunningResponse)
	}
	switch fpv.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		(*target).IsRunning = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fpv.selector))
	}
}

func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CheckPcapIsRunningResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CheckPcapIsRunningResponse_FieldTerminalPathValue' with the value under path in 'CheckPcapIsRunningResponse'.
func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) CompareWith(source *CheckPcapIsRunningResponse) (int, bool) {
	switch fpv.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsRunning()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CheckPcapIsRunningResponse: %d", fpv.selector))
	}
}

func (fpv *CheckPcapIsRunningResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CheckPcapIsRunningResponse))
}

// CheckPcapIsRunningResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CheckPcapIsRunningResponse according to their type
// Present only for array (repeated) types.
type CheckPcapIsRunningResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CheckPcapIsRunningResponse_FieldPath
	ContainsValue(*CheckPcapIsRunningResponse) bool
}

// ParseCheckPcapIsRunningResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCheckPcapIsRunningResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CheckPcapIsRunningResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCheckPcapIsRunningResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CheckPcapIsRunningResponse_FieldPathArrayItemValue), nil
}

func MustParseCheckPcapIsRunningResponse_FieldPathArrayItemValue(pathStr, valueStr string) CheckPcapIsRunningResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCheckPcapIsRunningResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue struct {
	CheckPcapIsRunningResponse_FieldTerminalPath
	value interface{}
}

var _ CheckPcapIsRunningResponse_FieldPathArrayItemValue = (*CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CheckPcapIsRunningResponse as interface{}
func (fpaiv *CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CheckPcapIsRunningResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CheckPcapIsRunningResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CheckPcapIsRunningResponse'
func (fpaiv *CheckPcapIsRunningResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CheckPcapIsRunningResponse) bool {
	slice := fpaiv.CheckPcapIsRunningResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CheckPcapIsRunningResponse_FieldPathArrayOfValues allows storing slice of values for CheckPcapIsRunningResponse fields according to their type
type CheckPcapIsRunningResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CheckPcapIsRunningResponse_FieldPath
}

func ParseCheckPcapIsRunningResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CheckPcapIsRunningResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCheckPcapIsRunningResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CheckPcapIsRunningResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CheckPcapIsRunningResponse_FieldPathArrayOfValues), nil
}

func MustParseCheckPcapIsRunningResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CheckPcapIsRunningResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCheckPcapIsRunningResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues struct {
	CheckPcapIsRunningResponse_FieldTerminalPath
	values interface{}
}

var _ CheckPcapIsRunningResponse_FieldPathArrayOfValues = (*CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CheckPcapIsRunningResponse_FieldPathSelectorIsRunning:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CheckPcapIsRunningResponse_FieldTerminalPathArrayOfValues) AsIsRunningArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
