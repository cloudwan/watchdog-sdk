// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/pcap_custom.proto
// DO NOT EDIT!!!

package pcap_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (o *ReportPcapRequest) GotenObjectExt() {}

func (o *ReportPcapRequest) MakeFullFieldMask() *ReportPcapRequest_FieldMask {
	return FullReportPcapRequest_FieldMask()
}

func (o *ReportPcapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullReportPcapRequest_FieldMask()
}

func (o *ReportPcapRequest) MakeDiffFieldMask(other *ReportPcapRequest) *ReportPcapRequest_FieldMask {
	if o == nil && other == nil {
		return &ReportPcapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullReportPcapRequest_FieldMask()
	}

	res := &ReportPcapRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorName})
	}
	if o.GetFilter() != other.GetFilter() {
		res.Paths = append(res.Paths, &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetStartTime(), other.GetStartTime()) {
		res.Paths = append(res.Paths, &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorStartTime})
	}
	if !proto.Equal(o.GetEndTime(), other.GetEndTime()) {
		res.Paths = append(res.Paths, &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorEndTime})
	}
	if string(o.GetPcapBytes()) != string(other.GetPcapBytes()) {
		res.Paths = append(res.Paths, &ReportPcapRequest_FieldTerminalPath{selector: ReportPcapRequest_FieldPathSelectorPcapBytes})
	}
	return res
}

func (o *ReportPcapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ReportPcapRequest))
}

func (o *ReportPcapRequest) Clone() *ReportPcapRequest {
	if o == nil {
		return nil
	}
	result := &ReportPcapRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Filter = o.Filter
	result.StartTime = proto.Clone(o.StartTime).(*timestamp.Timestamp)
	result.EndTime = proto.Clone(o.EndTime).(*timestamp.Timestamp)
	result.PcapBytes = make([]byte, len(o.PcapBytes))
	for i, bt := range o.PcapBytes {
		result.PcapBytes[i] = bt
	}
	return result
}

func (o *ReportPcapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ReportPcapRequest) Merge(source *ReportPcapRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Filter = source.GetFilter()
	if source.GetStartTime() != nil {
		if o.StartTime == nil {
			o.StartTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartTime, source.GetStartTime())
	}
	if source.GetEndTime() != nil {
		if o.EndTime == nil {
			o.EndTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.EndTime, source.GetEndTime())
	}
	o.PcapBytes = make([]byte, len(source.GetPcapBytes()))
	for i, bt := range source.GetPcapBytes() {
		o.PcapBytes[i] = bt
	}
}

func (o *ReportPcapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ReportPcapRequest))
}

func (o *GetPcapRequest) GotenObjectExt() {}

func (o *GetPcapRequest) MakeFullFieldMask() *GetPcapRequest_FieldMask {
	return FullGetPcapRequest_FieldMask()
}

func (o *GetPcapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPcapRequest_FieldMask()
}

func (o *GetPcapRequest) MakeDiffFieldMask(other *GetPcapRequest) *GetPcapRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPcapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPcapRequest_FieldMask()
	}

	res := &GetPcapRequest_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorProbe})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &GetPcapRequest_FieldSubPath{selector: GetPcapRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &GetPcapRequest_FieldTerminalPath{selector: GetPcapRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *GetPcapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPcapRequest))
}

func (o *GetPcapRequest) Clone() *GetPcapRequest {
	if o == nil {
		return nil
	}
	result := &GetPcapRequest{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *GetPcapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPcapRequest) Merge(source *GetPcapRequest) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *GetPcapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPcapRequest))
}

func (o *GetPcapResponse) GotenObjectExt() {}

func (o *GetPcapResponse) MakeFullFieldMask() *GetPcapResponse_FieldMask {
	return FullGetPcapResponse_FieldMask()
}

func (o *GetPcapResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPcapResponse_FieldMask()
}

func (o *GetPcapResponse) MakeDiffFieldMask(other *GetPcapResponse) *GetPcapResponse_FieldMask {
	if o == nil && other == nil {
		return &GetPcapResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPcapResponse_FieldMask()
	}

	res := &GetPcapResponse_FieldMask{}
	if string(o.GetPcapBytes()) != string(other.GetPcapBytes()) {
		res.Paths = append(res.Paths, &GetPcapResponse_FieldTerminalPath{selector: GetPcapResponse_FieldPathSelectorPcapBytes})
	}
	return res
}

func (o *GetPcapResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPcapResponse))
}

func (o *GetPcapResponse) Clone() *GetPcapResponse {
	if o == nil {
		return nil
	}
	result := &GetPcapResponse{}
	result.PcapBytes = make([]byte, len(o.PcapBytes))
	for i, bt := range o.PcapBytes {
		result.PcapBytes[i] = bt
	}
	return result
}

func (o *GetPcapResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPcapResponse) Merge(source *GetPcapResponse) {
	o.PcapBytes = make([]byte, len(source.GetPcapBytes()))
	for i, bt := range source.GetPcapBytes() {
		o.PcapBytes[i] = bt
	}
}

func (o *GetPcapResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPcapResponse))
}

func (o *GetPcapFileFromAgentRequest) GotenObjectExt() {}

func (o *GetPcapFileFromAgentRequest) MakeFullFieldMask() *GetPcapFileFromAgentRequest_FieldMask {
	return FullGetPcapFileFromAgentRequest_FieldMask()
}

func (o *GetPcapFileFromAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPcapFileFromAgentRequest_FieldMask()
}

func (o *GetPcapFileFromAgentRequest) MakeDiffFieldMask(other *GetPcapFileFromAgentRequest) *GetPcapFileFromAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPcapFileFromAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPcapFileFromAgentRequest_FieldMask()
	}

	res := &GetPcapFileFromAgentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPcapFileFromAgentRequest_FieldTerminalPath{selector: GetPcapFileFromAgentRequest_FieldPathSelectorName})
	}
	return res
}

func (o *GetPcapFileFromAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPcapFileFromAgentRequest))
}

func (o *GetPcapFileFromAgentRequest) Clone() *GetPcapFileFromAgentRequest {
	if o == nil {
		return nil
	}
	result := &GetPcapFileFromAgentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *GetPcapFileFromAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPcapFileFromAgentRequest) Merge(source *GetPcapFileFromAgentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *GetPcapFileFromAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPcapFileFromAgentRequest))
}

func (o *GetPcapFileInfoFromAgentRequest) GotenObjectExt() {}

func (o *GetPcapFileInfoFromAgentRequest) MakeFullFieldMask() *GetPcapFileInfoFromAgentRequest_FieldMask {
	return FullGetPcapFileInfoFromAgentRequest_FieldMask()
}

func (o *GetPcapFileInfoFromAgentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPcapFileInfoFromAgentRequest_FieldMask()
}

func (o *GetPcapFileInfoFromAgentRequest) MakeDiffFieldMask(other *GetPcapFileInfoFromAgentRequest) *GetPcapFileInfoFromAgentRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPcapFileInfoFromAgentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPcapFileInfoFromAgentRequest_FieldMask()
	}

	res := &GetPcapFileInfoFromAgentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPcapFileInfoFromAgentRequest_FieldTerminalPath{selector: GetPcapFileInfoFromAgentRequest_FieldPathSelectorName})
	}
	return res
}

func (o *GetPcapFileInfoFromAgentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPcapFileInfoFromAgentRequest))
}

func (o *GetPcapFileInfoFromAgentRequest) Clone() *GetPcapFileInfoFromAgentRequest {
	if o == nil {
		return nil
	}
	result := &GetPcapFileInfoFromAgentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *GetPcapFileInfoFromAgentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPcapFileInfoFromAgentRequest) Merge(source *GetPcapFileInfoFromAgentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *GetPcapFileInfoFromAgentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPcapFileInfoFromAgentRequest))
}

func (o *GetPcapFileInfoFromAgentResponse) GotenObjectExt() {}

func (o *GetPcapFileInfoFromAgentResponse) MakeFullFieldMask() *GetPcapFileInfoFromAgentResponse_FieldMask {
	return FullGetPcapFileInfoFromAgentResponse_FieldMask()
}

func (o *GetPcapFileInfoFromAgentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPcapFileInfoFromAgentResponse_FieldMask()
}

func (o *GetPcapFileInfoFromAgentResponse) MakeDiffFieldMask(other *GetPcapFileInfoFromAgentResponse) *GetPcapFileInfoFromAgentResponse_FieldMask {
	if o == nil && other == nil {
		return &GetPcapFileInfoFromAgentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPcapFileInfoFromAgentResponse_FieldMask()
	}

	res := &GetPcapFileInfoFromAgentResponse_FieldMask{}
	if !proto.Equal(o.GetStartTime(), other.GetStartTime()) {
		res.Paths = append(res.Paths, &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorStartTime})
	}
	if !proto.Equal(o.GetEndTime(), other.GetEndTime()) {
		res.Paths = append(res.Paths, &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorEndTime})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &GetPcapFileInfoFromAgentResponse_FieldTerminalPath{selector: GetPcapFileInfoFromAgentResponse_FieldPathSelectorSizeBytes})
	}
	return res
}

func (o *GetPcapFileInfoFromAgentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPcapFileInfoFromAgentResponse))
}

func (o *GetPcapFileInfoFromAgentResponse) Clone() *GetPcapFileInfoFromAgentResponse {
	if o == nil {
		return nil
	}
	result := &GetPcapFileInfoFromAgentResponse{}
	result.StartTime = proto.Clone(o.StartTime).(*timestamp.Timestamp)
	result.EndTime = proto.Clone(o.EndTime).(*timestamp.Timestamp)
	result.SizeBytes = o.SizeBytes
	return result
}

func (o *GetPcapFileInfoFromAgentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPcapFileInfoFromAgentResponse) Merge(source *GetPcapFileInfoFromAgentResponse) {
	if source.GetStartTime() != nil {
		if o.StartTime == nil {
			o.StartTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartTime, source.GetStartTime())
	}
	if source.GetEndTime() != nil {
		if o.EndTime == nil {
			o.EndTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.EndTime, source.GetEndTime())
	}
	o.SizeBytes = source.GetSizeBytes()
}

func (o *GetPcapFileInfoFromAgentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPcapFileInfoFromAgentResponse))
}

func (o *CheckPcapIsRunningRequest) GotenObjectExt() {}

func (o *CheckPcapIsRunningRequest) MakeFullFieldMask() *CheckPcapIsRunningRequest_FieldMask {
	return FullCheckPcapIsRunningRequest_FieldMask()
}

func (o *CheckPcapIsRunningRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCheckPcapIsRunningRequest_FieldMask()
}

func (o *CheckPcapIsRunningRequest) MakeDiffFieldMask(other *CheckPcapIsRunningRequest) *CheckPcapIsRunningRequest_FieldMask {
	if o == nil && other == nil {
		return &CheckPcapIsRunningRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCheckPcapIsRunningRequest_FieldMask()
	}

	res := &CheckPcapIsRunningRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &CheckPcapIsRunningRequest_FieldTerminalPath{selector: CheckPcapIsRunningRequest_FieldPathSelectorName})
	}
	return res
}

func (o *CheckPcapIsRunningRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CheckPcapIsRunningRequest))
}

func (o *CheckPcapIsRunningRequest) Clone() *CheckPcapIsRunningRequest {
	if o == nil {
		return nil
	}
	result := &CheckPcapIsRunningRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *CheckPcapIsRunningRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CheckPcapIsRunningRequest) Merge(source *CheckPcapIsRunningRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *CheckPcapIsRunningRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CheckPcapIsRunningRequest))
}

func (o *CheckPcapIsRunningResponse) GotenObjectExt() {}

func (o *CheckPcapIsRunningResponse) MakeFullFieldMask() *CheckPcapIsRunningResponse_FieldMask {
	return FullCheckPcapIsRunningResponse_FieldMask()
}

func (o *CheckPcapIsRunningResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCheckPcapIsRunningResponse_FieldMask()
}

func (o *CheckPcapIsRunningResponse) MakeDiffFieldMask(other *CheckPcapIsRunningResponse) *CheckPcapIsRunningResponse_FieldMask {
	if o == nil && other == nil {
		return &CheckPcapIsRunningResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCheckPcapIsRunningResponse_FieldMask()
	}

	res := &CheckPcapIsRunningResponse_FieldMask{}
	if o.GetIsRunning() != other.GetIsRunning() {
		res.Paths = append(res.Paths, &CheckPcapIsRunningResponse_FieldTerminalPath{selector: CheckPcapIsRunningResponse_FieldPathSelectorIsRunning})
	}
	return res
}

func (o *CheckPcapIsRunningResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CheckPcapIsRunningResponse))
}

func (o *CheckPcapIsRunningResponse) Clone() *CheckPcapIsRunningResponse {
	if o == nil {
		return nil
	}
	result := &CheckPcapIsRunningResponse{}
	result.IsRunning = o.IsRunning
	return result
}

func (o *CheckPcapIsRunningResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CheckPcapIsRunningResponse) Merge(source *CheckPcapIsRunningResponse) {
	o.IsRunning = source.GetIsRunning()
}

func (o *CheckPcapIsRunningResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CheckPcapIsRunningResponse))
}
