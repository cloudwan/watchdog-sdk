// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token_custom.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &probe.Probe{}
	_ = &shared_token.SharedToken{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RegisterProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RegisterProbeRequest_FieldPathSelector
	Get(source *RegisterProbeRequest) []interface{}
	GetSingle(source *RegisterProbeRequest) (interface{}, bool)
	ClearValue(item *RegisterProbeRequest)

	// Those methods build corresponding RegisterProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RegisterProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RegisterProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RegisterProbeRequest_FieldPathArrayItemValue
}

type RegisterProbeRequest_FieldPathSelector int32

const (
	RegisterProbeRequest_FieldPathSelectorName   RegisterProbeRequest_FieldPathSelector = 0
	RegisterProbeRequest_FieldPathSelectorValues RegisterProbeRequest_FieldPathSelector = 1
	RegisterProbeRequest_FieldPathSelectorStatus RegisterProbeRequest_FieldPathSelector = 2
)

func (s RegisterProbeRequest_FieldPathSelector) String() string {
	switch s {
	case RegisterProbeRequest_FieldPathSelectorName:
		return "name"
	case RegisterProbeRequest_FieldPathSelectorValues:
		return "values"
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", s))
	}
}

func BuildRegisterProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (RegisterProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RegisterProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorName}, nil
		case "values":
			return &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorValues}, nil
		case "status":
			return &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "status":
			if subpath, err := probe.BuildProbeStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RegisterProbeRequest_FieldSubPath{selector: RegisterProbeRequest_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		case "values":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object RegisterProbeRequest)", fp)
			}
			return &RegisterProbeRequest_FieldPathMap{selector: RegisterProbeRequest_FieldPathSelectorValues, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RegisterProbeRequest", fp)
}

func ParseRegisterProbeRequest_FieldPath(rawField string) (RegisterProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRegisterProbeRequest_FieldPath(fp)
}

func MustParseRegisterProbeRequest_FieldPath(rawField string) RegisterProbeRequest_FieldPath {
	fp, err := ParseRegisterProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RegisterProbeRequest_FieldTerminalPath struct {
	selector RegisterProbeRequest_FieldPathSelector
}

var _ RegisterProbeRequest_FieldPath = (*RegisterProbeRequest_FieldTerminalPath)(nil)

func (fp *RegisterProbeRequest_FieldTerminalPath) Selector() RegisterProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RegisterProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RegisterProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RegisterProbeRequest
func (fp *RegisterProbeRequest_FieldTerminalPath) Get(source *RegisterProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RegisterProbeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RegisterProbeRequest_FieldPathSelectorValues:
			values = append(values, source.Values)
		case RegisterProbeRequest_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RegisterProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RegisterProbeRequest))
}

// GetSingle returns value pointed by specific field of from source RegisterProbeRequest
func (fp *RegisterProbeRequest_FieldTerminalPath) GetSingle(source *RegisterProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RegisterProbeRequest_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	case RegisterProbeRequest_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
	}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RegisterProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *RegisterProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		return (*shared_token.Reference)(nil)
	case RegisterProbeRequest_FieldPathSelectorValues:
		return (map[string]string)(nil)
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return (*probe.Probe_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
	}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) ClearValue(item *RegisterProbeRequest) {
	if item != nil {
		switch fp.selector {
		case RegisterProbeRequest_FieldPathSelectorName:
			item.Name = nil
		case RegisterProbeRequest_FieldPathSelectorValues:
			item.Values = nil
		case RegisterProbeRequest_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RegisterProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RegisterProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RegisterProbeRequest_FieldPathSelectorName ||
		fp.selector == RegisterProbeRequest_FieldPathSelectorValues
}

func (fp *RegisterProbeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithIValue(value interface{}) RegisterProbeRequest_FieldPathValue {
	switch fp.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		return &RegisterProbeRequest_FieldTerminalPathValue{RegisterProbeRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	case RegisterProbeRequest_FieldPathSelectorValues:
		return &RegisterProbeRequest_FieldTerminalPathValue{RegisterProbeRequest_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return &RegisterProbeRequest_FieldTerminalPathValue{RegisterProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
	}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RegisterProbeRequest_FieldPathArrayOfValues {
	fpaov := &RegisterProbeRequest_FieldTerminalPathArrayOfValues{RegisterProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		return &RegisterProbeRequest_FieldTerminalPathArrayOfValues{RegisterProbeRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Reference)}
	case RegisterProbeRequest_FieldPathSelectorValues:
		return &RegisterProbeRequest_FieldTerminalPathArrayOfValues{RegisterProbeRequest_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return &RegisterProbeRequest_FieldTerminalPathArrayOfValues{RegisterProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RegisterProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fp.selector))
	}
}

func (fp *RegisterProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type RegisterProbeRequest_FieldPathMap struct {
	key      string
	selector RegisterProbeRequest_FieldPathSelector
}

var _ RegisterProbeRequest_FieldPath = (*RegisterProbeRequest_FieldPathMap)(nil)

func (fpm *RegisterProbeRequest_FieldPathMap) Selector() RegisterProbeRequest_FieldPathSelector {
	return fpm.selector
}

func (fpm *RegisterProbeRequest_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *RegisterProbeRequest_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *RegisterProbeRequest_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source RegisterProbeRequest
func (fpm *RegisterProbeRequest_FieldPathMap) Get(source *RegisterProbeRequest) (values []interface{}) {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		if value, ok := source.GetValues()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
	return
}

func (fpm *RegisterProbeRequest_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*RegisterProbeRequest))
}

// GetSingle returns value by selected field map key from source RegisterProbeRequest
func (fpm *RegisterProbeRequest_FieldPathMap) GetSingle(source *RegisterProbeRequest) (interface{}, bool) {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		res, ok := source.GetValues()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*RegisterProbeRequest))
}

// GetDefault returns a default value of the field type
func (fpm *RegisterProbeRequest_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) ClearValue(item *RegisterProbeRequest) {
	if item != nil {
		switch fpm.selector {
		case RegisterProbeRequest_FieldPathSelectorValues:
			delete(item.Values, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
		}
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*RegisterProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fpm *RegisterProbeRequest_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithIValue(value interface{}) RegisterProbeRequest_FieldPathValue {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		return &RegisterProbeRequest_FieldPathMapValue{RegisterProbeRequest_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithIArrayOfValues(values interface{}) RegisterProbeRequest_FieldPathArrayOfValues {
	switch fpm.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		return &RegisterProbeRequest_FieldPathMapArrayOfValues{RegisterProbeRequest_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpm.selector))
	}
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithIArrayItemValue(value interface{}) RegisterProbeRequest_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *RegisterProbeRequest_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type RegisterProbeRequest_FieldSubPath struct {
	selector RegisterProbeRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RegisterProbeRequest_FieldPath = (*RegisterProbeRequest_FieldSubPath)(nil)

func (fps *RegisterProbeRequest_FieldSubPath) Selector() RegisterProbeRequest_FieldPathSelector {
	return fps.selector
}
func (fps *RegisterProbeRequest_FieldSubPath) AsStatusSubPath() (probe.ProbeStatus_FieldPath, bool) {
	res, ok := fps.subPath.(probe.ProbeStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RegisterProbeRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RegisterProbeRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RegisterProbeRequest
func (fps *RegisterProbeRequest_FieldSubPath) Get(source *RegisterProbeRequest) (values []interface{}) {
	if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fps.selector))
	}
	return
}

func (fps *RegisterProbeRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RegisterProbeRequest))
}

// GetSingle returns value of selected field from source RegisterProbeRequest
func (fps *RegisterProbeRequest_FieldSubPath) GetSingle(source *RegisterProbeRequest) (interface{}, bool) {
	switch fps.selector {
	case RegisterProbeRequest_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fps.selector))
	}
}

func (fps *RegisterProbeRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RegisterProbeRequest))
}

// GetDefault returns a default value of the field type
func (fps *RegisterProbeRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RegisterProbeRequest_FieldSubPath) ClearValue(item *RegisterProbeRequest) {
	if item != nil {
		switch fps.selector {
		case RegisterProbeRequest_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fps.selector))
		}
	}
}

func (fps *RegisterProbeRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RegisterProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *RegisterProbeRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RegisterProbeRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RegisterProbeRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RegisterProbeRequest_FieldSubPath) WithIValue(value interface{}) RegisterProbeRequest_FieldPathValue {
	return &RegisterProbeRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RegisterProbeRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RegisterProbeRequest_FieldSubPath) WithIArrayOfValues(values interface{}) RegisterProbeRequest_FieldPathArrayOfValues {
	return &RegisterProbeRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RegisterProbeRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RegisterProbeRequest_FieldSubPath) WithIArrayItemValue(value interface{}) RegisterProbeRequest_FieldPathArrayItemValue {
	return &RegisterProbeRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RegisterProbeRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RegisterProbeRequest_FieldPathValue allows storing values for RegisterProbeRequest fields according to their type
type RegisterProbeRequest_FieldPathValue interface {
	RegisterProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RegisterProbeRequest)
	CompareWith(*RegisterProbeRequest) (cmp int, comparable bool)
}

func ParseRegisterProbeRequest_FieldPathValue(pathStr, valueStr string) (RegisterProbeRequest_FieldPathValue, error) {
	fp, err := ParseRegisterProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RegisterProbeRequest_FieldPathValue), nil
}

func MustParseRegisterProbeRequest_FieldPathValue(pathStr, valueStr string) RegisterProbeRequest_FieldPathValue {
	fpv, err := ParseRegisterProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RegisterProbeRequest_FieldTerminalPathValue struct {
	RegisterProbeRequest_FieldTerminalPath
	value interface{}
}

var _ RegisterProbeRequest_FieldPathValue = (*RegisterProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegisterProbeRequest' as interface{}
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) AsNameValue() (*shared_token.Reference, bool) {
	res, ok := fpv.value.(*shared_token.Reference)
	return res, ok
}
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) AsValuesValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) AsStatusValue() (*probe.Probe_Status, bool) {
	res, ok := fpv.value.(*probe.Probe_Status)
	return res, ok
}

// SetTo stores value for selected field for object RegisterProbeRequest
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) SetTo(target **RegisterProbeRequest) {
	if *target == nil {
		*target = new(RegisterProbeRequest)
	}
	switch fpv.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*shared_token.Reference)
	case RegisterProbeRequest_FieldPathSelectorValues:
		(*target).Values = fpv.value.(map[string]string)
	case RegisterProbeRequest_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*probe.Probe_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpv.selector))
	}
}

func (fpv *RegisterProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RegisterProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RegisterProbeRequest_FieldTerminalPathValue' with the value under path in 'RegisterProbeRequest'.
func (fpv *RegisterProbeRequest_FieldTerminalPathValue) CompareWith(source *RegisterProbeRequest) (int, bool) {
	switch fpv.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*shared_token.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RegisterProbeRequest_FieldPathSelectorValues:
		return 0, false
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpv.selector))
	}
}

func (fpv *RegisterProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RegisterProbeRequest))
}

type RegisterProbeRequest_FieldPathMapValue struct {
	RegisterProbeRequest_FieldPathMap
	value interface{}
}

var _ RegisterProbeRequest_FieldPathValue = (*RegisterProbeRequest_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in RegisterProbeRequest as interface{}
func (fpmv *RegisterProbeRequest_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *RegisterProbeRequest_FieldPathMapValue) AsValuesElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in RegisterProbeRequest
func (fpmv *RegisterProbeRequest_FieldPathMapValue) SetTo(target **RegisterProbeRequest) {
	if *target == nil {
		*target = new(RegisterProbeRequest)
	}
	switch fpmv.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		if (*target).Values == nil {
			(*target).Values = make(map[string]string)
		}
		(*target).Values[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpmv.selector))
	}
}

func (fpmv *RegisterProbeRequest_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RegisterProbeRequest)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RegisterProbeRequest_FieldPathMapValue' with the value under path in 'RegisterProbeRequest'.
func (fpmv *RegisterProbeRequest_FieldPathMapValue) CompareWith(source *RegisterProbeRequest) (int, bool) {
	switch fpmv.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		leftValue := fpmv.value.(string)
		rightValue := source.GetValues()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpmv.selector))
	}
}

func (fpmv *RegisterProbeRequest_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*RegisterProbeRequest))
}

type RegisterProbeRequest_FieldSubPathValue struct {
	RegisterProbeRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RegisterProbeRequest_FieldPathValue = (*RegisterProbeRequest_FieldSubPathValue)(nil)

func (fpvs *RegisterProbeRequest_FieldSubPathValue) AsStatusPathValue() (probe.ProbeStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.ProbeStatus_FieldPathValue)
	return res, ok
}

func (fpvs *RegisterProbeRequest_FieldSubPathValue) SetTo(target **RegisterProbeRequest) {
	if *target == nil {
		*target = new(RegisterProbeRequest)
	}
	switch fpvs.Selector() {
	case RegisterProbeRequest_FieldPathSelectorStatus:
		fpvs.subPathValue.(probe.ProbeStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *RegisterProbeRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RegisterProbeRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RegisterProbeRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RegisterProbeRequest_FieldSubPathValue) CompareWith(source *RegisterProbeRequest) (int, bool) {
	switch fpvs.Selector() {
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return fpvs.subPathValue.(probe.ProbeStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *RegisterProbeRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RegisterProbeRequest))
}

// RegisterProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RegisterProbeRequest according to their type
// Present only for array (repeated) types.
type RegisterProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RegisterProbeRequest_FieldPath
	ContainsValue(*RegisterProbeRequest) bool
}

// ParseRegisterProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRegisterProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RegisterProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRegisterProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RegisterProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseRegisterProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) RegisterProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRegisterProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RegisterProbeRequest_FieldTerminalPathArrayItemValue struct {
	RegisterProbeRequest_FieldTerminalPath
	value interface{}
}

var _ RegisterProbeRequest_FieldPathArrayItemValue = (*RegisterProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RegisterProbeRequest as interface{}
func (fpaiv *RegisterProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RegisterProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RegisterProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RegisterProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RegisterProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterProbeRequest'
func (fpaiv *RegisterProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RegisterProbeRequest) bool {
	slice := fpaiv.RegisterProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RegisterProbeRequest_FieldSubPathArrayItemValue struct {
	RegisterProbeRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RegisterProbeRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RegisterProbeRequest_FieldSubPathArrayItemValue) AsStatusPathItemValue() (probe.ProbeStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.ProbeStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterProbeRequest'
func (fpaivs *RegisterProbeRequest_FieldSubPathArrayItemValue) ContainsValue(source *RegisterProbeRequest) bool {
	switch fpaivs.Selector() {
	case RegisterProbeRequest_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(probe.ProbeStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeRequest: %d", fpaivs.Selector()))
	}
}

// RegisterProbeRequest_FieldPathArrayOfValues allows storing slice of values for RegisterProbeRequest fields according to their type
type RegisterProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RegisterProbeRequest_FieldPath
}

func ParseRegisterProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RegisterProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRegisterProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RegisterProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseRegisterProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RegisterProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRegisterProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RegisterProbeRequest_FieldTerminalPathArrayOfValues struct {
	RegisterProbeRequest_FieldTerminalPath
	values interface{}
}

var _ RegisterProbeRequest_FieldPathArrayOfValues = (*RegisterProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RegisterProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RegisterProbeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*shared_token.Reference) {
			values = append(values, v)
		}
	case RegisterProbeRequest_FieldPathSelectorValues:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case RegisterProbeRequest_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*probe.Probe_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RegisterProbeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([]*shared_token.Reference)
	return res, ok
}
func (fpaov *RegisterProbeRequest_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *RegisterProbeRequest_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*probe.Probe_Status, bool) {
	res, ok := fpaov.values.([]*probe.Probe_Status)
	return res, ok
}

type RegisterProbeRequest_FieldPathMapArrayOfValues struct {
	RegisterProbeRequest_FieldPathMap
	values interface{}
}

var _ RegisterProbeRequest_FieldPathArrayOfValues = (*RegisterProbeRequest_FieldPathMapArrayOfValues)(nil)

func (fpmaov *RegisterProbeRequest_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case RegisterProbeRequest_FieldPathSelectorValues:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *RegisterProbeRequest_FieldPathMapArrayOfValues) AsValuesArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type RegisterProbeRequest_FieldSubPathArrayOfValues struct {
	RegisterProbeRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RegisterProbeRequest_FieldPathArrayOfValues = (*RegisterProbeRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RegisterProbeRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RegisterProbeRequest_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (probe.ProbeStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.ProbeStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RegisterProbeResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RegisterProbeResponse_FieldPathSelector
	Get(source *RegisterProbeResponse) []interface{}
	GetSingle(source *RegisterProbeResponse) (interface{}, bool)
	ClearValue(item *RegisterProbeResponse)

	// Those methods build corresponding RegisterProbeResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RegisterProbeResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RegisterProbeResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RegisterProbeResponse_FieldPathArrayItemValue
}

type RegisterProbeResponse_FieldPathSelector int32

const (
	RegisterProbeResponse_FieldPathSelectorServiceAccount RegisterProbeResponse_FieldPathSelector = 0
	RegisterProbeResponse_FieldPathSelectorProbe          RegisterProbeResponse_FieldPathSelector = 1
)

func (s RegisterProbeResponse_FieldPathSelector) String() string {
	switch s {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return "service_account"
	case RegisterProbeResponse_FieldPathSelectorProbe:
		return "probe"
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", s))
	}
}

func BuildRegisterProbeResponse_FieldPath(fp gotenobject.RawFieldPath) (RegisterProbeResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RegisterProbeResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			return &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorServiceAccount}, nil
		case "probe":
			return &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorProbe}, nil
		}
	} else {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			if subpath, err := api.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RegisterProbeResponse_FieldSubPath{selector: RegisterProbeResponse_FieldPathSelectorServiceAccount, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RegisterProbeResponse", fp)
}

func ParseRegisterProbeResponse_FieldPath(rawField string) (RegisterProbeResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRegisterProbeResponse_FieldPath(fp)
}

func MustParseRegisterProbeResponse_FieldPath(rawField string) RegisterProbeResponse_FieldPath {
	fp, err := ParseRegisterProbeResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RegisterProbeResponse_FieldTerminalPath struct {
	selector RegisterProbeResponse_FieldPathSelector
}

var _ RegisterProbeResponse_FieldPath = (*RegisterProbeResponse_FieldTerminalPath)(nil)

func (fp *RegisterProbeResponse_FieldTerminalPath) Selector() RegisterProbeResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RegisterProbeResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RegisterProbeResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RegisterProbeResponse
func (fp *RegisterProbeResponse_FieldTerminalPath) Get(source *RegisterProbeResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RegisterProbeResponse_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		case RegisterProbeResponse_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RegisterProbeResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RegisterProbeResponse))
}

// GetSingle returns value pointed by specific field of from source RegisterProbeResponse
func (fp *RegisterProbeResponse_FieldTerminalPath) GetSingle(source *RegisterProbeResponse) (interface{}, bool) {
	switch fp.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	case RegisterProbeResponse_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
	}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RegisterProbeResponse))
}

// GetDefault returns a default value of the field type
func (fp *RegisterProbeResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return (*api.ServiceAccount)(nil)
	case RegisterProbeResponse_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
	}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) ClearValue(item *RegisterProbeResponse) {
	if item != nil {
		switch fp.selector {
		case RegisterProbeResponse_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		case RegisterProbeResponse_FieldPathSelectorProbe:
			item.Probe = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
		}
	}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RegisterProbeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RegisterProbeResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RegisterProbeResponse_FieldPathSelectorProbe
}

func (fp *RegisterProbeResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithIValue(value interface{}) RegisterProbeResponse_FieldPathValue {
	switch fp.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return &RegisterProbeResponse_FieldTerminalPathValue{RegisterProbeResponse_FieldTerminalPath: *fp, value: value.(*api.ServiceAccount)}
	case RegisterProbeResponse_FieldPathSelectorProbe:
		return &RegisterProbeResponse_FieldTerminalPathValue{RegisterProbeResponse_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
	}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RegisterProbeResponse_FieldPathArrayOfValues {
	fpaov := &RegisterProbeResponse_FieldTerminalPathArrayOfValues{RegisterProbeResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return &RegisterProbeResponse_FieldTerminalPathArrayOfValues{RegisterProbeResponse_FieldTerminalPath: *fp, values: values.([]*api.ServiceAccount)}
	case RegisterProbeResponse_FieldPathSelectorProbe:
		return &RegisterProbeResponse_FieldTerminalPathArrayOfValues{RegisterProbeResponse_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RegisterProbeResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fp.selector))
	}
}

func (fp *RegisterProbeResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RegisterProbeResponse_FieldSubPath struct {
	selector RegisterProbeResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RegisterProbeResponse_FieldPath = (*RegisterProbeResponse_FieldSubPath)(nil)

func (fps *RegisterProbeResponse_FieldSubPath) Selector() RegisterProbeResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RegisterProbeResponse_FieldSubPath) AsServiceAccountSubPath() (api.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(api.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RegisterProbeResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RegisterProbeResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RegisterProbeResponse
func (fps *RegisterProbeResponse_FieldSubPath) Get(source *RegisterProbeResponse) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountSubPath(); ok {
		values = append(values, asServiceAccountFieldPath.Get(source.GetServiceAccount())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fps.selector))
	}
	return
}

func (fps *RegisterProbeResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RegisterProbeResponse))
}

// GetSingle returns value of selected field from source RegisterProbeResponse
func (fps *RegisterProbeResponse_FieldSubPath) GetSingle(source *RegisterProbeResponse) (interface{}, bool) {
	switch fps.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		if source.GetServiceAccount() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fps.selector))
	}
}

func (fps *RegisterProbeResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RegisterProbeResponse))
}

// GetDefault returns a default value of the field type
func (fps *RegisterProbeResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RegisterProbeResponse_FieldSubPath) ClearValue(item *RegisterProbeResponse) {
	if item != nil {
		switch fps.selector {
		case RegisterProbeResponse_FieldPathSelectorServiceAccount:
			fps.subPath.ClearValueRaw(item.ServiceAccount)
		default:
			panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fps.selector))
		}
	}
}

func (fps *RegisterProbeResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RegisterProbeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RegisterProbeResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RegisterProbeResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RegisterProbeResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RegisterProbeResponse_FieldSubPath) WithIValue(value interface{}) RegisterProbeResponse_FieldPathValue {
	return &RegisterProbeResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RegisterProbeResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RegisterProbeResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RegisterProbeResponse_FieldPathArrayOfValues {
	return &RegisterProbeResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RegisterProbeResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RegisterProbeResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RegisterProbeResponse_FieldPathArrayItemValue {
	return &RegisterProbeResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RegisterProbeResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RegisterProbeResponse_FieldPathValue allows storing values for RegisterProbeResponse fields according to their type
type RegisterProbeResponse_FieldPathValue interface {
	RegisterProbeResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RegisterProbeResponse)
	CompareWith(*RegisterProbeResponse) (cmp int, comparable bool)
}

func ParseRegisterProbeResponse_FieldPathValue(pathStr, valueStr string) (RegisterProbeResponse_FieldPathValue, error) {
	fp, err := ParseRegisterProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RegisterProbeResponse_FieldPathValue), nil
}

func MustParseRegisterProbeResponse_FieldPathValue(pathStr, valueStr string) RegisterProbeResponse_FieldPathValue {
	fpv, err := ParseRegisterProbeResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RegisterProbeResponse_FieldTerminalPathValue struct {
	RegisterProbeResponse_FieldTerminalPath
	value interface{}
}

var _ RegisterProbeResponse_FieldPathValue = (*RegisterProbeResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegisterProbeResponse' as interface{}
func (fpv *RegisterProbeResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RegisterProbeResponse_FieldTerminalPathValue) AsServiceAccountValue() (*api.ServiceAccount, bool) {
	res, ok := fpv.value.(*api.ServiceAccount)
	return res, ok
}
func (fpv *RegisterProbeResponse_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object RegisterProbeResponse
func (fpv *RegisterProbeResponse_FieldTerminalPathValue) SetTo(target **RegisterProbeResponse) {
	if *target == nil {
		*target = new(RegisterProbeResponse)
	}
	switch fpv.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*api.ServiceAccount)
	case RegisterProbeResponse_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fpv.selector))
	}
}

func (fpv *RegisterProbeResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RegisterProbeResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RegisterProbeResponse_FieldTerminalPathValue' with the value under path in 'RegisterProbeResponse'.
func (fpv *RegisterProbeResponse_FieldTerminalPathValue) CompareWith(source *RegisterProbeResponse) (int, bool) {
	switch fpv.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return 0, false
	case RegisterProbeResponse_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fpv.selector))
	}
}

func (fpv *RegisterProbeResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RegisterProbeResponse))
}

type RegisterProbeResponse_FieldSubPathValue struct {
	RegisterProbeResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RegisterProbeResponse_FieldPathValue = (*RegisterProbeResponse_FieldSubPathValue)(nil)

func (fpvs *RegisterProbeResponse_FieldSubPathValue) AsServiceAccountPathValue() (api.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(api.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *RegisterProbeResponse_FieldSubPathValue) SetTo(target **RegisterProbeResponse) {
	if *target == nil {
		*target = new(RegisterProbeResponse)
	}
	switch fpvs.Selector() {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		fpvs.subPathValue.(api.ServiceAccount_FieldPathValue).SetTo(&(*target).ServiceAccount)
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RegisterProbeResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RegisterProbeResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RegisterProbeResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RegisterProbeResponse_FieldSubPathValue) CompareWith(source *RegisterProbeResponse) (int, bool) {
	switch fpvs.Selector() {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return fpvs.subPathValue.(api.ServiceAccount_FieldPathValue).CompareWith(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RegisterProbeResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RegisterProbeResponse))
}

// RegisterProbeResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RegisterProbeResponse according to their type
// Present only for array (repeated) types.
type RegisterProbeResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RegisterProbeResponse_FieldPath
	ContainsValue(*RegisterProbeResponse) bool
}

// ParseRegisterProbeResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRegisterProbeResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RegisterProbeResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRegisterProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RegisterProbeResponse_FieldPathArrayItemValue), nil
}

func MustParseRegisterProbeResponse_FieldPathArrayItemValue(pathStr, valueStr string) RegisterProbeResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRegisterProbeResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RegisterProbeResponse_FieldTerminalPathArrayItemValue struct {
	RegisterProbeResponse_FieldTerminalPath
	value interface{}
}

var _ RegisterProbeResponse_FieldPathArrayItemValue = (*RegisterProbeResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RegisterProbeResponse as interface{}
func (fpaiv *RegisterProbeResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RegisterProbeResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RegisterProbeResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RegisterProbeResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RegisterProbeResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterProbeResponse'
func (fpaiv *RegisterProbeResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RegisterProbeResponse) bool {
	slice := fpaiv.RegisterProbeResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RegisterProbeResponse_FieldSubPathArrayItemValue struct {
	RegisterProbeResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RegisterProbeResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RegisterProbeResponse_FieldSubPathArrayItemValue) AsServiceAccountPathItemValue() (api.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(api.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterProbeResponse'
func (fpaivs *RegisterProbeResponse_FieldSubPathArrayItemValue) ContainsValue(source *RegisterProbeResponse) bool {
	switch fpaivs.Selector() {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		return fpaivs.subPathItemValue.(api.ServiceAccount_FieldPathArrayItemValue).ContainsValue(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for RegisterProbeResponse: %d", fpaivs.Selector()))
	}
}

// RegisterProbeResponse_FieldPathArrayOfValues allows storing slice of values for RegisterProbeResponse fields according to their type
type RegisterProbeResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RegisterProbeResponse_FieldPath
}

func ParseRegisterProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RegisterProbeResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRegisterProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterProbeResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RegisterProbeResponse_FieldPathArrayOfValues), nil
}

func MustParseRegisterProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RegisterProbeResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRegisterProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RegisterProbeResponse_FieldTerminalPathArrayOfValues struct {
	RegisterProbeResponse_FieldTerminalPath
	values interface{}
}

var _ RegisterProbeResponse_FieldPathArrayOfValues = (*RegisterProbeResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RegisterProbeResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RegisterProbeResponse_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*api.ServiceAccount) {
			values = append(values, v)
		}
	case RegisterProbeResponse_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RegisterProbeResponse_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*api.ServiceAccount, bool) {
	res, ok := fpaov.values.([]*api.ServiceAccount)
	return res, ok
}
func (fpaov *RegisterProbeResponse_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

type RegisterProbeResponse_FieldSubPathArrayOfValues struct {
	RegisterProbeResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RegisterProbeResponse_FieldPathArrayOfValues = (*RegisterProbeResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RegisterProbeResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RegisterProbeResponse_FieldSubPathArrayOfValues) AsServiceAccountPathArrayOfValues() (api.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(api.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}
