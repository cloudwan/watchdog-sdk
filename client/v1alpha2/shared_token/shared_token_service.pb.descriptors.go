// Code generated by protoc-gen-goten-client
// API: SharedTokenService
// DO NOT EDIT!!!

package shared_token_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &shared_token.SharedToken{}
)

var (
	descriptorsInitialized         bool
	sharedTokenServiceDescriptor   *SharedTokenServiceDescriptor
	getSharedTokenDescriptor       *GetSharedTokenDescriptor
	batchGetSharedTokensDescriptor *BatchGetSharedTokensDescriptor
	listSharedTokensDescriptor     *ListSharedTokensDescriptor
	watchSharedTokenDescriptor     *WatchSharedTokenDescriptor
	watchSharedTokensDescriptor    *WatchSharedTokensDescriptor
	createSharedTokenDescriptor    *CreateSharedTokenDescriptor
	updateSharedTokenDescriptor    *UpdateSharedTokenDescriptor
	deleteSharedTokenDescriptor    *DeleteSharedTokenDescriptor
	registerProbeDescriptor        *RegisterProbeDescriptor
)

type GetSharedTokenDescriptor struct{}

type GetSharedTokenDescriptorClientMsgHandle struct{}

type GetSharedTokenDescriptorServerMsgHandle struct{}

func (d *GetSharedTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSharedTokenRequest{}
}

func (d *GetSharedTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &shared_token.SharedToken{}
}

func (d *GetSharedTokenDescriptor) IsUnary() bool {
	return true
}

func (d *GetSharedTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSharedTokenDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSharedTokenDescriptor) IsCollection() bool {
	return false
}

func (d *GetSharedTokenDescriptor) IsPlural() bool {
	return false
}

func (d *GetSharedTokenDescriptor) HasResource() bool {
	return true
}

func (d *GetSharedTokenDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSharedTokenDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSharedTokenDescriptor) GetMethodName() string {
	return "GetSharedToken"
}

func (d *GetSharedTokenDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/GetSharedToken"
}

func (d *GetSharedTokenDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetSharedTokenDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *GetSharedTokenDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetSharedTokenDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetSharedTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *GetSharedTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *GetSharedTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSharedTokenDescriptorClientMsgHandle{}
}

func (d *GetSharedTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSharedTokenDescriptorServerMsgHandle{}
}

func (h *GetSharedTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetSharedTokenRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *GetSharedTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetSharedTokenRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSharedTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetSharedTokenRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSharedTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*shared_token.SharedToken) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *GetSharedTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*shared_token.SharedToken) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSharedTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*shared_token.SharedToken) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetSharedTokenDescriptor() *GetSharedTokenDescriptor {
	return getSharedTokenDescriptor
}

type BatchGetSharedTokensDescriptor struct{}

type BatchGetSharedTokensDescriptorClientMsgHandle struct{}

type BatchGetSharedTokensDescriptorServerMsgHandle struct{}

func (d *BatchGetSharedTokensDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSharedTokensRequest{}
}

func (d *BatchGetSharedTokensDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSharedTokensResponse{}
}

func (d *BatchGetSharedTokensDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSharedTokensDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSharedTokensDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSharedTokensDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetSharedTokensDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetSharedTokensDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetSharedTokensDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSharedTokensDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSharedTokensDescriptor) GetMethodName() string {
	return "BatchGetSharedTokens"
}

func (d *BatchGetSharedTokensDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/BatchGetSharedTokens"
}

func (d *BatchGetSharedTokensDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetSharedTokensDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *BatchGetSharedTokensDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetSharedTokensDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetSharedTokensDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *BatchGetSharedTokensDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *BatchGetSharedTokensDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSharedTokensDescriptorClientMsgHandle{}
}

func (d *BatchGetSharedTokensDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSharedTokensDescriptorServerMsgHandle{}
}

func (h *BatchGetSharedTokensDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSharedTokensRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSharedTokensDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSharedTokensRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(shared_token.SharedTokenNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (shared_token.SharedTokenNameList)(nil)
}

func (h *BatchGetSharedTokensDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSharedTokensRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSharedTokensDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSharedTokensResponse) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSharedTokensDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSharedTokensResponse) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSharedTokens(); len(resources) > 0 {
			list := make(shared_token.SharedTokenNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (shared_token.SharedTokenNameList)(nil)
}

func (h *BatchGetSharedTokensDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSharedTokensResponse) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetSharedTokensDescriptor() *BatchGetSharedTokensDescriptor {
	return batchGetSharedTokensDescriptor
}

type ListSharedTokensDescriptor struct{}

type ListSharedTokensDescriptorClientMsgHandle struct{}

type ListSharedTokensDescriptorServerMsgHandle struct{}

func (d *ListSharedTokensDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSharedTokensRequest{}
}

func (d *ListSharedTokensDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSharedTokensResponse{}
}

func (d *ListSharedTokensDescriptor) IsUnary() bool {
	return true
}

func (d *ListSharedTokensDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSharedTokensDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSharedTokensDescriptor) IsCollection() bool {
	return true
}

func (d *ListSharedTokensDescriptor) IsPlural() bool {
	return true
}

func (d *ListSharedTokensDescriptor) HasResource() bool {
	return true
}

func (d *ListSharedTokensDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSharedTokensDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSharedTokensDescriptor) GetMethodName() string {
	return "ListSharedTokens"
}

func (d *ListSharedTokensDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/ListSharedTokens"
}

func (d *ListSharedTokensDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListSharedTokensDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *ListSharedTokensDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListSharedTokensDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListSharedTokensDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *ListSharedTokensDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *ListSharedTokensDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSharedTokensDescriptorClientMsgHandle{}
}

func (d *ListSharedTokensDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSharedTokensDescriptorServerMsgHandle{}
}

func (h *ListSharedTokensDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSharedTokensRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSharedTokensDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSharedTokensRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSharedTokensDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSharedTokensRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*shared_token.ParentName)(nil)
}

func (h *ListSharedTokensDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSharedTokensResponse) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSharedTokensDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSharedTokensResponse) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSharedTokens(); len(resources) > 0 {
			list := make(shared_token.SharedTokenNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (shared_token.SharedTokenNameList)(nil)
}

func (h *ListSharedTokensDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSharedTokensResponse) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListSharedTokensDescriptor() *ListSharedTokensDescriptor {
	return listSharedTokensDescriptor
}

type WatchSharedTokenDescriptor struct{}

type WatchSharedTokenDescriptorClientMsgHandle struct{}

type WatchSharedTokenDescriptorServerMsgHandle struct{}

func (d *WatchSharedTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSharedTokenRequest{}
}

func (d *WatchSharedTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSharedTokenResponse{}
}

func (d *WatchSharedTokenDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSharedTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSharedTokenDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSharedTokenDescriptor) IsCollection() bool {
	return false
}

func (d *WatchSharedTokenDescriptor) IsPlural() bool {
	return false
}

func (d *WatchSharedTokenDescriptor) HasResource() bool {
	return true
}

func (d *WatchSharedTokenDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSharedTokenDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSharedTokenDescriptor) GetMethodName() string {
	return "WatchSharedToken"
}

func (d *WatchSharedTokenDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/WatchSharedToken"
}

func (d *WatchSharedTokenDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchSharedTokenDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *WatchSharedTokenDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchSharedTokenDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSharedTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *WatchSharedTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *WatchSharedTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSharedTokenDescriptorClientMsgHandle{}
}

func (d *WatchSharedTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSharedTokenDescriptorServerMsgHandle{}
}

func (h *WatchSharedTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSharedTokenRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *WatchSharedTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSharedTokenRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSharedTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSharedTokenRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSharedTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSharedTokenResponse) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *shared_token.SharedTokenChange_Added_:
				return tResChange.Added.GetSharedToken().GetName()
			case *shared_token.SharedTokenChange_Modified_:
				return tResChange.Modified.GetName()
			case *shared_token.SharedTokenChange_Removed_:
				return tResChange.Removed.GetName()
			case *shared_token.SharedTokenChange_Current_:
				return tResChange.Current.GetSharedToken().GetName()
			}
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *WatchSharedTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSharedTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSharedTokenResponse) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSharedTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSharedTokenResponse) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSharedTokenDescriptor() *WatchSharedTokenDescriptor {
	return watchSharedTokenDescriptor
}

type WatchSharedTokensDescriptor struct{}

type WatchSharedTokensDescriptorClientMsgHandle struct{}

type WatchSharedTokensDescriptorServerMsgHandle struct{}

func (d *WatchSharedTokensDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSharedTokensRequest{}
}

func (d *WatchSharedTokensDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSharedTokensResponse{}
}

func (d *WatchSharedTokensDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSharedTokensDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSharedTokensDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSharedTokensDescriptor) IsCollection() bool {
	return true
}

func (d *WatchSharedTokensDescriptor) IsPlural() bool {
	return true
}

func (d *WatchSharedTokensDescriptor) HasResource() bool {
	return true
}

func (d *WatchSharedTokensDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSharedTokensDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSharedTokensDescriptor) GetMethodName() string {
	return "WatchSharedTokens"
}

func (d *WatchSharedTokensDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/WatchSharedTokens"
}

func (d *WatchSharedTokensDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchSharedTokensDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *WatchSharedTokensDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchSharedTokensDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchSharedTokensDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *WatchSharedTokensDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *WatchSharedTokensDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSharedTokensDescriptorClientMsgHandle{}
}

func (d *WatchSharedTokensDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSharedTokensDescriptorServerMsgHandle{}
}

func (h *WatchSharedTokensDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSharedTokensRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSharedTokensDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSharedTokensRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSharedTokensDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokensRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSharedTokensRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*shared_token.ParentName)(nil)
}

func (h *WatchSharedTokensDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSharedTokensResponse) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSharedTokensDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSharedTokensResponse) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSharedTokenChanges(); len(resChanges) > 0 {
			list := make(shared_token.SharedTokenNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *shared_token.SharedTokenChange_Added_:
					list = append(list, tResChange.Added.GetSharedToken().GetName())
				case *shared_token.SharedTokenChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *shared_token.SharedTokenChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *shared_token.SharedTokenChange_Current_:
					list = append(list, tResChange.Current.GetSharedToken().GetName())
				}
			}
			return list
		}
	}
	return (shared_token.SharedTokenNameList)(nil)
}

func (h *WatchSharedTokensDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSharedTokensResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSharedTokensResponse) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSharedTokensDescriptor() *WatchSharedTokensDescriptor {
	return watchSharedTokensDescriptor
}

type CreateSharedTokenDescriptor struct{}

type CreateSharedTokenDescriptorClientMsgHandle struct{}

type CreateSharedTokenDescriptorServerMsgHandle struct{}

func (d *CreateSharedTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSharedTokenRequest{}
}

func (d *CreateSharedTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &shared_token.SharedToken{}
}

func (d *CreateSharedTokenDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSharedTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSharedTokenDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSharedTokenDescriptor) IsCollection() bool {
	return true
}

func (d *CreateSharedTokenDescriptor) IsPlural() bool {
	return false
}

func (d *CreateSharedTokenDescriptor) HasResource() bool {
	return true
}

func (d *CreateSharedTokenDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSharedTokenDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSharedTokenDescriptor) GetMethodName() string {
	return "CreateSharedToken"
}

func (d *CreateSharedTokenDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/CreateSharedToken"
}

func (d *CreateSharedTokenDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateSharedTokenDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *CreateSharedTokenDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateSharedTokenDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateSharedTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *CreateSharedTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *CreateSharedTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSharedTokenDescriptorClientMsgHandle{}
}

func (d *CreateSharedTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSharedTokenDescriptorServerMsgHandle{}
}

func (h *CreateSharedTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateSharedTokenRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSharedToken()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *CreateSharedTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateSharedTokenRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSharedTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateSharedTokenRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*shared_token.ParentName)(nil)
}

func (h *CreateSharedTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*shared_token.SharedToken) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *CreateSharedTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*shared_token.SharedToken) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSharedTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*shared_token.SharedToken) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateSharedTokenDescriptor() *CreateSharedTokenDescriptor {
	return createSharedTokenDescriptor
}

type UpdateSharedTokenDescriptor struct{}

type UpdateSharedTokenDescriptorClientMsgHandle struct{}

type UpdateSharedTokenDescriptorServerMsgHandle struct{}

func (d *UpdateSharedTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSharedTokenRequest{}
}

func (d *UpdateSharedTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &shared_token.SharedToken{}
}

func (d *UpdateSharedTokenDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSharedTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSharedTokenDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSharedTokenDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateSharedTokenDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateSharedTokenDescriptor) HasResource() bool {
	return true
}

func (d *UpdateSharedTokenDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSharedTokenDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSharedTokenDescriptor) GetMethodName() string {
	return "UpdateSharedToken"
}

func (d *UpdateSharedTokenDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/UpdateSharedToken"
}

func (d *UpdateSharedTokenDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateSharedTokenDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *UpdateSharedTokenDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateSharedTokenDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateSharedTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *UpdateSharedTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *UpdateSharedTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSharedTokenDescriptorClientMsgHandle{}
}

func (d *UpdateSharedTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSharedTokenDescriptorServerMsgHandle{}
}

func (h *UpdateSharedTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateSharedTokenRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSharedToken()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *UpdateSharedTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateSharedTokenRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSharedTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateSharedTokenRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSharedTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*shared_token.SharedToken) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *UpdateSharedTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*shared_token.SharedToken) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSharedTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*shared_token.SharedToken)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*shared_token.SharedToken) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateSharedTokenDescriptor() *UpdateSharedTokenDescriptor {
	return updateSharedTokenDescriptor
}

type DeleteSharedTokenDescriptor struct{}

type DeleteSharedTokenDescriptorClientMsgHandle struct{}

type DeleteSharedTokenDescriptorServerMsgHandle struct{}

func (d *DeleteSharedTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSharedTokenRequest{}
}

func (d *DeleteSharedTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteSharedTokenDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSharedTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSharedTokenDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSharedTokenDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteSharedTokenDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteSharedTokenDescriptor) HasResource() bool {
	return true
}

func (d *DeleteSharedTokenDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSharedTokenDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSharedTokenDescriptor) GetMethodName() string {
	return "DeleteSharedToken"
}

func (d *DeleteSharedTokenDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/DeleteSharedToken"
}

func (d *DeleteSharedTokenDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteSharedTokenDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *DeleteSharedTokenDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteSharedTokenDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteSharedTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *DeleteSharedTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *DeleteSharedTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSharedTokenDescriptorClientMsgHandle{}
}

func (d *DeleteSharedTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSharedTokenDescriptorServerMsgHandle{}
}

func (h *DeleteSharedTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteSharedTokenRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *DeleteSharedTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteSharedTokenRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSharedTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSharedTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteSharedTokenRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSharedTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSharedTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSharedTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteSharedTokenDescriptor() *DeleteSharedTokenDescriptor {
	return deleteSharedTokenDescriptor
}

type RegisterProbeDescriptor struct{}

type RegisterProbeDescriptorClientMsgHandle struct{}

type RegisterProbeDescriptorServerMsgHandle struct{}

func (d *RegisterProbeDescriptor) NewEmptyClientMsg() proto.Message {
	return &RegisterProbeRequest{}
}

func (d *RegisterProbeDescriptor) NewEmptyServerMsg() proto.Message {
	return &RegisterProbeResponse{}
}

func (d *RegisterProbeDescriptor) IsUnary() bool {
	return true
}

func (d *RegisterProbeDescriptor) IsClientStream() bool {
	return false
}

func (d *RegisterProbeDescriptor) IsServerStream() bool {
	return false
}

func (d *RegisterProbeDescriptor) IsCollection() bool {
	return false
}

func (d *RegisterProbeDescriptor) IsPlural() bool {
	return false
}

func (d *RegisterProbeDescriptor) HasResource() bool {
	return true
}

func (d *RegisterProbeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RegisterProbeDescriptor) GetVerb() string {
	return "registerProbe"
}

func (d *RegisterProbeDescriptor) GetMethodName() string {
	return "RegisterProbe"
}

func (d *RegisterProbeDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService/RegisterProbe"
}

func (d *RegisterProbeDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *RegisterProbeDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *RegisterProbeDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *RegisterProbeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RegisterProbeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return sharedTokenServiceDescriptor
}

func (d *RegisterProbeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return shared_token.GetDescriptor()
}

func (d *RegisterProbeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RegisterProbeDescriptorClientMsgHandle{}
}

func (d *RegisterProbeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RegisterProbeDescriptorServerMsgHandle{}
}

func (h *RegisterProbeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterProbeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RegisterProbeRequest) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*shared_token.Name)(nil)
}

func (h *RegisterProbeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RegisterProbeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RegisterProbeRequest) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RegisterProbeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterProbeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RegisterProbeRequest) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RegisterProbeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterProbeResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RegisterProbeResponse) *shared_token.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RegisterProbeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RegisterProbeResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RegisterProbeResponse) []*shared_token.Name
	})
	if ok {
		return shared_token.SharedTokenNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RegisterProbeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterProbeResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RegisterProbeResponse) *shared_token.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetRegisterProbeDescriptor() *RegisterProbeDescriptor {
	return registerProbeDescriptor
}

type SharedTokenServiceDescriptor struct{}

func (d *SharedTokenServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSharedTokenDescriptor,
		batchGetSharedTokensDescriptor,
		listSharedTokensDescriptor,
		watchSharedTokenDescriptor,
		watchSharedTokensDescriptor,
		createSharedTokenDescriptor,
		updateSharedTokenDescriptor,
		deleteSharedTokenDescriptor,
		registerProbeDescriptor,
	}
}

func (d *SharedTokenServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.SharedTokenService"
}

func (d *SharedTokenServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SharedTokenServiceDescriptor) GetApiName() string {
	return "SharedTokenService"
}

func (d *SharedTokenServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SharedTokenServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetSharedTokenServiceDescriptor() *SharedTokenServiceDescriptor {
	return sharedTokenServiceDescriptor
}

func initDescriptors() {
	sharedTokenServiceDescriptor = &SharedTokenServiceDescriptor{}
	getSharedTokenDescriptor = &GetSharedTokenDescriptor{}
	batchGetSharedTokensDescriptor = &BatchGetSharedTokensDescriptor{}
	listSharedTokensDescriptor = &ListSharedTokensDescriptor{}
	watchSharedTokenDescriptor = &WatchSharedTokenDescriptor{}
	watchSharedTokensDescriptor = &WatchSharedTokensDescriptor{}
	createSharedTokenDescriptor = &CreateSharedTokenDescriptor{}
	updateSharedTokenDescriptor = &UpdateSharedTokenDescriptor{}
	deleteSharedTokenDescriptor = &DeleteSharedTokenDescriptor{}
	registerProbeDescriptor = &RegisterProbeDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(sharedTokenServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSharedTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSharedTokensDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSharedTokensDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSharedTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSharedTokensDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSharedTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSharedTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSharedTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(registerProbeDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
