// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token_service.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &shared_token.SharedToken{}
)

type GetSharedTokenRequest_FieldMask struct {
	Paths []GetSharedTokenRequest_FieldPath
}

func FullGetSharedTokenRequest_FieldMask() *GetSharedTokenRequest_FieldMask {
	res := &GetSharedTokenRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetSharedTokenRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetSharedTokenRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetSharedTokenRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetSharedTokenRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetSharedTokenRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetSharedTokenRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetSharedTokenRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetSharedTokenRequest_FieldPath(raw)
	})
}

func (fieldMask *GetSharedTokenRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetSharedTokenRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetSharedTokenRequest_FieldMask) Subtract(other *GetSharedTokenRequest_FieldMask) *GetSharedTokenRequest_FieldMask {
	result := &GetSharedTokenRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetSharedTokenRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetSharedTokenRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetSharedTokenRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetSharedTokenRequest_FieldMask) FilterInputFields() *GetSharedTokenRequest_FieldMask {
	result := &GetSharedTokenRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetSharedTokenRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetSharedTokenRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetSharedTokenRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetSharedTokenRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetSharedTokenRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetSharedTokenRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetSharedTokenRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetSharedTokenRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetSharedTokenRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetSharedTokenRequest_FieldMask) AppendPath(path GetSharedTokenRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetSharedTokenRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetSharedTokenRequest_FieldPath))
}

func (fieldMask *GetSharedTokenRequest_FieldMask) GetPaths() []GetSharedTokenRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetSharedTokenRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetSharedTokenRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetSharedTokenRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetSharedTokenRequest_FieldMask) Set(target, source *GetSharedTokenRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetSharedTokenRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetSharedTokenRequest), source.(*GetSharedTokenRequest))
}

func (fieldMask *GetSharedTokenRequest_FieldMask) Project(source *GetSharedTokenRequest) *GetSharedTokenRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetSharedTokenRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetSharedTokenRequest_FieldTerminalPath:
			switch tp.selector {
			case GetSharedTokenRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetSharedTokenRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetSharedTokenRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetSharedTokenRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetSharedTokenRequest))
}

func (fieldMask *GetSharedTokenRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetSharedTokensRequest_FieldMask struct {
	Paths []BatchGetSharedTokensRequest_FieldPath
}

func FullBatchGetSharedTokensRequest_FieldMask() *BatchGetSharedTokensRequest_FieldMask {
	res := &BatchGetSharedTokensRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetSharedTokensRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetSharedTokensRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetSharedTokensRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetSharedTokensRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Subtract(other *BatchGetSharedTokensRequest_FieldMask) *BatchGetSharedTokensRequest_FieldMask {
	result := &BatchGetSharedTokensRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetSharedTokensRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetSharedTokensRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetSharedTokensRequest_FieldMask) FilterInputFields() *BatchGetSharedTokensRequest_FieldMask {
	result := &BatchGetSharedTokensRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetSharedTokensRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetSharedTokensRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetSharedTokensRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetSharedTokensRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetSharedTokensRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) AppendPath(path BatchGetSharedTokensRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetSharedTokensRequest_FieldPath))
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) GetPaths() []BatchGetSharedTokensRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetSharedTokensRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Set(target, source *BatchGetSharedTokensRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetSharedTokensRequest), source.(*BatchGetSharedTokensRequest))
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) Project(source *BatchGetSharedTokensRequest) *BatchGetSharedTokensRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetSharedTokensRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetSharedTokensRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetSharedTokensRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetSharedTokensRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetSharedTokensRequest))
}

func (fieldMask *BatchGetSharedTokensRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetSharedTokensResponse_FieldMask struct {
	Paths []BatchGetSharedTokensResponse_FieldPath
}

func FullBatchGetSharedTokensResponse_FieldMask() *BatchGetSharedTokensResponse_FieldMask {
	res := &BatchGetSharedTokensResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens})
	res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetSharedTokensResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetSharedTokensResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetSharedTokensResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetSharedTokensResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Subtract(other *BatchGetSharedTokensResponse_FieldMask) *BatchGetSharedTokensResponse_FieldMask {
	result := &BatchGetSharedTokensResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens: &shared_token.SharedToken_FieldMask{},
	}
	mySubMasks := map[BatchGetSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens: &shared_token.SharedToken_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetSharedTokensResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetSharedTokensResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetSharedTokensResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
						mySubMasks[BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens] = shared_token.FullSharedToken_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetSharedTokensResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetSharedTokensResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetSharedTokensResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetSharedTokensResponse_FieldMask) FilterInputFields() *BatchGetSharedTokensResponse_FieldMask {
	result := &BatchGetSharedTokensResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
			if _, ok := path.(*BatchGetSharedTokensResponse_FieldTerminalPath); ok {
				for _, subpath := range shared_token.FullSharedToken_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetSharedTokensResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetSharedTokensResponse_FieldSubPath); ok {
				selectedMask := &shared_token.SharedToken_FieldMask{
					Paths: []shared_token.SharedToken_FieldPath{sub.subPath.(shared_token.SharedToken_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetSharedTokensResponse_FieldSubPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetSharedTokensResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetSharedTokensResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetSharedTokensResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetSharedTokensResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetSharedTokensResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) AppendPath(path BatchGetSharedTokensResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetSharedTokensResponse_FieldPath))
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) GetPaths() []BatchGetSharedTokensResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetSharedTokensResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Set(target, source *BatchGetSharedTokensResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetSharedTokensResponse), source.(*BatchGetSharedTokensResponse))
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) Project(source *BatchGetSharedTokensResponse) *BatchGetSharedTokensResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetSharedTokensResponse{}
	sharedTokensMask := &shared_token.SharedToken_FieldMask{}
	wholeSharedTokensAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetSharedTokensResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
				result.SharedTokens = source.SharedTokens
				wholeSharedTokensAccepted = true
			case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetSharedTokensResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
				sharedTokensMask.AppendPath(tp.subPath.(shared_token.SharedToken_FieldPath))
			}
		}
	}
	if wholeSharedTokensAccepted == false && len(sharedTokensMask.Paths) > 0 {
		for _, sourceItem := range source.GetSharedTokens() {
			result.SharedTokens = append(result.SharedTokens, sharedTokensMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetSharedTokensResponse))
}

func (fieldMask *BatchGetSharedTokensResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListSharedTokensRequest_FieldMask struct {
	Paths []ListSharedTokensRequest_FieldPath
}

func FullListSharedTokensRequest_FieldMask() *ListSharedTokensRequest_FieldMask {
	res := &ListSharedTokensRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListSharedTokensRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListSharedTokensRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListSharedTokensRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListSharedTokensRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListSharedTokensRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListSharedTokensRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListSharedTokensRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListSharedTokensRequest_FieldPath(raw)
	})
}

func (fieldMask *ListSharedTokensRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListSharedTokensRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListSharedTokensRequest_FieldMask) Subtract(other *ListSharedTokensRequest_FieldMask) *ListSharedTokensRequest_FieldMask {
	result := &ListSharedTokensRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListSharedTokensRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListSharedTokensRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListSharedTokensRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListSharedTokensRequest_FieldMask) FilterInputFields() *ListSharedTokensRequest_FieldMask {
	result := &ListSharedTokensRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListSharedTokensRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListSharedTokensRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListSharedTokensRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListSharedTokensRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListSharedTokensRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListSharedTokensRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListSharedTokensRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListSharedTokensRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListSharedTokensRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListSharedTokensRequest_FieldMask) AppendPath(path ListSharedTokensRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListSharedTokensRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListSharedTokensRequest_FieldPath))
}

func (fieldMask *ListSharedTokensRequest_FieldMask) GetPaths() []ListSharedTokensRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListSharedTokensRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListSharedTokensRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListSharedTokensRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListSharedTokensRequest_FieldMask) Set(target, source *ListSharedTokensRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListSharedTokensRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListSharedTokensRequest), source.(*ListSharedTokensRequest))
}

func (fieldMask *ListSharedTokensRequest_FieldMask) Project(source *ListSharedTokensRequest) *ListSharedTokensRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListSharedTokensRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListSharedTokensRequest_FieldTerminalPath:
			switch tp.selector {
			case ListSharedTokensRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListSharedTokensRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListSharedTokensRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListSharedTokensRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListSharedTokensRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListSharedTokensRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListSharedTokensRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListSharedTokensRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListSharedTokensRequest))
}

func (fieldMask *ListSharedTokensRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListSharedTokensResponse_FieldMask struct {
	Paths []ListSharedTokensResponse_FieldPath
}

func FullListSharedTokensResponse_FieldMask() *ListSharedTokensResponse_FieldMask {
	res := &ListSharedTokensResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens})
	res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListSharedTokensResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListSharedTokensResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListSharedTokensResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListSharedTokensResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListSharedTokensResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListSharedTokensResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListSharedTokensResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListSharedTokensResponse_FieldPath(raw)
	})
}

func (fieldMask *ListSharedTokensResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListSharedTokensResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListSharedTokensResponse_FieldMask) Subtract(other *ListSharedTokensResponse_FieldMask) *ListSharedTokensResponse_FieldMask {
	result := &ListSharedTokensResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		ListSharedTokensResponse_FieldPathSelectorSharedTokens: &shared_token.SharedToken_FieldMask{},
	}
	mySubMasks := map[ListSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		ListSharedTokensResponse_FieldPathSelectorSharedTokens: &shared_token.SharedToken_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListSharedTokensResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListSharedTokensResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListSharedTokensResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
						mySubMasks[ListSharedTokensResponse_FieldPathSelectorSharedTokens] = shared_token.FullSharedToken_FieldMask()
					}
				} else if tp, ok := path.(*ListSharedTokensResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListSharedTokensResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListSharedTokensResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListSharedTokensResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListSharedTokensResponse_FieldMask) FilterInputFields() *ListSharedTokensResponse_FieldMask {
	result := &ListSharedTokensResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
			if _, ok := path.(*ListSharedTokensResponse_FieldTerminalPath); ok {
				for _, subpath := range shared_token.FullSharedToken_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListSharedTokensResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListSharedTokensResponse_FieldSubPath); ok {
				selectedMask := &shared_token.SharedToken_FieldMask{
					Paths: []shared_token.SharedToken_FieldPath{sub.subPath.(shared_token.SharedToken_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListSharedTokensResponse_FieldSubPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListSharedTokensResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListSharedTokensResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListSharedTokensResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListSharedTokensResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListSharedTokensResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListSharedTokensResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListSharedTokensResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListSharedTokensResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListSharedTokensResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListSharedTokensResponse_FieldMask) AppendPath(path ListSharedTokensResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListSharedTokensResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListSharedTokensResponse_FieldPath))
}

func (fieldMask *ListSharedTokensResponse_FieldMask) GetPaths() []ListSharedTokensResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListSharedTokensResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListSharedTokensResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListSharedTokensResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListSharedTokensResponse_FieldMask) Set(target, source *ListSharedTokensResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListSharedTokensResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListSharedTokensResponse), source.(*ListSharedTokensResponse))
}

func (fieldMask *ListSharedTokensResponse_FieldMask) Project(source *ListSharedTokensResponse) *ListSharedTokensResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListSharedTokensResponse{}
	sharedTokensMask := &shared_token.SharedToken_FieldMask{}
	wholeSharedTokensAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListSharedTokensResponse_FieldTerminalPath:
			switch tp.selector {
			case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
				result.SharedTokens = source.SharedTokens
				wholeSharedTokensAccepted = true
			case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListSharedTokensResponse_FieldSubPath:
			switch tp.selector {
			case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
				sharedTokensMask.AppendPath(tp.subPath.(shared_token.SharedToken_FieldPath))
			}
		}
	}
	if wholeSharedTokensAccepted == false && len(sharedTokensMask.Paths) > 0 {
		for _, sourceItem := range source.GetSharedTokens() {
			result.SharedTokens = append(result.SharedTokens, sharedTokensMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListSharedTokensResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListSharedTokensResponse))
}

func (fieldMask *ListSharedTokensResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchSharedTokenRequest_FieldMask struct {
	Paths []WatchSharedTokenRequest_FieldPath
}

func FullWatchSharedTokenRequest_FieldMask() *WatchSharedTokenRequest_FieldMask {
	res := &WatchSharedTokenRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchSharedTokenRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchSharedTokenRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchSharedTokenRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchSharedTokenRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Subtract(other *WatchSharedTokenRequest_FieldMask) *WatchSharedTokenRequest_FieldMask {
	result := &WatchSharedTokenRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchSharedTokenRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchSharedTokenRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchSharedTokenRequest_FieldMask) FilterInputFields() *WatchSharedTokenRequest_FieldMask {
	result := &WatchSharedTokenRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchSharedTokenRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchSharedTokenRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchSharedTokenRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchSharedTokenRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchSharedTokenRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) AppendPath(path WatchSharedTokenRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchSharedTokenRequest_FieldPath))
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) GetPaths() []WatchSharedTokenRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchSharedTokenRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Set(target, source *WatchSharedTokenRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchSharedTokenRequest), source.(*WatchSharedTokenRequest))
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) Project(source *WatchSharedTokenRequest) *WatchSharedTokenRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchSharedTokenRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchSharedTokenRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchSharedTokenRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchSharedTokenRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchSharedTokenRequest))
}

func (fieldMask *WatchSharedTokenRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchSharedTokenResponse_FieldMask struct {
	Paths []WatchSharedTokenResponse_FieldPath
}

func FullWatchSharedTokenResponse_FieldMask() *WatchSharedTokenResponse_FieldMask {
	res := &WatchSharedTokenResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchSharedTokenResponse_FieldTerminalPath{selector: WatchSharedTokenResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchSharedTokenResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchSharedTokenResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchSharedTokenResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchSharedTokenResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Subtract(other *WatchSharedTokenResponse_FieldMask) *WatchSharedTokenResponse_FieldMask {
	result := &WatchSharedTokenResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchSharedTokenResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchSharedTokenResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchSharedTokenResponse_FieldMask) FilterInputFields() *WatchSharedTokenResponse_FieldMask {
	result := &WatchSharedTokenResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchSharedTokenResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchSharedTokenResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchSharedTokenResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchSharedTokenResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchSharedTokenResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) AppendPath(path WatchSharedTokenResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchSharedTokenResponse_FieldPath))
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) GetPaths() []WatchSharedTokenResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchSharedTokenResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Set(target, source *WatchSharedTokenResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchSharedTokenResponse), source.(*WatchSharedTokenResponse))
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) Project(source *WatchSharedTokenResponse) *WatchSharedTokenResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchSharedTokenResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchSharedTokenResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchSharedTokenResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchSharedTokenResponse))
}

func (fieldMask *WatchSharedTokenResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchSharedTokensRequest_FieldMask struct {
	Paths []WatchSharedTokensRequest_FieldPath
}

func FullWatchSharedTokensRequest_FieldMask() *WatchSharedTokensRequest_FieldMask {
	res := &WatchSharedTokensRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchSharedTokensRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchSharedTokensRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchSharedTokensRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchSharedTokensRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Subtract(other *WatchSharedTokensRequest_FieldMask) *WatchSharedTokensRequest_FieldMask {
	result := &WatchSharedTokensRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchSharedTokensRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchSharedTokensRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchSharedTokensRequest_FieldMask) FilterInputFields() *WatchSharedTokensRequest_FieldMask {
	result := &WatchSharedTokensRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchSharedTokensRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchSharedTokensRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchSharedTokensRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchSharedTokensRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchSharedTokensRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) AppendPath(path WatchSharedTokensRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchSharedTokensRequest_FieldPath))
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) GetPaths() []WatchSharedTokensRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchSharedTokensRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Set(target, source *WatchSharedTokensRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchSharedTokensRequest), source.(*WatchSharedTokensRequest))
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) Project(source *WatchSharedTokensRequest) *WatchSharedTokensRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchSharedTokensRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchSharedTokensRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchSharedTokensRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchSharedTokensRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchSharedTokensRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchSharedTokensRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchSharedTokensRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchSharedTokensRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchSharedTokensRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchSharedTokensRequest))
}

func (fieldMask *WatchSharedTokensRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchSharedTokensResponse_FieldMask struct {
	Paths []WatchSharedTokensResponse_FieldPath
}

func FullWatchSharedTokensResponse_FieldMask() *WatchSharedTokensResponse_FieldMask {
	res := &WatchSharedTokensResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchSharedTokensResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchSharedTokensResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchSharedTokensResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchSharedTokensResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Subtract(other *WatchSharedTokensResponse_FieldMask) *WatchSharedTokensResponse_FieldMask {
	result := &WatchSharedTokensResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchSharedTokensResponse_FieldPathSelectorPageTokenChange: &WatchSharedTokensResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchSharedTokensResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchSharedTokensResponse_FieldPathSelectorPageTokenChange: &WatchSharedTokensResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchSharedTokensResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchSharedTokensResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchSharedTokensResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchSharedTokensResponse_FieldPathSelectorPageTokenChange] = FullWatchSharedTokensResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchSharedTokensResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchSharedTokensResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchSharedTokensResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchSharedTokensResponse_FieldMask) FilterInputFields() *WatchSharedTokensResponse_FieldMask {
	result := &WatchSharedTokensResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchSharedTokensResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchSharedTokensResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchSharedTokensResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchSharedTokensResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchSharedTokensResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) AppendPath(path WatchSharedTokensResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchSharedTokensResponse_FieldPath))
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) GetPaths() []WatchSharedTokensResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchSharedTokensResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Set(target, source *WatchSharedTokensResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchSharedTokensResponse), source.(*WatchSharedTokensResponse))
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) Project(source *WatchSharedTokensResponse) *WatchSharedTokensResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchSharedTokensResponse{}
	pageTokenChangeMask := &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchSharedTokensResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
				result.SharedTokenChanges = source.SharedTokenChanges
			case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchSharedTokensResponse_FieldSubPath:
			switch tp.selector {
			case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchSharedTokensResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchSharedTokensResponse))
}

func (fieldMask *WatchSharedTokensResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchSharedTokensResponse_PageTokenChange_FieldMask struct {
	Paths []WatchSharedTokensResponsePageTokenChange_FieldPath
}

func FullWatchSharedTokensResponse_PageTokenChange_FieldMask() *WatchSharedTokensResponse_PageTokenChange_FieldMask {
	res := &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchSharedTokensResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchSharedTokensResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Subtract(other *WatchSharedTokensResponse_PageTokenChange_FieldMask) *WatchSharedTokensResponse_PageTokenChange_FieldMask {
	result := &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchSharedTokensResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchSharedTokensResponse_PageTokenChange_FieldMask {
	result := &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchSharedTokensResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchSharedTokensResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchSharedTokensResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) AppendPath(path WatchSharedTokensResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchSharedTokensResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) GetPaths() []WatchSharedTokensResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Set(target, source *WatchSharedTokensResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchSharedTokensResponse_PageTokenChange), source.(*WatchSharedTokensResponse_PageTokenChange))
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) Project(source *WatchSharedTokensResponse_PageTokenChange) *WatchSharedTokensResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchSharedTokensResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchSharedTokensResponse_PageTokenChange))
}

func (fieldMask *WatchSharedTokensResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateSharedTokenRequest_FieldMask struct {
	Paths []CreateSharedTokenRequest_FieldPath
}

func FullCreateSharedTokenRequest_FieldMask() *CreateSharedTokenRequest_FieldMask {
	res := &CreateSharedTokenRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken})
	return res
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateSharedTokenRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateSharedTokenRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateSharedTokenRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateSharedTokenRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Subtract(other *CreateSharedTokenRequest_FieldMask) *CreateSharedTokenRequest_FieldMask {
	result := &CreateSharedTokenRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateSharedTokenRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateSharedTokenRequest_FieldPathSelectorSharedToken: &shared_token.SharedToken_FieldMask{},
	}
	mySubMasks := map[CreateSharedTokenRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateSharedTokenRequest_FieldPathSelectorSharedToken: &shared_token.SharedToken_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateSharedTokenRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateSharedTokenRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateSharedTokenRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
						mySubMasks[CreateSharedTokenRequest_FieldPathSelectorSharedToken] = shared_token.FullSharedToken_FieldMask()
					}
				} else if tp, ok := path.(*CreateSharedTokenRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateSharedTokenRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateSharedTokenRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateSharedTokenRequest_FieldMask) FilterInputFields() *CreateSharedTokenRequest_FieldMask {
	result := &CreateSharedTokenRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
			if _, ok := path.(*CreateSharedTokenRequest_FieldTerminalPath); ok {
				for _, subpath := range shared_token.FullSharedToken_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateSharedTokenRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateSharedTokenRequest_FieldSubPath); ok {
				selectedMask := &shared_token.SharedToken_FieldMask{
					Paths: []shared_token.SharedToken_FieldPath{sub.subPath.(shared_token.SharedToken_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateSharedTokenRequest_FieldSubPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateSharedTokenRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateSharedTokenRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateSharedTokenRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateSharedTokenRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateSharedTokenRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) AppendPath(path CreateSharedTokenRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateSharedTokenRequest_FieldPath))
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) GetPaths() []CreateSharedTokenRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateSharedTokenRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Set(target, source *CreateSharedTokenRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateSharedTokenRequest), source.(*CreateSharedTokenRequest))
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) Project(source *CreateSharedTokenRequest) *CreateSharedTokenRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateSharedTokenRequest{}
	sharedTokenMask := &shared_token.SharedToken_FieldMask{}
	wholeSharedTokenAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateSharedTokenRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateSharedTokenRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
				result.SharedToken = source.SharedToken
				wholeSharedTokenAccepted = true
			}
		case *CreateSharedTokenRequest_FieldSubPath:
			switch tp.selector {
			case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
				sharedTokenMask.AppendPath(tp.subPath.(shared_token.SharedToken_FieldPath))
			}
		}
	}
	if wholeSharedTokenAccepted == false && len(sharedTokenMask.Paths) > 0 {
		result.SharedToken = sharedTokenMask.Project(source.GetSharedToken())
	}
	return result
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateSharedTokenRequest))
}

func (fieldMask *CreateSharedTokenRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateSharedTokenRequest_FieldMask struct {
	Paths []UpdateSharedTokenRequest_FieldPath
}

func FullUpdateSharedTokenRequest_FieldMask() *UpdateSharedTokenRequest_FieldMask {
	res := &UpdateSharedTokenRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken})
	res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateSharedTokenRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateSharedTokenRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateSharedTokenRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateSharedTokenRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Subtract(other *UpdateSharedTokenRequest_FieldMask) *UpdateSharedTokenRequest_FieldMask {
	result := &UpdateSharedTokenRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateSharedTokenRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateSharedTokenRequest_FieldPathSelectorSharedToken: &shared_token.SharedToken_FieldMask{},
		UpdateSharedTokenRequest_FieldPathSelectorCas:         &UpdateSharedTokenRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateSharedTokenRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateSharedTokenRequest_FieldPathSelectorSharedToken: &shared_token.SharedToken_FieldMask{},
		UpdateSharedTokenRequest_FieldPathSelectorCas:         &UpdateSharedTokenRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateSharedTokenRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateSharedTokenRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateSharedTokenRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
						mySubMasks[UpdateSharedTokenRequest_FieldPathSelectorSharedToken] = shared_token.FullSharedToken_FieldMask()
					case UpdateSharedTokenRequest_FieldPathSelectorCas:
						mySubMasks[UpdateSharedTokenRequest_FieldPathSelectorCas] = FullUpdateSharedTokenRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateSharedTokenRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateSharedTokenRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateSharedTokenRequest_FieldMask) FilterInputFields() *UpdateSharedTokenRequest_FieldMask {
	result := &UpdateSharedTokenRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
			if _, ok := path.(*UpdateSharedTokenRequest_FieldTerminalPath); ok {
				for _, subpath := range shared_token.FullSharedToken_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateSharedTokenRequest_FieldSubPath); ok {
				selectedMask := &shared_token.SharedToken_FieldMask{
					Paths: []shared_token.SharedToken_FieldPath{sub.subPath.(shared_token.SharedToken_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: allowedPath})
				}
			}
		case UpdateSharedTokenRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateSharedTokenRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateSharedTokenRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateSharedTokenRequest_FieldSubPath); ok {
				selectedMask := &UpdateSharedTokenRequest_CAS_FieldMask{
					Paths: []UpdateSharedTokenRequestCAS_FieldPath{sub.subPath.(UpdateSharedTokenRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateSharedTokenRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateSharedTokenRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateSharedTokenRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateSharedTokenRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateSharedTokenRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) AppendPath(path UpdateSharedTokenRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateSharedTokenRequest_FieldPath))
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) GetPaths() []UpdateSharedTokenRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateSharedTokenRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Set(target, source *UpdateSharedTokenRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateSharedTokenRequest), source.(*UpdateSharedTokenRequest))
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) Project(source *UpdateSharedTokenRequest) *UpdateSharedTokenRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateSharedTokenRequest{}
	sharedTokenMask := &shared_token.SharedToken_FieldMask{}
	wholeSharedTokenAccepted := false
	casMask := &UpdateSharedTokenRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateSharedTokenRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
				result.SharedToken = source.SharedToken
				wholeSharedTokenAccepted = true
			case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateSharedTokenRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateSharedTokenRequest_FieldSubPath:
			switch tp.selector {
			case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
				sharedTokenMask.AppendPath(tp.subPath.(shared_token.SharedToken_FieldPath))
			case UpdateSharedTokenRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateSharedTokenRequestCAS_FieldPath))
			}
		}
	}
	if wholeSharedTokenAccepted == false && len(sharedTokenMask.Paths) > 0 {
		result.SharedToken = sharedTokenMask.Project(source.GetSharedToken())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateSharedTokenRequest))
}

func (fieldMask *UpdateSharedTokenRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateSharedTokenRequest_CAS_FieldMask struct {
	Paths []UpdateSharedTokenRequestCAS_FieldPath
}

func FullUpdateSharedTokenRequest_CAS_FieldMask() *UpdateSharedTokenRequest_CAS_FieldMask {
	res := &UpdateSharedTokenRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateSharedTokenRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateSharedTokenRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateSharedTokenRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Subtract(other *UpdateSharedTokenRequest_CAS_FieldMask) *UpdateSharedTokenRequest_CAS_FieldMask {
	result := &UpdateSharedTokenRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateSharedTokenRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState: &shared_token.SharedToken_FieldMask{},
	}
	mySubMasks := map[UpdateSharedTokenRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState: &shared_token.SharedToken_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateSharedTokenRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateSharedTokenRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateSharedTokenRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState] = shared_token.FullSharedToken_FieldMask()
					}
				} else if tp, ok := path.(*UpdateSharedTokenRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateSharedTokenRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateSharedTokenRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) FilterInputFields() *UpdateSharedTokenRequest_CAS_FieldMask {
	result := &UpdateSharedTokenRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateSharedTokenRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range shared_token.FullSharedToken_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateSharedTokenRequestCAS_FieldSubPath); ok {
				selectedMask := &shared_token.SharedToken_FieldMask{
					Paths: []shared_token.SharedToken_FieldPath{sub.subPath.(shared_token.SharedToken_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateSharedTokenRequestCAS_FieldSubPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateSharedTokenRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateSharedTokenRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateSharedTokenRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateSharedTokenRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) AppendPath(path UpdateSharedTokenRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateSharedTokenRequestCAS_FieldPath))
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) GetPaths() []UpdateSharedTokenRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateSharedTokenRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Set(target, source *UpdateSharedTokenRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateSharedTokenRequest_CAS), source.(*UpdateSharedTokenRequest_CAS))
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) Project(source *UpdateSharedTokenRequest_CAS) *UpdateSharedTokenRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateSharedTokenRequest_CAS{}
	conditionalStateMask := &shared_token.SharedToken_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateSharedTokenRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateSharedTokenRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(shared_token.SharedToken_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateSharedTokenRequest_CAS))
}

func (fieldMask *UpdateSharedTokenRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteSharedTokenRequest_FieldMask struct {
	Paths []DeleteSharedTokenRequest_FieldPath
}

func FullDeleteSharedTokenRequest_FieldMask() *DeleteSharedTokenRequest_FieldMask {
	res := &DeleteSharedTokenRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteSharedTokenRequest_FieldTerminalPath{selector: DeleteSharedTokenRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteSharedTokenRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteSharedTokenRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteSharedTokenRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteSharedTokenRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Subtract(other *DeleteSharedTokenRequest_FieldMask) *DeleteSharedTokenRequest_FieldMask {
	result := &DeleteSharedTokenRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteSharedTokenRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteSharedTokenRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteSharedTokenRequest_FieldMask) FilterInputFields() *DeleteSharedTokenRequest_FieldMask {
	result := &DeleteSharedTokenRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteSharedTokenRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteSharedTokenRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteSharedTokenRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteSharedTokenRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteSharedTokenRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) AppendPath(path DeleteSharedTokenRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteSharedTokenRequest_FieldPath))
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) GetPaths() []DeleteSharedTokenRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteSharedTokenRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Set(target, source *DeleteSharedTokenRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteSharedTokenRequest), source.(*DeleteSharedTokenRequest))
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) Project(source *DeleteSharedTokenRequest) *DeleteSharedTokenRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteSharedTokenRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteSharedTokenRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteSharedTokenRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteSharedTokenRequest))
}

func (fieldMask *DeleteSharedTokenRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
