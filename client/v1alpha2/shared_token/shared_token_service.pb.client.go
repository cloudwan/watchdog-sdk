// Code generated by protoc-gen-goten-client
// API: SharedTokenService
// DO NOT EDIT!!!

package shared_token_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &shared_token.SharedToken{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SharedTokenServiceClient is the client API for SharedTokenService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharedTokenServiceClient interface {
	GetSharedToken(ctx context.Context, in *GetSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error)
	BatchGetSharedTokens(ctx context.Context, in *BatchGetSharedTokensRequest, opts ...grpc.CallOption) (*BatchGetSharedTokensResponse, error)
	ListSharedTokens(ctx context.Context, in *ListSharedTokensRequest, opts ...grpc.CallOption) (*ListSharedTokensResponse, error)
	WatchSharedToken(ctx context.Context, in *WatchSharedTokenRequest, opts ...grpc.CallOption) (WatchSharedTokenClientStream, error)
	WatchSharedTokens(ctx context.Context, in *WatchSharedTokensRequest, opts ...grpc.CallOption) (WatchSharedTokensClientStream, error)
	CreateSharedToken(ctx context.Context, in *CreateSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error)
	UpdateSharedToken(ctx context.Context, in *UpdateSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error)
	DeleteSharedToken(ctx context.Context, in *DeleteSharedTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterProbe(ctx context.Context, in *RegisterProbeRequest, opts ...grpc.CallOption) (*RegisterProbeResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSharedTokenServiceClient(cc grpc.ClientConnInterface) SharedTokenServiceClient {
	return &client{cc}
}

func (c *client) GetSharedToken(ctx context.Context, in *GetSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error) {
	out := new(shared_token.SharedToken)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/GetSharedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSharedTokens(ctx context.Context, in *BatchGetSharedTokensRequest, opts ...grpc.CallOption) (*BatchGetSharedTokensResponse, error) {
	out := new(BatchGetSharedTokensResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/BatchGetSharedTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSharedTokens(ctx context.Context, in *ListSharedTokensRequest, opts ...grpc.CallOption) (*ListSharedTokensResponse, error) {
	out := new(ListSharedTokensResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/ListSharedTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSharedToken(ctx context.Context, in *WatchSharedTokenRequest, opts ...grpc.CallOption) (WatchSharedTokenClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSharedToken",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.SharedTokenService/WatchSharedToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSharedTokenWatchSharedTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSharedTokenClientStream interface {
	Recv() (*WatchSharedTokenResponse, error)
	grpc.ClientStream
}

type watchSharedTokenWatchSharedTokenClient struct {
	grpc.ClientStream
}

func (x *watchSharedTokenWatchSharedTokenClient) Recv() (*WatchSharedTokenResponse, error) {
	m := new(WatchSharedTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSharedTokens(ctx context.Context, in *WatchSharedTokensRequest, opts ...grpc.CallOption) (WatchSharedTokensClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSharedTokens",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.SharedTokenService/WatchSharedTokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSharedTokensWatchSharedTokensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSharedTokensClientStream interface {
	Recv() (*WatchSharedTokensResponse, error)
	grpc.ClientStream
}

type watchSharedTokensWatchSharedTokensClient struct {
	grpc.ClientStream
}

func (x *watchSharedTokensWatchSharedTokensClient) Recv() (*WatchSharedTokensResponse, error) {
	m := new(WatchSharedTokensResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSharedToken(ctx context.Context, in *CreateSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error) {
	out := new(shared_token.SharedToken)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/CreateSharedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSharedToken(ctx context.Context, in *UpdateSharedTokenRequest, opts ...grpc.CallOption) (*shared_token.SharedToken, error) {
	out := new(shared_token.SharedToken)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/UpdateSharedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSharedToken(ctx context.Context, in *DeleteSharedTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/DeleteSharedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RegisterProbe(ctx context.Context, in *RegisterProbeRequest, opts ...grpc.CallOption) (*RegisterProbeResponse, error) {
	out := new(RegisterProbeResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.SharedTokenService/RegisterProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
