// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token_service.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &shared_token.SharedToken{}
)

func (o *GetSharedTokenRequest) GotenObjectExt() {}

func (o *GetSharedTokenRequest) MakeFullFieldMask() *GetSharedTokenRequest_FieldMask {
	return FullGetSharedTokenRequest_FieldMask()
}

func (o *GetSharedTokenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetSharedTokenRequest_FieldMask()
}

func (o *GetSharedTokenRequest) MakeDiffFieldMask(other *GetSharedTokenRequest) *GetSharedTokenRequest_FieldMask {
	if o == nil && other == nil {
		return &GetSharedTokenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetSharedTokenRequest_FieldMask()
	}

	res := &GetSharedTokenRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetSharedTokenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetSharedTokenRequest))
}

func (o *GetSharedTokenRequest) Clone() *GetSharedTokenRequest {
	if o == nil {
		return nil
	}
	result := &GetSharedTokenRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &shared_token.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	result.View = o.View
	return result
}

func (o *GetSharedTokenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetSharedTokenRequest) Merge(source *GetSharedTokenRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &shared_token.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetSharedTokenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetSharedTokenRequest))
}

func (o *BatchGetSharedTokensRequest) GotenObjectExt() {}

func (o *BatchGetSharedTokensRequest) MakeFullFieldMask() *BatchGetSharedTokensRequest_FieldMask {
	return FullBatchGetSharedTokensRequest_FieldMask()
}

func (o *BatchGetSharedTokensRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSharedTokensRequest_FieldMask()
}

func (o *BatchGetSharedTokensRequest) MakeDiffFieldMask(other *BatchGetSharedTokensRequest) *BatchGetSharedTokensRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSharedTokensRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSharedTokensRequest_FieldMask()
	}

	res := &BatchGetSharedTokensRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetSharedTokensRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSharedTokensRequest))
}

func (o *BatchGetSharedTokensRequest) Clone() *BatchGetSharedTokensRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetSharedTokensRequest{}
	result.Names = make([]*shared_token.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &shared_token.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetSharedTokensRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSharedTokensRequest) Merge(source *BatchGetSharedTokensRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *shared_token.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &shared_token.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetSharedTokensRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSharedTokensRequest))
}

func (o *BatchGetSharedTokensResponse) GotenObjectExt() {}

func (o *BatchGetSharedTokensResponse) MakeFullFieldMask() *BatchGetSharedTokensResponse_FieldMask {
	return FullBatchGetSharedTokensResponse_FieldMask()
}

func (o *BatchGetSharedTokensResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSharedTokensResponse_FieldMask()
}

func (o *BatchGetSharedTokensResponse) MakeDiffFieldMask(other *BatchGetSharedTokensResponse) *BatchGetSharedTokensResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSharedTokensResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSharedTokensResponse_FieldMask()
	}

	res := &BatchGetSharedTokensResponse_FieldMask{}

	if len(o.GetSharedTokens()) == len(other.GetSharedTokens()) {
		for i, lValue := range o.GetSharedTokens() {
			rValue := other.GetSharedTokens()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetSharedTokensResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSharedTokensResponse))
}

func (o *BatchGetSharedTokensResponse) Clone() *BatchGetSharedTokensResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetSharedTokensResponse{}
	result.SharedTokens = make([]*shared_token.SharedToken, len(o.SharedTokens))
	for i, sourceValue := range o.SharedTokens {
		result.SharedTokens[i] = sourceValue.Clone()
	}
	result.Missing = make([]*shared_token.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &shared_token.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetSharedTokensResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSharedTokensResponse) Merge(source *BatchGetSharedTokensResponse) {
	for _, sourceValue := range source.GetSharedTokens() {
		exists := false
		for _, currentValue := range o.SharedTokens {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *shared_token.SharedToken
			if sourceValue != nil {
				newDstElement = new(shared_token.SharedToken)
				newDstElement.Merge(sourceValue)
			}
			o.SharedTokens = append(o.SharedTokens, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *shared_token.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &shared_token.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetSharedTokensResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSharedTokensResponse))
}

func (o *ListSharedTokensRequest) GotenObjectExt() {}

func (o *ListSharedTokensRequest) MakeFullFieldMask() *ListSharedTokensRequest_FieldMask {
	return FullListSharedTokensRequest_FieldMask()
}

func (o *ListSharedTokensRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSharedTokensRequest_FieldMask()
}

func (o *ListSharedTokensRequest) MakeDiffFieldMask(other *ListSharedTokensRequest) *ListSharedTokensRequest_FieldMask {
	if o == nil && other == nil {
		return &ListSharedTokensRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSharedTokensRequest_FieldMask()
	}

	res := &ListSharedTokensRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListSharedTokensRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSharedTokensRequest))
}

func (o *ListSharedTokensRequest) Clone() *ListSharedTokensRequest {
	if o == nil {
		return nil
	}
	result := &ListSharedTokensRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &shared_token.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &shared_token.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &shared_token.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &shared_token.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	result.View = o.View
	return result
}

func (o *ListSharedTokensRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSharedTokensRequest) Merge(source *ListSharedTokensRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &shared_token.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &shared_token.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &shared_token.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &shared_token.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListSharedTokensRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSharedTokensRequest))
}

func (o *ListSharedTokensResponse) GotenObjectExt() {}

func (o *ListSharedTokensResponse) MakeFullFieldMask() *ListSharedTokensResponse_FieldMask {
	return FullListSharedTokensResponse_FieldMask()
}

func (o *ListSharedTokensResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSharedTokensResponse_FieldMask()
}

func (o *ListSharedTokensResponse) MakeDiffFieldMask(other *ListSharedTokensResponse) *ListSharedTokensResponse_FieldMask {
	if o == nil && other == nil {
		return &ListSharedTokensResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSharedTokensResponse_FieldMask()
	}

	res := &ListSharedTokensResponse_FieldMask{}

	if len(o.GetSharedTokens()) == len(other.GetSharedTokens()) {
		for i, lValue := range o.GetSharedTokens() {
			rValue := other.GetSharedTokens()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListSharedTokensResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSharedTokensResponse))
}

func (o *ListSharedTokensResponse) Clone() *ListSharedTokensResponse {
	if o == nil {
		return nil
	}
	result := &ListSharedTokensResponse{}
	result.SharedTokens = make([]*shared_token.SharedToken, len(o.SharedTokens))
	for i, sourceValue := range o.SharedTokens {
		result.SharedTokens[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &shared_token.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &shared_token.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListSharedTokensResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSharedTokensResponse) Merge(source *ListSharedTokensResponse) {
	for _, sourceValue := range source.GetSharedTokens() {
		exists := false
		for _, currentValue := range o.SharedTokens {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *shared_token.SharedToken
			if sourceValue != nil {
				newDstElement = new(shared_token.SharedToken)
				newDstElement.Merge(sourceValue)
			}
			o.SharedTokens = append(o.SharedTokens, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &shared_token.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &shared_token.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListSharedTokensResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSharedTokensResponse))
}

func (o *WatchSharedTokenRequest) GotenObjectExt() {}

func (o *WatchSharedTokenRequest) MakeFullFieldMask() *WatchSharedTokenRequest_FieldMask {
	return FullWatchSharedTokenRequest_FieldMask()
}

func (o *WatchSharedTokenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSharedTokenRequest_FieldMask()
}

func (o *WatchSharedTokenRequest) MakeDiffFieldMask(other *WatchSharedTokenRequest) *WatchSharedTokenRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSharedTokenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSharedTokenRequest_FieldMask()
	}

	res := &WatchSharedTokenRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchSharedTokenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSharedTokenRequest))
}

func (o *WatchSharedTokenRequest) Clone() *WatchSharedTokenRequest {
	if o == nil {
		return nil
	}
	result := &WatchSharedTokenRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &shared_token.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchSharedTokenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSharedTokenRequest) Merge(source *WatchSharedTokenRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &shared_token.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchSharedTokenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSharedTokenRequest))
}

func (o *WatchSharedTokenResponse) GotenObjectExt() {}

func (o *WatchSharedTokenResponse) MakeFullFieldMask() *WatchSharedTokenResponse_FieldMask {
	return FullWatchSharedTokenResponse_FieldMask()
}

func (o *WatchSharedTokenResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSharedTokenResponse_FieldMask()
}

func (o *WatchSharedTokenResponse) MakeDiffFieldMask(other *WatchSharedTokenResponse) *WatchSharedTokenResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSharedTokenResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSharedTokenResponse_FieldMask()
	}

	res := &WatchSharedTokenResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchSharedTokenResponse_FieldTerminalPath{selector: WatchSharedTokenResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchSharedTokenResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSharedTokenResponse))
}

func (o *WatchSharedTokenResponse) Clone() *WatchSharedTokenResponse {
	if o == nil {
		return nil
	}
	result := &WatchSharedTokenResponse{}
	result.Change = proto.Clone(o.Change).(*shared_token.SharedTokenChange)
	return result
}

func (o *WatchSharedTokenResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSharedTokenResponse) Merge(source *WatchSharedTokenResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(shared_token.SharedTokenChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchSharedTokenResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSharedTokenResponse))
}

func (o *WatchSharedTokensRequest) GotenObjectExt() {}

func (o *WatchSharedTokensRequest) MakeFullFieldMask() *WatchSharedTokensRequest_FieldMask {
	return FullWatchSharedTokensRequest_FieldMask()
}

func (o *WatchSharedTokensRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSharedTokensRequest_FieldMask()
}

func (o *WatchSharedTokensRequest) MakeDiffFieldMask(other *WatchSharedTokensRequest) *WatchSharedTokensRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSharedTokensRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSharedTokensRequest_FieldMask()
	}

	res := &WatchSharedTokensRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchSharedTokensRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSharedTokensRequest))
}

func (o *WatchSharedTokensRequest) Clone() *WatchSharedTokensRequest {
	if o == nil {
		return nil
	}
	result := &WatchSharedTokensRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &shared_token.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &shared_token.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &shared_token.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &shared_token.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchSharedTokensRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSharedTokensRequest) Merge(source *WatchSharedTokensRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &shared_token.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &shared_token.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &shared_token.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &shared_token.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchSharedTokensRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSharedTokensRequest))
}

func (o *WatchSharedTokensResponse) GotenObjectExt() {}

func (o *WatchSharedTokensResponse) MakeFullFieldMask() *WatchSharedTokensResponse_FieldMask {
	return FullWatchSharedTokensResponse_FieldMask()
}

func (o *WatchSharedTokensResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSharedTokensResponse_FieldMask()
}

func (o *WatchSharedTokensResponse) MakeDiffFieldMask(other *WatchSharedTokensResponse) *WatchSharedTokensResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSharedTokensResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSharedTokensResponse_FieldMask()
	}

	res := &WatchSharedTokensResponse_FieldMask{}

	if len(o.GetSharedTokenChanges()) == len(other.GetSharedTokenChanges()) {
		for i, lValue := range o.GetSharedTokenChanges() {
			rValue := other.GetSharedTokenChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldSubPath{selector: WatchSharedTokensResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchSharedTokensResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSharedTokensResponse))
}

func (o *WatchSharedTokensResponse) Clone() *WatchSharedTokensResponse {
	if o == nil {
		return nil
	}
	result := &WatchSharedTokensResponse{}
	result.SharedTokenChanges = make([]*shared_token.SharedTokenChange, len(o.SharedTokenChanges))
	for i, sourceValue := range o.SharedTokenChanges {
		result.SharedTokenChanges[i] = proto.Clone(sourceValue).(*shared_token.SharedTokenChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchSharedTokensResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSharedTokensResponse) Merge(source *WatchSharedTokensResponse) {
	for _, sourceValue := range source.GetSharedTokenChanges() {
		exists := false
		for _, currentValue := range o.SharedTokenChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *shared_token.SharedTokenChange
			if sourceValue != nil {
				newDstElement = new(shared_token.SharedTokenChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.SharedTokenChanges = append(o.SharedTokenChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchSharedTokensResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchSharedTokensResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSharedTokensResponse))
}

func (o *WatchSharedTokensResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchSharedTokensResponse_PageTokenChange) MakeFullFieldMask() *WatchSharedTokensResponse_PageTokenChange_FieldMask {
	return FullWatchSharedTokensResponse_PageTokenChange_FieldMask()
}

func (o *WatchSharedTokensResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSharedTokensResponse_PageTokenChange_FieldMask()
}

func (o *WatchSharedTokensResponse_PageTokenChange) MakeDiffFieldMask(other *WatchSharedTokensResponse_PageTokenChange) *WatchSharedTokensResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSharedTokensResponse_PageTokenChange_FieldMask()
	}

	res := &WatchSharedTokensResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchSharedTokensResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSharedTokensResponse_PageTokenChange))
}

func (o *WatchSharedTokensResponse_PageTokenChange) Clone() *WatchSharedTokensResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchSharedTokensResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &shared_token.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &shared_token.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchSharedTokensResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSharedTokensResponse_PageTokenChange) Merge(source *WatchSharedTokensResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &shared_token.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &shared_token.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchSharedTokensResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSharedTokensResponse_PageTokenChange))
}

func (o *CreateSharedTokenRequest) GotenObjectExt() {}

func (o *CreateSharedTokenRequest) MakeFullFieldMask() *CreateSharedTokenRequest_FieldMask {
	return FullCreateSharedTokenRequest_FieldMask()
}

func (o *CreateSharedTokenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateSharedTokenRequest_FieldMask()
}

func (o *CreateSharedTokenRequest) MakeDiffFieldMask(other *CreateSharedTokenRequest) *CreateSharedTokenRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateSharedTokenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateSharedTokenRequest_FieldMask()
	}

	res := &CreateSharedTokenRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetSharedToken().MakeDiffFieldMask(other.GetSharedToken())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateSharedTokenRequest_FieldSubPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateSharedTokenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateSharedTokenRequest))
}

func (o *CreateSharedTokenRequest) Clone() *CreateSharedTokenRequest {
	if o == nil {
		return nil
	}
	result := &CreateSharedTokenRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &shared_token.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.SharedToken = o.SharedToken.Clone()
	return result
}

func (o *CreateSharedTokenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateSharedTokenRequest) Merge(source *CreateSharedTokenRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &shared_token.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetSharedToken() != nil {
		if o.SharedToken == nil {
			o.SharedToken = new(shared_token.SharedToken)
		}
		o.SharedToken.Merge(source.GetSharedToken())
	}
}

func (o *CreateSharedTokenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateSharedTokenRequest))
}

func (o *UpdateSharedTokenRequest) GotenObjectExt() {}

func (o *UpdateSharedTokenRequest) MakeFullFieldMask() *UpdateSharedTokenRequest_FieldMask {
	return FullUpdateSharedTokenRequest_FieldMask()
}

func (o *UpdateSharedTokenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSharedTokenRequest_FieldMask()
}

func (o *UpdateSharedTokenRequest) MakeDiffFieldMask(other *UpdateSharedTokenRequest) *UpdateSharedTokenRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateSharedTokenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSharedTokenRequest_FieldMask()
	}

	res := &UpdateSharedTokenRequest_FieldMask{}
	{
		subMask := o.GetSharedToken().MakeDiffFieldMask(other.GetSharedToken())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateSharedTokenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSharedTokenRequest))
}

func (o *UpdateSharedTokenRequest) Clone() *UpdateSharedTokenRequest {
	if o == nil {
		return nil
	}
	result := &UpdateSharedTokenRequest{}
	result.SharedToken = o.SharedToken.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*shared_token.SharedToken_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateSharedTokenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSharedTokenRequest) Merge(source *UpdateSharedTokenRequest) {
	if source.GetSharedToken() != nil {
		if o.SharedToken == nil {
			o.SharedToken = new(shared_token.SharedToken)
		}
		o.SharedToken.Merge(source.GetSharedToken())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateSharedTokenRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateSharedTokenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSharedTokenRequest))
}

func (o *UpdateSharedTokenRequest_CAS) GotenObjectExt() {}

func (o *UpdateSharedTokenRequest_CAS) MakeFullFieldMask() *UpdateSharedTokenRequest_CAS_FieldMask {
	return FullUpdateSharedTokenRequest_CAS_FieldMask()
}

func (o *UpdateSharedTokenRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSharedTokenRequest_CAS_FieldMask()
}

func (o *UpdateSharedTokenRequest_CAS) MakeDiffFieldMask(other *UpdateSharedTokenRequest_CAS) *UpdateSharedTokenRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateSharedTokenRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSharedTokenRequest_CAS_FieldMask()
	}

	res := &UpdateSharedTokenRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSharedTokenRequestCAS_FieldSubPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateSharedTokenRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSharedTokenRequest_CAS))
}

func (o *UpdateSharedTokenRequest_CAS) Clone() *UpdateSharedTokenRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateSharedTokenRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*shared_token.SharedToken_FieldMask)
	return result
}

func (o *UpdateSharedTokenRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSharedTokenRequest_CAS) Merge(source *UpdateSharedTokenRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(shared_token.SharedToken)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(shared_token.SharedToken_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateSharedTokenRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSharedTokenRequest_CAS))
}

func (o *DeleteSharedTokenRequest) GotenObjectExt() {}

func (o *DeleteSharedTokenRequest) MakeFullFieldMask() *DeleteSharedTokenRequest_FieldMask {
	return FullDeleteSharedTokenRequest_FieldMask()
}

func (o *DeleteSharedTokenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteSharedTokenRequest_FieldMask()
}

func (o *DeleteSharedTokenRequest) MakeDiffFieldMask(other *DeleteSharedTokenRequest) *DeleteSharedTokenRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteSharedTokenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteSharedTokenRequest_FieldMask()
	}

	res := &DeleteSharedTokenRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteSharedTokenRequest_FieldTerminalPath{selector: DeleteSharedTokenRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteSharedTokenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteSharedTokenRequest))
}

func (o *DeleteSharedTokenRequest) Clone() *DeleteSharedTokenRequest {
	if o == nil {
		return nil
	}
	result := &DeleteSharedTokenRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &shared_token.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteSharedTokenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteSharedTokenRequest) Merge(source *DeleteSharedTokenRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &shared_token.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteSharedTokenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteSharedTokenRequest))
}
