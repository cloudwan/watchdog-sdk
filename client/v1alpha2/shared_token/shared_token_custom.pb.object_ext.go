// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token_custom.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &probe.Probe{}
	_ = &shared_token.SharedToken{}
)

func (o *RegisterProbeRequest) GotenObjectExt() {}

func (o *RegisterProbeRequest) MakeFullFieldMask() *RegisterProbeRequest_FieldMask {
	return FullRegisterProbeRequest_FieldMask()
}

func (o *RegisterProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegisterProbeRequest_FieldMask()
}

func (o *RegisterProbeRequest) MakeDiffFieldMask(other *RegisterProbeRequest) *RegisterProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &RegisterProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegisterProbeRequest_FieldMask()
	}

	res := &RegisterProbeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorName})
	}

	if len(o.GetValues()) == len(other.GetValues()) {
		for i, lValue := range o.GetValues() {
			rValue := other.GetValues()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorValues})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorValues})
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RegisterProbeRequest_FieldSubPath{selector: RegisterProbeRequest_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *RegisterProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RegisterProbeRequest))
}

func (o *RegisterProbeRequest) Clone() *RegisterProbeRequest {
	if o == nil {
		return nil
	}
	result := &RegisterProbeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &shared_token.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Values = map[string]string{}
	for key, sourceValue := range o.Values {
		result.Values[key] = sourceValue
	}
	result.Status = o.Status.Clone()
	return result
}

func (o *RegisterProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RegisterProbeRequest) Merge(source *RegisterProbeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &shared_token.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetValues() != nil {
		if o.Values == nil {
			o.Values = make(map[string]string, len(source.GetValues()))
		}
		for key, sourceValue := range source.GetValues() {
			o.Values[key] = sourceValue
		}
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(probe.Probe_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *RegisterProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RegisterProbeRequest))
}

func (o *RegisterProbeResponse) GotenObjectExt() {}

func (o *RegisterProbeResponse) MakeFullFieldMask() *RegisterProbeResponse_FieldMask {
	return FullRegisterProbeResponse_FieldMask()
}

func (o *RegisterProbeResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegisterProbeResponse_FieldMask()
}

func (o *RegisterProbeResponse) MakeDiffFieldMask(other *RegisterProbeResponse) *RegisterProbeResponse_FieldMask {
	if o == nil && other == nil {
		return &RegisterProbeResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegisterProbeResponse_FieldMask()
	}

	res := &RegisterProbeResponse_FieldMask{}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RegisterProbeResponse_FieldSubPath{selector: RegisterProbeResponse_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorProbe})
	}
	return res
}

func (o *RegisterProbeResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RegisterProbeResponse))
}

func (o *RegisterProbeResponse) Clone() *RegisterProbeResponse {
	if o == nil {
		return nil
	}
	result := &RegisterProbeResponse{}
	result.ServiceAccount = o.ServiceAccount.Clone()
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *RegisterProbeResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RegisterProbeResponse) Merge(source *RegisterProbeResponse) {
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(api.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
}

func (o *RegisterProbeResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RegisterProbeResponse))
}
