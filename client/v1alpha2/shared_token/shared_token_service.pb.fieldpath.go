// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token_service.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/shared_token"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &shared_token.SharedToken{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetSharedTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetSharedTokenRequest_FieldPathSelector
	Get(source *GetSharedTokenRequest) []interface{}
	GetSingle(source *GetSharedTokenRequest) (interface{}, bool)
	ClearValue(item *GetSharedTokenRequest)

	// Those methods build corresponding GetSharedTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetSharedTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetSharedTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetSharedTokenRequest_FieldPathArrayItemValue
}

type GetSharedTokenRequest_FieldPathSelector int32

const (
	GetSharedTokenRequest_FieldPathSelectorName      GetSharedTokenRequest_FieldPathSelector = 0
	GetSharedTokenRequest_FieldPathSelectorFieldMask GetSharedTokenRequest_FieldPathSelector = 1
	GetSharedTokenRequest_FieldPathSelectorView      GetSharedTokenRequest_FieldPathSelector = 2
)

func (s GetSharedTokenRequest_FieldPathSelector) String() string {
	switch s {
	case GetSharedTokenRequest_FieldPathSelectorName:
		return "name"
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetSharedTokenRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", s))
	}
}

func BuildGetSharedTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (GetSharedTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetSharedTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetSharedTokenRequest_FieldTerminalPath{selector: GetSharedTokenRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetSharedTokenRequest", fp)
}

func ParseGetSharedTokenRequest_FieldPath(rawField string) (GetSharedTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetSharedTokenRequest_FieldPath(fp)
}

func MustParseGetSharedTokenRequest_FieldPath(rawField string) GetSharedTokenRequest_FieldPath {
	fp, err := ParseGetSharedTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetSharedTokenRequest_FieldTerminalPath struct {
	selector GetSharedTokenRequest_FieldPathSelector
}

var _ GetSharedTokenRequest_FieldPath = (*GetSharedTokenRequest_FieldTerminalPath)(nil)

func (fp *GetSharedTokenRequest_FieldTerminalPath) Selector() GetSharedTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetSharedTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetSharedTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetSharedTokenRequest
func (fp *GetSharedTokenRequest_FieldTerminalPath) Get(source *GetSharedTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetSharedTokenRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetSharedTokenRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetSharedTokenRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetSharedTokenRequest))
}

// GetSingle returns value pointed by specific field of from source GetSharedTokenRequest
func (fp *GetSharedTokenRequest_FieldTerminalPath) GetSingle(source *GetSharedTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetSharedTokenRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetSharedTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		return (*shared_token.Reference)(nil)
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case GetSharedTokenRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) ClearValue(item *GetSharedTokenRequest) {
	if item != nil {
		switch fp.selector {
		case GetSharedTokenRequest_FieldPathSelectorName:
			item.Name = nil
		case GetSharedTokenRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetSharedTokenRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetSharedTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetSharedTokenRequest_FieldPathSelectorName ||
		fp.selector == GetSharedTokenRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetSharedTokenRequest_FieldPathSelectorView
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithIValue(value interface{}) GetSharedTokenRequest_FieldPathValue {
	switch fp.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		return &GetSharedTokenRequest_FieldTerminalPathValue{GetSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		return &GetSharedTokenRequest_FieldTerminalPathValue{GetSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case GetSharedTokenRequest_FieldPathSelectorView:
		return &GetSharedTokenRequest_FieldTerminalPathValue{GetSharedTokenRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetSharedTokenRequest_FieldPathArrayOfValues {
	fpaov := &GetSharedTokenRequest_FieldTerminalPathArrayOfValues{GetSharedTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		return &GetSharedTokenRequest_FieldTerminalPathArrayOfValues{GetSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Reference)}
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		return &GetSharedTokenRequest_FieldTerminalPathArrayOfValues{GetSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case GetSharedTokenRequest_FieldPathSelectorView:
		return &GetSharedTokenRequest_FieldTerminalPathArrayOfValues{GetSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetSharedTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *GetSharedTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetSharedTokenRequest_FieldPathValue allows storing values for GetSharedTokenRequest fields according to their type
type GetSharedTokenRequest_FieldPathValue interface {
	GetSharedTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetSharedTokenRequest)
	CompareWith(*GetSharedTokenRequest) (cmp int, comparable bool)
}

func ParseGetSharedTokenRequest_FieldPathValue(pathStr, valueStr string) (GetSharedTokenRequest_FieldPathValue, error) {
	fp, err := ParseGetSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSharedTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetSharedTokenRequest_FieldPathValue), nil
}

func MustParseGetSharedTokenRequest_FieldPathValue(pathStr, valueStr string) GetSharedTokenRequest_FieldPathValue {
	fpv, err := ParseGetSharedTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetSharedTokenRequest_FieldTerminalPathValue struct {
	GetSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ GetSharedTokenRequest_FieldPathValue = (*GetSharedTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetSharedTokenRequest' as interface{}
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) AsNameValue() (*shared_token.Reference, bool) {
	res, ok := fpv.value.(*shared_token.Reference)
	return res, ok
}
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetSharedTokenRequest
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) SetTo(target **GetSharedTokenRequest) {
	if *target == nil {
		*target = new(GetSharedTokenRequest)
	}
	switch fpv.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*shared_token.Reference)
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case GetSharedTokenRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetSharedTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetSharedTokenRequest_FieldTerminalPathValue' with the value under path in 'GetSharedTokenRequest'.
func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) CompareWith(source *GetSharedTokenRequest) (int, bool) {
	switch fpv.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*shared_token.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetSharedTokenRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *GetSharedTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetSharedTokenRequest))
}

// GetSharedTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetSharedTokenRequest according to their type
// Present only for array (repeated) types.
type GetSharedTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetSharedTokenRequest_FieldPath
	ContainsValue(*GetSharedTokenRequest) bool
}

// ParseGetSharedTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetSharedTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSharedTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetSharedTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseGetSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetSharedTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetSharedTokenRequest_FieldTerminalPathArrayItemValue struct {
	GetSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ GetSharedTokenRequest_FieldPathArrayItemValue = (*GetSharedTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetSharedTokenRequest as interface{}
func (fpaiv *GetSharedTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetSharedTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetSharedTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetSharedTokenRequest'
func (fpaiv *GetSharedTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetSharedTokenRequest) bool {
	slice := fpaiv.GetSharedTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetSharedTokenRequest_FieldPathArrayOfValues allows storing slice of values for GetSharedTokenRequest fields according to their type
type GetSharedTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetSharedTokenRequest_FieldPath
}

func ParseGetSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetSharedTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetSharedTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetSharedTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseGetSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetSharedTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetSharedTokenRequest_FieldTerminalPathArrayOfValues struct {
	GetSharedTokenRequest_FieldTerminalPath
	values interface{}
}

var _ GetSharedTokenRequest_FieldPathArrayOfValues = (*GetSharedTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetSharedTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetSharedTokenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*shared_token.Reference) {
			values = append(values, v)
		}
	case GetSharedTokenRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case GetSharedTokenRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetSharedTokenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([]*shared_token.Reference)
	return res, ok
}
func (fpaov *GetSharedTokenRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *GetSharedTokenRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetSharedTokensRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetSharedTokensRequest_FieldPathSelector
	Get(source *BatchGetSharedTokensRequest) []interface{}
	GetSingle(source *BatchGetSharedTokensRequest) (interface{}, bool)
	ClearValue(item *BatchGetSharedTokensRequest)

	// Those methods build corresponding BatchGetSharedTokensRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetSharedTokensRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetSharedTokensRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetSharedTokensRequest_FieldPathArrayItemValue
}

type BatchGetSharedTokensRequest_FieldPathSelector int32

const (
	BatchGetSharedTokensRequest_FieldPathSelectorParent    BatchGetSharedTokensRequest_FieldPathSelector = 0
	BatchGetSharedTokensRequest_FieldPathSelectorNames     BatchGetSharedTokensRequest_FieldPathSelector = 1
	BatchGetSharedTokensRequest_FieldPathSelectorFieldMask BatchGetSharedTokensRequest_FieldPathSelector = 2
	BatchGetSharedTokensRequest_FieldPathSelectorView      BatchGetSharedTokensRequest_FieldPathSelector = 3
)

func (s BatchGetSharedTokensRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", s))
	}
}

func BuildBatchGetSharedTokensRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetSharedTokensRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetSharedTokensRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetSharedTokensRequest_FieldTerminalPath{selector: BatchGetSharedTokensRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetSharedTokensRequest", fp)
}

func ParseBatchGetSharedTokensRequest_FieldPath(rawField string) (BatchGetSharedTokensRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetSharedTokensRequest_FieldPath(fp)
}

func MustParseBatchGetSharedTokensRequest_FieldPath(rawField string) BatchGetSharedTokensRequest_FieldPath {
	fp, err := ParseBatchGetSharedTokensRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetSharedTokensRequest_FieldTerminalPath struct {
	selector BatchGetSharedTokensRequest_FieldPathSelector
}

var _ BatchGetSharedTokensRequest_FieldPath = (*BatchGetSharedTokensRequest_FieldTerminalPath)(nil)

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) Selector() BatchGetSharedTokensRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetSharedTokensRequest
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) Get(source *BatchGetSharedTokensRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetSharedTokensRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetSharedTokensRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetSharedTokensRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetSharedTokensRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetSharedTokensRequest
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) GetSingle(source *BatchGetSharedTokensRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetSharedTokensRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		return (*shared_token.Reference)(nil)
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return ([]*shared_token.Reference)(nil)
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) ClearValue(item *BatchGetSharedTokensRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetSharedTokensRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetSharedTokensRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetSharedTokensRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetSharedTokensRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetSharedTokensRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetSharedTokensRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetSharedTokensRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetSharedTokensRequest_FieldPathSelectorView
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetSharedTokensRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		return &BatchGetSharedTokensRequest_FieldTerminalPathValue{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return &BatchGetSharedTokensRequest_FieldTerminalPathValue{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, value: value.([]*shared_token.Reference)}
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		return &BatchGetSharedTokensRequest_FieldTerminalPathValue{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		return &BatchGetSharedTokensRequest_FieldTerminalPathValue{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetSharedTokensRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues{BatchGetSharedTokensRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		return &BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Reference)}
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return &BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, values: values.([][]*shared_token.Reference)}
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		return &BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		return &BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetSharedTokensRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return &BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue{BatchGetSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetSharedTokensRequest_FieldPathValue allows storing values for BatchGetSharedTokensRequest fields according to their type
type BatchGetSharedTokensRequest_FieldPathValue interface {
	BatchGetSharedTokensRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetSharedTokensRequest)
	CompareWith(*BatchGetSharedTokensRequest) (cmp int, comparable bool)
}

func ParseBatchGetSharedTokensRequest_FieldPathValue(pathStr, valueStr string) (BatchGetSharedTokensRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetSharedTokensRequest_FieldPathValue), nil
}

func MustParseBatchGetSharedTokensRequest_FieldPathValue(pathStr, valueStr string) BatchGetSharedTokensRequest_FieldPathValue {
	fpv, err := ParseBatchGetSharedTokensRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetSharedTokensRequest_FieldTerminalPathValue struct {
	BatchGetSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetSharedTokensRequest_FieldPathValue = (*BatchGetSharedTokensRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetSharedTokensRequest' as interface{}
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) AsParentValue() (*shared_token.Reference, bool) {
	res, ok := fpv.value.(*shared_token.Reference)
	return res, ok
}
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) AsNamesValue() ([]*shared_token.Reference, bool) {
	res, ok := fpv.value.([]*shared_token.Reference)
	return res, ok
}
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetSharedTokensRequest
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) SetTo(target **BatchGetSharedTokensRequest) {
	if *target == nil {
		*target = new(BatchGetSharedTokensRequest)
	}
	switch fpv.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*shared_token.Reference)
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*shared_token.Reference)
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSharedTokensRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetSharedTokensRequest_FieldTerminalPathValue' with the value under path in 'BatchGetSharedTokensRequest'.
func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) CompareWith(source *BatchGetSharedTokensRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*shared_token.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetSharedTokensRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetSharedTokensRequest))
}

// BatchGetSharedTokensRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetSharedTokensRequest according to their type
// Present only for array (repeated) types.
type BatchGetSharedTokensRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetSharedTokensRequest_FieldPath
	ContainsValue(*BatchGetSharedTokensRequest) bool
}

// ParseBatchGetSharedTokensRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetSharedTokensRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetSharedTokensRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetSharedTokensRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetSharedTokensRequest_FieldPathArrayItemValue = (*BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetSharedTokensRequest as interface{}
func (fpaiv *BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*shared_token.Reference, bool) {
	res, ok := fpaiv.value.(*shared_token.Reference)
	return res, ok
}

func (fpaiv *BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetSharedTokensRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetSharedTokensRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSharedTokensRequest'
func (fpaiv *BatchGetSharedTokensRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetSharedTokensRequest) bool {
	slice := fpaiv.BatchGetSharedTokensRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetSharedTokensRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetSharedTokensRequest fields according to their type
type BatchGetSharedTokensRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetSharedTokensRequest_FieldPath
}

func ParseBatchGetSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetSharedTokensRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetSharedTokensRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetSharedTokensRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetSharedTokensRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetSharedTokensRequest_FieldPathArrayOfValues = (*BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetSharedTokensRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*shared_token.Reference) {
			values = append(values, v)
		}
	case BatchGetSharedTokensRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*shared_token.Reference) {
			values = append(values, v)
		}
	case BatchGetSharedTokensRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case BatchGetSharedTokensRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([]*shared_token.Reference)
	return res, ok
}
func (fpaov *BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([][]*shared_token.Reference)
	return res, ok
}
func (fpaov *BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *BatchGetSharedTokensRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetSharedTokensResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetSharedTokensResponse_FieldPathSelector
	Get(source *BatchGetSharedTokensResponse) []interface{}
	GetSingle(source *BatchGetSharedTokensResponse) (interface{}, bool)
	ClearValue(item *BatchGetSharedTokensResponse)

	// Those methods build corresponding BatchGetSharedTokensResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetSharedTokensResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetSharedTokensResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetSharedTokensResponse_FieldPathArrayItemValue
}

type BatchGetSharedTokensResponse_FieldPathSelector int32

const (
	BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens BatchGetSharedTokensResponse_FieldPathSelector = 0
	BatchGetSharedTokensResponse_FieldPathSelectorMissing      BatchGetSharedTokensResponse_FieldPathSelector = 1
)

func (s BatchGetSharedTokensResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return "shared_tokens"
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", s))
	}
}

func BuildBatchGetSharedTokensResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetSharedTokensResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetSharedTokensResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "shared_tokens", "sharedTokens", "shared-tokens":
			return &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens}, nil
		case "missing":
			return &BatchGetSharedTokensResponse_FieldTerminalPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "shared_tokens", "sharedTokens", "shared-tokens":
			if subpath, err := shared_token.BuildSharedToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetSharedTokensResponse_FieldSubPath{selector: BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetSharedTokensResponse", fp)
}

func ParseBatchGetSharedTokensResponse_FieldPath(rawField string) (BatchGetSharedTokensResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetSharedTokensResponse_FieldPath(fp)
}

func MustParseBatchGetSharedTokensResponse_FieldPath(rawField string) BatchGetSharedTokensResponse_FieldPath {
	fp, err := ParseBatchGetSharedTokensResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetSharedTokensResponse_FieldTerminalPath struct {
	selector BatchGetSharedTokensResponse_FieldPathSelector
}

var _ BatchGetSharedTokensResponse_FieldPath = (*BatchGetSharedTokensResponse_FieldTerminalPath)(nil)

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) Selector() BatchGetSharedTokensResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetSharedTokensResponse
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) Get(source *BatchGetSharedTokensResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
			for _, value := range source.GetSharedTokens() {
				values = append(values, value)
			}
		case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetSharedTokensResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetSharedTokensResponse
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) GetSingle(source *BatchGetSharedTokensResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		res := source.GetSharedTokens()
		return res, res != nil
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return ([]*shared_token.SharedToken)(nil)
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return ([]*shared_token.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) ClearValue(item *BatchGetSharedTokensResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
			item.SharedTokens = nil
		case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetSharedTokensResponse_FieldPathSelectorMissing
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetSharedTokensResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &BatchGetSharedTokensResponse_FieldTerminalPathValue{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, value: value.([]*shared_token.SharedToken)}
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return &BatchGetSharedTokensResponse_FieldTerminalPathValue{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, value: value.([]*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetSharedTokensResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues{BatchGetSharedTokensResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, values: values.([][]*shared_token.SharedToken)}
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return &BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, values: values.([][]*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetSharedTokensResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken)}
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return &BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue{BatchGetSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *BatchGetSharedTokensResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetSharedTokensResponse_FieldSubPath struct {
	selector BatchGetSharedTokensResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetSharedTokensResponse_FieldPath = (*BatchGetSharedTokensResponse_FieldSubPath)(nil)

func (fps *BatchGetSharedTokensResponse_FieldSubPath) Selector() BatchGetSharedTokensResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetSharedTokensResponse_FieldSubPath) AsSharedTokensSubPath() (shared_token.SharedToken_FieldPath, bool) {
	res, ok := fps.subPath.(shared_token.SharedToken_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetSharedTokensResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetSharedTokensResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetSharedTokensResponse
func (fps *BatchGetSharedTokensResponse_FieldSubPath) Get(source *BatchGetSharedTokensResponse) (values []interface{}) {
	if asSharedTokenFieldPath, ok := fps.AsSharedTokensSubPath(); ok {
		for _, item := range source.GetSharedTokens() {
			values = append(values, asSharedTokenFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetSharedTokensResponse))
}

// GetSingle returns value of selected field from source BatchGetSharedTokensResponse
func (fps *BatchGetSharedTokensResponse_FieldSubPath) GetSingle(source *BatchGetSharedTokensResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		if len(source.GetSharedTokens()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSharedTokens()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fps.selector))
	}
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetSharedTokensResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) ClearValue(item *BatchGetSharedTokensResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
			for _, subItem := range item.SharedTokens {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetSharedTokensResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithIValue(value interface{}) BatchGetSharedTokensResponse_FieldPathValue {
	return &BatchGetSharedTokensResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetSharedTokensResponse_FieldPathArrayOfValues {
	return &BatchGetSharedTokensResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetSharedTokensResponse_FieldPathArrayItemValue {
	return &BatchGetSharedTokensResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetSharedTokensResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetSharedTokensResponse_FieldPathValue allows storing values for BatchGetSharedTokensResponse fields according to their type
type BatchGetSharedTokensResponse_FieldPathValue interface {
	BatchGetSharedTokensResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetSharedTokensResponse)
	CompareWith(*BatchGetSharedTokensResponse) (cmp int, comparable bool)
}

func ParseBatchGetSharedTokensResponse_FieldPathValue(pathStr, valueStr string) (BatchGetSharedTokensResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetSharedTokensResponse_FieldPathValue), nil
}

func MustParseBatchGetSharedTokensResponse_FieldPathValue(pathStr, valueStr string) BatchGetSharedTokensResponse_FieldPathValue {
	fpv, err := ParseBatchGetSharedTokensResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetSharedTokensResponse_FieldTerminalPathValue struct {
	BatchGetSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetSharedTokensResponse_FieldPathValue = (*BatchGetSharedTokensResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetSharedTokensResponse' as interface{}
func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) AsSharedTokensValue() ([]*shared_token.SharedToken, bool) {
	res, ok := fpv.value.([]*shared_token.SharedToken)
	return res, ok
}
func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) AsMissingValue() ([]*shared_token.Reference, bool) {
	res, ok := fpv.value.([]*shared_token.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetSharedTokensResponse
func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) SetTo(target **BatchGetSharedTokensResponse) {
	if *target == nil {
		*target = new(BatchGetSharedTokensResponse)
	}
	switch fpv.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		(*target).SharedTokens = fpv.value.([]*shared_token.SharedToken)
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*shared_token.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSharedTokensResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetSharedTokensResponse_FieldTerminalPathValue' with the value under path in 'BatchGetSharedTokensResponse'.
func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) CompareWith(source *BatchGetSharedTokensResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return 0, false
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetSharedTokensResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetSharedTokensResponse))
}

type BatchGetSharedTokensResponse_FieldSubPathValue struct {
	BatchGetSharedTokensResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetSharedTokensResponse_FieldPathValue = (*BatchGetSharedTokensResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) AsSharedTokensPathValue() (shared_token.SharedToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) SetTo(target **BatchGetSharedTokensResponse) {
	if *target == nil {
		*target = new(BatchGetSharedTokensResponse)
	}
	switch fpvs.Selector() {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetSharedTokensResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) CompareWith(source *BatchGetSharedTokensResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetSharedTokensResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetSharedTokensResponse))
}

// BatchGetSharedTokensResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetSharedTokensResponse according to their type
// Present only for array (repeated) types.
type BatchGetSharedTokensResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetSharedTokensResponse_FieldPath
	ContainsValue(*BatchGetSharedTokensResponse) bool
}

// ParseBatchGetSharedTokensResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetSharedTokensResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetSharedTokensResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetSharedTokensResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetSharedTokensResponse_FieldPathArrayItemValue = (*BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetSharedTokensResponse as interface{}
func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) AsSharedTokensItemValue() (*shared_token.SharedToken, bool) {
	res, ok := fpaiv.value.(*shared_token.SharedToken)
	return res, ok
}
func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*shared_token.Reference, bool) {
	res, ok := fpaiv.value.(*shared_token.Reference)
	return res, ok
}

func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetSharedTokensResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetSharedTokensResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSharedTokensResponse'
func (fpaiv *BatchGetSharedTokensResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetSharedTokensResponse) bool {
	slice := fpaiv.BatchGetSharedTokensResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetSharedTokensResponse_FieldSubPathArrayItemValue struct {
	BatchGetSharedTokensResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetSharedTokensResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetSharedTokensResponse_FieldSubPathArrayItemValue) AsSharedTokensPathItemValue() (shared_token.SharedToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetSharedTokensResponse'
func (fpaivs *BatchGetSharedTokensResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetSharedTokensResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetSharedTokensResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetSharedTokensResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetSharedTokensResponse fields according to their type
type BatchGetSharedTokensResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetSharedTokensResponse_FieldPath
}

func ParseBatchGetSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetSharedTokensResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetSharedTokensResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetSharedTokensResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetSharedTokensResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetSharedTokensResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetSharedTokensResponse_FieldPathArrayOfValues = (*BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetSharedTokensResponse_FieldPathSelectorSharedTokens:
		for _, v := range fpaov.values.([][]*shared_token.SharedToken) {
			values = append(values, v)
		}
	case BatchGetSharedTokensResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*shared_token.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues) AsSharedTokensArrayOfValues() ([][]*shared_token.SharedToken, bool) {
	res, ok := fpaov.values.([][]*shared_token.SharedToken)
	return res, ok
}
func (fpaov *BatchGetSharedTokensResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([][]*shared_token.Reference)
	return res, ok
}

type BatchGetSharedTokensResponse_FieldSubPathArrayOfValues struct {
	BatchGetSharedTokensResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetSharedTokensResponse_FieldPathArrayOfValues = (*BatchGetSharedTokensResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetSharedTokensResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetSharedTokensResponse_FieldSubPathArrayOfValues) AsSharedTokensPathArrayOfValues() (shared_token.SharedToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(shared_token.SharedToken_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListSharedTokensRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListSharedTokensRequest_FieldPathSelector
	Get(source *ListSharedTokensRequest) []interface{}
	GetSingle(source *ListSharedTokensRequest) (interface{}, bool)
	ClearValue(item *ListSharedTokensRequest)

	// Those methods build corresponding ListSharedTokensRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListSharedTokensRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListSharedTokensRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListSharedTokensRequest_FieldPathArrayItemValue
}

type ListSharedTokensRequest_FieldPathSelector int32

const (
	ListSharedTokensRequest_FieldPathSelectorParent    ListSharedTokensRequest_FieldPathSelector = 0
	ListSharedTokensRequest_FieldPathSelectorPageSize  ListSharedTokensRequest_FieldPathSelector = 1
	ListSharedTokensRequest_FieldPathSelectorPageToken ListSharedTokensRequest_FieldPathSelector = 2
	ListSharedTokensRequest_FieldPathSelectorOrderBy   ListSharedTokensRequest_FieldPathSelector = 3
	ListSharedTokensRequest_FieldPathSelectorFilter    ListSharedTokensRequest_FieldPathSelector = 4
	ListSharedTokensRequest_FieldPathSelectorFieldMask ListSharedTokensRequest_FieldPathSelector = 5
	ListSharedTokensRequest_FieldPathSelectorView      ListSharedTokensRequest_FieldPathSelector = 6
)

func (s ListSharedTokensRequest_FieldPathSelector) String() string {
	switch s {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		return "parent"
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		return "filter"
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListSharedTokensRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", s))
	}
}

func BuildListSharedTokensRequest_FieldPath(fp gotenobject.RawFieldPath) (ListSharedTokensRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListSharedTokensRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListSharedTokensRequest_FieldTerminalPath{selector: ListSharedTokensRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListSharedTokensRequest", fp)
}

func ParseListSharedTokensRequest_FieldPath(rawField string) (ListSharedTokensRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListSharedTokensRequest_FieldPath(fp)
}

func MustParseListSharedTokensRequest_FieldPath(rawField string) ListSharedTokensRequest_FieldPath {
	fp, err := ParseListSharedTokensRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListSharedTokensRequest_FieldTerminalPath struct {
	selector ListSharedTokensRequest_FieldPathSelector
}

var _ ListSharedTokensRequest_FieldPath = (*ListSharedTokensRequest_FieldTerminalPath)(nil)

func (fp *ListSharedTokensRequest_FieldTerminalPath) Selector() ListSharedTokensRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListSharedTokensRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListSharedTokensRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListSharedTokensRequest
func (fp *ListSharedTokensRequest_FieldTerminalPath) Get(source *ListSharedTokensRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListSharedTokensRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListSharedTokensRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListSharedTokensRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListSharedTokensRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListSharedTokensRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListSharedTokensRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListSharedTokensRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListSharedTokensRequest))
}

// GetSingle returns value pointed by specific field of from source ListSharedTokensRequest
func (fp *ListSharedTokensRequest_FieldTerminalPath) GetSingle(source *ListSharedTokensRequest) (interface{}, bool) {
	switch fp.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListSharedTokensRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListSharedTokensRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListSharedTokensRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		return (*shared_token.ParentName)(nil)
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		return (*shared_token.PagerCursor)(nil)
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		return (*shared_token.OrderBy)(nil)
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		return (*shared_token.Filter)(nil)
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case ListSharedTokensRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) ClearValue(item *ListSharedTokensRequest) {
	if item != nil {
		switch fp.selector {
		case ListSharedTokensRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListSharedTokensRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListSharedTokensRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListSharedTokensRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListSharedTokensRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListSharedTokensRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListSharedTokensRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
		}
	}
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListSharedTokensRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListSharedTokensRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListSharedTokensRequest_FieldPathSelectorParent ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorPageSize ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorPageToken ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorFilter ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListSharedTokensRequest_FieldPathSelectorView
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithIValue(value interface{}) ListSharedTokensRequest_FieldPathValue {
	switch fp.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.ParentName)}
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.OrderBy)}
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Filter)}
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case ListSharedTokensRequest_FieldPathSelectorView:
		return &ListSharedTokensRequest_FieldTerminalPathValue{ListSharedTokensRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListSharedTokensRequest_FieldPathArrayOfValues {
	fpaov := &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.ParentName)}
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.OrderBy)}
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Filter)}
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case ListSharedTokensRequest_FieldPathSelectorView:
		return &ListSharedTokensRequest_FieldTerminalPathArrayOfValues{ListSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListSharedTokensRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *ListSharedTokensRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListSharedTokensRequest_FieldPathValue allows storing values for ListSharedTokensRequest fields according to their type
type ListSharedTokensRequest_FieldPathValue interface {
	ListSharedTokensRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListSharedTokensRequest)
	CompareWith(*ListSharedTokensRequest) (cmp int, comparable bool)
}

func ParseListSharedTokensRequest_FieldPathValue(pathStr, valueStr string) (ListSharedTokensRequest_FieldPathValue, error) {
	fp, err := ParseListSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListSharedTokensRequest_FieldPathValue), nil
}

func MustParseListSharedTokensRequest_FieldPathValue(pathStr, valueStr string) ListSharedTokensRequest_FieldPathValue {
	fpv, err := ParseListSharedTokensRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListSharedTokensRequest_FieldTerminalPathValue struct {
	ListSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ ListSharedTokensRequest_FieldPathValue = (*ListSharedTokensRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListSharedTokensRequest' as interface{}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsParentValue() (*shared_token.ParentName, bool) {
	res, ok := fpv.value.(*shared_token.ParentName)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsOrderByValue() (*shared_token.OrderBy, bool) {
	res, ok := fpv.value.(*shared_token.OrderBy)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsFilterValue() (*shared_token.Filter, bool) {
	res, ok := fpv.value.(*shared_token.Filter)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListSharedTokensRequest
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) SetTo(target **ListSharedTokensRequest) {
	if *target == nil {
		*target = new(ListSharedTokensRequest)
	}
	switch fpv.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*shared_token.ParentName)
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*shared_token.PagerCursor)
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*shared_token.OrderBy)
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*shared_token.Filter)
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case ListSharedTokensRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSharedTokensRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListSharedTokensRequest_FieldTerminalPathValue' with the value under path in 'ListSharedTokensRequest'.
func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) CompareWith(source *ListSharedTokensRequest) (int, bool) {
	switch fpv.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*shared_token.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		return 0, false
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListSharedTokensRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *ListSharedTokensRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListSharedTokensRequest))
}

// ListSharedTokensRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListSharedTokensRequest according to their type
// Present only for array (repeated) types.
type ListSharedTokensRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListSharedTokensRequest_FieldPath
	ContainsValue(*ListSharedTokensRequest) bool
}

// ParseListSharedTokensRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListSharedTokensRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListSharedTokensRequest_FieldPathArrayItemValue), nil
}

func MustParseListSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListSharedTokensRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListSharedTokensRequest_FieldTerminalPathArrayItemValue struct {
	ListSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ ListSharedTokensRequest_FieldPathArrayItemValue = (*ListSharedTokensRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListSharedTokensRequest as interface{}
func (fpaiv *ListSharedTokensRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListSharedTokensRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListSharedTokensRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSharedTokensRequest'
func (fpaiv *ListSharedTokensRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListSharedTokensRequest) bool {
	slice := fpaiv.ListSharedTokensRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListSharedTokensRequest_FieldPathArrayOfValues allows storing slice of values for ListSharedTokensRequest fields according to their type
type ListSharedTokensRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListSharedTokensRequest_FieldPath
}

func ParseListSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListSharedTokensRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListSharedTokensRequest_FieldPathArrayOfValues), nil
}

func MustParseListSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListSharedTokensRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListSharedTokensRequest_FieldTerminalPathArrayOfValues struct {
	ListSharedTokensRequest_FieldTerminalPath
	values interface{}
}

var _ ListSharedTokensRequest_FieldPathArrayOfValues = (*ListSharedTokensRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListSharedTokensRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*shared_token.ParentName) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*shared_token.OrderBy) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*shared_token.Filter) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case ListSharedTokensRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*shared_token.ParentName, bool) {
	res, ok := fpaov.values.([]*shared_token.ParentName)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*shared_token.OrderBy, bool) {
	res, ok := fpaov.values.([]*shared_token.OrderBy)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*shared_token.Filter, bool) {
	res, ok := fpaov.values.([]*shared_token.Filter)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *ListSharedTokensRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListSharedTokensResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListSharedTokensResponse_FieldPathSelector
	Get(source *ListSharedTokensResponse) []interface{}
	GetSingle(source *ListSharedTokensResponse) (interface{}, bool)
	ClearValue(item *ListSharedTokensResponse)

	// Those methods build corresponding ListSharedTokensResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListSharedTokensResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListSharedTokensResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListSharedTokensResponse_FieldPathArrayItemValue
}

type ListSharedTokensResponse_FieldPathSelector int32

const (
	ListSharedTokensResponse_FieldPathSelectorSharedTokens  ListSharedTokensResponse_FieldPathSelector = 0
	ListSharedTokensResponse_FieldPathSelectorPrevPageToken ListSharedTokensResponse_FieldPathSelector = 1
	ListSharedTokensResponse_FieldPathSelectorNextPageToken ListSharedTokensResponse_FieldPathSelector = 2
)

func (s ListSharedTokensResponse_FieldPathSelector) String() string {
	switch s {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return "shared_tokens"
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", s))
	}
}

func BuildListSharedTokensResponse_FieldPath(fp gotenobject.RawFieldPath) (ListSharedTokensResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListSharedTokensResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "shared_tokens", "sharedTokens", "shared-tokens":
			return &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListSharedTokensResponse_FieldTerminalPath{selector: ListSharedTokensResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "shared_tokens", "sharedTokens", "shared-tokens":
			if subpath, err := shared_token.BuildSharedToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListSharedTokensResponse_FieldSubPath{selector: ListSharedTokensResponse_FieldPathSelectorSharedTokens, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListSharedTokensResponse", fp)
}

func ParseListSharedTokensResponse_FieldPath(rawField string) (ListSharedTokensResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListSharedTokensResponse_FieldPath(fp)
}

func MustParseListSharedTokensResponse_FieldPath(rawField string) ListSharedTokensResponse_FieldPath {
	fp, err := ParseListSharedTokensResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListSharedTokensResponse_FieldTerminalPath struct {
	selector ListSharedTokensResponse_FieldPathSelector
}

var _ ListSharedTokensResponse_FieldPath = (*ListSharedTokensResponse_FieldTerminalPath)(nil)

func (fp *ListSharedTokensResponse_FieldTerminalPath) Selector() ListSharedTokensResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListSharedTokensResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListSharedTokensResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListSharedTokensResponse
func (fp *ListSharedTokensResponse_FieldTerminalPath) Get(source *ListSharedTokensResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
			for _, value := range source.GetSharedTokens() {
				values = append(values, value)
			}
		case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListSharedTokensResponse))
}

// GetSingle returns value pointed by specific field of from source ListSharedTokensResponse
func (fp *ListSharedTokensResponse_FieldTerminalPath) GetSingle(source *ListSharedTokensResponse) (interface{}, bool) {
	switch fp.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		res := source.GetSharedTokens()
		return res, res != nil
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListSharedTokensResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return ([]*shared_token.SharedToken)(nil)
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		return (*shared_token.PagerCursor)(nil)
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		return (*shared_token.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) ClearValue(item *ListSharedTokensResponse) {
	if item != nil {
		switch fp.selector {
		case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
			item.SharedTokens = nil
		case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
		}
	}
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListSharedTokensResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListSharedTokensResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListSharedTokensResponse_FieldPathSelectorNextPageToken
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithIValue(value interface{}) ListSharedTokensResponse_FieldPathValue {
	switch fp.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &ListSharedTokensResponse_FieldTerminalPathValue{ListSharedTokensResponse_FieldTerminalPath: *fp, value: value.([]*shared_token.SharedToken)}
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		return &ListSharedTokensResponse_FieldTerminalPathValue{ListSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		return &ListSharedTokensResponse_FieldTerminalPathValue{ListSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListSharedTokensResponse_FieldPathArrayOfValues {
	fpaov := &ListSharedTokensResponse_FieldTerminalPathArrayOfValues{ListSharedTokensResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &ListSharedTokensResponse_FieldTerminalPathArrayOfValues{ListSharedTokensResponse_FieldTerminalPath: *fp, values: values.([][]*shared_token.SharedToken)}
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		return &ListSharedTokensResponse_FieldTerminalPathArrayOfValues{ListSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		return &ListSharedTokensResponse_FieldTerminalPathArrayOfValues{ListSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListSharedTokensResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return &ListSharedTokensResponse_FieldTerminalPathArrayItemValue{ListSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *ListSharedTokensResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListSharedTokensResponse_FieldSubPath struct {
	selector ListSharedTokensResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListSharedTokensResponse_FieldPath = (*ListSharedTokensResponse_FieldSubPath)(nil)

func (fps *ListSharedTokensResponse_FieldSubPath) Selector() ListSharedTokensResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListSharedTokensResponse_FieldSubPath) AsSharedTokensSubPath() (shared_token.SharedToken_FieldPath, bool) {
	res, ok := fps.subPath.(shared_token.SharedToken_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListSharedTokensResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListSharedTokensResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListSharedTokensResponse
func (fps *ListSharedTokensResponse_FieldSubPath) Get(source *ListSharedTokensResponse) (values []interface{}) {
	if asSharedTokenFieldPath, ok := fps.AsSharedTokensSubPath(); ok {
		for _, item := range source.GetSharedTokens() {
			values = append(values, asSharedTokenFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fps.selector))
	}
	return
}

func (fps *ListSharedTokensResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListSharedTokensResponse))
}

// GetSingle returns value of selected field from source ListSharedTokensResponse
func (fps *ListSharedTokensResponse_FieldSubPath) GetSingle(source *ListSharedTokensResponse) (interface{}, bool) {
	switch fps.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		if len(source.GetSharedTokens()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSharedTokens()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fps.selector))
	}
}

func (fps *ListSharedTokensResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListSharedTokensResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListSharedTokensResponse_FieldSubPath) ClearValue(item *ListSharedTokensResponse) {
	if item != nil {
		switch fps.selector {
		case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
			for _, subItem := range item.SharedTokens {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fps.selector))
		}
	}
}

func (fps *ListSharedTokensResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListSharedTokensResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithIValue(value interface{}) ListSharedTokensResponse_FieldPathValue {
	return &ListSharedTokensResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListSharedTokensResponse_FieldPathArrayOfValues {
	return &ListSharedTokensResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListSharedTokensResponse_FieldPathArrayItemValue {
	return &ListSharedTokensResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListSharedTokensResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListSharedTokensResponse_FieldPathValue allows storing values for ListSharedTokensResponse fields according to their type
type ListSharedTokensResponse_FieldPathValue interface {
	ListSharedTokensResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListSharedTokensResponse)
	CompareWith(*ListSharedTokensResponse) (cmp int, comparable bool)
}

func ParseListSharedTokensResponse_FieldPathValue(pathStr, valueStr string) (ListSharedTokensResponse_FieldPathValue, error) {
	fp, err := ParseListSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListSharedTokensResponse_FieldPathValue), nil
}

func MustParseListSharedTokensResponse_FieldPathValue(pathStr, valueStr string) ListSharedTokensResponse_FieldPathValue {
	fpv, err := ParseListSharedTokensResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListSharedTokensResponse_FieldTerminalPathValue struct {
	ListSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ ListSharedTokensResponse_FieldPathValue = (*ListSharedTokensResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListSharedTokensResponse' as interface{}
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) AsSharedTokensValue() ([]*shared_token.SharedToken, bool) {
	res, ok := fpv.value.([]*shared_token.SharedToken)
	return res, ok
}
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListSharedTokensResponse
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) SetTo(target **ListSharedTokensResponse) {
	if *target == nil {
		*target = new(ListSharedTokensResponse)
	}
	switch fpv.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		(*target).SharedTokens = fpv.value.([]*shared_token.SharedToken)
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*shared_token.PagerCursor)
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*shared_token.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSharedTokensResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListSharedTokensResponse_FieldTerminalPathValue' with the value under path in 'ListSharedTokensResponse'.
func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) CompareWith(source *ListSharedTokensResponse) (int, bool) {
	switch fpv.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return 0, false
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *ListSharedTokensResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListSharedTokensResponse))
}

type ListSharedTokensResponse_FieldSubPathValue struct {
	ListSharedTokensResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListSharedTokensResponse_FieldPathValue = (*ListSharedTokensResponse_FieldSubPathValue)(nil)

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) AsSharedTokensPathValue() (shared_token.SharedToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue)
	return res, ok
}

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) SetTo(target **ListSharedTokensResponse) {
	if *target == nil {
		*target = new(ListSharedTokensResponse)
	}
	switch fpvs.Selector() {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListSharedTokensResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) CompareWith(source *ListSharedTokensResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListSharedTokensResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListSharedTokensResponse))
}

// ListSharedTokensResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListSharedTokensResponse according to their type
// Present only for array (repeated) types.
type ListSharedTokensResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListSharedTokensResponse_FieldPath
	ContainsValue(*ListSharedTokensResponse) bool
}

// ParseListSharedTokensResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListSharedTokensResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListSharedTokensResponse_FieldPathArrayItemValue), nil
}

func MustParseListSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListSharedTokensResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListSharedTokensResponse_FieldTerminalPathArrayItemValue struct {
	ListSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ ListSharedTokensResponse_FieldPathArrayItemValue = (*ListSharedTokensResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListSharedTokensResponse as interface{}
func (fpaiv *ListSharedTokensResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListSharedTokensResponse_FieldTerminalPathArrayItemValue) AsSharedTokensItemValue() (*shared_token.SharedToken, bool) {
	res, ok := fpaiv.value.(*shared_token.SharedToken)
	return res, ok
}

func (fpaiv *ListSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListSharedTokensResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListSharedTokensResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSharedTokensResponse'
func (fpaiv *ListSharedTokensResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListSharedTokensResponse) bool {
	slice := fpaiv.ListSharedTokensResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListSharedTokensResponse_FieldSubPathArrayItemValue struct {
	ListSharedTokensResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListSharedTokensResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListSharedTokensResponse_FieldSubPathArrayItemValue) AsSharedTokensPathItemValue() (shared_token.SharedToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListSharedTokensResponse'
func (fpaivs *ListSharedTokensResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListSharedTokensResponse) bool {
	switch fpaivs.Selector() {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListSharedTokensResponse: %d", fpaivs.Selector()))
	}
}

// ListSharedTokensResponse_FieldPathArrayOfValues allows storing slice of values for ListSharedTokensResponse fields according to their type
type ListSharedTokensResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListSharedTokensResponse_FieldPath
}

func ParseListSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListSharedTokensResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListSharedTokensResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListSharedTokensResponse_FieldPathArrayOfValues), nil
}

func MustParseListSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListSharedTokensResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListSharedTokensResponse_FieldTerminalPathArrayOfValues struct {
	ListSharedTokensResponse_FieldTerminalPath
	values interface{}
}

var _ ListSharedTokensResponse_FieldPathArrayOfValues = (*ListSharedTokensResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListSharedTokensResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListSharedTokensResponse_FieldPathSelectorSharedTokens:
		for _, v := range fpaov.values.([][]*shared_token.SharedToken) {
			values = append(values, v)
		}
	case ListSharedTokensResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	case ListSharedTokensResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListSharedTokensResponse_FieldTerminalPathArrayOfValues) AsSharedTokensArrayOfValues() ([][]*shared_token.SharedToken, bool) {
	res, ok := fpaov.values.([][]*shared_token.SharedToken)
	return res, ok
}
func (fpaov *ListSharedTokensResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}
func (fpaov *ListSharedTokensResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}

type ListSharedTokensResponse_FieldSubPathArrayOfValues struct {
	ListSharedTokensResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListSharedTokensResponse_FieldPathArrayOfValues = (*ListSharedTokensResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListSharedTokensResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListSharedTokensResponse_FieldSubPathArrayOfValues) AsSharedTokensPathArrayOfValues() (shared_token.SharedToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(shared_token.SharedToken_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSharedTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSharedTokenRequest_FieldPathSelector
	Get(source *WatchSharedTokenRequest) []interface{}
	GetSingle(source *WatchSharedTokenRequest) (interface{}, bool)
	ClearValue(item *WatchSharedTokenRequest)

	// Those methods build corresponding WatchSharedTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSharedTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSharedTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSharedTokenRequest_FieldPathArrayItemValue
}

type WatchSharedTokenRequest_FieldPathSelector int32

const (
	WatchSharedTokenRequest_FieldPathSelectorName      WatchSharedTokenRequest_FieldPathSelector = 0
	WatchSharedTokenRequest_FieldPathSelectorFieldMask WatchSharedTokenRequest_FieldPathSelector = 1
	WatchSharedTokenRequest_FieldPathSelectorView      WatchSharedTokenRequest_FieldPathSelector = 2
)

func (s WatchSharedTokenRequest_FieldPathSelector) String() string {
	switch s {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		return "name"
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchSharedTokenRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", s))
	}
}

func BuildWatchSharedTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchSharedTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSharedTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchSharedTokenRequest_FieldTerminalPath{selector: WatchSharedTokenRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSharedTokenRequest", fp)
}

func ParseWatchSharedTokenRequest_FieldPath(rawField string) (WatchSharedTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSharedTokenRequest_FieldPath(fp)
}

func MustParseWatchSharedTokenRequest_FieldPath(rawField string) WatchSharedTokenRequest_FieldPath {
	fp, err := ParseWatchSharedTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSharedTokenRequest_FieldTerminalPath struct {
	selector WatchSharedTokenRequest_FieldPathSelector
}

var _ WatchSharedTokenRequest_FieldPath = (*WatchSharedTokenRequest_FieldTerminalPath)(nil)

func (fp *WatchSharedTokenRequest_FieldTerminalPath) Selector() WatchSharedTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSharedTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSharedTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSharedTokenRequest
func (fp *WatchSharedTokenRequest_FieldTerminalPath) Get(source *WatchSharedTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSharedTokenRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchSharedTokenRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSharedTokenRequest))
}

// GetSingle returns value pointed by specific field of from source WatchSharedTokenRequest
func (fp *WatchSharedTokenRequest_FieldTerminalPath) GetSingle(source *WatchSharedTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchSharedTokenRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchSharedTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		return (*shared_token.Reference)(nil)
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case WatchSharedTokenRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) ClearValue(item *WatchSharedTokenRequest) {
	if item != nil {
		switch fp.selector {
		case WatchSharedTokenRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchSharedTokenRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSharedTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSharedTokenRequest_FieldPathSelectorName ||
		fp.selector == WatchSharedTokenRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchSharedTokenRequest_FieldPathSelectorView
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithIValue(value interface{}) WatchSharedTokenRequest_FieldPathValue {
	switch fp.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		return &WatchSharedTokenRequest_FieldTerminalPathValue{WatchSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		return &WatchSharedTokenRequest_FieldTerminalPathValue{WatchSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case WatchSharedTokenRequest_FieldPathSelectorView:
		return &WatchSharedTokenRequest_FieldTerminalPathValue{WatchSharedTokenRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSharedTokenRequest_FieldPathArrayOfValues {
	fpaov := &WatchSharedTokenRequest_FieldTerminalPathArrayOfValues{WatchSharedTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		return &WatchSharedTokenRequest_FieldTerminalPathArrayOfValues{WatchSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Reference)}
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		return &WatchSharedTokenRequest_FieldTerminalPathArrayOfValues{WatchSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case WatchSharedTokenRequest_FieldPathSelectorView:
		return &WatchSharedTokenRequest_FieldTerminalPathArrayOfValues{WatchSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSharedTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSharedTokenRequest_FieldPathValue allows storing values for WatchSharedTokenRequest fields according to their type
type WatchSharedTokenRequest_FieldPathValue interface {
	WatchSharedTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSharedTokenRequest)
	CompareWith(*WatchSharedTokenRequest) (cmp int, comparable bool)
}

func ParseWatchSharedTokenRequest_FieldPathValue(pathStr, valueStr string) (WatchSharedTokenRequest_FieldPathValue, error) {
	fp, err := ParseWatchSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSharedTokenRequest_FieldPathValue), nil
}

func MustParseWatchSharedTokenRequest_FieldPathValue(pathStr, valueStr string) WatchSharedTokenRequest_FieldPathValue {
	fpv, err := ParseWatchSharedTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSharedTokenRequest_FieldTerminalPathValue struct {
	WatchSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokenRequest_FieldPathValue = (*WatchSharedTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSharedTokenRequest' as interface{}
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) AsNameValue() (*shared_token.Reference, bool) {
	res, ok := fpv.value.(*shared_token.Reference)
	return res, ok
}
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchSharedTokenRequest
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) SetTo(target **WatchSharedTokenRequest) {
	if *target == nil {
		*target = new(WatchSharedTokenRequest)
	}
	switch fpv.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*shared_token.Reference)
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case WatchSharedTokenRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSharedTokenRequest_FieldTerminalPathValue' with the value under path in 'WatchSharedTokenRequest'.
func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) CompareWith(source *WatchSharedTokenRequest) (int, bool) {
	switch fpv.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*shared_token.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchSharedTokenRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSharedTokenRequest))
}

// WatchSharedTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSharedTokenRequest according to their type
// Present only for array (repeated) types.
type WatchSharedTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSharedTokenRequest_FieldPath
	ContainsValue(*WatchSharedTokenRequest) bool
}

// ParseWatchSharedTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSharedTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSharedTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchSharedTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSharedTokenRequest_FieldTerminalPathArrayItemValue struct {
	WatchSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokenRequest_FieldPathArrayItemValue = (*WatchSharedTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSharedTokenRequest as interface{}
func (fpaiv *WatchSharedTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSharedTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSharedTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSharedTokenRequest'
func (fpaiv *WatchSharedTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSharedTokenRequest) bool {
	slice := fpaiv.WatchSharedTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSharedTokenRequest_FieldPathArrayOfValues allows storing slice of values for WatchSharedTokenRequest fields according to their type
type WatchSharedTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSharedTokenRequest_FieldPath
}

func ParseWatchSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSharedTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSharedTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSharedTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSharedTokenRequest_FieldTerminalPathArrayOfValues struct {
	WatchSharedTokenRequest_FieldTerminalPath
	values interface{}
}

var _ WatchSharedTokenRequest_FieldPathArrayOfValues = (*WatchSharedTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSharedTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSharedTokenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*shared_token.Reference) {
			values = append(values, v)
		}
	case WatchSharedTokenRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case WatchSharedTokenRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSharedTokenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([]*shared_token.Reference)
	return res, ok
}
func (fpaov *WatchSharedTokenRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *WatchSharedTokenRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSharedTokenResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSharedTokenResponse_FieldPathSelector
	Get(source *WatchSharedTokenResponse) []interface{}
	GetSingle(source *WatchSharedTokenResponse) (interface{}, bool)
	ClearValue(item *WatchSharedTokenResponse)

	// Those methods build corresponding WatchSharedTokenResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSharedTokenResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSharedTokenResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSharedTokenResponse_FieldPathArrayItemValue
}

type WatchSharedTokenResponse_FieldPathSelector int32

const (
	WatchSharedTokenResponse_FieldPathSelectorChange WatchSharedTokenResponse_FieldPathSelector = 0
)

func (s WatchSharedTokenResponse_FieldPathSelector) String() string {
	switch s {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", s))
	}
}

func BuildWatchSharedTokenResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchSharedTokenResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSharedTokenResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchSharedTokenResponse_FieldTerminalPath{selector: WatchSharedTokenResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSharedTokenResponse", fp)
}

func ParseWatchSharedTokenResponse_FieldPath(rawField string) (WatchSharedTokenResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSharedTokenResponse_FieldPath(fp)
}

func MustParseWatchSharedTokenResponse_FieldPath(rawField string) WatchSharedTokenResponse_FieldPath {
	fp, err := ParseWatchSharedTokenResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSharedTokenResponse_FieldTerminalPath struct {
	selector WatchSharedTokenResponse_FieldPathSelector
}

var _ WatchSharedTokenResponse_FieldPath = (*WatchSharedTokenResponse_FieldTerminalPath)(nil)

func (fp *WatchSharedTokenResponse_FieldTerminalPath) Selector() WatchSharedTokenResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSharedTokenResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSharedTokenResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSharedTokenResponse
func (fp *WatchSharedTokenResponse_FieldTerminalPath) Get(source *WatchSharedTokenResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSharedTokenResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSharedTokenResponse))
}

// GetSingle returns value pointed by specific field of from source WatchSharedTokenResponse
func (fp *WatchSharedTokenResponse_FieldTerminalPath) GetSingle(source *WatchSharedTokenResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSharedTokenResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchSharedTokenResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		return (*shared_token.SharedTokenChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) ClearValue(item *WatchSharedTokenResponse) {
	if item != nil {
		switch fp.selector {
		case WatchSharedTokenResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSharedTokenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSharedTokenResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSharedTokenResponse_FieldPathSelectorChange
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithIValue(value interface{}) WatchSharedTokenResponse_FieldPathValue {
	switch fp.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		return &WatchSharedTokenResponse_FieldTerminalPathValue{WatchSharedTokenResponse_FieldTerminalPath: *fp, value: value.(*shared_token.SharedTokenChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSharedTokenResponse_FieldPathArrayOfValues {
	fpaov := &WatchSharedTokenResponse_FieldTerminalPathArrayOfValues{WatchSharedTokenResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		return &WatchSharedTokenResponse_FieldTerminalPathArrayOfValues{WatchSharedTokenResponse_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedTokenChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSharedTokenResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokenResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSharedTokenResponse_FieldPathValue allows storing values for WatchSharedTokenResponse fields according to their type
type WatchSharedTokenResponse_FieldPathValue interface {
	WatchSharedTokenResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSharedTokenResponse)
	CompareWith(*WatchSharedTokenResponse) (cmp int, comparable bool)
}

func ParseWatchSharedTokenResponse_FieldPathValue(pathStr, valueStr string) (WatchSharedTokenResponse_FieldPathValue, error) {
	fp, err := ParseWatchSharedTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSharedTokenResponse_FieldPathValue), nil
}

func MustParseWatchSharedTokenResponse_FieldPathValue(pathStr, valueStr string) WatchSharedTokenResponse_FieldPathValue {
	fpv, err := ParseWatchSharedTokenResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSharedTokenResponse_FieldTerminalPathValue struct {
	WatchSharedTokenResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokenResponse_FieldPathValue = (*WatchSharedTokenResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSharedTokenResponse' as interface{}
func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) AsChangeValue() (*shared_token.SharedTokenChange, bool) {
	res, ok := fpv.value.(*shared_token.SharedTokenChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchSharedTokenResponse
func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) SetTo(target **WatchSharedTokenResponse) {
	if *target == nil {
		*target = new(WatchSharedTokenResponse)
	}
	switch fpv.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*shared_token.SharedTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokenResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSharedTokenResponse_FieldTerminalPathValue' with the value under path in 'WatchSharedTokenResponse'.
func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) CompareWith(source *WatchSharedTokenResponse) (int, bool) {
	switch fpv.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokenResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokenResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSharedTokenResponse))
}

// WatchSharedTokenResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSharedTokenResponse according to their type
// Present only for array (repeated) types.
type WatchSharedTokenResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSharedTokenResponse_FieldPath
	ContainsValue(*WatchSharedTokenResponse) bool
}

// ParseWatchSharedTokenResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSharedTokenResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSharedTokenResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSharedTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSharedTokenResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchSharedTokenResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchSharedTokenResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSharedTokenResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSharedTokenResponse_FieldTerminalPathArrayItemValue struct {
	WatchSharedTokenResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokenResponse_FieldPathArrayItemValue = (*WatchSharedTokenResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSharedTokenResponse as interface{}
func (fpaiv *WatchSharedTokenResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSharedTokenResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSharedTokenResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSharedTokenResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSharedTokenResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSharedTokenResponse'
func (fpaiv *WatchSharedTokenResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSharedTokenResponse) bool {
	slice := fpaiv.WatchSharedTokenResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSharedTokenResponse_FieldPathArrayOfValues allows storing slice of values for WatchSharedTokenResponse fields according to their type
type WatchSharedTokenResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSharedTokenResponse_FieldPath
}

func ParseWatchSharedTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSharedTokenResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSharedTokenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokenResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSharedTokenResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchSharedTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSharedTokenResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSharedTokenResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSharedTokenResponse_FieldTerminalPathArrayOfValues struct {
	WatchSharedTokenResponse_FieldTerminalPath
	values interface{}
}

var _ WatchSharedTokenResponse_FieldPathArrayOfValues = (*WatchSharedTokenResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSharedTokenResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSharedTokenResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*shared_token.SharedTokenChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSharedTokenResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*shared_token.SharedTokenChange, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedTokenChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSharedTokensRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSharedTokensRequest_FieldPathSelector
	Get(source *WatchSharedTokensRequest) []interface{}
	GetSingle(source *WatchSharedTokensRequest) (interface{}, bool)
	ClearValue(item *WatchSharedTokensRequest)

	// Those methods build corresponding WatchSharedTokensRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSharedTokensRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSharedTokensRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSharedTokensRequest_FieldPathArrayItemValue
}

type WatchSharedTokensRequest_FieldPathSelector int32

const (
	WatchSharedTokensRequest_FieldPathSelectorType         WatchSharedTokensRequest_FieldPathSelector = 0
	WatchSharedTokensRequest_FieldPathSelectorParent       WatchSharedTokensRequest_FieldPathSelector = 1
	WatchSharedTokensRequest_FieldPathSelectorPageSize     WatchSharedTokensRequest_FieldPathSelector = 2
	WatchSharedTokensRequest_FieldPathSelectorPageToken    WatchSharedTokensRequest_FieldPathSelector = 3
	WatchSharedTokensRequest_FieldPathSelectorOrderBy      WatchSharedTokensRequest_FieldPathSelector = 4
	WatchSharedTokensRequest_FieldPathSelectorResumeToken  WatchSharedTokensRequest_FieldPathSelector = 5
	WatchSharedTokensRequest_FieldPathSelectorFilter       WatchSharedTokensRequest_FieldPathSelector = 6
	WatchSharedTokensRequest_FieldPathSelectorFieldMask    WatchSharedTokensRequest_FieldPathSelector = 7
	WatchSharedTokensRequest_FieldPathSelectorView         WatchSharedTokensRequest_FieldPathSelector = 8
	WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize WatchSharedTokensRequest_FieldPathSelector = 9
)

func (s WatchSharedTokensRequest_FieldPathSelector) String() string {
	switch s {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		return "type"
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		return "parent"
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchSharedTokensRequest_FieldPathSelectorView:
		return "view"
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", s))
	}
}

func BuildWatchSharedTokensRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchSharedTokensRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSharedTokensRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchSharedTokensRequest_FieldTerminalPath{selector: WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSharedTokensRequest", fp)
}

func ParseWatchSharedTokensRequest_FieldPath(rawField string) (WatchSharedTokensRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSharedTokensRequest_FieldPath(fp)
}

func MustParseWatchSharedTokensRequest_FieldPath(rawField string) WatchSharedTokensRequest_FieldPath {
	fp, err := ParseWatchSharedTokensRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSharedTokensRequest_FieldTerminalPath struct {
	selector WatchSharedTokensRequest_FieldPathSelector
}

var _ WatchSharedTokensRequest_FieldPath = (*WatchSharedTokensRequest_FieldTerminalPath)(nil)

func (fp *WatchSharedTokensRequest_FieldTerminalPath) Selector() WatchSharedTokensRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSharedTokensRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSharedTokensRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSharedTokensRequest
func (fp *WatchSharedTokensRequest_FieldTerminalPath) Get(source *WatchSharedTokensRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSharedTokensRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchSharedTokensRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchSharedTokensRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchSharedTokensRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchSharedTokensRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchSharedTokensRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSharedTokensRequest))
}

// GetSingle returns value pointed by specific field of from source WatchSharedTokensRequest
func (fp *WatchSharedTokensRequest_FieldTerminalPath) GetSingle(source *WatchSharedTokensRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchSharedTokensRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSharedTokensRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchSharedTokensRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		return (*shared_token.ParentReference)(nil)
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		return (*shared_token.PagerCursor)(nil)
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		return (*shared_token.OrderBy)(nil)
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		return (*shared_token.Filter)(nil)
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case WatchSharedTokensRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) ClearValue(item *WatchSharedTokensRequest) {
	if item != nil {
		switch fp.selector {
		case WatchSharedTokensRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchSharedTokensRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchSharedTokensRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchSharedTokensRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchSharedTokensRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchSharedTokensRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSharedTokensRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSharedTokensRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSharedTokensRequest_FieldPathSelectorType ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorParent ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorFilter ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorView ||
		fp.selector == WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithIValue(value interface{}) WatchSharedTokensRequest_FieldPathValue {
	switch fp.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.ParentReference)}
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.OrderBy)}
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Filter)}
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case WatchSharedTokensRequest_FieldPathSelectorView:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		return &WatchSharedTokensRequest_FieldTerminalPathValue{WatchSharedTokensRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSharedTokensRequest_FieldPathArrayOfValues {
	fpaov := &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.ParentReference)}
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.OrderBy)}
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Filter)}
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case WatchSharedTokensRequest_FieldPathSelectorView:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		return &WatchSharedTokensRequest_FieldTerminalPathArrayOfValues{WatchSharedTokensRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSharedTokensRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSharedTokensRequest_FieldPathValue allows storing values for WatchSharedTokensRequest fields according to their type
type WatchSharedTokensRequest_FieldPathValue interface {
	WatchSharedTokensRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSharedTokensRequest)
	CompareWith(*WatchSharedTokensRequest) (cmp int, comparable bool)
}

func ParseWatchSharedTokensRequest_FieldPathValue(pathStr, valueStr string) (WatchSharedTokensRequest_FieldPathValue, error) {
	fp, err := ParseWatchSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSharedTokensRequest_FieldPathValue), nil
}

func MustParseWatchSharedTokensRequest_FieldPathValue(pathStr, valueStr string) WatchSharedTokensRequest_FieldPathValue {
	fpv, err := ParseWatchSharedTokensRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSharedTokensRequest_FieldTerminalPathValue struct {
	WatchSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensRequest_FieldPathValue = (*WatchSharedTokensRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSharedTokensRequest' as interface{}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsParentValue() (*shared_token.ParentReference, bool) {
	res, ok := fpv.value.(*shared_token.ParentReference)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsOrderByValue() (*shared_token.OrderBy, bool) {
	res, ok := fpv.value.(*shared_token.OrderBy)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsFilterValue() (*shared_token.Filter, bool) {
	res, ok := fpv.value.(*shared_token.Filter)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchSharedTokensRequest
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) SetTo(target **WatchSharedTokensRequest) {
	if *target == nil {
		*target = new(WatchSharedTokensRequest)
	}
	switch fpv.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*shared_token.ParentReference)
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*shared_token.PagerCursor)
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*shared_token.OrderBy)
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*shared_token.Filter)
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case WatchSharedTokensRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokensRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSharedTokensRequest_FieldTerminalPathValue' with the value under path in 'WatchSharedTokensRequest'.
func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) CompareWith(source *WatchSharedTokensRequest) (int, bool) {
	switch fpv.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*shared_token.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchSharedTokensRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensRequest: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSharedTokensRequest))
}

// WatchSharedTokensRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSharedTokensRequest according to their type
// Present only for array (repeated) types.
type WatchSharedTokensRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSharedTokensRequest_FieldPath
	ContainsValue(*WatchSharedTokensRequest) bool
}

// ParseWatchSharedTokensRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSharedTokensRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSharedTokensRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchSharedTokensRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSharedTokensRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSharedTokensRequest_FieldTerminalPathArrayItemValue struct {
	WatchSharedTokensRequest_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensRequest_FieldPathArrayItemValue = (*WatchSharedTokensRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSharedTokensRequest as interface{}
func (fpaiv *WatchSharedTokensRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSharedTokensRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSharedTokensRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSharedTokensRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSharedTokensRequest'
func (fpaiv *WatchSharedTokensRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSharedTokensRequest) bool {
	slice := fpaiv.WatchSharedTokensRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSharedTokensRequest_FieldPathArrayOfValues allows storing slice of values for WatchSharedTokensRequest fields according to their type
type WatchSharedTokensRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSharedTokensRequest_FieldPath
}

func ParseWatchSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSharedTokensRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSharedTokensRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSharedTokensRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSharedTokensRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSharedTokensRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSharedTokensRequest_FieldTerminalPathArrayOfValues struct {
	WatchSharedTokensRequest_FieldTerminalPath
	values interface{}
}

var _ WatchSharedTokensRequest_FieldPathArrayOfValues = (*WatchSharedTokensRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSharedTokensRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*shared_token.ParentReference) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*shared_token.OrderBy) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*shared_token.Filter) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchSharedTokensRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*shared_token.ParentReference, bool) {
	res, ok := fpaov.values.([]*shared_token.ParentReference)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*shared_token.OrderBy, bool) {
	res, ok := fpaov.values.([]*shared_token.OrderBy)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*shared_token.Filter, bool) {
	res, ok := fpaov.values.([]*shared_token.Filter)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchSharedTokensRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSharedTokensResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSharedTokensResponse_FieldPathSelector
	Get(source *WatchSharedTokensResponse) []interface{}
	GetSingle(source *WatchSharedTokensResponse) (interface{}, bool)
	ClearValue(item *WatchSharedTokensResponse)

	// Those methods build corresponding WatchSharedTokensResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSharedTokensResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSharedTokensResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSharedTokensResponse_FieldPathArrayItemValue
}

type WatchSharedTokensResponse_FieldPathSelector int32

const (
	WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges WatchSharedTokensResponse_FieldPathSelector = 0
	WatchSharedTokensResponse_FieldPathSelectorIsCurrent          WatchSharedTokensResponse_FieldPathSelector = 1
	WatchSharedTokensResponse_FieldPathSelectorPageTokenChange    WatchSharedTokensResponse_FieldPathSelector = 2
	WatchSharedTokensResponse_FieldPathSelectorResumeToken        WatchSharedTokensResponse_FieldPathSelector = 3
	WatchSharedTokensResponse_FieldPathSelectorSnapshotSize       WatchSharedTokensResponse_FieldPathSelector = 4
	WatchSharedTokensResponse_FieldPathSelectorIsSoftReset        WatchSharedTokensResponse_FieldPathSelector = 5
	WatchSharedTokensResponse_FieldPathSelectorIsHardReset        WatchSharedTokensResponse_FieldPathSelector = 6
)

func (s WatchSharedTokensResponse_FieldPathSelector) String() string {
	switch s {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return "shared_token_changes"
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", s))
	}
}

func BuildWatchSharedTokensResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchSharedTokensResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSharedTokensResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "shared_token_changes", "sharedTokenChanges", "shared-token-changes":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchSharedTokensResponse_FieldTerminalPath{selector: WatchSharedTokensResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchSharedTokensResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchSharedTokensResponse_FieldSubPath{selector: WatchSharedTokensResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSharedTokensResponse", fp)
}

func ParseWatchSharedTokensResponse_FieldPath(rawField string) (WatchSharedTokensResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSharedTokensResponse_FieldPath(fp)
}

func MustParseWatchSharedTokensResponse_FieldPath(rawField string) WatchSharedTokensResponse_FieldPath {
	fp, err := ParseWatchSharedTokensResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSharedTokensResponse_FieldTerminalPath struct {
	selector WatchSharedTokensResponse_FieldPathSelector
}

var _ WatchSharedTokensResponse_FieldPath = (*WatchSharedTokensResponse_FieldTerminalPath)(nil)

func (fp *WatchSharedTokensResponse_FieldTerminalPath) Selector() WatchSharedTokensResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSharedTokensResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSharedTokensResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSharedTokensResponse
func (fp *WatchSharedTokensResponse_FieldTerminalPath) Get(source *WatchSharedTokensResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
			for _, value := range source.GetSharedTokenChanges() {
				values = append(values, value)
			}
		case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSharedTokensResponse))
}

// GetSingle returns value pointed by specific field of from source WatchSharedTokensResponse
func (fp *WatchSharedTokensResponse_FieldTerminalPath) GetSingle(source *WatchSharedTokensResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		res := source.GetSharedTokenChanges()
		return res, res != nil
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchSharedTokensResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return ([]*shared_token.SharedTokenChange)(nil)
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return (*WatchSharedTokensResponse_PageTokenChange)(nil)
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) ClearValue(item *WatchSharedTokensResponse) {
	if item != nil {
		switch fp.selector {
		case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
			item.SharedTokenChanges = nil
		case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSharedTokensResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges ||
		fp.selector == WatchSharedTokensResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchSharedTokensResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchSharedTokensResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchSharedTokensResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchSharedTokensResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithIValue(value interface{}) WatchSharedTokensResponse_FieldPathValue {
	switch fp.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.([]*shared_token.SharedTokenChange)}
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*WatchSharedTokensResponse_PageTokenChange)}
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		return &WatchSharedTokensResponse_FieldTerminalPathValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSharedTokensResponse_FieldPathArrayOfValues {
	fpaov := &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([][]*shared_token.SharedTokenChange)}
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]*WatchSharedTokensResponse_PageTokenChange)}
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayOfValues{WatchSharedTokensResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSharedTokensResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return &WatchSharedTokensResponse_FieldTerminalPathArrayItemValue{WatchSharedTokensResponse_FieldTerminalPath: *fp, value: value.(*shared_token.SharedTokenChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchSharedTokensResponse_FieldSubPath struct {
	selector WatchSharedTokensResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchSharedTokensResponse_FieldPath = (*WatchSharedTokensResponse_FieldSubPath)(nil)

func (fps *WatchSharedTokensResponse_FieldSubPath) Selector() WatchSharedTokensResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchSharedTokensResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchSharedTokensResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchSharedTokensResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchSharedTokensResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchSharedTokensResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchSharedTokensResponse
func (fps *WatchSharedTokensResponse_FieldSubPath) Get(source *WatchSharedTokensResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchSharedTokensResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchSharedTokensResponse))
}

// GetSingle returns value of selected field from source WatchSharedTokensResponse
func (fps *WatchSharedTokensResponse_FieldSubPath) GetSingle(source *WatchSharedTokensResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fps.selector))
	}
}

func (fps *WatchSharedTokensResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchSharedTokensResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchSharedTokensResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchSharedTokensResponse_FieldSubPath) ClearValue(item *WatchSharedTokensResponse) {
	if item != nil {
		switch fps.selector {
		case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchSharedTokensResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchSharedTokensResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchSharedTokensResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithIValue(value interface{}) WatchSharedTokensResponse_FieldPathValue {
	return &WatchSharedTokensResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchSharedTokensResponse_FieldPathArrayOfValues {
	return &WatchSharedTokensResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchSharedTokensResponse_FieldPathArrayItemValue {
	return &WatchSharedTokensResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchSharedTokensResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchSharedTokensResponse_FieldPathValue allows storing values for WatchSharedTokensResponse fields according to their type
type WatchSharedTokensResponse_FieldPathValue interface {
	WatchSharedTokensResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSharedTokensResponse)
	CompareWith(*WatchSharedTokensResponse) (cmp int, comparable bool)
}

func ParseWatchSharedTokensResponse_FieldPathValue(pathStr, valueStr string) (WatchSharedTokensResponse_FieldPathValue, error) {
	fp, err := ParseWatchSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSharedTokensResponse_FieldPathValue), nil
}

func MustParseWatchSharedTokensResponse_FieldPathValue(pathStr, valueStr string) WatchSharedTokensResponse_FieldPathValue {
	fpv, err := ParseWatchSharedTokensResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSharedTokensResponse_FieldTerminalPathValue struct {
	WatchSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensResponse_FieldPathValue = (*WatchSharedTokensResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchSharedTokensResponse' as interface{}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsSharedTokenChangesValue() ([]*shared_token.SharedTokenChange, bool) {
	res, ok := fpv.value.([]*shared_token.SharedTokenChange)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchSharedTokensResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchSharedTokensResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchSharedTokensResponse
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) SetTo(target **WatchSharedTokensResponse) {
	if *target == nil {
		*target = new(WatchSharedTokensResponse)
	}
	switch fpv.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		(*target).SharedTokenChanges = fpv.value.([]*shared_token.SharedTokenChange)
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchSharedTokensResponse_PageTokenChange)
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokensResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSharedTokensResponse_FieldTerminalPathValue' with the value under path in 'WatchSharedTokensResponse'.
func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) CompareWith(source *WatchSharedTokensResponse) (int, bool) {
	switch fpv.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		return 0, false
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSharedTokensResponse))
}

type WatchSharedTokensResponse_FieldSubPathValue struct {
	WatchSharedTokensResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchSharedTokensResponse_FieldPathValue = (*WatchSharedTokensResponse_FieldSubPathValue)(nil)

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchSharedTokensResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchSharedTokensResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) SetTo(target **WatchSharedTokensResponse) {
	if *target == nil {
		*target = new(WatchSharedTokensResponse)
	}
	switch fpvs.Selector() {
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchSharedTokensResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokensResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) CompareWith(source *WatchSharedTokensResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchSharedTokensResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchSharedTokensResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchSharedTokensResponse))
}

// WatchSharedTokensResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchSharedTokensResponse according to their type
// Present only for array (repeated) types.
type WatchSharedTokensResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSharedTokensResponse_FieldPath
	ContainsValue(*WatchSharedTokensResponse) bool
}

// ParseWatchSharedTokensResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSharedTokensResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSharedTokensResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchSharedTokensResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSharedTokensResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSharedTokensResponse_FieldTerminalPathArrayItemValue struct {
	WatchSharedTokensResponse_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensResponse_FieldPathArrayItemValue = (*WatchSharedTokensResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSharedTokensResponse as interface{}
func (fpaiv *WatchSharedTokensResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchSharedTokensResponse_FieldTerminalPathArrayItemValue) AsSharedTokenChangesItemValue() (*shared_token.SharedTokenChange, bool) {
	res, ok := fpaiv.value.(*shared_token.SharedTokenChange)
	return res, ok
}

func (fpaiv *WatchSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSharedTokensResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSharedTokensResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSharedTokensResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSharedTokensResponse'
func (fpaiv *WatchSharedTokensResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSharedTokensResponse) bool {
	slice := fpaiv.WatchSharedTokensResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchSharedTokensResponse_FieldSubPathArrayItemValue struct {
	WatchSharedTokensResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchSharedTokensResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchSharedTokensResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchSharedTokensResponse'
func (fpaivs *WatchSharedTokensResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchSharedTokensResponse) bool {
	switch fpaivs.Selector() {
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse: %d", fpaivs.Selector()))
	}
}

// WatchSharedTokensResponse_FieldPathArrayOfValues allows storing slice of values for WatchSharedTokensResponse fields according to their type
type WatchSharedTokensResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSharedTokensResponse_FieldPath
}

func ParseWatchSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSharedTokensResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSharedTokensResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchSharedTokensResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSharedTokensResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSharedTokensResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSharedTokensResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSharedTokensResponse_FieldTerminalPathArrayOfValues struct {
	WatchSharedTokensResponse_FieldTerminalPath
	values interface{}
}

var _ WatchSharedTokensResponse_FieldPathArrayOfValues = (*WatchSharedTokensResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSharedTokensResponse_FieldPathSelectorSharedTokenChanges:
		for _, v := range fpaov.values.([][]*shared_token.SharedTokenChange) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchSharedTokensResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchSharedTokensResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsSharedTokenChangesArrayOfValues() ([][]*shared_token.SharedTokenChange, bool) {
	res, ok := fpaov.values.([][]*shared_token.SharedTokenChange)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchSharedTokensResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchSharedTokensResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchSharedTokensResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchSharedTokensResponse_FieldSubPathArrayOfValues struct {
	WatchSharedTokensResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchSharedTokensResponse_FieldPathArrayOfValues = (*WatchSharedTokensResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchSharedTokensResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchSharedTokensResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchSharedTokensResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchSharedTokensResponsePageTokenChange_FieldPathSelector
	Get(source *WatchSharedTokensResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchSharedTokensResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchSharedTokensResponse_PageTokenChange)

	// Those methods build corresponding WatchSharedTokensResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchSharedTokensResponsePageTokenChange_FieldPathSelector int32

const (
	WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchSharedTokensResponsePageTokenChange_FieldPathSelector = 0
	WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken WatchSharedTokensResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchSharedTokensResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchSharedTokensResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchSharedTokensResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchSharedTokensResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPath{selector: WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchSharedTokensResponse_PageTokenChange", fp)
}

func ParseWatchSharedTokensResponsePageTokenChange_FieldPath(rawField string) (WatchSharedTokensResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchSharedTokensResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchSharedTokensResponsePageTokenChange_FieldPath(rawField string) WatchSharedTokensResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchSharedTokensResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchSharedTokensResponsePageTokenChange_FieldPathSelector
}

var _ WatchSharedTokensResponsePageTokenChange_FieldPath = (*WatchSharedTokensResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) Selector() WatchSharedTokensResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchSharedTokensResponse_PageTokenChange
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) Get(source *WatchSharedTokensResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchSharedTokensResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchSharedTokensResponse_PageTokenChange
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchSharedTokensResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchSharedTokensResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*shared_token.PagerCursor)(nil)
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*shared_token.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchSharedTokensResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchSharedTokensResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue{WatchSharedTokensResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue{WatchSharedTokensResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*shared_token.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSharedTokensResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSharedTokensResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchSharedTokensResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*shared_token.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchSharedTokensResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchSharedTokensResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchSharedTokensResponsePageTokenChange_FieldPathValue interface {
	WatchSharedTokensResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchSharedTokensResponse_PageTokenChange)
	CompareWith(*WatchSharedTokensResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchSharedTokensResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchSharedTokensResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchSharedTokensResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchSharedTokensResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchSharedTokensResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchSharedTokensResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensResponsePageTokenChange_FieldPathValue = (*WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}
func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*shared_token.PagerCursor, bool) {
	res, ok := fpv.value.(*shared_token.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchSharedTokensResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchSharedTokensResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*shared_token.PagerCursor)
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*shared_token.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchSharedTokensResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchSharedTokensResponse_PageTokenChange'.
func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchSharedTokensResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchSharedTokensResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchSharedTokensResponse_PageTokenChange))
}

// WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchSharedTokensResponsePageTokenChange_FieldPath
	ContainsValue(*WatchSharedTokensResponse_PageTokenChange) bool
}

// ParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchSharedTokensResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchSharedTokensResponsePageTokenChange_FieldPathArrayItemValue = (*WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchSharedTokensResponse_PageTokenChange as interface{}
func (fpaiv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchSharedTokensResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchSharedTokensResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchSharedTokensResponse_PageTokenChange) bool {
	slice := fpaiv.WatchSharedTokensResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchSharedTokensResponsePageTokenChange_FieldPath
}

func ParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchSharedTokensResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchSharedTokensResponsePageTokenChange_FieldPathArrayOfValues = (*WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	case WatchSharedTokensResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*shared_token.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}
func (fpaov *WatchSharedTokensResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*shared_token.PagerCursor, bool) {
	res, ok := fpaov.values.([]*shared_token.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateSharedTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateSharedTokenRequest_FieldPathSelector
	Get(source *CreateSharedTokenRequest) []interface{}
	GetSingle(source *CreateSharedTokenRequest) (interface{}, bool)
	ClearValue(item *CreateSharedTokenRequest)

	// Those methods build corresponding CreateSharedTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateSharedTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateSharedTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateSharedTokenRequest_FieldPathArrayItemValue
}

type CreateSharedTokenRequest_FieldPathSelector int32

const (
	CreateSharedTokenRequest_FieldPathSelectorParent      CreateSharedTokenRequest_FieldPathSelector = 0
	CreateSharedTokenRequest_FieldPathSelectorSharedToken CreateSharedTokenRequest_FieldPathSelector = 1
)

func (s CreateSharedTokenRequest_FieldPathSelector) String() string {
	switch s {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		return "parent"
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return "shared_token"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", s))
	}
}

func BuildCreateSharedTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateSharedTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateSharedTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorParent}, nil
		case "shared_token", "sharedToken", "shared-token":
			return &CreateSharedTokenRequest_FieldTerminalPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken}, nil
		}
	} else {
		switch fp[0] {
		case "shared_token", "sharedToken", "shared-token":
			if subpath, err := shared_token.BuildSharedToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateSharedTokenRequest_FieldSubPath{selector: CreateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateSharedTokenRequest", fp)
}

func ParseCreateSharedTokenRequest_FieldPath(rawField string) (CreateSharedTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateSharedTokenRequest_FieldPath(fp)
}

func MustParseCreateSharedTokenRequest_FieldPath(rawField string) CreateSharedTokenRequest_FieldPath {
	fp, err := ParseCreateSharedTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateSharedTokenRequest_FieldTerminalPath struct {
	selector CreateSharedTokenRequest_FieldPathSelector
}

var _ CreateSharedTokenRequest_FieldPath = (*CreateSharedTokenRequest_FieldTerminalPath)(nil)

func (fp *CreateSharedTokenRequest_FieldTerminalPath) Selector() CreateSharedTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateSharedTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateSharedTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateSharedTokenRequest
func (fp *CreateSharedTokenRequest_FieldTerminalPath) Get(source *CreateSharedTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateSharedTokenRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
			if source.SharedToken != nil {
				values = append(values, source.SharedToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateSharedTokenRequest))
}

// GetSingle returns value pointed by specific field of from source CreateSharedTokenRequest
func (fp *CreateSharedTokenRequest_FieldTerminalPath) GetSingle(source *CreateSharedTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		res := source.GetSharedToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateSharedTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		return (*shared_token.ParentReference)(nil)
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return (*shared_token.SharedToken)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) ClearValue(item *CreateSharedTokenRequest) {
	if item != nil {
		switch fp.selector {
		case CreateSharedTokenRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
			item.SharedToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateSharedTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateSharedTokenRequest_FieldPathSelectorParent
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithIValue(value interface{}) CreateSharedTokenRequest_FieldPathValue {
	switch fp.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		return &CreateSharedTokenRequest_FieldTerminalPathValue{CreateSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.ParentReference)}
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return &CreateSharedTokenRequest_FieldTerminalPathValue{CreateSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateSharedTokenRequest_FieldPathArrayOfValues {
	fpaov := &CreateSharedTokenRequest_FieldTerminalPathArrayOfValues{CreateSharedTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		return &CreateSharedTokenRequest_FieldTerminalPathArrayOfValues{CreateSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.ParentReference)}
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return &CreateSharedTokenRequest_FieldTerminalPathArrayOfValues{CreateSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateSharedTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *CreateSharedTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateSharedTokenRequest_FieldSubPath struct {
	selector CreateSharedTokenRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateSharedTokenRequest_FieldPath = (*CreateSharedTokenRequest_FieldSubPath)(nil)

func (fps *CreateSharedTokenRequest_FieldSubPath) Selector() CreateSharedTokenRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateSharedTokenRequest_FieldSubPath) AsSharedTokenSubPath() (shared_token.SharedToken_FieldPath, bool) {
	res, ok := fps.subPath.(shared_token.SharedToken_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateSharedTokenRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateSharedTokenRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateSharedTokenRequest
func (fps *CreateSharedTokenRequest_FieldSubPath) Get(source *CreateSharedTokenRequest) (values []interface{}) {
	if asSharedTokenFieldPath, ok := fps.AsSharedTokenSubPath(); ok {
		values = append(values, asSharedTokenFieldPath.Get(source.GetSharedToken())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateSharedTokenRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateSharedTokenRequest))
}

// GetSingle returns value of selected field from source CreateSharedTokenRequest
func (fps *CreateSharedTokenRequest_FieldSubPath) GetSingle(source *CreateSharedTokenRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		if source.GetSharedToken() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSharedToken())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fps.selector))
	}
}

func (fps *CreateSharedTokenRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateSharedTokenRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateSharedTokenRequest_FieldSubPath) ClearValue(item *CreateSharedTokenRequest) {
	if item != nil {
		switch fps.selector {
		case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
			fps.subPath.ClearValueRaw(item.SharedToken)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateSharedTokenRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateSharedTokenRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithIValue(value interface{}) CreateSharedTokenRequest_FieldPathValue {
	return &CreateSharedTokenRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateSharedTokenRequest_FieldPathArrayOfValues {
	return &CreateSharedTokenRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateSharedTokenRequest_FieldPathArrayItemValue {
	return &CreateSharedTokenRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateSharedTokenRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateSharedTokenRequest_FieldPathValue allows storing values for CreateSharedTokenRequest fields according to their type
type CreateSharedTokenRequest_FieldPathValue interface {
	CreateSharedTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateSharedTokenRequest)
	CompareWith(*CreateSharedTokenRequest) (cmp int, comparable bool)
}

func ParseCreateSharedTokenRequest_FieldPathValue(pathStr, valueStr string) (CreateSharedTokenRequest_FieldPathValue, error) {
	fp, err := ParseCreateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSharedTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateSharedTokenRequest_FieldPathValue), nil
}

func MustParseCreateSharedTokenRequest_FieldPathValue(pathStr, valueStr string) CreateSharedTokenRequest_FieldPathValue {
	fpv, err := ParseCreateSharedTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateSharedTokenRequest_FieldTerminalPathValue struct {
	CreateSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ CreateSharedTokenRequest_FieldPathValue = (*CreateSharedTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateSharedTokenRequest' as interface{}
func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) AsParentValue() (*shared_token.ParentReference, bool) {
	res, ok := fpv.value.(*shared_token.ParentReference)
	return res, ok
}
func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) AsSharedTokenValue() (*shared_token.SharedToken, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken)
	return res, ok
}

// SetTo stores value for selected field for object CreateSharedTokenRequest
func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) SetTo(target **CreateSharedTokenRequest) {
	if *target == nil {
		*target = new(CreateSharedTokenRequest)
	}
	switch fpv.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*shared_token.ParentReference)
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		(*target).SharedToken = fpv.value.(*shared_token.SharedToken)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateSharedTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateSharedTokenRequest_FieldTerminalPathValue' with the value under path in 'CreateSharedTokenRequest'.
func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) CompareWith(source *CreateSharedTokenRequest) (int, bool) {
	switch fpv.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*shared_token.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *CreateSharedTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateSharedTokenRequest))
}

type CreateSharedTokenRequest_FieldSubPathValue struct {
	CreateSharedTokenRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateSharedTokenRequest_FieldPathValue = (*CreateSharedTokenRequest_FieldSubPathValue)(nil)

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) AsSharedTokenPathValue() (shared_token.SharedToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue)
	return res, ok
}

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) SetTo(target **CreateSharedTokenRequest) {
	if *target == nil {
		*target = new(CreateSharedTokenRequest)
	}
	switch fpvs.Selector() {
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).SetTo(&(*target).SharedToken)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateSharedTokenRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) CompareWith(source *CreateSharedTokenRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).CompareWith(source.GetSharedToken())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateSharedTokenRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateSharedTokenRequest))
}

// CreateSharedTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateSharedTokenRequest according to their type
// Present only for array (repeated) types.
type CreateSharedTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateSharedTokenRequest_FieldPath
	ContainsValue(*CreateSharedTokenRequest) bool
}

// ParseCreateSharedTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateSharedTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSharedTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateSharedTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateSharedTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateSharedTokenRequest_FieldTerminalPathArrayItemValue struct {
	CreateSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ CreateSharedTokenRequest_FieldPathArrayItemValue = (*CreateSharedTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateSharedTokenRequest as interface{}
func (fpaiv *CreateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateSharedTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateSharedTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateSharedTokenRequest'
func (fpaiv *CreateSharedTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateSharedTokenRequest) bool {
	slice := fpaiv.CreateSharedTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateSharedTokenRequest_FieldSubPathArrayItemValue struct {
	CreateSharedTokenRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateSharedTokenRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateSharedTokenRequest_FieldSubPathArrayItemValue) AsSharedTokenPathItemValue() (shared_token.SharedToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateSharedTokenRequest'
func (fpaivs *CreateSharedTokenRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateSharedTokenRequest) bool {
	switch fpaivs.Selector() {
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		return fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue).ContainsValue(source.GetSharedToken())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateSharedTokenRequest: %d", fpaivs.Selector()))
	}
}

// CreateSharedTokenRequest_FieldPathArrayOfValues allows storing slice of values for CreateSharedTokenRequest fields according to their type
type CreateSharedTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateSharedTokenRequest_FieldPath
}

func ParseCreateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateSharedTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateSharedTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateSharedTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateSharedTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateSharedTokenRequest_FieldTerminalPathArrayOfValues struct {
	CreateSharedTokenRequest_FieldTerminalPath
	values interface{}
}

var _ CreateSharedTokenRequest_FieldPathArrayOfValues = (*CreateSharedTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateSharedTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateSharedTokenRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*shared_token.ParentReference) {
			values = append(values, v)
		}
	case CreateSharedTokenRequest_FieldPathSelectorSharedToken:
		for _, v := range fpaov.values.([]*shared_token.SharedToken) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateSharedTokenRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*shared_token.ParentReference, bool) {
	res, ok := fpaov.values.([]*shared_token.ParentReference)
	return res, ok
}
func (fpaov *CreateSharedTokenRequest_FieldTerminalPathArrayOfValues) AsSharedTokenArrayOfValues() ([]*shared_token.SharedToken, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken)
	return res, ok
}

type CreateSharedTokenRequest_FieldSubPathArrayOfValues struct {
	CreateSharedTokenRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateSharedTokenRequest_FieldPathArrayOfValues = (*CreateSharedTokenRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateSharedTokenRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateSharedTokenRequest_FieldSubPathArrayOfValues) AsSharedTokenPathArrayOfValues() (shared_token.SharedToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(shared_token.SharedToken_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateSharedTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateSharedTokenRequest_FieldPathSelector
	Get(source *UpdateSharedTokenRequest) []interface{}
	GetSingle(source *UpdateSharedTokenRequest) (interface{}, bool)
	ClearValue(item *UpdateSharedTokenRequest)

	// Those methods build corresponding UpdateSharedTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateSharedTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateSharedTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateSharedTokenRequest_FieldPathArrayItemValue
}

type UpdateSharedTokenRequest_FieldPathSelector int32

const (
	UpdateSharedTokenRequest_FieldPathSelectorSharedToken UpdateSharedTokenRequest_FieldPathSelector = 0
	UpdateSharedTokenRequest_FieldPathSelectorUpdateMask  UpdateSharedTokenRequest_FieldPathSelector = 1
	UpdateSharedTokenRequest_FieldPathSelectorCas         UpdateSharedTokenRequest_FieldPathSelector = 2
)

func (s UpdateSharedTokenRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return "shared_token"
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", s))
	}
}

func BuildUpdateSharedTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateSharedTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateSharedTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "shared_token", "sharedToken", "shared-token":
			return &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateSharedTokenRequest_FieldTerminalPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "shared_token", "sharedToken", "shared-token":
			if subpath, err := shared_token.BuildSharedToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorSharedToken, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateSharedTokenRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSharedTokenRequest_FieldSubPath{selector: UpdateSharedTokenRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateSharedTokenRequest", fp)
}

func ParseUpdateSharedTokenRequest_FieldPath(rawField string) (UpdateSharedTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateSharedTokenRequest_FieldPath(fp)
}

func MustParseUpdateSharedTokenRequest_FieldPath(rawField string) UpdateSharedTokenRequest_FieldPath {
	fp, err := ParseUpdateSharedTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateSharedTokenRequest_FieldTerminalPath struct {
	selector UpdateSharedTokenRequest_FieldPathSelector
}

var _ UpdateSharedTokenRequest_FieldPath = (*UpdateSharedTokenRequest_FieldTerminalPath)(nil)

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) Selector() UpdateSharedTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateSharedTokenRequest
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) Get(source *UpdateSharedTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
			if source.SharedToken != nil {
				values = append(values, source.SharedToken)
			}
		case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateSharedTokenRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateSharedTokenRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateSharedTokenRequest
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) GetSingle(source *UpdateSharedTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		res := source.GetSharedToken()
		return res, res != nil
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return (*shared_token.SharedToken)(nil)
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return (*UpdateSharedTokenRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) ClearValue(item *UpdateSharedTokenRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
			item.SharedToken = nil
		case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateSharedTokenRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateSharedTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateSharedTokenRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateSharedTokenRequest_FieldPathValue {
	switch fp.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return &UpdateSharedTokenRequest_FieldTerminalPathValue{UpdateSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken)}
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		return &UpdateSharedTokenRequest_FieldTerminalPathValue{UpdateSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return &UpdateSharedTokenRequest_FieldTerminalPathValue{UpdateSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*UpdateSharedTokenRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateSharedTokenRequest_FieldPathArrayOfValues {
	fpaov := &UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return &UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken)}
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		return &UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return &UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*UpdateSharedTokenRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateSharedTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateSharedTokenRequest_FieldSubPath struct {
	selector UpdateSharedTokenRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateSharedTokenRequest_FieldPath = (*UpdateSharedTokenRequest_FieldSubPath)(nil)

func (fps *UpdateSharedTokenRequest_FieldSubPath) Selector() UpdateSharedTokenRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateSharedTokenRequest_FieldSubPath) AsSharedTokenSubPath() (shared_token.SharedToken_FieldPath, bool) {
	res, ok := fps.subPath.(shared_token.SharedToken_FieldPath)
	return res, ok
}
func (fps *UpdateSharedTokenRequest_FieldSubPath) AsCasSubPath() (UpdateSharedTokenRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateSharedTokenRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateSharedTokenRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateSharedTokenRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateSharedTokenRequest
func (fps *UpdateSharedTokenRequest_FieldSubPath) Get(source *UpdateSharedTokenRequest) (values []interface{}) {
	if asSharedTokenFieldPath, ok := fps.AsSharedTokenSubPath(); ok {
		values = append(values, asSharedTokenFieldPath.Get(source.GetSharedToken())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateSharedTokenRequest))
}

// GetSingle returns value of selected field from source UpdateSharedTokenRequest
func (fps *UpdateSharedTokenRequest_FieldSubPath) GetSingle(source *UpdateSharedTokenRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		if source.GetSharedToken() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSharedToken())
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fps.selector))
	}
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateSharedTokenRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) ClearValue(item *UpdateSharedTokenRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
			fps.subPath.ClearValueRaw(item.SharedToken)
		case UpdateSharedTokenRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateSharedTokenRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithIValue(value interface{}) UpdateSharedTokenRequest_FieldPathValue {
	return &UpdateSharedTokenRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateSharedTokenRequest_FieldPathArrayOfValues {
	return &UpdateSharedTokenRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateSharedTokenRequest_FieldPathArrayItemValue {
	return &UpdateSharedTokenRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateSharedTokenRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateSharedTokenRequest_FieldPathValue allows storing values for UpdateSharedTokenRequest fields according to their type
type UpdateSharedTokenRequest_FieldPathValue interface {
	UpdateSharedTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateSharedTokenRequest)
	CompareWith(*UpdateSharedTokenRequest) (cmp int, comparable bool)
}

func ParseUpdateSharedTokenRequest_FieldPathValue(pathStr, valueStr string) (UpdateSharedTokenRequest_FieldPathValue, error) {
	fp, err := ParseUpdateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSharedTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateSharedTokenRequest_FieldPathValue), nil
}

func MustParseUpdateSharedTokenRequest_FieldPathValue(pathStr, valueStr string) UpdateSharedTokenRequest_FieldPathValue {
	fpv, err := ParseUpdateSharedTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateSharedTokenRequest_FieldTerminalPathValue struct {
	UpdateSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateSharedTokenRequest_FieldPathValue = (*UpdateSharedTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateSharedTokenRequest' as interface{}
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) AsSharedTokenValue() (*shared_token.SharedToken, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken)
	return res, ok
}
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) AsCasValue() (*UpdateSharedTokenRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateSharedTokenRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateSharedTokenRequest
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) SetTo(target **UpdateSharedTokenRequest) {
	if *target == nil {
		*target = new(UpdateSharedTokenRequest)
	}
	switch fpv.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		(*target).SharedToken = fpv.value.(*shared_token.SharedToken)
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateSharedTokenRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSharedTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateSharedTokenRequest_FieldTerminalPathValue' with the value under path in 'UpdateSharedTokenRequest'.
func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) CompareWith(source *UpdateSharedTokenRequest) (int, bool) {
	switch fpv.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return 0, false
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateSharedTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateSharedTokenRequest))
}

type UpdateSharedTokenRequest_FieldSubPathValue struct {
	UpdateSharedTokenRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateSharedTokenRequest_FieldPathValue = (*UpdateSharedTokenRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) AsSharedTokenPathValue() (shared_token.SharedToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) AsCasPathValue() (UpdateSharedTokenRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateSharedTokenRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) SetTo(target **UpdateSharedTokenRequest) {
	if *target == nil {
		*target = new(UpdateSharedTokenRequest)
	}
	switch fpvs.Selector() {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).SetTo(&(*target).SharedToken)
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateSharedTokenRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSharedTokenRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) CompareWith(source *UpdateSharedTokenRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).CompareWith(source.GetSharedToken())
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateSharedTokenRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSharedTokenRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateSharedTokenRequest))
}

// UpdateSharedTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateSharedTokenRequest according to their type
// Present only for array (repeated) types.
type UpdateSharedTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateSharedTokenRequest_FieldPath
	ContainsValue(*UpdateSharedTokenRequest) bool
}

// ParseUpdateSharedTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateSharedTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSharedTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateSharedTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateSharedTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue struct {
	UpdateSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateSharedTokenRequest_FieldPathArrayItemValue = (*UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateSharedTokenRequest as interface{}
func (fpaiv *UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateSharedTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateSharedTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateSharedTokenRequest'
func (fpaiv *UpdateSharedTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateSharedTokenRequest) bool {
	slice := fpaiv.UpdateSharedTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateSharedTokenRequest_FieldSubPathArrayItemValue struct {
	UpdateSharedTokenRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateSharedTokenRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateSharedTokenRequest_FieldSubPathArrayItemValue) AsSharedTokenPathItemValue() (shared_token.SharedToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateSharedTokenRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateSharedTokenRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateSharedTokenRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateSharedTokenRequest'
func (fpaivs *UpdateSharedTokenRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateSharedTokenRequest) bool {
	switch fpaivs.Selector() {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		return fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue).ContainsValue(source.GetSharedToken())
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateSharedTokenRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest: %d", fpaivs.Selector()))
	}
}

// UpdateSharedTokenRequest_FieldPathArrayOfValues allows storing slice of values for UpdateSharedTokenRequest fields according to their type
type UpdateSharedTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateSharedTokenRequest_FieldPath
}

func ParseUpdateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateSharedTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateSharedTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateSharedTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateSharedTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues struct {
	UpdateSharedTokenRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateSharedTokenRequest_FieldPathArrayOfValues = (*UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateSharedTokenRequest_FieldPathSelectorSharedToken:
		for _, v := range fpaov.values.([]*shared_token.SharedToken) {
			values = append(values, v)
		}
	case UpdateSharedTokenRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	case UpdateSharedTokenRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateSharedTokenRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues) AsSharedTokenArrayOfValues() ([]*shared_token.SharedToken, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken)
	return res, ok
}
func (fpaov *UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}
func (fpaov *UpdateSharedTokenRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateSharedTokenRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateSharedTokenRequest_CAS)
	return res, ok
}

type UpdateSharedTokenRequest_FieldSubPathArrayOfValues struct {
	UpdateSharedTokenRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateSharedTokenRequest_FieldPathArrayOfValues = (*UpdateSharedTokenRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateSharedTokenRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateSharedTokenRequest_FieldSubPathArrayOfValues) AsSharedTokenPathArrayOfValues() (shared_token.SharedToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(shared_token.SharedToken_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateSharedTokenRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateSharedTokenRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateSharedTokenRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateSharedTokenRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateSharedTokenRequestCAS_FieldPathSelector
	Get(source *UpdateSharedTokenRequest_CAS) []interface{}
	GetSingle(source *UpdateSharedTokenRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateSharedTokenRequest_CAS)

	// Those methods build corresponding UpdateSharedTokenRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayItemValue
}

type UpdateSharedTokenRequestCAS_FieldPathSelector int32

const (
	UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState UpdateSharedTokenRequestCAS_FieldPathSelector = 0
	UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask        UpdateSharedTokenRequestCAS_FieldPathSelector = 1
)

func (s UpdateSharedTokenRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", s))
	}
}

func BuildUpdateSharedTokenRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateSharedTokenRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateSharedTokenRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateSharedTokenRequestCAS_FieldTerminalPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := shared_token.BuildSharedToken_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateSharedTokenRequestCAS_FieldSubPath{selector: UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateSharedTokenRequest_CAS", fp)
}

func ParseUpdateSharedTokenRequestCAS_FieldPath(rawField string) (UpdateSharedTokenRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateSharedTokenRequestCAS_FieldPath(fp)
}

func MustParseUpdateSharedTokenRequestCAS_FieldPath(rawField string) UpdateSharedTokenRequestCAS_FieldPath {
	fp, err := ParseUpdateSharedTokenRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateSharedTokenRequestCAS_FieldTerminalPath struct {
	selector UpdateSharedTokenRequestCAS_FieldPathSelector
}

var _ UpdateSharedTokenRequestCAS_FieldPath = (*UpdateSharedTokenRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) Selector() UpdateSharedTokenRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateSharedTokenRequest_CAS
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) Get(source *UpdateSharedTokenRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateSharedTokenRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateSharedTokenRequest_CAS
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) GetSingle(source *UpdateSharedTokenRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateSharedTokenRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return (*shared_token.SharedToken)(nil)
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		return (*shared_token.SharedToken_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) ClearValue(item *UpdateSharedTokenRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateSharedTokenRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateSharedTokenRequestCAS_FieldTerminalPathValue{UpdateSharedTokenRequestCAS_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken)}
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateSharedTokenRequestCAS_FieldTerminalPathValue{UpdateSharedTokenRequestCAS_FieldTerminalPath: *fp, value: value.(*shared_token.SharedToken_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequestCAS_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken)}
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues{UpdateSharedTokenRequestCAS_FieldTerminalPath: *fp, values: values.([]*shared_token.SharedToken_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateSharedTokenRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateSharedTokenRequestCAS_FieldSubPath struct {
	selector UpdateSharedTokenRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateSharedTokenRequestCAS_FieldPath = (*UpdateSharedTokenRequestCAS_FieldSubPath)(nil)

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) Selector() UpdateSharedTokenRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) AsConditionalStateSubPath() (shared_token.SharedToken_FieldPath, bool) {
	res, ok := fps.subPath.(shared_token.SharedToken_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateSharedTokenRequest_CAS
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) Get(source *UpdateSharedTokenRequest_CAS) (values []interface{}) {
	if asSharedTokenFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asSharedTokenFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateSharedTokenRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateSharedTokenRequest_CAS
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) GetSingle(source *UpdateSharedTokenRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateSharedTokenRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) ClearValue(item *UpdateSharedTokenRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateSharedTokenRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathValue {
	return &UpdateSharedTokenRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayOfValues {
	return &UpdateSharedTokenRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateSharedTokenRequestCAS_FieldPathArrayItemValue {
	return &UpdateSharedTokenRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateSharedTokenRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateSharedTokenRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateSharedTokenRequestCAS_FieldPathValue interface {
	UpdateSharedTokenRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateSharedTokenRequest_CAS)
	CompareWith(*UpdateSharedTokenRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateSharedTokenRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateSharedTokenRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateSharedTokenRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateSharedTokenRequestCAS_FieldPathValue), nil
}

func MustParseUpdateSharedTokenRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateSharedTokenRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateSharedTokenRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateSharedTokenRequestCAS_FieldTerminalPathValue struct {
	UpdateSharedTokenRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateSharedTokenRequestCAS_FieldPathValue = (*UpdateSharedTokenRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*shared_token.SharedToken, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken)
	return res, ok
}
func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpv.value.(*shared_token.SharedToken_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateSharedTokenRequest_CAS) {
	if *target == nil {
		*target = new(UpdateSharedTokenRequest_CAS)
	}
	switch fpv.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*shared_token.SharedToken)
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*shared_token.SharedToken_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSharedTokenRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateSharedTokenRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateSharedTokenRequest_CAS'.
func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateSharedTokenRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateSharedTokenRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateSharedTokenRequest_CAS))
}

type UpdateSharedTokenRequestCAS_FieldSubPathValue struct {
	UpdateSharedTokenRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateSharedTokenRequestCAS_FieldPathValue = (*UpdateSharedTokenRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (shared_token.SharedToken_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) SetTo(target **UpdateSharedTokenRequest_CAS) {
	if *target == nil {
		*target = new(UpdateSharedTokenRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateSharedTokenRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) CompareWith(source *UpdateSharedTokenRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(shared_token.SharedToken_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateSharedTokenRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateSharedTokenRequest_CAS))
}

// UpdateSharedTokenRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateSharedTokenRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateSharedTokenRequestCAS_FieldPath
	ContainsValue(*UpdateSharedTokenRequest_CAS) bool
}

// ParseUpdateSharedTokenRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateSharedTokenRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateSharedTokenRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateSharedTokenRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateSharedTokenRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateSharedTokenRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateSharedTokenRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateSharedTokenRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateSharedTokenRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateSharedTokenRequestCAS_FieldPathArrayItemValue = (*UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateSharedTokenRequest_CAS as interface{}
func (fpaiv *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateSharedTokenRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateSharedTokenRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateSharedTokenRequest_CAS) bool {
	slice := fpaiv.UpdateSharedTokenRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateSharedTokenRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateSharedTokenRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateSharedTokenRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateSharedTokenRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (shared_token.SharedToken_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateSharedTokenRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateSharedTokenRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(shared_token.SharedToken_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateSharedTokenRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateSharedTokenRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateSharedTokenRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateSharedTokenRequestCAS_FieldPath
}

func ParseUpdateSharedTokenRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateSharedTokenRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateSharedTokenRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateSharedTokenRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateSharedTokenRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateSharedTokenRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateSharedTokenRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateSharedTokenRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateSharedTokenRequestCAS_FieldPathArrayOfValues = (*UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateSharedTokenRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*shared_token.SharedToken) {
			values = append(values, v)
		}
	case UpdateSharedTokenRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*shared_token.SharedToken_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*shared_token.SharedToken, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken)
	return res, ok
}
func (fpaov *UpdateSharedTokenRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*shared_token.SharedToken_FieldMask, bool) {
	res, ok := fpaov.values.([]*shared_token.SharedToken_FieldMask)
	return res, ok
}

type UpdateSharedTokenRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateSharedTokenRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateSharedTokenRequestCAS_FieldPathArrayOfValues = (*UpdateSharedTokenRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateSharedTokenRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateSharedTokenRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (shared_token.SharedToken_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(shared_token.SharedToken_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteSharedTokenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteSharedTokenRequest_FieldPathSelector
	Get(source *DeleteSharedTokenRequest) []interface{}
	GetSingle(source *DeleteSharedTokenRequest) (interface{}, bool)
	ClearValue(item *DeleteSharedTokenRequest)

	// Those methods build corresponding DeleteSharedTokenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteSharedTokenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteSharedTokenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteSharedTokenRequest_FieldPathArrayItemValue
}

type DeleteSharedTokenRequest_FieldPathSelector int32

const (
	DeleteSharedTokenRequest_FieldPathSelectorName DeleteSharedTokenRequest_FieldPathSelector = 0
)

func (s DeleteSharedTokenRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", s))
	}
}

func BuildDeleteSharedTokenRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteSharedTokenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteSharedTokenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteSharedTokenRequest_FieldTerminalPath{selector: DeleteSharedTokenRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteSharedTokenRequest", fp)
}

func ParseDeleteSharedTokenRequest_FieldPath(rawField string) (DeleteSharedTokenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteSharedTokenRequest_FieldPath(fp)
}

func MustParseDeleteSharedTokenRequest_FieldPath(rawField string) DeleteSharedTokenRequest_FieldPath {
	fp, err := ParseDeleteSharedTokenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteSharedTokenRequest_FieldTerminalPath struct {
	selector DeleteSharedTokenRequest_FieldPathSelector
}

var _ DeleteSharedTokenRequest_FieldPath = (*DeleteSharedTokenRequest_FieldTerminalPath)(nil)

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) Selector() DeleteSharedTokenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteSharedTokenRequest
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) Get(source *DeleteSharedTokenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteSharedTokenRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteSharedTokenRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteSharedTokenRequest
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) GetSingle(source *DeleteSharedTokenRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteSharedTokenRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		return (*shared_token.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) ClearValue(item *DeleteSharedTokenRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteSharedTokenRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteSharedTokenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteSharedTokenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteSharedTokenRequest_FieldPathSelectorName
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteSharedTokenRequest_FieldPathValue {
	switch fp.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		return &DeleteSharedTokenRequest_FieldTerminalPathValue{DeleteSharedTokenRequest_FieldTerminalPath: *fp, value: value.(*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteSharedTokenRequest_FieldPathArrayOfValues {
	fpaov := &DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues{DeleteSharedTokenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		return &DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues{DeleteSharedTokenRequest_FieldTerminalPath: *fp, values: values.([]*shared_token.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteSharedTokenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fp.selector))
	}
}

func (fp *DeleteSharedTokenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteSharedTokenRequest_FieldPathValue allows storing values for DeleteSharedTokenRequest fields according to their type
type DeleteSharedTokenRequest_FieldPathValue interface {
	DeleteSharedTokenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteSharedTokenRequest)
	CompareWith(*DeleteSharedTokenRequest) (cmp int, comparable bool)
}

func ParseDeleteSharedTokenRequest_FieldPathValue(pathStr, valueStr string) (DeleteSharedTokenRequest_FieldPathValue, error) {
	fp, err := ParseDeleteSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSharedTokenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteSharedTokenRequest_FieldPathValue), nil
}

func MustParseDeleteSharedTokenRequest_FieldPathValue(pathStr, valueStr string) DeleteSharedTokenRequest_FieldPathValue {
	fpv, err := ParseDeleteSharedTokenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteSharedTokenRequest_FieldTerminalPathValue struct {
	DeleteSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteSharedTokenRequest_FieldPathValue = (*DeleteSharedTokenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteSharedTokenRequest' as interface{}
func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) AsNameValue() (*shared_token.Reference, bool) {
	res, ok := fpv.value.(*shared_token.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteSharedTokenRequest
func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) SetTo(target **DeleteSharedTokenRequest) {
	if *target == nil {
		*target = new(DeleteSharedTokenRequest)
	}
	switch fpv.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*shared_token.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteSharedTokenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteSharedTokenRequest_FieldTerminalPathValue' with the value under path in 'DeleteSharedTokenRequest'.
func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) CompareWith(source *DeleteSharedTokenRequest) (int, bool) {
	switch fpv.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*shared_token.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteSharedTokenRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteSharedTokenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteSharedTokenRequest))
}

// DeleteSharedTokenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteSharedTokenRequest according to their type
// Present only for array (repeated) types.
type DeleteSharedTokenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteSharedTokenRequest_FieldPath
	ContainsValue(*DeleteSharedTokenRequest) bool
}

// ParseDeleteSharedTokenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteSharedTokenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSharedTokenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteSharedTokenRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteSharedTokenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteSharedTokenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue struct {
	DeleteSharedTokenRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteSharedTokenRequest_FieldPathArrayItemValue = (*DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteSharedTokenRequest as interface{}
func (fpaiv *DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteSharedTokenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteSharedTokenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteSharedTokenRequest'
func (fpaiv *DeleteSharedTokenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteSharedTokenRequest) bool {
	slice := fpaiv.DeleteSharedTokenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteSharedTokenRequest_FieldPathArrayOfValues allows storing slice of values for DeleteSharedTokenRequest fields according to their type
type DeleteSharedTokenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteSharedTokenRequest_FieldPath
}

func ParseDeleteSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteSharedTokenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteSharedTokenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteSharedTokenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteSharedTokenRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteSharedTokenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteSharedTokenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues struct {
	DeleteSharedTokenRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteSharedTokenRequest_FieldPathArrayOfValues = (*DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteSharedTokenRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*shared_token.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteSharedTokenRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*shared_token.Reference, bool) {
	res, ok := fpaov.values.([]*shared_token.Reference)
	return res, ok
}
