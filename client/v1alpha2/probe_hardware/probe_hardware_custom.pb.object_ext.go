// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_hardware_custom.proto
// DO NOT EDIT!!!

package probe_hardware_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
	_ = &project.Project{}
)

func (o *ProbeHardwareGetRequest) GotenObjectExt() {}

func (o *ProbeHardwareGetRequest) MakeFullFieldMask() *ProbeHardwareGetRequest_FieldMask {
	return FullProbeHardwareGetRequest_FieldMask()
}

func (o *ProbeHardwareGetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeHardwareGetRequest_FieldMask()
}

func (o *ProbeHardwareGetRequest) MakeDiffFieldMask(other *ProbeHardwareGetRequest) *ProbeHardwareGetRequest_FieldMask {
	if o == nil && other == nil {
		return &ProbeHardwareGetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeHardwareGetRequest_FieldMask()
	}

	res := &ProbeHardwareGetRequest_FieldMask{}
	if o.GetProbeName().String() != other.GetProbeName().String() {
		res.Paths = append(res.Paths, &ProbeHardwareGetRequest_FieldTerminalPath{selector: ProbeHardwareGetRequest_FieldPathSelectorProbeName})
	}
	if o.GetAccessToken() != other.GetAccessToken() {
		res.Paths = append(res.Paths, &ProbeHardwareGetRequest_FieldTerminalPath{selector: ProbeHardwareGetRequest_FieldPathSelectorAccessToken})
	}
	return res
}

func (o *ProbeHardwareGetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeHardwareGetRequest))
}

func (o *ProbeHardwareGetRequest) Clone() *ProbeHardwareGetRequest {
	if o == nil {
		return nil
	}
	result := &ProbeHardwareGetRequest{}
	if o.ProbeName == nil {
		result.ProbeName = nil
	} else if data, err := o.ProbeName.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ProbeName = &probe.Name{}
		if err := result.ProbeName.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AccessToken = o.AccessToken
	return result
}

func (o *ProbeHardwareGetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeHardwareGetRequest) Merge(source *ProbeHardwareGetRequest) {
	if source.GetProbeName() != nil {
		if data, err := source.GetProbeName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ProbeName = &probe.Name{}
			if err := o.ProbeName.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ProbeName = nil
	}
	o.AccessToken = source.GetAccessToken()
}

func (o *ProbeHardwareGetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeHardwareGetRequest))
}

func (o *ProbeHardwareGetResponse) GotenObjectExt() {}

func (o *ProbeHardwareGetResponse) MakeFullFieldMask() *ProbeHardwareGetResponse_FieldMask {
	return FullProbeHardwareGetResponse_FieldMask()
}

func (o *ProbeHardwareGetResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeHardwareGetResponse_FieldMask()
}

func (o *ProbeHardwareGetResponse) MakeDiffFieldMask(other *ProbeHardwareGetResponse) *ProbeHardwareGetResponse_FieldMask {
	if o == nil && other == nil {
		return &ProbeHardwareGetResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeHardwareGetResponse_FieldMask()
	}

	res := &ProbeHardwareGetResponse_FieldMask{}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorSerialNumber})
	}
	if o.GetActivationStatus() != other.GetActivationStatus() {
		res.Paths = append(res.Paths, &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorActivationStatus})
	}
	if o.GetConnectionStatus() != other.GetConnectionStatus() {
		res.Paths = append(res.Paths, &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus})
	}
	return res
}

func (o *ProbeHardwareGetResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeHardwareGetResponse))
}

func (o *ProbeHardwareGetResponse) Clone() *ProbeHardwareGetResponse {
	if o == nil {
		return nil
	}
	result := &ProbeHardwareGetResponse{}
	result.SerialNumber = o.SerialNumber
	result.ActivationStatus = o.ActivationStatus
	result.ConnectionStatus = o.ConnectionStatus
	return result
}

func (o *ProbeHardwareGetResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeHardwareGetResponse) Merge(source *ProbeHardwareGetResponse) {
	o.SerialNumber = source.GetSerialNumber()
	o.ActivationStatus = source.GetActivationStatus()
	o.ConnectionStatus = source.GetConnectionStatus()
}

func (o *ProbeHardwareGetResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeHardwareGetResponse))
}

func (o *ProbeHardwareUpdateRequest) GotenObjectExt() {}

func (o *ProbeHardwareUpdateRequest) MakeFullFieldMask() *ProbeHardwareUpdateRequest_FieldMask {
	return FullProbeHardwareUpdateRequest_FieldMask()
}

func (o *ProbeHardwareUpdateRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeHardwareUpdateRequest_FieldMask()
}

func (o *ProbeHardwareUpdateRequest) MakeDiffFieldMask(other *ProbeHardwareUpdateRequest) *ProbeHardwareUpdateRequest_FieldMask {
	if o == nil && other == nil {
		return &ProbeHardwareUpdateRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeHardwareUpdateRequest_FieldMask()
	}

	res := &ProbeHardwareUpdateRequest_FieldMask{}
	if o.GetProbeName().String() != other.GetProbeName().String() {
		res.Paths = append(res.Paths, &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorProbeName})
	}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber})
	}
	if o.GetAccessToken() != other.GetAccessToken() {
		res.Paths = append(res.Paths, &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken})
	}
	return res
}

func (o *ProbeHardwareUpdateRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeHardwareUpdateRequest))
}

func (o *ProbeHardwareUpdateRequest) Clone() *ProbeHardwareUpdateRequest {
	if o == nil {
		return nil
	}
	result := &ProbeHardwareUpdateRequest{}
	if o.ProbeName == nil {
		result.ProbeName = nil
	} else if data, err := o.ProbeName.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ProbeName = &probe.Name{}
		if err := result.ProbeName.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.SerialNumber = o.SerialNumber
	result.AccessToken = o.AccessToken
	return result
}

func (o *ProbeHardwareUpdateRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeHardwareUpdateRequest) Merge(source *ProbeHardwareUpdateRequest) {
	if source.GetProbeName() != nil {
		if data, err := source.GetProbeName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ProbeName = &probe.Name{}
			if err := o.ProbeName.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ProbeName = nil
	}
	o.SerialNumber = source.GetSerialNumber()
	o.AccessToken = source.GetAccessToken()
}

func (o *ProbeHardwareUpdateRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeHardwareUpdateRequest))
}

func (o *ProbeHardwareUpdateResponse) GotenObjectExt() {}

func (o *ProbeHardwareUpdateResponse) MakeFullFieldMask() *ProbeHardwareUpdateResponse_FieldMask {
	return FullProbeHardwareUpdateResponse_FieldMask()
}

func (o *ProbeHardwareUpdateResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeHardwareUpdateResponse_FieldMask()
}

func (o *ProbeHardwareUpdateResponse) MakeDiffFieldMask(other *ProbeHardwareUpdateResponse) *ProbeHardwareUpdateResponse_FieldMask {
	if o == nil && other == nil {
		return &ProbeHardwareUpdateResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeHardwareUpdateResponse_FieldMask()
	}

	res := &ProbeHardwareUpdateResponse_FieldMask{}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &ProbeHardwareUpdateResponse_FieldTerminalPath{selector: ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber})
	}
	return res
}

func (o *ProbeHardwareUpdateResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeHardwareUpdateResponse))
}

func (o *ProbeHardwareUpdateResponse) Clone() *ProbeHardwareUpdateResponse {
	if o == nil {
		return nil
	}
	result := &ProbeHardwareUpdateResponse{}
	result.SerialNumber = o.SerialNumber
	return result
}

func (o *ProbeHardwareUpdateResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeHardwareUpdateResponse) Merge(source *ProbeHardwareUpdateResponse) {
	o.SerialNumber = source.GetSerialNumber()
}

func (o *ProbeHardwareUpdateResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeHardwareUpdateResponse))
}
