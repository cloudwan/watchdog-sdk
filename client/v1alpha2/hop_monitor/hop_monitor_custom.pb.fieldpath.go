// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/hop_monitor_custom.proto
// DO NOT EDIT!!!

package hop_monitor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHopMonitorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHopMonitorRequest_FieldPathSelector
	Get(source *RunHopMonitorRequest) []interface{}
	GetSingle(source *RunHopMonitorRequest) (interface{}, bool)
	ClearValue(item *RunHopMonitorRequest)

	// Those methods build corresponding RunHopMonitorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHopMonitorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHopMonitorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHopMonitorRequest_FieldPathArrayItemValue
}

type RunHopMonitorRequest_FieldPathSelector int32

const (
	RunHopMonitorRequest_FieldPathSelectorName         RunHopMonitorRequest_FieldPathSelector = 0
	RunHopMonitorRequest_FieldPathSelectorSource       RunHopMonitorRequest_FieldPathSelector = 1
	RunHopMonitorRequest_FieldPathSelectorTarget       RunHopMonitorRequest_FieldPathSelector = 2
	RunHopMonitorRequest_FieldPathSelectorDestination  RunHopMonitorRequest_FieldPathSelector = 3
	RunHopMonitorRequest_FieldPathSelectorAttempts     RunHopMonitorRequest_FieldPathSelector = 4
	RunHopMonitorRequest_FieldPathSelectorMode         RunHopMonitorRequest_FieldPathSelector = 5
	RunHopMonitorRequest_FieldPathSelectorOutputFormat RunHopMonitorRequest_FieldPathSelector = 6
)

func (s RunHopMonitorRequest_FieldPathSelector) String() string {
	switch s {
	case RunHopMonitorRequest_FieldPathSelectorName:
		return "name"
	case RunHopMonitorRequest_FieldPathSelectorSource:
		return "source"
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		return "target"
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		return "destination"
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		return "attempts"
	case RunHopMonitorRequest_FieldPathSelectorMode:
		return "mode"
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		return "output_format"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", s))
	}
}

func BuildRunHopMonitorRequest_FieldPath(fp gotenobject.RawFieldPath) (RunHopMonitorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHopMonitorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorName}, nil
		case "source":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorSource}, nil
		case "target":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorTarget}, nil
		case "destination":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorDestination}, nil
		case "attempts":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorAttempts}, nil
		case "mode":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorMode}, nil
		case "output_format", "outputFormat", "output-format":
			return &RunHopMonitorRequest_FieldTerminalPath{selector: RunHopMonitorRequest_FieldPathSelectorOutputFormat}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHopMonitorRequest", fp)
}

func ParseRunHopMonitorRequest_FieldPath(rawField string) (RunHopMonitorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHopMonitorRequest_FieldPath(fp)
}

func MustParseRunHopMonitorRequest_FieldPath(rawField string) RunHopMonitorRequest_FieldPath {
	fp, err := ParseRunHopMonitorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHopMonitorRequest_FieldTerminalPath struct {
	selector RunHopMonitorRequest_FieldPathSelector
}

var _ RunHopMonitorRequest_FieldPath = (*RunHopMonitorRequest_FieldTerminalPath)(nil)

func (fp *RunHopMonitorRequest_FieldTerminalPath) Selector() RunHopMonitorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHopMonitorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHopMonitorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHopMonitorRequest
func (fp *RunHopMonitorRequest_FieldTerminalPath) Get(source *RunHopMonitorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHopMonitorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RunHopMonitorRequest_FieldPathSelectorSource:
			values = append(values, source.Source)
		case RunHopMonitorRequest_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case RunHopMonitorRequest_FieldPathSelectorDestination:
			values = append(values, source.Destination)
		case RunHopMonitorRequest_FieldPathSelectorAttempts:
			values = append(values, source.Attempts)
		case RunHopMonitorRequest_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
			values = append(values, source.OutputFormat)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHopMonitorRequest))
}

// GetSingle returns value pointed by specific field of from source RunHopMonitorRequest
func (fp *RunHopMonitorRequest_FieldTerminalPath) GetSingle(source *RunHopMonitorRequest) (interface{}, bool) {
	switch fp.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RunHopMonitorRequest_FieldPathSelectorSource:
		return source.GetSource(), source != nil
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		return source.GetDestination(), source != nil
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		return source.GetAttempts(), source != nil
	case RunHopMonitorRequest_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		return source.GetOutputFormat(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
	}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHopMonitorRequest))
}

// GetDefault returns a default value of the field type
func (fp *RunHopMonitorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case RunHopMonitorRequest_FieldPathSelectorSource:
		return ""
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		return ""
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		return int32(0)
	case RunHopMonitorRequest_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		return common.OnDemandTestResponseFormat_TEXT
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
	}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) ClearValue(item *RunHopMonitorRequest) {
	if item != nil {
		switch fp.selector {
		case RunHopMonitorRequest_FieldPathSelectorName:
			item.Name = nil
		case RunHopMonitorRequest_FieldPathSelectorSource:
			item.Source = ""
		case RunHopMonitorRequest_FieldPathSelectorTarget:
			item.Target = nil
		case RunHopMonitorRequest_FieldPathSelectorDestination:
			item.Destination = ""
		case RunHopMonitorRequest_FieldPathSelectorAttempts:
			item.Attempts = int32(0)
		case RunHopMonitorRequest_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
			item.OutputFormat = common.OnDemandTestResponseFormat_TEXT
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
		}
	}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHopMonitorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHopMonitorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHopMonitorRequest_FieldPathSelectorName ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorSource ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorTarget ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorDestination ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorAttempts ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorMode ||
		fp.selector == RunHopMonitorRequest_FieldPathSelectorOutputFormat
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithIValue(value interface{}) RunHopMonitorRequest_FieldPathValue {
	switch fp.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case RunHopMonitorRequest_FieldPathSelectorSource:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case RunHopMonitorRequest_FieldPathSelectorMode:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		return &RunHopMonitorRequest_FieldTerminalPathValue{RunHopMonitorRequest_FieldTerminalPath: *fp, value: value.(common.OnDemandTestResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
	}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHopMonitorRequest_FieldPathArrayOfValues {
	fpaov := &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case RunHopMonitorRequest_FieldPathSelectorSource:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunHopMonitorRequest_FieldPathSelectorMode:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		return &RunHopMonitorRequest_FieldTerminalPathArrayOfValues{RunHopMonitorRequest_FieldTerminalPath: *fp, values: values.([]common.OnDemandTestResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHopMonitorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fp.selector))
	}
}

func (fp *RunHopMonitorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunHopMonitorRequest_FieldPathValue allows storing values for RunHopMonitorRequest fields according to their type
type RunHopMonitorRequest_FieldPathValue interface {
	RunHopMonitorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHopMonitorRequest)
	CompareWith(*RunHopMonitorRequest) (cmp int, comparable bool)
}

func ParseRunHopMonitorRequest_FieldPathValue(pathStr, valueStr string) (RunHopMonitorRequest_FieldPathValue, error) {
	fp, err := ParseRunHopMonitorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHopMonitorRequest_FieldPathValue), nil
}

func MustParseRunHopMonitorRequest_FieldPathValue(pathStr, valueStr string) RunHopMonitorRequest_FieldPathValue {
	fpv, err := ParseRunHopMonitorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHopMonitorRequest_FieldTerminalPathValue struct {
	RunHopMonitorRequest_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorRequest_FieldPathValue = (*RunHopMonitorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunHopMonitorRequest' as interface{}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsSourceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsDestinationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsAttemptsValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) AsOutputFormatValue() (common.OnDemandTestResponseFormat, bool) {
	res, ok := fpv.value.(common.OnDemandTestResponseFormat)
	return res, ok
}

// SetTo stores value for selected field for object RunHopMonitorRequest
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) SetTo(target **RunHopMonitorRequest) {
	if *target == nil {
		*target = new(RunHopMonitorRequest)
	}
	switch fpv.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case RunHopMonitorRequest_FieldPathSelectorSource:
		(*target).Source = fpv.value.(string)
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		(*target).Destination = fpv.value.(string)
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		(*target).Attempts = fpv.value.(int32)
	case RunHopMonitorRequest_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		(*target).OutputFormat = fpv.value.(common.OnDemandTestResponseFormat)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHopMonitorRequest_FieldTerminalPathValue' with the value under path in 'RunHopMonitorRequest'.
func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) CompareWith(source *RunHopMonitorRequest) (int, bool) {
	switch fpv.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorSource:
		leftValue := fpv.value.(string)
		rightValue := source.GetSource()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		leftValue := fpv.value.(string)
		rightValue := source.GetDestination()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		leftValue := fpv.value.(int32)
		rightValue := source.GetAttempts()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		leftValue := fpv.value.(common.OnDemandTestResponseFormat)
		rightValue := source.GetOutputFormat()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorRequest: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHopMonitorRequest))
}

// RunHopMonitorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RunHopMonitorRequest according to their type
// Present only for array (repeated) types.
type RunHopMonitorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHopMonitorRequest_FieldPath
	ContainsValue(*RunHopMonitorRequest) bool
}

// ParseRunHopMonitorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHopMonitorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RunHopMonitorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHopMonitorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHopMonitorRequest_FieldPathArrayItemValue), nil
}

func MustParseRunHopMonitorRequest_FieldPathArrayItemValue(pathStr, valueStr string) RunHopMonitorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHopMonitorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHopMonitorRequest_FieldTerminalPathArrayItemValue struct {
	RunHopMonitorRequest_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorRequest_FieldPathArrayItemValue = (*RunHopMonitorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHopMonitorRequest as interface{}
func (fpaiv *RunHopMonitorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunHopMonitorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RunHopMonitorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHopMonitorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHopMonitorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHopMonitorRequest'
func (fpaiv *RunHopMonitorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHopMonitorRequest) bool {
	slice := fpaiv.RunHopMonitorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunHopMonitorRequest_FieldPathArrayOfValues allows storing slice of values for RunHopMonitorRequest fields according to their type
type RunHopMonitorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHopMonitorRequest_FieldPath
}

func ParseRunHopMonitorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHopMonitorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHopMonitorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHopMonitorRequest_FieldPathArrayOfValues), nil
}

func MustParseRunHopMonitorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RunHopMonitorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRunHopMonitorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHopMonitorRequest_FieldTerminalPathArrayOfValues struct {
	RunHopMonitorRequest_FieldTerminalPath
	values interface{}
}

var _ RunHopMonitorRequest_FieldPathArrayOfValues = (*RunHopMonitorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHopMonitorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorSource:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorDestination:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorAttempts:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case RunHopMonitorRequest_FieldPathSelectorOutputFormat:
		for _, v := range fpaov.values.([]common.OnDemandTestResponseFormat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsSourceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsDestinationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsAttemptsArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *RunHopMonitorRequest_FieldTerminalPathArrayOfValues) AsOutputFormatArrayOfValues() ([]common.OnDemandTestResponseFormat, bool) {
	res, ok := fpaov.values.([]common.OnDemandTestResponseFormat)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHopMonitorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHopMonitorResponse_FieldPathSelector
	Get(source *RunHopMonitorResponse) []interface{}
	GetSingle(source *RunHopMonitorResponse) (interface{}, bool)
	ClearValue(item *RunHopMonitorResponse)

	// Those methods build corresponding RunHopMonitorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHopMonitorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHopMonitorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHopMonitorResponse_FieldPathArrayItemValue
}

type RunHopMonitorResponse_FieldPathSelector int32

const (
	RunHopMonitorResponse_FieldPathSelectorJsonResponse RunHopMonitorResponse_FieldPathSelector = 0
	RunHopMonitorResponse_FieldPathSelectorTextResponse RunHopMonitorResponse_FieldPathSelector = 1
)

func (s RunHopMonitorResponse_FieldPathSelector) String() string {
	switch s {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return "json_response"
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		return "text_response"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", s))
	}
}

func BuildRunHopMonitorResponse_FieldPath(fp gotenobject.RawFieldPath) (RunHopMonitorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHopMonitorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "json_response", "jsonResponse", "json-response":
			return &RunHopMonitorResponse_FieldTerminalPath{selector: RunHopMonitorResponse_FieldPathSelectorJsonResponse}, nil
		case "text_response", "textResponse", "text-response":
			return &RunHopMonitorResponse_FieldTerminalPath{selector: RunHopMonitorResponse_FieldPathSelectorTextResponse}, nil
		}
	} else {
		switch fp[0] {
		case "json_response", "jsonResponse", "json-response":
			if subpath, err := BuildRunHopMonitorResponseJsonResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunHopMonitorResponse_FieldSubPath{selector: RunHopMonitorResponse_FieldPathSelectorJsonResponse, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHopMonitorResponse", fp)
}

func ParseRunHopMonitorResponse_FieldPath(rawField string) (RunHopMonitorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHopMonitorResponse_FieldPath(fp)
}

func MustParseRunHopMonitorResponse_FieldPath(rawField string) RunHopMonitorResponse_FieldPath {
	fp, err := ParseRunHopMonitorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHopMonitorResponse_FieldTerminalPath struct {
	selector RunHopMonitorResponse_FieldPathSelector
}

var _ RunHopMonitorResponse_FieldPath = (*RunHopMonitorResponse_FieldTerminalPath)(nil)

func (fp *RunHopMonitorResponse_FieldTerminalPath) Selector() RunHopMonitorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHopMonitorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHopMonitorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHopMonitorResponse
func (fp *RunHopMonitorResponse_FieldTerminalPath) Get(source *RunHopMonitorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
			if source.JsonResponse != nil {
				values = append(values, source.JsonResponse)
			}
		case RunHopMonitorResponse_FieldPathSelectorTextResponse:
			values = append(values, source.TextResponse)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHopMonitorResponse))
}

// GetSingle returns value pointed by specific field of from source RunHopMonitorResponse
func (fp *RunHopMonitorResponse_FieldTerminalPath) GetSingle(source *RunHopMonitorResponse) (interface{}, bool) {
	switch fp.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		res := source.GetJsonResponse()
		return res, res != nil
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		return source.GetTextResponse(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHopMonitorResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunHopMonitorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return (*RunHopMonitorResponse_JsonResponse)(nil)
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) ClearValue(item *RunHopMonitorResponse) {
	if item != nil {
		switch fp.selector {
		case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
			item.JsonResponse = nil
		case RunHopMonitorResponse_FieldPathSelectorTextResponse:
			item.TextResponse = ""
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
		}
	}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHopMonitorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHopMonitorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHopMonitorResponse_FieldPathSelectorTextResponse
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithIValue(value interface{}) RunHopMonitorResponse_FieldPathValue {
	switch fp.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return &RunHopMonitorResponse_FieldTerminalPathValue{RunHopMonitorResponse_FieldTerminalPath: *fp, value: value.(*RunHopMonitorResponse_JsonResponse)}
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		return &RunHopMonitorResponse_FieldTerminalPathValue{RunHopMonitorResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHopMonitorResponse_FieldPathArrayOfValues {
	fpaov := &RunHopMonitorResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return &RunHopMonitorResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponse_FieldTerminalPath: *fp, values: values.([]*RunHopMonitorResponse_JsonResponse)}
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		return &RunHopMonitorResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHopMonitorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunHopMonitorResponse_FieldSubPath struct {
	selector RunHopMonitorResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunHopMonitorResponse_FieldPath = (*RunHopMonitorResponse_FieldSubPath)(nil)

func (fps *RunHopMonitorResponse_FieldSubPath) Selector() RunHopMonitorResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunHopMonitorResponse_FieldSubPath) AsJsonResponseSubPath() (RunHopMonitorResponseJsonResponse_FieldPath, bool) {
	res, ok := fps.subPath.(RunHopMonitorResponseJsonResponse_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunHopMonitorResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunHopMonitorResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunHopMonitorResponse
func (fps *RunHopMonitorResponse_FieldSubPath) Get(source *RunHopMonitorResponse) (values []interface{}) {
	switch fps.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		values = append(values, fps.subPath.GetRaw(source.GetJsonResponse())...)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fps.selector))
	}
	return
}

func (fps *RunHopMonitorResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunHopMonitorResponse))
}

// GetSingle returns value of selected field from source RunHopMonitorResponse
func (fps *RunHopMonitorResponse_FieldSubPath) GetSingle(source *RunHopMonitorResponse) (interface{}, bool) {
	switch fps.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		if source.GetJsonResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fps.selector))
	}
}

func (fps *RunHopMonitorResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunHopMonitorResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunHopMonitorResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunHopMonitorResponse_FieldSubPath) ClearValue(item *RunHopMonitorResponse) {
	if item != nil {
		switch fps.selector {
		case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
			fps.subPath.ClearValueRaw(item.JsonResponse)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fps.selector))
		}
	}
}

func (fps *RunHopMonitorResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunHopMonitorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunHopMonitorResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunHopMonitorResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunHopMonitorResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithIValue(value interface{}) RunHopMonitorResponse_FieldPathValue {
	return &RunHopMonitorResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunHopMonitorResponse_FieldPathArrayOfValues {
	return &RunHopMonitorResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunHopMonitorResponse_FieldPathArrayItemValue {
	return &RunHopMonitorResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunHopMonitorResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunHopMonitorResponse_FieldPathValue allows storing values for RunHopMonitorResponse fields according to their type
type RunHopMonitorResponse_FieldPathValue interface {
	RunHopMonitorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHopMonitorResponse)
	CompareWith(*RunHopMonitorResponse) (cmp int, comparable bool)
}

func ParseRunHopMonitorResponse_FieldPathValue(pathStr, valueStr string) (RunHopMonitorResponse_FieldPathValue, error) {
	fp, err := ParseRunHopMonitorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHopMonitorResponse_FieldPathValue), nil
}

func MustParseRunHopMonitorResponse_FieldPathValue(pathStr, valueStr string) RunHopMonitorResponse_FieldPathValue {
	fpv, err := ParseRunHopMonitorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHopMonitorResponse_FieldTerminalPathValue struct {
	RunHopMonitorResponse_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorResponse_FieldPathValue = (*RunHopMonitorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunHopMonitorResponse' as interface{}
func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) AsJsonResponseValue() (*RunHopMonitorResponse_JsonResponse, bool) {
	res, ok := fpv.value.(*RunHopMonitorResponse_JsonResponse)
	return res, ok
}
func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) AsTextResponseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object RunHopMonitorResponse
func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) SetTo(target **RunHopMonitorResponse) {
	if *target == nil {
		*target = new(RunHopMonitorResponse)
	}
	switch fpv.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		(*target).JsonResponse = fpv.value.(*RunHopMonitorResponse_JsonResponse)
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		(*target).TextResponse = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHopMonitorResponse_FieldTerminalPathValue' with the value under path in 'RunHopMonitorResponse'.
func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) CompareWith(source *RunHopMonitorResponse) (int, bool) {
	switch fpv.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return 0, false
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		leftValue := fpv.value.(string)
		rightValue := source.GetTextResponse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHopMonitorResponse))
}

type RunHopMonitorResponse_FieldSubPathValue struct {
	RunHopMonitorResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunHopMonitorResponse_FieldPathValue = (*RunHopMonitorResponse_FieldSubPathValue)(nil)

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) AsJsonResponsePathValue() (RunHopMonitorResponseJsonResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RunHopMonitorResponseJsonResponse_FieldPathValue)
	return res, ok
}

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) SetTo(target **RunHopMonitorResponse) {
	if *target == nil {
		*target = new(RunHopMonitorResponse)
	}
	switch fpvs.Selector() {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		fpvs.subPathValue.(RunHopMonitorResponseJsonResponse_FieldPathValue).SetTo(&(*target).JsonResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) CompareWith(source *RunHopMonitorResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return fpvs.subPathValue.(RunHopMonitorResponseJsonResponse_FieldPathValue).CompareWith(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHopMonitorResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunHopMonitorResponse))
}

// RunHopMonitorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RunHopMonitorResponse according to their type
// Present only for array (repeated) types.
type RunHopMonitorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHopMonitorResponse_FieldPath
	ContainsValue(*RunHopMonitorResponse) bool
}

// ParseRunHopMonitorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHopMonitorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunHopMonitorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHopMonitorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHopMonitorResponse_FieldPathArrayItemValue), nil
}

func MustParseRunHopMonitorResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunHopMonitorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHopMonitorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHopMonitorResponse_FieldTerminalPathArrayItemValue struct {
	RunHopMonitorResponse_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorResponse_FieldPathArrayItemValue = (*RunHopMonitorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHopMonitorResponse as interface{}
func (fpaiv *RunHopMonitorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunHopMonitorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunHopMonitorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHopMonitorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHopMonitorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHopMonitorResponse'
func (fpaiv *RunHopMonitorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHopMonitorResponse) bool {
	slice := fpaiv.RunHopMonitorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunHopMonitorResponse_FieldSubPathArrayItemValue struct {
	RunHopMonitorResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunHopMonitorResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunHopMonitorResponse_FieldSubPathArrayItemValue) AsJsonResponsePathItemValue() (RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHopMonitorResponse'
func (fpaivs *RunHopMonitorResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunHopMonitorResponse) bool {
	switch fpaivs.Selector() {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		return fpaivs.subPathItemValue.(RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue).ContainsValue(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse: %d", fpaivs.Selector()))
	}
}

// RunHopMonitorResponse_FieldPathArrayOfValues allows storing slice of values for RunHopMonitorResponse fields according to their type
type RunHopMonitorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHopMonitorResponse_FieldPath
}

func ParseRunHopMonitorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHopMonitorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHopMonitorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHopMonitorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHopMonitorResponse_FieldPathArrayOfValues), nil
}

func MustParseRunHopMonitorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunHopMonitorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunHopMonitorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHopMonitorResponse_FieldTerminalPathArrayOfValues struct {
	RunHopMonitorResponse_FieldTerminalPath
	values interface{}
}

var _ RunHopMonitorResponse_FieldPathArrayOfValues = (*RunHopMonitorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHopMonitorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHopMonitorResponse_FieldPathSelectorJsonResponse:
		for _, v := range fpaov.values.([]*RunHopMonitorResponse_JsonResponse) {
			values = append(values, v)
		}
	case RunHopMonitorResponse_FieldPathSelectorTextResponse:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHopMonitorResponse_FieldTerminalPathArrayOfValues) AsJsonResponseArrayOfValues() ([]*RunHopMonitorResponse_JsonResponse, bool) {
	res, ok := fpaov.values.([]*RunHopMonitorResponse_JsonResponse)
	return res, ok
}
func (fpaov *RunHopMonitorResponse_FieldTerminalPathArrayOfValues) AsTextResponseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type RunHopMonitorResponse_FieldSubPathArrayOfValues struct {
	RunHopMonitorResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunHopMonitorResponse_FieldPathArrayOfValues = (*RunHopMonitorResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunHopMonitorResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunHopMonitorResponse_FieldSubPathArrayOfValues) AsJsonResponsePathArrayOfValues() (RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHopMonitorResponseJsonResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHopMonitorResponseJsonResponse_FieldPathSelector
	Get(source *RunHopMonitorResponse_JsonResponse) []interface{}
	GetSingle(source *RunHopMonitorResponse_JsonResponse) (interface{}, bool)
	ClearValue(item *RunHopMonitorResponse_JsonResponse)

	// Those methods build corresponding RunHopMonitorResponseJsonResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue
}

type RunHopMonitorResponseJsonResponse_FieldPathSelector int32

const (
	RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths     RunHopMonitorResponseJsonResponse_FieldPathSelector = 0
	RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats  RunHopMonitorResponseJsonResponse_FieldPathSelector = 1
	RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo   RunHopMonitorResponseJsonResponse_FieldPathSelector = 2
	RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion RunHopMonitorResponseJsonResponse_FieldPathSelector = 3
)

func (s RunHopMonitorResponseJsonResponse_FieldPathSelector) String() string {
	switch s {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return "paths"
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return "hop_stats"
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return "hop_info"
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		return "ip_version"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", s))
	}
}

func BuildRunHopMonitorResponseJsonResponse_FieldPath(fp gotenobject.RawFieldPath) (RunHopMonitorResponseJsonResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHopMonitorResponse_JsonResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "paths":
			return &RunHopMonitorResponseJsonResponse_FieldTerminalPath{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths}, nil
		case "hop_stats", "hopStats", "hop-stats":
			return &RunHopMonitorResponseJsonResponse_FieldTerminalPath{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats}, nil
		case "hop_info", "hopInfo", "hop-info":
			return &RunHopMonitorResponseJsonResponse_FieldTerminalPath{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &RunHopMonitorResponseJsonResponse_FieldTerminalPath{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion}, nil
		}
	} else {
		switch fp[0] {
		case "paths":
			if subpath, err := common.BuildPath_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunHopMonitorResponseJsonResponse_FieldSubPath{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths, subPath: subpath}, nil
			}
		case "hop_stats", "hopStats", "hop-stats":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object RunHopMonitorResponse_JsonResponse)", fp)
			}
			return &RunHopMonitorResponseJsonResponse_FieldPathMap{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats, key: fp[1]}, nil
		case "hop_info", "hopInfo", "hop-info":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object RunHopMonitorResponse_JsonResponse)", fp)
			}
			return &RunHopMonitorResponseJsonResponse_FieldPathMap{selector: RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHopMonitorResponse_JsonResponse", fp)
}

func ParseRunHopMonitorResponseJsonResponse_FieldPath(rawField string) (RunHopMonitorResponseJsonResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHopMonitorResponseJsonResponse_FieldPath(fp)
}

func MustParseRunHopMonitorResponseJsonResponse_FieldPath(rawField string) RunHopMonitorResponseJsonResponse_FieldPath {
	fp, err := ParseRunHopMonitorResponseJsonResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHopMonitorResponseJsonResponse_FieldTerminalPath struct {
	selector RunHopMonitorResponseJsonResponse_FieldPathSelector
}

var _ RunHopMonitorResponseJsonResponse_FieldPath = (*RunHopMonitorResponseJsonResponse_FieldTerminalPath)(nil)

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) Selector() RunHopMonitorResponseJsonResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHopMonitorResponse_JsonResponse
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) Get(source *RunHopMonitorResponse_JsonResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
			for _, value := range source.GetPaths() {
				values = append(values, value)
			}
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
			if source.HopStats != nil {
				values = append(values, source.HopStats)
			}
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
			if source.HopInfo != nil {
				values = append(values, source.HopInfo)
			}
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetSingle returns value pointed by specific field of from source RunHopMonitorResponse_JsonResponse
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) GetSingle(source *RunHopMonitorResponse_JsonResponse) (interface{}, bool) {
	switch fp.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		res := source.GetPaths()
		return res, res != nil
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		res := source.GetHopStats()
		return res, res != nil
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		res := source.GetHopInfo()
		return res, res != nil
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return ([]*common.Path)(nil)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return (map[string]*common.HopStat)(nil)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return (map[string]*common.HopInfo)(nil)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) ClearValue(item *RunHopMonitorResponse_JsonResponse) {
	if item != nil {
		switch fp.selector {
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
			item.Paths = nil
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
			item.HopStats = nil
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
			item.HopInfo = nil
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
		}
	}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHopMonitorResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithIValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathValue {
	switch fp.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathValue{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, value: value.([]*common.Path)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathValue{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, value: value.(map[string]*common.HopStat)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathValue{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, value: value.(map[string]*common.HopInfo)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathValue{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues {
	fpaov := &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, values: values.([][]*common.Path)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopStat)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopInfo)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return &RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue{RunHopMonitorResponseJsonResponse_FieldTerminalPath: *fp, value: value.(*common.Path)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHopMonitorResponseJsonResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type RunHopMonitorResponseJsonResponse_FieldPathMap struct {
	key      string
	selector RunHopMonitorResponseJsonResponse_FieldPathSelector
}

var _ RunHopMonitorResponseJsonResponse_FieldPath = (*RunHopMonitorResponseJsonResponse_FieldPathMap)(nil)

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) Selector() RunHopMonitorResponseJsonResponse_FieldPathSelector {
	return fpm.selector
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source RunHopMonitorResponse_JsonResponse
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) Get(source *RunHopMonitorResponse_JsonResponse) (values []interface{}) {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		if value, ok := source.GetHopStats()[fpm.key]; ok {
			values = append(values, value)
		}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		if value, ok := source.GetHopInfo()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
	return
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetSingle returns value by selected field map key from source RunHopMonitorResponse_JsonResponse
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) GetSingle(source *RunHopMonitorResponse_JsonResponse) (interface{}, bool) {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		res, ok := source.GetHopStats()[fpm.key]
		return res, ok
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		res, ok := source.GetHopInfo()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		var v *common.HopStat
		return v
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		var v *common.HopInfo
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) ClearValue(item *RunHopMonitorResponse_JsonResponse) {
	if item != nil {
		switch fpm.selector {
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
			delete(item.HopStats, fpm.key)
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
			delete(item.HopInfo, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
		}
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*RunHopMonitorResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return false
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithIValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathValue {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return &RunHopMonitorResponseJsonResponse_FieldPathMapValue{RunHopMonitorResponseJsonResponse_FieldPathMap: *fpm, value: value.(*common.HopStat)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return &RunHopMonitorResponseJsonResponse_FieldPathMapValue{RunHopMonitorResponseJsonResponse_FieldPathMap: *fpm, value: value.(*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithIArrayOfValues(values interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues {
	switch fpm.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return &RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues{RunHopMonitorResponseJsonResponse_FieldPathMap: *fpm, values: values.([]*common.HopStat)}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return &RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues{RunHopMonitorResponseJsonResponse_FieldPathMap: *fpm, values: values.([]*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpm.selector))
	}
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithIArrayItemValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *RunHopMonitorResponseJsonResponse_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type RunHopMonitorResponseJsonResponse_FieldSubPath struct {
	selector RunHopMonitorResponseJsonResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunHopMonitorResponseJsonResponse_FieldPath = (*RunHopMonitorResponseJsonResponse_FieldSubPath)(nil)

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) Selector() RunHopMonitorResponseJsonResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) AsPathsSubPath() (common.Path_FieldPath, bool) {
	res, ok := fps.subPath.(common.Path_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunHopMonitorResponse_JsonResponse
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) Get(source *RunHopMonitorResponse_JsonResponse) (values []interface{}) {
	switch fps.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		for _, item := range source.GetPaths() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fps.selector))
	}
	return
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetSingle returns value of selected field from source RunHopMonitorResponse_JsonResponse
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) GetSingle(source *RunHopMonitorResponse_JsonResponse) (interface{}, bool) {
	switch fps.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		if len(source.GetPaths()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPaths()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fps.selector))
	}
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunHopMonitorResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) ClearValue(item *RunHopMonitorResponse_JsonResponse) {
	if item != nil {
		switch fps.selector {
		case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
			for _, subItem := range item.Paths {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fps.selector))
		}
	}
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunHopMonitorResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunHopMonitorResponseJsonResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithIValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathValue {
	return &RunHopMonitorResponseJsonResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues {
	return &RunHopMonitorResponseJsonResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue {
	return &RunHopMonitorResponseJsonResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunHopMonitorResponseJsonResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunHopMonitorResponseJsonResponse_FieldPathValue allows storing values for JsonResponse fields according to their type
type RunHopMonitorResponseJsonResponse_FieldPathValue interface {
	RunHopMonitorResponseJsonResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHopMonitorResponse_JsonResponse)
	CompareWith(*RunHopMonitorResponse_JsonResponse) (cmp int, comparable bool)
}

func ParseRunHopMonitorResponseJsonResponse_FieldPathValue(pathStr, valueStr string) (RunHopMonitorResponseJsonResponse_FieldPathValue, error) {
	fp, err := ParseRunHopMonitorResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHopMonitorResponseJsonResponse_FieldPathValue), nil
}

func MustParseRunHopMonitorResponseJsonResponse_FieldPathValue(pathStr, valueStr string) RunHopMonitorResponseJsonResponse_FieldPathValue {
	fpv, err := ParseRunHopMonitorResponseJsonResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHopMonitorResponseJsonResponse_FieldTerminalPathValue struct {
	RunHopMonitorResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorResponseJsonResponse_FieldPathValue = (*RunHopMonitorResponseJsonResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'JsonResponse' as interface{}
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) AsPathsValue() ([]*common.Path, bool) {
	res, ok := fpv.value.([]*common.Path)
	return res, ok
}
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) AsHopStatsValue() (map[string]*common.HopStat, bool) {
	res, ok := fpv.value.(map[string]*common.HopStat)
	return res, ok
}
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) AsHopInfoValue() (map[string]*common.HopInfo, bool) {
	res, ok := fpv.value.(map[string]*common.HopInfo)
	return res, ok
}
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}

// SetTo stores value for selected field for object JsonResponse
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) SetTo(target **RunHopMonitorResponse_JsonResponse) {
	if *target == nil {
		*target = new(RunHopMonitorResponse_JsonResponse)
	}
	switch fpv.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		(*target).Paths = fpv.value.([]*common.Path)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		(*target).HopStats = fpv.value.(map[string]*common.HopStat)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		(*target).HopInfo = fpv.value.(map[string]*common.HopInfo)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorResponse_JsonResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHopMonitorResponseJsonResponse_FieldTerminalPathValue' with the value under path in 'RunHopMonitorResponse_JsonResponse'.
func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) CompareWith(source *RunHopMonitorResponse_JsonResponse) (int, bool) {
	switch fpv.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return 0, false
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return 0, false
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return 0, false
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *RunHopMonitorResponseJsonResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHopMonitorResponse_JsonResponse))
}

type RunHopMonitorResponseJsonResponse_FieldPathMapValue struct {
	RunHopMonitorResponseJsonResponse_FieldPathMap
	value interface{}
}

var _ RunHopMonitorResponseJsonResponse_FieldPathValue = (*RunHopMonitorResponseJsonResponse_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in JsonResponse as interface{}
func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) AsHopStatsElementValue() (*common.HopStat, bool) {
	res, ok := fpmv.value.(*common.HopStat)
	return res, ok
}
func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) AsHopInfoElementValue() (*common.HopInfo, bool) {
	res, ok := fpmv.value.(*common.HopInfo)
	return res, ok
}

// SetTo stores value for selected field in JsonResponse
func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) SetTo(target **RunHopMonitorResponse_JsonResponse) {
	if *target == nil {
		*target = new(RunHopMonitorResponse_JsonResponse)
	}
	switch fpmv.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		if (*target).HopStats == nil {
			(*target).HopStats = make(map[string]*common.HopStat)
		}
		(*target).HopStats[fpmv.key] = fpmv.value.(*common.HopStat)
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		if (*target).HopInfo == nil {
			(*target).HopInfo = make(map[string]*common.HopInfo)
		}
		(*target).HopInfo[fpmv.key] = fpmv.value.(*common.HopInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpmv.selector))
	}
}

func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorResponse_JsonResponse)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHopMonitorResponseJsonResponse_FieldPathMapValue' with the value under path in 'RunHopMonitorResponse_JsonResponse'.
func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) CompareWith(source *RunHopMonitorResponse_JsonResponse) (int, bool) {
	switch fpmv.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		return 0, false
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpmv.selector))
	}
}

func (fpmv *RunHopMonitorResponseJsonResponse_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*RunHopMonitorResponse_JsonResponse))
}

type RunHopMonitorResponseJsonResponse_FieldSubPathValue struct {
	RunHopMonitorResponseJsonResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunHopMonitorResponseJsonResponse_FieldPathValue = (*RunHopMonitorResponseJsonResponse_FieldSubPathValue)(nil)

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) AsPathsPathValue() (common.Path_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Path_FieldPathValue)
	return res, ok
}

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) SetTo(target **RunHopMonitorResponse_JsonResponse) {
	if *target == nil {
		*target = new(RunHopMonitorResponse_JsonResponse)
	}
	switch fpvs.Selector() {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHopMonitorResponse_JsonResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) CompareWith(source *RunHopMonitorResponse_JsonResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHopMonitorResponseJsonResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunHopMonitorResponse_JsonResponse))
}

// RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for JsonResponse according to their type
// Present only for array (repeated) types.
type RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHopMonitorResponseJsonResponse_FieldPath
	ContainsValue(*RunHopMonitorResponse_JsonResponse) bool
}

// ParseRunHopMonitorResponseJsonResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHopMonitorResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHopMonitorResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue), nil
}

func MustParseRunHopMonitorResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHopMonitorResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue struct {
	RunHopMonitorResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ RunHopMonitorResponseJsonResponse_FieldPathArrayItemValue = (*RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHopMonitorResponse_JsonResponse as interface{}
func (fpaiv *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue) AsPathsItemValue() (*common.Path, bool) {
	res, ok := fpaiv.value.(*common.Path)
	return res, ok
}

func (fpaiv *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunHopMonitorResponse_JsonResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHopMonitorResponse_JsonResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'JsonResponse'
func (fpaiv *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHopMonitorResponse_JsonResponse) bool {
	slice := fpaiv.RunHopMonitorResponseJsonResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunHopMonitorResponseJsonResponse_FieldSubPathArrayItemValue struct {
	RunHopMonitorResponseJsonResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunHopMonitorResponseJsonResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunHopMonitorResponseJsonResponse_FieldSubPathArrayItemValue) AsPathsPathItemValue() (common.Path_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Path_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'JsonResponse'
func (fpaivs *RunHopMonitorResponseJsonResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunHopMonitorResponse_JsonResponse) bool {
	switch fpaivs.Selector() {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for RunHopMonitorResponse_JsonResponse: %d", fpaivs.Selector()))
	}
}

// RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues allows storing slice of values for JsonResponse fields according to their type
type RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHopMonitorResponseJsonResponse_FieldPath
}

func ParseRunHopMonitorResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHopMonitorResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues), nil
}

func MustParseRunHopMonitorResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunHopMonitorResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues struct {
	RunHopMonitorResponseJsonResponse_FieldTerminalPath
	values interface{}
}

var _ RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues = (*RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorPaths:
		for _, v := range fpaov.values.([][]*common.Path) {
			values = append(values, v)
		}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		for _, v := range fpaov.values.([]map[string]*common.HopStat) {
			values = append(values, v)
		}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		for _, v := range fpaov.values.([]map[string]*common.HopInfo) {
			values = append(values, v)
		}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues) AsPathsArrayOfValues() ([][]*common.Path, bool) {
	res, ok := fpaov.values.([][]*common.Path)
	return res, ok
}
func (fpaov *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues) AsHopStatsArrayOfValues() ([]map[string]*common.HopStat, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopStat)
	return res, ok
}
func (fpaov *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues) AsHopInfoArrayOfValues() ([]map[string]*common.HopInfo, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopInfo)
	return res, ok
}
func (fpaov *RunHopMonitorResponseJsonResponse_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}

type RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues struct {
	RunHopMonitorResponseJsonResponse_FieldPathMap
	values interface{}
}

var _ RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues = (*RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues)(nil)

func (fpmaov *RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopStats:
		for _, v := range fpmaov.values.([]*common.HopStat) {
			values = append(values, v)
		}
	case RunHopMonitorResponseJsonResponse_FieldPathSelectorHopInfo:
		for _, v := range fpmaov.values.([]*common.HopInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues) AsHopStatsArrayOfElementValues() ([]*common.HopStat, bool) {
	res, ok := fpmaov.values.([]*common.HopStat)
	return res, ok
}
func (fpmaov *RunHopMonitorResponseJsonResponse_FieldPathMapArrayOfValues) AsHopInfoArrayOfElementValues() ([]*common.HopInfo, bool) {
	res, ok := fpmaov.values.([]*common.HopInfo)
	return res, ok
}

type RunHopMonitorResponseJsonResponse_FieldSubPathArrayOfValues struct {
	RunHopMonitorResponseJsonResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunHopMonitorResponseJsonResponse_FieldPathArrayOfValues = (*RunHopMonitorResponseJsonResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunHopMonitorResponseJsonResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunHopMonitorResponseJsonResponse_FieldSubPathArrayOfValues) AsPathsPathArrayOfValues() (common.Path_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Path_FieldPathArrayOfValues)
	return res, ok
}
