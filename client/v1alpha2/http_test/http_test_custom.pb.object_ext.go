// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_test_custom.proto
// DO NOT EDIT!!!

package http_test_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (o *RunHTTPTestRequest) GotenObjectExt() {}

func (o *RunHTTPTestRequest) MakeFullFieldMask() *RunHTTPTestRequest_FieldMask {
	return FullRunHTTPTestRequest_FieldMask()
}

func (o *RunHTTPTestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunHTTPTestRequest_FieldMask()
}

func (o *RunHTTPTestRequest) MakeDiffFieldMask(other *RunHTTPTestRequest) *RunHTTPTestRequest_FieldMask {
	if o == nil && other == nil {
		return &RunHTTPTestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunHTTPTestRequest_FieldMask()
	}

	res := &RunHTTPTestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorName})
	}
	if o.GetUrl() != other.GetUrl() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrl})
	}

	if len(o.GetRequestHeaders()) == len(other.GetRequestHeaders()) {
		for i, lValue := range o.GetRequestHeaders() {
			rValue := other.GetRequestHeaders()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestHeaders})
	}
	if o.GetRequestMethod() != other.GetRequestMethod() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestMethod})
	}
	if !proto.Equal(o.GetTimeout(), other.GetTimeout()) {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorTimeout})
	}
	if o.GetRequestBody() != other.GetRequestBody() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestBody})
	}
	if o.GetAuthenticationMethod() != other.GetAuthenticationMethod() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod})
	}

	if len(o.GetUrlFormEncodedBody()) == len(other.GetUrlFormEncodedBody()) {
		for i, lValue := range o.GetUrlFormEncodedBody() {
			rValue := other.GetUrlFormEncodedBody()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody})
	}
	if o.GetUsername() != other.GetUsername() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUsername})
	}
	if o.GetPassword() != other.GetPassword() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorPassword})
	}
	if o.GetSourceIp() != other.GetSourceIp() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorSourceIp})
	}
	if o.GetOutputFormat() != other.GetOutputFormat() {
		res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorOutputFormat})
	}
	return res
}

func (o *RunHTTPTestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunHTTPTestRequest))
}

func (o *RunHTTPTestRequest) Clone() *RunHTTPTestRequest {
	if o == nil {
		return nil
	}
	result := &RunHTTPTestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Url = o.Url
	result.RequestHeaders = map[string]string{}
	for key, sourceValue := range o.RequestHeaders {
		result.RequestHeaders[key] = sourceValue
	}
	result.RequestMethod = o.RequestMethod
	result.Timeout = proto.Clone(o.Timeout).(*duration.Duration)
	result.RequestBody = o.RequestBody
	result.AuthenticationMethod = o.AuthenticationMethod
	result.UrlFormEncodedBody = map[string]*RunHTTPTestRequest_StringArray{}
	for key, sourceValue := range o.UrlFormEncodedBody {
		result.UrlFormEncodedBody[key] = sourceValue.Clone()
	}
	result.Username = o.Username
	result.Password = o.Password
	result.SourceIp = o.SourceIp
	result.OutputFormat = o.OutputFormat
	return result
}

func (o *RunHTTPTestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunHTTPTestRequest) Merge(source *RunHTTPTestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Url = source.GetUrl()
	if source.GetRequestHeaders() != nil {
		if o.RequestHeaders == nil {
			o.RequestHeaders = make(map[string]string, len(source.GetRequestHeaders()))
		}
		for key, sourceValue := range source.GetRequestHeaders() {
			o.RequestHeaders[key] = sourceValue
		}
	}
	o.RequestMethod = source.GetRequestMethod()
	if source.GetTimeout() != nil {
		if o.Timeout == nil {
			o.Timeout = new(duration.Duration)
		}
		proto.Merge(o.Timeout, source.GetTimeout())
	}
	o.RequestBody = source.GetRequestBody()
	o.AuthenticationMethod = source.GetAuthenticationMethod()
	if source.GetUrlFormEncodedBody() != nil {
		if o.UrlFormEncodedBody == nil {
			o.UrlFormEncodedBody = make(map[string]*RunHTTPTestRequest_StringArray, len(source.GetUrlFormEncodedBody()))
		}
		for key, sourceValue := range source.GetUrlFormEncodedBody() {
			if sourceValue != nil {
				if o.UrlFormEncodedBody[key] == nil {
					o.UrlFormEncodedBody[key] = new(RunHTTPTestRequest_StringArray)
				}
				o.UrlFormEncodedBody[key].Merge(sourceValue)
			}
		}
	}
	o.Username = source.GetUsername()
	o.Password = source.GetPassword()
	o.SourceIp = source.GetSourceIp()
	o.OutputFormat = source.GetOutputFormat()
}

func (o *RunHTTPTestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunHTTPTestRequest))
}

func (o *RunHTTPTestRequest_StringArray) GotenObjectExt() {}

func (o *RunHTTPTestRequest_StringArray) MakeFullFieldMask() *RunHTTPTestRequest_StringArray_FieldMask {
	return FullRunHTTPTestRequest_StringArray_FieldMask()
}

func (o *RunHTTPTestRequest_StringArray) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunHTTPTestRequest_StringArray_FieldMask()
}

func (o *RunHTTPTestRequest_StringArray) MakeDiffFieldMask(other *RunHTTPTestRequest_StringArray) *RunHTTPTestRequest_StringArray_FieldMask {
	if o == nil && other == nil {
		return &RunHTTPTestRequest_StringArray_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunHTTPTestRequest_StringArray_FieldMask()
	}

	res := &RunHTTPTestRequest_StringArray_FieldMask{}

	if len(o.GetValue()) == len(other.GetValue()) {
		for i, lValue := range o.GetValue() {
			rValue := other.GetValue()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RunHTTPTestRequestStringArray_FieldTerminalPath{selector: RunHTTPTestRequestStringArray_FieldPathSelectorValue})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RunHTTPTestRequestStringArray_FieldTerminalPath{selector: RunHTTPTestRequestStringArray_FieldPathSelectorValue})
	}
	return res
}

func (o *RunHTTPTestRequest_StringArray) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunHTTPTestRequest_StringArray))
}

func (o *RunHTTPTestRequest_StringArray) Clone() *RunHTTPTestRequest_StringArray {
	if o == nil {
		return nil
	}
	result := &RunHTTPTestRequest_StringArray{}
	result.Value = make([]string, len(o.Value))
	for i, sourceValue := range o.Value {
		result.Value[i] = sourceValue
	}
	return result
}

func (o *RunHTTPTestRequest_StringArray) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunHTTPTestRequest_StringArray) Merge(source *RunHTTPTestRequest_StringArray) {
	for _, sourceValue := range source.GetValue() {
		exists := false
		for _, currentValue := range o.Value {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Value = append(o.Value, newDstElement)
		}
	}

}

func (o *RunHTTPTestRequest_StringArray) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunHTTPTestRequest_StringArray))
}

func (o *RunHTTPTestResponse) GotenObjectExt() {}

func (o *RunHTTPTestResponse) MakeFullFieldMask() *RunHTTPTestResponse_FieldMask {
	return FullRunHTTPTestResponse_FieldMask()
}

func (o *RunHTTPTestResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunHTTPTestResponse_FieldMask()
}

func (o *RunHTTPTestResponse) MakeDiffFieldMask(other *RunHTTPTestResponse) *RunHTTPTestResponse_FieldMask {
	if o == nil && other == nil {
		return &RunHTTPTestResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunHTTPTestResponse_FieldMask()
	}

	res := &RunHTTPTestResponse_FieldMask{}
	if o.GetTextResponse() != other.GetTextResponse() {
		res.Paths = append(res.Paths, &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorTextResponse})
	}
	{
		subMask := o.GetJsonResponse().MakeDiffFieldMask(other.GetJsonResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorJsonResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RunHTTPTestResponse_FieldSubPath{selector: RunHTTPTestResponse_FieldPathSelectorJsonResponse, subPath: subpath})
			}
		}
	}
	return res
}

func (o *RunHTTPTestResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunHTTPTestResponse))
}

func (o *RunHTTPTestResponse) Clone() *RunHTTPTestResponse {
	if o == nil {
		return nil
	}
	result := &RunHTTPTestResponse{}
	result.TextResponse = o.TextResponse
	result.JsonResponse = o.JsonResponse.Clone()
	return result
}

func (o *RunHTTPTestResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunHTTPTestResponse) Merge(source *RunHTTPTestResponse) {
	o.TextResponse = source.GetTextResponse()
	if source.GetJsonResponse() != nil {
		if o.JsonResponse == nil {
			o.JsonResponse = new(RunHTTPTestResponse_JsonResponse)
		}
		o.JsonResponse.Merge(source.GetJsonResponse())
	}
}

func (o *RunHTTPTestResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunHTTPTestResponse))
}

func (o *RunHTTPTestResponse_JsonResponse) GotenObjectExt() {}

func (o *RunHTTPTestResponse_JsonResponse) MakeFullFieldMask() *RunHTTPTestResponse_JsonResponse_FieldMask {
	return FullRunHTTPTestResponse_JsonResponse_FieldMask()
}

func (o *RunHTTPTestResponse_JsonResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunHTTPTestResponse_JsonResponse_FieldMask()
}

func (o *RunHTTPTestResponse_JsonResponse) MakeDiffFieldMask(other *RunHTTPTestResponse_JsonResponse) *RunHTTPTestResponse_JsonResponse_FieldMask {
	if o == nil && other == nil {
		return &RunHTTPTestResponse_JsonResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunHTTPTestResponse_JsonResponse_FieldMask()
	}

	res := &RunHTTPTestResponse_JsonResponse_FieldMask{}
	if o.GetResponseCode() != other.GetResponseCode() {
		res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode})
	}

	if len(o.GetResponseHeaders()) == len(other.GetResponseHeaders()) {
		for i, lValue := range o.GetResponseHeaders() {
			rValue := other.GetResponseHeaders()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders})
	}
	if string(o.GetResponseBody()) != string(other.GetResponseBody()) {
		res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody})
	}
	return res
}

func (o *RunHTTPTestResponse_JsonResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunHTTPTestResponse_JsonResponse))
}

func (o *RunHTTPTestResponse_JsonResponse) Clone() *RunHTTPTestResponse_JsonResponse {
	if o == nil {
		return nil
	}
	result := &RunHTTPTestResponse_JsonResponse{}
	result.ResponseCode = o.ResponseCode
	result.ResponseHeaders = make([]*RunHTTPTestResponse_JsonResponse_Header, len(o.ResponseHeaders))
	for i, sourceValue := range o.ResponseHeaders {
		result.ResponseHeaders[i] = sourceValue.Clone()
	}
	result.ResponseBody = make([]byte, len(o.ResponseBody))
	for i, bt := range o.ResponseBody {
		result.ResponseBody[i] = bt
	}
	return result
}

func (o *RunHTTPTestResponse_JsonResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunHTTPTestResponse_JsonResponse) Merge(source *RunHTTPTestResponse_JsonResponse) {
	o.ResponseCode = source.GetResponseCode()
	for _, sourceValue := range source.GetResponseHeaders() {
		exists := false
		for _, currentValue := range o.ResponseHeaders {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *RunHTTPTestResponse_JsonResponse_Header
			if sourceValue != nil {
				newDstElement = new(RunHTTPTestResponse_JsonResponse_Header)
				newDstElement.Merge(sourceValue)
			}
			o.ResponseHeaders = append(o.ResponseHeaders, newDstElement)
		}
	}

	o.ResponseBody = make([]byte, len(source.GetResponseBody()))
	for i, bt := range source.GetResponseBody() {
		o.ResponseBody[i] = bt
	}
}

func (o *RunHTTPTestResponse_JsonResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunHTTPTestResponse_JsonResponse))
}

func (o *RunHTTPTestResponse_JsonResponse_Header) GotenObjectExt() {}

func (o *RunHTTPTestResponse_JsonResponse_Header) MakeFullFieldMask() *RunHTTPTestResponse_JsonResponse_Header_FieldMask {
	return FullRunHTTPTestResponse_JsonResponse_Header_FieldMask()
}

func (o *RunHTTPTestResponse_JsonResponse_Header) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunHTTPTestResponse_JsonResponse_Header_FieldMask()
}

func (o *RunHTTPTestResponse_JsonResponse_Header) MakeDiffFieldMask(other *RunHTTPTestResponse_JsonResponse_Header) *RunHTTPTestResponse_JsonResponse_Header_FieldMask {
	if o == nil && other == nil {
		return &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunHTTPTestResponse_JsonResponse_Header_FieldMask()
	}

	res := &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey})
	}

	if len(o.GetValues()) == len(other.GetValues()) {
		for i, lValue := range o.GetValues() {
			rValue := other.GetValues()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues})
	}
	return res
}

func (o *RunHTTPTestResponse_JsonResponse_Header) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunHTTPTestResponse_JsonResponse_Header))
}

func (o *RunHTTPTestResponse_JsonResponse_Header) Clone() *RunHTTPTestResponse_JsonResponse_Header {
	if o == nil {
		return nil
	}
	result := &RunHTTPTestResponse_JsonResponse_Header{}
	result.Key = o.Key
	result.Values = make([]string, len(o.Values))
	for i, sourceValue := range o.Values {
		result.Values[i] = sourceValue
	}
	return result
}

func (o *RunHTTPTestResponse_JsonResponse_Header) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunHTTPTestResponse_JsonResponse_Header) Merge(source *RunHTTPTestResponse_JsonResponse_Header) {
	o.Key = source.GetKey()
	for _, sourceValue := range source.GetValues() {
		exists := false
		for _, currentValue := range o.Values {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Values = append(o.Values, newDstElement)
		}
	}

}

func (o *RunHTTPTestResponse_JsonResponse_Header) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunHTTPTestResponse_JsonResponse_Header))
}
