// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_test_custom.proto
// DO NOT EDIT!!!

package http_test_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHTTPTestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHTTPTestRequest_FieldPathSelector
	Get(source *RunHTTPTestRequest) []interface{}
	GetSingle(source *RunHTTPTestRequest) (interface{}, bool)
	ClearValue(item *RunHTTPTestRequest)

	// Those methods build corresponding RunHTTPTestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHTTPTestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHTTPTestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHTTPTestRequest_FieldPathArrayItemValue
}

type RunHTTPTestRequest_FieldPathSelector int32

const (
	RunHTTPTestRequest_FieldPathSelectorName                 RunHTTPTestRequest_FieldPathSelector = 0
	RunHTTPTestRequest_FieldPathSelectorUrl                  RunHTTPTestRequest_FieldPathSelector = 1
	RunHTTPTestRequest_FieldPathSelectorRequestHeaders       RunHTTPTestRequest_FieldPathSelector = 2
	RunHTTPTestRequest_FieldPathSelectorRequestMethod        RunHTTPTestRequest_FieldPathSelector = 3
	RunHTTPTestRequest_FieldPathSelectorTimeout              RunHTTPTestRequest_FieldPathSelector = 4
	RunHTTPTestRequest_FieldPathSelectorRequestBody          RunHTTPTestRequest_FieldPathSelector = 5
	RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod RunHTTPTestRequest_FieldPathSelector = 6
	RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody   RunHTTPTestRequest_FieldPathSelector = 7
	RunHTTPTestRequest_FieldPathSelectorUsername             RunHTTPTestRequest_FieldPathSelector = 8
	RunHTTPTestRequest_FieldPathSelectorPassword             RunHTTPTestRequest_FieldPathSelector = 9
	RunHTTPTestRequest_FieldPathSelectorSourceIp             RunHTTPTestRequest_FieldPathSelector = 10
	RunHTTPTestRequest_FieldPathSelectorResponseFornat       RunHTTPTestRequest_FieldPathSelector = 11
)

func (s RunHTTPTestRequest_FieldPathSelector) String() string {
	switch s {
	case RunHTTPTestRequest_FieldPathSelectorName:
		return "name"
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		return "url"
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return "request_headers"
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		return "request_method"
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		return "timeout"
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		return "request_body"
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		return "authentication_method"
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return "url_form_encoded_body"
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		return "username"
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		return "password"
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		return "source_ip"
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		return "response_fornat"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", s))
	}
}

func BuildRunHTTPTestRequest_FieldPath(fp gotenobject.RawFieldPath) (RunHTTPTestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHTTPTestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorName}, nil
		case "url":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrl}, nil
		case "request_headers", "requestHeaders", "request-headers":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestHeaders}, nil
		case "request_method", "requestMethod", "request-method":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestMethod}, nil
		case "timeout":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorTimeout}, nil
		case "request_body", "requestBody", "request-body":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestBody}, nil
		case "authentication_method", "authenticationMethod", "authentication-method":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod}, nil
		case "url_form_encoded_body", "urlFormEncodedBody", "url-form-encoded-body":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody}, nil
		case "username":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUsername}, nil
		case "password":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorPassword}, nil
		case "source_ip", "sourceIp", "source-ip":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorSourceIp}, nil
		case "response_fornat", "responseFornat", "response-fornat":
			return &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorResponseFornat}, nil
		}
	} else {
		switch fp[0] {
		case "request_headers", "requestHeaders", "request-headers":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object RunHTTPTestRequest)", fp)
			}
			return &RunHTTPTestRequest_FieldPathMap{selector: RunHTTPTestRequest_FieldPathSelectorRequestHeaders, key: fp[1]}, nil
		case "url_form_encoded_body", "urlFormEncodedBody", "url-form-encoded-body":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object RunHTTPTestRequest)", fp)
			}
			return &RunHTTPTestRequest_FieldPathMap{selector: RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHTTPTestRequest", fp)
}

func ParseRunHTTPTestRequest_FieldPath(rawField string) (RunHTTPTestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHTTPTestRequest_FieldPath(fp)
}

func MustParseRunHTTPTestRequest_FieldPath(rawField string) RunHTTPTestRequest_FieldPath {
	fp, err := ParseRunHTTPTestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHTTPTestRequest_FieldTerminalPath struct {
	selector RunHTTPTestRequest_FieldPathSelector
}

var _ RunHTTPTestRequest_FieldPath = (*RunHTTPTestRequest_FieldTerminalPath)(nil)

func (fp *RunHTTPTestRequest_FieldTerminalPath) Selector() RunHTTPTestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHTTPTestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHTTPTestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHTTPTestRequest
func (fp *RunHTTPTestRequest_FieldTerminalPath) Get(source *RunHTTPTestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHTTPTestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case RunHTTPTestRequest_FieldPathSelectorUrl:
			values = append(values, source.Url)
		case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
			values = append(values, source.RequestHeaders)
		case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
			values = append(values, source.RequestMethod)
		case RunHTTPTestRequest_FieldPathSelectorTimeout:
			if source.Timeout != nil {
				values = append(values, source.Timeout)
			}
		case RunHTTPTestRequest_FieldPathSelectorRequestBody:
			values = append(values, source.RequestBody)
		case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
			values = append(values, source.AuthenticationMethod)
		case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
			if source.UrlFormEncodedBody != nil {
				values = append(values, source.UrlFormEncodedBody)
			}
		case RunHTTPTestRequest_FieldPathSelectorUsername:
			values = append(values, source.Username)
		case RunHTTPTestRequest_FieldPathSelectorPassword:
			values = append(values, source.Password)
		case RunHTTPTestRequest_FieldPathSelectorSourceIp:
			values = append(values, source.SourceIp)
		case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
			values = append(values, source.ResponseFornat)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHTTPTestRequest))
}

// GetSingle returns value pointed by specific field of from source RunHTTPTestRequest
func (fp *RunHTTPTestRequest_FieldTerminalPath) GetSingle(source *RunHTTPTestRequest) (interface{}, bool) {
	switch fp.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		return source.GetUrl(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		res := source.GetRequestHeaders()
		return res, res != nil
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		return source.GetRequestMethod(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		res := source.GetTimeout()
		return res, res != nil
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		return source.GetRequestBody(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		return source.GetAuthenticationMethod(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		res := source.GetUrlFormEncodedBody()
		return res, res != nil
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		return source.GetUsername(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		return source.GetPassword(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		return source.GetSourceIp(), source != nil
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		return source.GetResponseFornat(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHTTPTestRequest))
}

// GetDefault returns a default value of the field type
func (fp *RunHTTPTestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		return ""
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return (map[string]string)(nil)
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		return common.HTTPRequestMethod_GET
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		return (*duration.Duration)(nil)
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		return ""
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		return common.AuthenticationMethod_NO_AUTH
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return (map[string]*RunHTTPTestRequest_StringArray)(nil)
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		return ""
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		return ""
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		return ""
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		return RunHTTPTestRequest_JSON
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) ClearValue(item *RunHTTPTestRequest) {
	if item != nil {
		switch fp.selector {
		case RunHTTPTestRequest_FieldPathSelectorName:
			item.Name = nil
		case RunHTTPTestRequest_FieldPathSelectorUrl:
			item.Url = ""
		case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
			item.RequestHeaders = nil
		case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
			item.RequestMethod = common.HTTPRequestMethod_GET
		case RunHTTPTestRequest_FieldPathSelectorTimeout:
			item.Timeout = nil
		case RunHTTPTestRequest_FieldPathSelectorRequestBody:
			item.RequestBody = ""
		case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
			item.AuthenticationMethod = common.AuthenticationMethod_NO_AUTH
		case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
			item.UrlFormEncodedBody = nil
		case RunHTTPTestRequest_FieldPathSelectorUsername:
			item.Username = ""
		case RunHTTPTestRequest_FieldPathSelectorPassword:
			item.Password = ""
		case RunHTTPTestRequest_FieldPathSelectorSourceIp:
			item.SourceIp = ""
		case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
			item.ResponseFornat = RunHTTPTestRequest_JSON
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
		}
	}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHTTPTestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHTTPTestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHTTPTestRequest_FieldPathSelectorName ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorUrl ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorRequestHeaders ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorRequestMethod ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorTimeout ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorRequestBody ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorUsername ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorPassword ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorSourceIp ||
		fp.selector == RunHTTPTestRequest_FieldPathSelectorResponseFornat
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithIValue(value interface{}) RunHTTPTestRequest_FieldPathValue {
	switch fp.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(common.HTTPRequestMethod)}
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(common.AuthenticationMethod)}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(map[string]*RunHTTPTestRequest_StringArray)}
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		return &RunHTTPTestRequest_FieldTerminalPathValue{RunHTTPTestRequest_FieldTerminalPath: *fp, value: value.(RunHTTPTestRequest_ResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHTTPTestRequest_FieldPathArrayOfValues {
	fpaov := &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]common.HTTPRequestMethod)}
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]common.AuthenticationMethod)}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]map[string]*RunHTTPTestRequest_StringArray)}
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		return &RunHTTPTestRequest_FieldTerminalPathArrayOfValues{RunHTTPTestRequest_FieldTerminalPath: *fp, values: values.([]RunHTTPTestRequest_ResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHTTPTestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type RunHTTPTestRequest_FieldPathMap struct {
	key      string
	selector RunHTTPTestRequest_FieldPathSelector
}

var _ RunHTTPTestRequest_FieldPath = (*RunHTTPTestRequest_FieldPathMap)(nil)

func (fpm *RunHTTPTestRequest_FieldPathMap) Selector() RunHTTPTestRequest_FieldPathSelector {
	return fpm.selector
}

func (fpm *RunHTTPTestRequest_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *RunHTTPTestRequest_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *RunHTTPTestRequest_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source RunHTTPTestRequest
func (fpm *RunHTTPTestRequest_FieldPathMap) Get(source *RunHTTPTestRequest) (values []interface{}) {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		if value, ok := source.GetRequestHeaders()[fpm.key]; ok {
			values = append(values, value)
		}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		if value, ok := source.GetUrlFormEncodedBody()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
	return
}

func (fpm *RunHTTPTestRequest_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*RunHTTPTestRequest))
}

// GetSingle returns value by selected field map key from source RunHTTPTestRequest
func (fpm *RunHTTPTestRequest_FieldPathMap) GetSingle(source *RunHTTPTestRequest) (interface{}, bool) {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		res, ok := source.GetRequestHeaders()[fpm.key]
		return res, ok
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		res, ok := source.GetUrlFormEncodedBody()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*RunHTTPTestRequest))
}

// GetDefault returns a default value of the field type
func (fpm *RunHTTPTestRequest_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		var v string
		return v
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		var v *RunHTTPTestRequest_StringArray
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) ClearValue(item *RunHTTPTestRequest) {
	if item != nil {
		switch fpm.selector {
		case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
			delete(item.RequestHeaders, fpm.key)
		case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
			delete(item.UrlFormEncodedBody, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
		}
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*RunHTTPTestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fpm *RunHTTPTestRequest_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return true
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithIValue(value interface{}) RunHTTPTestRequest_FieldPathValue {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return &RunHTTPTestRequest_FieldPathMapValue{RunHTTPTestRequest_FieldPathMap: *fpm, value: value.(string)}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return &RunHTTPTestRequest_FieldPathMapValue{RunHTTPTestRequest_FieldPathMap: *fpm, value: value.(*RunHTTPTestRequest_StringArray)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithIArrayOfValues(values interface{}) RunHTTPTestRequest_FieldPathArrayOfValues {
	switch fpm.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return &RunHTTPTestRequest_FieldPathMapArrayOfValues{RunHTTPTestRequest_FieldPathMap: *fpm, values: values.([]string)}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return &RunHTTPTestRequest_FieldPathMapArrayOfValues{RunHTTPTestRequest_FieldPathMap: *fpm, values: values.([]*RunHTTPTestRequest_StringArray)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpm.selector))
	}
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithIArrayItemValue(value interface{}) RunHTTPTestRequest_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *RunHTTPTestRequest_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// RunHTTPTestRequest_FieldPathValue allows storing values for RunHTTPTestRequest fields according to their type
type RunHTTPTestRequest_FieldPathValue interface {
	RunHTTPTestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHTTPTestRequest)
	CompareWith(*RunHTTPTestRequest) (cmp int, comparable bool)
}

func ParseRunHTTPTestRequest_FieldPathValue(pathStr, valueStr string) (RunHTTPTestRequest_FieldPathValue, error) {
	fp, err := ParseRunHTTPTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHTTPTestRequest_FieldPathValue), nil
}

func MustParseRunHTTPTestRequest_FieldPathValue(pathStr, valueStr string) RunHTTPTestRequest_FieldPathValue {
	fpv, err := ParseRunHTTPTestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHTTPTestRequest_FieldTerminalPathValue struct {
	RunHTTPTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestRequest_FieldPathValue = (*RunHTTPTestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunHTTPTestRequest' as interface{}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsRequestHeadersValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsRequestMethodValue() (common.HTTPRequestMethod, bool) {
	res, ok := fpv.value.(common.HTTPRequestMethod)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsTimeoutValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsRequestBodyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsAuthenticationMethodValue() (common.AuthenticationMethod, bool) {
	res, ok := fpv.value.(common.AuthenticationMethod)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsUrlFormEncodedBodyValue() (map[string]*RunHTTPTestRequest_StringArray, bool) {
	res, ok := fpv.value.(map[string]*RunHTTPTestRequest_StringArray)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsUsernameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsSourceIpValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) AsResponseFornatValue() (RunHTTPTestRequest_ResponseFormat, bool) {
	res, ok := fpv.value.(RunHTTPTestRequest_ResponseFormat)
	return res, ok
}

// SetTo stores value for selected field for object RunHTTPTestRequest
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) SetTo(target **RunHTTPTestRequest) {
	if *target == nil {
		*target = new(RunHTTPTestRequest)
	}
	switch fpv.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		(*target).Url = fpv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		(*target).RequestHeaders = fpv.value.(map[string]string)
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		(*target).RequestMethod = fpv.value.(common.HTTPRequestMethod)
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		(*target).Timeout = fpv.value.(*duration.Duration)
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		(*target).RequestBody = fpv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		(*target).AuthenticationMethod = fpv.value.(common.AuthenticationMethod)
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		(*target).UrlFormEncodedBody = fpv.value.(map[string]*RunHTTPTestRequest_StringArray)
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		(*target).Username = fpv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		(*target).Password = fpv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		(*target).SourceIp = fpv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		(*target).ResponseFornat = fpv.value.(RunHTTPTestRequest_ResponseFormat)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestRequest_FieldTerminalPathValue' with the value under path in 'RunHTTPTestRequest'.
func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) CompareWith(source *RunHTTPTestRequest) (int, bool) {
	switch fpv.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		return 0, false
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		leftValue := fpv.value.(common.HTTPRequestMethod)
		rightValue := source.GetRequestMethod()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetTimeout()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		leftValue := fpv.value.(string)
		rightValue := source.GetRequestBody()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		leftValue := fpv.value.(common.AuthenticationMethod)
		rightValue := source.GetAuthenticationMethod()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return 0, false
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		leftValue := fpv.value.(string)
		rightValue := source.GetUsername()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		leftValue := fpv.value.(string)
		rightValue := source.GetSourceIp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		leftValue := fpv.value.(RunHTTPTestRequest_ResponseFormat)
		rightValue := source.GetResponseFornat()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHTTPTestRequest))
}

type RunHTTPTestRequest_FieldPathMapValue struct {
	RunHTTPTestRequest_FieldPathMap
	value interface{}
}

var _ RunHTTPTestRequest_FieldPathValue = (*RunHTTPTestRequest_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in RunHTTPTestRequest as interface{}
func (fpmv *RunHTTPTestRequest_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *RunHTTPTestRequest_FieldPathMapValue) AsRequestHeadersElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}
func (fpmv *RunHTTPTestRequest_FieldPathMapValue) AsUrlFormEncodedBodyElementValue() (*RunHTTPTestRequest_StringArray, bool) {
	res, ok := fpmv.value.(*RunHTTPTestRequest_StringArray)
	return res, ok
}

// SetTo stores value for selected field in RunHTTPTestRequest
func (fpmv *RunHTTPTestRequest_FieldPathMapValue) SetTo(target **RunHTTPTestRequest) {
	if *target == nil {
		*target = new(RunHTTPTestRequest)
	}
	switch fpmv.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		if (*target).RequestHeaders == nil {
			(*target).RequestHeaders = make(map[string]string)
		}
		(*target).RequestHeaders[fpmv.key] = fpmv.value.(string)
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		if (*target).UrlFormEncodedBody == nil {
			(*target).UrlFormEncodedBody = make(map[string]*RunHTTPTestRequest_StringArray)
		}
		(*target).UrlFormEncodedBody[fpmv.key] = fpmv.value.(*RunHTTPTestRequest_StringArray)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpmv.selector))
	}
}

func (fpmv *RunHTTPTestRequest_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestRequest)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestRequest_FieldPathMapValue' with the value under path in 'RunHTTPTestRequest'.
func (fpmv *RunHTTPTestRequest_FieldPathMapValue) CompareWith(source *RunHTTPTestRequest) (int, bool) {
	switch fpmv.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		leftValue := fpmv.value.(string)
		rightValue := source.GetRequestHeaders()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest: %d", fpmv.selector))
	}
}

func (fpmv *RunHTTPTestRequest_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*RunHTTPTestRequest))
}

// RunHTTPTestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RunHTTPTestRequest according to their type
// Present only for array (repeated) types.
type RunHTTPTestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHTTPTestRequest_FieldPath
	ContainsValue(*RunHTTPTestRequest) bool
}

// ParseRunHTTPTestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHTTPTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RunHTTPTestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHTTPTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHTTPTestRequest_FieldPathArrayItemValue), nil
}

func MustParseRunHTTPTestRequest_FieldPathArrayItemValue(pathStr, valueStr string) RunHTTPTestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHTTPTestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHTTPTestRequest_FieldTerminalPathArrayItemValue struct {
	RunHTTPTestRequest_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestRequest_FieldPathArrayItemValue = (*RunHTTPTestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHTTPTestRequest as interface{}
func (fpaiv *RunHTTPTestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunHTTPTestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RunHTTPTestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHTTPTestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHTTPTestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHTTPTestRequest'
func (fpaiv *RunHTTPTestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHTTPTestRequest) bool {
	slice := fpaiv.RunHTTPTestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunHTTPTestRequest_FieldPathArrayOfValues allows storing slice of values for RunHTTPTestRequest fields according to their type
type RunHTTPTestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHTTPTestRequest_FieldPath
}

func ParseRunHTTPTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHTTPTestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHTTPTestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHTTPTestRequest_FieldPathArrayOfValues), nil
}

func MustParseRunHTTPTestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RunHTTPTestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRunHTTPTestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHTTPTestRequest_FieldTerminalPathArrayOfValues struct {
	RunHTTPTestRequest_FieldTerminalPath
	values interface{}
}

var _ RunHTTPTestRequest_FieldPathArrayOfValues = (*RunHTTPTestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHTTPTestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
		for _, v := range fpaov.values.([]common.HTTPRequestMethod) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorTimeout:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorRequestBody:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
		for _, v := range fpaov.values.([]common.AuthenticationMethod) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		for _, v := range fpaov.values.([]map[string]*RunHTTPTestRequest_StringArray) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorUsername:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorSourceIp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorResponseFornat:
		for _, v := range fpaov.values.([]RunHTTPTestRequest_ResponseFormat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsRequestHeadersArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsRequestMethodArrayOfValues() ([]common.HTTPRequestMethod, bool) {
	res, ok := fpaov.values.([]common.HTTPRequestMethod)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsTimeoutArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsRequestBodyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsAuthenticationMethodArrayOfValues() ([]common.AuthenticationMethod, bool) {
	res, ok := fpaov.values.([]common.AuthenticationMethod)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsUrlFormEncodedBodyArrayOfValues() ([]map[string]*RunHTTPTestRequest_StringArray, bool) {
	res, ok := fpaov.values.([]map[string]*RunHTTPTestRequest_StringArray)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsUsernameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsSourceIpArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestRequest_FieldTerminalPathArrayOfValues) AsResponseFornatArrayOfValues() ([]RunHTTPTestRequest_ResponseFormat, bool) {
	res, ok := fpaov.values.([]RunHTTPTestRequest_ResponseFormat)
	return res, ok
}

type RunHTTPTestRequest_FieldPathMapArrayOfValues struct {
	RunHTTPTestRequest_FieldPathMap
	values interface{}
}

var _ RunHTTPTestRequest_FieldPathArrayOfValues = (*RunHTTPTestRequest_FieldPathMapArrayOfValues)(nil)

func (fpmaov *RunHTTPTestRequest_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestRequest_FieldPathSelectorUrlFormEncodedBody:
		for _, v := range fpmaov.values.([]*RunHTTPTestRequest_StringArray) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *RunHTTPTestRequest_FieldPathMapArrayOfValues) AsRequestHeadersArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
func (fpmaov *RunHTTPTestRequest_FieldPathMapArrayOfValues) AsUrlFormEncodedBodyArrayOfElementValues() ([]*RunHTTPTestRequest_StringArray, bool) {
	res, ok := fpmaov.values.([]*RunHTTPTestRequest_StringArray)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHTTPTestRequestStringArray_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHTTPTestRequestStringArray_FieldPathSelector
	Get(source *RunHTTPTestRequest_StringArray) []interface{}
	GetSingle(source *RunHTTPTestRequest_StringArray) (interface{}, bool)
	ClearValue(item *RunHTTPTestRequest_StringArray)

	// Those methods build corresponding RunHTTPTestRequestStringArray_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHTTPTestRequestStringArray_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHTTPTestRequestStringArray_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHTTPTestRequestStringArray_FieldPathArrayItemValue
}

type RunHTTPTestRequestStringArray_FieldPathSelector int32

const (
	RunHTTPTestRequestStringArray_FieldPathSelectorValue RunHTTPTestRequestStringArray_FieldPathSelector = 0
)

func (s RunHTTPTestRequestStringArray_FieldPathSelector) String() string {
	switch s {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", s))
	}
}

func BuildRunHTTPTestRequestStringArray_FieldPath(fp gotenobject.RawFieldPath) (RunHTTPTestRequestStringArray_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHTTPTestRequest_StringArray")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "value":
			return &RunHTTPTestRequestStringArray_FieldTerminalPath{selector: RunHTTPTestRequestStringArray_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHTTPTestRequest_StringArray", fp)
}

func ParseRunHTTPTestRequestStringArray_FieldPath(rawField string) (RunHTTPTestRequestStringArray_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHTTPTestRequestStringArray_FieldPath(fp)
}

func MustParseRunHTTPTestRequestStringArray_FieldPath(rawField string) RunHTTPTestRequestStringArray_FieldPath {
	fp, err := ParseRunHTTPTestRequestStringArray_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHTTPTestRequestStringArray_FieldTerminalPath struct {
	selector RunHTTPTestRequestStringArray_FieldPathSelector
}

var _ RunHTTPTestRequestStringArray_FieldPath = (*RunHTTPTestRequestStringArray_FieldTerminalPath)(nil)

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) Selector() RunHTTPTestRequestStringArray_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHTTPTestRequest_StringArray
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) Get(source *RunHTTPTestRequest_StringArray) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
			for _, value := range source.GetValue() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHTTPTestRequest_StringArray))
}

// GetSingle returns value pointed by specific field of from source RunHTTPTestRequest_StringArray
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) GetSingle(source *RunHTTPTestRequest_StringArray) (interface{}, bool) {
	switch fp.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		res := source.GetValue()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHTTPTestRequest_StringArray))
}

// GetDefault returns a default value of the field type
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) ClearValue(item *RunHTTPTestRequest_StringArray) {
	if item != nil {
		switch fp.selector {
		case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
			item.Value = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
		}
	}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHTTPTestRequest_StringArray))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHTTPTestRequestStringArray_FieldPathSelectorValue
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithIValue(value interface{}) RunHTTPTestRequestStringArray_FieldPathValue {
	switch fp.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return &RunHTTPTestRequestStringArray_FieldTerminalPathValue{RunHTTPTestRequestStringArray_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHTTPTestRequestStringArray_FieldPathArrayOfValues {
	fpaov := &RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues{RunHTTPTestRequestStringArray_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return &RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues{RunHTTPTestRequestStringArray_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHTTPTestRequestStringArray_FieldPathArrayItemValue {
	switch fp.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return &RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue{RunHTTPTestRequestStringArray_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fp.selector))
	}
}

func (fp *RunHTTPTestRequestStringArray_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunHTTPTestRequestStringArray_FieldPathValue allows storing values for StringArray fields according to their type
type RunHTTPTestRequestStringArray_FieldPathValue interface {
	RunHTTPTestRequestStringArray_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHTTPTestRequest_StringArray)
	CompareWith(*RunHTTPTestRequest_StringArray) (cmp int, comparable bool)
}

func ParseRunHTTPTestRequestStringArray_FieldPathValue(pathStr, valueStr string) (RunHTTPTestRequestStringArray_FieldPathValue, error) {
	fp, err := ParseRunHTTPTestRequestStringArray_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringArray field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHTTPTestRequestStringArray_FieldPathValue), nil
}

func MustParseRunHTTPTestRequestStringArray_FieldPathValue(pathStr, valueStr string) RunHTTPTestRequestStringArray_FieldPathValue {
	fpv, err := ParseRunHTTPTestRequestStringArray_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHTTPTestRequestStringArray_FieldTerminalPathValue struct {
	RunHTTPTestRequestStringArray_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestRequestStringArray_FieldPathValue = (*RunHTTPTestRequestStringArray_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StringArray' as interface{}
func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) AsValueValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object StringArray
func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) SetTo(target **RunHTTPTestRequest_StringArray) {
	if *target == nil {
		*target = new(RunHTTPTestRequest_StringArray)
	}
	switch fpv.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		(*target).Value = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestRequest_StringArray)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestRequestStringArray_FieldTerminalPathValue' with the value under path in 'RunHTTPTestRequest_StringArray'.
func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) CompareWith(source *RunHTTPTestRequest_StringArray) (int, bool) {
	switch fpv.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestRequest_StringArray: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestRequestStringArray_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHTTPTestRequest_StringArray))
}

// RunHTTPTestRequestStringArray_FieldPathArrayItemValue allows storing single item in Path-specific values for StringArray according to their type
// Present only for array (repeated) types.
type RunHTTPTestRequestStringArray_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHTTPTestRequestStringArray_FieldPath
	ContainsValue(*RunHTTPTestRequest_StringArray) bool
}

// ParseRunHTTPTestRequestStringArray_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHTTPTestRequestStringArray_FieldPathArrayItemValue(pathStr, valueStr string) (RunHTTPTestRequestStringArray_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHTTPTestRequestStringArray_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringArray field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHTTPTestRequestStringArray_FieldPathArrayItemValue), nil
}

func MustParseRunHTTPTestRequestStringArray_FieldPathArrayItemValue(pathStr, valueStr string) RunHTTPTestRequestStringArray_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHTTPTestRequestStringArray_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue struct {
	RunHTTPTestRequestStringArray_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestRequestStringArray_FieldPathArrayItemValue = (*RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHTTPTestRequest_StringArray as interface{}
func (fpaiv *RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue) AsValueItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue) GetSingle(source *RunHTTPTestRequest_StringArray) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHTTPTestRequest_StringArray))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StringArray'
func (fpaiv *RunHTTPTestRequestStringArray_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHTTPTestRequest_StringArray) bool {
	slice := fpaiv.RunHTTPTestRequestStringArray_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunHTTPTestRequestStringArray_FieldPathArrayOfValues allows storing slice of values for StringArray fields according to their type
type RunHTTPTestRequestStringArray_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHTTPTestRequestStringArray_FieldPath
}

func ParseRunHTTPTestRequestStringArray_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHTTPTestRequestStringArray_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHTTPTestRequestStringArray_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StringArray field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHTTPTestRequestStringArray_FieldPathArrayOfValues), nil
}

func MustParseRunHTTPTestRequestStringArray_FieldPathArrayOfValues(pathStr, valuesStr string) RunHTTPTestRequestStringArray_FieldPathArrayOfValues {
	fpaov, err := ParseRunHTTPTestRequestStringArray_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues struct {
	RunHTTPTestRequestStringArray_FieldTerminalPath
	values interface{}
}

var _ RunHTTPTestRequestStringArray_FieldPathArrayOfValues = (*RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHTTPTestRequestStringArray_FieldPathSelectorValue:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHTTPTestRequestStringArray_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHTTPTestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHTTPTestResponse_FieldPathSelector
	Get(source *RunHTTPTestResponse) []interface{}
	GetSingle(source *RunHTTPTestResponse) (interface{}, bool)
	ClearValue(item *RunHTTPTestResponse)

	// Those methods build corresponding RunHTTPTestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHTTPTestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHTTPTestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHTTPTestResponse_FieldPathArrayItemValue
}

type RunHTTPTestResponse_FieldPathSelector int32

const (
	RunHTTPTestResponse_FieldPathSelectorTextResponse RunHTTPTestResponse_FieldPathSelector = 0
	RunHTTPTestResponse_FieldPathSelectorJsonResponse RunHTTPTestResponse_FieldPathSelector = 1
)

func (s RunHTTPTestResponse_FieldPathSelector) String() string {
	switch s {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		return "text_response"
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return "json_response"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", s))
	}
}

func BuildRunHTTPTestResponse_FieldPath(fp gotenobject.RawFieldPath) (RunHTTPTestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHTTPTestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "text_response", "textResponse", "text-response":
			return &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorTextResponse}, nil
		case "json_response", "jsonResponse", "json-response":
			return &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorJsonResponse}, nil
		}
	} else {
		switch fp[0] {
		case "json_response", "jsonResponse", "json-response":
			if subpath, err := BuildRunHTTPTestResponseJsonResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunHTTPTestResponse_FieldSubPath{selector: RunHTTPTestResponse_FieldPathSelectorJsonResponse, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHTTPTestResponse", fp)
}

func ParseRunHTTPTestResponse_FieldPath(rawField string) (RunHTTPTestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHTTPTestResponse_FieldPath(fp)
}

func MustParseRunHTTPTestResponse_FieldPath(rawField string) RunHTTPTestResponse_FieldPath {
	fp, err := ParseRunHTTPTestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHTTPTestResponse_FieldTerminalPath struct {
	selector RunHTTPTestResponse_FieldPathSelector
}

var _ RunHTTPTestResponse_FieldPath = (*RunHTTPTestResponse_FieldTerminalPath)(nil)

func (fp *RunHTTPTestResponse_FieldTerminalPath) Selector() RunHTTPTestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHTTPTestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHTTPTestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHTTPTestResponse
func (fp *RunHTTPTestResponse_FieldTerminalPath) Get(source *RunHTTPTestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHTTPTestResponse_FieldPathSelectorTextResponse:
			values = append(values, source.TextResponse)
		case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
			if source.JsonResponse != nil {
				values = append(values, source.JsonResponse)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHTTPTestResponse))
}

// GetSingle returns value pointed by specific field of from source RunHTTPTestResponse
func (fp *RunHTTPTestResponse_FieldTerminalPath) GetSingle(source *RunHTTPTestResponse) (interface{}, bool) {
	switch fp.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		return source.GetTextResponse(), source != nil
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		res := source.GetJsonResponse()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHTTPTestResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunHTTPTestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		return ""
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return (*RunHTTPTestResponse_JsonResponse)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) ClearValue(item *RunHTTPTestResponse) {
	if item != nil {
		switch fp.selector {
		case RunHTTPTestResponse_FieldPathSelectorTextResponse:
			item.TextResponse = ""
		case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
			item.JsonResponse = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
		}
	}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHTTPTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHTTPTestResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHTTPTestResponse_FieldPathSelectorTextResponse
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithIValue(value interface{}) RunHTTPTestResponse_FieldPathValue {
	switch fp.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		return &RunHTTPTestResponse_FieldTerminalPathValue{RunHTTPTestResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return &RunHTTPTestResponse_FieldTerminalPathValue{RunHTTPTestResponse_FieldTerminalPath: *fp, value: value.(*RunHTTPTestResponse_JsonResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHTTPTestResponse_FieldPathArrayOfValues {
	fpaov := &RunHTTPTestResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		return &RunHTTPTestResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return &RunHTTPTestResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponse_FieldTerminalPath: *fp, values: values.([]*RunHTTPTestResponse_JsonResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHTTPTestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunHTTPTestResponse_FieldSubPath struct {
	selector RunHTTPTestResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunHTTPTestResponse_FieldPath = (*RunHTTPTestResponse_FieldSubPath)(nil)

func (fps *RunHTTPTestResponse_FieldSubPath) Selector() RunHTTPTestResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunHTTPTestResponse_FieldSubPath) AsJsonResponseSubPath() (RunHTTPTestResponseJsonResponse_FieldPath, bool) {
	res, ok := fps.subPath.(RunHTTPTestResponseJsonResponse_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunHTTPTestResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunHTTPTestResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunHTTPTestResponse
func (fps *RunHTTPTestResponse_FieldSubPath) Get(source *RunHTTPTestResponse) (values []interface{}) {
	switch fps.selector {
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		values = append(values, fps.subPath.GetRaw(source.GetJsonResponse())...)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fps.selector))
	}
	return
}

func (fps *RunHTTPTestResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunHTTPTestResponse))
}

// GetSingle returns value of selected field from source RunHTTPTestResponse
func (fps *RunHTTPTestResponse_FieldSubPath) GetSingle(source *RunHTTPTestResponse) (interface{}, bool) {
	switch fps.selector {
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		if source.GetJsonResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fps.selector))
	}
}

func (fps *RunHTTPTestResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunHTTPTestResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunHTTPTestResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunHTTPTestResponse_FieldSubPath) ClearValue(item *RunHTTPTestResponse) {
	if item != nil {
		switch fps.selector {
		case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
			fps.subPath.ClearValueRaw(item.JsonResponse)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fps.selector))
		}
	}
}

func (fps *RunHTTPTestResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunHTTPTestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunHTTPTestResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunHTTPTestResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunHTTPTestResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithIValue(value interface{}) RunHTTPTestResponse_FieldPathValue {
	return &RunHTTPTestResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunHTTPTestResponse_FieldPathArrayOfValues {
	return &RunHTTPTestResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunHTTPTestResponse_FieldPathArrayItemValue {
	return &RunHTTPTestResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunHTTPTestResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunHTTPTestResponse_FieldPathValue allows storing values for RunHTTPTestResponse fields according to their type
type RunHTTPTestResponse_FieldPathValue interface {
	RunHTTPTestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHTTPTestResponse)
	CompareWith(*RunHTTPTestResponse) (cmp int, comparable bool)
}

func ParseRunHTTPTestResponse_FieldPathValue(pathStr, valueStr string) (RunHTTPTestResponse_FieldPathValue, error) {
	fp, err := ParseRunHTTPTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHTTPTestResponse_FieldPathValue), nil
}

func MustParseRunHTTPTestResponse_FieldPathValue(pathStr, valueStr string) RunHTTPTestResponse_FieldPathValue {
	fpv, err := ParseRunHTTPTestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHTTPTestResponse_FieldTerminalPathValue struct {
	RunHTTPTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponse_FieldPathValue = (*RunHTTPTestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RunHTTPTestResponse' as interface{}
func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) AsTextResponseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) AsJsonResponseValue() (*RunHTTPTestResponse_JsonResponse, bool) {
	res, ok := fpv.value.(*RunHTTPTestResponse_JsonResponse)
	return res, ok
}

// SetTo stores value for selected field for object RunHTTPTestResponse
func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) SetTo(target **RunHTTPTestResponse) {
	if *target == nil {
		*target = new(RunHTTPTestResponse)
	}
	switch fpv.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		(*target).TextResponse = fpv.value.(string)
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		(*target).JsonResponse = fpv.value.(*RunHTTPTestResponse_JsonResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestResponse_FieldTerminalPathValue' with the value under path in 'RunHTTPTestResponse'.
func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) CompareWith(source *RunHTTPTestResponse) (int, bool) {
	switch fpv.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		leftValue := fpv.value.(string)
		rightValue := source.GetTextResponse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHTTPTestResponse))
}

type RunHTTPTestResponse_FieldSubPathValue struct {
	RunHTTPTestResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunHTTPTestResponse_FieldPathValue = (*RunHTTPTestResponse_FieldSubPathValue)(nil)

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) AsJsonResponsePathValue() (RunHTTPTestResponseJsonResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RunHTTPTestResponseJsonResponse_FieldPathValue)
	return res, ok
}

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) SetTo(target **RunHTTPTestResponse) {
	if *target == nil {
		*target = new(RunHTTPTestResponse)
	}
	switch fpvs.Selector() {
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		fpvs.subPathValue.(RunHTTPTestResponseJsonResponse_FieldPathValue).SetTo(&(*target).JsonResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) CompareWith(source *RunHTTPTestResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return fpvs.subPathValue.(RunHTTPTestResponseJsonResponse_FieldPathValue).CompareWith(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHTTPTestResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunHTTPTestResponse))
}

// RunHTTPTestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RunHTTPTestResponse according to their type
// Present only for array (repeated) types.
type RunHTTPTestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHTTPTestResponse_FieldPath
	ContainsValue(*RunHTTPTestResponse) bool
}

// ParseRunHTTPTestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHTTPTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunHTTPTestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHTTPTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHTTPTestResponse_FieldPathArrayItemValue), nil
}

func MustParseRunHTTPTestResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunHTTPTestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHTTPTestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHTTPTestResponse_FieldTerminalPathArrayItemValue struct {
	RunHTTPTestResponse_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponse_FieldPathArrayItemValue = (*RunHTTPTestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHTTPTestResponse as interface{}
func (fpaiv *RunHTTPTestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RunHTTPTestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunHTTPTestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHTTPTestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHTTPTestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHTTPTestResponse'
func (fpaiv *RunHTTPTestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHTTPTestResponse) bool {
	slice := fpaiv.RunHTTPTestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunHTTPTestResponse_FieldSubPathArrayItemValue struct {
	RunHTTPTestResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunHTTPTestResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunHTTPTestResponse_FieldSubPathArrayItemValue) AsJsonResponsePathItemValue() (RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'RunHTTPTestResponse'
func (fpaivs *RunHTTPTestResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunHTTPTestResponse) bool {
	switch fpaivs.Selector() {
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		return fpaivs.subPathItemValue.(RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue).ContainsValue(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse: %d", fpaivs.Selector()))
	}
}

// RunHTTPTestResponse_FieldPathArrayOfValues allows storing slice of values for RunHTTPTestResponse fields according to their type
type RunHTTPTestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHTTPTestResponse_FieldPath
}

func ParseRunHTTPTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHTTPTestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHTTPTestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RunHTTPTestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHTTPTestResponse_FieldPathArrayOfValues), nil
}

func MustParseRunHTTPTestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunHTTPTestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunHTTPTestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHTTPTestResponse_FieldTerminalPathArrayOfValues struct {
	RunHTTPTestResponse_FieldTerminalPath
	values interface{}
}

var _ RunHTTPTestResponse_FieldPathArrayOfValues = (*RunHTTPTestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHTTPTestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHTTPTestResponse_FieldPathSelectorTextResponse:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
		for _, v := range fpaov.values.([]*RunHTTPTestResponse_JsonResponse) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHTTPTestResponse_FieldTerminalPathArrayOfValues) AsTextResponseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestResponse_FieldTerminalPathArrayOfValues) AsJsonResponseArrayOfValues() ([]*RunHTTPTestResponse_JsonResponse, bool) {
	res, ok := fpaov.values.([]*RunHTTPTestResponse_JsonResponse)
	return res, ok
}

type RunHTTPTestResponse_FieldSubPathArrayOfValues struct {
	RunHTTPTestResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunHTTPTestResponse_FieldPathArrayOfValues = (*RunHTTPTestResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunHTTPTestResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunHTTPTestResponse_FieldSubPathArrayOfValues) AsJsonResponsePathArrayOfValues() (RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHTTPTestResponseJsonResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHTTPTestResponseJsonResponse_FieldPathSelector
	Get(source *RunHTTPTestResponse_JsonResponse) []interface{}
	GetSingle(source *RunHTTPTestResponse_JsonResponse) (interface{}, bool)
	ClearValue(item *RunHTTPTestResponse_JsonResponse)

	// Those methods build corresponding RunHTTPTestResponseJsonResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue
}

type RunHTTPTestResponseJsonResponse_FieldPathSelector int32

const (
	RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode    RunHTTPTestResponseJsonResponse_FieldPathSelector = 0
	RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders RunHTTPTestResponseJsonResponse_FieldPathSelector = 1
	RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody    RunHTTPTestResponseJsonResponse_FieldPathSelector = 2
)

func (s RunHTTPTestResponseJsonResponse_FieldPathSelector) String() string {
	switch s {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		return "response_code"
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return "response_headers"
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		return "response_body"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", s))
	}
}

func BuildRunHTTPTestResponseJsonResponse_FieldPath(fp gotenobject.RawFieldPath) (RunHTTPTestResponseJsonResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHTTPTestResponse_JsonResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "response_code", "responseCode", "response-code":
			return &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode}, nil
		case "response_headers", "responseHeaders", "response-headers":
			return &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders}, nil
		case "response_body", "responseBody", "response-body":
			return &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody}, nil
		}
	} else {
		switch fp[0] {
		case "response_headers", "responseHeaders", "response-headers":
			if subpath, err := BuildRunHTTPTestResponseJsonResponseHeader_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &RunHTTPTestResponseJsonResponse_FieldSubPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHTTPTestResponse_JsonResponse", fp)
}

func ParseRunHTTPTestResponseJsonResponse_FieldPath(rawField string) (RunHTTPTestResponseJsonResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHTTPTestResponseJsonResponse_FieldPath(fp)
}

func MustParseRunHTTPTestResponseJsonResponse_FieldPath(rawField string) RunHTTPTestResponseJsonResponse_FieldPath {
	fp, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHTTPTestResponseJsonResponse_FieldTerminalPath struct {
	selector RunHTTPTestResponseJsonResponse_FieldPathSelector
}

var _ RunHTTPTestResponseJsonResponse_FieldPath = (*RunHTTPTestResponseJsonResponse_FieldTerminalPath)(nil)

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) Selector() RunHTTPTestResponseJsonResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHTTPTestResponse_JsonResponse
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) Get(source *RunHTTPTestResponse_JsonResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
			values = append(values, source.ResponseCode)
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
			for _, value := range source.GetResponseHeaders() {
				values = append(values, value)
			}
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
			values = append(values, source.ResponseBody)
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHTTPTestResponse_JsonResponse))
}

// GetSingle returns value pointed by specific field of from source RunHTTPTestResponse_JsonResponse
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) GetSingle(source *RunHTTPTestResponse_JsonResponse) (interface{}, bool) {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		return source.GetResponseCode(), source != nil
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		res := source.GetResponseHeaders()
		return res, res != nil
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		res := source.GetResponseBody()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHTTPTestResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		return int32(0)
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return ([]*RunHTTPTestResponse_JsonResponse_Header)(nil)
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) ClearValue(item *RunHTTPTestResponse_JsonResponse) {
	if item != nil {
		switch fp.selector {
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
			item.ResponseCode = int32(0)
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
			item.ResponseHeaders = nil
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
			item.ResponseBody = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
		}
	}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHTTPTestResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode ||
		fp.selector == RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithIValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathValue {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathValue{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathValue{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, value: value.([]*RunHTTPTestResponse_JsonResponse_Header)}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathValue{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues {
	fpaov := &RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, values: values.([][]*RunHTTPTestResponse_JsonResponse_Header)}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return &RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue{RunHTTPTestResponseJsonResponse_FieldTerminalPath: *fp, value: value.(*RunHTTPTestResponse_JsonResponse_Header)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type RunHTTPTestResponseJsonResponse_FieldSubPath struct {
	selector RunHTTPTestResponseJsonResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ RunHTTPTestResponseJsonResponse_FieldPath = (*RunHTTPTestResponseJsonResponse_FieldSubPath)(nil)

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) Selector() RunHTTPTestResponseJsonResponse_FieldPathSelector {
	return fps.selector
}
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) AsResponseHeadersSubPath() (RunHTTPTestResponseJsonResponseHeader_FieldPath, bool) {
	res, ok := fps.subPath.(RunHTTPTestResponseJsonResponseHeader_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source RunHTTPTestResponse_JsonResponse
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) Get(source *RunHTTPTestResponse_JsonResponse) (values []interface{}) {
	switch fps.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		for _, item := range source.GetResponseHeaders() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fps.selector))
	}
	return
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*RunHTTPTestResponse_JsonResponse))
}

// GetSingle returns value of selected field from source RunHTTPTestResponse_JsonResponse
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) GetSingle(source *RunHTTPTestResponse_JsonResponse) (interface{}, bool) {
	switch fps.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		if len(source.GetResponseHeaders()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResponseHeaders()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fps.selector))
	}
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*RunHTTPTestResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) ClearValue(item *RunHTTPTestResponse_JsonResponse) {
	if item != nil {
		switch fps.selector {
		case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
			for _, subItem := range item.ResponseHeaders {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fps.selector))
		}
	}
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*RunHTTPTestResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithIValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathValue {
	return &RunHTTPTestResponseJsonResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithIArrayOfValues(values interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues {
	return &RunHTTPTestResponseJsonResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithIArrayItemValue(value interface{}) RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue {
	return &RunHTTPTestResponseJsonResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *RunHTTPTestResponseJsonResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// RunHTTPTestResponseJsonResponse_FieldPathValue allows storing values for JsonResponse fields according to their type
type RunHTTPTestResponseJsonResponse_FieldPathValue interface {
	RunHTTPTestResponseJsonResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHTTPTestResponse_JsonResponse)
	CompareWith(*RunHTTPTestResponse_JsonResponse) (cmp int, comparable bool)
}

func ParseRunHTTPTestResponseJsonResponse_FieldPathValue(pathStr, valueStr string) (RunHTTPTestResponseJsonResponse_FieldPathValue, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHTTPTestResponseJsonResponse_FieldPathValue), nil
}

func MustParseRunHTTPTestResponseJsonResponse_FieldPathValue(pathStr, valueStr string) RunHTTPTestResponseJsonResponse_FieldPathValue {
	fpv, err := ParseRunHTTPTestResponseJsonResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHTTPTestResponseJsonResponse_FieldTerminalPathValue struct {
	RunHTTPTestResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponseJsonResponse_FieldPathValue = (*RunHTTPTestResponseJsonResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'JsonResponse' as interface{}
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) AsResponseCodeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) AsResponseHeadersValue() ([]*RunHTTPTestResponse_JsonResponse_Header, bool) {
	res, ok := fpv.value.([]*RunHTTPTestResponse_JsonResponse_Header)
	return res, ok
}
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) AsResponseBodyValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object JsonResponse
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) SetTo(target **RunHTTPTestResponse_JsonResponse) {
	if *target == nil {
		*target = new(RunHTTPTestResponse_JsonResponse)
	}
	switch fpv.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		(*target).ResponseCode = fpv.value.(int32)
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		(*target).ResponseHeaders = fpv.value.([]*RunHTTPTestResponse_JsonResponse_Header)
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		(*target).ResponseBody = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestResponse_JsonResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestResponseJsonResponse_FieldTerminalPathValue' with the value under path in 'RunHTTPTestResponse_JsonResponse'.
func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) CompareWith(source *RunHTTPTestResponse_JsonResponse) (int, bool) {
	switch fpv.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		leftValue := fpv.value.(int32)
		rightValue := source.GetResponseCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return 0, false
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponseJsonResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHTTPTestResponse_JsonResponse))
}

type RunHTTPTestResponseJsonResponse_FieldSubPathValue struct {
	RunHTTPTestResponseJsonResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ RunHTTPTestResponseJsonResponse_FieldPathValue = (*RunHTTPTestResponseJsonResponse_FieldSubPathValue)(nil)

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) AsResponseHeadersPathValue() (RunHTTPTestResponseJsonResponseHeader_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(RunHTTPTestResponseJsonResponseHeader_FieldPathValue)
	return res, ok
}

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) SetTo(target **RunHTTPTestResponse_JsonResponse) {
	if *target == nil {
		*target = new(RunHTTPTestResponse_JsonResponse)
	}
	switch fpvs.Selector() {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestResponse_JsonResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) CompareWith(source *RunHTTPTestResponse_JsonResponse) (int, bool) {
	switch fpvs.Selector() {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *RunHTTPTestResponseJsonResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*RunHTTPTestResponse_JsonResponse))
}

// RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for JsonResponse according to their type
// Present only for array (repeated) types.
type RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHTTPTestResponseJsonResponse_FieldPath
	ContainsValue(*RunHTTPTestResponse_JsonResponse) bool
}

// ParseRunHTTPTestResponseJsonResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHTTPTestResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue), nil
}

func MustParseRunHTTPTestResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHTTPTestResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue struct {
	RunHTTPTestResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponseJsonResponse_FieldPathArrayItemValue = (*RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHTTPTestResponse_JsonResponse as interface{}
func (fpaiv *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue) AsResponseHeadersItemValue() (*RunHTTPTestResponse_JsonResponse_Header, bool) {
	res, ok := fpaiv.value.(*RunHTTPTestResponse_JsonResponse_Header)
	return res, ok
}

func (fpaiv *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RunHTTPTestResponse_JsonResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHTTPTestResponse_JsonResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'JsonResponse'
func (fpaiv *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHTTPTestResponse_JsonResponse) bool {
	slice := fpaiv.RunHTTPTestResponseJsonResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type RunHTTPTestResponseJsonResponse_FieldSubPathArrayItemValue struct {
	RunHTTPTestResponseJsonResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *RunHTTPTestResponseJsonResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *RunHTTPTestResponseJsonResponse_FieldSubPathArrayItemValue) AsResponseHeadersPathItemValue() (RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'JsonResponse'
func (fpaivs *RunHTTPTestResponseJsonResponse_FieldSubPathArrayItemValue) ContainsValue(source *RunHTTPTestResponse_JsonResponse) bool {
	switch fpaivs.Selector() {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse: %d", fpaivs.Selector()))
	}
}

// RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues allows storing slice of values for JsonResponse fields according to their type
type RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHTTPTestResponseJsonResponse_FieldPath
}

func ParseRunHTTPTestResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues), nil
}

func MustParseRunHTTPTestResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRunHTTPTestResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues struct {
	RunHTTPTestResponseJsonResponse_FieldTerminalPath
	values interface{}
}

var _ RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues = (*RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
		for _, v := range fpaov.values.([][]*RunHTTPTestResponse_JsonResponse_Header) {
			values = append(values, v)
		}
	case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues) AsResponseCodeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues) AsResponseHeadersArrayOfValues() ([][]*RunHTTPTestResponse_JsonResponse_Header, bool) {
	res, ok := fpaov.values.([][]*RunHTTPTestResponse_JsonResponse_Header)
	return res, ok
}
func (fpaov *RunHTTPTestResponseJsonResponse_FieldTerminalPathArrayOfValues) AsResponseBodyArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

type RunHTTPTestResponseJsonResponse_FieldSubPathArrayOfValues struct {
	RunHTTPTestResponseJsonResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ RunHTTPTestResponseJsonResponse_FieldPathArrayOfValues = (*RunHTTPTestResponseJsonResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *RunHTTPTestResponseJsonResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *RunHTTPTestResponseJsonResponse_FieldSubPathArrayOfValues) AsResponseHeadersPathArrayOfValues() (RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RunHTTPTestResponseJsonResponseHeader_FieldPath interface {
	gotenobject.FieldPath
	Selector() RunHTTPTestResponseJsonResponseHeader_FieldPathSelector
	Get(source *RunHTTPTestResponse_JsonResponse_Header) []interface{}
	GetSingle(source *RunHTTPTestResponse_JsonResponse_Header) (interface{}, bool)
	ClearValue(item *RunHTTPTestResponse_JsonResponse_Header)

	// Those methods build corresponding RunHTTPTestResponseJsonResponseHeader_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathValue
	WithIArrayOfValues(values interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue
}

type RunHTTPTestResponseJsonResponseHeader_FieldPathSelector int32

const (
	RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey    RunHTTPTestResponseJsonResponseHeader_FieldPathSelector = 0
	RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues RunHTTPTestResponseJsonResponseHeader_FieldPathSelector = 1
)

func (s RunHTTPTestResponseJsonResponseHeader_FieldPathSelector) String() string {
	switch s {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		return "key"
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return "values"
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", s))
	}
}

func BuildRunHTTPTestResponseJsonResponseHeader_FieldPath(fp gotenobject.RawFieldPath) (RunHTTPTestResponseJsonResponseHeader_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RunHTTPTestResponse_JsonResponse_Header")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey}, nil
		case "values":
			return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RunHTTPTestResponse_JsonResponse_Header", fp)
}

func ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(rawField string) (RunHTTPTestResponseJsonResponseHeader_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRunHTTPTestResponseJsonResponseHeader_FieldPath(fp)
}

func MustParseRunHTTPTestResponseJsonResponseHeader_FieldPath(rawField string) RunHTTPTestResponseJsonResponseHeader_FieldPath {
	fp, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath struct {
	selector RunHTTPTestResponseJsonResponseHeader_FieldPathSelector
}

var _ RunHTTPTestResponseJsonResponseHeader_FieldPath = (*RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath)(nil)

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) Selector() RunHTTPTestResponseJsonResponseHeader_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RunHTTPTestResponse_JsonResponse_Header
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) Get(source *RunHTTPTestResponse_JsonResponse_Header) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
			values = append(values, source.Key)
		case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
			for _, value := range source.GetValues() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
		}
	}
	return
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RunHTTPTestResponse_JsonResponse_Header))
}

// GetSingle returns value pointed by specific field of from source RunHTTPTestResponse_JsonResponse_Header
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) GetSingle(source *RunHTTPTestResponse_JsonResponse_Header) (interface{}, bool) {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RunHTTPTestResponse_JsonResponse_Header))
}

// GetDefault returns a default value of the field type
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		return ""
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) ClearValue(item *RunHTTPTestResponse_JsonResponse_Header) {
	if item != nil {
		switch fp.selector {
		case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
			item.Key = ""
		case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
			item.Values = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
		}
	}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RunHTTPTestResponse_JsonResponse_Header))
}

// IsLeaf - whether field path is holds simple value
func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey ||
		fp.selector == RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithIValue(value interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathValue {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp, value: value.(string)}
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithIArrayOfValues(values interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues {
	fpaov := &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp}
	switch fp.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp, values: values.([]string)}
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
	}
	return fpaov
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithIArrayItemValue(value interface{}) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue {
	switch fp.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue{RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fp.selector))
	}
}

func (fp *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RunHTTPTestResponseJsonResponseHeader_FieldPathValue allows storing values for Header fields according to their type
type RunHTTPTestResponseJsonResponseHeader_FieldPathValue interface {
	RunHTTPTestResponseJsonResponseHeader_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RunHTTPTestResponse_JsonResponse_Header)
	CompareWith(*RunHTTPTestResponse_JsonResponse_Header) (cmp int, comparable bool)
}

func ParseRunHTTPTestResponseJsonResponseHeader_FieldPathValue(pathStr, valueStr string) (RunHTTPTestResponseJsonResponseHeader_FieldPathValue, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path value from %s: %v", valueStr, err)
	}
	return fpv.(RunHTTPTestResponseJsonResponseHeader_FieldPathValue), nil
}

func MustParseRunHTTPTestResponseJsonResponseHeader_FieldPathValue(pathStr, valueStr string) RunHTTPTestResponseJsonResponseHeader_FieldPathValue {
	fpv, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue struct {
	RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponseJsonResponseHeader_FieldPathValue = (*RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Header' as interface{}
func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) AsValuesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Header
func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) SetTo(target **RunHTTPTestResponse_JsonResponse_Header) {
	if *target == nil {
		*target = new(RunHTTPTestResponse_JsonResponse_Header)
	}
	switch fpv.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		(*target).Values = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RunHTTPTestResponse_JsonResponse_Header)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue' with the value under path in 'RunHTTPTestResponse_JsonResponse_Header'.
func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) CompareWith(source *RunHTTPTestResponse_JsonResponse_Header) (int, bool) {
	switch fpv.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RunHTTPTestResponse_JsonResponse_Header: %d", fpv.selector))
	}
}

func (fpv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RunHTTPTestResponse_JsonResponse_Header))
}

// RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue allows storing single item in Path-specific values for Header according to their type
// Present only for array (repeated) types.
type RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RunHTTPTestResponseJsonResponseHeader_FieldPath
	ContainsValue(*RunHTTPTestResponse_JsonResponse_Header) bool
}

// ParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue(pathStr, valueStr string) (RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue), nil
}

func MustParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue(pathStr, valueStr string) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue {
	fpaiv, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue struct {
	RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath
	value interface{}
}

var _ RunHTTPTestResponseJsonResponseHeader_FieldPathArrayItemValue = (*RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RunHTTPTestResponse_JsonResponse_Header as interface{}
func (fpaiv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue) AsValuesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue) GetSingle(source *RunHTTPTestResponse_JsonResponse_Header) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RunHTTPTestResponse_JsonResponse_Header))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Header'
func (fpaiv *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayItemValue) ContainsValue(source *RunHTTPTestResponse_JsonResponse_Header) bool {
	slice := fpaiv.RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues allows storing slice of values for Header fields according to their type
type RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RunHTTPTestResponseJsonResponseHeader_FieldPath
}

func ParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues(pathStr, valuesStr string) (RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues, error) {
	fp, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues), nil
}

func MustParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues(pathStr, valuesStr string) RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues {
	fpaov, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues struct {
	RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath
	values interface{}
}

var _ RunHTTPTestResponseJsonResponseHeader_FieldPathArrayOfValues = (*RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
