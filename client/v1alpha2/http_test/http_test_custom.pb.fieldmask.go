// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/http_test_custom.proto
// DO NOT EDIT!!!

package http_test_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

type RunHTTPTestRequest_FieldMask struct {
	Paths []RunHTTPTestRequest_FieldPath
}

func FullRunHTTPTestRequest_FieldMask() *RunHTTPTestRequest_FieldMask {
	res := &RunHTTPTestRequest_FieldMask{}
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUrl})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestHeaders})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestMethod})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorTimeout})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorRequestBody})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorUsername})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorPassword})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorSourceIp})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorOutputFormat})
	res.Paths = append(res.Paths, &RunHTTPTestRequest_FieldTerminalPath{selector: RunHTTPTestRequest_FieldPathSelectorIpVersion})
	return res
}

func (fieldMask *RunHTTPTestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunHTTPTestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunHTTPTestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunHTTPTestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunHTTPTestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 12)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunHTTPTestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunHTTPTestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunHTTPTestRequest_FieldPath(raw)
	})
}

func (fieldMask *RunHTTPTestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *RunHTTPTestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunHTTPTestRequest_FieldMask) Subtract(other *RunHTTPTestRequest_FieldMask) *RunHTTPTestRequest_FieldMask {
	result := &RunHTTPTestRequest_FieldMask{}
	removedSelectors := make([]bool, 12)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunHTTPTestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunHTTPTestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunHTTPTestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunHTTPTestRequest_FieldMask) FilterInputFields() *RunHTTPTestRequest_FieldMask {
	result := &RunHTTPTestRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunHTTPTestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunHTTPTestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunHTTPTestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunHTTPTestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunHTTPTestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunHTTPTestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunHTTPTestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunHTTPTestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestRequest_FieldMask) AppendPath(path RunHTTPTestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunHTTPTestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunHTTPTestRequest_FieldPath))
}

func (fieldMask *RunHTTPTestRequest_FieldMask) GetPaths() []RunHTTPTestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunHTTPTestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunHTTPTestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunHTTPTestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunHTTPTestRequest_FieldMask) Set(target, source *RunHTTPTestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunHTTPTestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunHTTPTestRequest), source.(*RunHTTPTestRequest))
}

func (fieldMask *RunHTTPTestRequest_FieldMask) Project(source *RunHTTPTestRequest) *RunHTTPTestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunHTTPTestRequest{}
	var requestHeadersMapKeys []string
	wholeRequestHeadersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunHTTPTestRequest_FieldTerminalPath:
			switch tp.selector {
			case RunHTTPTestRequest_FieldPathSelectorName:
				result.Name = source.Name
			case RunHTTPTestRequest_FieldPathSelectorUrl:
				result.Url = source.Url
			case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
				result.RequestHeaders = source.RequestHeaders
				wholeRequestHeadersAccepted = true
			case RunHTTPTestRequest_FieldPathSelectorRequestMethod:
				result.RequestMethod = source.RequestMethod
			case RunHTTPTestRequest_FieldPathSelectorTimeout:
				result.Timeout = source.Timeout
			case RunHTTPTestRequest_FieldPathSelectorRequestBody:
				result.RequestBody = source.RequestBody
			case RunHTTPTestRequest_FieldPathSelectorAuthenticationMethod:
				result.AuthenticationMethod = source.AuthenticationMethod
			case RunHTTPTestRequest_FieldPathSelectorUsername:
				result.Username = source.Username
			case RunHTTPTestRequest_FieldPathSelectorPassword:
				result.Password = source.Password
			case RunHTTPTestRequest_FieldPathSelectorSourceIp:
				result.SourceIp = source.SourceIp
			case RunHTTPTestRequest_FieldPathSelectorOutputFormat:
				result.OutputFormat = source.OutputFormat
			case RunHTTPTestRequest_FieldPathSelectorIpVersion:
				result.IpVersion = source.IpVersion
			}
		case *RunHTTPTestRequest_FieldPathMap:
			switch tp.selector {
			case RunHTTPTestRequest_FieldPathSelectorRequestHeaders:
				requestHeadersMapKeys = append(requestHeadersMapKeys, tp.key)
			}
		}
	}
	if wholeRequestHeadersAccepted == false && len(requestHeadersMapKeys) > 0 && source.GetRequestHeaders() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetRequestHeaders()
		for _, key := range requestHeadersMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.RequestHeaders = copiedMap
	}
	return result
}

func (fieldMask *RunHTTPTestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunHTTPTestRequest))
}

func (fieldMask *RunHTTPTestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunHTTPTestResponse_FieldMask struct {
	Paths []RunHTTPTestResponse_FieldPath
}

func FullRunHTTPTestResponse_FieldMask() *RunHTTPTestResponse_FieldMask {
	res := &RunHTTPTestResponse_FieldMask{}
	res.Paths = append(res.Paths, &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorTextResponse})
	res.Paths = append(res.Paths, &RunHTTPTestResponse_FieldTerminalPath{selector: RunHTTPTestResponse_FieldPathSelectorJsonResponse})
	return res
}

func (fieldMask *RunHTTPTestResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunHTTPTestResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunHTTPTestResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunHTTPTestResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunHTTPTestResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunHTTPTestResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunHTTPTestResponse_FieldPath(raw)
	})
}

func (fieldMask *RunHTTPTestResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RunHTTPTestResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunHTTPTestResponse_FieldMask) Subtract(other *RunHTTPTestResponse_FieldMask) *RunHTTPTestResponse_FieldMask {
	result := &RunHTTPTestResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[RunHTTPTestResponse_FieldPathSelector]gotenobject.FieldMask{
		RunHTTPTestResponse_FieldPathSelectorJsonResponse: &RunHTTPTestResponse_JsonResponse_FieldMask{},
	}
	mySubMasks := map[RunHTTPTestResponse_FieldPathSelector]gotenobject.FieldMask{
		RunHTTPTestResponse_FieldPathSelectorJsonResponse: &RunHTTPTestResponse_JsonResponse_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunHTTPTestResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RunHTTPTestResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RunHTTPTestResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
						mySubMasks[RunHTTPTestResponse_FieldPathSelectorJsonResponse] = FullRunHTTPTestResponse_JsonResponse_FieldMask()
					}
				} else if tp, ok := path.(*RunHTTPTestResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RunHTTPTestResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunHTTPTestResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunHTTPTestResponse_FieldMask) FilterInputFields() *RunHTTPTestResponse_FieldMask {
	result := &RunHTTPTestResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunHTTPTestResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunHTTPTestResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunHTTPTestResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunHTTPTestResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunHTTPTestResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunHTTPTestResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunHTTPTestResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunHTTPTestResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_FieldMask) AppendPath(path RunHTTPTestResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunHTTPTestResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunHTTPTestResponse_FieldPath))
}

func (fieldMask *RunHTTPTestResponse_FieldMask) GetPaths() []RunHTTPTestResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunHTTPTestResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunHTTPTestResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunHTTPTestResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunHTTPTestResponse_FieldMask) Set(target, source *RunHTTPTestResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunHTTPTestResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunHTTPTestResponse), source.(*RunHTTPTestResponse))
}

func (fieldMask *RunHTTPTestResponse_FieldMask) Project(source *RunHTTPTestResponse) *RunHTTPTestResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunHTTPTestResponse{}
	jsonResponseMask := &RunHTTPTestResponse_JsonResponse_FieldMask{}
	wholeJsonResponseAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunHTTPTestResponse_FieldTerminalPath:
			switch tp.selector {
			case RunHTTPTestResponse_FieldPathSelectorTextResponse:
				result.TextResponse = source.TextResponse
			case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
				result.JsonResponse = source.JsonResponse
				wholeJsonResponseAccepted = true
			}
		case *RunHTTPTestResponse_FieldSubPath:
			switch tp.selector {
			case RunHTTPTestResponse_FieldPathSelectorJsonResponse:
				jsonResponseMask.AppendPath(tp.subPath.(RunHTTPTestResponseJsonResponse_FieldPath))
			}
		}
	}
	if wholeJsonResponseAccepted == false && len(jsonResponseMask.Paths) > 0 {
		result.JsonResponse = jsonResponseMask.Project(source.GetJsonResponse())
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunHTTPTestResponse))
}

func (fieldMask *RunHTTPTestResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunHTTPTestResponse_JsonResponse_FieldMask struct {
	Paths []RunHTTPTestResponseJsonResponse_FieldPath
}

func FullRunHTTPTestResponse_JsonResponse_FieldMask() *RunHTTPTestResponse_JsonResponse_FieldMask {
	res := &RunHTTPTestResponse_JsonResponse_FieldMask{}
	res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode})
	res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders})
	res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponse_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody})
	return res
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunHTTPTestResponseJsonResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunHTTPTestResponseJsonResponse_FieldPath(raw)
	})
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Subtract(other *RunHTTPTestResponse_JsonResponse_FieldMask) *RunHTTPTestResponse_JsonResponse_FieldMask {
	result := &RunHTTPTestResponse_JsonResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[RunHTTPTestResponseJsonResponse_FieldPathSelector]gotenobject.FieldMask{
		RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders: &RunHTTPTestResponse_JsonResponse_Header_FieldMask{},
	}
	mySubMasks := map[RunHTTPTestResponseJsonResponse_FieldPathSelector]gotenobject.FieldMask{
		RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders: &RunHTTPTestResponse_JsonResponse_Header_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunHTTPTestResponseJsonResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RunHTTPTestResponseJsonResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RunHTTPTestResponseJsonResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
						mySubMasks[RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders] = FullRunHTTPTestResponse_JsonResponse_Header_FieldMask()
					}
				} else if tp, ok := path.(*RunHTTPTestResponseJsonResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RunHTTPTestResponseJsonResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunHTTPTestResponse_JsonResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) FilterInputFields() *RunHTTPTestResponse_JsonResponse_FieldMask {
	result := &RunHTTPTestResponse_JsonResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunHTTPTestResponseJsonResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunHTTPTestResponse_JsonResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunHTTPTestResponse_JsonResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) AppendPath(path RunHTTPTestResponseJsonResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunHTTPTestResponseJsonResponse_FieldPath))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) GetPaths() []RunHTTPTestResponseJsonResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunHTTPTestResponseJsonResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Set(target, source *RunHTTPTestResponse_JsonResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunHTTPTestResponse_JsonResponse), source.(*RunHTTPTestResponse_JsonResponse))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) Project(source *RunHTTPTestResponse_JsonResponse) *RunHTTPTestResponse_JsonResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunHTTPTestResponse_JsonResponse{}
	responseHeadersMask := &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	wholeResponseHeadersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunHTTPTestResponseJsonResponse_FieldTerminalPath:
			switch tp.selector {
			case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseCode:
				result.ResponseCode = source.ResponseCode
			case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
				result.ResponseHeaders = source.ResponseHeaders
				wholeResponseHeadersAccepted = true
			case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseBody:
				result.ResponseBody = source.ResponseBody
			}
		case *RunHTTPTestResponseJsonResponse_FieldSubPath:
			switch tp.selector {
			case RunHTTPTestResponseJsonResponse_FieldPathSelectorResponseHeaders:
				responseHeadersMask.AppendPath(tp.subPath.(RunHTTPTestResponseJsonResponseHeader_FieldPath))
			}
		}
	}
	if wholeResponseHeadersAccepted == false && len(responseHeadersMask.Paths) > 0 {
		for _, sourceItem := range source.GetResponseHeaders() {
			result.ResponseHeaders = append(result.ResponseHeaders, responseHeadersMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunHTTPTestResponse_JsonResponse))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RunHTTPTestResponse_JsonResponse_Header_FieldMask struct {
	Paths []RunHTTPTestResponseJsonResponseHeader_FieldPath
}

func FullRunHTTPTestResponse_JsonResponse_Header_FieldMask() *RunHTTPTestResponse_JsonResponse_Header_FieldMask {
	res := &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey})
	res.Paths = append(res.Paths, &RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath{selector: RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues})
	return res
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(raw)
	})
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) ProtoMessage() {}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Subtract(other *RunHTTPTestResponse_JsonResponse_Header_FieldMask) *RunHTTPTestResponse_JsonResponse_Header_FieldMask {
	result := &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RunHTTPTestResponse_JsonResponse_Header_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) FilterInputFields() *RunHTTPTestResponse_JsonResponse_Header_FieldMask {
	result := &RunHTTPTestResponse_JsonResponse_Header_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RunHTTPTestResponseJsonResponseHeader_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RunHTTPTestResponse_JsonResponse_Header_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RunHTTPTestResponse_JsonResponse_Header_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) AppendPath(path RunHTTPTestResponseJsonResponseHeader_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RunHTTPTestResponseJsonResponseHeader_FieldPath))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) GetPaths() []RunHTTPTestResponseJsonResponseHeader_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRunHTTPTestResponseJsonResponseHeader_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Set(target, source *RunHTTPTestResponse_JsonResponse_Header) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RunHTTPTestResponse_JsonResponse_Header), source.(*RunHTTPTestResponse_JsonResponse_Header))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) Project(source *RunHTTPTestResponse_JsonResponse_Header) *RunHTTPTestResponse_JsonResponse_Header {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RunHTTPTestResponse_JsonResponse_Header{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RunHTTPTestResponseJsonResponseHeader_FieldTerminalPath:
			switch tp.selector {
			case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorKey:
				result.Key = source.Key
			case RunHTTPTestResponseJsonResponseHeader_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RunHTTPTestResponse_JsonResponse_Header))
}

func (fieldMask *RunHTTPTestResponse_JsonResponse_Header_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
