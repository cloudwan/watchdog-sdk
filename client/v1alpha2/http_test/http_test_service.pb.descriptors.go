// Code generated by protoc-gen-goten-client
// API: HTTPTestService
// DO NOT EDIT!!!

package http_test_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
)

var (
	descriptorsInitialized    bool
	httpTestServiceDescriptor *HTTPTestServiceDescriptor
	runHTTPTestDescriptor     *RunHTTPTestDescriptor
)

type RunHTTPTestDescriptor struct{}

type RunHTTPTestDescriptorClientMsgHandle struct{}

type RunHTTPTestDescriptorServerMsgHandle struct{}

func (d *RunHTTPTestDescriptor) NewEmptyClientMsg() proto.Message {
	return &RunHTTPTestRequest{}
}

func (d *RunHTTPTestDescriptor) NewEmptyServerMsg() proto.Message {
	return &RunHTTPTestResponse{}
}

func (d *RunHTTPTestDescriptor) IsUnary() bool {
	return true
}

func (d *RunHTTPTestDescriptor) IsClientStream() bool {
	return false
}

func (d *RunHTTPTestDescriptor) IsServerStream() bool {
	return false
}

func (d *RunHTTPTestDescriptor) IsCollection() bool {
	return false
}

func (d *RunHTTPTestDescriptor) IsPlural() bool {
	return false
}

func (d *RunHTTPTestDescriptor) HasResource() bool {
	return true
}

func (d *RunHTTPTestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RunHTTPTestDescriptor) GetVerb() string {
	return "runHTTPTest"
}

func (d *RunHTTPTestDescriptor) GetMethodName() string {
	return "RunHTTPTest"
}

func (d *RunHTTPTestDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.HTTPTestService/RunHTTPTest"
}

func (d *RunHTTPTestDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *RunHTTPTestDescriptor) GetApiName() string {
	return "HTTPTestService"
}

func (d *RunHTTPTestDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *RunHTTPTestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RunHTTPTestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return httpTestServiceDescriptor
}

func (d *RunHTTPTestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *RunHTTPTestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunHTTPTestDescriptorClientMsgHandle{}
}

func (d *RunHTTPTestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RunHTTPTestDescriptorServerMsgHandle{}
}

func (h *RunHTTPTestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunHTTPTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RunHTTPTestRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probe.Name)(nil)
}

func (h *RunHTTPTestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunHTTPTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RunHTTPTestRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RunHTTPTestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunHTTPTestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RunHTTPTestRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RunHTTPTestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunHTTPTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RunHTTPTestResponse) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RunHTTPTestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RunHTTPTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RunHTTPTestResponse) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RunHTTPTestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RunHTTPTestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RunHTTPTestResponse) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetRunHTTPTestDescriptor() *RunHTTPTestDescriptor {
	return runHTTPTestDescriptor
}

type HTTPTestServiceDescriptor struct{}

func (d *HTTPTestServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		runHTTPTestDescriptor,
	}
}

func (d *HTTPTestServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.HTTPTestService"
}

func (d *HTTPTestServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *HTTPTestServiceDescriptor) GetApiName() string {
	return "HTTPTestService"
}

func (d *HTTPTestServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *HTTPTestServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetHTTPTestServiceDescriptor() *HTTPTestServiceDescriptor {
	return httpTestServiceDescriptor
}

func initDescriptors() {
	httpTestServiceDescriptor = &HTTPTestServiceDescriptor{}
	runHTTPTestDescriptor = &RunHTTPTestDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(httpTestServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(runHTTPTestDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
