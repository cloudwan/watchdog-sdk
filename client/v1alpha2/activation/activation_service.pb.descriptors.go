// Code generated by protoc-gen-goten-client
// API: ActivationService
// DO NOT EDIT!!!

package activation_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probe.Probe{}
)

var (
	descriptorsInitialized             bool
	activationServiceDescriptor        *ActivationServiceDescriptor
	activationDescriptor               *ActivationDescriptor
	sendActivationInvitationDescriptor *SendActivationInvitationDescriptor
	resetActivationDescriptor          *ResetActivationDescriptor
)

type ActivationDescriptor struct{}

type ActivationDescriptorClientMsgHandle struct{}

type ActivationDescriptorServerMsgHandle struct{}

func (d *ActivationDescriptor) NewEmptyClientMsg() proto.Message {
	return &ActivationRequest{}
}

func (d *ActivationDescriptor) NewEmptyServerMsg() proto.Message {
	return &ActivationResponse{}
}

func (d *ActivationDescriptor) IsUnary() bool {
	return false
}

func (d *ActivationDescriptor) IsClientStream() bool {
	return true
}

func (d *ActivationDescriptor) IsServerStream() bool {
	return true
}

func (d *ActivationDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ActivationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ActivationDescriptor) HasSubjectResource() bool {
	return false
}

func (d *ActivationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ActivationDescriptor) GetVerb() string {
	return "activation"
}

func (d *ActivationDescriptor) GetMethodName() string {
	return "Activation"
}

func (d *ActivationDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ActivationService/Activation"
}

func (d *ActivationDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ActivationDescriptor) GetApiName() string {
	return "ActivationService"
}

func (d *ActivationDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ActivationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ActivationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return activationServiceDescriptor
}

func (d *ActivationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return nil
}

func (d *ActivationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ActivationDescriptorClientMsgHandle{}
}

func (d *ActivationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ActivationDescriptorServerMsgHandle{}
}

func (h *ActivationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ActivationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *ActivationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	return nil
}

func (h *ActivationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetActivationDescriptor() *ActivationDescriptor {
	return activationDescriptor
}

type SendActivationInvitationDescriptor struct{}

type SendActivationInvitationDescriptorClientMsgHandle struct{}

type SendActivationInvitationDescriptorServerMsgHandle struct{}

func (d *SendActivationInvitationDescriptor) NewEmptyClientMsg() proto.Message {
	return &SendActivationInvitationRequest{}
}

func (d *SendActivationInvitationDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *SendActivationInvitationDescriptor) IsUnary() bool {
	return true
}

func (d *SendActivationInvitationDescriptor) IsClientStream() bool {
	return false
}

func (d *SendActivationInvitationDescriptor) IsServerStream() bool {
	return false
}

func (d *SendActivationInvitationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *SendActivationInvitationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *SendActivationInvitationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *SendActivationInvitationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SendActivationInvitationDescriptor) GetVerb() string {
	return "sendActivationInvitation"
}

func (d *SendActivationInvitationDescriptor) GetMethodName() string {
	return "SendActivationInvitation"
}

func (d *SendActivationInvitationDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ActivationService/SendActivationInvitation"
}

func (d *SendActivationInvitationDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SendActivationInvitationDescriptor) GetApiName() string {
	return "ActivationService"
}

func (d *SendActivationInvitationDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SendActivationInvitationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SendActivationInvitationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return activationServiceDescriptor
}

func (d *SendActivationInvitationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *SendActivationInvitationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SendActivationInvitationDescriptorClientMsgHandle{}
}

func (d *SendActivationInvitationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SendActivationInvitationDescriptorServerMsgHandle{}
}

func (h *SendActivationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SendActivationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SendActivationInvitationRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe.Name)(nil)
}

func (h *SendActivationInvitationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SendActivationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SendActivationInvitationRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SendActivationInvitationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SendActivationInvitationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SendActivationInvitationRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *SendActivationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SendActivationInvitationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SendActivationInvitationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetSendActivationInvitationDescriptor() *SendActivationInvitationDescriptor {
	return sendActivationInvitationDescriptor
}

type ResetActivationDescriptor struct{}

type ResetActivationDescriptorClientMsgHandle struct{}

type ResetActivationDescriptorServerMsgHandle struct{}

func (d *ResetActivationDescriptor) NewEmptyClientMsg() proto.Message {
	return &ResetActivationRequest{}
}

func (d *ResetActivationDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *ResetActivationDescriptor) IsUnary() bool {
	return true
}

func (d *ResetActivationDescriptor) IsClientStream() bool {
	return false
}

func (d *ResetActivationDescriptor) IsServerStream() bool {
	return false
}

func (d *ResetActivationDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ResetActivationDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ResetActivationDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ResetActivationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ResetActivationDescriptor) GetVerb() string {
	return "resetActivation"
}

func (d *ResetActivationDescriptor) GetMethodName() string {
	return "ResetActivation"
}

func (d *ResetActivationDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ActivationService/ResetActivation"
}

func (d *ResetActivationDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ResetActivationDescriptor) GetApiName() string {
	return "ActivationService"
}

func (d *ResetActivationDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ResetActivationDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ResetActivationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return activationServiceDescriptor
}

func (d *ResetActivationDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *ResetActivationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ResetActivationDescriptorClientMsgHandle{}
}

func (d *ResetActivationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ResetActivationDescriptorServerMsgHandle{}
}

func (h *ResetActivationDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResetActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ResetActivationRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probe.Name)(nil)
}

func (h *ResetActivationDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ResetActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ResetActivationRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ResetActivationDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ResetActivationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ResetActivationRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *ResetActivationDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probe.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ResetActivationDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ResetActivationDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetResetActivationDescriptor() *ResetActivationDescriptor {
	return resetActivationDescriptor
}

type ActivationServiceDescriptor struct{}

func (d *ActivationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		activationDescriptor,
		sendActivationInvitationDescriptor,
		resetActivationDescriptor,
	}
}

func (d *ActivationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ActivationService"
}

func (d *ActivationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ActivationServiceDescriptor) GetApiName() string {
	return "ActivationService"
}

func (d *ActivationServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ActivationServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetActivationServiceDescriptor() *ActivationServiceDescriptor {
	return activationServiceDescriptor
}

func initDescriptors() {
	activationServiceDescriptor = &ActivationServiceDescriptor{}
	activationDescriptor = &ActivationDescriptor{}
	sendActivationInvitationDescriptor = &SendActivationInvitationDescriptor{}
	resetActivationDescriptor = &ResetActivationDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(activationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(activationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(sendActivationInvitationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(resetActivationDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
