// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_service.proto
// DO NOT EDIT!!!

package probe_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe.Probe{}
	_ = &project.Project{}
)

func (o *GetProbeRequest) GotenObjectExt() {}

func (o *GetProbeRequest) MakeFullFieldMask() *GetProbeRequest_FieldMask {
	return FullGetProbeRequest_FieldMask()
}

func (o *GetProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbeRequest_FieldMask()
}

func (o *GetProbeRequest) MakeDiffFieldMask(other *GetProbeRequest) *GetProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbeRequest_FieldMask()
	}

	res := &GetProbeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbeRequest))
}

func (o *GetProbeRequest) Clone() *GetProbeRequest {
	if o == nil {
		return nil
	}
	result := &GetProbeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbeRequest) Merge(source *GetProbeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbeRequest))
}

func (o *BatchGetProbesRequest) GotenObjectExt() {}

func (o *BatchGetProbesRequest) MakeFullFieldMask() *BatchGetProbesRequest_FieldMask {
	return FullBatchGetProbesRequest_FieldMask()
}

func (o *BatchGetProbesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbesRequest_FieldMask()
}

func (o *BatchGetProbesRequest) MakeDiffFieldMask(other *BatchGetProbesRequest) *BatchGetProbesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbesRequest_FieldMask()
	}

	res := &BatchGetProbesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbesRequest))
}

func (o *BatchGetProbesRequest) Clone() *BatchGetProbesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbesRequest{}
	result.Names = make([]*probe.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probe.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbesRequest) Merge(source *BatchGetProbesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probe.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbesRequest))
}

func (o *BatchGetProbesResponse) GotenObjectExt() {}

func (o *BatchGetProbesResponse) MakeFullFieldMask() *BatchGetProbesResponse_FieldMask {
	return FullBatchGetProbesResponse_FieldMask()
}

func (o *BatchGetProbesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbesResponse_FieldMask()
}

func (o *BatchGetProbesResponse) MakeDiffFieldMask(other *BatchGetProbesResponse) *BatchGetProbesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbesResponse_FieldMask()
	}

	res := &BatchGetProbesResponse_FieldMask{}

	if len(o.GetProbes()) == len(other.GetProbes()) {
		for i, lValue := range o.GetProbes() {
			rValue := other.GetProbes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorProbes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorProbes})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbesResponse))
}

func (o *BatchGetProbesResponse) Clone() *BatchGetProbesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbesResponse{}
	result.Probes = make([]*probe.Probe, len(o.Probes))
	for i, sourceValue := range o.Probes {
		result.Probes[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probe.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probe.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbesResponse) Merge(source *BatchGetProbesResponse) {
	for _, sourceValue := range source.GetProbes() {
		exists := false
		for _, currentValue := range o.Probes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.Probe
			if sourceValue != nil {
				newDstElement = new(probe.Probe)
				newDstElement.Merge(sourceValue)
			}
			o.Probes = append(o.Probes, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probe.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbesResponse))
}

func (o *ListProbesRequest) GotenObjectExt() {}

func (o *ListProbesRequest) MakeFullFieldMask() *ListProbesRequest_FieldMask {
	return FullListProbesRequest_FieldMask()
}

func (o *ListProbesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbesRequest_FieldMask()
}

func (o *ListProbesRequest) MakeDiffFieldMask(other *ListProbesRequest) *ListProbesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbesRequest_FieldMask()
	}

	res := &ListProbesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListProbesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbesRequest))
}

func (o *ListProbesRequest) Clone() *ListProbesRequest {
	if o == nil {
		return nil
	}
	result := &ListProbesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListProbesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbesRequest) Merge(source *ListProbesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListProbesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbesRequest))
}

func (o *ListProbesResponse) GotenObjectExt() {}

func (o *ListProbesResponse) MakeFullFieldMask() *ListProbesResponse_FieldMask {
	return FullListProbesResponse_FieldMask()
}

func (o *ListProbesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbesResponse_FieldMask()
}

func (o *ListProbesResponse) MakeDiffFieldMask(other *ListProbesResponse) *ListProbesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbesResponse_FieldMask()
	}

	res := &ListProbesResponse_FieldMask{}

	if len(o.GetProbes()) == len(other.GetProbes()) {
		for i, lValue := range o.GetProbes() {
			rValue := other.GetProbes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorProbes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorProbes})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListProbesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbesResponse))
}

func (o *ListProbesResponse) Clone() *ListProbesResponse {
	if o == nil {
		return nil
	}
	result := &ListProbesResponse{}
	result.Probes = make([]*probe.Probe, len(o.Probes))
	for i, sourceValue := range o.Probes {
		result.Probes[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListProbesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbesResponse) Merge(source *ListProbesResponse) {
	for _, sourceValue := range source.GetProbes() {
		exists := false
		for _, currentValue := range o.Probes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.Probe
			if sourceValue != nil {
				newDstElement = new(probe.Probe)
				newDstElement.Merge(sourceValue)
			}
			o.Probes = append(o.Probes, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListProbesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbesResponse))
}

func (o *WatchProbeRequest) GotenObjectExt() {}

func (o *WatchProbeRequest) MakeFullFieldMask() *WatchProbeRequest_FieldMask {
	return FullWatchProbeRequest_FieldMask()
}

func (o *WatchProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeRequest_FieldMask()
}

func (o *WatchProbeRequest) MakeDiffFieldMask(other *WatchProbeRequest) *WatchProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeRequest_FieldMask()
	}

	res := &WatchProbeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeRequest))
}

func (o *WatchProbeRequest) Clone() *WatchProbeRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeRequest) Merge(source *WatchProbeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeRequest))
}

func (o *WatchProbeResponse) GotenObjectExt() {}

func (o *WatchProbeResponse) MakeFullFieldMask() *WatchProbeResponse_FieldMask {
	return FullWatchProbeResponse_FieldMask()
}

func (o *WatchProbeResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbeResponse_FieldMask()
}

func (o *WatchProbeResponse) MakeDiffFieldMask(other *WatchProbeResponse) *WatchProbeResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbeResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbeResponse_FieldMask()
	}

	res := &WatchProbeResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbeResponse_FieldTerminalPath{selector: WatchProbeResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbeResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbeResponse))
}

func (o *WatchProbeResponse) Clone() *WatchProbeResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbeResponse{}
	result.Change = proto.Clone(o.Change).(*probe.ProbeChange)
	return result
}

func (o *WatchProbeResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbeResponse) Merge(source *WatchProbeResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probe.ProbeChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbeResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbeResponse))
}

func (o *WatchProbesRequest) GotenObjectExt() {}

func (o *WatchProbesRequest) MakeFullFieldMask() *WatchProbesRequest_FieldMask {
	return FullWatchProbesRequest_FieldMask()
}

func (o *WatchProbesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbesRequest_FieldMask()
}

func (o *WatchProbesRequest) MakeDiffFieldMask(other *WatchProbesRequest) *WatchProbesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbesRequest_FieldMask()
	}

	res := &WatchProbesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbesRequest))
}

func (o *WatchProbesRequest) Clone() *WatchProbesRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbesRequest) Merge(source *WatchProbesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbesRequest))
}

func (o *WatchProbesResponse) GotenObjectExt() {}

func (o *WatchProbesResponse) MakeFullFieldMask() *WatchProbesResponse_FieldMask {
	return FullWatchProbesResponse_FieldMask()
}

func (o *WatchProbesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbesResponse_FieldMask()
}

func (o *WatchProbesResponse) MakeDiffFieldMask(other *WatchProbesResponse) *WatchProbesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbesResponse_FieldMask()
	}

	res := &WatchProbesResponse_FieldMask{}

	if len(o.GetProbeChanges()) == len(other.GetProbeChanges()) {
		for i, lValue := range o.GetProbeChanges() {
			rValue := other.GetProbeChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorProbeChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorProbeChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbesResponse_FieldSubPath{selector: WatchProbesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbesResponse))
}

func (o *WatchProbesResponse) Clone() *WatchProbesResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbesResponse{}
	result.ProbeChanges = make([]*probe.ProbeChange, len(o.ProbeChanges))
	for i, sourceValue := range o.ProbeChanges {
		result.ProbeChanges[i] = proto.Clone(sourceValue).(*probe.ProbeChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbesResponse) Merge(source *WatchProbesResponse) {
	for _, sourceValue := range source.GetProbeChanges() {
		exists := false
		for _, currentValue := range o.ProbeChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.ProbeChange
			if sourceValue != nil {
				newDstElement = new(probe.ProbeChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbeChanges = append(o.ProbeChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbesResponse))
}

func (o *WatchProbesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbesResponse_PageTokenChange) MakeFullFieldMask() *WatchProbesResponse_PageTokenChange_FieldMask {
	return FullWatchProbesResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbesResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbesResponse_PageTokenChange) *WatchProbesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbesResponsePageTokenChange_FieldTerminalPath{selector: WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbesResponsePageTokenChange_FieldTerminalPath{selector: WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbesResponse_PageTokenChange))
}

func (o *WatchProbesResponse_PageTokenChange) Clone() *WatchProbesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbesResponse_PageTokenChange) Merge(source *WatchProbesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbesResponse_PageTokenChange))
}

func (o *CreateProbeRequest) GotenObjectExt() {}

func (o *CreateProbeRequest) MakeFullFieldMask() *CreateProbeRequest_FieldMask {
	return FullCreateProbeRequest_FieldMask()
}

func (o *CreateProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbeRequest_FieldMask()
}

func (o *CreateProbeRequest) MakeDiffFieldMask(other *CreateProbeRequest) *CreateProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbeRequest_FieldMask()
	}

	res := &CreateProbeRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbeRequest_FieldTerminalPath{selector: CreateProbeRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbe().MakeDiffFieldMask(other.GetProbe())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbeRequest_FieldTerminalPath{selector: CreateProbeRequest_FieldPathSelectorProbe})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbeRequest_FieldSubPath{selector: CreateProbeRequest_FieldPathSelectorProbe, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbeRequest))
}

func (o *CreateProbeRequest) Clone() *CreateProbeRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbeRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Probe = o.Probe.Clone()
	return result
}

func (o *CreateProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbeRequest) Merge(source *CreateProbeRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbe() != nil {
		if o.Probe == nil {
			o.Probe = new(probe.Probe)
		}
		o.Probe.Merge(source.GetProbe())
	}
}

func (o *CreateProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbeRequest))
}

func (o *UpdateProbeRequest) GotenObjectExt() {}

func (o *UpdateProbeRequest) MakeFullFieldMask() *UpdateProbeRequest_FieldMask {
	return FullUpdateProbeRequest_FieldMask()
}

func (o *UpdateProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbeRequest_FieldMask()
}

func (o *UpdateProbeRequest) MakeDiffFieldMask(other *UpdateProbeRequest) *UpdateProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbeRequest_FieldMask()
	}

	res := &UpdateProbeRequest_FieldMask{}
	{
		subMask := o.GetProbe().MakeDiffFieldMask(other.GetProbe())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorProbe})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeRequest_FieldSubPath{selector: UpdateProbeRequest_FieldPathSelectorProbe, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeRequest_FieldSubPath{selector: UpdateProbeRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbeRequest))
}

func (o *UpdateProbeRequest) Clone() *UpdateProbeRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbeRequest{}
	result.Probe = o.Probe.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probe.Probe_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbeRequest) Merge(source *UpdateProbeRequest) {
	if source.GetProbe() != nil {
		if o.Probe == nil {
			o.Probe = new(probe.Probe)
		}
		o.Probe.Merge(source.GetProbe())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbeRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbeRequest))
}

func (o *UpdateProbeRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbeRequest_CAS) MakeFullFieldMask() *UpdateProbeRequest_CAS_FieldMask {
	return FullUpdateProbeRequest_CAS_FieldMask()
}

func (o *UpdateProbeRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbeRequest_CAS_FieldMask()
}

func (o *UpdateProbeRequest_CAS) MakeDiffFieldMask(other *UpdateProbeRequest_CAS) *UpdateProbeRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbeRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbeRequest_CAS_FieldMask()
	}

	res := &UpdateProbeRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbeRequestCAS_FieldTerminalPath{selector: UpdateProbeRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbeRequestCAS_FieldSubPath{selector: UpdateProbeRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbeRequestCAS_FieldTerminalPath{selector: UpdateProbeRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbeRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbeRequest_CAS))
}

func (o *UpdateProbeRequest_CAS) Clone() *UpdateProbeRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbeRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	return result
}

func (o *UpdateProbeRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbeRequest_CAS) Merge(source *UpdateProbeRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probe.Probe)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbeRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbeRequest_CAS))
}

func (o *DeleteProbeRequest) GotenObjectExt() {}

func (o *DeleteProbeRequest) MakeFullFieldMask() *DeleteProbeRequest_FieldMask {
	return FullDeleteProbeRequest_FieldMask()
}

func (o *DeleteProbeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbeRequest_FieldMask()
}

func (o *DeleteProbeRequest) MakeDiffFieldMask(other *DeleteProbeRequest) *DeleteProbeRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbeRequest_FieldMask()
	}

	res := &DeleteProbeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbeRequest_FieldTerminalPath{selector: DeleteProbeRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbeRequest))
}

func (o *DeleteProbeRequest) Clone() *DeleteProbeRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbeRequest) Merge(source *DeleteProbeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbeRequest))
}

func (o *SearchProbesRequest) GotenObjectExt() {}

func (o *SearchProbesRequest) MakeFullFieldMask() *SearchProbesRequest_FieldMask {
	return FullSearchProbesRequest_FieldMask()
}

func (o *SearchProbesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbesRequest_FieldMask()
}

func (o *SearchProbesRequest) MakeDiffFieldMask(other *SearchProbesRequest) *SearchProbesRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbesRequest_FieldMask()
	}

	res := &SearchProbesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbesRequest))
}

func (o *SearchProbesRequest) Clone() *SearchProbesRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probe.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probe.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probe.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probe.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probe.Probe_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbesRequest) Merge(source *SearchProbesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probe.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probe.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probe.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probe.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probe.Probe_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbesRequest))
}

func (o *SearchProbesResponse) GotenObjectExt() {}

func (o *SearchProbesResponse) MakeFullFieldMask() *SearchProbesResponse_FieldMask {
	return FullSearchProbesResponse_FieldMask()
}

func (o *SearchProbesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbesResponse_FieldMask()
}

func (o *SearchProbesResponse) MakeDiffFieldMask(other *SearchProbesResponse) *SearchProbesResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbesResponse_FieldMask()
	}

	res := &SearchProbesResponse_FieldMask{}

	if len(o.GetProbes()) == len(other.GetProbes()) {
		for i, lValue := range o.GetProbes() {
			rValue := other.GetProbes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorProbes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorProbes})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbesResponse))
}

func (o *SearchProbesResponse) Clone() *SearchProbesResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbesResponse{}
	result.Probes = make([]*probe.Probe, len(o.Probes))
	for i, sourceValue := range o.Probes {
		result.Probes[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probe.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probe.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbesResponse) Merge(source *SearchProbesResponse) {
	for _, sourceValue := range source.GetProbes() {
		exists := false
		for _, currentValue := range o.Probes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probe.Probe
			if sourceValue != nil {
				newDstElement = new(probe.Probe)
				newDstElement.Merge(sourceValue)
			}
			o.Probes = append(o.Probes, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probe.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probe.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbesResponse))
}
