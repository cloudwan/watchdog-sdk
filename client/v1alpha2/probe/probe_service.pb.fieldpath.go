// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_service.proto
// DO NOT EDIT!!!

package probe_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probe.Probe{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbeRequest_FieldPathSelector
	Get(source *GetProbeRequest) []interface{}
	GetSingle(source *GetProbeRequest) (interface{}, bool)
	ClearValue(item *GetProbeRequest)

	// Those methods build corresponding GetProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbeRequest_FieldPathArrayItemValue
}

type GetProbeRequest_FieldPathSelector int32

const (
	GetProbeRequest_FieldPathSelectorName      GetProbeRequest_FieldPathSelector = 0
	GetProbeRequest_FieldPathSelectorFieldMask GetProbeRequest_FieldPathSelector = 1
	GetProbeRequest_FieldPathSelectorView      GetProbeRequest_FieldPathSelector = 2
)

func (s GetProbeRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbeRequest_FieldPathSelectorName:
		return "name"
	case GetProbeRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbeRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", s))
	}
}

func BuildGetProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbeRequest_FieldTerminalPath{selector: GetProbeRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbeRequest", fp)
}

func ParseGetProbeRequest_FieldPath(rawField string) (GetProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbeRequest_FieldPath(fp)
}

func MustParseGetProbeRequest_FieldPath(rawField string) GetProbeRequest_FieldPath {
	fp, err := ParseGetProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbeRequest_FieldTerminalPath struct {
	selector GetProbeRequest_FieldPathSelector
}

var _ GetProbeRequest_FieldPath = (*GetProbeRequest_FieldTerminalPath)(nil)

func (fp *GetProbeRequest_FieldTerminalPath) Selector() GetProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbeRequest
func (fp *GetProbeRequest_FieldTerminalPath) Get(source *GetProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbeRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbeRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbeRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbeRequest
func (fp *GetProbeRequest_FieldTerminalPath) GetSingle(source *GetProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbeRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbeRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
	}
}

func (fp *GetProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbeRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case GetProbeRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case GetProbeRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
	}
}

func (fp *GetProbeRequest_FieldTerminalPath) ClearValue(item *GetProbeRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbeRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbeRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbeRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbeRequest_FieldPathSelectorName ||
		fp.selector == GetProbeRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbeRequest_FieldPathSelectorView
}

func (fp *GetProbeRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbeRequest_FieldPathValue {
	switch fp.selector {
	case GetProbeRequest_FieldPathSelectorName:
		return &GetProbeRequest_FieldTerminalPathValue{GetProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetProbeRequest_FieldPathSelectorFieldMask:
		return &GetProbeRequest_FieldTerminalPathValue{GetProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case GetProbeRequest_FieldPathSelectorView:
		return &GetProbeRequest_FieldTerminalPathValue{GetProbeRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
	}
}

func (fp *GetProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbeRequest_FieldPathArrayOfValues {
	fpaov := &GetProbeRequest_FieldTerminalPathArrayOfValues{GetProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbeRequest_FieldPathSelectorName:
		return &GetProbeRequest_FieldTerminalPathArrayOfValues{GetProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetProbeRequest_FieldPathSelectorFieldMask:
		return &GetProbeRequest_FieldTerminalPathArrayOfValues{GetProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case GetProbeRequest_FieldPathSelectorView:
		return &GetProbeRequest_FieldTerminalPathArrayOfValues{GetProbeRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fp.selector))
	}
}

func (fp *GetProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbeRequest_FieldPathValue allows storing values for GetProbeRequest fields according to their type
type GetProbeRequest_FieldPathValue interface {
	GetProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbeRequest)
	CompareWith(*GetProbeRequest) (cmp int, comparable bool)
}

func ParseGetProbeRequest_FieldPathValue(pathStr, valueStr string) (GetProbeRequest_FieldPathValue, error) {
	fp, err := ParseGetProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbeRequest_FieldPathValue), nil
}

func MustParseGetProbeRequest_FieldPathValue(pathStr, valueStr string) GetProbeRequest_FieldPathValue {
	fpv, err := ParseGetProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbeRequest_FieldTerminalPathValue struct {
	GetProbeRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbeRequest_FieldPathValue = (*GetProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbeRequest' as interface{}
func (fpv *GetProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbeRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetProbeRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *GetProbeRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbeRequest
func (fpv *GetProbeRequest_FieldTerminalPathValue) SetTo(target **GetProbeRequest) {
	if *target == nil {
		*target = new(GetProbeRequest)
	}
	switch fpv.selector {
	case GetProbeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case GetProbeRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case GetProbeRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbeRequest_FieldTerminalPathValue' with the value under path in 'GetProbeRequest'.
func (fpv *GetProbeRequest_FieldTerminalPathValue) CompareWith(source *GetProbeRequest) (int, bool) {
	switch fpv.selector {
	case GetProbeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbeRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbeRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbeRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbeRequest))
}

// GetProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbeRequest according to their type
// Present only for array (repeated) types.
type GetProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbeRequest_FieldPath
	ContainsValue(*GetProbeRequest) bool
}

// ParseGetProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbeRequest_FieldTerminalPathArrayItemValue struct {
	GetProbeRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbeRequest_FieldPathArrayItemValue = (*GetProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbeRequest as interface{}
func (fpaiv *GetProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbeRequest'
func (fpaiv *GetProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbeRequest) bool {
	slice := fpaiv.GetProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbeRequest_FieldPathArrayOfValues allows storing slice of values for GetProbeRequest fields according to their type
type GetProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbeRequest_FieldPath
}

func ParseGetProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbeRequest_FieldTerminalPathArrayOfValues struct {
	GetProbeRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbeRequest_FieldPathArrayOfValues = (*GetProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetProbeRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case GetProbeRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetProbeRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *GetProbeRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbesRequest_FieldPathSelector
	Get(source *BatchGetProbesRequest) []interface{}
	GetSingle(source *BatchGetProbesRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbesRequest)

	// Those methods build corresponding BatchGetProbesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbesRequest_FieldPathArrayItemValue
}

type BatchGetProbesRequest_FieldPathSelector int32

const (
	BatchGetProbesRequest_FieldPathSelectorParent    BatchGetProbesRequest_FieldPathSelector = 0
	BatchGetProbesRequest_FieldPathSelectorNames     BatchGetProbesRequest_FieldPathSelector = 1
	BatchGetProbesRequest_FieldPathSelectorFieldMask BatchGetProbesRequest_FieldPathSelector = 2
	BatchGetProbesRequest_FieldPathSelectorView      BatchGetProbesRequest_FieldPathSelector = 3
)

func (s BatchGetProbesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", s))
	}
}

func BuildBatchGetProbesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbesRequest_FieldTerminalPath{selector: BatchGetProbesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbesRequest", fp)
}

func ParseBatchGetProbesRequest_FieldPath(rawField string) (BatchGetProbesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbesRequest_FieldPath(fp)
}

func MustParseBatchGetProbesRequest_FieldPath(rawField string) BatchGetProbesRequest_FieldPath {
	fp, err := ParseBatchGetProbesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbesRequest_FieldTerminalPath struct {
	selector BatchGetProbesRequest_FieldPathSelector
}

var _ BatchGetProbesRequest_FieldPath = (*BatchGetProbesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbesRequest_FieldTerminalPath) Selector() BatchGetProbesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbesRequest
func (fp *BatchGetProbesRequest_FieldTerminalPath) Get(source *BatchGetProbesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetProbesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbesRequest
func (fp *BatchGetProbesRequest_FieldTerminalPath) GetSingle(source *BatchGetProbesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetProbesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		return (*probe.Reference)(nil)
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return ([]*probe.Reference)(nil)
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case BatchGetProbesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) ClearValue(item *BatchGetProbesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetProbesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetProbesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbesRequest_FieldPathSelectorView
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		return &BatchGetProbesRequest_FieldTerminalPathValue{BatchGetProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return &BatchGetProbesRequest_FieldTerminalPathValue{BatchGetProbesRequest_FieldTerminalPath: *fp, value: value.([]*probe.Reference)}
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbesRequest_FieldTerminalPathValue{BatchGetProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case BatchGetProbesRequest_FieldPathSelectorView:
		return &BatchGetProbesRequest_FieldTerminalPathValue{BatchGetProbesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbesRequest_FieldTerminalPathArrayOfValues{BatchGetProbesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		return &BatchGetProbesRequest_FieldTerminalPathArrayOfValues{BatchGetProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return &BatchGetProbesRequest_FieldTerminalPathArrayOfValues{BatchGetProbesRequest_FieldTerminalPath: *fp, values: values.([][]*probe.Reference)}
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbesRequest_FieldTerminalPathArrayOfValues{BatchGetProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case BatchGetProbesRequest_FieldPathSelectorView:
		return &BatchGetProbesRequest_FieldTerminalPathArrayOfValues{BatchGetProbesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return &BatchGetProbesRequest_FieldTerminalPathArrayItemValue{BatchGetProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbesRequest_FieldPathValue allows storing values for BatchGetProbesRequest fields according to their type
type BatchGetProbesRequest_FieldPathValue interface {
	BatchGetProbesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbesRequest)
	CompareWith(*BatchGetProbesRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbesRequest_FieldPathValue), nil
}

func MustParseBatchGetProbesRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbesRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbesRequest_FieldTerminalPathValue struct {
	BatchGetProbesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbesRequest_FieldPathValue = (*BatchGetProbesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbesRequest' as interface{}
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) AsParentValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) AsNamesValue() ([]*probe.Reference, bool) {
	res, ok := fpv.value.([]*probe.Reference)
	return res, ok
}
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbesRequest
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbesRequest) {
	if *target == nil {
		*target = new(BatchGetProbesRequest)
	}
	switch fpv.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe.Reference)
	case BatchGetProbesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probe.Reference)
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case BatchGetProbesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbesRequest'.
func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetProbesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbesRequest))
}

// BatchGetProbesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbesRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbesRequest_FieldPath
	ContainsValue(*BatchGetProbesRequest) bool
}

// ParseBatchGetProbesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbesRequest_FieldPathArrayItemValue = (*BatchGetProbesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbesRequest as interface{}
func (fpaiv *BatchGetProbesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probe.Reference, bool) {
	res, ok := fpaiv.value.(*probe.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbesRequest'
func (fpaiv *BatchGetProbesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbesRequest) bool {
	slice := fpaiv.BatchGetProbesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbesRequest fields according to their type
type BatchGetProbesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbesRequest_FieldPath
}

func ParseBatchGetProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbesRequest_FieldPathArrayOfValues = (*BatchGetProbesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case BatchGetProbesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probe.Reference) {
			values = append(values, v)
		}
	case BatchGetProbesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *BatchGetProbesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probe.Reference, bool) {
	res, ok := fpaov.values.([][]*probe.Reference)
	return res, ok
}
func (fpaov *BatchGetProbesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbesResponse_FieldPathSelector
	Get(source *BatchGetProbesResponse) []interface{}
	GetSingle(source *BatchGetProbesResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbesResponse)

	// Those methods build corresponding BatchGetProbesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbesResponse_FieldPathArrayItemValue
}

type BatchGetProbesResponse_FieldPathSelector int32

const (
	BatchGetProbesResponse_FieldPathSelectorProbes  BatchGetProbesResponse_FieldPathSelector = 0
	BatchGetProbesResponse_FieldPathSelectorMissing BatchGetProbesResponse_FieldPathSelector = 1
)

func (s BatchGetProbesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return "probes"
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", s))
	}
}

func BuildBatchGetProbesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probes":
			return &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorProbes}, nil
		case "missing":
			return &BatchGetProbesResponse_FieldTerminalPath{selector: BatchGetProbesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probes":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbesResponse_FieldSubPath{selector: BatchGetProbesResponse_FieldPathSelectorProbes, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbesResponse", fp)
}

func ParseBatchGetProbesResponse_FieldPath(rawField string) (BatchGetProbesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbesResponse_FieldPath(fp)
}

func MustParseBatchGetProbesResponse_FieldPath(rawField string) BatchGetProbesResponse_FieldPath {
	fp, err := ParseBatchGetProbesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbesResponse_FieldTerminalPath struct {
	selector BatchGetProbesResponse_FieldPathSelector
}

var _ BatchGetProbesResponse_FieldPath = (*BatchGetProbesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbesResponse_FieldTerminalPath) Selector() BatchGetProbesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbesResponse
func (fp *BatchGetProbesResponse_FieldTerminalPath) Get(source *BatchGetProbesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbesResponse_FieldPathSelectorProbes:
			for _, value := range source.GetProbes() {
				values = append(values, value)
			}
		case BatchGetProbesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbesResponse
func (fp *BatchGetProbesResponse_FieldTerminalPath) GetSingle(source *BatchGetProbesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		res := source.GetProbes()
		return res, res != nil
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return ([]*probe.Probe)(nil)
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return ([]*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) ClearValue(item *BatchGetProbesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbesResponse_FieldPathSelectorProbes:
			item.Probes = nil
		case BatchGetProbesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return &BatchGetProbesResponse_FieldTerminalPathValue{BatchGetProbesResponse_FieldTerminalPath: *fp, value: value.([]*probe.Probe)}
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return &BatchGetProbesResponse_FieldTerminalPathValue{BatchGetProbesResponse_FieldTerminalPath: *fp, value: value.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbesResponse_FieldTerminalPathArrayOfValues{BatchGetProbesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return &BatchGetProbesResponse_FieldTerminalPathArrayOfValues{BatchGetProbesResponse_FieldTerminalPath: *fp, values: values.([][]*probe.Probe)}
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return &BatchGetProbesResponse_FieldTerminalPathArrayOfValues{BatchGetProbesResponse_FieldTerminalPath: *fp, values: values.([][]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return &BatchGetProbesResponse_FieldTerminalPathArrayItemValue{BatchGetProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return &BatchGetProbesResponse_FieldTerminalPathArrayItemValue{BatchGetProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbesResponse_FieldSubPath struct {
	selector BatchGetProbesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbesResponse_FieldPath = (*BatchGetProbesResponse_FieldSubPath)(nil)

func (fps *BatchGetProbesResponse_FieldSubPath) Selector() BatchGetProbesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbesResponse_FieldSubPath) AsProbesSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbesResponse
func (fps *BatchGetProbesResponse_FieldSubPath) Get(source *BatchGetProbesResponse) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbesSubPath(); ok {
		for _, item := range source.GetProbes() {
			values = append(values, asProbeFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbesResponse))
}

// GetSingle returns value of selected field from source BatchGetProbesResponse
func (fps *BatchGetProbesResponse_FieldSubPath) GetSingle(source *BatchGetProbesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		if len(source.GetProbes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbes()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbesResponse_FieldSubPath) ClearValue(item *BatchGetProbesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbesResponse_FieldPathSelectorProbes:
			for _, subItem := range item.Probes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbesResponse_FieldPathValue {
	return &BatchGetProbesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbesResponse_FieldPathArrayOfValues {
	return &BatchGetProbesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbesResponse_FieldPathArrayItemValue {
	return &BatchGetProbesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbesResponse_FieldPathValue allows storing values for BatchGetProbesResponse fields according to their type
type BatchGetProbesResponse_FieldPathValue interface {
	BatchGetProbesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbesResponse)
	CompareWith(*BatchGetProbesResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbesResponse_FieldPathValue), nil
}

func MustParseBatchGetProbesResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbesResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbesResponse_FieldTerminalPathValue struct {
	BatchGetProbesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbesResponse_FieldPathValue = (*BatchGetProbesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbesResponse' as interface{}
func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) AsProbesValue() ([]*probe.Probe, bool) {
	res, ok := fpv.value.([]*probe.Probe)
	return res, ok
}
func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) AsMissingValue() ([]*probe.Reference, bool) {
	res, ok := fpv.value.([]*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbesResponse
func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbesResponse) {
	if *target == nil {
		*target = new(BatchGetProbesResponse)
	}
	switch fpv.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		(*target).Probes = fpv.value.([]*probe.Probe)
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbesResponse'.
func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return 0, false
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbesResponse))
}

type BatchGetProbesResponse_FieldSubPathValue struct {
	BatchGetProbesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbesResponse_FieldPathValue = (*BatchGetProbesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) AsProbesPathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) SetTo(target **BatchGetProbesResponse) {
	if *target == nil {
		*target = new(BatchGetProbesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) CompareWith(source *BatchGetProbesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbesResponse))
}

// BatchGetProbesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbesResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbesResponse_FieldPath
	ContainsValue(*BatchGetProbesResponse) bool
}

// ParseBatchGetProbesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbesResponse_FieldPathArrayItemValue = (*BatchGetProbesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbesResponse as interface{}
func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) AsProbesItemValue() (*probe.Probe, bool) {
	res, ok := fpaiv.value.(*probe.Probe)
	return res, ok
}
func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probe.Reference, bool) {
	res, ok := fpaiv.value.(*probe.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbesResponse'
func (fpaiv *BatchGetProbesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbesResponse) bool {
	slice := fpaiv.BatchGetProbesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbesResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbesResponse_FieldSubPathArrayItemValue) AsProbesPathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbesResponse'
func (fpaivs *BatchGetProbesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbesResponse fields according to their type
type BatchGetProbesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbesResponse_FieldPath
}

func ParseBatchGetProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbesResponse_FieldPathArrayOfValues = (*BatchGetProbesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbesResponse_FieldPathSelectorProbes:
		for _, v := range fpaov.values.([][]*probe.Probe) {
			values = append(values, v)
		}
	case BatchGetProbesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbesResponse_FieldTerminalPathArrayOfValues) AsProbesArrayOfValues() ([][]*probe.Probe, bool) {
	res, ok := fpaov.values.([][]*probe.Probe)
	return res, ok
}
func (fpaov *BatchGetProbesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probe.Reference, bool) {
	res, ok := fpaov.values.([][]*probe.Reference)
	return res, ok
}

type BatchGetProbesResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbesResponse_FieldPathArrayOfValues = (*BatchGetProbesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbesResponse_FieldSubPathArrayOfValues) AsProbesPathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbesRequest_FieldPathSelector
	Get(source *ListProbesRequest) []interface{}
	GetSingle(source *ListProbesRequest) (interface{}, bool)
	ClearValue(item *ListProbesRequest)

	// Those methods build corresponding ListProbesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbesRequest_FieldPathArrayItemValue
}

type ListProbesRequest_FieldPathSelector int32

const (
	ListProbesRequest_FieldPathSelectorParent    ListProbesRequest_FieldPathSelector = 0
	ListProbesRequest_FieldPathSelectorPageSize  ListProbesRequest_FieldPathSelector = 1
	ListProbesRequest_FieldPathSelectorPageToken ListProbesRequest_FieldPathSelector = 2
	ListProbesRequest_FieldPathSelectorOrderBy   ListProbesRequest_FieldPathSelector = 3
	ListProbesRequest_FieldPathSelectorFilter    ListProbesRequest_FieldPathSelector = 4
	ListProbesRequest_FieldPathSelectorFieldMask ListProbesRequest_FieldPathSelector = 5
	ListProbesRequest_FieldPathSelectorView      ListProbesRequest_FieldPathSelector = 6
)

func (s ListProbesRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbesRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", s))
	}
}

func BuildListProbesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbesRequest_FieldTerminalPath{selector: ListProbesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbesRequest", fp)
}

func ParseListProbesRequest_FieldPath(rawField string) (ListProbesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbesRequest_FieldPath(fp)
}

func MustParseListProbesRequest_FieldPath(rawField string) ListProbesRequest_FieldPath {
	fp, err := ParseListProbesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbesRequest_FieldTerminalPath struct {
	selector ListProbesRequest_FieldPathSelector
}

var _ ListProbesRequest_FieldPath = (*ListProbesRequest_FieldTerminalPath)(nil)

func (fp *ListProbesRequest_FieldTerminalPath) Selector() ListProbesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbesRequest
func (fp *ListProbesRequest_FieldTerminalPath) Get(source *ListProbesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbesRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbesRequest
func (fp *ListProbesRequest_FieldTerminalPath) GetSingle(source *ListProbesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
	}
}

func (fp *ListProbesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		return (*probe.ParentName)(nil)
	case ListProbesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbesRequest_FieldPathSelectorPageToken:
		return (*probe.PagerCursor)(nil)
	case ListProbesRequest_FieldPathSelectorOrderBy:
		return (*probe.OrderBy)(nil)
	case ListProbesRequest_FieldPathSelectorFilter:
		return (*probe.Filter)(nil)
	case ListProbesRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case ListProbesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
	}
}

func (fp *ListProbesRequest_FieldTerminalPath) ClearValue(item *ListProbesRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbesRequest_FieldPathSelectorParent ||
		fp.selector == ListProbesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbesRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbesRequest_FieldPathSelectorView
}

func (fp *ListProbesRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbesRequest_FieldPathValue {
	switch fp.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.ParentName)}
	case ListProbesRequest_FieldPathSelectorPageSize:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbesRequest_FieldPathSelectorPageToken:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case ListProbesRequest_FieldPathSelectorOrderBy:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.OrderBy)}
	case ListProbesRequest_FieldPathSelectorFilter:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Filter)}
	case ListProbesRequest_FieldPathSelectorFieldMask:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case ListProbesRequest_FieldPathSelectorView:
		return &ListProbesRequest_FieldTerminalPathValue{ListProbesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
	}
}

func (fp *ListProbesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbesRequest_FieldPathArrayOfValues {
	fpaov := &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.ParentName)}
	case ListProbesRequest_FieldPathSelectorPageSize:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbesRequest_FieldPathSelectorPageToken:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case ListProbesRequest_FieldPathSelectorOrderBy:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.OrderBy)}
	case ListProbesRequest_FieldPathSelectorFilter:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Filter)}
	case ListProbesRequest_FieldPathSelectorFieldMask:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case ListProbesRequest_FieldPathSelectorView:
		return &ListProbesRequest_FieldTerminalPathArrayOfValues{ListProbesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fp.selector))
	}
}

func (fp *ListProbesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbesRequest_FieldPathValue allows storing values for ListProbesRequest fields according to their type
type ListProbesRequest_FieldPathValue interface {
	ListProbesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbesRequest)
	CompareWith(*ListProbesRequest) (cmp int, comparable bool)
}

func ParseListProbesRequest_FieldPathValue(pathStr, valueStr string) (ListProbesRequest_FieldPathValue, error) {
	fp, err := ParseListProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbesRequest_FieldPathValue), nil
}

func MustParseListProbesRequest_FieldPathValue(pathStr, valueStr string) ListProbesRequest_FieldPathValue {
	fpv, err := ParseListProbesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbesRequest_FieldTerminalPathValue struct {
	ListProbesRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbesRequest_FieldPathValue = (*ListProbesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbesRequest' as interface{}
func (fpv *ListProbesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsParentValue() (*probe.ParentName, bool) {
	res, ok := fpv.value.(*probe.ParentName)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsOrderByValue() (*probe.OrderBy, bool) {
	res, ok := fpv.value.(*probe.OrderBy)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsFilterValue() (*probe.Filter, bool) {
	res, ok := fpv.value.(*probe.Filter)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *ListProbesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbesRequest
func (fpv *ListProbesRequest_FieldTerminalPathValue) SetTo(target **ListProbesRequest) {
	if *target == nil {
		*target = new(ListProbesRequest)
	}
	switch fpv.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe.ParentName)
	case ListProbesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe.PagerCursor)
	case ListProbesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe.OrderBy)
	case ListProbesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe.Filter)
	case ListProbesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case ListProbesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbesRequest_FieldTerminalPathValue' with the value under path in 'ListProbesRequest'.
func (fpv *ListProbesRequest_FieldTerminalPathValue) CompareWith(source *ListProbesRequest) (int, bool) {
	switch fpv.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbesRequest))
}

// ListProbesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbesRequest according to their type
// Present only for array (repeated) types.
type ListProbesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbesRequest_FieldPath
	ContainsValue(*ListProbesRequest) bool
}

// ParseListProbesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbesRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbesRequest_FieldTerminalPathArrayItemValue struct {
	ListProbesRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbesRequest_FieldPathArrayItemValue = (*ListProbesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbesRequest as interface{}
func (fpaiv *ListProbesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbesRequest'
func (fpaiv *ListProbesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbesRequest) bool {
	slice := fpaiv.ListProbesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbesRequest_FieldPathArrayOfValues allows storing slice of values for ListProbesRequest fields according to their type
type ListProbesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbesRequest_FieldPath
}

func ParseListProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbesRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbesRequest_FieldTerminalPathArrayOfValues struct {
	ListProbesRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbesRequest_FieldPathArrayOfValues = (*ListProbesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe.ParentName) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe.OrderBy) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe.Filter) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case ListProbesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe.ParentName, bool) {
	res, ok := fpaov.values.([]*probe.ParentName)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe.OrderBy)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe.Filter, bool) {
	res, ok := fpaov.values.([]*probe.Filter)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *ListProbesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbesResponse_FieldPathSelector
	Get(source *ListProbesResponse) []interface{}
	GetSingle(source *ListProbesResponse) (interface{}, bool)
	ClearValue(item *ListProbesResponse)

	// Those methods build corresponding ListProbesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbesResponse_FieldPathArrayItemValue
}

type ListProbesResponse_FieldPathSelector int32

const (
	ListProbesResponse_FieldPathSelectorProbes        ListProbesResponse_FieldPathSelector = 0
	ListProbesResponse_FieldPathSelectorPrevPageToken ListProbesResponse_FieldPathSelector = 1
	ListProbesResponse_FieldPathSelectorNextPageToken ListProbesResponse_FieldPathSelector = 2
)

func (s ListProbesResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbesResponse_FieldPathSelectorProbes:
		return "probes"
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", s))
	}
}

func BuildListProbesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probes":
			return &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorProbes}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbesResponse_FieldTerminalPath{selector: ListProbesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probes":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbesResponse_FieldSubPath{selector: ListProbesResponse_FieldPathSelectorProbes, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbesResponse", fp)
}

func ParseListProbesResponse_FieldPath(rawField string) (ListProbesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbesResponse_FieldPath(fp)
}

func MustParseListProbesResponse_FieldPath(rawField string) ListProbesResponse_FieldPath {
	fp, err := ParseListProbesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbesResponse_FieldTerminalPath struct {
	selector ListProbesResponse_FieldPathSelector
}

var _ ListProbesResponse_FieldPath = (*ListProbesResponse_FieldTerminalPath)(nil)

func (fp *ListProbesResponse_FieldTerminalPath) Selector() ListProbesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbesResponse
func (fp *ListProbesResponse_FieldTerminalPath) Get(source *ListProbesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbesResponse_FieldPathSelectorProbes:
			for _, value := range source.GetProbes() {
				values = append(values, value)
			}
		case ListProbesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbesResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbesResponse
func (fp *ListProbesResponse_FieldTerminalPath) GetSingle(source *ListProbesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		res := source.GetProbes()
		return res, res != nil
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
	}
}

func (fp *ListProbesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		return ([]*probe.Probe)(nil)
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		return (*probe.PagerCursor)(nil)
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		return (*probe.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
	}
}

func (fp *ListProbesResponse_FieldTerminalPath) ClearValue(item *ListProbesResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbesResponse_FieldPathSelectorProbes:
			item.Probes = nil
		case ListProbesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbesResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbesResponse_FieldPathValue {
	switch fp.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		return &ListProbesResponse_FieldTerminalPathValue{ListProbesResponse_FieldTerminalPath: *fp, value: value.([]*probe.Probe)}
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		return &ListProbesResponse_FieldTerminalPathValue{ListProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		return &ListProbesResponse_FieldTerminalPathValue{ListProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
	}
}

func (fp *ListProbesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbesResponse_FieldPathArrayOfValues {
	fpaov := &ListProbesResponse_FieldTerminalPathArrayOfValues{ListProbesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		return &ListProbesResponse_FieldTerminalPathArrayOfValues{ListProbesResponse_FieldTerminalPath: *fp, values: values.([][]*probe.Probe)}
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		return &ListProbesResponse_FieldTerminalPathArrayOfValues{ListProbesResponse_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		return &ListProbesResponse_FieldTerminalPathArrayOfValues{ListProbesResponse_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		return &ListProbesResponse_FieldTerminalPathArrayItemValue{ListProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fp.selector))
	}
}

func (fp *ListProbesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbesResponse_FieldSubPath struct {
	selector ListProbesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbesResponse_FieldPath = (*ListProbesResponse_FieldSubPath)(nil)

func (fps *ListProbesResponse_FieldSubPath) Selector() ListProbesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbesResponse_FieldSubPath) AsProbesSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbesResponse
func (fps *ListProbesResponse_FieldSubPath) Get(source *ListProbesResponse) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbesSubPath(); ok {
		for _, item := range source.GetProbes() {
			values = append(values, asProbeFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbesResponse))
}

// GetSingle returns value of selected field from source ListProbesResponse
func (fps *ListProbesResponse_FieldSubPath) GetSingle(source *ListProbesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		if len(source.GetProbes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbes()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fps.selector))
	}
}

func (fps *ListProbesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbesResponse_FieldSubPath) ClearValue(item *ListProbesResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbesResponse_FieldPathSelectorProbes:
			for _, subItem := range item.Probes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbesResponse_FieldSubPath) WithIValue(value interface{}) ListProbesResponse_FieldPathValue {
	return &ListProbesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbesResponse_FieldPathArrayOfValues {
	return &ListProbesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbesResponse_FieldPathArrayItemValue {
	return &ListProbesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbesResponse_FieldPathValue allows storing values for ListProbesResponse fields according to their type
type ListProbesResponse_FieldPathValue interface {
	ListProbesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbesResponse)
	CompareWith(*ListProbesResponse) (cmp int, comparable bool)
}

func ParseListProbesResponse_FieldPathValue(pathStr, valueStr string) (ListProbesResponse_FieldPathValue, error) {
	fp, err := ParseListProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbesResponse_FieldPathValue), nil
}

func MustParseListProbesResponse_FieldPathValue(pathStr, valueStr string) ListProbesResponse_FieldPathValue {
	fpv, err := ParseListProbesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbesResponse_FieldTerminalPathValue struct {
	ListProbesResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbesResponse_FieldPathValue = (*ListProbesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbesResponse' as interface{}
func (fpv *ListProbesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbesResponse_FieldTerminalPathValue) AsProbesValue() ([]*probe.Probe, bool) {
	res, ok := fpv.value.([]*probe.Probe)
	return res, ok
}
func (fpv *ListProbesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *ListProbesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbesResponse
func (fpv *ListProbesResponse_FieldTerminalPathValue) SetTo(target **ListProbesResponse) {
	if *target == nil {
		*target = new(ListProbesResponse)
	}
	switch fpv.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		(*target).Probes = fpv.value.([]*probe.Probe)
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe.PagerCursor)
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbesResponse_FieldTerminalPathValue' with the value under path in 'ListProbesResponse'.
func (fpv *ListProbesResponse_FieldTerminalPathValue) CompareWith(source *ListProbesResponse) (int, bool) {
	switch fpv.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		return 0, false
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbesResponse))
}

type ListProbesResponse_FieldSubPathValue struct {
	ListProbesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbesResponse_FieldPathValue = (*ListProbesResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbesResponse_FieldSubPathValue) AsProbesPathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbesResponse_FieldSubPathValue) SetTo(target **ListProbesResponse) {
	if *target == nil {
		*target = new(ListProbesResponse)
	}
	switch fpvs.Selector() {
	case ListProbesResponse_FieldPathSelectorProbes:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbesResponse_FieldSubPathValue) CompareWith(source *ListProbesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbesResponse_FieldPathSelectorProbes:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbesResponse))
}

// ListProbesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbesResponse according to their type
// Present only for array (repeated) types.
type ListProbesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbesResponse_FieldPath
	ContainsValue(*ListProbesResponse) bool
}

// ParseListProbesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbesResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbesResponse_FieldTerminalPathArrayItemValue struct {
	ListProbesResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbesResponse_FieldPathArrayItemValue = (*ListProbesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbesResponse as interface{}
func (fpaiv *ListProbesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbesResponse_FieldTerminalPathArrayItemValue) AsProbesItemValue() (*probe.Probe, bool) {
	res, ok := fpaiv.value.(*probe.Probe)
	return res, ok
}

func (fpaiv *ListProbesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbesResponse'
func (fpaiv *ListProbesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbesResponse) bool {
	slice := fpaiv.ListProbesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbesResponse_FieldSubPathArrayItemValue struct {
	ListProbesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbesResponse_FieldSubPathArrayItemValue) AsProbesPathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbesResponse'
func (fpaivs *ListProbesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbesResponse) bool {
	switch fpaivs.Selector() {
	case ListProbesResponse_FieldPathSelectorProbes:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbesResponse: %d", fpaivs.Selector()))
	}
}

// ListProbesResponse_FieldPathArrayOfValues allows storing slice of values for ListProbesResponse fields according to their type
type ListProbesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbesResponse_FieldPath
}

func ParseListProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbesResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbesResponse_FieldTerminalPathArrayOfValues struct {
	ListProbesResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbesResponse_FieldPathArrayOfValues = (*ListProbesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbesResponse_FieldPathSelectorProbes:
		for _, v := range fpaov.values.([][]*probe.Probe) {
			values = append(values, v)
		}
	case ListProbesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case ListProbesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbesResponse_FieldTerminalPathArrayOfValues) AsProbesArrayOfValues() ([][]*probe.Probe, bool) {
	res, ok := fpaov.values.([][]*probe.Probe)
	return res, ok
}
func (fpaov *ListProbesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *ListProbesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}

type ListProbesResponse_FieldSubPathArrayOfValues struct {
	ListProbesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbesResponse_FieldPathArrayOfValues = (*ListProbesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbesResponse_FieldSubPathArrayOfValues) AsProbesPathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeRequest_FieldPathSelector
	Get(source *WatchProbeRequest) []interface{}
	GetSingle(source *WatchProbeRequest) (interface{}, bool)
	ClearValue(item *WatchProbeRequest)

	// Those methods build corresponding WatchProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeRequest_FieldPathArrayItemValue
}

type WatchProbeRequest_FieldPathSelector int32

const (
	WatchProbeRequest_FieldPathSelectorName      WatchProbeRequest_FieldPathSelector = 0
	WatchProbeRequest_FieldPathSelectorFieldMask WatchProbeRequest_FieldPathSelector = 1
	WatchProbeRequest_FieldPathSelectorView      WatchProbeRequest_FieldPathSelector = 2
)

func (s WatchProbeRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbeRequest_FieldPathSelectorName:
		return "name"
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbeRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", s))
	}
}

func BuildWatchProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbeRequest_FieldTerminalPath{selector: WatchProbeRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeRequest", fp)
}

func ParseWatchProbeRequest_FieldPath(rawField string) (WatchProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeRequest_FieldPath(fp)
}

func MustParseWatchProbeRequest_FieldPath(rawField string) WatchProbeRequest_FieldPath {
	fp, err := ParseWatchProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeRequest_FieldTerminalPath struct {
	selector WatchProbeRequest_FieldPathSelector
}

var _ WatchProbeRequest_FieldPath = (*WatchProbeRequest_FieldTerminalPath)(nil)

func (fp *WatchProbeRequest_FieldTerminalPath) Selector() WatchProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeRequest
func (fp *WatchProbeRequest_FieldTerminalPath) Get(source *WatchProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbeRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbeRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbeRequest
func (fp *WatchProbeRequest_FieldTerminalPath) GetSingle(source *WatchProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbeRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case WatchProbeRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeRequest_FieldTerminalPath) ClearValue(item *WatchProbeRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbeRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbeRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbeRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeRequest_FieldPathSelectorName ||
		fp.selector == WatchProbeRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbeRequest_FieldPathSelectorView
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbeRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		return &WatchProbeRequest_FieldTerminalPathValue{WatchProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		return &WatchProbeRequest_FieldTerminalPathValue{WatchProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case WatchProbeRequest_FieldPathSelectorView:
		return &WatchProbeRequest_FieldTerminalPathValue{WatchProbeRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbeRequest_FieldTerminalPathArrayOfValues{WatchProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		return &WatchProbeRequest_FieldTerminalPathArrayOfValues{WatchProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		return &WatchProbeRequest_FieldTerminalPathArrayOfValues{WatchProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case WatchProbeRequest_FieldPathSelectorView:
		return &WatchProbeRequest_FieldTerminalPathArrayOfValues{WatchProbeRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fp.selector))
	}
}

func (fp *WatchProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeRequest_FieldPathValue allows storing values for WatchProbeRequest fields according to their type
type WatchProbeRequest_FieldPathValue interface {
	WatchProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeRequest)
	CompareWith(*WatchProbeRequest) (cmp int, comparable bool)
}

func ParseWatchProbeRequest_FieldPathValue(pathStr, valueStr string) (WatchProbeRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeRequest_FieldPathValue), nil
}

func MustParseWatchProbeRequest_FieldPathValue(pathStr, valueStr string) WatchProbeRequest_FieldPathValue {
	fpv, err := ParseWatchProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeRequest_FieldTerminalPathValue struct {
	WatchProbeRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeRequest_FieldPathValue = (*WatchProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeRequest' as interface{}
func (fpv *WatchProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *WatchProbeRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *WatchProbeRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeRequest
func (fpv *WatchProbeRequest_FieldTerminalPathValue) SetTo(target **WatchProbeRequest) {
	if *target == nil {
		*target = new(WatchProbeRequest)
	}
	switch fpv.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case WatchProbeRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeRequest_FieldTerminalPathValue' with the value under path in 'WatchProbeRequest'.
func (fpv *WatchProbeRequest_FieldTerminalPathValue) CompareWith(source *WatchProbeRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbeRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeRequest))
}

// WatchProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeRequest according to their type
// Present only for array (repeated) types.
type WatchProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeRequest_FieldPath
	ContainsValue(*WatchProbeRequest) bool
}

// ParseWatchProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbeRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbeRequest_FieldPathArrayItemValue = (*WatchProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeRequest as interface{}
func (fpaiv *WatchProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeRequest'
func (fpaiv *WatchProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeRequest) bool {
	slice := fpaiv.WatchProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbeRequest fields according to their type
type WatchProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeRequest_FieldPath
}

func ParseWatchProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbeRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbeRequest_FieldPathArrayOfValues = (*WatchProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case WatchProbeRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case WatchProbeRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *WatchProbeRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *WatchProbeRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbeResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbeResponse_FieldPathSelector
	Get(source *WatchProbeResponse) []interface{}
	GetSingle(source *WatchProbeResponse) (interface{}, bool)
	ClearValue(item *WatchProbeResponse)

	// Those methods build corresponding WatchProbeResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbeResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbeResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbeResponse_FieldPathArrayItemValue
}

type WatchProbeResponse_FieldPathSelector int32

const (
	WatchProbeResponse_FieldPathSelectorChange WatchProbeResponse_FieldPathSelector = 0
)

func (s WatchProbeResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbeResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", s))
	}
}

func BuildWatchProbeResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbeResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbeResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbeResponse_FieldTerminalPath{selector: WatchProbeResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbeResponse", fp)
}

func ParseWatchProbeResponse_FieldPath(rawField string) (WatchProbeResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbeResponse_FieldPath(fp)
}

func MustParseWatchProbeResponse_FieldPath(rawField string) WatchProbeResponse_FieldPath {
	fp, err := ParseWatchProbeResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbeResponse_FieldTerminalPath struct {
	selector WatchProbeResponse_FieldPathSelector
}

var _ WatchProbeResponse_FieldPath = (*WatchProbeResponse_FieldTerminalPath)(nil)

func (fp *WatchProbeResponse_FieldTerminalPath) Selector() WatchProbeResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbeResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbeResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbeResponse
func (fp *WatchProbeResponse_FieldTerminalPath) Get(source *WatchProbeResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbeResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbeResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbeResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbeResponse
func (fp *WatchProbeResponse_FieldTerminalPath) GetSingle(source *WatchProbeResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbeResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbeResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		return (*probe.ProbeChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeResponse_FieldTerminalPath) ClearValue(item *WatchProbeResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbeResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbeResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbeResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbeResponse_FieldPathSelectorChange
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbeResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		return &WatchProbeResponse_FieldTerminalPathValue{WatchProbeResponse_FieldTerminalPath: *fp, value: value.(*probe.ProbeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbeResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbeResponse_FieldTerminalPathArrayOfValues{WatchProbeResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		return &WatchProbeResponse_FieldTerminalPathArrayOfValues{WatchProbeResponse_FieldTerminalPath: *fp, values: values.([]*probe.ProbeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbeResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fp.selector))
	}
}

func (fp *WatchProbeResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbeResponse_FieldPathValue allows storing values for WatchProbeResponse fields according to their type
type WatchProbeResponse_FieldPathValue interface {
	WatchProbeResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbeResponse)
	CompareWith(*WatchProbeResponse) (cmp int, comparable bool)
}

func ParseWatchProbeResponse_FieldPathValue(pathStr, valueStr string) (WatchProbeResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbeResponse_FieldPathValue), nil
}

func MustParseWatchProbeResponse_FieldPathValue(pathStr, valueStr string) WatchProbeResponse_FieldPathValue {
	fpv, err := ParseWatchProbeResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbeResponse_FieldTerminalPathValue struct {
	WatchProbeResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeResponse_FieldPathValue = (*WatchProbeResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbeResponse' as interface{}
func (fpv *WatchProbeResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbeResponse_FieldTerminalPathValue) AsChangeValue() (*probe.ProbeChange, bool) {
	res, ok := fpv.value.(*probe.ProbeChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbeResponse
func (fpv *WatchProbeResponse_FieldTerminalPathValue) SetTo(target **WatchProbeResponse) {
	if *target == nil {
		*target = new(WatchProbeResponse)
	}
	switch fpv.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probe.ProbeChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbeResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbeResponse_FieldTerminalPathValue' with the value under path in 'WatchProbeResponse'.
func (fpv *WatchProbeResponse_FieldTerminalPathValue) CompareWith(source *WatchProbeResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbeResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbeResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbeResponse))
}

// WatchProbeResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbeResponse according to their type
// Present only for array (repeated) types.
type WatchProbeResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbeResponse_FieldPath
	ContainsValue(*WatchProbeResponse) bool
}

// ParseWatchProbeResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbeResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbeResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbeResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbeResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbeResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbeResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbeResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbeResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbeResponse_FieldPathArrayItemValue = (*WatchProbeResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbeResponse as interface{}
func (fpaiv *WatchProbeResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbeResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbeResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbeResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbeResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbeResponse'
func (fpaiv *WatchProbeResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbeResponse) bool {
	slice := fpaiv.WatchProbeResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbeResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbeResponse fields according to their type
type WatchProbeResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbeResponse_FieldPath
}

func ParseWatchProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbeResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbeResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbeResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbeResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbeResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbeResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbeResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbeResponse_FieldPathArrayOfValues = (*WatchProbeResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbeResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbeResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probe.ProbeChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbeResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probe.ProbeChange, bool) {
	res, ok := fpaov.values.([]*probe.ProbeChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbesRequest_FieldPathSelector
	Get(source *WatchProbesRequest) []interface{}
	GetSingle(source *WatchProbesRequest) (interface{}, bool)
	ClearValue(item *WatchProbesRequest)

	// Those methods build corresponding WatchProbesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbesRequest_FieldPathArrayItemValue
}

type WatchProbesRequest_FieldPathSelector int32

const (
	WatchProbesRequest_FieldPathSelectorType         WatchProbesRequest_FieldPathSelector = 0
	WatchProbesRequest_FieldPathSelectorParent       WatchProbesRequest_FieldPathSelector = 1
	WatchProbesRequest_FieldPathSelectorPageSize     WatchProbesRequest_FieldPathSelector = 2
	WatchProbesRequest_FieldPathSelectorPageToken    WatchProbesRequest_FieldPathSelector = 3
	WatchProbesRequest_FieldPathSelectorOrderBy      WatchProbesRequest_FieldPathSelector = 4
	WatchProbesRequest_FieldPathSelectorResumeToken  WatchProbesRequest_FieldPathSelector = 5
	WatchProbesRequest_FieldPathSelectorFilter       WatchProbesRequest_FieldPathSelector = 6
	WatchProbesRequest_FieldPathSelectorFieldMask    WatchProbesRequest_FieldPathSelector = 7
	WatchProbesRequest_FieldPathSelectorView         WatchProbesRequest_FieldPathSelector = 8
	WatchProbesRequest_FieldPathSelectorMaxChunkSize WatchProbesRequest_FieldPathSelector = 9
)

func (s WatchProbesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbesRequest_FieldPathSelectorType:
		return "type"
	case WatchProbesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbesRequest_FieldPathSelectorView:
		return "view"
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", s))
	}
}

func BuildWatchProbesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbesRequest_FieldTerminalPath{selector: WatchProbesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbesRequest", fp)
}

func ParseWatchProbesRequest_FieldPath(rawField string) (WatchProbesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbesRequest_FieldPath(fp)
}

func MustParseWatchProbesRequest_FieldPath(rawField string) WatchProbesRequest_FieldPath {
	fp, err := ParseWatchProbesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbesRequest_FieldTerminalPath struct {
	selector WatchProbesRequest_FieldPathSelector
}

var _ WatchProbesRequest_FieldPath = (*WatchProbesRequest_FieldTerminalPath)(nil)

func (fp *WatchProbesRequest_FieldTerminalPath) Selector() WatchProbesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbesRequest
func (fp *WatchProbesRequest_FieldTerminalPath) Get(source *WatchProbesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbesRequest
func (fp *WatchProbesRequest_FieldTerminalPath) GetSingle(source *WatchProbesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
	}
}

func (fp *WatchProbesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbesRequest_FieldPathSelectorParent:
		return (*probe.ParentReference)(nil)
	case WatchProbesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbesRequest_FieldPathSelectorPageToken:
		return (*probe.PagerCursor)(nil)
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		return (*probe.OrderBy)(nil)
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbesRequest_FieldPathSelectorFilter:
		return (*probe.Filter)(nil)
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case WatchProbesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
	}
}

func (fp *WatchProbesRequest_FieldTerminalPath) ClearValue(item *WatchProbesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbesRequest_FieldPathSelectorType ||
		fp.selector == WatchProbesRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbesRequest_FieldPathSelectorView ||
		fp.selector == WatchProbesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbesRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbesRequest_FieldPathSelectorParent:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.ParentReference)}
	case WatchProbesRequest_FieldPathSelectorPageSize:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbesRequest_FieldPathSelectorPageToken:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.OrderBy)}
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbesRequest_FieldPathSelectorFilter:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Filter)}
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case WatchProbesRequest_FieldPathSelectorView:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbesRequest_FieldTerminalPathValue{WatchProbesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
	}
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbesRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbesRequest_FieldPathSelectorParent:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.ParentReference)}
	case WatchProbesRequest_FieldPathSelectorPageSize:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbesRequest_FieldPathSelectorPageToken:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.OrderBy)}
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbesRequest_FieldPathSelectorFilter:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Filter)}
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case WatchProbesRequest_FieldPathSelectorView:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbesRequest_FieldTerminalPathArrayOfValues{WatchProbesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fp.selector))
	}
}

func (fp *WatchProbesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbesRequest_FieldPathValue allows storing values for WatchProbesRequest fields according to their type
type WatchProbesRequest_FieldPathValue interface {
	WatchProbesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbesRequest)
	CompareWith(*WatchProbesRequest) (cmp int, comparable bool)
}

func ParseWatchProbesRequest_FieldPathValue(pathStr, valueStr string) (WatchProbesRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbesRequest_FieldPathValue), nil
}

func MustParseWatchProbesRequest_FieldPathValue(pathStr, valueStr string) WatchProbesRequest_FieldPathValue {
	fpv, err := ParseWatchProbesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbesRequest_FieldTerminalPathValue struct {
	WatchProbesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbesRequest_FieldPathValue = (*WatchProbesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbesRequest' as interface{}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsParentValue() (*probe.ParentReference, bool) {
	res, ok := fpv.value.(*probe.ParentReference)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsOrderByValue() (*probe.OrderBy, bool) {
	res, ok := fpv.value.(*probe.OrderBy)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsFilterValue() (*probe.Filter, bool) {
	res, ok := fpv.value.(*probe.Filter)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbesRequest
func (fpv *WatchProbesRequest_FieldTerminalPathValue) SetTo(target **WatchProbesRequest) {
	if *target == nil {
		*target = new(WatchProbesRequest)
	}
	switch fpv.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe.ParentReference)
	case WatchProbesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe.PagerCursor)
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe.OrderBy)
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe.Filter)
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case WatchProbesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbesRequest_FieldTerminalPathValue' with the value under path in 'WatchProbesRequest'.
func (fpv *WatchProbesRequest_FieldTerminalPathValue) CompareWith(source *WatchProbesRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbesRequest))
}

// WatchProbesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbesRequest according to their type
// Present only for array (repeated) types.
type WatchProbesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbesRequest_FieldPath
	ContainsValue(*WatchProbesRequest) bool
}

// ParseWatchProbesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbesRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbesRequest_FieldPathArrayItemValue = (*WatchProbesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbesRequest as interface{}
func (fpaiv *WatchProbesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbesRequest'
func (fpaiv *WatchProbesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbesRequest) bool {
	slice := fpaiv.WatchProbesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbesRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbesRequest fields according to their type
type WatchProbesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbesRequest_FieldPath
}

func ParseWatchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbesRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbesRequest_FieldPathArrayOfValues = (*WatchProbesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe.ParentReference) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe.OrderBy) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe.Filter) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe.ParentReference, bool) {
	res, ok := fpaov.values.([]*probe.ParentReference)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe.OrderBy)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe.Filter, bool) {
	res, ok := fpaov.values.([]*probe.Filter)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbesResponse_FieldPathSelector
	Get(source *WatchProbesResponse) []interface{}
	GetSingle(source *WatchProbesResponse) (interface{}, bool)
	ClearValue(item *WatchProbesResponse)

	// Those methods build corresponding WatchProbesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbesResponse_FieldPathArrayItemValue
}

type WatchProbesResponse_FieldPathSelector int32

const (
	WatchProbesResponse_FieldPathSelectorProbeChanges    WatchProbesResponse_FieldPathSelector = 0
	WatchProbesResponse_FieldPathSelectorIsCurrent       WatchProbesResponse_FieldPathSelector = 1
	WatchProbesResponse_FieldPathSelectorPageTokenChange WatchProbesResponse_FieldPathSelector = 2
	WatchProbesResponse_FieldPathSelectorResumeToken     WatchProbesResponse_FieldPathSelector = 3
	WatchProbesResponse_FieldPathSelectorSnapshotSize    WatchProbesResponse_FieldPathSelector = 4
	WatchProbesResponse_FieldPathSelectorIsSoftReset     WatchProbesResponse_FieldPathSelector = 5
	WatchProbesResponse_FieldPathSelectorIsHardReset     WatchProbesResponse_FieldPathSelector = 6
)

func (s WatchProbesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return "probe_changes"
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", s))
	}
}

func BuildWatchProbesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_changes", "probeChanges", "probe-changes":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorProbeChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbesResponse_FieldTerminalPath{selector: WatchProbesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbesResponse_FieldSubPath{selector: WatchProbesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbesResponse", fp)
}

func ParseWatchProbesResponse_FieldPath(rawField string) (WatchProbesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbesResponse_FieldPath(fp)
}

func MustParseWatchProbesResponse_FieldPath(rawField string) WatchProbesResponse_FieldPath {
	fp, err := ParseWatchProbesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbesResponse_FieldTerminalPath struct {
	selector WatchProbesResponse_FieldPathSelector
}

var _ WatchProbesResponse_FieldPath = (*WatchProbesResponse_FieldTerminalPath)(nil)

func (fp *WatchProbesResponse_FieldTerminalPath) Selector() WatchProbesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbesResponse
func (fp *WatchProbesResponse_FieldTerminalPath) Get(source *WatchProbesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbesResponse_FieldPathSelectorProbeChanges:
			for _, value := range source.GetProbeChanges() {
				values = append(values, value)
			}
		case WatchProbesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbesResponse
func (fp *WatchProbesResponse_FieldTerminalPath) GetSingle(source *WatchProbesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		res := source.GetProbeChanges()
		return res, res != nil
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
	}
}

func (fp *WatchProbesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return ([]*probe.ProbeChange)(nil)
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbesResponse_PageTokenChange)(nil)
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
	}
}

func (fp *WatchProbesResponse_FieldTerminalPath) ClearValue(item *WatchProbesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbesResponse_FieldPathSelectorProbeChanges:
			item.ProbeChanges = nil
		case WatchProbesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbesResponse_FieldPathSelectorProbeChanges ||
		fp.selector == WatchProbesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbesResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.([]*probe.ProbeChange)}
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(*WatchProbesResponse_PageTokenChange)}
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		return &WatchProbesResponse_FieldTerminalPathValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
	}
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbesResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([][]*probe.ProbeChange)}
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbesResponse_PageTokenChange)}
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		return &WatchProbesResponse_FieldTerminalPathArrayOfValues{WatchProbesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return &WatchProbesResponse_FieldTerminalPathArrayItemValue{WatchProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.ProbeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fp.selector))
	}
}

func (fp *WatchProbesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbesResponse_FieldSubPath struct {
	selector WatchProbesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbesResponse_FieldPath = (*WatchProbesResponse_FieldSubPath)(nil)

func (fps *WatchProbesResponse_FieldSubPath) Selector() WatchProbesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbesResponse
func (fps *WatchProbesResponse_FieldSubPath) Get(source *WatchProbesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbesResponse))
}

// GetSingle returns value of selected field from source WatchProbesResponse
func (fps *WatchProbesResponse_FieldSubPath) GetSingle(source *WatchProbesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fps.selector))
	}
}

func (fps *WatchProbesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbesResponse_FieldSubPath) ClearValue(item *WatchProbesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbesResponse_FieldSubPath) WithIValue(value interface{}) WatchProbesResponse_FieldPathValue {
	return &WatchProbesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbesResponse_FieldPathArrayOfValues {
	return &WatchProbesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbesResponse_FieldPathArrayItemValue {
	return &WatchProbesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbesResponse_FieldPathValue allows storing values for WatchProbesResponse fields according to their type
type WatchProbesResponse_FieldPathValue interface {
	WatchProbesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbesResponse)
	CompareWith(*WatchProbesResponse) (cmp int, comparable bool)
}

func ParseWatchProbesResponse_FieldPathValue(pathStr, valueStr string) (WatchProbesResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbesResponse_FieldPathValue), nil
}

func MustParseWatchProbesResponse_FieldPathValue(pathStr, valueStr string) WatchProbesResponse_FieldPathValue {
	fpv, err := ParseWatchProbesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbesResponse_FieldTerminalPathValue struct {
	WatchProbesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbesResponse_FieldPathValue = (*WatchProbesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbesResponse' as interface{}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsProbeChangesValue() ([]*probe.ProbeChange, bool) {
	res, ok := fpv.value.([]*probe.ProbeChange)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbesResponse
func (fpv *WatchProbesResponse_FieldTerminalPathValue) SetTo(target **WatchProbesResponse) {
	if *target == nil {
		*target = new(WatchProbesResponse)
	}
	switch fpv.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		(*target).ProbeChanges = fpv.value.([]*probe.ProbeChange)
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbesResponse_PageTokenChange)
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbesResponse_FieldTerminalPathValue' with the value under path in 'WatchProbesResponse'.
func (fpv *WatchProbesResponse_FieldTerminalPathValue) CompareWith(source *WatchProbesResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		return 0, false
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbesResponse))
}

type WatchProbesResponse_FieldSubPathValue struct {
	WatchProbesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbesResponse_FieldPathValue = (*WatchProbesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbesResponse_FieldSubPathValue) SetTo(target **WatchProbesResponse) {
	if *target == nil {
		*target = new(WatchProbesResponse)
	}
	switch fpvs.Selector() {
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbesResponse_FieldSubPathValue) CompareWith(source *WatchProbesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbesResponse))
}

// WatchProbesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbesResponse according to their type
// Present only for array (repeated) types.
type WatchProbesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbesResponse_FieldPath
	ContainsValue(*WatchProbesResponse) bool
}

// ParseWatchProbesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbesResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbesResponse_FieldPathArrayItemValue = (*WatchProbesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbesResponse as interface{}
func (fpaiv *WatchProbesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbesResponse_FieldTerminalPathArrayItemValue) AsProbeChangesItemValue() (*probe.ProbeChange, bool) {
	res, ok := fpaiv.value.(*probe.ProbeChange)
	return res, ok
}

func (fpaiv *WatchProbesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbesResponse'
func (fpaiv *WatchProbesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbesResponse) bool {
	slice := fpaiv.WatchProbesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbesResponse_FieldSubPathArrayItemValue struct {
	WatchProbesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbesResponse'
func (fpaivs *WatchProbesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbesResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbesResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbesResponse fields according to their type
type WatchProbesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbesResponse_FieldPath
}

func ParseWatchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbesResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbesResponse_FieldPathArrayOfValues = (*WatchProbesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbesResponse_FieldPathSelectorProbeChanges:
		for _, v := range fpaov.values.([][]*probe.ProbeChange) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsProbeChangesArrayOfValues() ([][]*probe.ProbeChange, bool) {
	res, ok := fpaov.values.([][]*probe.ProbeChange)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbesResponse_FieldSubPathArrayOfValues struct {
	WatchProbesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbesResponse_FieldPathArrayOfValues = (*WatchProbesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbesResponse_PageTokenChange)

	// Those methods build corresponding WatchProbesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbesResponsePageTokenChange_FieldPathSelector = 0
	WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbesResponsePageTokenChange_FieldTerminalPath{selector: WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbesResponsePageTokenChange_FieldTerminalPath{selector: WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbesResponse_PageTokenChange", fp)
}

func ParseWatchProbesResponsePageTokenChange_FieldPath(rawField string) (WatchProbesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbesResponsePageTokenChange_FieldPath(rawField string) WatchProbesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbesResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbesResponsePageTokenChange_FieldPath = (*WatchProbesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbesResponse_PageTokenChange
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbesResponse_PageTokenChange
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probe.PagerCursor)(nil)
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probe.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbesResponsePageTokenChange_FieldTerminalPathValue{WatchProbesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbesResponsePageTokenChange_FieldTerminalPathValue{WatchProbesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbesResponsePageTokenChange_FieldPathValue interface {
	WatchProbesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbesResponse_PageTokenChange)
	CompareWith(*WatchProbesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbesResponsePageTokenChange_FieldPathValue = (*WatchProbesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe.PagerCursor)
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbesResponse_PageTokenChange'.
func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbesResponse_PageTokenChange))
}

// WatchProbesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbesResponse_PageTokenChange) bool
}

// ParseWatchProbesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbesResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbesResponsePageTokenChange_FieldPath
}

func ParseWatchProbesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbeRequest_FieldPathSelector
	Get(source *CreateProbeRequest) []interface{}
	GetSingle(source *CreateProbeRequest) (interface{}, bool)
	ClearValue(item *CreateProbeRequest)

	// Those methods build corresponding CreateProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbeRequest_FieldPathArrayItemValue
}

type CreateProbeRequest_FieldPathSelector int32

const (
	CreateProbeRequest_FieldPathSelectorParent CreateProbeRequest_FieldPathSelector = 0
	CreateProbeRequest_FieldPathSelectorProbe  CreateProbeRequest_FieldPathSelector = 1
)

func (s CreateProbeRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbeRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbeRequest_FieldPathSelectorProbe:
		return "probe"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", s))
	}
}

func BuildCreateProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbeRequest_FieldTerminalPath{selector: CreateProbeRequest_FieldPathSelectorParent}, nil
		case "probe":
			return &CreateProbeRequest_FieldTerminalPath{selector: CreateProbeRequest_FieldPathSelectorProbe}, nil
		}
	} else {
		switch fp[0] {
		case "probe":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbeRequest_FieldSubPath{selector: CreateProbeRequest_FieldPathSelectorProbe, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbeRequest", fp)
}

func ParseCreateProbeRequest_FieldPath(rawField string) (CreateProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbeRequest_FieldPath(fp)
}

func MustParseCreateProbeRequest_FieldPath(rawField string) CreateProbeRequest_FieldPath {
	fp, err := ParseCreateProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbeRequest_FieldTerminalPath struct {
	selector CreateProbeRequest_FieldPathSelector
}

var _ CreateProbeRequest_FieldPath = (*CreateProbeRequest_FieldTerminalPath)(nil)

func (fp *CreateProbeRequest_FieldTerminalPath) Selector() CreateProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbeRequest
func (fp *CreateProbeRequest_FieldTerminalPath) Get(source *CreateProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbeRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbeRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbeRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbeRequest
func (fp *CreateProbeRequest_FieldTerminalPath) GetSingle(source *CreateProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbeRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		return (*probe.ParentReference)(nil)
	case CreateProbeRequest_FieldPathSelectorProbe:
		return (*probe.Probe)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeRequest_FieldTerminalPath) ClearValue(item *CreateProbeRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbeRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbeRequest_FieldPathSelectorProbe:
			item.Probe = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbeRequest_FieldPathSelectorParent
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbeRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		return &CreateProbeRequest_FieldTerminalPathValue{CreateProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.ParentReference)}
	case CreateProbeRequest_FieldPathSelectorProbe:
		return &CreateProbeRequest_FieldTerminalPathValue{CreateProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbeRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbeRequest_FieldTerminalPathArrayOfValues{CreateProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		return &CreateProbeRequest_FieldTerminalPathArrayOfValues{CreateProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.ParentReference)}
	case CreateProbeRequest_FieldPathSelectorProbe:
		return &CreateProbeRequest_FieldTerminalPathArrayOfValues{CreateProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fp.selector))
	}
}

func (fp *CreateProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbeRequest_FieldSubPath struct {
	selector CreateProbeRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbeRequest_FieldPath = (*CreateProbeRequest_FieldSubPath)(nil)

func (fps *CreateProbeRequest_FieldSubPath) Selector() CreateProbeRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbeRequest_FieldSubPath) AsProbeSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbeRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbeRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbeRequest
func (fps *CreateProbeRequest_FieldSubPath) Get(source *CreateProbeRequest) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbeSubPath(); ok {
		values = append(values, asProbeFieldPath.Get(source.GetProbe())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbeRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbeRequest))
}

// GetSingle returns value of selected field from source CreateProbeRequest
func (fps *CreateProbeRequest_FieldSubPath) GetSingle(source *CreateProbeRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbeRequest_FieldPathSelectorProbe:
		if source.GetProbe() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fps.selector))
	}
}

func (fps *CreateProbeRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbeRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbeRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbeRequest_FieldSubPath) ClearValue(item *CreateProbeRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbeRequest_FieldPathSelectorProbe:
			fps.subPath.ClearValueRaw(item.Probe)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbeRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbeRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbeRequest_FieldSubPath) WithIValue(value interface{}) CreateProbeRequest_FieldPathValue {
	return &CreateProbeRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbeRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbeRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbeRequest_FieldPathArrayOfValues {
	return &CreateProbeRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbeRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbeRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbeRequest_FieldPathArrayItemValue {
	return &CreateProbeRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbeRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbeRequest_FieldPathValue allows storing values for CreateProbeRequest fields according to their type
type CreateProbeRequest_FieldPathValue interface {
	CreateProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbeRequest)
	CompareWith(*CreateProbeRequest) (cmp int, comparable bool)
}

func ParseCreateProbeRequest_FieldPathValue(pathStr, valueStr string) (CreateProbeRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbeRequest_FieldPathValue), nil
}

func MustParseCreateProbeRequest_FieldPathValue(pathStr, valueStr string) CreateProbeRequest_FieldPathValue {
	fpv, err := ParseCreateProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbeRequest_FieldTerminalPathValue struct {
	CreateProbeRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbeRequest_FieldPathValue = (*CreateProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbeRequest' as interface{}
func (fpv *CreateProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbeRequest_FieldTerminalPathValue) AsParentValue() (*probe.ParentReference, bool) {
	res, ok := fpv.value.(*probe.ParentReference)
	return res, ok
}
func (fpv *CreateProbeRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Probe, bool) {
	res, ok := fpv.value.(*probe.Probe)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbeRequest
func (fpv *CreateProbeRequest_FieldTerminalPathValue) SetTo(target **CreateProbeRequest) {
	if *target == nil {
		*target = new(CreateProbeRequest)
	}
	switch fpv.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe.ParentReference)
	case CreateProbeRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Probe)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbeRequest_FieldTerminalPathValue' with the value under path in 'CreateProbeRequest'.
func (fpv *CreateProbeRequest_FieldTerminalPathValue) CompareWith(source *CreateProbeRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbeRequest_FieldPathSelectorProbe:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbeRequest))
}

type CreateProbeRequest_FieldSubPathValue struct {
	CreateProbeRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbeRequest_FieldPathValue = (*CreateProbeRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbeRequest_FieldSubPathValue) AsProbePathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbeRequest_FieldSubPathValue) SetTo(target **CreateProbeRequest) {
	if *target == nil {
		*target = new(CreateProbeRequest)
	}
	switch fpvs.Selector() {
	case CreateProbeRequest_FieldPathSelectorProbe:
		fpvs.subPathValue.(probe.Probe_FieldPathValue).SetTo(&(*target).Probe)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbeRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbeRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbeRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbeRequest_FieldSubPathValue) CompareWith(source *CreateProbeRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbeRequest_FieldPathSelectorProbe:
		return fpvs.subPathValue.(probe.Probe_FieldPathValue).CompareWith(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbeRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbeRequest))
}

// CreateProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbeRequest according to their type
// Present only for array (repeated) types.
type CreateProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbeRequest_FieldPath
	ContainsValue(*CreateProbeRequest) bool
}

// ParseCreateProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbeRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbeRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbeRequest_FieldPathArrayItemValue = (*CreateProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbeRequest as interface{}
func (fpaiv *CreateProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbeRequest'
func (fpaiv *CreateProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbeRequest) bool {
	slice := fpaiv.CreateProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbeRequest_FieldSubPathArrayItemValue struct {
	CreateProbeRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbeRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbeRequest_FieldSubPathArrayItemValue) AsProbePathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbeRequest'
func (fpaivs *CreateProbeRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbeRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbeRequest_FieldPathSelectorProbe:
		return fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue).ContainsValue(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbeRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbeRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbeRequest fields according to their type
type CreateProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbeRequest_FieldPath
}

func ParseCreateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbeRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbeRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbeRequest_FieldPathArrayOfValues = (*CreateProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbeRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe.ParentReference) {
			values = append(values, v)
		}
	case CreateProbeRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Probe) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbeRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe.ParentReference, bool) {
	res, ok := fpaov.values.([]*probe.ParentReference)
	return res, ok
}
func (fpaov *CreateProbeRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Probe, bool) {
	res, ok := fpaov.values.([]*probe.Probe)
	return res, ok
}

type CreateProbeRequest_FieldSubPathArrayOfValues struct {
	CreateProbeRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbeRequest_FieldPathArrayOfValues = (*CreateProbeRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbeRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbeRequest_FieldSubPathArrayOfValues) AsProbePathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbeRequest_FieldPathSelector
	Get(source *UpdateProbeRequest) []interface{}
	GetSingle(source *UpdateProbeRequest) (interface{}, bool)
	ClearValue(item *UpdateProbeRequest)

	// Those methods build corresponding UpdateProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbeRequest_FieldPathArrayItemValue
}

type UpdateProbeRequest_FieldPathSelector int32

const (
	UpdateProbeRequest_FieldPathSelectorProbe      UpdateProbeRequest_FieldPathSelector = 0
	UpdateProbeRequest_FieldPathSelectorUpdateMask UpdateProbeRequest_FieldPathSelector = 1
	UpdateProbeRequest_FieldPathSelectorCas        UpdateProbeRequest_FieldPathSelector = 2
)

func (s UpdateProbeRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return "probe"
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbeRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", s))
	}
}

func BuildUpdateProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorProbe}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbeRequest_FieldTerminalPath{selector: UpdateProbeRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probe":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeRequest_FieldSubPath{selector: UpdateProbeRequest_FieldPathSelectorProbe, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbeRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeRequest_FieldSubPath{selector: UpdateProbeRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbeRequest", fp)
}

func ParseUpdateProbeRequest_FieldPath(rawField string) (UpdateProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbeRequest_FieldPath(fp)
}

func MustParseUpdateProbeRequest_FieldPath(rawField string) UpdateProbeRequest_FieldPath {
	fp, err := ParseUpdateProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbeRequest_FieldTerminalPath struct {
	selector UpdateProbeRequest_FieldPathSelector
}

var _ UpdateProbeRequest_FieldPath = (*UpdateProbeRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbeRequest_FieldTerminalPath) Selector() UpdateProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbeRequest
func (fp *UpdateProbeRequest_FieldTerminalPath) Get(source *UpdateProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbeRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case UpdateProbeRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbeRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbeRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbeRequest
func (fp *UpdateProbeRequest_FieldTerminalPath) GetSingle(source *UpdateProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbeRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return (*probe.Probe)(nil)
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		return (*probe.Probe_FieldMask)(nil)
	case UpdateProbeRequest_FieldPathSelectorCas:
		return (*UpdateProbeRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequest_FieldTerminalPath) ClearValue(item *UpdateProbeRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbeRequest_FieldPathSelectorProbe:
			item.Probe = nil
		case UpdateProbeRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbeRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbeRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbeRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return &UpdateProbeRequest_FieldTerminalPathValue{UpdateProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbeRequest_FieldTerminalPathValue{UpdateProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case UpdateProbeRequest_FieldPathSelectorCas:
		return &UpdateProbeRequest_FieldTerminalPathValue{UpdateProbeRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbeRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbeRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbeRequest_FieldTerminalPathArrayOfValues{UpdateProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return &UpdateProbeRequest_FieldTerminalPathArrayOfValues{UpdateProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe)}
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbeRequest_FieldTerminalPathArrayOfValues{UpdateProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case UpdateProbeRequest_FieldPathSelectorCas:
		return &UpdateProbeRequest_FieldTerminalPathArrayOfValues{UpdateProbeRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbeRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbeRequest_FieldSubPath struct {
	selector UpdateProbeRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbeRequest_FieldPath = (*UpdateProbeRequest_FieldSubPath)(nil)

func (fps *UpdateProbeRequest_FieldSubPath) Selector() UpdateProbeRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbeRequest_FieldSubPath) AsProbeSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}
func (fps *UpdateProbeRequest_FieldSubPath) AsCasSubPath() (UpdateProbeRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbeRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbeRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbeRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbeRequest
func (fps *UpdateProbeRequest_FieldSubPath) Get(source *UpdateProbeRequest) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbeSubPath(); ok {
		values = append(values, asProbeFieldPath.Get(source.GetProbe())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbeRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbeRequest))
}

// GetSingle returns value of selected field from source UpdateProbeRequest
func (fps *UpdateProbeRequest_FieldSubPath) GetSingle(source *UpdateProbeRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		if source.GetProbe() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbe())
	case UpdateProbeRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbeRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbeRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbeRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbeRequest_FieldSubPath) ClearValue(item *UpdateProbeRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbeRequest_FieldPathSelectorProbe:
			fps.subPath.ClearValueRaw(item.Probe)
		case UpdateProbeRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbeRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbeRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbeRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbeRequest_FieldPathValue {
	return &UpdateProbeRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbeRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbeRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbeRequest_FieldPathArrayOfValues {
	return &UpdateProbeRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbeRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbeRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbeRequest_FieldPathArrayItemValue {
	return &UpdateProbeRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbeRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbeRequest_FieldPathValue allows storing values for UpdateProbeRequest fields according to their type
type UpdateProbeRequest_FieldPathValue interface {
	UpdateProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbeRequest)
	CompareWith(*UpdateProbeRequest) (cmp int, comparable bool)
}

func ParseUpdateProbeRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbeRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbeRequest_FieldPathValue), nil
}

func MustParseUpdateProbeRequest_FieldPathValue(pathStr, valueStr string) UpdateProbeRequest_FieldPathValue {
	fpv, err := ParseUpdateProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbeRequest_FieldTerminalPathValue struct {
	UpdateProbeRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeRequest_FieldPathValue = (*UpdateProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbeRequest' as interface{}
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Probe, bool) {
	res, ok := fpv.value.(*probe.Probe)
	return res, ok
}
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbeRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbeRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbeRequest
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) SetTo(target **UpdateProbeRequest) {
	if *target == nil {
		*target = new(UpdateProbeRequest)
	}
	switch fpv.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Probe)
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probe.Probe_FieldMask)
	case UpdateProbeRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbeRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbeRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbeRequest'.
func (fpv *UpdateProbeRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbeRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return 0, false
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbeRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbeRequest))
}

type UpdateProbeRequest_FieldSubPathValue struct {
	UpdateProbeRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbeRequest_FieldPathValue = (*UpdateProbeRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbeRequest_FieldSubPathValue) AsProbePathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbeRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbeRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbeRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbeRequest_FieldSubPathValue) SetTo(target **UpdateProbeRequest) {
	if *target == nil {
		*target = new(UpdateProbeRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		fpvs.subPathValue.(probe.Probe_FieldPathValue).SetTo(&(*target).Probe)
	case UpdateProbeRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbeRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbeRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbeRequest_FieldSubPathValue) CompareWith(source *UpdateProbeRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return fpvs.subPathValue.(probe.Probe_FieldPathValue).CompareWith(source.GetProbe())
	case UpdateProbeRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbeRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbeRequest))
}

// UpdateProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbeRequest according to their type
// Present only for array (repeated) types.
type UpdateProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbeRequest_FieldPath
	ContainsValue(*UpdateProbeRequest) bool
}

// ParseUpdateProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbeRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbeRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeRequest_FieldPathArrayItemValue = (*UpdateProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbeRequest as interface{}
func (fpaiv *UpdateProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbeRequest'
func (fpaiv *UpdateProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbeRequest) bool {
	slice := fpaiv.UpdateProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbeRequest_FieldSubPathArrayItemValue struct {
	UpdateProbeRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbeRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbeRequest_FieldSubPathArrayItemValue) AsProbePathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbeRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbeRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbeRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbeRequest'
func (fpaivs *UpdateProbeRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbeRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		return fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue).ContainsValue(source.GetProbe())
	case UpdateProbeRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbeRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbeRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbeRequest fields according to their type
type UpdateProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbeRequest_FieldPath
}

func ParseUpdateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbeRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbeRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbeRequest_FieldPathArrayOfValues = (*UpdateProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbeRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Probe) {
			values = append(values, v)
		}
	case UpdateProbeRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbeRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbeRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbeRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Probe, bool) {
	res, ok := fpaov.values.([]*probe.Probe)
	return res, ok
}
func (fpaov *UpdateProbeRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbeRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbeRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbeRequest_CAS)
	return res, ok
}

type UpdateProbeRequest_FieldSubPathArrayOfValues struct {
	UpdateProbeRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbeRequest_FieldPathArrayOfValues = (*UpdateProbeRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbeRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbeRequest_FieldSubPathArrayOfValues) AsProbePathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbeRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbeRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbeRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbeRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbeRequestCAS_FieldPathSelector
	Get(source *UpdateProbeRequest_CAS) []interface{}
	GetSingle(source *UpdateProbeRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbeRequest_CAS)

	// Those methods build corresponding UpdateProbeRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbeRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbeRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbeRequestCAS_FieldPathArrayItemValue
}

type UpdateProbeRequestCAS_FieldPathSelector int32

const (
	UpdateProbeRequestCAS_FieldPathSelectorConditionalState UpdateProbeRequestCAS_FieldPathSelector = 0
	UpdateProbeRequestCAS_FieldPathSelectorFieldMask        UpdateProbeRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbeRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", s))
	}
}

func BuildUpdateProbeRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbeRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbeRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbeRequestCAS_FieldTerminalPath{selector: UpdateProbeRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbeRequestCAS_FieldTerminalPath{selector: UpdateProbeRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbeRequestCAS_FieldSubPath{selector: UpdateProbeRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbeRequest_CAS", fp)
}

func ParseUpdateProbeRequestCAS_FieldPath(rawField string) (UpdateProbeRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbeRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbeRequestCAS_FieldPath(rawField string) UpdateProbeRequestCAS_FieldPath {
	fp, err := ParseUpdateProbeRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbeRequestCAS_FieldTerminalPath struct {
	selector UpdateProbeRequestCAS_FieldPathSelector
}

var _ UpdateProbeRequestCAS_FieldPath = (*UpdateProbeRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) Selector() UpdateProbeRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbeRequest_CAS
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) Get(source *UpdateProbeRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbeRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbeRequest_CAS
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbeRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbeRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return (*probe.Probe)(nil)
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbeRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbeRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbeRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbeRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbeRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbeRequestCAS_FieldTerminalPathValue{UpdateProbeRequestCAS_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbeRequestCAS_FieldTerminalPathValue{UpdateProbeRequestCAS_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbeRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeRequestCAS_FieldTerminalPath: *fp, values: values.([]*probe.Probe)}
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbeRequestCAS_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbeRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbeRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbeRequestCAS_FieldSubPath struct {
	selector UpdateProbeRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbeRequestCAS_FieldPath = (*UpdateProbeRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbeRequestCAS_FieldSubPath) Selector() UpdateProbeRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbeRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbeRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbeRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbeRequest_CAS
func (fps *UpdateProbeRequestCAS_FieldSubPath) Get(source *UpdateProbeRequest_CAS) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbeFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbeRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbeRequest_CAS
func (fps *UpdateProbeRequestCAS_FieldSubPath) GetSingle(source *UpdateProbeRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbeRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbeRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) ClearValue(item *UpdateProbeRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbeRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbeRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbeRequestCAS_FieldPathValue {
	return &UpdateProbeRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbeRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbeRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbeRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbeRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbeRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbeRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbeRequestCAS_FieldPathValue interface {
	UpdateProbeRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbeRequest_CAS)
	CompareWith(*UpdateProbeRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbeRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbeRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbeRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbeRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbeRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbeRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbeRequestCAS_FieldTerminalPathValue struct {
	UpdateProbeRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeRequestCAS_FieldPathValue = (*UpdateProbeRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probe.Probe, bool) {
	res, ok := fpv.value.(*probe.Probe)
	return res, ok
}
func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbeRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbeRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probe.Probe)
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbeRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbeRequest_CAS'.
func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbeRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbeRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbeRequest_CAS))
}

type UpdateProbeRequestCAS_FieldSubPathValue struct {
	UpdateProbeRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbeRequestCAS_FieldPathValue = (*UpdateProbeRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbeRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbeRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probe.Probe_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbeRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbeRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probe.Probe_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbeRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbeRequest_CAS))
}

// UpdateProbeRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbeRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbeRequestCAS_FieldPath
	ContainsValue(*UpdateProbeRequest_CAS) bool
}

// ParseUpdateProbeRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbeRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbeRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbeRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbeRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbeRequestCAS_FieldPathArrayItemValue = (*UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbeRequest_CAS as interface{}
func (fpaiv *UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbeRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbeRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbeRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbeRequest_CAS) bool {
	slice := fpaiv.UpdateProbeRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbeRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbeRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbeRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbeRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbeRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbeRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbeRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbeRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbeRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbeRequestCAS_FieldPath
}

func ParseUpdateProbeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbeRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbeRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbeRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbeRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbeRequestCAS_FieldPathArrayOfValues = (*UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbeRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probe.Probe) {
			values = append(values, v)
		}
	case UpdateProbeRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probe.Probe, bool) {
	res, ok := fpaov.values.([]*probe.Probe)
	return res, ok
}
func (fpaov *UpdateProbeRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}

type UpdateProbeRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbeRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbeRequestCAS_FieldPathArrayOfValues = (*UpdateProbeRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbeRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbeRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbeRequest_FieldPathSelector
	Get(source *DeleteProbeRequest) []interface{}
	GetSingle(source *DeleteProbeRequest) (interface{}, bool)
	ClearValue(item *DeleteProbeRequest)

	// Those methods build corresponding DeleteProbeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbeRequest_FieldPathArrayItemValue
}

type DeleteProbeRequest_FieldPathSelector int32

const (
	DeleteProbeRequest_FieldPathSelectorName DeleteProbeRequest_FieldPathSelector = 0
)

func (s DeleteProbeRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbeRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", s))
	}
}

func BuildDeleteProbeRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbeRequest_FieldTerminalPath{selector: DeleteProbeRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbeRequest", fp)
}

func ParseDeleteProbeRequest_FieldPath(rawField string) (DeleteProbeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbeRequest_FieldPath(fp)
}

func MustParseDeleteProbeRequest_FieldPath(rawField string) DeleteProbeRequest_FieldPath {
	fp, err := ParseDeleteProbeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbeRequest_FieldTerminalPath struct {
	selector DeleteProbeRequest_FieldPathSelector
}

var _ DeleteProbeRequest_FieldPath = (*DeleteProbeRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbeRequest_FieldTerminalPath) Selector() DeleteProbeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbeRequest
func (fp *DeleteProbeRequest_FieldTerminalPath) Get(source *DeleteProbeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbeRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbeRequest
func (fp *DeleteProbeRequest_FieldTerminalPath) GetSingle(source *DeleteProbeRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbeRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeRequest_FieldTerminalPath) ClearValue(item *DeleteProbeRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbeRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbeRequest_FieldPathSelectorName
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbeRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		return &DeleteProbeRequest_FieldTerminalPathValue{DeleteProbeRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbeRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbeRequest_FieldTerminalPathArrayOfValues{DeleteProbeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		return &DeleteProbeRequest_FieldTerminalPathArrayOfValues{DeleteProbeRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbeRequest_FieldPathValue allows storing values for DeleteProbeRequest fields according to their type
type DeleteProbeRequest_FieldPathValue interface {
	DeleteProbeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbeRequest)
	CompareWith(*DeleteProbeRequest) (cmp int, comparable bool)
}

func ParseDeleteProbeRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbeRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbeRequest_FieldPathValue), nil
}

func MustParseDeleteProbeRequest_FieldPathValue(pathStr, valueStr string) DeleteProbeRequest_FieldPathValue {
	fpv, err := ParseDeleteProbeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbeRequest_FieldTerminalPathValue struct {
	DeleteProbeRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbeRequest_FieldPathValue = (*DeleteProbeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbeRequest' as interface{}
func (fpv *DeleteProbeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbeRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbeRequest
func (fpv *DeleteProbeRequest_FieldTerminalPathValue) SetTo(target **DeleteProbeRequest) {
	if *target == nil {
		*target = new(DeleteProbeRequest)
	}
	switch fpv.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbeRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbeRequest'.
func (fpv *DeleteProbeRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbeRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbeRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbeRequest))
}

// DeleteProbeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbeRequest according to their type
// Present only for array (repeated) types.
type DeleteProbeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbeRequest_FieldPath
	ContainsValue(*DeleteProbeRequest) bool
}

// ParseDeleteProbeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbeRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbeRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbeRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbeRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbeRequest_FieldPathArrayItemValue = (*DeleteProbeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbeRequest as interface{}
func (fpaiv *DeleteProbeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbeRequest'
func (fpaiv *DeleteProbeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbeRequest) bool {
	slice := fpaiv.DeleteProbeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbeRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbeRequest fields according to their type
type DeleteProbeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbeRequest_FieldPath
}

func ParseDeleteProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbeRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbeRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbeRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbeRequest_FieldPathArrayOfValues = (*DeleteProbeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbesRequest_FieldPathSelector
	Get(source *SearchProbesRequest) []interface{}
	GetSingle(source *SearchProbesRequest) (interface{}, bool)
	ClearValue(item *SearchProbesRequest)

	// Those methods build corresponding SearchProbesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbesRequest_FieldPathArrayItemValue
}

type SearchProbesRequest_FieldPathSelector int32

const (
	SearchProbesRequest_FieldPathSelectorParent    SearchProbesRequest_FieldPathSelector = 0
	SearchProbesRequest_FieldPathSelectorPageSize  SearchProbesRequest_FieldPathSelector = 1
	SearchProbesRequest_FieldPathSelectorPageToken SearchProbesRequest_FieldPathSelector = 2
	SearchProbesRequest_FieldPathSelectorOrderBy   SearchProbesRequest_FieldPathSelector = 3
	SearchProbesRequest_FieldPathSelectorFilter    SearchProbesRequest_FieldPathSelector = 4
	SearchProbesRequest_FieldPathSelectorFieldMask SearchProbesRequest_FieldPathSelector = 5
	SearchProbesRequest_FieldPathSelectorView      SearchProbesRequest_FieldPathSelector = 6
	SearchProbesRequest_FieldPathSelectorPhrase    SearchProbesRequest_FieldPathSelector = 7
)

func (s SearchProbesRequest_FieldPathSelector) String() string {
	switch s {
	case SearchProbesRequest_FieldPathSelectorParent:
		return "parent"
	case SearchProbesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchProbesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchProbesRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchProbesRequest_FieldPathSelectorView:
		return "view"
	case SearchProbesRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", s))
	}
}

func BuildSearchProbesRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchProbesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchProbesRequest_FieldTerminalPath{selector: SearchProbesRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbesRequest", fp)
}

func ParseSearchProbesRequest_FieldPath(rawField string) (SearchProbesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbesRequest_FieldPath(fp)
}

func MustParseSearchProbesRequest_FieldPath(rawField string) SearchProbesRequest_FieldPath {
	fp, err := ParseSearchProbesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbesRequest_FieldTerminalPath struct {
	selector SearchProbesRequest_FieldPathSelector
}

var _ SearchProbesRequest_FieldPath = (*SearchProbesRequest_FieldTerminalPath)(nil)

func (fp *SearchProbesRequest_FieldTerminalPath) Selector() SearchProbesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbesRequest
func (fp *SearchProbesRequest_FieldTerminalPath) Get(source *SearchProbesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchProbesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchProbesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchProbesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchProbesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchProbesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchProbesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchProbesRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbesRequest))
}

// GetSingle returns value pointed by specific field of from source SearchProbesRequest
func (fp *SearchProbesRequest_FieldTerminalPath) GetSingle(source *SearchProbesRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchProbesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchProbesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchProbesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchProbesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchProbesRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
	}
}

func (fp *SearchProbesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbesRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		return (*probe.ParentName)(nil)
	case SearchProbesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchProbesRequest_FieldPathSelectorPageToken:
		return (*probe.PagerCursor)(nil)
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		return (*probe.OrderBy)(nil)
	case SearchProbesRequest_FieldPathSelectorFilter:
		return (*probe.Filter)(nil)
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		return (*probe.Probe_FieldMask)(nil)
	case SearchProbesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchProbesRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
	}
}

func (fp *SearchProbesRequest_FieldTerminalPath) ClearValue(item *SearchProbesRequest) {
	if item != nil {
		switch fp.selector {
		case SearchProbesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchProbesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchProbesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchProbesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchProbesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchProbesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchProbesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchProbesRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchProbesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbesRequest_FieldPathSelectorParent ||
		fp.selector == SearchProbesRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchProbesRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchProbesRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchProbesRequest_FieldPathSelectorFilter ||
		fp.selector == SearchProbesRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchProbesRequest_FieldPathSelectorView ||
		fp.selector == SearchProbesRequest_FieldPathSelectorPhrase
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithIValue(value interface{}) SearchProbesRequest_FieldPathValue {
	switch fp.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.ParentName)}
	case SearchProbesRequest_FieldPathSelectorPageSize:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbesRequest_FieldPathSelectorPageToken:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.OrderBy)}
	case SearchProbesRequest_FieldPathSelectorFilter:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Filter)}
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(*probe.Probe_FieldMask)}
	case SearchProbesRequest_FieldPathSelectorView:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchProbesRequest_FieldPathSelectorPhrase:
		return &SearchProbesRequest_FieldTerminalPathValue{SearchProbesRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
	}
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbesRequest_FieldPathArrayOfValues {
	fpaov := &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.ParentName)}
	case SearchProbesRequest_FieldPathSelectorPageSize:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbesRequest_FieldPathSelectorPageToken:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.OrderBy)}
	case SearchProbesRequest_FieldPathSelectorFilter:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Filter)}
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]*probe.Probe_FieldMask)}
	case SearchProbesRequest_FieldPathSelectorView:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchProbesRequest_FieldPathSelectorPhrase:
		return &SearchProbesRequest_FieldTerminalPathArrayOfValues{SearchProbesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fp.selector))
	}
}

func (fp *SearchProbesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchProbesRequest_FieldPathValue allows storing values for SearchProbesRequest fields according to their type
type SearchProbesRequest_FieldPathValue interface {
	SearchProbesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbesRequest)
	CompareWith(*SearchProbesRequest) (cmp int, comparable bool)
}

func ParseSearchProbesRequest_FieldPathValue(pathStr, valueStr string) (SearchProbesRequest_FieldPathValue, error) {
	fp, err := ParseSearchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbesRequest_FieldPathValue), nil
}

func MustParseSearchProbesRequest_FieldPathValue(pathStr, valueStr string) SearchProbesRequest_FieldPathValue {
	fpv, err := ParseSearchProbesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbesRequest_FieldTerminalPathValue struct {
	SearchProbesRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbesRequest_FieldPathValue = (*SearchProbesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbesRequest' as interface{}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsParentValue() (*probe.ParentName, bool) {
	res, ok := fpv.value.(*probe.ParentName)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsOrderByValue() (*probe.OrderBy, bool) {
	res, ok := fpv.value.(*probe.OrderBy)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsFilterValue() (*probe.Filter, bool) {
	res, ok := fpv.value.(*probe.Filter)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probe.Probe_FieldMask, bool) {
	res, ok := fpv.value.(*probe.Probe_FieldMask)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchProbesRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbesRequest
func (fpv *SearchProbesRequest_FieldTerminalPathValue) SetTo(target **SearchProbesRequest) {
	if *target == nil {
		*target = new(SearchProbesRequest)
	}
	switch fpv.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probe.ParentName)
	case SearchProbesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchProbesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probe.PagerCursor)
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probe.OrderBy)
	case SearchProbesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probe.Filter)
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probe.Probe_FieldMask)
	case SearchProbesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchProbesRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbesRequest_FieldTerminalPathValue' with the value under path in 'SearchProbesRequest'.
func (fpv *SearchProbesRequest_FieldTerminalPathValue) CompareWith(source *SearchProbesRequest) (int, bool) {
	switch fpv.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probe.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbesRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchProbesRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchProbesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbesRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbesRequest))
}

// SearchProbesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbesRequest according to their type
// Present only for array (repeated) types.
type SearchProbesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbesRequest_FieldPath
	ContainsValue(*SearchProbesRequest) bool
}

// ParseSearchProbesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbesRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbesRequest_FieldTerminalPathArrayItemValue struct {
	SearchProbesRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbesRequest_FieldPathArrayItemValue = (*SearchProbesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbesRequest as interface{}
func (fpaiv *SearchProbesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchProbesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbesRequest'
func (fpaiv *SearchProbesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbesRequest) bool {
	slice := fpaiv.SearchProbesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchProbesRequest_FieldPathArrayOfValues allows storing slice of values for SearchProbesRequest fields according to their type
type SearchProbesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbesRequest_FieldPath
}

func ParseSearchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbesRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbesRequest_FieldTerminalPathArrayOfValues struct {
	SearchProbesRequest_FieldTerminalPath
	values interface{}
}

var _ SearchProbesRequest_FieldPathArrayOfValues = (*SearchProbesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probe.ParentName) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probe.OrderBy) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probe.Filter) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probe.Probe_FieldMask) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchProbesRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probe.ParentName, bool) {
	res, ok := fpaov.values.([]*probe.ParentName)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probe.OrderBy, bool) {
	res, ok := fpaov.values.([]*probe.OrderBy)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probe.Filter, bool) {
	res, ok := fpaov.values.([]*probe.Filter)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probe.Probe_FieldMask, bool) {
	res, ok := fpaov.values.([]*probe.Probe_FieldMask)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchProbesRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbesResponse_FieldPathSelector
	Get(source *SearchProbesResponse) []interface{}
	GetSingle(source *SearchProbesResponse) (interface{}, bool)
	ClearValue(item *SearchProbesResponse)

	// Those methods build corresponding SearchProbesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbesResponse_FieldPathArrayItemValue
}

type SearchProbesResponse_FieldPathSelector int32

const (
	SearchProbesResponse_FieldPathSelectorProbes            SearchProbesResponse_FieldPathSelector = 0
	SearchProbesResponse_FieldPathSelectorPrevPageToken     SearchProbesResponse_FieldPathSelector = 1
	SearchProbesResponse_FieldPathSelectorNextPageToken     SearchProbesResponse_FieldPathSelector = 2
	SearchProbesResponse_FieldPathSelectorCurrentOffset     SearchProbesResponse_FieldPathSelector = 3
	SearchProbesResponse_FieldPathSelectorTotalResultsCount SearchProbesResponse_FieldPathSelector = 4
)

func (s SearchProbesResponse_FieldPathSelector) String() string {
	switch s {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return "probes"
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", s))
	}
}

func BuildSearchProbesResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchProbesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probes":
			return &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorProbes}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchProbesResponse_FieldTerminalPath{selector: SearchProbesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probes":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchProbesResponse_FieldSubPath{selector: SearchProbesResponse_FieldPathSelectorProbes, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbesResponse", fp)
}

func ParseSearchProbesResponse_FieldPath(rawField string) (SearchProbesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbesResponse_FieldPath(fp)
}

func MustParseSearchProbesResponse_FieldPath(rawField string) SearchProbesResponse_FieldPath {
	fp, err := ParseSearchProbesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbesResponse_FieldTerminalPath struct {
	selector SearchProbesResponse_FieldPathSelector
}

var _ SearchProbesResponse_FieldPath = (*SearchProbesResponse_FieldTerminalPath)(nil)

func (fp *SearchProbesResponse_FieldTerminalPath) Selector() SearchProbesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbesResponse
func (fp *SearchProbesResponse_FieldTerminalPath) Get(source *SearchProbesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbesResponse_FieldPathSelectorProbes:
			for _, value := range source.GetProbes() {
				values = append(values, value)
			}
		case SearchProbesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchProbesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchProbesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbesResponse))
}

// GetSingle returns value pointed by specific field of from source SearchProbesResponse
func (fp *SearchProbesResponse_FieldTerminalPath) GetSingle(source *SearchProbesResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		res := source.GetProbes()
		return res, res != nil
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
	}
}

func (fp *SearchProbesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbesResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return ([]*probe.Probe)(nil)
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		return (*probe.PagerCursor)(nil)
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		return (*probe.PagerCursor)(nil)
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
	}
}

func (fp *SearchProbesResponse_FieldTerminalPath) ClearValue(item *SearchProbesResponse) {
	if item != nil {
		switch fp.selector {
		case SearchProbesResponse_FieldPathSelectorProbes:
			item.Probes = nil
		case SearchProbesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchProbesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchProbesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchProbesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchProbesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchProbesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchProbesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithIValue(value interface{}) SearchProbesResponse_FieldPathValue {
	switch fp.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return &SearchProbesResponse_FieldTerminalPathValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.([]*probe.Probe)}
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbesResponse_FieldTerminalPathValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		return &SearchProbesResponse_FieldTerminalPathValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.PagerCursor)}
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbesResponse_FieldTerminalPathValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbesResponse_FieldTerminalPathValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
	}
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbesResponse_FieldPathArrayOfValues {
	fpaov := &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp, values: values.([][]*probe.Probe)}
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		return &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp, values: values.([]*probe.PagerCursor)}
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbesResponse_FieldTerminalPathArrayOfValues{SearchProbesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return &SearchProbesResponse_FieldTerminalPathArrayItemValue{SearchProbesResponse_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fp.selector))
	}
}

func (fp *SearchProbesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchProbesResponse_FieldSubPath struct {
	selector SearchProbesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchProbesResponse_FieldPath = (*SearchProbesResponse_FieldSubPath)(nil)

func (fps *SearchProbesResponse_FieldSubPath) Selector() SearchProbesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchProbesResponse_FieldSubPath) AsProbesSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchProbesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchProbesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchProbesResponse
func (fps *SearchProbesResponse_FieldSubPath) Get(source *SearchProbesResponse) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbesSubPath(); ok {
		for _, item := range source.GetProbes() {
			values = append(values, asProbeFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchProbesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchProbesResponse))
}

// GetSingle returns value of selected field from source SearchProbesResponse
func (fps *SearchProbesResponse_FieldSubPath) GetSingle(source *SearchProbesResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		if len(source.GetProbes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbes()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fps.selector))
	}
}

func (fps *SearchProbesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchProbesResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchProbesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchProbesResponse_FieldSubPath) ClearValue(item *SearchProbesResponse) {
	if item != nil {
		switch fps.selector {
		case SearchProbesResponse_FieldPathSelectorProbes:
			for _, subItem := range item.Probes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchProbesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchProbesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchProbesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchProbesResponse_FieldSubPath) WithIValue(value interface{}) SearchProbesResponse_FieldPathValue {
	return &SearchProbesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchProbesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchProbesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchProbesResponse_FieldPathArrayOfValues {
	return &SearchProbesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchProbesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchProbesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchProbesResponse_FieldPathArrayItemValue {
	return &SearchProbesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchProbesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchProbesResponse_FieldPathValue allows storing values for SearchProbesResponse fields according to their type
type SearchProbesResponse_FieldPathValue interface {
	SearchProbesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbesResponse)
	CompareWith(*SearchProbesResponse) (cmp int, comparable bool)
}

func ParseSearchProbesResponse_FieldPathValue(pathStr, valueStr string) (SearchProbesResponse_FieldPathValue, error) {
	fp, err := ParseSearchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbesResponse_FieldPathValue), nil
}

func MustParseSearchProbesResponse_FieldPathValue(pathStr, valueStr string) SearchProbesResponse_FieldPathValue {
	fpv, err := ParseSearchProbesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbesResponse_FieldTerminalPathValue struct {
	SearchProbesResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbesResponse_FieldPathValue = (*SearchProbesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbesResponse' as interface{}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) AsProbesValue() ([]*probe.Probe, bool) {
	res, ok := fpv.value.([]*probe.Probe)
	return res, ok
}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probe.PagerCursor, bool) {
	res, ok := fpv.value.(*probe.PagerCursor)
	return res, ok
}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbesResponse
func (fpv *SearchProbesResponse_FieldTerminalPathValue) SetTo(target **SearchProbesResponse) {
	if *target == nil {
		*target = new(SearchProbesResponse)
	}
	switch fpv.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		(*target).Probes = fpv.value.([]*probe.Probe)
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probe.PagerCursor)
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probe.PagerCursor)
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbesResponse_FieldTerminalPathValue' with the value under path in 'SearchProbesResponse'.
func (fpv *SearchProbesResponse_FieldTerminalPathValue) CompareWith(source *SearchProbesResponse) (int, bool) {
	switch fpv.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return 0, false
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbesResponse))
}

type SearchProbesResponse_FieldSubPathValue struct {
	SearchProbesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchProbesResponse_FieldPathValue = (*SearchProbesResponse_FieldSubPathValue)(nil)

func (fpvs *SearchProbesResponse_FieldSubPathValue) AsProbesPathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *SearchProbesResponse_FieldSubPathValue) SetTo(target **SearchProbesResponse) {
	if *target == nil {
		*target = new(SearchProbesResponse)
	}
	switch fpvs.Selector() {
	case SearchProbesResponse_FieldPathSelectorProbes:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchProbesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchProbesResponse_FieldSubPathValue) CompareWith(source *SearchProbesResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchProbesResponse))
}

// SearchProbesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbesResponse according to their type
// Present only for array (repeated) types.
type SearchProbesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbesResponse_FieldPath
	ContainsValue(*SearchProbesResponse) bool
}

// ParseSearchProbesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbesResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbesResponse_FieldTerminalPathArrayItemValue struct {
	SearchProbesResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbesResponse_FieldPathArrayItemValue = (*SearchProbesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbesResponse as interface{}
func (fpaiv *SearchProbesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchProbesResponse_FieldTerminalPathArrayItemValue) AsProbesItemValue() (*probe.Probe, bool) {
	res, ok := fpaiv.value.(*probe.Probe)
	return res, ok
}

func (fpaiv *SearchProbesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbesResponse'
func (fpaiv *SearchProbesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbesResponse) bool {
	slice := fpaiv.SearchProbesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchProbesResponse_FieldSubPathArrayItemValue struct {
	SearchProbesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchProbesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchProbesResponse_FieldSubPathArrayItemValue) AsProbesPathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbesResponse'
func (fpaivs *SearchProbesResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchProbesResponse) bool {
	switch fpaivs.Selector() {
	case SearchProbesResponse_FieldPathSelectorProbes:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbesResponse: %d", fpaivs.Selector()))
	}
}

// SearchProbesResponse_FieldPathArrayOfValues allows storing slice of values for SearchProbesResponse fields according to their type
type SearchProbesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbesResponse_FieldPath
}

func ParseSearchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbesResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbesResponse_FieldTerminalPathArrayOfValues struct {
	SearchProbesResponse_FieldTerminalPath
	values interface{}
}

var _ SearchProbesResponse_FieldPathArrayOfValues = (*SearchProbesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbesResponse_FieldPathSelectorProbes:
		for _, v := range fpaov.values.([][]*probe.Probe) {
			values = append(values, v)
		}
	case SearchProbesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probe.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) AsProbesArrayOfValues() ([][]*probe.Probe, bool) {
	res, ok := fpaov.values.([][]*probe.Probe)
	return res, ok
}
func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probe.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probe.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchProbesResponse_FieldSubPathArrayOfValues struct {
	SearchProbesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchProbesResponse_FieldPathArrayOfValues = (*SearchProbesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchProbesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchProbesResponse_FieldSubPathArrayOfValues) AsProbesPathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}
