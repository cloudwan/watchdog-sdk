// Code generated by protoc-gen-goten-client
// API: ProbeService
// DO NOT EDIT!!!

package probe_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probe.Probe{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbeServiceClient is the client API for ProbeService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbeServiceClient interface {
	GetProbe(ctx context.Context, in *GetProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error)
	BatchGetProbes(ctx context.Context, in *BatchGetProbesRequest, opts ...grpc.CallOption) (*BatchGetProbesResponse, error)
	ListProbes(ctx context.Context, in *ListProbesRequest, opts ...grpc.CallOption) (*ListProbesResponse, error)
	WatchProbe(ctx context.Context, in *WatchProbeRequest, opts ...grpc.CallOption) (WatchProbeClientStream, error)
	WatchProbes(ctx context.Context, in *WatchProbesRequest, opts ...grpc.CallOption) (WatchProbesClientStream, error)
	CreateProbe(ctx context.Context, in *CreateProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error)
	UpdateProbe(ctx context.Context, in *UpdateProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error)
	DeleteProbe(ctx context.Context, in *DeleteProbeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchProbes(ctx context.Context, in *SearchProbesRequest, opts ...grpc.CallOption) (*SearchProbesResponse, error)
	ListMyProbes(ctx context.Context, in *ListProbesRequest, opts ...grpc.CallOption) (*ListProbesResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbeServiceClient(cc grpc.ClientConnInterface) ProbeServiceClient {
	return &client{cc}
}

func (c *client) GetProbe(ctx context.Context, in *GetProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error) {
	out := new(probe.Probe)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/GetProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbes(ctx context.Context, in *BatchGetProbesRequest, opts ...grpc.CallOption) (*BatchGetProbesResponse, error) {
	out := new(BatchGetProbesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/BatchGetProbes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbes(ctx context.Context, in *ListProbesRequest, opts ...grpc.CallOption) (*ListProbesResponse, error) {
	out := new(ListProbesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/ListProbes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbe(ctx context.Context, in *WatchProbeRequest, opts ...grpc.CallOption) (WatchProbeClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbe",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbeService/WatchProbe", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbeWatchProbeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbeClientStream interface {
	Recv() (*WatchProbeResponse, error)
	grpc.ClientStream
}

type watchProbeWatchProbeClient struct {
	grpc.ClientStream
}

func (x *watchProbeWatchProbeClient) Recv() (*WatchProbeResponse, error) {
	m := new(WatchProbeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbes(ctx context.Context, in *WatchProbesRequest, opts ...grpc.CallOption) (WatchProbesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbes",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha2.ProbeService/WatchProbes", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbesWatchProbesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbesClientStream interface {
	Recv() (*WatchProbesResponse, error)
	grpc.ClientStream
}

type watchProbesWatchProbesClient struct {
	grpc.ClientStream
}

func (x *watchProbesWatchProbesClient) Recv() (*WatchProbesResponse, error) {
	m := new(WatchProbesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbe(ctx context.Context, in *CreateProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error) {
	out := new(probe.Probe)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/CreateProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbe(ctx context.Context, in *UpdateProbeRequest, opts ...grpc.CallOption) (*probe.Probe, error) {
	out := new(probe.Probe)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/UpdateProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbe(ctx context.Context, in *DeleteProbeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/DeleteProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchProbes(ctx context.Context, in *SearchProbesRequest, opts ...grpc.CallOption) (*SearchProbesResponse, error) {
	out := new(SearchProbesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/SearchProbes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMyProbes(ctx context.Context, in *ListProbesRequest, opts ...grpc.CallOption) (*ListProbesResponse, error) {
	out := new(ListProbesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha2.ProbeService/ListMyProbes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
