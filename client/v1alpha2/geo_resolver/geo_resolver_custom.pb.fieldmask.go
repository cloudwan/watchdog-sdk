// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/geo_resolver_custom.proto
// DO NOT EDIT!!!

package geo_resolver_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

type ResolveGeoIPRequest_FieldMask struct {
	Paths []ResolveGeoIPRequest_FieldPath
}

func FullResolveGeoIPRequest_FieldMask() *ResolveGeoIPRequest_FieldMask {
	res := &ResolveGeoIPRequest_FieldMask{}
	res.Paths = append(res.Paths, &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorAddress})
	return res
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResolveGeoIPRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResolveGeoIPRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResolveGeoIPRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResolveGeoIPRequest_FieldPath(raw)
	})
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Subtract(other *ResolveGeoIPRequest_FieldMask) *ResolveGeoIPRequest_FieldMask {
	result := &ResolveGeoIPRequest_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResolveGeoIPRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResolveGeoIPRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResolveGeoIPRequest_FieldMask) FilterInputFields() *ResolveGeoIPRequest_FieldMask {
	result := &ResolveGeoIPRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResolveGeoIPRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResolveGeoIPRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResolveGeoIPRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResolveGeoIPRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResolveGeoIPRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) AppendPath(path ResolveGeoIPRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResolveGeoIPRequest_FieldPath))
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) GetPaths() []ResolveGeoIPRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResolveGeoIPRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Set(target, source *ResolveGeoIPRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResolveGeoIPRequest), source.(*ResolveGeoIPRequest))
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) Project(source *ResolveGeoIPRequest) *ResolveGeoIPRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResolveGeoIPRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResolveGeoIPRequest_FieldTerminalPath:
			switch tp.selector {
			case ResolveGeoIPRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ResolveGeoIPRequest_FieldPathSelectorAddress:
				result.Address = source.Address
			}
		}
	}
	return result
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResolveGeoIPRequest))
}

func (fieldMask *ResolveGeoIPRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ResolveGeoIPResponse_FieldMask struct {
	Paths []ResolveGeoIPResponse_FieldPath
}

func FullResolveGeoIPResponse_FieldMask() *ResolveGeoIPResponse_FieldMask {
	res := &ResolveGeoIPResponse_FieldMask{}
	res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorIsp})
	res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAsInfo})
	res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorCarrier})
	res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAccessProvider})
	return res
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResolveGeoIPResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResolveGeoIPResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResolveGeoIPResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResolveGeoIPResponse_FieldPath(raw)
	})
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Subtract(other *ResolveGeoIPResponse_FieldMask) *ResolveGeoIPResponse_FieldMask {
	result := &ResolveGeoIPResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ResolveGeoIPResponse_FieldPathSelector]gotenobject.FieldMask{
		ResolveGeoIPResponse_FieldPathSelectorLocation: &common.Location_FieldMask{},
		ResolveGeoIPResponse_FieldPathSelectorAsInfo:   &common.ASInfo_FieldMask{},
		ResolveGeoIPResponse_FieldPathSelectorCarrier:  &common.Carrier_FieldMask{},
	}
	mySubMasks := map[ResolveGeoIPResponse_FieldPathSelector]gotenobject.FieldMask{
		ResolveGeoIPResponse_FieldPathSelectorLocation: &common.Location_FieldMask{},
		ResolveGeoIPResponse_FieldPathSelectorAsInfo:   &common.ASInfo_FieldMask{},
		ResolveGeoIPResponse_FieldPathSelectorCarrier:  &common.Carrier_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResolveGeoIPResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ResolveGeoIPResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ResolveGeoIPResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ResolveGeoIPResponse_FieldPathSelectorLocation:
						mySubMasks[ResolveGeoIPResponse_FieldPathSelectorLocation] = common.FullLocation_FieldMask()
					case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
						mySubMasks[ResolveGeoIPResponse_FieldPathSelectorAsInfo] = common.FullASInfo_FieldMask()
					case ResolveGeoIPResponse_FieldPathSelectorCarrier:
						mySubMasks[ResolveGeoIPResponse_FieldPathSelectorCarrier] = common.FullCarrier_FieldMask()
					}
				} else if tp, ok := path.(*ResolveGeoIPResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ResolveGeoIPResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResolveGeoIPResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResolveGeoIPResponse_FieldMask) FilterInputFields() *ResolveGeoIPResponse_FieldMask {
	result := &ResolveGeoIPResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResolveGeoIPResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResolveGeoIPResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResolveGeoIPResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResolveGeoIPResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResolveGeoIPResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) AppendPath(path ResolveGeoIPResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResolveGeoIPResponse_FieldPath))
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) GetPaths() []ResolveGeoIPResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResolveGeoIPResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Set(target, source *ResolveGeoIPResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResolveGeoIPResponse), source.(*ResolveGeoIPResponse))
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) Project(source *ResolveGeoIPResponse) *ResolveGeoIPResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResolveGeoIPResponse{}
	locationMask := &common.Location_FieldMask{}
	wholeLocationAccepted := false
	asInfoMask := &common.ASInfo_FieldMask{}
	wholeAsInfoAccepted := false
	carrierMask := &common.Carrier_FieldMask{}
	wholeCarrierAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResolveGeoIPResponse_FieldTerminalPath:
			switch tp.selector {
			case ResolveGeoIPResponse_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case ResolveGeoIPResponse_FieldPathSelectorIsp:
				result.Isp = source.Isp
			case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
				result.AsInfo = source.AsInfo
				wholeAsInfoAccepted = true
			case ResolveGeoIPResponse_FieldPathSelectorCarrier:
				result.Carrier = source.Carrier
				wholeCarrierAccepted = true
			case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
				result.AccessProvider = source.AccessProvider
			}
		case *ResolveGeoIPResponse_FieldSubPath:
			switch tp.selector {
			case ResolveGeoIPResponse_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
				asInfoMask.AppendPath(tp.subPath.(common.ASInfo_FieldPath))
			case ResolveGeoIPResponse_FieldPathSelectorCarrier:
				carrierMask.AppendPath(tp.subPath.(common.Carrier_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholeAsInfoAccepted == false && len(asInfoMask.Paths) > 0 {
		result.AsInfo = asInfoMask.Project(source.GetAsInfo())
	}
	if wholeCarrierAccepted == false && len(carrierMask.Paths) > 0 {
		result.Carrier = carrierMask.Project(source.GetCarrier())
	}
	return result
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResolveGeoIPResponse))
}

func (fieldMask *ResolveGeoIPResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BulkResolveGeoIPRequest_FieldMask struct {
	Paths []BulkResolveGeoIPRequest_FieldPath
}

func FullBulkResolveGeoIPRequest_FieldMask() *BulkResolveGeoIPRequest_FieldMask {
	res := &BulkResolveGeoIPRequest_FieldMask{}
	res.Paths = append(res.Paths, &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorAddress})
	return res
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BulkResolveGeoIPRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBulkResolveGeoIPRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BulkResolveGeoIPRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBulkResolveGeoIPRequest_FieldPath(raw)
	})
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Subtract(other *BulkResolveGeoIPRequest_FieldMask) *BulkResolveGeoIPRequest_FieldMask {
	result := &BulkResolveGeoIPRequest_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BulkResolveGeoIPRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BulkResolveGeoIPRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BulkResolveGeoIPRequest_FieldMask) FilterInputFields() *BulkResolveGeoIPRequest_FieldMask {
	result := &BulkResolveGeoIPRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BulkResolveGeoIPRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BulkResolveGeoIPRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBulkResolveGeoIPRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BulkResolveGeoIPRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BulkResolveGeoIPRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) AppendPath(path BulkResolveGeoIPRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BulkResolveGeoIPRequest_FieldPath))
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) GetPaths() []BulkResolveGeoIPRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBulkResolveGeoIPRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Set(target, source *BulkResolveGeoIPRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BulkResolveGeoIPRequest), source.(*BulkResolveGeoIPRequest))
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) Project(source *BulkResolveGeoIPRequest) *BulkResolveGeoIPRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BulkResolveGeoIPRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BulkResolveGeoIPRequest_FieldTerminalPath:
			switch tp.selector {
			case BulkResolveGeoIPRequest_FieldPathSelectorName:
				result.Name = source.Name
			case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
				result.Address = source.Address
			}
		}
	}
	return result
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BulkResolveGeoIPRequest))
}

func (fieldMask *BulkResolveGeoIPRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BulkResolveGeoIPResponse_FieldMask struct {
	Paths []BulkResolveGeoIPResponse_FieldPath
}

func FullBulkResolveGeoIPResponse_FieldMask() *BulkResolveGeoIPResponse_FieldMask {
	res := &BulkResolveGeoIPResponse_FieldMask{}
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponse_FieldTerminalPath{selector: BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo})
	return res
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BulkResolveGeoIPResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBulkResolveGeoIPResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BulkResolveGeoIPResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBulkResolveGeoIPResponse_FieldPath(raw)
	})
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Subtract(other *BulkResolveGeoIPResponse_FieldMask) *BulkResolveGeoIPResponse_FieldMask {
	result := &BulkResolveGeoIPResponse_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[BulkResolveGeoIPResponse_FieldPathSelector]gotenobject.FieldMask{
		BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo: &BulkResolveGeoIPResponse_GeoIPData_FieldMask{},
	}
	mySubMasks := map[BulkResolveGeoIPResponse_FieldPathSelector]gotenobject.FieldMask{
		BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo: &BulkResolveGeoIPResponse_GeoIPData_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BulkResolveGeoIPResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BulkResolveGeoIPResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BulkResolveGeoIPResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
						mySubMasks[BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo] = FullBulkResolveGeoIPResponse_GeoIPData_FieldMask()
					}
				} else if tp, ok := path.(*BulkResolveGeoIPResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BulkResolveGeoIPResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BulkResolveGeoIPResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BulkResolveGeoIPResponse_FieldMask) FilterInputFields() *BulkResolveGeoIPResponse_FieldMask {
	result := &BulkResolveGeoIPResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BulkResolveGeoIPResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BulkResolveGeoIPResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBulkResolveGeoIPResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BulkResolveGeoIPResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BulkResolveGeoIPResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) AppendPath(path BulkResolveGeoIPResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BulkResolveGeoIPResponse_FieldPath))
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) GetPaths() []BulkResolveGeoIPResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBulkResolveGeoIPResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Set(target, source *BulkResolveGeoIPResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BulkResolveGeoIPResponse), source.(*BulkResolveGeoIPResponse))
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) Project(source *BulkResolveGeoIPResponse) *BulkResolveGeoIPResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BulkResolveGeoIPResponse{}
	geoIpInfoMask := &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	wholeGeoIpInfoAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BulkResolveGeoIPResponse_FieldTerminalPath:
			switch tp.selector {
			case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
				result.GeoIpInfo = source.GeoIpInfo
				wholeGeoIpInfoAccepted = true
			}
		case *BulkResolveGeoIPResponse_FieldSubPath:
			switch tp.selector {
			case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
				geoIpInfoMask.AppendPath(tp.subPath.(BulkResolveGeoIPResponseGeoIPData_FieldPath))
			}
		}
	}
	if wholeGeoIpInfoAccepted == false && len(geoIpInfoMask.Paths) > 0 {
		for _, sourceItem := range source.GetGeoIpInfo() {
			result.GeoIpInfo = append(result.GeoIpInfo, geoIpInfoMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BulkResolveGeoIPResponse))
}

func (fieldMask *BulkResolveGeoIPResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BulkResolveGeoIPResponse_GeoIPData_FieldMask struct {
	Paths []BulkResolveGeoIPResponseGeoIPData_FieldPath
}

func FullBulkResolveGeoIPResponse_GeoIPData_FieldMask() *BulkResolveGeoIPResponse_GeoIPData_FieldMask {
	res := &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp})
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo})
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier})
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider})
	res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress})
	return res
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(raw)
	})
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) ProtoMessage() {}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Subtract(other *BulkResolveGeoIPResponse_GeoIPData_FieldMask) *BulkResolveGeoIPResponse_GeoIPData_FieldMask {
	result := &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[BulkResolveGeoIPResponseGeoIPData_FieldPathSelector]gotenobject.FieldMask{
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation: &common.Location_FieldMask{},
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:   &common.ASInfo_FieldMask{},
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:  &common.Carrier_FieldMask{},
	}
	mySubMasks := map[BulkResolveGeoIPResponseGeoIPData_FieldPathSelector]gotenobject.FieldMask{
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation: &common.Location_FieldMask{},
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:   &common.ASInfo_FieldMask{},
		BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:  &common.Carrier_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BulkResolveGeoIPResponseGeoIPData_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath); ok {
					switch tp.selector {
					case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
						mySubMasks[BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation] = common.FullLocation_FieldMask()
					case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
						mySubMasks[BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo] = common.FullASInfo_FieldMask()
					case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
						mySubMasks[BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier] = common.FullCarrier_FieldMask()
					}
				} else if tp, ok := path.(*BulkResolveGeoIPResponseGeoIPData_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BulkResolveGeoIPResponse_GeoIPData_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) FilterInputFields() *BulkResolveGeoIPResponse_GeoIPData_FieldMask {
	result := &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BulkResolveGeoIPResponseGeoIPData_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BulkResolveGeoIPResponse_GeoIPData_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BulkResolveGeoIPResponse_GeoIPData_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) AppendPath(path BulkResolveGeoIPResponseGeoIPData_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BulkResolveGeoIPResponseGeoIPData_FieldPath))
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) GetPaths() []BulkResolveGeoIPResponseGeoIPData_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Set(target, source *BulkResolveGeoIPResponse_GeoIPData) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BulkResolveGeoIPResponse_GeoIPData), source.(*BulkResolveGeoIPResponse_GeoIPData))
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) Project(source *BulkResolveGeoIPResponse_GeoIPData) *BulkResolveGeoIPResponse_GeoIPData {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BulkResolveGeoIPResponse_GeoIPData{}
	locationMask := &common.Location_FieldMask{}
	wholeLocationAccepted := false
	asInfoMask := &common.ASInfo_FieldMask{}
	wholeAsInfoAccepted := false
	carrierMask := &common.Carrier_FieldMask{}
	wholeCarrierAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath:
			switch tp.selector {
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
				result.Isp = source.Isp
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
				result.AsInfo = source.AsInfo
				wholeAsInfoAccepted = true
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
				result.Carrier = source.Carrier
				wholeCarrierAccepted = true
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
				result.AccessProvider = source.AccessProvider
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
				result.IpAddress = source.IpAddress
			}
		case *BulkResolveGeoIPResponseGeoIPData_FieldSubPath:
			switch tp.selector {
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
				asInfoMask.AppendPath(tp.subPath.(common.ASInfo_FieldPath))
			case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
				carrierMask.AppendPath(tp.subPath.(common.Carrier_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholeAsInfoAccepted == false && len(asInfoMask.Paths) > 0 {
		result.AsInfo = asInfoMask.Project(source.GetAsInfo())
	}
	if wholeCarrierAccepted == false && len(carrierMask.Paths) > 0 {
		result.Carrier = carrierMask.Project(source.GetCarrier())
	}
	return result
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

func (fieldMask *BulkResolveGeoIPResponse_GeoIPData_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ResolveEnvironmentRequest_FieldMask struct {
	Paths []ResolveEnvironmentRequest_FieldPath
}

func FullResolveEnvironmentRequest_FieldMask() *ResolveEnvironmentRequest_FieldMask {
	res := &ResolveEnvironmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorAddress})
	res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorWlans})
	return res
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResolveEnvironmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResolveEnvironmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResolveEnvironmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResolveEnvironmentRequest_FieldPath(raw)
	})
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Subtract(other *ResolveEnvironmentRequest_FieldMask) *ResolveEnvironmentRequest_FieldMask {
	result := &ResolveEnvironmentRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ResolveEnvironmentRequest_FieldPathSelector]gotenobject.FieldMask{
		ResolveEnvironmentRequest_FieldPathSelectorWlans: &common.WLAN_FieldMask{},
	}
	mySubMasks := map[ResolveEnvironmentRequest_FieldPathSelector]gotenobject.FieldMask{
		ResolveEnvironmentRequest_FieldPathSelectorWlans: &common.WLAN_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResolveEnvironmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ResolveEnvironmentRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ResolveEnvironmentRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ResolveEnvironmentRequest_FieldPathSelectorWlans:
						mySubMasks[ResolveEnvironmentRequest_FieldPathSelectorWlans] = common.FullWLAN_FieldMask()
					}
				} else if tp, ok := path.(*ResolveEnvironmentRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ResolveEnvironmentRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResolveEnvironmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResolveEnvironmentRequest_FieldMask) FilterInputFields() *ResolveEnvironmentRequest_FieldMask {
	result := &ResolveEnvironmentRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResolveEnvironmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResolveEnvironmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResolveEnvironmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResolveEnvironmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResolveEnvironmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) AppendPath(path ResolveEnvironmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResolveEnvironmentRequest_FieldPath))
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) GetPaths() []ResolveEnvironmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResolveEnvironmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Set(target, source *ResolveEnvironmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResolveEnvironmentRequest), source.(*ResolveEnvironmentRequest))
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) Project(source *ResolveEnvironmentRequest) *ResolveEnvironmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResolveEnvironmentRequest{}
	wlansMask := &common.WLAN_FieldMask{}
	wholeWlansAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResolveEnvironmentRequest_FieldTerminalPath:
			switch tp.selector {
			case ResolveEnvironmentRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ResolveEnvironmentRequest_FieldPathSelectorAddress:
				result.Address = source.Address
			case ResolveEnvironmentRequest_FieldPathSelectorWlans:
				result.Wlans = source.Wlans
				wholeWlansAccepted = true
			}
		case *ResolveEnvironmentRequest_FieldSubPath:
			switch tp.selector {
			case ResolveEnvironmentRequest_FieldPathSelectorWlans:
				wlansMask.AppendPath(tp.subPath.(common.WLAN_FieldPath))
			}
		}
	}
	if wholeWlansAccepted == false && len(wlansMask.Paths) > 0 {
		for _, sourceItem := range source.GetWlans() {
			result.Wlans = append(result.Wlans, wlansMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResolveEnvironmentRequest))
}

func (fieldMask *ResolveEnvironmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ResolveEnvironmentResponse_FieldMask struct {
	Paths []ResolveEnvironmentResponse_FieldPath
}

func FullResolveEnvironmentResponse_FieldMask() *ResolveEnvironmentResponse_FieldMask {
	res := &ResolveEnvironmentResponse_FieldMask{}
	res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorAsInfo})
	res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorCarrier})
	res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation})
	return res
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResolveEnvironmentResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResolveEnvironmentResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResolveEnvironmentResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResolveEnvironmentResponse_FieldPath(raw)
	})
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Subtract(other *ResolveEnvironmentResponse_FieldMask) *ResolveEnvironmentResponse_FieldMask {
	result := &ResolveEnvironmentResponse_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[ResolveEnvironmentResponse_FieldPathSelector]gotenobject.FieldMask{
		ResolveEnvironmentResponse_FieldPathSelectorLocation:           &common.Location_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorAsInfo:             &common.ASInfo_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorCarrier:            &common.Carrier_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation: &common.Location_FieldMask{},
	}
	mySubMasks := map[ResolveEnvironmentResponse_FieldPathSelector]gotenobject.FieldMask{
		ResolveEnvironmentResponse_FieldPathSelectorLocation:           &common.Location_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorAsInfo:             &common.ASInfo_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorCarrier:            &common.Carrier_FieldMask{},
		ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation: &common.Location_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResolveEnvironmentResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ResolveEnvironmentResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ResolveEnvironmentResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ResolveEnvironmentResponse_FieldPathSelectorLocation:
						mySubMasks[ResolveEnvironmentResponse_FieldPathSelectorLocation] = common.FullLocation_FieldMask()
					case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
						mySubMasks[ResolveEnvironmentResponse_FieldPathSelectorAsInfo] = common.FullASInfo_FieldMask()
					case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
						mySubMasks[ResolveEnvironmentResponse_FieldPathSelectorCarrier] = common.FullCarrier_FieldMask()
					case ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation:
						mySubMasks[ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation] = common.FullLocation_FieldMask()
					}
				} else if tp, ok := path.(*ResolveEnvironmentResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ResolveEnvironmentResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResolveEnvironmentResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResolveEnvironmentResponse_FieldMask) FilterInputFields() *ResolveEnvironmentResponse_FieldMask {
	result := &ResolveEnvironmentResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResolveEnvironmentResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResolveEnvironmentResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResolveEnvironmentResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResolveEnvironmentResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResolveEnvironmentResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) AppendPath(path ResolveEnvironmentResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResolveEnvironmentResponse_FieldPath))
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) GetPaths() []ResolveEnvironmentResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResolveEnvironmentResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Set(target, source *ResolveEnvironmentResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResolveEnvironmentResponse), source.(*ResolveEnvironmentResponse))
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) Project(source *ResolveEnvironmentResponse) *ResolveEnvironmentResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResolveEnvironmentResponse{}
	locationMask := &common.Location_FieldMask{}
	wholeLocationAccepted := false
	asInfoMask := &common.ASInfo_FieldMask{}
	wholeAsInfoAccepted := false
	carrierMask := &common.Carrier_FieldMask{}
	wholeCarrierAccepted := false
	discoveredLocationMask := &common.Location_FieldMask{}
	wholeDiscoveredLocationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResolveEnvironmentResponse_FieldTerminalPath:
			switch tp.selector {
			case ResolveEnvironmentResponse_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
				result.AsInfo = source.AsInfo
				wholeAsInfoAccepted = true
			case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
				result.Carrier = source.Carrier
				wholeCarrierAccepted = true
			case ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation:
				result.DiscoveredLocation = source.DiscoveredLocation
				wholeDiscoveredLocationAccepted = true
			}
		case *ResolveEnvironmentResponse_FieldSubPath:
			switch tp.selector {
			case ResolveEnvironmentResponse_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
				asInfoMask.AppendPath(tp.subPath.(common.ASInfo_FieldPath))
			case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
				carrierMask.AppendPath(tp.subPath.(common.Carrier_FieldPath))
			case ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation:
				discoveredLocationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholeAsInfoAccepted == false && len(asInfoMask.Paths) > 0 {
		result.AsInfo = asInfoMask.Project(source.GetAsInfo())
	}
	if wholeCarrierAccepted == false && len(carrierMask.Paths) > 0 {
		result.Carrier = carrierMask.Project(source.GetCarrier())
	}
	if wholeDiscoveredLocationAccepted == false && len(discoveredLocationMask.Paths) > 0 {
		result.DiscoveredLocation = discoveredLocationMask.Project(source.GetDiscoveredLocation())
	}
	return result
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResolveEnvironmentResponse))
}

func (fieldMask *ResolveEnvironmentResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
