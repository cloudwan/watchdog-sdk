// Code generated by protoc-gen-goten-validate
// File: watchdog/proto/v1alpha2/geo_resolver_custom.proto
// DO NOT EDIT!!!

package geo_resolver_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = durationpb.Duration{}
	_ = timestamppb.Timestamp{}
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &latlng.LatLng{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (obj *ResolveGeoIPRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if ip := net.ParseIP(string(obj.Address)); ip == nil {
		return gotenvalidate.NewValidationError("ResolveGeoIPRequest", "address", obj.Address, "field must contain a valid IP address", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResolveGeoIPResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Location).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveGeoIPResponse", "location", obj.Location, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AsInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveGeoIPResponse", "asInfo", obj.AsInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Carrier).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveGeoIPResponse", "carrier", obj.Carrier, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *BulkResolveGeoIPRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *BulkResolveGeoIPResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.GeoIpInfo {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("BulkResolveGeoIPResponse", "geoIpInfo", obj.GeoIpInfo[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *BulkResolveGeoIPResponse_GeoIPData) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Location).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("GeoIPData", "location", obj.Location, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AsInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("GeoIPData", "asInfo", obj.AsInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Carrier).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("GeoIPData", "carrier", obj.Carrier, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResolveEnvironmentRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if ip := net.ParseIP(string(obj.Address)); ip == nil {
		return gotenvalidate.NewValidationError("ResolveEnvironmentRequest", "address", obj.Address, "field must contain a valid IP address", nil)
	}
	for idx, elem := range obj.Wlans {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ResolveEnvironmentRequest", "wlans", obj.Wlans[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.DeviceReportedCoordinates).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveEnvironmentRequest", "deviceReportedCoordinates", obj.DeviceReportedCoordinates, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResolveEnvironmentResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Location).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveEnvironmentResponse", "location", obj.Location, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AsInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveEnvironmentResponse", "asInfo", obj.AsInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Carrier).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveEnvironmentResponse", "carrier", obj.Carrier, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.DiscoveredLocation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResolveEnvironmentResponse", "discoveredLocation", obj.DiscoveredLocation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
