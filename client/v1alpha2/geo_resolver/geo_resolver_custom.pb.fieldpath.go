// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/geo_resolver_custom.proto
// DO NOT EDIT!!!

package geo_resolver_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResolveGeoIPRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResolveGeoIPRequest_FieldPathSelector
	Get(source *ResolveGeoIPRequest) []interface{}
	GetSingle(source *ResolveGeoIPRequest) (interface{}, bool)
	ClearValue(item *ResolveGeoIPRequest)

	// Those methods build corresponding ResolveGeoIPRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResolveGeoIPRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ResolveGeoIPRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResolveGeoIPRequest_FieldPathArrayItemValue
}

type ResolveGeoIPRequest_FieldPathSelector int32

const (
	ResolveGeoIPRequest_FieldPathSelectorName    ResolveGeoIPRequest_FieldPathSelector = 0
	ResolveGeoIPRequest_FieldPathSelectorAddress ResolveGeoIPRequest_FieldPathSelector = 1
)

func (s ResolveGeoIPRequest_FieldPathSelector) String() string {
	switch s {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		return "name"
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		return "address"
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", s))
	}
}

func BuildResolveGeoIPRequest_FieldPath(fp gotenobject.RawFieldPath) (ResolveGeoIPRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResolveGeoIPRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorName}, nil
		case "address":
			return &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorAddress}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResolveGeoIPRequest", fp)
}

func ParseResolveGeoIPRequest_FieldPath(rawField string) (ResolveGeoIPRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResolveGeoIPRequest_FieldPath(fp)
}

func MustParseResolveGeoIPRequest_FieldPath(rawField string) ResolveGeoIPRequest_FieldPath {
	fp, err := ParseResolveGeoIPRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResolveGeoIPRequest_FieldTerminalPath struct {
	selector ResolveGeoIPRequest_FieldPathSelector
}

var _ ResolveGeoIPRequest_FieldPath = (*ResolveGeoIPRequest_FieldTerminalPath)(nil)

func (fp *ResolveGeoIPRequest_FieldTerminalPath) Selector() ResolveGeoIPRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResolveGeoIPRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResolveGeoIPRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResolveGeoIPRequest
func (fp *ResolveGeoIPRequest_FieldTerminalPath) Get(source *ResolveGeoIPRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResolveGeoIPRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ResolveGeoIPRequest_FieldPathSelectorAddress:
			values = append(values, source.Address)
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResolveGeoIPRequest))
}

// GetSingle returns value pointed by specific field of from source ResolveGeoIPRequest
func (fp *ResolveGeoIPRequest_FieldTerminalPath) GetSingle(source *ResolveGeoIPRequest) (interface{}, bool) {
	switch fp.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResolveGeoIPRequest))
}

// GetDefault returns a default value of the field type
func (fp *ResolveGeoIPRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) ClearValue(item *ResolveGeoIPRequest) {
	if item != nil {
		switch fp.selector {
		case ResolveGeoIPRequest_FieldPathSelectorName:
			item.Name = nil
		case ResolveGeoIPRequest_FieldPathSelectorAddress:
			item.Address = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
		}
	}
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResolveGeoIPRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResolveGeoIPRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ResolveGeoIPRequest_FieldPathSelectorName ||
		fp.selector == ResolveGeoIPRequest_FieldPathSelectorAddress
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithIValue(value interface{}) ResolveGeoIPRequest_FieldPathValue {
	switch fp.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		return &ResolveGeoIPRequest_FieldTerminalPathValue{ResolveGeoIPRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		return &ResolveGeoIPRequest_FieldTerminalPathValue{ResolveGeoIPRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResolveGeoIPRequest_FieldPathArrayOfValues {
	fpaov := &ResolveGeoIPRequest_FieldTerminalPathArrayOfValues{ResolveGeoIPRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		return &ResolveGeoIPRequest_FieldTerminalPathArrayOfValues{ResolveGeoIPRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		return &ResolveGeoIPRequest_FieldTerminalPathArrayOfValues{ResolveGeoIPRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResolveGeoIPRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ResolveGeoIPRequest_FieldPathValue allows storing values for ResolveGeoIPRequest fields according to their type
type ResolveGeoIPRequest_FieldPathValue interface {
	ResolveGeoIPRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResolveGeoIPRequest)
	CompareWith(*ResolveGeoIPRequest) (cmp int, comparable bool)
}

func ParseResolveGeoIPRequest_FieldPathValue(pathStr, valueStr string) (ResolveGeoIPRequest_FieldPathValue, error) {
	fp, err := ParseResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResolveGeoIPRequest_FieldPathValue), nil
}

func MustParseResolveGeoIPRequest_FieldPathValue(pathStr, valueStr string) ResolveGeoIPRequest_FieldPathValue {
	fpv, err := ParseResolveGeoIPRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResolveGeoIPRequest_FieldTerminalPathValue struct {
	ResolveGeoIPRequest_FieldTerminalPath
	value interface{}
}

var _ ResolveGeoIPRequest_FieldPathValue = (*ResolveGeoIPRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResolveGeoIPRequest' as interface{}
func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ResolveGeoIPRequest
func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) SetTo(target **ResolveGeoIPRequest) {
	if *target == nil {
		*target = new(ResolveGeoIPRequest)
	}
	switch fpv.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fpv.selector))
	}
}

func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveGeoIPRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResolveGeoIPRequest_FieldTerminalPathValue' with the value under path in 'ResolveGeoIPRequest'.
func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) CompareWith(source *ResolveGeoIPRequest) (int, bool) {
	switch fpv.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPRequest: %d", fpv.selector))
	}
}

func (fpv *ResolveGeoIPRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResolveGeoIPRequest))
}

// ResolveGeoIPRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResolveGeoIPRequest according to their type
// Present only for array (repeated) types.
type ResolveGeoIPRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResolveGeoIPRequest_FieldPath
	ContainsValue(*ResolveGeoIPRequest) bool
}

// ParseResolveGeoIPRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ResolveGeoIPRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResolveGeoIPRequest_FieldPathArrayItemValue), nil
}

func MustParseResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr string) ResolveGeoIPRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResolveGeoIPRequest_FieldTerminalPathArrayItemValue struct {
	ResolveGeoIPRequest_FieldTerminalPath
	value interface{}
}

var _ ResolveGeoIPRequest_FieldPathArrayItemValue = (*ResolveGeoIPRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResolveGeoIPRequest as interface{}
func (fpaiv *ResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ResolveGeoIPRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResolveGeoIPRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveGeoIPRequest'
func (fpaiv *ResolveGeoIPRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ResolveGeoIPRequest) bool {
	slice := fpaiv.ResolveGeoIPRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ResolveGeoIPRequest_FieldPathArrayOfValues allows storing slice of values for ResolveGeoIPRequest fields according to their type
type ResolveGeoIPRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResolveGeoIPRequest_FieldPath
}

func ParseResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ResolveGeoIPRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResolveGeoIPRequest_FieldPathArrayOfValues), nil
}

func MustParseResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ResolveGeoIPRequest_FieldPathArrayOfValues {
	fpaov, err := ParseResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResolveGeoIPRequest_FieldTerminalPathArrayOfValues struct {
	ResolveGeoIPRequest_FieldTerminalPath
	values interface{}
}

var _ ResolveGeoIPRequest_FieldPathArrayOfValues = (*ResolveGeoIPRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResolveGeoIPRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResolveGeoIPRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ResolveGeoIPRequest_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResolveGeoIPRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ResolveGeoIPRequest_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResolveGeoIPResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResolveGeoIPResponse_FieldPathSelector
	Get(source *ResolveGeoIPResponse) []interface{}
	GetSingle(source *ResolveGeoIPResponse) (interface{}, bool)
	ClearValue(item *ResolveGeoIPResponse)

	// Those methods build corresponding ResolveGeoIPResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResolveGeoIPResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ResolveGeoIPResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResolveGeoIPResponse_FieldPathArrayItemValue
}

type ResolveGeoIPResponse_FieldPathSelector int32

const (
	ResolveGeoIPResponse_FieldPathSelectorLocation       ResolveGeoIPResponse_FieldPathSelector = 0
	ResolveGeoIPResponse_FieldPathSelectorIsp            ResolveGeoIPResponse_FieldPathSelector = 1
	ResolveGeoIPResponse_FieldPathSelectorAsInfo         ResolveGeoIPResponse_FieldPathSelector = 2
	ResolveGeoIPResponse_FieldPathSelectorCarrier        ResolveGeoIPResponse_FieldPathSelector = 3
	ResolveGeoIPResponse_FieldPathSelectorAccessProvider ResolveGeoIPResponse_FieldPathSelector = 4
)

func (s ResolveGeoIPResponse_FieldPathSelector) String() string {
	switch s {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return "location"
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		return "isp"
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return "as_info"
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return "carrier"
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		return "access_provider"
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", s))
	}
}

func BuildResolveGeoIPResponse_FieldPath(fp gotenobject.RawFieldPath) (ResolveGeoIPResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResolveGeoIPResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "location":
			return &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorLocation}, nil
		case "isp":
			return &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorIsp}, nil
		case "as_info", "asInfo", "as-info":
			return &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAsInfo}, nil
		case "carrier":
			return &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorCarrier}, nil
		case "access_provider", "accessProvider", "access-provider":
			return &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAccessProvider}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "as_info", "asInfo", "as-info":
			if subpath, err := common.BuildASInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorAsInfo, subPath: subpath}, nil
			}
		case "carrier":
			if subpath, err := common.BuildCarrier_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorCarrier, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResolveGeoIPResponse", fp)
}

func ParseResolveGeoIPResponse_FieldPath(rawField string) (ResolveGeoIPResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResolveGeoIPResponse_FieldPath(fp)
}

func MustParseResolveGeoIPResponse_FieldPath(rawField string) ResolveGeoIPResponse_FieldPath {
	fp, err := ParseResolveGeoIPResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResolveGeoIPResponse_FieldTerminalPath struct {
	selector ResolveGeoIPResponse_FieldPathSelector
}

var _ ResolveGeoIPResponse_FieldPath = (*ResolveGeoIPResponse_FieldTerminalPath)(nil)

func (fp *ResolveGeoIPResponse_FieldTerminalPath) Selector() ResolveGeoIPResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResolveGeoIPResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResolveGeoIPResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResolveGeoIPResponse
func (fp *ResolveGeoIPResponse_FieldTerminalPath) Get(source *ResolveGeoIPResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResolveGeoIPResponse_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case ResolveGeoIPResponse_FieldPathSelectorIsp:
			values = append(values, source.Isp)
		case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
			if source.AsInfo != nil {
				values = append(values, source.AsInfo)
			}
		case ResolveGeoIPResponse_FieldPathSelectorCarrier:
			if source.Carrier != nil {
				values = append(values, source.Carrier)
			}
		case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
			values = append(values, source.AccessProvider)
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResolveGeoIPResponse))
}

// GetSingle returns value pointed by specific field of from source ResolveGeoIPResponse
func (fp *ResolveGeoIPResponse_FieldTerminalPath) GetSingle(source *ResolveGeoIPResponse) (interface{}, bool) {
	switch fp.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		return source.GetIsp(), source != nil
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		res := source.GetAsInfo()
		return res, res != nil
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		res := source.GetCarrier()
		return res, res != nil
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		return source.GetAccessProvider(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResolveGeoIPResponse))
}

// GetDefault returns a default value of the field type
func (fp *ResolveGeoIPResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		return ""
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return (*common.ASInfo)(nil)
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return (*common.Carrier)(nil)
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) ClearValue(item *ResolveGeoIPResponse) {
	if item != nil {
		switch fp.selector {
		case ResolveGeoIPResponse_FieldPathSelectorLocation:
			item.Location = nil
		case ResolveGeoIPResponse_FieldPathSelectorIsp:
			item.Isp = ""
		case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
			item.AsInfo = nil
		case ResolveGeoIPResponse_FieldPathSelectorCarrier:
			item.Carrier = nil
		case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
			item.AccessProvider = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
		}
	}
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResolveGeoIPResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResolveGeoIPResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ResolveGeoIPResponse_FieldPathSelectorIsp ||
		fp.selector == ResolveGeoIPResponse_FieldPathSelectorAccessProvider
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithIValue(value interface{}) ResolveGeoIPResponse_FieldPathValue {
	switch fp.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return &ResolveGeoIPResponse_FieldTerminalPathValue{ResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		return &ResolveGeoIPResponse_FieldTerminalPathValue{ResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return &ResolveGeoIPResponse_FieldTerminalPathValue{ResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(*common.ASInfo)}
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return &ResolveGeoIPResponse_FieldTerminalPathValue{ResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(*common.Carrier)}
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		return &ResolveGeoIPResponse_FieldTerminalPathValue{ResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResolveGeoIPResponse_FieldPathArrayOfValues {
	fpaov := &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		return &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([]*common.ASInfo)}
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([]*common.Carrier)}
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		return &ResolveGeoIPResponse_FieldTerminalPathArrayOfValues{ResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResolveGeoIPResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *ResolveGeoIPResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ResolveGeoIPResponse_FieldSubPath struct {
	selector ResolveGeoIPResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ResolveGeoIPResponse_FieldPath = (*ResolveGeoIPResponse_FieldSubPath)(nil)

func (fps *ResolveGeoIPResponse_FieldSubPath) Selector() ResolveGeoIPResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ResolveGeoIPResponse_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ResolveGeoIPResponse_FieldSubPath) AsAsInfoSubPath() (common.ASInfo_FieldPath, bool) {
	res, ok := fps.subPath.(common.ASInfo_FieldPath)
	return res, ok
}
func (fps *ResolveGeoIPResponse_FieldSubPath) AsCarrierSubPath() (common.Carrier_FieldPath, bool) {
	res, ok := fps.subPath.(common.Carrier_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ResolveGeoIPResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ResolveGeoIPResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ResolveGeoIPResponse
func (fps *ResolveGeoIPResponse_FieldSubPath) Get(source *ResolveGeoIPResponse) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else if asASInfoFieldPath, ok := fps.AsAsInfoSubPath(); ok {
		values = append(values, asASInfoFieldPath.Get(source.GetAsInfo())...)
	} else if asCarrierFieldPath, ok := fps.AsCarrierSubPath(); ok {
		values = append(values, asCarrierFieldPath.Get(source.GetCarrier())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fps.selector))
	}
	return
}

func (fps *ResolveGeoIPResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ResolveGeoIPResponse))
}

// GetSingle returns value of selected field from source ResolveGeoIPResponse
func (fps *ResolveGeoIPResponse_FieldSubPath) GetSingle(source *ResolveGeoIPResponse) (interface{}, bool) {
	switch fps.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		if source.GetAsInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAsInfo())
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		if source.GetCarrier() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fps.selector))
	}
}

func (fps *ResolveGeoIPResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ResolveGeoIPResponse))
}

// GetDefault returns a default value of the field type
func (fps *ResolveGeoIPResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ResolveGeoIPResponse_FieldSubPath) ClearValue(item *ResolveGeoIPResponse) {
	if item != nil {
		switch fps.selector {
		case ResolveGeoIPResponse_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
			fps.subPath.ClearValueRaw(item.AsInfo)
		case ResolveGeoIPResponse_FieldPathSelectorCarrier:
			fps.subPath.ClearValueRaw(item.Carrier)
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fps.selector))
		}
	}
}

func (fps *ResolveGeoIPResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ResolveGeoIPResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ResolveGeoIPResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithIValue(value interface{}) ResolveGeoIPResponse_FieldPathValue {
	return &ResolveGeoIPResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ResolveGeoIPResponse_FieldPathArrayOfValues {
	return &ResolveGeoIPResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ResolveGeoIPResponse_FieldPathArrayItemValue {
	return &ResolveGeoIPResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ResolveGeoIPResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ResolveGeoIPResponse_FieldPathValue allows storing values for ResolveGeoIPResponse fields according to their type
type ResolveGeoIPResponse_FieldPathValue interface {
	ResolveGeoIPResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResolveGeoIPResponse)
	CompareWith(*ResolveGeoIPResponse) (cmp int, comparable bool)
}

func ParseResolveGeoIPResponse_FieldPathValue(pathStr, valueStr string) (ResolveGeoIPResponse_FieldPathValue, error) {
	fp, err := ParseResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResolveGeoIPResponse_FieldPathValue), nil
}

func MustParseResolveGeoIPResponse_FieldPathValue(pathStr, valueStr string) ResolveGeoIPResponse_FieldPathValue {
	fpv, err := ParseResolveGeoIPResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResolveGeoIPResponse_FieldTerminalPathValue struct {
	ResolveGeoIPResponse_FieldTerminalPath
	value interface{}
}

var _ ResolveGeoIPResponse_FieldPathValue = (*ResolveGeoIPResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResolveGeoIPResponse' as interface{}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) AsIspValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) AsAsInfoValue() (*common.ASInfo, bool) {
	res, ok := fpv.value.(*common.ASInfo)
	return res, ok
}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) AsCarrierValue() (*common.Carrier, bool) {
	res, ok := fpv.value.(*common.Carrier)
	return res, ok
}
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) AsAccessProviderValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ResolveGeoIPResponse
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) SetTo(target **ResolveGeoIPResponse) {
	if *target == nil {
		*target = new(ResolveGeoIPResponse)
	}
	switch fpv.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		(*target).Isp = fpv.value.(string)
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		(*target).AsInfo = fpv.value.(*common.ASInfo)
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		(*target).Carrier = fpv.value.(*common.Carrier)
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		(*target).AccessProvider = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fpv.selector))
	}
}

func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveGeoIPResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResolveGeoIPResponse_FieldTerminalPathValue' with the value under path in 'ResolveGeoIPResponse'.
func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) CompareWith(source *ResolveGeoIPResponse) (int, bool) {
	switch fpv.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return 0, false
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		leftValue := fpv.value.(string)
		rightValue := source.GetIsp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return 0, false
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return 0, false
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		leftValue := fpv.value.(string)
		rightValue := source.GetAccessProvider()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fpv.selector))
	}
}

func (fpv *ResolveGeoIPResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResolveGeoIPResponse))
}

type ResolveGeoIPResponse_FieldSubPathValue struct {
	ResolveGeoIPResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ResolveGeoIPResponse_FieldPathValue = (*ResolveGeoIPResponse_FieldSubPathValue)(nil)

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) AsAsInfoPathValue() (common.ASInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ASInfo_FieldPathValue)
	return res, ok
}
func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) AsCarrierPathValue() (common.Carrier_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Carrier_FieldPathValue)
	return res, ok
}

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) SetTo(target **ResolveGeoIPResponse) {
	if *target == nil {
		*target = new(ResolveGeoIPResponse)
	}
	switch fpvs.Selector() {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		fpvs.subPathValue.(common.ASInfo_FieldPathValue).SetTo(&(*target).AsInfo)
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		fpvs.subPathValue.(common.Carrier_FieldPathValue).SetTo(&(*target).Carrier)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveGeoIPResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) CompareWith(source *ResolveGeoIPResponse) (int, bool) {
	switch fpvs.Selector() {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return fpvs.subPathValue.(common.ASInfo_FieldPathValue).CompareWith(source.GetAsInfo())
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return fpvs.subPathValue.(common.Carrier_FieldPathValue).CompareWith(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveGeoIPResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ResolveGeoIPResponse))
}

// ResolveGeoIPResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ResolveGeoIPResponse according to their type
// Present only for array (repeated) types.
type ResolveGeoIPResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResolveGeoIPResponse_FieldPath
	ContainsValue(*ResolveGeoIPResponse) bool
}

// ParseResolveGeoIPResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ResolveGeoIPResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResolveGeoIPResponse_FieldPathArrayItemValue), nil
}

func MustParseResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr string) ResolveGeoIPResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResolveGeoIPResponse_FieldTerminalPathArrayItemValue struct {
	ResolveGeoIPResponse_FieldTerminalPath
	value interface{}
}

var _ ResolveGeoIPResponse_FieldPathArrayItemValue = (*ResolveGeoIPResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResolveGeoIPResponse as interface{}
func (fpaiv *ResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ResolveGeoIPResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResolveGeoIPResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveGeoIPResponse'
func (fpaiv *ResolveGeoIPResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ResolveGeoIPResponse) bool {
	slice := fpaiv.ResolveGeoIPResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ResolveGeoIPResponse_FieldSubPathArrayItemValue struct {
	ResolveGeoIPResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ResolveGeoIPResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ResolveGeoIPResponse_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ResolveGeoIPResponse_FieldSubPathArrayItemValue) AsAsInfoPathItemValue() (common.ASInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ResolveGeoIPResponse_FieldSubPathArrayItemValue) AsCarrierPathItemValue() (common.Carrier_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveGeoIPResponse'
func (fpaivs *ResolveGeoIPResponse_FieldSubPathArrayItemValue) ContainsValue(source *ResolveGeoIPResponse) bool {
	switch fpaivs.Selector() {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		return fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue).ContainsValue(source.GetAsInfo())
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		return fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue).ContainsValue(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveGeoIPResponse: %d", fpaivs.Selector()))
	}
}

// ResolveGeoIPResponse_FieldPathArrayOfValues allows storing slice of values for ResolveGeoIPResponse fields according to their type
type ResolveGeoIPResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResolveGeoIPResponse_FieldPath
}

func ParseResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ResolveGeoIPResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveGeoIPResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResolveGeoIPResponse_FieldPathArrayOfValues), nil
}

func MustParseResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ResolveGeoIPResponse_FieldPathArrayOfValues {
	fpaov, err := ParseResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResolveGeoIPResponse_FieldTerminalPathArrayOfValues struct {
	ResolveGeoIPResponse_FieldTerminalPath
	values interface{}
}

var _ ResolveGeoIPResponse_FieldPathArrayOfValues = (*ResolveGeoIPResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResolveGeoIPResponse_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ResolveGeoIPResponse_FieldPathSelectorIsp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ResolveGeoIPResponse_FieldPathSelectorAsInfo:
		for _, v := range fpaov.values.([]*common.ASInfo) {
			values = append(values, v)
		}
	case ResolveGeoIPResponse_FieldPathSelectorCarrier:
		for _, v := range fpaov.values.([]*common.Carrier) {
			values = append(values, v)
		}
	case ResolveGeoIPResponse_FieldPathSelectorAccessProvider:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsIspArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsAsInfoArrayOfValues() ([]*common.ASInfo, bool) {
	res, ok := fpaov.values.([]*common.ASInfo)
	return res, ok
}
func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsCarrierArrayOfValues() ([]*common.Carrier, bool) {
	res, ok := fpaov.values.([]*common.Carrier)
	return res, ok
}
func (fpaov *ResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsAccessProviderArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type ResolveGeoIPResponse_FieldSubPathArrayOfValues struct {
	ResolveGeoIPResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ResolveGeoIPResponse_FieldPathArrayOfValues = (*ResolveGeoIPResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ResolveGeoIPResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ResolveGeoIPResponse_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ResolveGeoIPResponse_FieldSubPathArrayOfValues) AsAsInfoPathArrayOfValues() (common.ASInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ASInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ResolveGeoIPResponse_FieldSubPathArrayOfValues) AsCarrierPathArrayOfValues() (common.Carrier_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Carrier_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BulkResolveGeoIPRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BulkResolveGeoIPRequest_FieldPathSelector
	Get(source *BulkResolveGeoIPRequest) []interface{}
	GetSingle(source *BulkResolveGeoIPRequest) (interface{}, bool)
	ClearValue(item *BulkResolveGeoIPRequest)

	// Those methods build corresponding BulkResolveGeoIPRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BulkResolveGeoIPRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BulkResolveGeoIPRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BulkResolveGeoIPRequest_FieldPathArrayItemValue
}

type BulkResolveGeoIPRequest_FieldPathSelector int32

const (
	BulkResolveGeoIPRequest_FieldPathSelectorName    BulkResolveGeoIPRequest_FieldPathSelector = 0
	BulkResolveGeoIPRequest_FieldPathSelectorAddress BulkResolveGeoIPRequest_FieldPathSelector = 1
)

func (s BulkResolveGeoIPRequest_FieldPathSelector) String() string {
	switch s {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		return "name"
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return "address"
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", s))
	}
}

func BuildBulkResolveGeoIPRequest_FieldPath(fp gotenobject.RawFieldPath) (BulkResolveGeoIPRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BulkResolveGeoIPRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorName}, nil
		case "address":
			return &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorAddress}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BulkResolveGeoIPRequest", fp)
}

func ParseBulkResolveGeoIPRequest_FieldPath(rawField string) (BulkResolveGeoIPRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBulkResolveGeoIPRequest_FieldPath(fp)
}

func MustParseBulkResolveGeoIPRequest_FieldPath(rawField string) BulkResolveGeoIPRequest_FieldPath {
	fp, err := ParseBulkResolveGeoIPRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BulkResolveGeoIPRequest_FieldTerminalPath struct {
	selector BulkResolveGeoIPRequest_FieldPathSelector
}

var _ BulkResolveGeoIPRequest_FieldPath = (*BulkResolveGeoIPRequest_FieldTerminalPath)(nil)

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) Selector() BulkResolveGeoIPRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BulkResolveGeoIPRequest
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) Get(source *BulkResolveGeoIPRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BulkResolveGeoIPRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
			for _, value := range source.GetAddress() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BulkResolveGeoIPRequest))
}

// GetSingle returns value pointed by specific field of from source BulkResolveGeoIPRequest
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) GetSingle(source *BulkResolveGeoIPRequest) (interface{}, bool) {
	switch fp.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		res := source.GetAddress()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BulkResolveGeoIPRequest))
}

// GetDefault returns a default value of the field type
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) ClearValue(item *BulkResolveGeoIPRequest) {
	if item != nil {
		switch fp.selector {
		case BulkResolveGeoIPRequest_FieldPathSelectorName:
			item.Name = nil
		case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
			item.Address = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
		}
	}
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BulkResolveGeoIPRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BulkResolveGeoIPRequest_FieldPathSelectorName ||
		fp.selector == BulkResolveGeoIPRequest_FieldPathSelectorAddress
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithIValue(value interface{}) BulkResolveGeoIPRequest_FieldPathValue {
	switch fp.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		return &BulkResolveGeoIPRequest_FieldTerminalPathValue{BulkResolveGeoIPRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return &BulkResolveGeoIPRequest_FieldTerminalPathValue{BulkResolveGeoIPRequest_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BulkResolveGeoIPRequest_FieldPathArrayOfValues {
	fpaov := &BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues{BulkResolveGeoIPRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		return &BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues{BulkResolveGeoIPRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return &BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues{BulkResolveGeoIPRequest_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BulkResolveGeoIPRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return &BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue{BulkResolveGeoIPRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BulkResolveGeoIPRequest_FieldPathValue allows storing values for BulkResolveGeoIPRequest fields according to their type
type BulkResolveGeoIPRequest_FieldPathValue interface {
	BulkResolveGeoIPRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BulkResolveGeoIPRequest)
	CompareWith(*BulkResolveGeoIPRequest) (cmp int, comparable bool)
}

func ParseBulkResolveGeoIPRequest_FieldPathValue(pathStr, valueStr string) (BulkResolveGeoIPRequest_FieldPathValue, error) {
	fp, err := ParseBulkResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BulkResolveGeoIPRequest_FieldPathValue), nil
}

func MustParseBulkResolveGeoIPRequest_FieldPathValue(pathStr, valueStr string) BulkResolveGeoIPRequest_FieldPathValue {
	fpv, err := ParseBulkResolveGeoIPRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BulkResolveGeoIPRequest_FieldTerminalPathValue struct {
	BulkResolveGeoIPRequest_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPRequest_FieldPathValue = (*BulkResolveGeoIPRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BulkResolveGeoIPRequest' as interface{}
func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) AsAddressValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object BulkResolveGeoIPRequest
func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) SetTo(target **BulkResolveGeoIPRequest) {
	if *target == nil {
		*target = new(BulkResolveGeoIPRequest)
	}
	switch fpv.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		(*target).Address = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkResolveGeoIPRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BulkResolveGeoIPRequest_FieldTerminalPathValue' with the value under path in 'BulkResolveGeoIPRequest'.
func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) CompareWith(source *BulkResolveGeoIPRequest) (int, bool) {
	switch fpv.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPRequest: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BulkResolveGeoIPRequest))
}

// BulkResolveGeoIPRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BulkResolveGeoIPRequest according to their type
// Present only for array (repeated) types.
type BulkResolveGeoIPRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BulkResolveGeoIPRequest_FieldPath
	ContainsValue(*BulkResolveGeoIPRequest) bool
}

// ParseBulkResolveGeoIPRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBulkResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BulkResolveGeoIPRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBulkResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BulkResolveGeoIPRequest_FieldPathArrayItemValue), nil
}

func MustParseBulkResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr string) BulkResolveGeoIPRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBulkResolveGeoIPRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue struct {
	BulkResolveGeoIPRequest_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPRequest_FieldPathArrayItemValue = (*BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BulkResolveGeoIPRequest as interface{}
func (fpaiv *BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue) AsAddressItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BulkResolveGeoIPRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BulkResolveGeoIPRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BulkResolveGeoIPRequest'
func (fpaiv *BulkResolveGeoIPRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BulkResolveGeoIPRequest) bool {
	slice := fpaiv.BulkResolveGeoIPRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BulkResolveGeoIPRequest_FieldPathArrayOfValues allows storing slice of values for BulkResolveGeoIPRequest fields according to their type
type BulkResolveGeoIPRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BulkResolveGeoIPRequest_FieldPath
}

func ParseBulkResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BulkResolveGeoIPRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBulkResolveGeoIPRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BulkResolveGeoIPRequest_FieldPathArrayOfValues), nil
}

func MustParseBulkResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BulkResolveGeoIPRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBulkResolveGeoIPRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues struct {
	BulkResolveGeoIPRequest_FieldTerminalPath
	values interface{}
}

var _ BulkResolveGeoIPRequest_FieldPathArrayOfValues = (*BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BulkResolveGeoIPRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case BulkResolveGeoIPRequest_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *BulkResolveGeoIPRequest_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BulkResolveGeoIPResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BulkResolveGeoIPResponse_FieldPathSelector
	Get(source *BulkResolveGeoIPResponse) []interface{}
	GetSingle(source *BulkResolveGeoIPResponse) (interface{}, bool)
	ClearValue(item *BulkResolveGeoIPResponse)

	// Those methods build corresponding BulkResolveGeoIPResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BulkResolveGeoIPResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponse_FieldPathArrayItemValue
}

type BulkResolveGeoIPResponse_FieldPathSelector int32

const (
	BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo BulkResolveGeoIPResponse_FieldPathSelector = 0
)

func (s BulkResolveGeoIPResponse_FieldPathSelector) String() string {
	switch s {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return "geo_ip_info"
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", s))
	}
}

func BuildBulkResolveGeoIPResponse_FieldPath(fp gotenobject.RawFieldPath) (BulkResolveGeoIPResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BulkResolveGeoIPResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "geo_ip_info", "geoIpInfo", "geo-ip-info":
			return &BulkResolveGeoIPResponse_FieldTerminalPath{selector: BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo}, nil
		}
	} else {
		switch fp[0] {
		case "geo_ip_info", "geoIpInfo", "geo-ip-info":
			if subpath, err := BuildBulkResolveGeoIPResponseGeoIPData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BulkResolveGeoIPResponse_FieldSubPath{selector: BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BulkResolveGeoIPResponse", fp)
}

func ParseBulkResolveGeoIPResponse_FieldPath(rawField string) (BulkResolveGeoIPResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBulkResolveGeoIPResponse_FieldPath(fp)
}

func MustParseBulkResolveGeoIPResponse_FieldPath(rawField string) BulkResolveGeoIPResponse_FieldPath {
	fp, err := ParseBulkResolveGeoIPResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BulkResolveGeoIPResponse_FieldTerminalPath struct {
	selector BulkResolveGeoIPResponse_FieldPathSelector
}

var _ BulkResolveGeoIPResponse_FieldPath = (*BulkResolveGeoIPResponse_FieldTerminalPath)(nil)

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) Selector() BulkResolveGeoIPResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BulkResolveGeoIPResponse
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) Get(source *BulkResolveGeoIPResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
			for _, value := range source.GetGeoIpInfo() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BulkResolveGeoIPResponse))
}

// GetSingle returns value pointed by specific field of from source BulkResolveGeoIPResponse
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) GetSingle(source *BulkResolveGeoIPResponse) (interface{}, bool) {
	switch fp.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		res := source.GetGeoIpInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BulkResolveGeoIPResponse))
}

// GetDefault returns a default value of the field type
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return ([]*BulkResolveGeoIPResponse_GeoIPData)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) ClearValue(item *BulkResolveGeoIPResponse) {
	if item != nil {
		switch fp.selector {
		case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
			item.GeoIpInfo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
		}
	}
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BulkResolveGeoIPResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithIValue(value interface{}) BulkResolveGeoIPResponse_FieldPathValue {
	switch fp.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return &BulkResolveGeoIPResponse_FieldTerminalPathValue{BulkResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.([]*BulkResolveGeoIPResponse_GeoIPData)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponse_FieldPathArrayOfValues {
	fpaov := &BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return &BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponse_FieldTerminalPath: *fp, values: values.([][]*BulkResolveGeoIPResponse_GeoIPData)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return &BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue{BulkResolveGeoIPResponse_FieldTerminalPath: *fp, value: value.(*BulkResolveGeoIPResponse_GeoIPData)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BulkResolveGeoIPResponse_FieldSubPath struct {
	selector BulkResolveGeoIPResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BulkResolveGeoIPResponse_FieldPath = (*BulkResolveGeoIPResponse_FieldSubPath)(nil)

func (fps *BulkResolveGeoIPResponse_FieldSubPath) Selector() BulkResolveGeoIPResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BulkResolveGeoIPResponse_FieldSubPath) AsGeoIpInfoSubPath() (BulkResolveGeoIPResponseGeoIPData_FieldPath, bool) {
	res, ok := fps.subPath.(BulkResolveGeoIPResponseGeoIPData_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BulkResolveGeoIPResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BulkResolveGeoIPResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BulkResolveGeoIPResponse
func (fps *BulkResolveGeoIPResponse_FieldSubPath) Get(source *BulkResolveGeoIPResponse) (values []interface{}) {
	if asGeoIPDataFieldPath, ok := fps.AsGeoIpInfoSubPath(); ok {
		for _, item := range source.GetGeoIpInfo() {
			values = append(values, asGeoIPDataFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fps.selector))
	}
	return
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BulkResolveGeoIPResponse))
}

// GetSingle returns value of selected field from source BulkResolveGeoIPResponse
func (fps *BulkResolveGeoIPResponse_FieldSubPath) GetSingle(source *BulkResolveGeoIPResponse) (interface{}, bool) {
	switch fps.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		if len(source.GetGeoIpInfo()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeoIpInfo()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fps.selector))
	}
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BulkResolveGeoIPResponse))
}

// GetDefault returns a default value of the field type
func (fps *BulkResolveGeoIPResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) ClearValue(item *BulkResolveGeoIPResponse) {
	if item != nil {
		switch fps.selector {
		case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
			for _, subItem := range item.GeoIpInfo {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fps.selector))
		}
	}
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BulkResolveGeoIPResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BulkResolveGeoIPResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithIValue(value interface{}) BulkResolveGeoIPResponse_FieldPathValue {
	return &BulkResolveGeoIPResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponse_FieldPathArrayOfValues {
	return &BulkResolveGeoIPResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponse_FieldPathArrayItemValue {
	return &BulkResolveGeoIPResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BulkResolveGeoIPResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BulkResolveGeoIPResponse_FieldPathValue allows storing values for BulkResolveGeoIPResponse fields according to their type
type BulkResolveGeoIPResponse_FieldPathValue interface {
	BulkResolveGeoIPResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BulkResolveGeoIPResponse)
	CompareWith(*BulkResolveGeoIPResponse) (cmp int, comparable bool)
}

func ParseBulkResolveGeoIPResponse_FieldPathValue(pathStr, valueStr string) (BulkResolveGeoIPResponse_FieldPathValue, error) {
	fp, err := ParseBulkResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BulkResolveGeoIPResponse_FieldPathValue), nil
}

func MustParseBulkResolveGeoIPResponse_FieldPathValue(pathStr, valueStr string) BulkResolveGeoIPResponse_FieldPathValue {
	fpv, err := ParseBulkResolveGeoIPResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BulkResolveGeoIPResponse_FieldTerminalPathValue struct {
	BulkResolveGeoIPResponse_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPResponse_FieldPathValue = (*BulkResolveGeoIPResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BulkResolveGeoIPResponse' as interface{}
func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) AsGeoIpInfoValue() ([]*BulkResolveGeoIPResponse_GeoIPData, bool) {
	res, ok := fpv.value.([]*BulkResolveGeoIPResponse_GeoIPData)
	return res, ok
}

// SetTo stores value for selected field for object BulkResolveGeoIPResponse
func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) SetTo(target **BulkResolveGeoIPResponse) {
	if *target == nil {
		*target = new(BulkResolveGeoIPResponse)
	}
	switch fpv.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		(*target).GeoIpInfo = fpv.value.([]*BulkResolveGeoIPResponse_GeoIPData)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkResolveGeoIPResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BulkResolveGeoIPResponse_FieldTerminalPathValue' with the value under path in 'BulkResolveGeoIPResponse'.
func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) CompareWith(source *BulkResolveGeoIPResponse) (int, bool) {
	switch fpv.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BulkResolveGeoIPResponse))
}

type BulkResolveGeoIPResponse_FieldSubPathValue struct {
	BulkResolveGeoIPResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BulkResolveGeoIPResponse_FieldPathValue = (*BulkResolveGeoIPResponse_FieldSubPathValue)(nil)

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) AsGeoIpInfoPathValue() (BulkResolveGeoIPResponseGeoIPData_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(BulkResolveGeoIPResponseGeoIPData_FieldPathValue)
	return res, ok
}

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) SetTo(target **BulkResolveGeoIPResponse) {
	if *target == nil {
		*target = new(BulkResolveGeoIPResponse)
	}
	switch fpvs.Selector() {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkResolveGeoIPResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) CompareWith(source *BulkResolveGeoIPResponse) (int, bool) {
	switch fpvs.Selector() {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkResolveGeoIPResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BulkResolveGeoIPResponse))
}

// BulkResolveGeoIPResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BulkResolveGeoIPResponse according to their type
// Present only for array (repeated) types.
type BulkResolveGeoIPResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BulkResolveGeoIPResponse_FieldPath
	ContainsValue(*BulkResolveGeoIPResponse) bool
}

// ParseBulkResolveGeoIPResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBulkResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BulkResolveGeoIPResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBulkResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BulkResolveGeoIPResponse_FieldPathArrayItemValue), nil
}

func MustParseBulkResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr string) BulkResolveGeoIPResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBulkResolveGeoIPResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue struct {
	BulkResolveGeoIPResponse_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPResponse_FieldPathArrayItemValue = (*BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BulkResolveGeoIPResponse as interface{}
func (fpaiv *BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue) AsGeoIpInfoItemValue() (*BulkResolveGeoIPResponse_GeoIPData, bool) {
	res, ok := fpaiv.value.(*BulkResolveGeoIPResponse_GeoIPData)
	return res, ok
}

func (fpaiv *BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BulkResolveGeoIPResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BulkResolveGeoIPResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BulkResolveGeoIPResponse'
func (fpaiv *BulkResolveGeoIPResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BulkResolveGeoIPResponse) bool {
	slice := fpaiv.BulkResolveGeoIPResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BulkResolveGeoIPResponse_FieldSubPathArrayItemValue struct {
	BulkResolveGeoIPResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BulkResolveGeoIPResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BulkResolveGeoIPResponse_FieldSubPathArrayItemValue) AsGeoIpInfoPathItemValue() (BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BulkResolveGeoIPResponse'
func (fpaivs *BulkResolveGeoIPResponse_FieldSubPathArrayItemValue) ContainsValue(source *BulkResolveGeoIPResponse) bool {
	switch fpaivs.Selector() {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse: %d", fpaivs.Selector()))
	}
}

// BulkResolveGeoIPResponse_FieldPathArrayOfValues allows storing slice of values for BulkResolveGeoIPResponse fields according to their type
type BulkResolveGeoIPResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BulkResolveGeoIPResponse_FieldPath
}

func ParseBulkResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BulkResolveGeoIPResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBulkResolveGeoIPResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkResolveGeoIPResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BulkResolveGeoIPResponse_FieldPathArrayOfValues), nil
}

func MustParseBulkResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BulkResolveGeoIPResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBulkResolveGeoIPResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues struct {
	BulkResolveGeoIPResponse_FieldTerminalPath
	values interface{}
}

var _ BulkResolveGeoIPResponse_FieldPathArrayOfValues = (*BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo:
		for _, v := range fpaov.values.([][]*BulkResolveGeoIPResponse_GeoIPData) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BulkResolveGeoIPResponse_FieldTerminalPathArrayOfValues) AsGeoIpInfoArrayOfValues() ([][]*BulkResolveGeoIPResponse_GeoIPData, bool) {
	res, ok := fpaov.values.([][]*BulkResolveGeoIPResponse_GeoIPData)
	return res, ok
}

type BulkResolveGeoIPResponse_FieldSubPathArrayOfValues struct {
	BulkResolveGeoIPResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BulkResolveGeoIPResponse_FieldPathArrayOfValues = (*BulkResolveGeoIPResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BulkResolveGeoIPResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BulkResolveGeoIPResponse_FieldSubPathArrayOfValues) AsGeoIpInfoPathArrayOfValues() (BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BulkResolveGeoIPResponseGeoIPData_FieldPath interface {
	gotenobject.FieldPath
	Selector() BulkResolveGeoIPResponseGeoIPData_FieldPathSelector
	Get(source *BulkResolveGeoIPResponse_GeoIPData) []interface{}
	GetSingle(source *BulkResolveGeoIPResponse_GeoIPData) (interface{}, bool)
	ClearValue(item *BulkResolveGeoIPResponse_GeoIPData)

	// Those methods build corresponding BulkResolveGeoIPResponseGeoIPData_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathValue
	WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue
}

type BulkResolveGeoIPResponseGeoIPData_FieldPathSelector int32

const (
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation       BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 0
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp            BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 1
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo         BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 2
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier        BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 3
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 4
	BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress      BulkResolveGeoIPResponseGeoIPData_FieldPathSelector = 5
)

func (s BulkResolveGeoIPResponseGeoIPData_FieldPathSelector) String() string {
	switch s {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return "location"
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		return "isp"
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return "as_info"
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return "carrier"
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		return "access_provider"
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		return "ip_address"
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", s))
	}
}

func BuildBulkResolveGeoIPResponseGeoIPData_FieldPath(fp gotenobject.RawFieldPath) (BulkResolveGeoIPResponseGeoIPData_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BulkResolveGeoIPResponse_GeoIPData")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "location":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation}, nil
		case "isp":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp}, nil
		case "as_info", "asInfo", "as-info":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo}, nil
		case "carrier":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier}, nil
		case "access_provider", "accessProvider", "access-provider":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider}, nil
		case "ip_address", "ipAddress", "ip-address":
			return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "as_info", "asInfo", "as-info":
			if subpath, err := common.BuildASInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo, subPath: subpath}, nil
			}
		case "carrier":
			if subpath, err := common.BuildCarrier_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BulkResolveGeoIPResponse_GeoIPData", fp)
}

func ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(rawField string) (BulkResolveGeoIPResponseGeoIPData_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBulkResolveGeoIPResponseGeoIPData_FieldPath(fp)
}

func MustParseBulkResolveGeoIPResponseGeoIPData_FieldPath(rawField string) BulkResolveGeoIPResponseGeoIPData_FieldPath {
	fp, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath struct {
	selector BulkResolveGeoIPResponseGeoIPData_FieldPathSelector
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPath = (*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath)(nil)

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) Selector() BulkResolveGeoIPResponseGeoIPData_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BulkResolveGeoIPResponse_GeoIPData
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) Get(source *BulkResolveGeoIPResponse_GeoIPData) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
			values = append(values, source.Isp)
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
			if source.AsInfo != nil {
				values = append(values, source.AsInfo)
			}
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
			if source.Carrier != nil {
				values = append(values, source.Carrier)
			}
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
			values = append(values, source.AccessProvider)
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
			values = append(values, source.IpAddress)
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
		}
	}
	return
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// GetSingle returns value pointed by specific field of from source BulkResolveGeoIPResponse_GeoIPData
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) GetSingle(source *BulkResolveGeoIPResponse_GeoIPData) (interface{}, bool) {
	switch fp.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		return source.GetIsp(), source != nil
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		res := source.GetAsInfo()
		return res, res != nil
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		res := source.GetCarrier()
		return res, res != nil
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		return source.GetAccessProvider(), source != nil
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		return source.GetIpAddress(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// GetDefault returns a default value of the field type
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		return ""
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return (*common.ASInfo)(nil)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return (*common.Carrier)(nil)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		return ""
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) ClearValue(item *BulkResolveGeoIPResponse_GeoIPData) {
	if item != nil {
		switch fp.selector {
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
			item.Location = nil
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
			item.Isp = ""
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
			item.AsInfo = nil
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
			item.Carrier = nil
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
			item.AccessProvider = ""
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
			item.IpAddress = ""
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
		}
	}
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BulkResolveGeoIPResponse_GeoIPData))
}

// IsLeaf - whether field path is holds simple value
func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp ||
		fp.selector == BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider ||
		fp.selector == BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithIValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathValue {
	switch fp.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(string)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(*common.ASInfo)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(*common.Carrier)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(string)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues {
	fpaov := &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp}
	switch fp.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]string)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]*common.ASInfo)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]*common.Carrier)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]string)}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		return &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues{BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
	}
	return fpaov
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fp.selector))
	}
}

func (fp *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BulkResolveGeoIPResponseGeoIPData_FieldSubPath struct {
	selector BulkResolveGeoIPResponseGeoIPData_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPath = (*BulkResolveGeoIPResponseGeoIPData_FieldSubPath)(nil)

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) Selector() BulkResolveGeoIPResponseGeoIPData_FieldPathSelector {
	return fps.selector
}
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) AsAsInfoSubPath() (common.ASInfo_FieldPath, bool) {
	res, ok := fps.subPath.(common.ASInfo_FieldPath)
	return res, ok
}
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) AsCarrierSubPath() (common.Carrier_FieldPath, bool) {
	res, ok := fps.subPath.(common.Carrier_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BulkResolveGeoIPResponse_GeoIPData
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) Get(source *BulkResolveGeoIPResponse_GeoIPData) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else if asASInfoFieldPath, ok := fps.AsAsInfoSubPath(); ok {
		values = append(values, asASInfoFieldPath.Get(source.GetAsInfo())...)
	} else if asCarrierFieldPath, ok := fps.AsCarrierSubPath(); ok {
		values = append(values, asCarrierFieldPath.Get(source.GetCarrier())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fps.selector))
	}
	return
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// GetSingle returns value of selected field from source BulkResolveGeoIPResponse_GeoIPData
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) GetSingle(source *BulkResolveGeoIPResponse_GeoIPData) (interface{}, bool) {
	switch fps.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		if source.GetAsInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAsInfo())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		if source.GetCarrier() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fps.selector))
	}
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// GetDefault returns a default value of the field type
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) ClearValue(item *BulkResolveGeoIPResponse_GeoIPData) {
	if item != nil {
		switch fps.selector {
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
			fps.subPath.ClearValueRaw(item.AsInfo)
		case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
			fps.subPath.ClearValueRaw(item.Carrier)
		default:
			panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fps.selector))
		}
	}
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BulkResolveGeoIPResponse_GeoIPData))
}

// IsLeaf - whether field path is holds simple value
func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithIValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathValue {
	return &BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithIArrayOfValues(values interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues {
	return &BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithIArrayItemValue(value interface{}) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue {
	return &BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BulkResolveGeoIPResponseGeoIPData_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BulkResolveGeoIPResponseGeoIPData_FieldPathValue allows storing values for GeoIPData fields according to their type
type BulkResolveGeoIPResponseGeoIPData_FieldPathValue interface {
	BulkResolveGeoIPResponseGeoIPData_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BulkResolveGeoIPResponse_GeoIPData)
	CompareWith(*BulkResolveGeoIPResponse_GeoIPData) (cmp int, comparable bool)
}

func ParseBulkResolveGeoIPResponseGeoIPData_FieldPathValue(pathStr, valueStr string) (BulkResolveGeoIPResponseGeoIPData_FieldPathValue, error) {
	fp, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeoIPData field path value from %s: %v", valueStr, err)
	}
	return fpv.(BulkResolveGeoIPResponseGeoIPData_FieldPathValue), nil
}

func MustParseBulkResolveGeoIPResponseGeoIPData_FieldPathValue(pathStr, valueStr string) BulkResolveGeoIPResponseGeoIPData_FieldPathValue {
	fpv, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue struct {
	BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPathValue = (*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GeoIPData' as interface{}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsIspValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsAsInfoValue() (*common.ASInfo, bool) {
	res, ok := fpv.value.(*common.ASInfo)
	return res, ok
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsCarrierValue() (*common.Carrier, bool) {
	res, ok := fpv.value.(*common.Carrier)
	return res, ok
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsAccessProviderValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) AsIpAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GeoIPData
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) SetTo(target **BulkResolveGeoIPResponse_GeoIPData) {
	if *target == nil {
		*target = new(BulkResolveGeoIPResponse_GeoIPData)
	}
	switch fpv.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		(*target).Isp = fpv.value.(string)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		(*target).AsInfo = fpv.value.(*common.ASInfo)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		(*target).Carrier = fpv.value.(*common.Carrier)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		(*target).AccessProvider = fpv.value.(string)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		(*target).IpAddress = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkResolveGeoIPResponse_GeoIPData)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue' with the value under path in 'BulkResolveGeoIPResponse_GeoIPData'.
func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) CompareWith(source *BulkResolveGeoIPResponse_GeoIPData) (int, bool) {
	switch fpv.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return 0, false
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		leftValue := fpv.value.(string)
		rightValue := source.GetIsp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return 0, false
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return 0, false
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		leftValue := fpv.value.(string)
		rightValue := source.GetAccessProvider()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetIpAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fpv.selector))
	}
}

func (fpv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

type BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue struct {
	BulkResolveGeoIPResponseGeoIPData_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPathValue = (*BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue)(nil)

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) AsAsInfoPathValue() (common.ASInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ASInfo_FieldPathValue)
	return res, ok
}
func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) AsCarrierPathValue() (common.Carrier_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Carrier_FieldPathValue)
	return res, ok
}

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) SetTo(target **BulkResolveGeoIPResponse_GeoIPData) {
	if *target == nil {
		*target = new(BulkResolveGeoIPResponse_GeoIPData)
	}
	switch fpvs.Selector() {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		fpvs.subPathValue.(common.ASInfo_FieldPathValue).SetTo(&(*target).AsInfo)
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		fpvs.subPathValue.(common.Carrier_FieldPathValue).SetTo(&(*target).Carrier)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkResolveGeoIPResponse_GeoIPData)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) CompareWith(source *BulkResolveGeoIPResponse_GeoIPData) (int, bool) {
	switch fpvs.Selector() {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return fpvs.subPathValue.(common.ASInfo_FieldPathValue).CompareWith(source.GetAsInfo())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return fpvs.subPathValue.(common.Carrier_FieldPathValue).CompareWith(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue allows storing single item in Path-specific values for GeoIPData according to their type
// Present only for array (repeated) types.
type BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BulkResolveGeoIPResponseGeoIPData_FieldPath
	ContainsValue(*BulkResolveGeoIPResponse_GeoIPData) bool
}

// ParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue(pathStr, valueStr string) (BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue, error) {
	fp, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeoIPData field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue), nil
}

func MustParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue(pathStr, valueStr string) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue {
	fpaiv, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue struct {
	BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath
	value interface{}
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPathArrayItemValue = (*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BulkResolveGeoIPResponse_GeoIPData as interface{}
func (fpaiv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue) GetSingle(source *BulkResolveGeoIPResponse_GeoIPData) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GeoIPData'
func (fpaiv *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayItemValue) ContainsValue(source *BulkResolveGeoIPResponse_GeoIPData) bool {
	slice := fpaiv.BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue struct {
	BulkResolveGeoIPResponseGeoIPData_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue) AsAsInfoPathItemValue() (common.ASInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue) AsCarrierPathItemValue() (common.Carrier_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GeoIPData'
func (fpaivs *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayItemValue) ContainsValue(source *BulkResolveGeoIPResponse_GeoIPData) bool {
	switch fpaivs.Selector() {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		return fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue).ContainsValue(source.GetAsInfo())
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		return fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue).ContainsValue(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for BulkResolveGeoIPResponse_GeoIPData: %d", fpaivs.Selector()))
	}
}

// BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues allows storing slice of values for GeoIPData fields according to their type
type BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BulkResolveGeoIPResponseGeoIPData_FieldPath
}

func ParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues(pathStr, valuesStr string) (BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues, error) {
	fp, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeoIPData field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues), nil
}

func MustParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues(pathStr, valuesStr string) BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues {
	fpaov, err := ParseBulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues struct {
	BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath
	values interface{}
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues = (*BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo:
		for _, v := range fpaov.values.([]*common.ASInfo) {
			values = append(values, v)
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier:
		for _, v := range fpaov.values.([]*common.Carrier) {
			values = append(values, v)
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsIspArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsAsInfoArrayOfValues() ([]*common.ASInfo, bool) {
	res, ok := fpaov.values.([]*common.ASInfo)
	return res, ok
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsCarrierArrayOfValues() ([]*common.Carrier, bool) {
	res, ok := fpaov.values.([]*common.Carrier)
	return res, ok
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsAccessProviderArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *BulkResolveGeoIPResponseGeoIPData_FieldTerminalPathArrayOfValues) AsIpAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues struct {
	BulkResolveGeoIPResponseGeoIPData_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BulkResolveGeoIPResponseGeoIPData_FieldPathArrayOfValues = (*BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues) AsAsInfoPathArrayOfValues() (common.ASInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ASInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *BulkResolveGeoIPResponseGeoIPData_FieldSubPathArrayOfValues) AsCarrierPathArrayOfValues() (common.Carrier_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Carrier_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResolveEnvironmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResolveEnvironmentRequest_FieldPathSelector
	Get(source *ResolveEnvironmentRequest) []interface{}
	GetSingle(source *ResolveEnvironmentRequest) (interface{}, bool)
	ClearValue(item *ResolveEnvironmentRequest)

	// Those methods build corresponding ResolveEnvironmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResolveEnvironmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ResolveEnvironmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResolveEnvironmentRequest_FieldPathArrayItemValue
}

type ResolveEnvironmentRequest_FieldPathSelector int32

const (
	ResolveEnvironmentRequest_FieldPathSelectorName    ResolveEnvironmentRequest_FieldPathSelector = 0
	ResolveEnvironmentRequest_FieldPathSelectorAddress ResolveEnvironmentRequest_FieldPathSelector = 1
	ResolveEnvironmentRequest_FieldPathSelectorWlans   ResolveEnvironmentRequest_FieldPathSelector = 2
)

func (s ResolveEnvironmentRequest_FieldPathSelector) String() string {
	switch s {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		return "name"
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		return "address"
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return "wlans"
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", s))
	}
}

func BuildResolveEnvironmentRequest_FieldPath(fp gotenobject.RawFieldPath) (ResolveEnvironmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResolveEnvironmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorName}, nil
		case "address":
			return &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorAddress}, nil
		case "wlans":
			return &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorWlans}, nil
		}
	} else {
		switch fp[0] {
		case "wlans":
			if subpath, err := common.BuildWLAN_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveEnvironmentRequest_FieldSubPath{selector: ResolveEnvironmentRequest_FieldPathSelectorWlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResolveEnvironmentRequest", fp)
}

func ParseResolveEnvironmentRequest_FieldPath(rawField string) (ResolveEnvironmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResolveEnvironmentRequest_FieldPath(fp)
}

func MustParseResolveEnvironmentRequest_FieldPath(rawField string) ResolveEnvironmentRequest_FieldPath {
	fp, err := ParseResolveEnvironmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResolveEnvironmentRequest_FieldTerminalPath struct {
	selector ResolveEnvironmentRequest_FieldPathSelector
}

var _ ResolveEnvironmentRequest_FieldPath = (*ResolveEnvironmentRequest_FieldTerminalPath)(nil)

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) Selector() ResolveEnvironmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResolveEnvironmentRequest
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) Get(source *ResolveEnvironmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResolveEnvironmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ResolveEnvironmentRequest_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case ResolveEnvironmentRequest_FieldPathSelectorWlans:
			for _, value := range source.GetWlans() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResolveEnvironmentRequest))
}

// GetSingle returns value pointed by specific field of from source ResolveEnvironmentRequest
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) GetSingle(source *ResolveEnvironmentRequest) (interface{}, bool) {
	switch fp.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		res := source.GetWlans()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResolveEnvironmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		return ""
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return ([]*common.WLAN)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) ClearValue(item *ResolveEnvironmentRequest) {
	if item != nil {
		switch fp.selector {
		case ResolveEnvironmentRequest_FieldPathSelectorName:
			item.Name = nil
		case ResolveEnvironmentRequest_FieldPathSelectorAddress:
			item.Address = ""
		case ResolveEnvironmentRequest_FieldPathSelectorWlans:
			item.Wlans = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
		}
	}
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResolveEnvironmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResolveEnvironmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ResolveEnvironmentRequest_FieldPathSelectorName ||
		fp.selector == ResolveEnvironmentRequest_FieldPathSelectorAddress
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithIValue(value interface{}) ResolveEnvironmentRequest_FieldPathValue {
	switch fp.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		return &ResolveEnvironmentRequest_FieldTerminalPathValue{ResolveEnvironmentRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		return &ResolveEnvironmentRequest_FieldTerminalPathValue{ResolveEnvironmentRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return &ResolveEnvironmentRequest_FieldTerminalPathValue{ResolveEnvironmentRequest_FieldTerminalPath: *fp, value: value.([]*common.WLAN)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResolveEnvironmentRequest_FieldPathArrayOfValues {
	fpaov := &ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues{ResolveEnvironmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		return &ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues{ResolveEnvironmentRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		return &ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues{ResolveEnvironmentRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return &ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues{ResolveEnvironmentRequest_FieldTerminalPath: *fp, values: values.([][]*common.WLAN)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResolveEnvironmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return &ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue{ResolveEnvironmentRequest_FieldTerminalPath: *fp, value: value.(*common.WLAN)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ResolveEnvironmentRequest_FieldSubPath struct {
	selector ResolveEnvironmentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ResolveEnvironmentRequest_FieldPath = (*ResolveEnvironmentRequest_FieldSubPath)(nil)

func (fps *ResolveEnvironmentRequest_FieldSubPath) Selector() ResolveEnvironmentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ResolveEnvironmentRequest_FieldSubPath) AsWlansSubPath() (common.WLAN_FieldPath, bool) {
	res, ok := fps.subPath.(common.WLAN_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ResolveEnvironmentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ResolveEnvironmentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ResolveEnvironmentRequest
func (fps *ResolveEnvironmentRequest_FieldSubPath) Get(source *ResolveEnvironmentRequest) (values []interface{}) {
	if asWLANFieldPath, ok := fps.AsWlansSubPath(); ok {
		for _, item := range source.GetWlans() {
			values = append(values, asWLANFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fps.selector))
	}
	return
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ResolveEnvironmentRequest))
}

// GetSingle returns value of selected field from source ResolveEnvironmentRequest
func (fps *ResolveEnvironmentRequest_FieldSubPath) GetSingle(source *ResolveEnvironmentRequest) (interface{}, bool) {
	switch fps.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		if len(source.GetWlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetWlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fps.selector))
	}
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ResolveEnvironmentRequest))
}

// GetDefault returns a default value of the field type
func (fps *ResolveEnvironmentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) ClearValue(item *ResolveEnvironmentRequest) {
	if item != nil {
		switch fps.selector {
		case ResolveEnvironmentRequest_FieldPathSelectorWlans:
			for _, subItem := range item.Wlans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fps.selector))
		}
	}
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ResolveEnvironmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ResolveEnvironmentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithIValue(value interface{}) ResolveEnvironmentRequest_FieldPathValue {
	return &ResolveEnvironmentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ResolveEnvironmentRequest_FieldPathArrayOfValues {
	return &ResolveEnvironmentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ResolveEnvironmentRequest_FieldPathArrayItemValue {
	return &ResolveEnvironmentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ResolveEnvironmentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ResolveEnvironmentRequest_FieldPathValue allows storing values for ResolveEnvironmentRequest fields according to their type
type ResolveEnvironmentRequest_FieldPathValue interface {
	ResolveEnvironmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResolveEnvironmentRequest)
	CompareWith(*ResolveEnvironmentRequest) (cmp int, comparable bool)
}

func ParseResolveEnvironmentRequest_FieldPathValue(pathStr, valueStr string) (ResolveEnvironmentRequest_FieldPathValue, error) {
	fp, err := ParseResolveEnvironmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResolveEnvironmentRequest_FieldPathValue), nil
}

func MustParseResolveEnvironmentRequest_FieldPathValue(pathStr, valueStr string) ResolveEnvironmentRequest_FieldPathValue {
	fpv, err := ParseResolveEnvironmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResolveEnvironmentRequest_FieldTerminalPathValue struct {
	ResolveEnvironmentRequest_FieldTerminalPath
	value interface{}
}

var _ ResolveEnvironmentRequest_FieldPathValue = (*ResolveEnvironmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResolveEnvironmentRequest' as interface{}
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) AsWlansValue() ([]*common.WLAN, bool) {
	res, ok := fpv.value.([]*common.WLAN)
	return res, ok
}

// SetTo stores value for selected field for object ResolveEnvironmentRequest
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) SetTo(target **ResolveEnvironmentRequest) {
	if *target == nil {
		*target = new(ResolveEnvironmentRequest)
	}
	switch fpv.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		(*target).Wlans = fpv.value.([]*common.WLAN)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fpv.selector))
	}
}

func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveEnvironmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResolveEnvironmentRequest_FieldTerminalPathValue' with the value under path in 'ResolveEnvironmentRequest'.
func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) CompareWith(source *ResolveEnvironmentRequest) (int, bool) {
	switch fpv.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fpv.selector))
	}
}

func (fpv *ResolveEnvironmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResolveEnvironmentRequest))
}

type ResolveEnvironmentRequest_FieldSubPathValue struct {
	ResolveEnvironmentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ResolveEnvironmentRequest_FieldPathValue = (*ResolveEnvironmentRequest_FieldSubPathValue)(nil)

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) AsWlansPathValue() (common.WLAN_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.WLAN_FieldPathValue)
	return res, ok
}

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) SetTo(target **ResolveEnvironmentRequest) {
	if *target == nil {
		*target = new(ResolveEnvironmentRequest)
	}
	switch fpvs.Selector() {
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveEnvironmentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) CompareWith(source *ResolveEnvironmentRequest) (int, bool) {
	switch fpvs.Selector() {
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveEnvironmentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ResolveEnvironmentRequest))
}

// ResolveEnvironmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResolveEnvironmentRequest according to their type
// Present only for array (repeated) types.
type ResolveEnvironmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResolveEnvironmentRequest_FieldPath
	ContainsValue(*ResolveEnvironmentRequest) bool
}

// ParseResolveEnvironmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResolveEnvironmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ResolveEnvironmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseResolveEnvironmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResolveEnvironmentRequest_FieldPathArrayItemValue), nil
}

func MustParseResolveEnvironmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) ResolveEnvironmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseResolveEnvironmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue struct {
	ResolveEnvironmentRequest_FieldTerminalPath
	value interface{}
}

var _ ResolveEnvironmentRequest_FieldPathArrayItemValue = (*ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResolveEnvironmentRequest as interface{}
func (fpaiv *ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue) AsWlansItemValue() (*common.WLAN, bool) {
	res, ok := fpaiv.value.(*common.WLAN)
	return res, ok
}

func (fpaiv *ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ResolveEnvironmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResolveEnvironmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveEnvironmentRequest'
func (fpaiv *ResolveEnvironmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ResolveEnvironmentRequest) bool {
	slice := fpaiv.ResolveEnvironmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ResolveEnvironmentRequest_FieldSubPathArrayItemValue struct {
	ResolveEnvironmentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ResolveEnvironmentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ResolveEnvironmentRequest_FieldSubPathArrayItemValue) AsWlansPathItemValue() (common.WLAN_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.WLAN_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveEnvironmentRequest'
func (fpaivs *ResolveEnvironmentRequest_FieldSubPathArrayItemValue) ContainsValue(source *ResolveEnvironmentRequest) bool {
	switch fpaivs.Selector() {
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentRequest: %d", fpaivs.Selector()))
	}
}

// ResolveEnvironmentRequest_FieldPathArrayOfValues allows storing slice of values for ResolveEnvironmentRequest fields according to their type
type ResolveEnvironmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResolveEnvironmentRequest_FieldPath
}

func ParseResolveEnvironmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ResolveEnvironmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseResolveEnvironmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResolveEnvironmentRequest_FieldPathArrayOfValues), nil
}

func MustParseResolveEnvironmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ResolveEnvironmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseResolveEnvironmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues struct {
	ResolveEnvironmentRequest_FieldTerminalPath
	values interface{}
}

var _ ResolveEnvironmentRequest_FieldPathArrayOfValues = (*ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResolveEnvironmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ResolveEnvironmentRequest_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ResolveEnvironmentRequest_FieldPathSelectorWlans:
		for _, v := range fpaov.values.([][]*common.WLAN) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ResolveEnvironmentRequest_FieldTerminalPathArrayOfValues) AsWlansArrayOfValues() ([][]*common.WLAN, bool) {
	res, ok := fpaov.values.([][]*common.WLAN)
	return res, ok
}

type ResolveEnvironmentRequest_FieldSubPathArrayOfValues struct {
	ResolveEnvironmentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ResolveEnvironmentRequest_FieldPathArrayOfValues = (*ResolveEnvironmentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ResolveEnvironmentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ResolveEnvironmentRequest_FieldSubPathArrayOfValues) AsWlansPathArrayOfValues() (common.WLAN_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.WLAN_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResolveEnvironmentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResolveEnvironmentResponse_FieldPathSelector
	Get(source *ResolveEnvironmentResponse) []interface{}
	GetSingle(source *ResolveEnvironmentResponse) (interface{}, bool)
	ClearValue(item *ResolveEnvironmentResponse)

	// Those methods build corresponding ResolveEnvironmentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResolveEnvironmentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ResolveEnvironmentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResolveEnvironmentResponse_FieldPathArrayItemValue
}

type ResolveEnvironmentResponse_FieldPathSelector int32

const (
	ResolveEnvironmentResponse_FieldPathSelectorLocation ResolveEnvironmentResponse_FieldPathSelector = 0
	ResolveEnvironmentResponse_FieldPathSelectorAsInfo   ResolveEnvironmentResponse_FieldPathSelector = 1
	ResolveEnvironmentResponse_FieldPathSelectorCarrier  ResolveEnvironmentResponse_FieldPathSelector = 2
)

func (s ResolveEnvironmentResponse_FieldPathSelector) String() string {
	switch s {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return "location"
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return "as_info"
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return "carrier"
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", s))
	}
}

func BuildResolveEnvironmentResponse_FieldPath(fp gotenobject.RawFieldPath) (ResolveEnvironmentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResolveEnvironmentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "location":
			return &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorLocation}, nil
		case "as_info", "asInfo", "as-info":
			return &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorAsInfo}, nil
		case "carrier":
			return &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorCarrier}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "as_info", "asInfo", "as-info":
			if subpath, err := common.BuildASInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorAsInfo, subPath: subpath}, nil
			}
		case "carrier":
			if subpath, err := common.BuildCarrier_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorCarrier, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResolveEnvironmentResponse", fp)
}

func ParseResolveEnvironmentResponse_FieldPath(rawField string) (ResolveEnvironmentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResolveEnvironmentResponse_FieldPath(fp)
}

func MustParseResolveEnvironmentResponse_FieldPath(rawField string) ResolveEnvironmentResponse_FieldPath {
	fp, err := ParseResolveEnvironmentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResolveEnvironmentResponse_FieldTerminalPath struct {
	selector ResolveEnvironmentResponse_FieldPathSelector
}

var _ ResolveEnvironmentResponse_FieldPath = (*ResolveEnvironmentResponse_FieldTerminalPath)(nil)

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) Selector() ResolveEnvironmentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResolveEnvironmentResponse
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) Get(source *ResolveEnvironmentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResolveEnvironmentResponse_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
			if source.AsInfo != nil {
				values = append(values, source.AsInfo)
			}
		case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
			if source.Carrier != nil {
				values = append(values, source.Carrier)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResolveEnvironmentResponse))
}

// GetSingle returns value pointed by specific field of from source ResolveEnvironmentResponse
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) GetSingle(source *ResolveEnvironmentResponse) (interface{}, bool) {
	switch fp.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		res := source.GetAsInfo()
		return res, res != nil
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		res := source.GetCarrier()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResolveEnvironmentResponse))
}

// GetDefault returns a default value of the field type
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return (*common.ASInfo)(nil)
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return (*common.Carrier)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) ClearValue(item *ResolveEnvironmentResponse) {
	if item != nil {
		switch fp.selector {
		case ResolveEnvironmentResponse_FieldPathSelectorLocation:
			item.Location = nil
		case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
			item.AsInfo = nil
		case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
			item.Carrier = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
		}
	}
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResolveEnvironmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResolveEnvironmentResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithIValue(value interface{}) ResolveEnvironmentResponse_FieldPathValue {
	switch fp.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return &ResolveEnvironmentResponse_FieldTerminalPathValue{ResolveEnvironmentResponse_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return &ResolveEnvironmentResponse_FieldTerminalPathValue{ResolveEnvironmentResponse_FieldTerminalPath: *fp, value: value.(*common.ASInfo)}
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return &ResolveEnvironmentResponse_FieldTerminalPathValue{ResolveEnvironmentResponse_FieldTerminalPath: *fp, value: value.(*common.Carrier)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResolveEnvironmentResponse_FieldPathArrayOfValues {
	fpaov := &ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues{ResolveEnvironmentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return &ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues{ResolveEnvironmentResponse_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return &ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues{ResolveEnvironmentResponse_FieldTerminalPath: *fp, values: values.([]*common.ASInfo)}
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return &ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues{ResolveEnvironmentResponse_FieldTerminalPath: *fp, values: values.([]*common.Carrier)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResolveEnvironmentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fp.selector))
	}
}

func (fp *ResolveEnvironmentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ResolveEnvironmentResponse_FieldSubPath struct {
	selector ResolveEnvironmentResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ResolveEnvironmentResponse_FieldPath = (*ResolveEnvironmentResponse_FieldSubPath)(nil)

func (fps *ResolveEnvironmentResponse_FieldSubPath) Selector() ResolveEnvironmentResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ResolveEnvironmentResponse_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ResolveEnvironmentResponse_FieldSubPath) AsAsInfoSubPath() (common.ASInfo_FieldPath, bool) {
	res, ok := fps.subPath.(common.ASInfo_FieldPath)
	return res, ok
}
func (fps *ResolveEnvironmentResponse_FieldSubPath) AsCarrierSubPath() (common.Carrier_FieldPath, bool) {
	res, ok := fps.subPath.(common.Carrier_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ResolveEnvironmentResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ResolveEnvironmentResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ResolveEnvironmentResponse
func (fps *ResolveEnvironmentResponse_FieldSubPath) Get(source *ResolveEnvironmentResponse) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else if asASInfoFieldPath, ok := fps.AsAsInfoSubPath(); ok {
		values = append(values, asASInfoFieldPath.Get(source.GetAsInfo())...)
	} else if asCarrierFieldPath, ok := fps.AsCarrierSubPath(); ok {
		values = append(values, asCarrierFieldPath.Get(source.GetCarrier())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fps.selector))
	}
	return
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ResolveEnvironmentResponse))
}

// GetSingle returns value of selected field from source ResolveEnvironmentResponse
func (fps *ResolveEnvironmentResponse_FieldSubPath) GetSingle(source *ResolveEnvironmentResponse) (interface{}, bool) {
	switch fps.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		if source.GetAsInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAsInfo())
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		if source.GetCarrier() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fps.selector))
	}
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ResolveEnvironmentResponse))
}

// GetDefault returns a default value of the field type
func (fps *ResolveEnvironmentResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) ClearValue(item *ResolveEnvironmentResponse) {
	if item != nil {
		switch fps.selector {
		case ResolveEnvironmentResponse_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
			fps.subPath.ClearValueRaw(item.AsInfo)
		case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
			fps.subPath.ClearValueRaw(item.Carrier)
		default:
			panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fps.selector))
		}
	}
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ResolveEnvironmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ResolveEnvironmentResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithIValue(value interface{}) ResolveEnvironmentResponse_FieldPathValue {
	return &ResolveEnvironmentResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ResolveEnvironmentResponse_FieldPathArrayOfValues {
	return &ResolveEnvironmentResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ResolveEnvironmentResponse_FieldPathArrayItemValue {
	return &ResolveEnvironmentResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ResolveEnvironmentResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ResolveEnvironmentResponse_FieldPathValue allows storing values for ResolveEnvironmentResponse fields according to their type
type ResolveEnvironmentResponse_FieldPathValue interface {
	ResolveEnvironmentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResolveEnvironmentResponse)
	CompareWith(*ResolveEnvironmentResponse) (cmp int, comparable bool)
}

func ParseResolveEnvironmentResponse_FieldPathValue(pathStr, valueStr string) (ResolveEnvironmentResponse_FieldPathValue, error) {
	fp, err := ParseResolveEnvironmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResolveEnvironmentResponse_FieldPathValue), nil
}

func MustParseResolveEnvironmentResponse_FieldPathValue(pathStr, valueStr string) ResolveEnvironmentResponse_FieldPathValue {
	fpv, err := ParseResolveEnvironmentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResolveEnvironmentResponse_FieldTerminalPathValue struct {
	ResolveEnvironmentResponse_FieldTerminalPath
	value interface{}
}

var _ ResolveEnvironmentResponse_FieldPathValue = (*ResolveEnvironmentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResolveEnvironmentResponse' as interface{}
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) AsAsInfoValue() (*common.ASInfo, bool) {
	res, ok := fpv.value.(*common.ASInfo)
	return res, ok
}
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) AsCarrierValue() (*common.Carrier, bool) {
	res, ok := fpv.value.(*common.Carrier)
	return res, ok
}

// SetTo stores value for selected field for object ResolveEnvironmentResponse
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) SetTo(target **ResolveEnvironmentResponse) {
	if *target == nil {
		*target = new(ResolveEnvironmentResponse)
	}
	switch fpv.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		(*target).AsInfo = fpv.value.(*common.ASInfo)
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		(*target).Carrier = fpv.value.(*common.Carrier)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fpv.selector))
	}
}

func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveEnvironmentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResolveEnvironmentResponse_FieldTerminalPathValue' with the value under path in 'ResolveEnvironmentResponse'.
func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) CompareWith(source *ResolveEnvironmentResponse) (int, bool) {
	switch fpv.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return 0, false
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return 0, false
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fpv.selector))
	}
}

func (fpv *ResolveEnvironmentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResolveEnvironmentResponse))
}

type ResolveEnvironmentResponse_FieldSubPathValue struct {
	ResolveEnvironmentResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ResolveEnvironmentResponse_FieldPathValue = (*ResolveEnvironmentResponse_FieldSubPathValue)(nil)

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) AsAsInfoPathValue() (common.ASInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ASInfo_FieldPathValue)
	return res, ok
}
func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) AsCarrierPathValue() (common.Carrier_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Carrier_FieldPathValue)
	return res, ok
}

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) SetTo(target **ResolveEnvironmentResponse) {
	if *target == nil {
		*target = new(ResolveEnvironmentResponse)
	}
	switch fpvs.Selector() {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		fpvs.subPathValue.(common.ASInfo_FieldPathValue).SetTo(&(*target).AsInfo)
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		fpvs.subPathValue.(common.Carrier_FieldPathValue).SetTo(&(*target).Carrier)
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResolveEnvironmentResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) CompareWith(source *ResolveEnvironmentResponse) (int, bool) {
	switch fpvs.Selector() {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return fpvs.subPathValue.(common.ASInfo_FieldPathValue).CompareWith(source.GetAsInfo())
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return fpvs.subPathValue.(common.Carrier_FieldPathValue).CompareWith(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ResolveEnvironmentResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ResolveEnvironmentResponse))
}

// ResolveEnvironmentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ResolveEnvironmentResponse according to their type
// Present only for array (repeated) types.
type ResolveEnvironmentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResolveEnvironmentResponse_FieldPath
	ContainsValue(*ResolveEnvironmentResponse) bool
}

// ParseResolveEnvironmentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResolveEnvironmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ResolveEnvironmentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseResolveEnvironmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResolveEnvironmentResponse_FieldPathArrayItemValue), nil
}

func MustParseResolveEnvironmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) ResolveEnvironmentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseResolveEnvironmentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue struct {
	ResolveEnvironmentResponse_FieldTerminalPath
	value interface{}
}

var _ ResolveEnvironmentResponse_FieldPathArrayItemValue = (*ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResolveEnvironmentResponse as interface{}
func (fpaiv *ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ResolveEnvironmentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResolveEnvironmentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveEnvironmentResponse'
func (fpaiv *ResolveEnvironmentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ResolveEnvironmentResponse) bool {
	slice := fpaiv.ResolveEnvironmentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ResolveEnvironmentResponse_FieldSubPathArrayItemValue struct {
	ResolveEnvironmentResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ResolveEnvironmentResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ResolveEnvironmentResponse_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ResolveEnvironmentResponse_FieldSubPathArrayItemValue) AsAsInfoPathItemValue() (common.ASInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ResolveEnvironmentResponse_FieldSubPathArrayItemValue) AsCarrierPathItemValue() (common.Carrier_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResolveEnvironmentResponse'
func (fpaivs *ResolveEnvironmentResponse_FieldSubPathArrayItemValue) ContainsValue(source *ResolveEnvironmentResponse) bool {
	switch fpaivs.Selector() {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		return fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue).ContainsValue(source.GetAsInfo())
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		return fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue).ContainsValue(source.GetCarrier())
	default:
		panic(fmt.Sprintf("Invalid selector for ResolveEnvironmentResponse: %d", fpaivs.Selector()))
	}
}

// ResolveEnvironmentResponse_FieldPathArrayOfValues allows storing slice of values for ResolveEnvironmentResponse fields according to their type
type ResolveEnvironmentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResolveEnvironmentResponse_FieldPath
}

func ParseResolveEnvironmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ResolveEnvironmentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseResolveEnvironmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResolveEnvironmentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResolveEnvironmentResponse_FieldPathArrayOfValues), nil
}

func MustParseResolveEnvironmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ResolveEnvironmentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseResolveEnvironmentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues struct {
	ResolveEnvironmentResponse_FieldTerminalPath
	values interface{}
}

var _ ResolveEnvironmentResponse_FieldPathArrayOfValues = (*ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResolveEnvironmentResponse_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ResolveEnvironmentResponse_FieldPathSelectorAsInfo:
		for _, v := range fpaov.values.([]*common.ASInfo) {
			values = append(values, v)
		}
	case ResolveEnvironmentResponse_FieldPathSelectorCarrier:
		for _, v := range fpaov.values.([]*common.Carrier) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues) AsAsInfoArrayOfValues() ([]*common.ASInfo, bool) {
	res, ok := fpaov.values.([]*common.ASInfo)
	return res, ok
}
func (fpaov *ResolveEnvironmentResponse_FieldTerminalPathArrayOfValues) AsCarrierArrayOfValues() ([]*common.Carrier, bool) {
	res, ok := fpaov.values.([]*common.Carrier)
	return res, ok
}

type ResolveEnvironmentResponse_FieldSubPathArrayOfValues struct {
	ResolveEnvironmentResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ResolveEnvironmentResponse_FieldPathArrayOfValues = (*ResolveEnvironmentResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ResolveEnvironmentResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ResolveEnvironmentResponse_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ResolveEnvironmentResponse_FieldSubPathArrayOfValues) AsAsInfoPathArrayOfValues() (common.ASInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ASInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ResolveEnvironmentResponse_FieldSubPathArrayOfValues) AsCarrierPathArrayOfValues() (common.Carrier_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Carrier_FieldPathArrayOfValues)
	return res, ok
}
