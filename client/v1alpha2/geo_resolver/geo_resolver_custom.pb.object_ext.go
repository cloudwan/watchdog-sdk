// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/geo_resolver_custom.proto
// DO NOT EDIT!!!

package geo_resolver_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &latlng.LatLng{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (o *ResolveGeoIPRequest) GotenObjectExt() {}

func (o *ResolveGeoIPRequest) MakeFullFieldMask() *ResolveGeoIPRequest_FieldMask {
	return FullResolveGeoIPRequest_FieldMask()
}

func (o *ResolveGeoIPRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullResolveGeoIPRequest_FieldMask()
}

func (o *ResolveGeoIPRequest) MakeDiffFieldMask(other *ResolveGeoIPRequest) *ResolveGeoIPRequest_FieldMask {
	if o == nil && other == nil {
		return &ResolveGeoIPRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullResolveGeoIPRequest_FieldMask()
	}

	res := &ResolveGeoIPRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorName})
	}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &ResolveGeoIPRequest_FieldTerminalPath{selector: ResolveGeoIPRequest_FieldPathSelectorAddress})
	}
	return res
}

func (o *ResolveGeoIPRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ResolveGeoIPRequest))
}

func (o *ResolveGeoIPRequest) Clone() *ResolveGeoIPRequest {
	if o == nil {
		return nil
	}
	result := &ResolveGeoIPRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Address = o.Address
	return result
}

func (o *ResolveGeoIPRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ResolveGeoIPRequest) Merge(source *ResolveGeoIPRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Address = source.GetAddress()
}

func (o *ResolveGeoIPRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ResolveGeoIPRequest))
}

func (o *ResolveGeoIPResponse) GotenObjectExt() {}

func (o *ResolveGeoIPResponse) MakeFullFieldMask() *ResolveGeoIPResponse_FieldMask {
	return FullResolveGeoIPResponse_FieldMask()
}

func (o *ResolveGeoIPResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullResolveGeoIPResponse_FieldMask()
}

func (o *ResolveGeoIPResponse) MakeDiffFieldMask(other *ResolveGeoIPResponse) *ResolveGeoIPResponse_FieldMask {
	if o == nil && other == nil {
		return &ResolveGeoIPResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullResolveGeoIPResponse_FieldMask()
	}

	res := &ResolveGeoIPResponse_FieldMask{}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	if o.GetIsp() != other.GetIsp() {
		res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorIsp})
	}
	{
		subMask := o.GetAsInfo().MakeDiffFieldMask(other.GetAsInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAsInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorAsInfo, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetCarrier().MakeDiffFieldMask(other.GetCarrier())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorCarrier})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldSubPath{selector: ResolveGeoIPResponse_FieldPathSelectorCarrier, subPath: subpath})
			}
		}
	}
	if o.GetAccessProvider() != other.GetAccessProvider() {
		res.Paths = append(res.Paths, &ResolveGeoIPResponse_FieldTerminalPath{selector: ResolveGeoIPResponse_FieldPathSelectorAccessProvider})
	}
	return res
}

func (o *ResolveGeoIPResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ResolveGeoIPResponse))
}

func (o *ResolveGeoIPResponse) Clone() *ResolveGeoIPResponse {
	if o == nil {
		return nil
	}
	result := &ResolveGeoIPResponse{}
	result.Location = o.Location.Clone()
	result.Isp = o.Isp
	result.AsInfo = o.AsInfo.Clone()
	result.Carrier = o.Carrier.Clone()
	result.AccessProvider = o.AccessProvider
	return result
}

func (o *ResolveGeoIPResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ResolveGeoIPResponse) Merge(source *ResolveGeoIPResponse) {
	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(common.Location)
		}
		o.Location.Merge(source.GetLocation())
	}
	o.Isp = source.GetIsp()
	if source.GetAsInfo() != nil {
		if o.AsInfo == nil {
			o.AsInfo = new(common.ASInfo)
		}
		o.AsInfo.Merge(source.GetAsInfo())
	}
	if source.GetCarrier() != nil {
		if o.Carrier == nil {
			o.Carrier = new(common.Carrier)
		}
		o.Carrier.Merge(source.GetCarrier())
	}
	o.AccessProvider = source.GetAccessProvider()
}

func (o *ResolveGeoIPResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ResolveGeoIPResponse))
}

func (o *BulkResolveGeoIPRequest) GotenObjectExt() {}

func (o *BulkResolveGeoIPRequest) MakeFullFieldMask() *BulkResolveGeoIPRequest_FieldMask {
	return FullBulkResolveGeoIPRequest_FieldMask()
}

func (o *BulkResolveGeoIPRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBulkResolveGeoIPRequest_FieldMask()
}

func (o *BulkResolveGeoIPRequest) MakeDiffFieldMask(other *BulkResolveGeoIPRequest) *BulkResolveGeoIPRequest_FieldMask {
	if o == nil && other == nil {
		return &BulkResolveGeoIPRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBulkResolveGeoIPRequest_FieldMask()
	}

	res := &BulkResolveGeoIPRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorName})
	}

	if len(o.GetAddress()) == len(other.GetAddress()) {
		for i, lValue := range o.GetAddress() {
			rValue := other.GetAddress()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorAddress})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BulkResolveGeoIPRequest_FieldTerminalPath{selector: BulkResolveGeoIPRequest_FieldPathSelectorAddress})
	}
	return res
}

func (o *BulkResolveGeoIPRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BulkResolveGeoIPRequest))
}

func (o *BulkResolveGeoIPRequest) Clone() *BulkResolveGeoIPRequest {
	if o == nil {
		return nil
	}
	result := &BulkResolveGeoIPRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Address = make([]string, len(o.Address))
	for i, sourceValue := range o.Address {
		result.Address[i] = sourceValue
	}
	return result
}

func (o *BulkResolveGeoIPRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BulkResolveGeoIPRequest) Merge(source *BulkResolveGeoIPRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	for _, sourceValue := range source.GetAddress() {
		exists := false
		for _, currentValue := range o.Address {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Address = append(o.Address, newDstElement)
		}
	}

}

func (o *BulkResolveGeoIPRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BulkResolveGeoIPRequest))
}

func (o *BulkResolveGeoIPResponse) GotenObjectExt() {}

func (o *BulkResolveGeoIPResponse) MakeFullFieldMask() *BulkResolveGeoIPResponse_FieldMask {
	return FullBulkResolveGeoIPResponse_FieldMask()
}

func (o *BulkResolveGeoIPResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBulkResolveGeoIPResponse_FieldMask()
}

func (o *BulkResolveGeoIPResponse) MakeDiffFieldMask(other *BulkResolveGeoIPResponse) *BulkResolveGeoIPResponse_FieldMask {
	if o == nil && other == nil {
		return &BulkResolveGeoIPResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBulkResolveGeoIPResponse_FieldMask()
	}

	res := &BulkResolveGeoIPResponse_FieldMask{}

	if len(o.GetGeoIpInfo()) == len(other.GetGeoIpInfo()) {
		for i, lValue := range o.GetGeoIpInfo() {
			rValue := other.GetGeoIpInfo()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BulkResolveGeoIPResponse_FieldTerminalPath{selector: BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BulkResolveGeoIPResponse_FieldTerminalPath{selector: BulkResolveGeoIPResponse_FieldPathSelectorGeoIpInfo})
	}
	return res
}

func (o *BulkResolveGeoIPResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BulkResolveGeoIPResponse))
}

func (o *BulkResolveGeoIPResponse) Clone() *BulkResolveGeoIPResponse {
	if o == nil {
		return nil
	}
	result := &BulkResolveGeoIPResponse{}
	result.GeoIpInfo = make([]*BulkResolveGeoIPResponse_GeoIPData, len(o.GeoIpInfo))
	for i, sourceValue := range o.GeoIpInfo {
		result.GeoIpInfo[i] = sourceValue.Clone()
	}
	return result
}

func (o *BulkResolveGeoIPResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BulkResolveGeoIPResponse) Merge(source *BulkResolveGeoIPResponse) {
	for _, sourceValue := range source.GetGeoIpInfo() {
		exists := false
		for _, currentValue := range o.GeoIpInfo {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *BulkResolveGeoIPResponse_GeoIPData
			if sourceValue != nil {
				newDstElement = new(BulkResolveGeoIPResponse_GeoIPData)
				newDstElement.Merge(sourceValue)
			}
			o.GeoIpInfo = append(o.GeoIpInfo, newDstElement)
		}
	}

}

func (o *BulkResolveGeoIPResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BulkResolveGeoIPResponse))
}

func (o *BulkResolveGeoIPResponse_GeoIPData) GotenObjectExt() {}

func (o *BulkResolveGeoIPResponse_GeoIPData) MakeFullFieldMask() *BulkResolveGeoIPResponse_GeoIPData_FieldMask {
	return FullBulkResolveGeoIPResponse_GeoIPData_FieldMask()
}

func (o *BulkResolveGeoIPResponse_GeoIPData) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBulkResolveGeoIPResponse_GeoIPData_FieldMask()
}

func (o *BulkResolveGeoIPResponse_GeoIPData) MakeDiffFieldMask(other *BulkResolveGeoIPResponse_GeoIPData) *BulkResolveGeoIPResponse_GeoIPData_FieldMask {
	if o == nil && other == nil {
		return &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBulkResolveGeoIPResponse_GeoIPData_FieldMask()
	}

	res := &BulkResolveGeoIPResponse_GeoIPData_FieldMask{}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	if o.GetIsp() != other.GetIsp() {
		res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIsp})
	}
	{
		subMask := o.GetAsInfo().MakeDiffFieldMask(other.GetAsInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAsInfo, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetCarrier().MakeDiffFieldMask(other.GetCarrier())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldSubPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorCarrier, subPath: subpath})
			}
		}
	}
	if o.GetAccessProvider() != other.GetAccessProvider() {
		res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorAccessProvider})
	}
	if o.GetIpAddress() != other.GetIpAddress() {
		res.Paths = append(res.Paths, &BulkResolveGeoIPResponseGeoIPData_FieldTerminalPath{selector: BulkResolveGeoIPResponseGeoIPData_FieldPathSelectorIpAddress})
	}
	return res
}

func (o *BulkResolveGeoIPResponse_GeoIPData) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BulkResolveGeoIPResponse_GeoIPData))
}

func (o *BulkResolveGeoIPResponse_GeoIPData) Clone() *BulkResolveGeoIPResponse_GeoIPData {
	if o == nil {
		return nil
	}
	result := &BulkResolveGeoIPResponse_GeoIPData{}
	result.Location = o.Location.Clone()
	result.Isp = o.Isp
	result.AsInfo = o.AsInfo.Clone()
	result.Carrier = o.Carrier.Clone()
	result.AccessProvider = o.AccessProvider
	result.IpAddress = o.IpAddress
	return result
}

func (o *BulkResolveGeoIPResponse_GeoIPData) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BulkResolveGeoIPResponse_GeoIPData) Merge(source *BulkResolveGeoIPResponse_GeoIPData) {
	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(common.Location)
		}
		o.Location.Merge(source.GetLocation())
	}
	o.Isp = source.GetIsp()
	if source.GetAsInfo() != nil {
		if o.AsInfo == nil {
			o.AsInfo = new(common.ASInfo)
		}
		o.AsInfo.Merge(source.GetAsInfo())
	}
	if source.GetCarrier() != nil {
		if o.Carrier == nil {
			o.Carrier = new(common.Carrier)
		}
		o.Carrier.Merge(source.GetCarrier())
	}
	o.AccessProvider = source.GetAccessProvider()
	o.IpAddress = source.GetIpAddress()
}

func (o *BulkResolveGeoIPResponse_GeoIPData) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BulkResolveGeoIPResponse_GeoIPData))
}

func (o *ResolveEnvironmentRequest) GotenObjectExt() {}

func (o *ResolveEnvironmentRequest) MakeFullFieldMask() *ResolveEnvironmentRequest_FieldMask {
	return FullResolveEnvironmentRequest_FieldMask()
}

func (o *ResolveEnvironmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullResolveEnvironmentRequest_FieldMask()
}

func (o *ResolveEnvironmentRequest) MakeDiffFieldMask(other *ResolveEnvironmentRequest) *ResolveEnvironmentRequest_FieldMask {
	if o == nil && other == nil {
		return &ResolveEnvironmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullResolveEnvironmentRequest_FieldMask()
	}

	res := &ResolveEnvironmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorName})
	}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorAddress})
	}

	if len(o.GetWlans()) == len(other.GetWlans()) {
		for i, lValue := range o.GetWlans() {
			rValue := other.GetWlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorWlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorWlans})
	}
	if !proto.Equal(o.GetDeviceReportedCoordinates(), other.GetDeviceReportedCoordinates()) {
		res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorDeviceReportedCoordinates})
	}
	if o.GetDeviceReportedAccuracy() != other.GetDeviceReportedAccuracy() {
		res.Paths = append(res.Paths, &ResolveEnvironmentRequest_FieldTerminalPath{selector: ResolveEnvironmentRequest_FieldPathSelectorDeviceReportedAccuracy})
	}
	return res
}

func (o *ResolveEnvironmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ResolveEnvironmentRequest))
}

func (o *ResolveEnvironmentRequest) Clone() *ResolveEnvironmentRequest {
	if o == nil {
		return nil
	}
	result := &ResolveEnvironmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Address = o.Address
	result.Wlans = make([]*common.WLAN, len(o.Wlans))
	for i, sourceValue := range o.Wlans {
		result.Wlans[i] = sourceValue.Clone()
	}
	result.DeviceReportedCoordinates = proto.Clone(o.DeviceReportedCoordinates).(*latlng.LatLng)
	result.DeviceReportedAccuracy = o.DeviceReportedAccuracy
	return result
}

func (o *ResolveEnvironmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ResolveEnvironmentRequest) Merge(source *ResolveEnvironmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Address = source.GetAddress()
	for _, sourceValue := range source.GetWlans() {
		exists := false
		for _, currentValue := range o.Wlans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.WLAN
			if sourceValue != nil {
				newDstElement = new(common.WLAN)
				newDstElement.Merge(sourceValue)
			}
			o.Wlans = append(o.Wlans, newDstElement)
		}
	}

	if source.GetDeviceReportedCoordinates() != nil {
		if o.DeviceReportedCoordinates == nil {
			o.DeviceReportedCoordinates = new(latlng.LatLng)
		}
		proto.Merge(o.DeviceReportedCoordinates, source.GetDeviceReportedCoordinates())
	}
	o.DeviceReportedAccuracy = source.GetDeviceReportedAccuracy()
}

func (o *ResolveEnvironmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ResolveEnvironmentRequest))
}

func (o *ResolveEnvironmentResponse) GotenObjectExt() {}

func (o *ResolveEnvironmentResponse) MakeFullFieldMask() *ResolveEnvironmentResponse_FieldMask {
	return FullResolveEnvironmentResponse_FieldMask()
}

func (o *ResolveEnvironmentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullResolveEnvironmentResponse_FieldMask()
}

func (o *ResolveEnvironmentResponse) MakeDiffFieldMask(other *ResolveEnvironmentResponse) *ResolveEnvironmentResponse_FieldMask {
	if o == nil && other == nil {
		return &ResolveEnvironmentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullResolveEnvironmentResponse_FieldMask()
	}

	res := &ResolveEnvironmentResponse_FieldMask{}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAsInfo().MakeDiffFieldMask(other.GetAsInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorAsInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorAsInfo, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetCarrier().MakeDiffFieldMask(other.GetCarrier())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorCarrier})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorCarrier, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetDiscoveredLocation().MakeDiffFieldMask(other.GetDiscoveredLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldTerminalPath{selector: ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ResolveEnvironmentResponse_FieldSubPath{selector: ResolveEnvironmentResponse_FieldPathSelectorDiscoveredLocation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ResolveEnvironmentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ResolveEnvironmentResponse))
}

func (o *ResolveEnvironmentResponse) Clone() *ResolveEnvironmentResponse {
	if o == nil {
		return nil
	}
	result := &ResolveEnvironmentResponse{}
	result.Location = o.Location.Clone()
	result.AsInfo = o.AsInfo.Clone()
	result.Carrier = o.Carrier.Clone()
	result.DiscoveredLocation = o.DiscoveredLocation.Clone()
	return result
}

func (o *ResolveEnvironmentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ResolveEnvironmentResponse) Merge(source *ResolveEnvironmentResponse) {
	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(common.Location)
		}
		o.Location.Merge(source.GetLocation())
	}
	if source.GetAsInfo() != nil {
		if o.AsInfo == nil {
			o.AsInfo = new(common.ASInfo)
		}
		o.AsInfo.Merge(source.GetAsInfo())
	}
	if source.GetCarrier() != nil {
		if o.Carrier == nil {
			o.Carrier = new(common.Carrier)
		}
		o.Carrier.Merge(source.GetCarrier())
	}
	if source.GetDiscoveredLocation() != nil {
		if o.DiscoveredLocation == nil {
			o.DiscoveredLocation = new(common.Location)
		}
		o.DiscoveredLocation.Merge(source.GetDiscoveredLocation())
	}
}

func (o *ResolveEnvironmentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ResolveEnvironmentResponse))
}
