// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/network_info_custom.proto
// DO NOT EDIT!!!

package network_info_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

func (o *GetNetworkInfoRequest) GotenObjectExt() {}

func (o *GetNetworkInfoRequest) MakeFullFieldMask() *GetNetworkInfoRequest_FieldMask {
	return FullGetNetworkInfoRequest_FieldMask()
}

func (o *GetNetworkInfoRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetNetworkInfoRequest_FieldMask()
}

func (o *GetNetworkInfoRequest) MakeDiffFieldMask(other *GetNetworkInfoRequest) *GetNetworkInfoRequest_FieldMask {
	if o == nil && other == nil {
		return &GetNetworkInfoRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetNetworkInfoRequest_FieldMask()
	}

	res := &GetNetworkInfoRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetNetworkInfoRequest_FieldTerminalPath{selector: GetNetworkInfoRequest_FieldPathSelectorName})
	}
	if o.GetOutputFormat() != other.GetOutputFormat() {
		res.Paths = append(res.Paths, &GetNetworkInfoRequest_FieldTerminalPath{selector: GetNetworkInfoRequest_FieldPathSelectorOutputFormat})
	}
	return res
}

func (o *GetNetworkInfoRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetNetworkInfoRequest))
}

func (o *GetNetworkInfoRequest) Clone() *GetNetworkInfoRequest {
	if o == nil {
		return nil
	}
	result := &GetNetworkInfoRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.OutputFormat = o.OutputFormat
	return result
}

func (o *GetNetworkInfoRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetNetworkInfoRequest) Merge(source *GetNetworkInfoRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.OutputFormat = source.GetOutputFormat()
}

func (o *GetNetworkInfoRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetNetworkInfoRequest))
}

func (o *GetNetworkInfoResponse) GotenObjectExt() {}

func (o *GetNetworkInfoResponse) MakeFullFieldMask() *GetNetworkInfoResponse_FieldMask {
	return FullGetNetworkInfoResponse_FieldMask()
}

func (o *GetNetworkInfoResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetNetworkInfoResponse_FieldMask()
}

func (o *GetNetworkInfoResponse) MakeDiffFieldMask(other *GetNetworkInfoResponse) *GetNetworkInfoResponse_FieldMask {
	if o == nil && other == nil {
		return &GetNetworkInfoResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetNetworkInfoResponse_FieldMask()
	}

	res := &GetNetworkInfoResponse_FieldMask{}
	if o.GetTextResponse() != other.GetTextResponse() {
		res.Paths = append(res.Paths, &GetNetworkInfoResponse_FieldTerminalPath{selector: GetNetworkInfoResponse_FieldPathSelectorTextResponse})
	}
	{
		subMask := o.GetJsonResponse().MakeDiffFieldMask(other.GetJsonResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &GetNetworkInfoResponse_FieldTerminalPath{selector: GetNetworkInfoResponse_FieldPathSelectorJsonResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &GetNetworkInfoResponse_FieldSubPath{selector: GetNetworkInfoResponse_FieldPathSelectorJsonResponse, subPath: subpath})
			}
		}
	}
	return res
}

func (o *GetNetworkInfoResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetNetworkInfoResponse))
}

func (o *GetNetworkInfoResponse) Clone() *GetNetworkInfoResponse {
	if o == nil {
		return nil
	}
	result := &GetNetworkInfoResponse{}
	result.TextResponse = o.TextResponse
	result.JsonResponse = o.JsonResponse.Clone()
	return result
}

func (o *GetNetworkInfoResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetNetworkInfoResponse) Merge(source *GetNetworkInfoResponse) {
	o.TextResponse = source.GetTextResponse()
	if source.GetJsonResponse() != nil {
		if o.JsonResponse == nil {
			o.JsonResponse = new(GetNetworkInfoResponse_JsonResponse)
		}
		o.JsonResponse.Merge(source.GetJsonResponse())
	}
}

func (o *GetNetworkInfoResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetNetworkInfoResponse))
}

func (o *GetNetworkInfoResponse_JsonResponse) GotenObjectExt() {}

func (o *GetNetworkInfoResponse_JsonResponse) MakeFullFieldMask() *GetNetworkInfoResponse_JsonResponse_FieldMask {
	return FullGetNetworkInfoResponse_JsonResponse_FieldMask()
}

func (o *GetNetworkInfoResponse_JsonResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetNetworkInfoResponse_JsonResponse_FieldMask()
}

func (o *GetNetworkInfoResponse_JsonResponse) MakeDiffFieldMask(other *GetNetworkInfoResponse_JsonResponse) *GetNetworkInfoResponse_JsonResponse_FieldMask {
	if o == nil && other == nil {
		return &GetNetworkInfoResponse_JsonResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetNetworkInfoResponse_JsonResponse_FieldMask()
	}

	res := &GetNetworkInfoResponse_JsonResponse_FieldMask{}
	if o.GetInterfaces() != other.GetInterfaces() {
		res.Paths = append(res.Paths, &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces})
	}
	if o.GetRoutes() != other.GetRoutes() {
		res.Paths = append(res.Paths, &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes})
	}
	if o.GetWifiInfo() != other.GetWifiInfo() {
		res.Paths = append(res.Paths, &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo})
	}
	return res
}

func (o *GetNetworkInfoResponse_JsonResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetNetworkInfoResponse_JsonResponse))
}

func (o *GetNetworkInfoResponse_JsonResponse) Clone() *GetNetworkInfoResponse_JsonResponse {
	if o == nil {
		return nil
	}
	result := &GetNetworkInfoResponse_JsonResponse{}
	result.Interfaces = o.Interfaces
	result.Routes = o.Routes
	result.WifiInfo = o.WifiInfo
	return result
}

func (o *GetNetworkInfoResponse_JsonResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetNetworkInfoResponse_JsonResponse) Merge(source *GetNetworkInfoResponse_JsonResponse) {
	o.Interfaces = source.GetInterfaces()
	o.Routes = source.GetRoutes()
	o.WifiInfo = source.GetWifiInfo()
}

func (o *GetNetworkInfoResponse_JsonResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetNetworkInfoResponse_JsonResponse))
}
