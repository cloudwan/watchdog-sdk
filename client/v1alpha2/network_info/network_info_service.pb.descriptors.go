// Code generated by protoc-gen-goten-client
// API: NetworkInfoService
// DO NOT EDIT!!!

package network_info_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
)

var (
	descriptorsInitialized       bool
	networkInfoServiceDescriptor *NetworkInfoServiceDescriptor
	getNetworkInfoDescriptor     *GetNetworkInfoDescriptor
)

type GetNetworkInfoDescriptor struct{}

type GetNetworkInfoDescriptorClientMsgHandle struct{}

type GetNetworkInfoDescriptorServerMsgHandle struct{}

func (d *GetNetworkInfoDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetNetworkInfoRequest{}
}

func (d *GetNetworkInfoDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetNetworkInfoResponse{}
}

func (d *GetNetworkInfoDescriptor) IsUnary() bool {
	return true
}

func (d *GetNetworkInfoDescriptor) IsClientStream() bool {
	return false
}

func (d *GetNetworkInfoDescriptor) IsServerStream() bool {
	return false
}

func (d *GetNetworkInfoDescriptor) IsCollection() bool {
	return false
}

func (d *GetNetworkInfoDescriptor) IsPlural() bool {
	return false
}

func (d *GetNetworkInfoDescriptor) HasResource() bool {
	return true
}

func (d *GetNetworkInfoDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetNetworkInfoDescriptor) GetVerb() string {
	return "getNetworkInfo"
}

func (d *GetNetworkInfoDescriptor) GetMethodName() string {
	return "GetNetworkInfo"
}

func (d *GetNetworkInfoDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.NetworkInfoService/GetNetworkInfo"
}

func (d *GetNetworkInfoDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetNetworkInfoDescriptor) GetApiName() string {
	return "NetworkInfoService"
}

func (d *GetNetworkInfoDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetNetworkInfoDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetNetworkInfoDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return networkInfoServiceDescriptor
}

func (d *GetNetworkInfoDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return probe.GetDescriptor()
}

func (d *GetNetworkInfoDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetNetworkInfoDescriptorClientMsgHandle{}
}

func (d *GetNetworkInfoDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetNetworkInfoDescriptorServerMsgHandle{}
}

func (h *GetNetworkInfoDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetNetworkInfoRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetNetworkInfoRequest) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*probe.Name)(nil)
}

func (h *GetNetworkInfoDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetNetworkInfoRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetNetworkInfoRequest) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetNetworkInfoDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetNetworkInfoRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetNetworkInfoRequest) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetNetworkInfoDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetNetworkInfoResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetNetworkInfoResponse) *probe.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetNetworkInfoDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetNetworkInfoResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetNetworkInfoResponse) []*probe.Name
	})
	if ok {
		return probe.ProbeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetNetworkInfoDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetNetworkInfoResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetNetworkInfoResponse) *probe.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetNetworkInfoDescriptor() *GetNetworkInfoDescriptor {
	return getNetworkInfoDescriptor
}

type NetworkInfoServiceDescriptor struct{}

func (d *NetworkInfoServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getNetworkInfoDescriptor,
	}
}

func (d *NetworkInfoServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.NetworkInfoService"
}

func (d *NetworkInfoServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *NetworkInfoServiceDescriptor) GetApiName() string {
	return "NetworkInfoService"
}

func (d *NetworkInfoServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *NetworkInfoServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetNetworkInfoServiceDescriptor() *NetworkInfoServiceDescriptor {
	return networkInfoServiceDescriptor
}

func initDescriptors() {
	networkInfoServiceDescriptor = &NetworkInfoServiceDescriptor{}
	getNetworkInfoDescriptor = &GetNetworkInfoDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(networkInfoServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getNetworkInfoDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
