// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/network_info_custom.proto
// DO NOT EDIT!!!

package network_info_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetNetworkInfoRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetNetworkInfoRequest_FieldPathSelector
	Get(source *GetNetworkInfoRequest) []interface{}
	GetSingle(source *GetNetworkInfoRequest) (interface{}, bool)
	ClearValue(item *GetNetworkInfoRequest)

	// Those methods build corresponding GetNetworkInfoRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetNetworkInfoRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetNetworkInfoRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetNetworkInfoRequest_FieldPathArrayItemValue
}

type GetNetworkInfoRequest_FieldPathSelector int32

const (
	GetNetworkInfoRequest_FieldPathSelectorName         GetNetworkInfoRequest_FieldPathSelector = 0
	GetNetworkInfoRequest_FieldPathSelectorOutputFormat GetNetworkInfoRequest_FieldPathSelector = 1
)

func (s GetNetworkInfoRequest_FieldPathSelector) String() string {
	switch s {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		return "name"
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		return "output_format"
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", s))
	}
}

func BuildGetNetworkInfoRequest_FieldPath(fp gotenobject.RawFieldPath) (GetNetworkInfoRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetNetworkInfoRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetNetworkInfoRequest_FieldTerminalPath{selector: GetNetworkInfoRequest_FieldPathSelectorName}, nil
		case "output_format", "outputFormat", "output-format":
			return &GetNetworkInfoRequest_FieldTerminalPath{selector: GetNetworkInfoRequest_FieldPathSelectorOutputFormat}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetNetworkInfoRequest", fp)
}

func ParseGetNetworkInfoRequest_FieldPath(rawField string) (GetNetworkInfoRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetNetworkInfoRequest_FieldPath(fp)
}

func MustParseGetNetworkInfoRequest_FieldPath(rawField string) GetNetworkInfoRequest_FieldPath {
	fp, err := ParseGetNetworkInfoRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetNetworkInfoRequest_FieldTerminalPath struct {
	selector GetNetworkInfoRequest_FieldPathSelector
}

var _ GetNetworkInfoRequest_FieldPath = (*GetNetworkInfoRequest_FieldTerminalPath)(nil)

func (fp *GetNetworkInfoRequest_FieldTerminalPath) Selector() GetNetworkInfoRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetNetworkInfoRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetNetworkInfoRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetNetworkInfoRequest
func (fp *GetNetworkInfoRequest_FieldTerminalPath) Get(source *GetNetworkInfoRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetNetworkInfoRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
			values = append(values, source.OutputFormat)
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetNetworkInfoRequest))
}

// GetSingle returns value pointed by specific field of from source GetNetworkInfoRequest
func (fp *GetNetworkInfoRequest_FieldTerminalPath) GetSingle(source *GetNetworkInfoRequest) (interface{}, bool) {
	switch fp.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		return source.GetOutputFormat(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetNetworkInfoRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetNetworkInfoRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		return common.OnDemandTestResponseFormat_TEXT
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) ClearValue(item *GetNetworkInfoRequest) {
	if item != nil {
		switch fp.selector {
		case GetNetworkInfoRequest_FieldPathSelectorName:
			item.Name = nil
		case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
			item.OutputFormat = common.OnDemandTestResponseFormat_TEXT
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
		}
	}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetNetworkInfoRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetNetworkInfoRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetNetworkInfoRequest_FieldPathSelectorName ||
		fp.selector == GetNetworkInfoRequest_FieldPathSelectorOutputFormat
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithIValue(value interface{}) GetNetworkInfoRequest_FieldPathValue {
	switch fp.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		return &GetNetworkInfoRequest_FieldTerminalPathValue{GetNetworkInfoRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		return &GetNetworkInfoRequest_FieldTerminalPathValue{GetNetworkInfoRequest_FieldTerminalPath: *fp, value: value.(common.OnDemandTestResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetNetworkInfoRequest_FieldPathArrayOfValues {
	fpaov := &GetNetworkInfoRequest_FieldTerminalPathArrayOfValues{GetNetworkInfoRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		return &GetNetworkInfoRequest_FieldTerminalPathArrayOfValues{GetNetworkInfoRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		return &GetNetworkInfoRequest_FieldTerminalPathArrayOfValues{GetNetworkInfoRequest_FieldTerminalPath: *fp, values: values.([]common.OnDemandTestResponseFormat)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetNetworkInfoRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetNetworkInfoRequest_FieldPathValue allows storing values for GetNetworkInfoRequest fields according to their type
type GetNetworkInfoRequest_FieldPathValue interface {
	GetNetworkInfoRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetNetworkInfoRequest)
	CompareWith(*GetNetworkInfoRequest) (cmp int, comparable bool)
}

func ParseGetNetworkInfoRequest_FieldPathValue(pathStr, valueStr string) (GetNetworkInfoRequest_FieldPathValue, error) {
	fp, err := ParseGetNetworkInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetNetworkInfoRequest_FieldPathValue), nil
}

func MustParseGetNetworkInfoRequest_FieldPathValue(pathStr, valueStr string) GetNetworkInfoRequest_FieldPathValue {
	fpv, err := ParseGetNetworkInfoRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetNetworkInfoRequest_FieldTerminalPathValue struct {
	GetNetworkInfoRequest_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoRequest_FieldPathValue = (*GetNetworkInfoRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetNetworkInfoRequest' as interface{}
func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) AsOutputFormatValue() (common.OnDemandTestResponseFormat, bool) {
	res, ok := fpv.value.(common.OnDemandTestResponseFormat)
	return res, ok
}

// SetTo stores value for selected field for object GetNetworkInfoRequest
func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) SetTo(target **GetNetworkInfoRequest) {
	if *target == nil {
		*target = new(GetNetworkInfoRequest)
	}
	switch fpv.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		(*target).OutputFormat = fpv.value.(common.OnDemandTestResponseFormat)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNetworkInfoRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetNetworkInfoRequest_FieldTerminalPathValue' with the value under path in 'GetNetworkInfoRequest'.
func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) CompareWith(source *GetNetworkInfoRequest) (int, bool) {
	switch fpv.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		leftValue := fpv.value.(common.OnDemandTestResponseFormat)
		rightValue := source.GetOutputFormat()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoRequest: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetNetworkInfoRequest))
}

// GetNetworkInfoRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetNetworkInfoRequest according to their type
// Present only for array (repeated) types.
type GetNetworkInfoRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetNetworkInfoRequest_FieldPath
	ContainsValue(*GetNetworkInfoRequest) bool
}

// ParseGetNetworkInfoRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetNetworkInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetNetworkInfoRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetNetworkInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetNetworkInfoRequest_FieldPathArrayItemValue), nil
}

func MustParseGetNetworkInfoRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetNetworkInfoRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetNetworkInfoRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetNetworkInfoRequest_FieldTerminalPathArrayItemValue struct {
	GetNetworkInfoRequest_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoRequest_FieldPathArrayItemValue = (*GetNetworkInfoRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetNetworkInfoRequest as interface{}
func (fpaiv *GetNetworkInfoRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetNetworkInfoRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetNetworkInfoRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetNetworkInfoRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetNetworkInfoRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetNetworkInfoRequest'
func (fpaiv *GetNetworkInfoRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetNetworkInfoRequest) bool {
	slice := fpaiv.GetNetworkInfoRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetNetworkInfoRequest_FieldPathArrayOfValues allows storing slice of values for GetNetworkInfoRequest fields according to their type
type GetNetworkInfoRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetNetworkInfoRequest_FieldPath
}

func ParseGetNetworkInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetNetworkInfoRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetNetworkInfoRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetNetworkInfoRequest_FieldPathArrayOfValues), nil
}

func MustParseGetNetworkInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetNetworkInfoRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetNetworkInfoRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetNetworkInfoRequest_FieldTerminalPathArrayOfValues struct {
	GetNetworkInfoRequest_FieldTerminalPath
	values interface{}
}

var _ GetNetworkInfoRequest_FieldPathArrayOfValues = (*GetNetworkInfoRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetNetworkInfoRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetNetworkInfoRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetNetworkInfoRequest_FieldPathSelectorOutputFormat:
		for _, v := range fpaov.values.([]common.OnDemandTestResponseFormat) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetNetworkInfoRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetNetworkInfoRequest_FieldTerminalPathArrayOfValues) AsOutputFormatArrayOfValues() ([]common.OnDemandTestResponseFormat, bool) {
	res, ok := fpaov.values.([]common.OnDemandTestResponseFormat)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetNetworkInfoResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetNetworkInfoResponse_FieldPathSelector
	Get(source *GetNetworkInfoResponse) []interface{}
	GetSingle(source *GetNetworkInfoResponse) (interface{}, bool)
	ClearValue(item *GetNetworkInfoResponse)

	// Those methods build corresponding GetNetworkInfoResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetNetworkInfoResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetNetworkInfoResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetNetworkInfoResponse_FieldPathArrayItemValue
}

type GetNetworkInfoResponse_FieldPathSelector int32

const (
	GetNetworkInfoResponse_FieldPathSelectorTextResponse GetNetworkInfoResponse_FieldPathSelector = 0
	GetNetworkInfoResponse_FieldPathSelectorJsonResponse GetNetworkInfoResponse_FieldPathSelector = 1
)

func (s GetNetworkInfoResponse_FieldPathSelector) String() string {
	switch s {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		return "text_response"
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return "json_response"
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", s))
	}
}

func BuildGetNetworkInfoResponse_FieldPath(fp gotenobject.RawFieldPath) (GetNetworkInfoResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetNetworkInfoResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "text_response", "textResponse", "text-response":
			return &GetNetworkInfoResponse_FieldTerminalPath{selector: GetNetworkInfoResponse_FieldPathSelectorTextResponse}, nil
		case "json_response", "jsonResponse", "json-response":
			return &GetNetworkInfoResponse_FieldTerminalPath{selector: GetNetworkInfoResponse_FieldPathSelectorJsonResponse}, nil
		}
	} else {
		switch fp[0] {
		case "json_response", "jsonResponse", "json-response":
			if subpath, err := BuildGetNetworkInfoResponseJsonResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetNetworkInfoResponse_FieldSubPath{selector: GetNetworkInfoResponse_FieldPathSelectorJsonResponse, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetNetworkInfoResponse", fp)
}

func ParseGetNetworkInfoResponse_FieldPath(rawField string) (GetNetworkInfoResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetNetworkInfoResponse_FieldPath(fp)
}

func MustParseGetNetworkInfoResponse_FieldPath(rawField string) GetNetworkInfoResponse_FieldPath {
	fp, err := ParseGetNetworkInfoResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetNetworkInfoResponse_FieldTerminalPath struct {
	selector GetNetworkInfoResponse_FieldPathSelector
}

var _ GetNetworkInfoResponse_FieldPath = (*GetNetworkInfoResponse_FieldTerminalPath)(nil)

func (fp *GetNetworkInfoResponse_FieldTerminalPath) Selector() GetNetworkInfoResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetNetworkInfoResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetNetworkInfoResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetNetworkInfoResponse
func (fp *GetNetworkInfoResponse_FieldTerminalPath) Get(source *GetNetworkInfoResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
			values = append(values, source.TextResponse)
		case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
			if source.JsonResponse != nil {
				values = append(values, source.JsonResponse)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetNetworkInfoResponse))
}

// GetSingle returns value pointed by specific field of from source GetNetworkInfoResponse
func (fp *GetNetworkInfoResponse_FieldTerminalPath) GetSingle(source *GetNetworkInfoResponse) (interface{}, bool) {
	switch fp.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		return source.GetTextResponse(), source != nil
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		res := source.GetJsonResponse()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetNetworkInfoResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetNetworkInfoResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		return ""
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return (*GetNetworkInfoResponse_JsonResponse)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) ClearValue(item *GetNetworkInfoResponse) {
	if item != nil {
		switch fp.selector {
		case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
			item.TextResponse = ""
		case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
			item.JsonResponse = nil
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
		}
	}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetNetworkInfoResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetNetworkInfoResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetNetworkInfoResponse_FieldPathSelectorTextResponse
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithIValue(value interface{}) GetNetworkInfoResponse_FieldPathValue {
	switch fp.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		return &GetNetworkInfoResponse_FieldTerminalPathValue{GetNetworkInfoResponse_FieldTerminalPath: *fp, value: value.(string)}
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return &GetNetworkInfoResponse_FieldTerminalPathValue{GetNetworkInfoResponse_FieldTerminalPath: *fp, value: value.(*GetNetworkInfoResponse_JsonResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetNetworkInfoResponse_FieldPathArrayOfValues {
	fpaov := &GetNetworkInfoResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		return &GetNetworkInfoResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return &GetNetworkInfoResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponse_FieldTerminalPath: *fp, values: values.([]*GetNetworkInfoResponse_JsonResponse)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetNetworkInfoResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetNetworkInfoResponse_FieldSubPath struct {
	selector GetNetworkInfoResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetNetworkInfoResponse_FieldPath = (*GetNetworkInfoResponse_FieldSubPath)(nil)

func (fps *GetNetworkInfoResponse_FieldSubPath) Selector() GetNetworkInfoResponse_FieldPathSelector {
	return fps.selector
}
func (fps *GetNetworkInfoResponse_FieldSubPath) AsJsonResponseSubPath() (GetNetworkInfoResponseJsonResponse_FieldPath, bool) {
	res, ok := fps.subPath.(GetNetworkInfoResponseJsonResponse_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetNetworkInfoResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetNetworkInfoResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetNetworkInfoResponse
func (fps *GetNetworkInfoResponse_FieldSubPath) Get(source *GetNetworkInfoResponse) (values []interface{}) {
	switch fps.selector {
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		values = append(values, fps.subPath.GetRaw(source.GetJsonResponse())...)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fps.selector))
	}
	return
}

func (fps *GetNetworkInfoResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetNetworkInfoResponse))
}

// GetSingle returns value of selected field from source GetNetworkInfoResponse
func (fps *GetNetworkInfoResponse_FieldSubPath) GetSingle(source *GetNetworkInfoResponse) (interface{}, bool) {
	switch fps.selector {
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		if source.GetJsonResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fps.selector))
	}
}

func (fps *GetNetworkInfoResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetNetworkInfoResponse))
}

// GetDefault returns a default value of the field type
func (fps *GetNetworkInfoResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetNetworkInfoResponse_FieldSubPath) ClearValue(item *GetNetworkInfoResponse) {
	if item != nil {
		switch fps.selector {
		case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
			fps.subPath.ClearValueRaw(item.JsonResponse)
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fps.selector))
		}
	}
}

func (fps *GetNetworkInfoResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetNetworkInfoResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetNetworkInfoResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetNetworkInfoResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetNetworkInfoResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithIValue(value interface{}) GetNetworkInfoResponse_FieldPathValue {
	return &GetNetworkInfoResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithIArrayOfValues(values interface{}) GetNetworkInfoResponse_FieldPathArrayOfValues {
	return &GetNetworkInfoResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithIArrayItemValue(value interface{}) GetNetworkInfoResponse_FieldPathArrayItemValue {
	return &GetNetworkInfoResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetNetworkInfoResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetNetworkInfoResponse_FieldPathValue allows storing values for GetNetworkInfoResponse fields according to their type
type GetNetworkInfoResponse_FieldPathValue interface {
	GetNetworkInfoResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetNetworkInfoResponse)
	CompareWith(*GetNetworkInfoResponse) (cmp int, comparable bool)
}

func ParseGetNetworkInfoResponse_FieldPathValue(pathStr, valueStr string) (GetNetworkInfoResponse_FieldPathValue, error) {
	fp, err := ParseGetNetworkInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetNetworkInfoResponse_FieldPathValue), nil
}

func MustParseGetNetworkInfoResponse_FieldPathValue(pathStr, valueStr string) GetNetworkInfoResponse_FieldPathValue {
	fpv, err := ParseGetNetworkInfoResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetNetworkInfoResponse_FieldTerminalPathValue struct {
	GetNetworkInfoResponse_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoResponse_FieldPathValue = (*GetNetworkInfoResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetNetworkInfoResponse' as interface{}
func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) AsTextResponseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) AsJsonResponseValue() (*GetNetworkInfoResponse_JsonResponse, bool) {
	res, ok := fpv.value.(*GetNetworkInfoResponse_JsonResponse)
	return res, ok
}

// SetTo stores value for selected field for object GetNetworkInfoResponse
func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) SetTo(target **GetNetworkInfoResponse) {
	if *target == nil {
		*target = new(GetNetworkInfoResponse)
	}
	switch fpv.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		(*target).TextResponse = fpv.value.(string)
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		(*target).JsonResponse = fpv.value.(*GetNetworkInfoResponse_JsonResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNetworkInfoResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetNetworkInfoResponse_FieldTerminalPathValue' with the value under path in 'GetNetworkInfoResponse'.
func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) CompareWith(source *GetNetworkInfoResponse) (int, bool) {
	switch fpv.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		leftValue := fpv.value.(string)
		rightValue := source.GetTextResponse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetNetworkInfoResponse))
}

type GetNetworkInfoResponse_FieldSubPathValue struct {
	GetNetworkInfoResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetNetworkInfoResponse_FieldPathValue = (*GetNetworkInfoResponse_FieldSubPathValue)(nil)

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) AsJsonResponsePathValue() (GetNetworkInfoResponseJsonResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(GetNetworkInfoResponseJsonResponse_FieldPathValue)
	return res, ok
}

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) SetTo(target **GetNetworkInfoResponse) {
	if *target == nil {
		*target = new(GetNetworkInfoResponse)
	}
	switch fpvs.Selector() {
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		fpvs.subPathValue.(GetNetworkInfoResponseJsonResponse_FieldPathValue).SetTo(&(*target).JsonResponse)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNetworkInfoResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) CompareWith(source *GetNetworkInfoResponse) (int, bool) {
	switch fpvs.Selector() {
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return fpvs.subPathValue.(GetNetworkInfoResponseJsonResponse_FieldPathValue).CompareWith(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetNetworkInfoResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetNetworkInfoResponse))
}

// GetNetworkInfoResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetNetworkInfoResponse according to their type
// Present only for array (repeated) types.
type GetNetworkInfoResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetNetworkInfoResponse_FieldPath
	ContainsValue(*GetNetworkInfoResponse) bool
}

// ParseGetNetworkInfoResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetNetworkInfoResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetNetworkInfoResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetNetworkInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetNetworkInfoResponse_FieldPathArrayItemValue), nil
}

func MustParseGetNetworkInfoResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetNetworkInfoResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetNetworkInfoResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetNetworkInfoResponse_FieldTerminalPathArrayItemValue struct {
	GetNetworkInfoResponse_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoResponse_FieldPathArrayItemValue = (*GetNetworkInfoResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetNetworkInfoResponse as interface{}
func (fpaiv *GetNetworkInfoResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetNetworkInfoResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetNetworkInfoResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetNetworkInfoResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetNetworkInfoResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetNetworkInfoResponse'
func (fpaiv *GetNetworkInfoResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetNetworkInfoResponse) bool {
	slice := fpaiv.GetNetworkInfoResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetNetworkInfoResponse_FieldSubPathArrayItemValue struct {
	GetNetworkInfoResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetNetworkInfoResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetNetworkInfoResponse_FieldSubPathArrayItemValue) AsJsonResponsePathItemValue() (GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetNetworkInfoResponse'
func (fpaivs *GetNetworkInfoResponse_FieldSubPathArrayItemValue) ContainsValue(source *GetNetworkInfoResponse) bool {
	switch fpaivs.Selector() {
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		return fpaivs.subPathItemValue.(GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue).ContainsValue(source.GetJsonResponse())
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse: %d", fpaivs.Selector()))
	}
}

// GetNetworkInfoResponse_FieldPathArrayOfValues allows storing slice of values for GetNetworkInfoResponse fields according to their type
type GetNetworkInfoResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetNetworkInfoResponse_FieldPath
}

func ParseGetNetworkInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetNetworkInfoResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetNetworkInfoResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNetworkInfoResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetNetworkInfoResponse_FieldPathArrayOfValues), nil
}

func MustParseGetNetworkInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetNetworkInfoResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetNetworkInfoResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetNetworkInfoResponse_FieldTerminalPathArrayOfValues struct {
	GetNetworkInfoResponse_FieldTerminalPath
	values interface{}
}

var _ GetNetworkInfoResponse_FieldPathArrayOfValues = (*GetNetworkInfoResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetNetworkInfoResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetNetworkInfoResponse_FieldPathSelectorTextResponse:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case GetNetworkInfoResponse_FieldPathSelectorJsonResponse:
		for _, v := range fpaov.values.([]*GetNetworkInfoResponse_JsonResponse) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetNetworkInfoResponse_FieldTerminalPathArrayOfValues) AsTextResponseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *GetNetworkInfoResponse_FieldTerminalPathArrayOfValues) AsJsonResponseArrayOfValues() ([]*GetNetworkInfoResponse_JsonResponse, bool) {
	res, ok := fpaov.values.([]*GetNetworkInfoResponse_JsonResponse)
	return res, ok
}

type GetNetworkInfoResponse_FieldSubPathArrayOfValues struct {
	GetNetworkInfoResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetNetworkInfoResponse_FieldPathArrayOfValues = (*GetNetworkInfoResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetNetworkInfoResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetNetworkInfoResponse_FieldSubPathArrayOfValues) AsJsonResponsePathArrayOfValues() (GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetNetworkInfoResponseJsonResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetNetworkInfoResponseJsonResponse_FieldPathSelector
	Get(source *GetNetworkInfoResponse_JsonResponse) []interface{}
	GetSingle(source *GetNetworkInfoResponse_JsonResponse) (interface{}, bool)
	ClearValue(item *GetNetworkInfoResponse_JsonResponse)

	// Those methods build corresponding GetNetworkInfoResponseJsonResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetNetworkInfoResponseJsonResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue
}

type GetNetworkInfoResponseJsonResponse_FieldPathSelector int32

const (
	GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces GetNetworkInfoResponseJsonResponse_FieldPathSelector = 0
	GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes     GetNetworkInfoResponseJsonResponse_FieldPathSelector = 1
	GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo   GetNetworkInfoResponseJsonResponse_FieldPathSelector = 2
)

func (s GetNetworkInfoResponseJsonResponse_FieldPathSelector) String() string {
	switch s {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		return "interfaces"
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		return "routes"
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		return "wifi_info"
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", s))
	}
}

func BuildGetNetworkInfoResponseJsonResponse_FieldPath(fp gotenobject.RawFieldPath) (GetNetworkInfoResponseJsonResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetNetworkInfoResponse_JsonResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "interfaces":
			return &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces}, nil
		case "routes":
			return &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes}, nil
		case "wifi_info", "wifiInfo", "wifi-info":
			return &GetNetworkInfoResponseJsonResponse_FieldTerminalPath{selector: GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetNetworkInfoResponse_JsonResponse", fp)
}

func ParseGetNetworkInfoResponseJsonResponse_FieldPath(rawField string) (GetNetworkInfoResponseJsonResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetNetworkInfoResponseJsonResponse_FieldPath(fp)
}

func MustParseGetNetworkInfoResponseJsonResponse_FieldPath(rawField string) GetNetworkInfoResponseJsonResponse_FieldPath {
	fp, err := ParseGetNetworkInfoResponseJsonResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetNetworkInfoResponseJsonResponse_FieldTerminalPath struct {
	selector GetNetworkInfoResponseJsonResponse_FieldPathSelector
}

var _ GetNetworkInfoResponseJsonResponse_FieldPath = (*GetNetworkInfoResponseJsonResponse_FieldTerminalPath)(nil)

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) Selector() GetNetworkInfoResponseJsonResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetNetworkInfoResponse_JsonResponse
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) Get(source *GetNetworkInfoResponse_JsonResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
			values = append(values, source.Interfaces)
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
			values = append(values, source.Routes)
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
			values = append(values, source.WifiInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetNetworkInfoResponse_JsonResponse))
}

// GetSingle returns value pointed by specific field of from source GetNetworkInfoResponse_JsonResponse
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) GetSingle(source *GetNetworkInfoResponse_JsonResponse) (interface{}, bool) {
	switch fp.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		return source.GetInterfaces(), source != nil
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		return source.GetRoutes(), source != nil
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		return source.GetWifiInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetNetworkInfoResponse_JsonResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		return ""
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		return ""
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) ClearValue(item *GetNetworkInfoResponse_JsonResponse) {
	if item != nil {
		switch fp.selector {
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
			item.Interfaces = ""
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
			item.Routes = ""
		case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
			item.WifiInfo = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
		}
	}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetNetworkInfoResponse_JsonResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces ||
		fp.selector == GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes ||
		fp.selector == GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithIValue(value interface{}) GetNetworkInfoResponseJsonResponse_FieldPathValue {
	switch fp.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, value: value.(string)}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, value: value.(string)}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues {
	fpaov := &GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		return &GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues{GetNetworkInfoResponseJsonResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fp.selector))
	}
}

func (fp *GetNetworkInfoResponseJsonResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetNetworkInfoResponseJsonResponse_FieldPathValue allows storing values for JsonResponse fields according to their type
type GetNetworkInfoResponseJsonResponse_FieldPathValue interface {
	GetNetworkInfoResponseJsonResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetNetworkInfoResponse_JsonResponse)
	CompareWith(*GetNetworkInfoResponse_JsonResponse) (cmp int, comparable bool)
}

func ParseGetNetworkInfoResponseJsonResponse_FieldPathValue(pathStr, valueStr string) (GetNetworkInfoResponseJsonResponse_FieldPathValue, error) {
	fp, err := ParseGetNetworkInfoResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetNetworkInfoResponseJsonResponse_FieldPathValue), nil
}

func MustParseGetNetworkInfoResponseJsonResponse_FieldPathValue(pathStr, valueStr string) GetNetworkInfoResponseJsonResponse_FieldPathValue {
	fpv, err := ParseGetNetworkInfoResponseJsonResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue struct {
	GetNetworkInfoResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoResponseJsonResponse_FieldPathValue = (*GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'JsonResponse' as interface{}
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) AsInterfacesValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) AsRoutesValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) AsWifiInfoValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object JsonResponse
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) SetTo(target **GetNetworkInfoResponse_JsonResponse) {
	if *target == nil {
		*target = new(GetNetworkInfoResponse_JsonResponse)
	}
	switch fpv.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		(*target).Interfaces = fpv.value.(string)
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		(*target).Routes = fpv.value.(string)
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		(*target).WifiInfo = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNetworkInfoResponse_JsonResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue' with the value under path in 'GetNetworkInfoResponse_JsonResponse'.
func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) CompareWith(source *GetNetworkInfoResponse_JsonResponse) (int, bool) {
	switch fpv.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		leftValue := fpv.value.(string)
		rightValue := source.GetInterfaces()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		leftValue := fpv.value.(string)
		rightValue := source.GetRoutes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		leftValue := fpv.value.(string)
		rightValue := source.GetWifiInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNetworkInfoResponse_JsonResponse: %d", fpv.selector))
	}
}

func (fpv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetNetworkInfoResponse_JsonResponse))
}

// GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for JsonResponse according to their type
// Present only for array (repeated) types.
type GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetNetworkInfoResponseJsonResponse_FieldPath
	ContainsValue(*GetNetworkInfoResponse_JsonResponse) bool
}

// ParseGetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetNetworkInfoResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue), nil
}

func MustParseGetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue struct {
	GetNetworkInfoResponseJsonResponse_FieldTerminalPath
	value interface{}
}

var _ GetNetworkInfoResponseJsonResponse_FieldPathArrayItemValue = (*GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetNetworkInfoResponse_JsonResponse as interface{}
func (fpaiv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetNetworkInfoResponse_JsonResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetNetworkInfoResponse_JsonResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'JsonResponse'
func (fpaiv *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetNetworkInfoResponse_JsonResponse) bool {
	slice := fpaiv.GetNetworkInfoResponseJsonResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues allows storing slice of values for JsonResponse fields according to their type
type GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetNetworkInfoResponseJsonResponse_FieldPath
}

func ParseGetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetNetworkInfoResponseJsonResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing JsonResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues), nil
}

func MustParseGetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues struct {
	GetNetworkInfoResponseJsonResponse_FieldTerminalPath
	values interface{}
}

var _ GetNetworkInfoResponseJsonResponse_FieldPathArrayOfValues = (*GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorInterfaces:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorRoutes:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case GetNetworkInfoResponseJsonResponse_FieldPathSelectorWifiInfo:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues) AsInterfacesArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues) AsRoutesArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *GetNetworkInfoResponseJsonResponse_FieldTerminalPathArrayOfValues) AsWifiInfoArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
