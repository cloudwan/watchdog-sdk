// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/hop_report_custom.proto
// DO NOT EDIT!!!

package hop_report_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ReportHopsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ReportHopsRequest_FieldPathSelector
	Get(source *ReportHopsRequest) []interface{}
	GetSingle(source *ReportHopsRequest) (interface{}, bool)
	ClearValue(item *ReportHopsRequest)

	// Those methods build corresponding ReportHopsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ReportHopsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ReportHopsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ReportHopsRequest_FieldPathArrayItemValue
}

type ReportHopsRequest_FieldPathSelector int32

const (
	ReportHopsRequest_FieldPathSelectorName                   ReportHopsRequest_FieldPathSelector = 0
	ReportHopsRequest_FieldPathSelectorTarget                 ReportHopsRequest_FieldPathSelector = 1
	ReportHopsRequest_FieldPathSelectorTargetIpAddress        ReportHopsRequest_FieldPathSelector = 2
	ReportHopsRequest_FieldPathSelectorIpVersion              ReportHopsRequest_FieldPathSelector = 3
	ReportHopsRequest_FieldPathSelectorMode                   ReportHopsRequest_FieldPathSelector = 4
	ReportHopsRequest_FieldPathSelectorTraceType              ReportHopsRequest_FieldPathSelector = 5
	ReportHopsRequest_FieldPathSelectorPaths                  ReportHopsRequest_FieldPathSelector = 6
	ReportHopsRequest_FieldPathSelectorHopStats               ReportHopsRequest_FieldPathSelector = 7
	ReportHopsRequest_FieldPathSelectorHopInfo                ReportHopsRequest_FieldPathSelector = 8
	ReportHopsRequest_FieldPathSelectorTraceReason            ReportHopsRequest_FieldPathSelector = 9
	ReportHopsRequest_FieldPathSelectorTraceReasonDescription ReportHopsRequest_FieldPathSelector = 10
	ReportHopsRequest_FieldPathSelectorTime                   ReportHopsRequest_FieldPathSelector = 11
)

func (s ReportHopsRequest_FieldPathSelector) String() string {
	switch s {
	case ReportHopsRequest_FieldPathSelectorName:
		return "name"
	case ReportHopsRequest_FieldPathSelectorTarget:
		return "target"
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		return "target_ip_address"
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		return "ip_version"
	case ReportHopsRequest_FieldPathSelectorMode:
		return "mode"
	case ReportHopsRequest_FieldPathSelectorTraceType:
		return "trace_type"
	case ReportHopsRequest_FieldPathSelectorPaths:
		return "paths"
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return "hop_stats"
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return "hop_info"
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		return "trace_reason"
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		return "trace_reason_description"
	case ReportHopsRequest_FieldPathSelectorTime:
		return "time"
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", s))
	}
}

func BuildReportHopsRequest_FieldPath(fp gotenobject.RawFieldPath) (ReportHopsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ReportHopsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorName}, nil
		case "target":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTarget}, nil
		case "target_ip_address", "targetIpAddress", "target-ip-address":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTargetIpAddress}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorIpVersion}, nil
		case "mode":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorMode}, nil
		case "trace_type", "traceType", "trace-type":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceType}, nil
		case "paths":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorPaths}, nil
		case "hop_stats", "hopStats", "hop-stats":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopStats}, nil
		case "hop_info", "hopInfo", "hop-info":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopInfo}, nil
		case "trace_reason", "traceReason", "trace-reason":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReason}, nil
		case "trace_reason_description", "traceReasonDescription", "trace-reason-description":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReasonDescription}, nil
		case "time":
			return &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTime}, nil
		}
	} else {
		switch fp[0] {
		case "paths":
			if subpath, err := common.BuildPath_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ReportHopsRequest_FieldSubPath{selector: ReportHopsRequest_FieldPathSelectorPaths, subPath: subpath}, nil
			}
		case "hop_stats", "hopStats", "hop-stats":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ReportHopsRequest)", fp)
			}
			return &ReportHopsRequest_FieldPathMap{selector: ReportHopsRequest_FieldPathSelectorHopStats, key: fp[1]}, nil
		case "hop_info", "hopInfo", "hop-info":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ReportHopsRequest)", fp)
			}
			return &ReportHopsRequest_FieldPathMap{selector: ReportHopsRequest_FieldPathSelectorHopInfo, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ReportHopsRequest", fp)
}

func ParseReportHopsRequest_FieldPath(rawField string) (ReportHopsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildReportHopsRequest_FieldPath(fp)
}

func MustParseReportHopsRequest_FieldPath(rawField string) ReportHopsRequest_FieldPath {
	fp, err := ParseReportHopsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ReportHopsRequest_FieldTerminalPath struct {
	selector ReportHopsRequest_FieldPathSelector
}

var _ ReportHopsRequest_FieldPath = (*ReportHopsRequest_FieldTerminalPath)(nil)

func (fp *ReportHopsRequest_FieldTerminalPath) Selector() ReportHopsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ReportHopsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ReportHopsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ReportHopsRequest
func (fp *ReportHopsRequest_FieldTerminalPath) Get(source *ReportHopsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ReportHopsRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ReportHopsRequest_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
			values = append(values, source.TargetIpAddress)
		case ReportHopsRequest_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case ReportHopsRequest_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ReportHopsRequest_FieldPathSelectorTraceType:
			values = append(values, source.TraceType)
		case ReportHopsRequest_FieldPathSelectorPaths:
			for _, value := range source.GetPaths() {
				values = append(values, value)
			}
		case ReportHopsRequest_FieldPathSelectorHopStats:
			if source.HopStats != nil {
				values = append(values, source.HopStats)
			}
		case ReportHopsRequest_FieldPathSelectorHopInfo:
			if source.HopInfo != nil {
				values = append(values, source.HopInfo)
			}
		case ReportHopsRequest_FieldPathSelectorTraceReason:
			values = append(values, source.TraceReason)
		case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
			values = append(values, source.TraceReasonDescription)
		case ReportHopsRequest_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ReportHopsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ReportHopsRequest))
}

// GetSingle returns value pointed by specific field of from source ReportHopsRequest
func (fp *ReportHopsRequest_FieldTerminalPath) GetSingle(source *ReportHopsRequest) (interface{}, bool) {
	switch fp.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ReportHopsRequest_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		return source.GetTargetIpAddress(), source != nil
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case ReportHopsRequest_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ReportHopsRequest_FieldPathSelectorTraceType:
		return source.GetTraceType(), source != nil
	case ReportHopsRequest_FieldPathSelectorPaths:
		res := source.GetPaths()
		return res, res != nil
	case ReportHopsRequest_FieldPathSelectorHopStats:
		res := source.GetHopStats()
		return res, res != nil
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		res := source.GetHopInfo()
		return res, res != nil
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		return source.GetTraceReason(), source != nil
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		return source.GetTraceReasonDescription(), source != nil
	case ReportHopsRequest_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
	}
}

func (fp *ReportHopsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ReportHopsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ReportHopsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ReportHopsRequest_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		return ""
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case ReportHopsRequest_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case ReportHopsRequest_FieldPathSelectorTraceType:
		return common.TraceType_UNDEFINED_TYPE
	case ReportHopsRequest_FieldPathSelectorPaths:
		return ([]*common.Path)(nil)
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return (map[string]*common.HopStat)(nil)
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return (map[string]*common.HopInfo)(nil)
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		return common.TraceReason_UNDEFINED
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		return ""
	case ReportHopsRequest_FieldPathSelectorTime:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
	}
}

func (fp *ReportHopsRequest_FieldTerminalPath) ClearValue(item *ReportHopsRequest) {
	if item != nil {
		switch fp.selector {
		case ReportHopsRequest_FieldPathSelectorName:
			item.Name = nil
		case ReportHopsRequest_FieldPathSelectorTarget:
			item.Target = nil
		case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
			item.TargetIpAddress = ""
		case ReportHopsRequest_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case ReportHopsRequest_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case ReportHopsRequest_FieldPathSelectorTraceType:
			item.TraceType = common.TraceType_UNDEFINED_TYPE
		case ReportHopsRequest_FieldPathSelectorPaths:
			item.Paths = nil
		case ReportHopsRequest_FieldPathSelectorHopStats:
			item.HopStats = nil
		case ReportHopsRequest_FieldPathSelectorHopInfo:
			item.HopInfo = nil
		case ReportHopsRequest_FieldPathSelectorTraceReason:
			item.TraceReason = common.TraceReason_UNDEFINED
		case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
			item.TraceReasonDescription = ""
		case ReportHopsRequest_FieldPathSelectorTime:
			item.Time = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
		}
	}
}

func (fp *ReportHopsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ReportHopsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ReportHopsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ReportHopsRequest_FieldPathSelectorName ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTarget ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTargetIpAddress ||
		fp.selector == ReportHopsRequest_FieldPathSelectorIpVersion ||
		fp.selector == ReportHopsRequest_FieldPathSelectorMode ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTraceType ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTraceReason ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTraceReasonDescription ||
		fp.selector == ReportHopsRequest_FieldPathSelectorTime
}

func (fp *ReportHopsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithIValue(value interface{}) ReportHopsRequest_FieldPathValue {
	switch fp.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ReportHopsRequest_FieldPathSelectorTarget:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case ReportHopsRequest_FieldPathSelectorMode:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case ReportHopsRequest_FieldPathSelectorTraceType:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(common.TraceType)}
	case ReportHopsRequest_FieldPathSelectorPaths:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.([]*common.Path)}
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(map[string]*common.HopStat)}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(map[string]*common.HopInfo)}
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(common.TraceReason)}
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ReportHopsRequest_FieldPathSelectorTime:
		return &ReportHopsRequest_FieldTerminalPathValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
	}
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ReportHopsRequest_FieldPathArrayOfValues {
	fpaov := &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ReportHopsRequest_FieldPathSelectorTarget:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case ReportHopsRequest_FieldPathSelectorMode:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case ReportHopsRequest_FieldPathSelectorTraceType:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]common.TraceType)}
	case ReportHopsRequest_FieldPathSelectorPaths:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([][]*common.Path)}
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopStat)}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopInfo)}
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]common.TraceReason)}
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ReportHopsRequest_FieldPathSelectorTime:
		return &ReportHopsRequest_FieldTerminalPathArrayOfValues{ReportHopsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ReportHopsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ReportHopsRequest_FieldPathSelectorPaths:
		return &ReportHopsRequest_FieldTerminalPathArrayItemValue{ReportHopsRequest_FieldTerminalPath: *fp, value: value.(*common.Path)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fp.selector))
	}
}

func (fp *ReportHopsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ReportHopsRequest_FieldPathMap struct {
	key      string
	selector ReportHopsRequest_FieldPathSelector
}

var _ ReportHopsRequest_FieldPath = (*ReportHopsRequest_FieldPathMap)(nil)

func (fpm *ReportHopsRequest_FieldPathMap) Selector() ReportHopsRequest_FieldPathSelector {
	return fpm.selector
}

func (fpm *ReportHopsRequest_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ReportHopsRequest_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ReportHopsRequest_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ReportHopsRequest
func (fpm *ReportHopsRequest_FieldPathMap) Get(source *ReportHopsRequest) (values []interface{}) {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		if value, ok := source.GetHopStats()[fpm.key]; ok {
			values = append(values, value)
		}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		if value, ok := source.GetHopInfo()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
	return
}

func (fpm *ReportHopsRequest_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ReportHopsRequest))
}

// GetSingle returns value by selected field map key from source ReportHopsRequest
func (fpm *ReportHopsRequest_FieldPathMap) GetSingle(source *ReportHopsRequest) (interface{}, bool) {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		res, ok := source.GetHopStats()[fpm.key]
		return res, ok
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		res, ok := source.GetHopInfo()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ReportHopsRequest))
}

// GetDefault returns a default value of the field type
func (fpm *ReportHopsRequest_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		var v *common.HopStat
		return v
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		var v *common.HopInfo
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) ClearValue(item *ReportHopsRequest) {
	if item != nil {
		switch fpm.selector {
		case ReportHopsRequest_FieldPathSelectorHopStats:
			delete(item.HopStats, fpm.key)
		case ReportHopsRequest_FieldPathSelectorHopInfo:
			delete(item.HopInfo, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
		}
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ReportHopsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ReportHopsRequest_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return false
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ReportHopsRequest_FieldPathMap) WithIValue(value interface{}) ReportHopsRequest_FieldPathValue {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return &ReportHopsRequest_FieldPathMapValue{ReportHopsRequest_FieldPathMap: *fpm, value: value.(*common.HopStat)}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return &ReportHopsRequest_FieldPathMapValue{ReportHopsRequest_FieldPathMap: *fpm, value: value.(*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ReportHopsRequest_FieldPathMap) WithIArrayOfValues(values interface{}) ReportHopsRequest_FieldPathArrayOfValues {
	switch fpm.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return &ReportHopsRequest_FieldPathMapArrayOfValues{ReportHopsRequest_FieldPathMap: *fpm, values: values.([]*common.HopStat)}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return &ReportHopsRequest_FieldPathMapArrayOfValues{ReportHopsRequest_FieldPathMap: *fpm, values: values.([]*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpm.selector))
	}
}

func (fpm *ReportHopsRequest_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ReportHopsRequest_FieldPathMap) WithIArrayItemValue(value interface{}) ReportHopsRequest_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ReportHopsRequest_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type ReportHopsRequest_FieldSubPath struct {
	selector ReportHopsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ReportHopsRequest_FieldPath = (*ReportHopsRequest_FieldSubPath)(nil)

func (fps *ReportHopsRequest_FieldSubPath) Selector() ReportHopsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ReportHopsRequest_FieldSubPath) AsPathsSubPath() (common.Path_FieldPath, bool) {
	res, ok := fps.subPath.(common.Path_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ReportHopsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ReportHopsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ReportHopsRequest
func (fps *ReportHopsRequest_FieldSubPath) Get(source *ReportHopsRequest) (values []interface{}) {
	if asPathFieldPath, ok := fps.AsPathsSubPath(); ok {
		for _, item := range source.GetPaths() {
			values = append(values, asPathFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fps.selector))
	}
	return
}

func (fps *ReportHopsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ReportHopsRequest))
}

// GetSingle returns value of selected field from source ReportHopsRequest
func (fps *ReportHopsRequest_FieldSubPath) GetSingle(source *ReportHopsRequest) (interface{}, bool) {
	switch fps.selector {
	case ReportHopsRequest_FieldPathSelectorPaths:
		if len(source.GetPaths()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPaths()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fps.selector))
	}
}

func (fps *ReportHopsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ReportHopsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ReportHopsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ReportHopsRequest_FieldSubPath) ClearValue(item *ReportHopsRequest) {
	if item != nil {
		switch fps.selector {
		case ReportHopsRequest_FieldPathSelectorPaths:
			for _, subItem := range item.Paths {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fps.selector))
		}
	}
}

func (fps *ReportHopsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ReportHopsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ReportHopsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ReportHopsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ReportHopsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ReportHopsRequest_FieldSubPath) WithIValue(value interface{}) ReportHopsRequest_FieldPathValue {
	return &ReportHopsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ReportHopsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ReportHopsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ReportHopsRequest_FieldPathArrayOfValues {
	return &ReportHopsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ReportHopsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ReportHopsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ReportHopsRequest_FieldPathArrayItemValue {
	return &ReportHopsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ReportHopsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ReportHopsRequest_FieldPathValue allows storing values for ReportHopsRequest fields according to their type
type ReportHopsRequest_FieldPathValue interface {
	ReportHopsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ReportHopsRequest)
	CompareWith(*ReportHopsRequest) (cmp int, comparable bool)
}

func ParseReportHopsRequest_FieldPathValue(pathStr, valueStr string) (ReportHopsRequest_FieldPathValue, error) {
	fp, err := ParseReportHopsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ReportHopsRequest_FieldPathValue), nil
}

func MustParseReportHopsRequest_FieldPathValue(pathStr, valueStr string) ReportHopsRequest_FieldPathValue {
	fpv, err := ParseReportHopsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ReportHopsRequest_FieldTerminalPathValue struct {
	ReportHopsRequest_FieldTerminalPath
	value interface{}
}

var _ ReportHopsRequest_FieldPathValue = (*ReportHopsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReportHopsRequest' as interface{}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTargetIpAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTraceTypeValue() (common.TraceType, bool) {
	res, ok := fpv.value.(common.TraceType)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsPathsValue() ([]*common.Path, bool) {
	res, ok := fpv.value.([]*common.Path)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsHopStatsValue() (map[string]*common.HopStat, bool) {
	res, ok := fpv.value.(map[string]*common.HopStat)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsHopInfoValue() (map[string]*common.HopInfo, bool) {
	res, ok := fpv.value.(map[string]*common.HopInfo)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTraceReasonValue() (common.TraceReason, bool) {
	res, ok := fpv.value.(common.TraceReason)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTraceReasonDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ReportHopsRequest_FieldTerminalPathValue) AsTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object ReportHopsRequest
func (fpv *ReportHopsRequest_FieldTerminalPathValue) SetTo(target **ReportHopsRequest) {
	if *target == nil {
		*target = new(ReportHopsRequest)
	}
	switch fpv.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ReportHopsRequest_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		(*target).TargetIpAddress = fpv.value.(string)
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case ReportHopsRequest_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case ReportHopsRequest_FieldPathSelectorTraceType:
		(*target).TraceType = fpv.value.(common.TraceType)
	case ReportHopsRequest_FieldPathSelectorPaths:
		(*target).Paths = fpv.value.([]*common.Path)
	case ReportHopsRequest_FieldPathSelectorHopStats:
		(*target).HopStats = fpv.value.(map[string]*common.HopStat)
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		(*target).HopInfo = fpv.value.(map[string]*common.HopInfo)
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		(*target).TraceReason = fpv.value.(common.TraceReason)
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		(*target).TraceReasonDescription = fpv.value.(string)
	case ReportHopsRequest_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpv.selector))
	}
}

func (fpv *ReportHopsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHopsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportHopsRequest_FieldTerminalPathValue' with the value under path in 'ReportHopsRequest'.
func (fpv *ReportHopsRequest_FieldTerminalPathValue) CompareWith(source *ReportHopsRequest) (int, bool) {
	switch fpv.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetIpAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorTraceType:
		leftValue := fpv.value.(common.TraceType)
		rightValue := source.GetTraceType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorPaths:
		return 0, false
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return 0, false
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return 0, false
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		leftValue := fpv.value.(common.TraceReason)
		rightValue := source.GetTraceReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetTraceReasonDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ReportHopsRequest_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpv.selector))
	}
}

func (fpv *ReportHopsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ReportHopsRequest))
}

type ReportHopsRequest_FieldPathMapValue struct {
	ReportHopsRequest_FieldPathMap
	value interface{}
}

var _ ReportHopsRequest_FieldPathValue = (*ReportHopsRequest_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in ReportHopsRequest as interface{}
func (fpmv *ReportHopsRequest_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ReportHopsRequest_FieldPathMapValue) AsHopStatsElementValue() (*common.HopStat, bool) {
	res, ok := fpmv.value.(*common.HopStat)
	return res, ok
}
func (fpmv *ReportHopsRequest_FieldPathMapValue) AsHopInfoElementValue() (*common.HopInfo, bool) {
	res, ok := fpmv.value.(*common.HopInfo)
	return res, ok
}

// SetTo stores value for selected field in ReportHopsRequest
func (fpmv *ReportHopsRequest_FieldPathMapValue) SetTo(target **ReportHopsRequest) {
	if *target == nil {
		*target = new(ReportHopsRequest)
	}
	switch fpmv.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		if (*target).HopStats == nil {
			(*target).HopStats = make(map[string]*common.HopStat)
		}
		(*target).HopStats[fpmv.key] = fpmv.value.(*common.HopStat)
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		if (*target).HopInfo == nil {
			(*target).HopInfo = make(map[string]*common.HopInfo)
		}
		(*target).HopInfo[fpmv.key] = fpmv.value.(*common.HopInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpmv.selector))
	}
}

func (fpmv *ReportHopsRequest_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHopsRequest)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportHopsRequest_FieldPathMapValue' with the value under path in 'ReportHopsRequest'.
func (fpmv *ReportHopsRequest_FieldPathMapValue) CompareWith(source *ReportHopsRequest) (int, bool) {
	switch fpmv.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		return 0, false
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpmv.selector))
	}
}

func (fpmv *ReportHopsRequest_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ReportHopsRequest))
}

type ReportHopsRequest_FieldSubPathValue struct {
	ReportHopsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ReportHopsRequest_FieldPathValue = (*ReportHopsRequest_FieldSubPathValue)(nil)

func (fpvs *ReportHopsRequest_FieldSubPathValue) AsPathsPathValue() (common.Path_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Path_FieldPathValue)
	return res, ok
}

func (fpvs *ReportHopsRequest_FieldSubPathValue) SetTo(target **ReportHopsRequest) {
	if *target == nil {
		*target = new(ReportHopsRequest)
	}
	switch fpvs.Selector() {
	case ReportHopsRequest_FieldPathSelectorPaths:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportHopsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHopsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ReportHopsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ReportHopsRequest_FieldSubPathValue) CompareWith(source *ReportHopsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ReportHopsRequest_FieldPathSelectorPaths:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ReportHopsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ReportHopsRequest))
}

// ReportHopsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ReportHopsRequest according to their type
// Present only for array (repeated) types.
type ReportHopsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ReportHopsRequest_FieldPath
	ContainsValue(*ReportHopsRequest) bool
}

// ParseReportHopsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseReportHopsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ReportHopsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseReportHopsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ReportHopsRequest_FieldPathArrayItemValue), nil
}

func MustParseReportHopsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ReportHopsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseReportHopsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ReportHopsRequest_FieldTerminalPathArrayItemValue struct {
	ReportHopsRequest_FieldTerminalPath
	value interface{}
}

var _ ReportHopsRequest_FieldPathArrayItemValue = (*ReportHopsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ReportHopsRequest as interface{}
func (fpaiv *ReportHopsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ReportHopsRequest_FieldTerminalPathArrayItemValue) AsPathsItemValue() (*common.Path, bool) {
	res, ok := fpaiv.value.(*common.Path)
	return res, ok
}

func (fpaiv *ReportHopsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ReportHopsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ReportHopsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ReportHopsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportHopsRequest'
func (fpaiv *ReportHopsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ReportHopsRequest) bool {
	slice := fpaiv.ReportHopsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ReportHopsRequest_FieldSubPathArrayItemValue struct {
	ReportHopsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ReportHopsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ReportHopsRequest_FieldSubPathArrayItemValue) AsPathsPathItemValue() (common.Path_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Path_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportHopsRequest'
func (fpaivs *ReportHopsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ReportHopsRequest) bool {
	switch fpaivs.Selector() {
	case ReportHopsRequest_FieldPathSelectorPaths:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsRequest: %d", fpaivs.Selector()))
	}
}

// ReportHopsRequest_FieldPathArrayOfValues allows storing slice of values for ReportHopsRequest fields according to their type
type ReportHopsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ReportHopsRequest_FieldPath
}

func ParseReportHopsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ReportHopsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseReportHopsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ReportHopsRequest_FieldPathArrayOfValues), nil
}

func MustParseReportHopsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ReportHopsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseReportHopsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ReportHopsRequest_FieldTerminalPathArrayOfValues struct {
	ReportHopsRequest_FieldTerminalPath
	values interface{}
}

var _ ReportHopsRequest_FieldPathArrayOfValues = (*ReportHopsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ReportHopsRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTraceType:
		for _, v := range fpaov.values.([]common.TraceType) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorPaths:
		for _, v := range fpaov.values.([][]*common.Path) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorHopStats:
		for _, v := range fpaov.values.([]map[string]*common.HopStat) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		for _, v := range fpaov.values.([]map[string]*common.HopInfo) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTraceReason:
		for _, v := range fpaov.values.([]common.TraceReason) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTargetIpAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTraceTypeArrayOfValues() ([]common.TraceType, bool) {
	res, ok := fpaov.values.([]common.TraceType)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsPathsArrayOfValues() ([][]*common.Path, bool) {
	res, ok := fpaov.values.([][]*common.Path)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsHopStatsArrayOfValues() ([]map[string]*common.HopStat, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopStat)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsHopInfoArrayOfValues() ([]map[string]*common.HopInfo, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopInfo)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTraceReasonArrayOfValues() ([]common.TraceReason, bool) {
	res, ok := fpaov.values.([]common.TraceReason)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTraceReasonDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ReportHopsRequest_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}

type ReportHopsRequest_FieldPathMapArrayOfValues struct {
	ReportHopsRequest_FieldPathMap
	values interface{}
}

var _ ReportHopsRequest_FieldPathArrayOfValues = (*ReportHopsRequest_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ReportHopsRequest_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ReportHopsRequest_FieldPathSelectorHopStats:
		for _, v := range fpmaov.values.([]*common.HopStat) {
			values = append(values, v)
		}
	case ReportHopsRequest_FieldPathSelectorHopInfo:
		for _, v := range fpmaov.values.([]*common.HopInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ReportHopsRequest_FieldPathMapArrayOfValues) AsHopStatsArrayOfElementValues() ([]*common.HopStat, bool) {
	res, ok := fpmaov.values.([]*common.HopStat)
	return res, ok
}
func (fpmaov *ReportHopsRequest_FieldPathMapArrayOfValues) AsHopInfoArrayOfElementValues() ([]*common.HopInfo, bool) {
	res, ok := fpmaov.values.([]*common.HopInfo)
	return res, ok
}

type ReportHopsRequest_FieldSubPathArrayOfValues struct {
	ReportHopsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ReportHopsRequest_FieldPathArrayOfValues = (*ReportHopsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ReportHopsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ReportHopsRequest_FieldSubPathArrayOfValues) AsPathsPathArrayOfValues() (common.Path_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Path_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ReportHopsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ReportHopsResponse_FieldPathSelector
	Get(source *ReportHopsResponse) []interface{}
	GetSingle(source *ReportHopsResponse) (interface{}, bool)
	ClearValue(item *ReportHopsResponse)

	// Those methods build corresponding ReportHopsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ReportHopsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ReportHopsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ReportHopsResponse_FieldPathArrayItemValue
}

type ReportHopsResponse_FieldPathSelector int32

func (s ReportHopsResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", s))
	}
}

func BuildReportHopsResponse_FieldPath(fp gotenobject.RawFieldPath) (ReportHopsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ReportHopsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ReportHopsResponse", fp)
}

func ParseReportHopsResponse_FieldPath(rawField string) (ReportHopsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildReportHopsResponse_FieldPath(fp)
}

func MustParseReportHopsResponse_FieldPath(rawField string) ReportHopsResponse_FieldPath {
	fp, err := ParseReportHopsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ReportHopsResponse_FieldTerminalPath struct {
	selector ReportHopsResponse_FieldPathSelector
}

var _ ReportHopsResponse_FieldPath = (*ReportHopsResponse_FieldTerminalPath)(nil)

func (fp *ReportHopsResponse_FieldTerminalPath) Selector() ReportHopsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ReportHopsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ReportHopsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ReportHopsResponse
func (fp *ReportHopsResponse_FieldTerminalPath) Get(source *ReportHopsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ReportHopsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ReportHopsResponse))
}

// GetSingle returns value pointed by specific field of from source ReportHopsResponse
func (fp *ReportHopsResponse_FieldTerminalPath) GetSingle(source *ReportHopsResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
	}
}

func (fp *ReportHopsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ReportHopsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ReportHopsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
	}
}

func (fp *ReportHopsResponse_FieldTerminalPath) ClearValue(item *ReportHopsResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
		}
	}
}

func (fp *ReportHopsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ReportHopsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ReportHopsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ReportHopsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithIValue(value interface{}) ReportHopsResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
	}
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ReportHopsResponse_FieldPathArrayOfValues {
	fpaov := &ReportHopsResponse_FieldTerminalPathArrayOfValues{ReportHopsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ReportHopsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fp.selector))
	}
}

func (fp *ReportHopsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ReportHopsResponse_FieldPathValue allows storing values for ReportHopsResponse fields according to their type
type ReportHopsResponse_FieldPathValue interface {
	ReportHopsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ReportHopsResponse)
	CompareWith(*ReportHopsResponse) (cmp int, comparable bool)
}

func ParseReportHopsResponse_FieldPathValue(pathStr, valueStr string) (ReportHopsResponse_FieldPathValue, error) {
	fp, err := ParseReportHopsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ReportHopsResponse_FieldPathValue), nil
}

func MustParseReportHopsResponse_FieldPathValue(pathStr, valueStr string) ReportHopsResponse_FieldPathValue {
	fpv, err := ParseReportHopsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ReportHopsResponse_FieldTerminalPathValue struct {
	ReportHopsResponse_FieldTerminalPath
	value interface{}
}

var _ ReportHopsResponse_FieldPathValue = (*ReportHopsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ReportHopsResponse' as interface{}
func (fpv *ReportHopsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object ReportHopsResponse
func (fpv *ReportHopsResponse_FieldTerminalPathValue) SetTo(target **ReportHopsResponse) {
	if *target == nil {
		*target = new(ReportHopsResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fpv.selector))
	}
}

func (fpv *ReportHopsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ReportHopsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ReportHopsResponse_FieldTerminalPathValue' with the value under path in 'ReportHopsResponse'.
func (fpv *ReportHopsResponse_FieldTerminalPathValue) CompareWith(source *ReportHopsResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ReportHopsResponse: %d", fpv.selector))
	}
}

func (fpv *ReportHopsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ReportHopsResponse))
}

// ReportHopsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ReportHopsResponse according to their type
// Present only for array (repeated) types.
type ReportHopsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ReportHopsResponse_FieldPath
	ContainsValue(*ReportHopsResponse) bool
}

// ParseReportHopsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseReportHopsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ReportHopsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseReportHopsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ReportHopsResponse_FieldPathArrayItemValue), nil
}

func MustParseReportHopsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ReportHopsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseReportHopsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ReportHopsResponse_FieldTerminalPathArrayItemValue struct {
	ReportHopsResponse_FieldTerminalPath
	value interface{}
}

var _ ReportHopsResponse_FieldPathArrayItemValue = (*ReportHopsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ReportHopsResponse as interface{}
func (fpaiv *ReportHopsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ReportHopsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ReportHopsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ReportHopsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ReportHopsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ReportHopsResponse'
func (fpaiv *ReportHopsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ReportHopsResponse) bool {
	slice := fpaiv.ReportHopsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ReportHopsResponse_FieldPathArrayOfValues allows storing slice of values for ReportHopsResponse fields according to their type
type ReportHopsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ReportHopsResponse_FieldPath
}

func ParseReportHopsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ReportHopsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseReportHopsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ReportHopsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ReportHopsResponse_FieldPathArrayOfValues), nil
}

func MustParseReportHopsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ReportHopsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseReportHopsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ReportHopsResponse_FieldTerminalPathArrayOfValues struct {
	ReportHopsResponse_FieldTerminalPath
	values interface{}
}

var _ ReportHopsResponse_FieldPathArrayOfValues = (*ReportHopsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ReportHopsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PathStats_FieldPath interface {
	gotenobject.FieldPath
	Selector() PathStats_FieldPathSelector
	Get(source *PathStats) []interface{}
	GetSingle(source *PathStats) (interface{}, bool)
	ClearValue(item *PathStats)

	// Those methods build corresponding PathStats_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PathStats_FieldPathValue
	WithIArrayOfValues(values interface{}) PathStats_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PathStats_FieldPathArrayItemValue
}

type PathStats_FieldPathSelector int32

const (
	PathStats_FieldPathSelectorTime                   PathStats_FieldPathSelector = 0
	PathStats_FieldPathSelectorPaths                  PathStats_FieldPathSelector = 1
	PathStats_FieldPathSelectorHopStats               PathStats_FieldPathSelector = 2
	PathStats_FieldPathSelectorTraceReason            PathStats_FieldPathSelector = 3
	PathStats_FieldPathSelectorTraceReasonDescription PathStats_FieldPathSelector = 4
)

func (s PathStats_FieldPathSelector) String() string {
	switch s {
	case PathStats_FieldPathSelectorTime:
		return "time"
	case PathStats_FieldPathSelectorPaths:
		return "paths"
	case PathStats_FieldPathSelectorHopStats:
		return "hop_stats"
	case PathStats_FieldPathSelectorTraceReason:
		return "trace_reason"
	case PathStats_FieldPathSelectorTraceReasonDescription:
		return "trace_reason_description"
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", s))
	}
}

func BuildPathStats_FieldPath(fp gotenobject.RawFieldPath) (PathStats_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PathStats")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "time":
			return &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTime}, nil
		case "paths":
			return &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorPaths}, nil
		case "hop_stats", "hopStats", "hop-stats":
			return &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorHopStats}, nil
		case "trace_reason", "traceReason", "trace-reason":
			return &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReason}, nil
		case "trace_reason_description", "traceReasonDescription", "trace-reason-description":
			return &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReasonDescription}, nil
		}
	} else {
		switch fp[0] {
		case "paths":
			if subpath, err := common.BuildPath_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PathStats_FieldSubPath{selector: PathStats_FieldPathSelectorPaths, subPath: subpath}, nil
			}
		case "hop_stats", "hopStats", "hop-stats":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object PathStats)", fp)
			}
			return &PathStats_FieldPathMap{selector: PathStats_FieldPathSelectorHopStats, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PathStats", fp)
}

func ParsePathStats_FieldPath(rawField string) (PathStats_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPathStats_FieldPath(fp)
}

func MustParsePathStats_FieldPath(rawField string) PathStats_FieldPath {
	fp, err := ParsePathStats_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PathStats_FieldTerminalPath struct {
	selector PathStats_FieldPathSelector
}

var _ PathStats_FieldPath = (*PathStats_FieldTerminalPath)(nil)

func (fp *PathStats_FieldTerminalPath) Selector() PathStats_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PathStats_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PathStats_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PathStats
func (fp *PathStats_FieldTerminalPath) Get(source *PathStats) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PathStats_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case PathStats_FieldPathSelectorPaths:
			for _, value := range source.GetPaths() {
				values = append(values, value)
			}
		case PathStats_FieldPathSelectorHopStats:
			if source.HopStats != nil {
				values = append(values, source.HopStats)
			}
		case PathStats_FieldPathSelectorTraceReason:
			values = append(values, source.TraceReason)
		case PathStats_FieldPathSelectorTraceReasonDescription:
			values = append(values, source.TraceReasonDescription)
		default:
			panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
		}
	}
	return
}

func (fp *PathStats_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PathStats))
}

// GetSingle returns value pointed by specific field of from source PathStats
func (fp *PathStats_FieldTerminalPath) GetSingle(source *PathStats) (interface{}, bool) {
	switch fp.selector {
	case PathStats_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case PathStats_FieldPathSelectorPaths:
		res := source.GetPaths()
		return res, res != nil
	case PathStats_FieldPathSelectorHopStats:
		res := source.GetHopStats()
		return res, res != nil
	case PathStats_FieldPathSelectorTraceReason:
		return source.GetTraceReason(), source != nil
	case PathStats_FieldPathSelectorTraceReasonDescription:
		return source.GetTraceReasonDescription(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
	}
}

func (fp *PathStats_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PathStats))
}

// GetDefault returns a default value of the field type
func (fp *PathStats_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PathStats_FieldPathSelectorTime:
		return (*timestamp.Timestamp)(nil)
	case PathStats_FieldPathSelectorPaths:
		return ([]*common.Path)(nil)
	case PathStats_FieldPathSelectorHopStats:
		return (map[string]*common.HopStat)(nil)
	case PathStats_FieldPathSelectorTraceReason:
		return common.TraceReason_UNDEFINED
	case PathStats_FieldPathSelectorTraceReasonDescription:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
	}
}

func (fp *PathStats_FieldTerminalPath) ClearValue(item *PathStats) {
	if item != nil {
		switch fp.selector {
		case PathStats_FieldPathSelectorTime:
			item.Time = nil
		case PathStats_FieldPathSelectorPaths:
			item.Paths = nil
		case PathStats_FieldPathSelectorHopStats:
			item.HopStats = nil
		case PathStats_FieldPathSelectorTraceReason:
			item.TraceReason = common.TraceReason_UNDEFINED
		case PathStats_FieldPathSelectorTraceReasonDescription:
			item.TraceReasonDescription = ""
		default:
			panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
		}
	}
}

func (fp *PathStats_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PathStats))
}

// IsLeaf - whether field path is holds simple value
func (fp *PathStats_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PathStats_FieldPathSelectorTime ||
		fp.selector == PathStats_FieldPathSelectorTraceReason ||
		fp.selector == PathStats_FieldPathSelectorTraceReasonDescription
}

func (fp *PathStats_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PathStats_FieldTerminalPath) WithIValue(value interface{}) PathStats_FieldPathValue {
	switch fp.selector {
	case PathStats_FieldPathSelectorTime:
		return &PathStats_FieldTerminalPathValue{PathStats_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case PathStats_FieldPathSelectorPaths:
		return &PathStats_FieldTerminalPathValue{PathStats_FieldTerminalPath: *fp, value: value.([]*common.Path)}
	case PathStats_FieldPathSelectorHopStats:
		return &PathStats_FieldTerminalPathValue{PathStats_FieldTerminalPath: *fp, value: value.(map[string]*common.HopStat)}
	case PathStats_FieldPathSelectorTraceReason:
		return &PathStats_FieldTerminalPathValue{PathStats_FieldTerminalPath: *fp, value: value.(common.TraceReason)}
	case PathStats_FieldPathSelectorTraceReasonDescription:
		return &PathStats_FieldTerminalPathValue{PathStats_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
	}
}

func (fp *PathStats_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PathStats_FieldTerminalPath) WithIArrayOfValues(values interface{}) PathStats_FieldPathArrayOfValues {
	fpaov := &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp}
	switch fp.selector {
	case PathStats_FieldPathSelectorTime:
		return &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case PathStats_FieldPathSelectorPaths:
		return &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp, values: values.([][]*common.Path)}
	case PathStats_FieldPathSelectorHopStats:
		return &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopStat)}
	case PathStats_FieldPathSelectorTraceReason:
		return &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp, values: values.([]common.TraceReason)}
	case PathStats_FieldPathSelectorTraceReasonDescription:
		return &PathStats_FieldTerminalPathArrayOfValues{PathStats_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
	}
	return fpaov
}

func (fp *PathStats_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PathStats_FieldTerminalPath) WithIArrayItemValue(value interface{}) PathStats_FieldPathArrayItemValue {
	switch fp.selector {
	case PathStats_FieldPathSelectorPaths:
		return &PathStats_FieldTerminalPathArrayItemValue{PathStats_FieldTerminalPath: *fp, value: value.(*common.Path)}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fp.selector))
	}
}

func (fp *PathStats_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type PathStats_FieldPathMap struct {
	key      string
	selector PathStats_FieldPathSelector
}

var _ PathStats_FieldPath = (*PathStats_FieldPathMap)(nil)

func (fpm *PathStats_FieldPathMap) Selector() PathStats_FieldPathSelector {
	return fpm.selector
}

func (fpm *PathStats_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *PathStats_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *PathStats_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source PathStats
func (fpm *PathStats_FieldPathMap) Get(source *PathStats) (values []interface{}) {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		if value, ok := source.GetHopStats()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
	return
}

func (fpm *PathStats_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*PathStats))
}

// GetSingle returns value by selected field map key from source PathStats
func (fpm *PathStats_FieldPathMap) GetSingle(source *PathStats) (interface{}, bool) {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		res, ok := source.GetHopStats()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
}

func (fpm *PathStats_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*PathStats))
}

// GetDefault returns a default value of the field type
func (fpm *PathStats_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		var v *common.HopStat
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
}

func (fpm *PathStats_FieldPathMap) ClearValue(item *PathStats) {
	if item != nil {
		switch fpm.selector {
		case PathStats_FieldPathSelectorHopStats:
			delete(item.HopStats, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
		}
	}
}

func (fpm *PathStats_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*PathStats))
}

// IsLeaf - whether field path is holds simple value
func (fpm *PathStats_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
}

func (fpm *PathStats_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *PathStats_FieldPathMap) WithIValue(value interface{}) PathStats_FieldPathValue {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		return &PathStats_FieldPathMapValue{PathStats_FieldPathMap: *fpm, value: value.(*common.HopStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
}

func (fpm *PathStats_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *PathStats_FieldPathMap) WithIArrayOfValues(values interface{}) PathStats_FieldPathArrayOfValues {
	switch fpm.selector {
	case PathStats_FieldPathSelectorHopStats:
		return &PathStats_FieldPathMapArrayOfValues{PathStats_FieldPathMap: *fpm, values: values.([]*common.HopStat)}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpm.selector))
	}
}

func (fpm *PathStats_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *PathStats_FieldPathMap) WithIArrayItemValue(value interface{}) PathStats_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *PathStats_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type PathStats_FieldSubPath struct {
	selector PathStats_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ PathStats_FieldPath = (*PathStats_FieldSubPath)(nil)

func (fps *PathStats_FieldSubPath) Selector() PathStats_FieldPathSelector {
	return fps.selector
}
func (fps *PathStats_FieldSubPath) AsPathsSubPath() (common.Path_FieldPath, bool) {
	res, ok := fps.subPath.(common.Path_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *PathStats_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *PathStats_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source PathStats
func (fps *PathStats_FieldSubPath) Get(source *PathStats) (values []interface{}) {
	if asPathFieldPath, ok := fps.AsPathsSubPath(); ok {
		for _, item := range source.GetPaths() {
			values = append(values, asPathFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fps.selector))
	}
	return
}

func (fps *PathStats_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*PathStats))
}

// GetSingle returns value of selected field from source PathStats
func (fps *PathStats_FieldSubPath) GetSingle(source *PathStats) (interface{}, bool) {
	switch fps.selector {
	case PathStats_FieldPathSelectorPaths:
		if len(source.GetPaths()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPaths()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fps.selector))
	}
}

func (fps *PathStats_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*PathStats))
}

// GetDefault returns a default value of the field type
func (fps *PathStats_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *PathStats_FieldSubPath) ClearValue(item *PathStats) {
	if item != nil {
		switch fps.selector {
		case PathStats_FieldPathSelectorPaths:
			for _, subItem := range item.Paths {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for PathStats: %d", fps.selector))
		}
	}
}

func (fps *PathStats_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*PathStats))
}

// IsLeaf - whether field path is holds simple value
func (fps *PathStats_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *PathStats_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&PathStats_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *PathStats_FieldSubPath) WithIValue(value interface{}) PathStats_FieldPathValue {
	return &PathStats_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *PathStats_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *PathStats_FieldSubPath) WithIArrayOfValues(values interface{}) PathStats_FieldPathArrayOfValues {
	return &PathStats_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *PathStats_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *PathStats_FieldSubPath) WithIArrayItemValue(value interface{}) PathStats_FieldPathArrayItemValue {
	return &PathStats_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *PathStats_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// PathStats_FieldPathValue allows storing values for PathStats fields according to their type
type PathStats_FieldPathValue interface {
	PathStats_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PathStats)
	CompareWith(*PathStats) (cmp int, comparable bool)
}

func ParsePathStats_FieldPathValue(pathStr, valueStr string) (PathStats_FieldPathValue, error) {
	fp, err := ParsePathStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PathStats field path value from %s: %v", valueStr, err)
	}
	return fpv.(PathStats_FieldPathValue), nil
}

func MustParsePathStats_FieldPathValue(pathStr, valueStr string) PathStats_FieldPathValue {
	fpv, err := ParsePathStats_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PathStats_FieldTerminalPathValue struct {
	PathStats_FieldTerminalPath
	value interface{}
}

var _ PathStats_FieldPathValue = (*PathStats_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PathStats' as interface{}
func (fpv *PathStats_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PathStats_FieldTerminalPathValue) AsTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *PathStats_FieldTerminalPathValue) AsPathsValue() ([]*common.Path, bool) {
	res, ok := fpv.value.([]*common.Path)
	return res, ok
}
func (fpv *PathStats_FieldTerminalPathValue) AsHopStatsValue() (map[string]*common.HopStat, bool) {
	res, ok := fpv.value.(map[string]*common.HopStat)
	return res, ok
}
func (fpv *PathStats_FieldTerminalPathValue) AsTraceReasonValue() (common.TraceReason, bool) {
	res, ok := fpv.value.(common.TraceReason)
	return res, ok
}
func (fpv *PathStats_FieldTerminalPathValue) AsTraceReasonDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PathStats
func (fpv *PathStats_FieldTerminalPathValue) SetTo(target **PathStats) {
	if *target == nil {
		*target = new(PathStats)
	}
	switch fpv.selector {
	case PathStats_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamp.Timestamp)
	case PathStats_FieldPathSelectorPaths:
		(*target).Paths = fpv.value.([]*common.Path)
	case PathStats_FieldPathSelectorHopStats:
		(*target).HopStats = fpv.value.(map[string]*common.HopStat)
	case PathStats_FieldPathSelectorTraceReason:
		(*target).TraceReason = fpv.value.(common.TraceReason)
	case PathStats_FieldPathSelectorTraceReasonDescription:
		(*target).TraceReasonDescription = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpv.selector))
	}
}

func (fpv *PathStats_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PathStats)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PathStats_FieldTerminalPathValue' with the value under path in 'PathStats'.
func (fpv *PathStats_FieldTerminalPathValue) CompareWith(source *PathStats) (int, bool) {
	switch fpv.selector {
	case PathStats_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case PathStats_FieldPathSelectorPaths:
		return 0, false
	case PathStats_FieldPathSelectorHopStats:
		return 0, false
	case PathStats_FieldPathSelectorTraceReason:
		leftValue := fpv.value.(common.TraceReason)
		rightValue := source.GetTraceReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PathStats_FieldPathSelectorTraceReasonDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetTraceReasonDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpv.selector))
	}
}

func (fpv *PathStats_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PathStats))
}

type PathStats_FieldPathMapValue struct {
	PathStats_FieldPathMap
	value interface{}
}

var _ PathStats_FieldPathValue = (*PathStats_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in PathStats as interface{}
func (fpmv *PathStats_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *PathStats_FieldPathMapValue) AsHopStatsElementValue() (*common.HopStat, bool) {
	res, ok := fpmv.value.(*common.HopStat)
	return res, ok
}

// SetTo stores value for selected field in PathStats
func (fpmv *PathStats_FieldPathMapValue) SetTo(target **PathStats) {
	if *target == nil {
		*target = new(PathStats)
	}
	switch fpmv.selector {
	case PathStats_FieldPathSelectorHopStats:
		if (*target).HopStats == nil {
			(*target).HopStats = make(map[string]*common.HopStat)
		}
		(*target).HopStats[fpmv.key] = fpmv.value.(*common.HopStat)
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpmv.selector))
	}
}

func (fpmv *PathStats_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PathStats)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PathStats_FieldPathMapValue' with the value under path in 'PathStats'.
func (fpmv *PathStats_FieldPathMapValue) CompareWith(source *PathStats) (int, bool) {
	switch fpmv.selector {
	case PathStats_FieldPathSelectorHopStats:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpmv.selector))
	}
}

func (fpmv *PathStats_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*PathStats))
}

type PathStats_FieldSubPathValue struct {
	PathStats_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ PathStats_FieldPathValue = (*PathStats_FieldSubPathValue)(nil)

func (fpvs *PathStats_FieldSubPathValue) AsPathsPathValue() (common.Path_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Path_FieldPathValue)
	return res, ok
}

func (fpvs *PathStats_FieldSubPathValue) SetTo(target **PathStats) {
	if *target == nil {
		*target = new(PathStats)
	}
	switch fpvs.Selector() {
	case PathStats_FieldPathSelectorPaths:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpvs.Selector()))
	}
}

func (fpvs *PathStats_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PathStats)
	fpvs.SetTo(&typedObject)
}

func (fpvs *PathStats_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *PathStats_FieldSubPathValue) CompareWith(source *PathStats) (int, bool) {
	switch fpvs.Selector() {
	case PathStats_FieldPathSelectorPaths:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpvs.Selector()))
	}
}

func (fpvs *PathStats_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*PathStats))
}

// PathStats_FieldPathArrayItemValue allows storing single item in Path-specific values for PathStats according to their type
// Present only for array (repeated) types.
type PathStats_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PathStats_FieldPath
	ContainsValue(*PathStats) bool
}

// ParsePathStats_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePathStats_FieldPathArrayItemValue(pathStr, valueStr string) (PathStats_FieldPathArrayItemValue, error) {
	fp, err := ParsePathStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PathStats field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PathStats_FieldPathArrayItemValue), nil
}

func MustParsePathStats_FieldPathArrayItemValue(pathStr, valueStr string) PathStats_FieldPathArrayItemValue {
	fpaiv, err := ParsePathStats_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PathStats_FieldTerminalPathArrayItemValue struct {
	PathStats_FieldTerminalPath
	value interface{}
}

var _ PathStats_FieldPathArrayItemValue = (*PathStats_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PathStats as interface{}
func (fpaiv *PathStats_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *PathStats_FieldTerminalPathArrayItemValue) AsPathsItemValue() (*common.Path, bool) {
	res, ok := fpaiv.value.(*common.Path)
	return res, ok
}

func (fpaiv *PathStats_FieldTerminalPathArrayItemValue) GetSingle(source *PathStats) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PathStats_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PathStats))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PathStats'
func (fpaiv *PathStats_FieldTerminalPathArrayItemValue) ContainsValue(source *PathStats) bool {
	slice := fpaiv.PathStats_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type PathStats_FieldSubPathArrayItemValue struct {
	PathStats_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *PathStats_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *PathStats_FieldSubPathArrayItemValue) AsPathsPathItemValue() (common.Path_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Path_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PathStats'
func (fpaivs *PathStats_FieldSubPathArrayItemValue) ContainsValue(source *PathStats) bool {
	switch fpaivs.Selector() {
	case PathStats_FieldPathSelectorPaths:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for PathStats: %d", fpaivs.Selector()))
	}
}

// PathStats_FieldPathArrayOfValues allows storing slice of values for PathStats fields according to their type
type PathStats_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PathStats_FieldPath
}

func ParsePathStats_FieldPathArrayOfValues(pathStr, valuesStr string) (PathStats_FieldPathArrayOfValues, error) {
	fp, err := ParsePathStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PathStats field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PathStats_FieldPathArrayOfValues), nil
}

func MustParsePathStats_FieldPathArrayOfValues(pathStr, valuesStr string) PathStats_FieldPathArrayOfValues {
	fpaov, err := ParsePathStats_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PathStats_FieldTerminalPathArrayOfValues struct {
	PathStats_FieldTerminalPath
	values interface{}
}

var _ PathStats_FieldPathArrayOfValues = (*PathStats_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PathStats_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PathStats_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case PathStats_FieldPathSelectorPaths:
		for _, v := range fpaov.values.([][]*common.Path) {
			values = append(values, v)
		}
	case PathStats_FieldPathSelectorHopStats:
		for _, v := range fpaov.values.([]map[string]*common.HopStat) {
			values = append(values, v)
		}
	case PathStats_FieldPathSelectorTraceReason:
		for _, v := range fpaov.values.([]common.TraceReason) {
			values = append(values, v)
		}
	case PathStats_FieldPathSelectorTraceReasonDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PathStats_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *PathStats_FieldTerminalPathArrayOfValues) AsPathsArrayOfValues() ([][]*common.Path, bool) {
	res, ok := fpaov.values.([][]*common.Path)
	return res, ok
}
func (fpaov *PathStats_FieldTerminalPathArrayOfValues) AsHopStatsArrayOfValues() ([]map[string]*common.HopStat, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopStat)
	return res, ok
}
func (fpaov *PathStats_FieldTerminalPathArrayOfValues) AsTraceReasonArrayOfValues() ([]common.TraceReason, bool) {
	res, ok := fpaov.values.([]common.TraceReason)
	return res, ok
}
func (fpaov *PathStats_FieldTerminalPathArrayOfValues) AsTraceReasonDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type PathStats_FieldPathMapArrayOfValues struct {
	PathStats_FieldPathMap
	values interface{}
}

var _ PathStats_FieldPathArrayOfValues = (*PathStats_FieldPathMapArrayOfValues)(nil)

func (fpmaov *PathStats_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case PathStats_FieldPathSelectorHopStats:
		for _, v := range fpmaov.values.([]*common.HopStat) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *PathStats_FieldPathMapArrayOfValues) AsHopStatsArrayOfElementValues() ([]*common.HopStat, bool) {
	res, ok := fpmaov.values.([]*common.HopStat)
	return res, ok
}

type PathStats_FieldSubPathArrayOfValues struct {
	PathStats_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ PathStats_FieldPathArrayOfValues = (*PathStats_FieldSubPathArrayOfValues)(nil)

func (fpsaov *PathStats_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *PathStats_FieldSubPathArrayOfValues) AsPathsPathArrayOfValues() (common.Path_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Path_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetHopReportsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetHopReportsRequest_FieldPathSelector
	Get(source *GetHopReportsRequest) []interface{}
	GetSingle(source *GetHopReportsRequest) (interface{}, bool)
	ClearValue(item *GetHopReportsRequest)

	// Those methods build corresponding GetHopReportsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetHopReportsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetHopReportsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetHopReportsRequest_FieldPathArrayItemValue
}

type GetHopReportsRequest_FieldPathSelector int32

const (
	GetHopReportsRequest_FieldPathSelectorProbe     GetHopReportsRequest_FieldPathSelector = 0
	GetHopReportsRequest_FieldPathSelectorTarget    GetHopReportsRequest_FieldPathSelector = 1
	GetHopReportsRequest_FieldPathSelectorInterval  GetHopReportsRequest_FieldPathSelector = 2
	GetHopReportsRequest_FieldPathSelectorPageSize  GetHopReportsRequest_FieldPathSelector = 3
	GetHopReportsRequest_FieldPathSelectorPageToken GetHopReportsRequest_FieldPathSelector = 4
)

func (s GetHopReportsRequest_FieldPathSelector) String() string {
	switch s {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		return "probe"
	case GetHopReportsRequest_FieldPathSelectorTarget:
		return "target"
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return "interval"
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", s))
	}
}

func BuildGetHopReportsRequest_FieldPath(fp gotenobject.RawFieldPath) (GetHopReportsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetHopReportsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorProbe}, nil
		case "target":
			return &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorTarget}, nil
		case "interval":
			return &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetHopReportsRequest_FieldSubPath{selector: GetHopReportsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetHopReportsRequest", fp)
}

func ParseGetHopReportsRequest_FieldPath(rawField string) (GetHopReportsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetHopReportsRequest_FieldPath(fp)
}

func MustParseGetHopReportsRequest_FieldPath(rawField string) GetHopReportsRequest_FieldPath {
	fp, err := ParseGetHopReportsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetHopReportsRequest_FieldTerminalPath struct {
	selector GetHopReportsRequest_FieldPathSelector
}

var _ GetHopReportsRequest_FieldPath = (*GetHopReportsRequest_FieldTerminalPath)(nil)

func (fp *GetHopReportsRequest_FieldTerminalPath) Selector() GetHopReportsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetHopReportsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetHopReportsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetHopReportsRequest
func (fp *GetHopReportsRequest_FieldTerminalPath) Get(source *GetHopReportsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetHopReportsRequest_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case GetHopReportsRequest_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case GetHopReportsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case GetHopReportsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case GetHopReportsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetHopReportsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetHopReportsRequest))
}

// GetSingle returns value pointed by specific field of from source GetHopReportsRequest
func (fp *GetHopReportsRequest_FieldTerminalPath) GetSingle(source *GetHopReportsRequest) (interface{}, bool) {
	switch fp.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case GetHopReportsRequest_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case GetHopReportsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
	}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetHopReportsRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetHopReportsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case GetHopReportsRequest_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return (*common.TimeInterval)(nil)
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
	}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) ClearValue(item *GetHopReportsRequest) {
	if item != nil {
		switch fp.selector {
		case GetHopReportsRequest_FieldPathSelectorProbe:
			item.Probe = nil
		case GetHopReportsRequest_FieldPathSelectorTarget:
			item.Target = nil
		case GetHopReportsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case GetHopReportsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case GetHopReportsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
		}
	}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetHopReportsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetHopReportsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetHopReportsRequest_FieldPathSelectorProbe ||
		fp.selector == GetHopReportsRequest_FieldPathSelectorTarget ||
		fp.selector == GetHopReportsRequest_FieldPathSelectorPageSize ||
		fp.selector == GetHopReportsRequest_FieldPathSelectorPageToken
}

func (fp *GetHopReportsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithIValue(value interface{}) GetHopReportsRequest_FieldPathValue {
	switch fp.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		return &GetHopReportsRequest_FieldTerminalPathValue{GetHopReportsRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case GetHopReportsRequest_FieldPathSelectorTarget:
		return &GetHopReportsRequest_FieldTerminalPathValue{GetHopReportsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return &GetHopReportsRequest_FieldTerminalPathValue{GetHopReportsRequest_FieldTerminalPath: *fp, value: value.(*common.TimeInterval)}
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		return &GetHopReportsRequest_FieldTerminalPathValue{GetHopReportsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		return &GetHopReportsRequest_FieldTerminalPathValue{GetHopReportsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
	}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetHopReportsRequest_FieldPathArrayOfValues {
	fpaov := &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		return &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case GetHopReportsRequest_FieldPathSelectorTarget:
		return &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp, values: values.([]*common.TimeInterval)}
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		return &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		return &GetHopReportsRequest_FieldTerminalPathArrayOfValues{GetHopReportsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetHopReportsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fp.selector))
	}
}

func (fp *GetHopReportsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type GetHopReportsRequest_FieldSubPath struct {
	selector GetHopReportsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetHopReportsRequest_FieldPath = (*GetHopReportsRequest_FieldSubPath)(nil)

func (fps *GetHopReportsRequest_FieldSubPath) Selector() GetHopReportsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *GetHopReportsRequest_FieldSubPath) AsIntervalSubPath() (common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetHopReportsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetHopReportsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetHopReportsRequest
func (fps *GetHopReportsRequest_FieldSubPath) Get(source *GetHopReportsRequest) (values []interface{}) {
	if asTimeIntervalFieldPath, ok := fps.AsIntervalSubPath(); ok {
		values = append(values, asTimeIntervalFieldPath.Get(source.GetInterval())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fps.selector))
	}
	return
}

func (fps *GetHopReportsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetHopReportsRequest))
}

// GetSingle returns value of selected field from source GetHopReportsRequest
func (fps *GetHopReportsRequest_FieldSubPath) GetSingle(source *GetHopReportsRequest) (interface{}, bool) {
	switch fps.selector {
	case GetHopReportsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fps.selector))
	}
}

func (fps *GetHopReportsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetHopReportsRequest))
}

// GetDefault returns a default value of the field type
func (fps *GetHopReportsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetHopReportsRequest_FieldSubPath) ClearValue(item *GetHopReportsRequest) {
	if item != nil {
		switch fps.selector {
		case GetHopReportsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fps.selector))
		}
	}
}

func (fps *GetHopReportsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetHopReportsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetHopReportsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetHopReportsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetHopReportsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetHopReportsRequest_FieldSubPath) WithIValue(value interface{}) GetHopReportsRequest_FieldPathValue {
	return &GetHopReportsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetHopReportsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetHopReportsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) GetHopReportsRequest_FieldPathArrayOfValues {
	return &GetHopReportsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetHopReportsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetHopReportsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) GetHopReportsRequest_FieldPathArrayItemValue {
	return &GetHopReportsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetHopReportsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetHopReportsRequest_FieldPathValue allows storing values for GetHopReportsRequest fields according to their type
type GetHopReportsRequest_FieldPathValue interface {
	GetHopReportsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetHopReportsRequest)
	CompareWith(*GetHopReportsRequest) (cmp int, comparable bool)
}

func ParseGetHopReportsRequest_FieldPathValue(pathStr, valueStr string) (GetHopReportsRequest_FieldPathValue, error) {
	fp, err := ParseGetHopReportsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetHopReportsRequest_FieldPathValue), nil
}

func MustParseGetHopReportsRequest_FieldPathValue(pathStr, valueStr string) GetHopReportsRequest_FieldPathValue {
	fpv, err := ParseGetHopReportsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetHopReportsRequest_FieldTerminalPathValue struct {
	GetHopReportsRequest_FieldTerminalPath
	value interface{}
}

var _ GetHopReportsRequest_FieldPathValue = (*GetHopReportsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetHopReportsRequest' as interface{}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) AsIntervalValue() (*common.TimeInterval, bool) {
	res, ok := fpv.value.(*common.TimeInterval)
	return res, ok
}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetHopReportsRequest
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) SetTo(target **GetHopReportsRequest) {
	if *target == nil {
		*target = new(GetHopReportsRequest)
	}
	switch fpv.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case GetHopReportsRequest_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case GetHopReportsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*common.TimeInterval)
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fpv.selector))
	}
}

func (fpv *GetHopReportsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHopReportsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHopReportsRequest_FieldTerminalPathValue' with the value under path in 'GetHopReportsRequest'.
func (fpv *GetHopReportsRequest_FieldTerminalPathValue) CompareWith(source *GetHopReportsRequest) (int, bool) {
	switch fpv.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHopReportsRequest_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return 0, false
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fpv.selector))
	}
}

func (fpv *GetHopReportsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetHopReportsRequest))
}

type GetHopReportsRequest_FieldSubPathValue struct {
	GetHopReportsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetHopReportsRequest_FieldPathValue = (*GetHopReportsRequest_FieldSubPathValue)(nil)

func (fpvs *GetHopReportsRequest_FieldSubPathValue) AsIntervalPathValue() (common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *GetHopReportsRequest_FieldSubPathValue) SetTo(target **GetHopReportsRequest) {
	if *target == nil {
		*target = new(GetHopReportsRequest)
	}
	switch fpvs.Selector() {
	case GetHopReportsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHopReportsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHopReportsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetHopReportsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetHopReportsRequest_FieldSubPathValue) CompareWith(source *GetHopReportsRequest) (int, bool) {
	switch fpvs.Selector() {
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHopReportsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetHopReportsRequest))
}

// GetHopReportsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetHopReportsRequest according to their type
// Present only for array (repeated) types.
type GetHopReportsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetHopReportsRequest_FieldPath
	ContainsValue(*GetHopReportsRequest) bool
}

// ParseGetHopReportsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetHopReportsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetHopReportsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetHopReportsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetHopReportsRequest_FieldPathArrayItemValue), nil
}

func MustParseGetHopReportsRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetHopReportsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetHopReportsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetHopReportsRequest_FieldTerminalPathArrayItemValue struct {
	GetHopReportsRequest_FieldTerminalPath
	value interface{}
}

var _ GetHopReportsRequest_FieldPathArrayItemValue = (*GetHopReportsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetHopReportsRequest as interface{}
func (fpaiv *GetHopReportsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetHopReportsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetHopReportsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetHopReportsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetHopReportsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHopReportsRequest'
func (fpaiv *GetHopReportsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetHopReportsRequest) bool {
	slice := fpaiv.GetHopReportsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetHopReportsRequest_FieldSubPathArrayItemValue struct {
	GetHopReportsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetHopReportsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetHopReportsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHopReportsRequest'
func (fpaivs *GetHopReportsRequest_FieldSubPathArrayItemValue) ContainsValue(source *GetHopReportsRequest) bool {
	switch fpaivs.Selector() {
	case GetHopReportsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsRequest: %d", fpaivs.Selector()))
	}
}

// GetHopReportsRequest_FieldPathArrayOfValues allows storing slice of values for GetHopReportsRequest fields according to their type
type GetHopReportsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetHopReportsRequest_FieldPath
}

func ParseGetHopReportsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetHopReportsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetHopReportsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetHopReportsRequest_FieldPathArrayOfValues), nil
}

func MustParseGetHopReportsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetHopReportsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetHopReportsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetHopReportsRequest_FieldTerminalPathArrayOfValues struct {
	GetHopReportsRequest_FieldTerminalPath
	values interface{}
}

var _ GetHopReportsRequest_FieldPathArrayOfValues = (*GetHopReportsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetHopReportsRequest_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case GetHopReportsRequest_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case GetHopReportsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*common.TimeInterval) {
			values = append(values, v)
		}
	case GetHopReportsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case GetHopReportsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*common.TimeInterval)
	return res, ok
}
func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *GetHopReportsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetHopReportsRequest_FieldSubPathArrayOfValues struct {
	GetHopReportsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetHopReportsRequest_FieldPathArrayOfValues = (*GetHopReportsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetHopReportsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetHopReportsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type HopsReport_FieldPath interface {
	gotenobject.FieldPath
	Selector() HopsReport_FieldPathSelector
	Get(source *HopsReport) []interface{}
	GetSingle(source *HopsReport) (interface{}, bool)
	ClearValue(item *HopsReport)

	// Those methods build corresponding HopsReport_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) HopsReport_FieldPathValue
	WithIArrayOfValues(values interface{}) HopsReport_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) HopsReport_FieldPathArrayItemValue
}

type HopsReport_FieldPathSelector int32

const (
	HopsReport_FieldPathSelectorProbe           HopsReport_FieldPathSelector = 0
	HopsReport_FieldPathSelectorTarget          HopsReport_FieldPathSelector = 1
	HopsReport_FieldPathSelectorTargetIpAddress HopsReport_FieldPathSelector = 2
	HopsReport_FieldPathSelectorIpVersion       HopsReport_FieldPathSelector = 3
	HopsReport_FieldPathSelectorMode            HopsReport_FieldPathSelector = 4
	HopsReport_FieldPathSelectorTraceType       HopsReport_FieldPathSelector = 5
	HopsReport_FieldPathSelectorPathStats       HopsReport_FieldPathSelector = 6
)

func (s HopsReport_FieldPathSelector) String() string {
	switch s {
	case HopsReport_FieldPathSelectorProbe:
		return "probe"
	case HopsReport_FieldPathSelectorTarget:
		return "target"
	case HopsReport_FieldPathSelectorTargetIpAddress:
		return "target_ip_address"
	case HopsReport_FieldPathSelectorIpVersion:
		return "ip_version"
	case HopsReport_FieldPathSelectorMode:
		return "mode"
	case HopsReport_FieldPathSelectorTraceType:
		return "trace_type"
	case HopsReport_FieldPathSelectorPathStats:
		return "path_stats"
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", s))
	}
}

func BuildHopsReport_FieldPath(fp gotenobject.RawFieldPath) (HopsReport_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object HopsReport")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorProbe}, nil
		case "target":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTarget}, nil
		case "target_ip_address", "targetIpAddress", "target-ip-address":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTargetIpAddress}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorIpVersion}, nil
		case "mode":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorMode}, nil
		case "trace_type", "traceType", "trace-type":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTraceType}, nil
		case "path_stats", "pathStats", "path-stats":
			return &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorPathStats}, nil
		}
	} else {
		switch fp[0] {
		case "path_stats", "pathStats", "path-stats":
			if subpath, err := BuildPathStats_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &HopsReport_FieldSubPath{selector: HopsReport_FieldPathSelectorPathStats, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object HopsReport", fp)
}

func ParseHopsReport_FieldPath(rawField string) (HopsReport_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildHopsReport_FieldPath(fp)
}

func MustParseHopsReport_FieldPath(rawField string) HopsReport_FieldPath {
	fp, err := ParseHopsReport_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type HopsReport_FieldTerminalPath struct {
	selector HopsReport_FieldPathSelector
}

var _ HopsReport_FieldPath = (*HopsReport_FieldTerminalPath)(nil)

func (fp *HopsReport_FieldTerminalPath) Selector() HopsReport_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *HopsReport_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *HopsReport_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source HopsReport
func (fp *HopsReport_FieldTerminalPath) Get(source *HopsReport) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case HopsReport_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case HopsReport_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case HopsReport_FieldPathSelectorTargetIpAddress:
			values = append(values, source.TargetIpAddress)
		case HopsReport_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case HopsReport_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case HopsReport_FieldPathSelectorTraceType:
			values = append(values, source.TraceType)
		case HopsReport_FieldPathSelectorPathStats:
			for _, value := range source.GetPathStats() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
		}
	}
	return
}

func (fp *HopsReport_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*HopsReport))
}

// GetSingle returns value pointed by specific field of from source HopsReport
func (fp *HopsReport_FieldTerminalPath) GetSingle(source *HopsReport) (interface{}, bool) {
	switch fp.selector {
	case HopsReport_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case HopsReport_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case HopsReport_FieldPathSelectorTargetIpAddress:
		return source.GetTargetIpAddress(), source != nil
	case HopsReport_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case HopsReport_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case HopsReport_FieldPathSelectorTraceType:
		return source.GetTraceType(), source != nil
	case HopsReport_FieldPathSelectorPathStats:
		res := source.GetPathStats()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
	}
}

func (fp *HopsReport_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*HopsReport))
}

// GetDefault returns a default value of the field type
func (fp *HopsReport_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case HopsReport_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case HopsReport_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case HopsReport_FieldPathSelectorTargetIpAddress:
		return ""
	case HopsReport_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case HopsReport_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case HopsReport_FieldPathSelectorTraceType:
		return common.TraceType_UNDEFINED_TYPE
	case HopsReport_FieldPathSelectorPathStats:
		return ([]*PathStats)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
	}
}

func (fp *HopsReport_FieldTerminalPath) ClearValue(item *HopsReport) {
	if item != nil {
		switch fp.selector {
		case HopsReport_FieldPathSelectorProbe:
			item.Probe = nil
		case HopsReport_FieldPathSelectorTarget:
			item.Target = nil
		case HopsReport_FieldPathSelectorTargetIpAddress:
			item.TargetIpAddress = ""
		case HopsReport_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case HopsReport_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case HopsReport_FieldPathSelectorTraceType:
			item.TraceType = common.TraceType_UNDEFINED_TYPE
		case HopsReport_FieldPathSelectorPathStats:
			item.PathStats = nil
		default:
			panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
		}
	}
}

func (fp *HopsReport_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*HopsReport))
}

// IsLeaf - whether field path is holds simple value
func (fp *HopsReport_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == HopsReport_FieldPathSelectorProbe ||
		fp.selector == HopsReport_FieldPathSelectorTarget ||
		fp.selector == HopsReport_FieldPathSelectorTargetIpAddress ||
		fp.selector == HopsReport_FieldPathSelectorIpVersion ||
		fp.selector == HopsReport_FieldPathSelectorMode ||
		fp.selector == HopsReport_FieldPathSelectorTraceType
}

func (fp *HopsReport_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *HopsReport_FieldTerminalPath) WithIValue(value interface{}) HopsReport_FieldPathValue {
	switch fp.selector {
	case HopsReport_FieldPathSelectorProbe:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case HopsReport_FieldPathSelectorTarget:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case HopsReport_FieldPathSelectorTargetIpAddress:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(string)}
	case HopsReport_FieldPathSelectorIpVersion:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case HopsReport_FieldPathSelectorMode:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case HopsReport_FieldPathSelectorTraceType:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.(common.TraceType)}
	case HopsReport_FieldPathSelectorPathStats:
		return &HopsReport_FieldTerminalPathValue{HopsReport_FieldTerminalPath: *fp, value: value.([]*PathStats)}
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
	}
}

func (fp *HopsReport_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *HopsReport_FieldTerminalPath) WithIArrayOfValues(values interface{}) HopsReport_FieldPathArrayOfValues {
	fpaov := &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp}
	switch fp.selector {
	case HopsReport_FieldPathSelectorProbe:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case HopsReport_FieldPathSelectorTarget:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case HopsReport_FieldPathSelectorTargetIpAddress:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]string)}
	case HopsReport_FieldPathSelectorIpVersion:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case HopsReport_FieldPathSelectorMode:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case HopsReport_FieldPathSelectorTraceType:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([]common.TraceType)}
	case HopsReport_FieldPathSelectorPathStats:
		return &HopsReport_FieldTerminalPathArrayOfValues{HopsReport_FieldTerminalPath: *fp, values: values.([][]*PathStats)}
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
	}
	return fpaov
}

func (fp *HopsReport_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *HopsReport_FieldTerminalPath) WithIArrayItemValue(value interface{}) HopsReport_FieldPathArrayItemValue {
	switch fp.selector {
	case HopsReport_FieldPathSelectorPathStats:
		return &HopsReport_FieldTerminalPathArrayItemValue{HopsReport_FieldTerminalPath: *fp, value: value.(*PathStats)}
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fp.selector))
	}
}

func (fp *HopsReport_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type HopsReport_FieldSubPath struct {
	selector HopsReport_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ HopsReport_FieldPath = (*HopsReport_FieldSubPath)(nil)

func (fps *HopsReport_FieldSubPath) Selector() HopsReport_FieldPathSelector {
	return fps.selector
}
func (fps *HopsReport_FieldSubPath) AsPathStatsSubPath() (PathStats_FieldPath, bool) {
	res, ok := fps.subPath.(PathStats_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *HopsReport_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *HopsReport_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source HopsReport
func (fps *HopsReport_FieldSubPath) Get(source *HopsReport) (values []interface{}) {
	if asPathStatsFieldPath, ok := fps.AsPathStatsSubPath(); ok {
		for _, item := range source.GetPathStats() {
			values = append(values, asPathStatsFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fps.selector))
	}
	return
}

func (fps *HopsReport_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*HopsReport))
}

// GetSingle returns value of selected field from source HopsReport
func (fps *HopsReport_FieldSubPath) GetSingle(source *HopsReport) (interface{}, bool) {
	switch fps.selector {
	case HopsReport_FieldPathSelectorPathStats:
		if len(source.GetPathStats()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPathStats()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fps.selector))
	}
}

func (fps *HopsReport_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*HopsReport))
}

// GetDefault returns a default value of the field type
func (fps *HopsReport_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *HopsReport_FieldSubPath) ClearValue(item *HopsReport) {
	if item != nil {
		switch fps.selector {
		case HopsReport_FieldPathSelectorPathStats:
			for _, subItem := range item.PathStats {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fps.selector))
		}
	}
}

func (fps *HopsReport_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*HopsReport))
}

// IsLeaf - whether field path is holds simple value
func (fps *HopsReport_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *HopsReport_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&HopsReport_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *HopsReport_FieldSubPath) WithIValue(value interface{}) HopsReport_FieldPathValue {
	return &HopsReport_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *HopsReport_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *HopsReport_FieldSubPath) WithIArrayOfValues(values interface{}) HopsReport_FieldPathArrayOfValues {
	return &HopsReport_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *HopsReport_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *HopsReport_FieldSubPath) WithIArrayItemValue(value interface{}) HopsReport_FieldPathArrayItemValue {
	return &HopsReport_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *HopsReport_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// HopsReport_FieldPathValue allows storing values for HopsReport fields according to their type
type HopsReport_FieldPathValue interface {
	HopsReport_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **HopsReport)
	CompareWith(*HopsReport) (cmp int, comparable bool)
}

func ParseHopsReport_FieldPathValue(pathStr, valueStr string) (HopsReport_FieldPathValue, error) {
	fp, err := ParseHopsReport_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HopsReport field path value from %s: %v", valueStr, err)
	}
	return fpv.(HopsReport_FieldPathValue), nil
}

func MustParseHopsReport_FieldPathValue(pathStr, valueStr string) HopsReport_FieldPathValue {
	fpv, err := ParseHopsReport_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type HopsReport_FieldTerminalPathValue struct {
	HopsReport_FieldTerminalPath
	value interface{}
}

var _ HopsReport_FieldPathValue = (*HopsReport_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'HopsReport' as interface{}
func (fpv *HopsReport_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *HopsReport_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsTargetIpAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsTraceTypeValue() (common.TraceType, bool) {
	res, ok := fpv.value.(common.TraceType)
	return res, ok
}
func (fpv *HopsReport_FieldTerminalPathValue) AsPathStatsValue() ([]*PathStats, bool) {
	res, ok := fpv.value.([]*PathStats)
	return res, ok
}

// SetTo stores value for selected field for object HopsReport
func (fpv *HopsReport_FieldTerminalPathValue) SetTo(target **HopsReport) {
	if *target == nil {
		*target = new(HopsReport)
	}
	switch fpv.selector {
	case HopsReport_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case HopsReport_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case HopsReport_FieldPathSelectorTargetIpAddress:
		(*target).TargetIpAddress = fpv.value.(string)
	case HopsReport_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case HopsReport_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case HopsReport_FieldPathSelectorTraceType:
		(*target).TraceType = fpv.value.(common.TraceType)
	case HopsReport_FieldPathSelectorPathStats:
		(*target).PathStats = fpv.value.([]*PathStats)
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fpv.selector))
	}
}

func (fpv *HopsReport_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*HopsReport)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'HopsReport_FieldTerminalPathValue' with the value under path in 'HopsReport'.
func (fpv *HopsReport_FieldTerminalPathValue) CompareWith(source *HopsReport) (int, bool) {
	switch fpv.selector {
	case HopsReport_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorTargetIpAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetIpAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorTraceType:
		leftValue := fpv.value.(common.TraceType)
		rightValue := source.GetTraceType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case HopsReport_FieldPathSelectorPathStats:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fpv.selector))
	}
}

func (fpv *HopsReport_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*HopsReport))
}

type HopsReport_FieldSubPathValue struct {
	HopsReport_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ HopsReport_FieldPathValue = (*HopsReport_FieldSubPathValue)(nil)

func (fpvs *HopsReport_FieldSubPathValue) AsPathStatsPathValue() (PathStats_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PathStats_FieldPathValue)
	return res, ok
}

func (fpvs *HopsReport_FieldSubPathValue) SetTo(target **HopsReport) {
	if *target == nil {
		*target = new(HopsReport)
	}
	switch fpvs.Selector() {
	case HopsReport_FieldPathSelectorPathStats:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fpvs.Selector()))
	}
}

func (fpvs *HopsReport_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*HopsReport)
	fpvs.SetTo(&typedObject)
}

func (fpvs *HopsReport_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *HopsReport_FieldSubPathValue) CompareWith(source *HopsReport) (int, bool) {
	switch fpvs.Selector() {
	case HopsReport_FieldPathSelectorPathStats:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fpvs.Selector()))
	}
}

func (fpvs *HopsReport_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*HopsReport))
}

// HopsReport_FieldPathArrayItemValue allows storing single item in Path-specific values for HopsReport according to their type
// Present only for array (repeated) types.
type HopsReport_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	HopsReport_FieldPath
	ContainsValue(*HopsReport) bool
}

// ParseHopsReport_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseHopsReport_FieldPathArrayItemValue(pathStr, valueStr string) (HopsReport_FieldPathArrayItemValue, error) {
	fp, err := ParseHopsReport_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HopsReport field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(HopsReport_FieldPathArrayItemValue), nil
}

func MustParseHopsReport_FieldPathArrayItemValue(pathStr, valueStr string) HopsReport_FieldPathArrayItemValue {
	fpaiv, err := ParseHopsReport_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type HopsReport_FieldTerminalPathArrayItemValue struct {
	HopsReport_FieldTerminalPath
	value interface{}
}

var _ HopsReport_FieldPathArrayItemValue = (*HopsReport_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object HopsReport as interface{}
func (fpaiv *HopsReport_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *HopsReport_FieldTerminalPathArrayItemValue) AsPathStatsItemValue() (*PathStats, bool) {
	res, ok := fpaiv.value.(*PathStats)
	return res, ok
}

func (fpaiv *HopsReport_FieldTerminalPathArrayItemValue) GetSingle(source *HopsReport) (interface{}, bool) {
	return nil, false
}

func (fpaiv *HopsReport_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*HopsReport))
}

// Contains returns a boolean indicating if value that is being held is present in given 'HopsReport'
func (fpaiv *HopsReport_FieldTerminalPathArrayItemValue) ContainsValue(source *HopsReport) bool {
	slice := fpaiv.HopsReport_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type HopsReport_FieldSubPathArrayItemValue struct {
	HopsReport_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *HopsReport_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *HopsReport_FieldSubPathArrayItemValue) AsPathStatsPathItemValue() (PathStats_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PathStats_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'HopsReport'
func (fpaivs *HopsReport_FieldSubPathArrayItemValue) ContainsValue(source *HopsReport) bool {
	switch fpaivs.Selector() {
	case HopsReport_FieldPathSelectorPathStats:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for HopsReport: %d", fpaivs.Selector()))
	}
}

// HopsReport_FieldPathArrayOfValues allows storing slice of values for HopsReport fields according to their type
type HopsReport_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	HopsReport_FieldPath
}

func ParseHopsReport_FieldPathArrayOfValues(pathStr, valuesStr string) (HopsReport_FieldPathArrayOfValues, error) {
	fp, err := ParseHopsReport_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HopsReport field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(HopsReport_FieldPathArrayOfValues), nil
}

func MustParseHopsReport_FieldPathArrayOfValues(pathStr, valuesStr string) HopsReport_FieldPathArrayOfValues {
	fpaov, err := ParseHopsReport_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type HopsReport_FieldTerminalPathArrayOfValues struct {
	HopsReport_FieldTerminalPath
	values interface{}
}

var _ HopsReport_FieldPathArrayOfValues = (*HopsReport_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case HopsReport_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorTargetIpAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorTraceType:
		for _, v := range fpaov.values.([]common.TraceType) {
			values = append(values, v)
		}
	case HopsReport_FieldPathSelectorPathStats:
		for _, v := range fpaov.values.([][]*PathStats) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsTargetIpAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsTraceTypeArrayOfValues() ([]common.TraceType, bool) {
	res, ok := fpaov.values.([]common.TraceType)
	return res, ok
}
func (fpaov *HopsReport_FieldTerminalPathArrayOfValues) AsPathStatsArrayOfValues() ([][]*PathStats, bool) {
	res, ok := fpaov.values.([][]*PathStats)
	return res, ok
}

type HopsReport_FieldSubPathArrayOfValues struct {
	HopsReport_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ HopsReport_FieldPathArrayOfValues = (*HopsReport_FieldSubPathArrayOfValues)(nil)

func (fpsaov *HopsReport_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *HopsReport_FieldSubPathArrayOfValues) AsPathStatsPathArrayOfValues() (PathStats_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PathStats_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetHopReportsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetHopReportsResponse_FieldPathSelector
	Get(source *GetHopReportsResponse) []interface{}
	GetSingle(source *GetHopReportsResponse) (interface{}, bool)
	ClearValue(item *GetHopReportsResponse)

	// Those methods build corresponding GetHopReportsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetHopReportsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) GetHopReportsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetHopReportsResponse_FieldPathArrayItemValue
}

type GetHopReportsResponse_FieldPathSelector int32

const (
	GetHopReportsResponse_FieldPathSelectorHopsReport    GetHopReportsResponse_FieldPathSelector = 0
	GetHopReportsResponse_FieldPathSelectorHopInfo       GetHopReportsResponse_FieldPathSelector = 1
	GetHopReportsResponse_FieldPathSelectorNextPageToken GetHopReportsResponse_FieldPathSelector = 2
)

func (s GetHopReportsResponse_FieldPathSelector) String() string {
	switch s {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return "hops_report"
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return "hop_info"
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", s))
	}
}

func BuildGetHopReportsResponse_FieldPath(fp gotenobject.RawFieldPath) (GetHopReportsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetHopReportsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "hops_report", "hopsReport", "hops-report":
			return &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopsReport}, nil
		case "hop_info", "hopInfo", "hop-info":
			return &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopInfo}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "hops_report", "hopsReport", "hops-report":
			if subpath, err := BuildHopsReport_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &GetHopReportsResponse_FieldSubPath{selector: GetHopReportsResponse_FieldPathSelectorHopsReport, subPath: subpath}, nil
			}
		case "hop_info", "hopInfo", "hop-info":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object GetHopReportsResponse)", fp)
			}
			return &GetHopReportsResponse_FieldPathMap{selector: GetHopReportsResponse_FieldPathSelectorHopInfo, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetHopReportsResponse", fp)
}

func ParseGetHopReportsResponse_FieldPath(rawField string) (GetHopReportsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetHopReportsResponse_FieldPath(fp)
}

func MustParseGetHopReportsResponse_FieldPath(rawField string) GetHopReportsResponse_FieldPath {
	fp, err := ParseGetHopReportsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetHopReportsResponse_FieldTerminalPath struct {
	selector GetHopReportsResponse_FieldPathSelector
}

var _ GetHopReportsResponse_FieldPath = (*GetHopReportsResponse_FieldTerminalPath)(nil)

func (fp *GetHopReportsResponse_FieldTerminalPath) Selector() GetHopReportsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetHopReportsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetHopReportsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetHopReportsResponse
func (fp *GetHopReportsResponse_FieldTerminalPath) Get(source *GetHopReportsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetHopReportsResponse_FieldPathSelectorHopsReport:
			for _, value := range source.GetHopsReport() {
				values = append(values, value)
			}
		case GetHopReportsResponse_FieldPathSelectorHopInfo:
			if source.HopInfo != nil {
				values = append(values, source.HopInfo)
			}
		case GetHopReportsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *GetHopReportsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetHopReportsResponse))
}

// GetSingle returns value pointed by specific field of from source GetHopReportsResponse
func (fp *GetHopReportsResponse_FieldTerminalPath) GetSingle(source *GetHopReportsResponse) (interface{}, bool) {
	switch fp.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		res := source.GetHopsReport()
		return res, res != nil
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		res := source.GetHopInfo()
		return res, res != nil
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
	}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetHopReportsResponse))
}

// GetDefault returns a default value of the field type
func (fp *GetHopReportsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return ([]*HopsReport)(nil)
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return (map[string]*common.HopInfo)(nil)
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
	}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) ClearValue(item *GetHopReportsResponse) {
	if item != nil {
		switch fp.selector {
		case GetHopReportsResponse_FieldPathSelectorHopsReport:
			item.HopsReport = nil
		case GetHopReportsResponse_FieldPathSelectorHopInfo:
			item.HopInfo = nil
		case GetHopReportsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
		}
	}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetHopReportsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetHopReportsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetHopReportsResponse_FieldPathSelectorNextPageToken
}

func (fp *GetHopReportsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithIValue(value interface{}) GetHopReportsResponse_FieldPathValue {
	switch fp.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return &GetHopReportsResponse_FieldTerminalPathValue{GetHopReportsResponse_FieldTerminalPath: *fp, value: value.([]*HopsReport)}
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return &GetHopReportsResponse_FieldTerminalPathValue{GetHopReportsResponse_FieldTerminalPath: *fp, value: value.(map[string]*common.HopInfo)}
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		return &GetHopReportsResponse_FieldTerminalPathValue{GetHopReportsResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
	}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetHopReportsResponse_FieldPathArrayOfValues {
	fpaov := &GetHopReportsResponse_FieldTerminalPathArrayOfValues{GetHopReportsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return &GetHopReportsResponse_FieldTerminalPathArrayOfValues{GetHopReportsResponse_FieldTerminalPath: *fp, values: values.([][]*HopsReport)}
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return &GetHopReportsResponse_FieldTerminalPathArrayOfValues{GetHopReportsResponse_FieldTerminalPath: *fp, values: values.([]map[string]*common.HopInfo)}
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		return &GetHopReportsResponse_FieldTerminalPathArrayOfValues{GetHopReportsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetHopReportsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return &GetHopReportsResponse_FieldTerminalPathArrayItemValue{GetHopReportsResponse_FieldTerminalPath: *fp, value: value.(*HopsReport)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fp.selector))
	}
}

func (fp *GetHopReportsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type GetHopReportsResponse_FieldPathMap struct {
	key      string
	selector GetHopReportsResponse_FieldPathSelector
}

var _ GetHopReportsResponse_FieldPath = (*GetHopReportsResponse_FieldPathMap)(nil)

func (fpm *GetHopReportsResponse_FieldPathMap) Selector() GetHopReportsResponse_FieldPathSelector {
	return fpm.selector
}

func (fpm *GetHopReportsResponse_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *GetHopReportsResponse_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *GetHopReportsResponse_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source GetHopReportsResponse
func (fpm *GetHopReportsResponse_FieldPathMap) Get(source *GetHopReportsResponse) (values []interface{}) {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		if value, ok := source.GetHopInfo()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
	return
}

func (fpm *GetHopReportsResponse_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*GetHopReportsResponse))
}

// GetSingle returns value by selected field map key from source GetHopReportsResponse
func (fpm *GetHopReportsResponse_FieldPathMap) GetSingle(source *GetHopReportsResponse) (interface{}, bool) {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		res, ok := source.GetHopInfo()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*GetHopReportsResponse))
}

// GetDefault returns a default value of the field type
func (fpm *GetHopReportsResponse_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		var v *common.HopInfo
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) ClearValue(item *GetHopReportsResponse) {
	if item != nil {
		switch fpm.selector {
		case GetHopReportsResponse_FieldPathSelectorHopInfo:
			delete(item.HopInfo, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
		}
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*GetHopReportsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fpm *GetHopReportsResponse_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithIValue(value interface{}) GetHopReportsResponse_FieldPathValue {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return &GetHopReportsResponse_FieldPathMapValue{GetHopReportsResponse_FieldPathMap: *fpm, value: value.(*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithIArrayOfValues(values interface{}) GetHopReportsResponse_FieldPathArrayOfValues {
	switch fpm.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return &GetHopReportsResponse_FieldPathMapArrayOfValues{GetHopReportsResponse_FieldPathMap: *fpm, values: values.([]*common.HopInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpm.selector))
	}
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithIArrayItemValue(value interface{}) GetHopReportsResponse_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *GetHopReportsResponse_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type GetHopReportsResponse_FieldSubPath struct {
	selector GetHopReportsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ GetHopReportsResponse_FieldPath = (*GetHopReportsResponse_FieldSubPath)(nil)

func (fps *GetHopReportsResponse_FieldSubPath) Selector() GetHopReportsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *GetHopReportsResponse_FieldSubPath) AsHopsReportSubPath() (HopsReport_FieldPath, bool) {
	res, ok := fps.subPath.(HopsReport_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *GetHopReportsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *GetHopReportsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source GetHopReportsResponse
func (fps *GetHopReportsResponse_FieldSubPath) Get(source *GetHopReportsResponse) (values []interface{}) {
	if asHopsReportFieldPath, ok := fps.AsHopsReportSubPath(); ok {
		for _, item := range source.GetHopsReport() {
			values = append(values, asHopsReportFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fps.selector))
	}
	return
}

func (fps *GetHopReportsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*GetHopReportsResponse))
}

// GetSingle returns value of selected field from source GetHopReportsResponse
func (fps *GetHopReportsResponse_FieldSubPath) GetSingle(source *GetHopReportsResponse) (interface{}, bool) {
	switch fps.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		if len(source.GetHopsReport()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHopsReport()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fps.selector))
	}
}

func (fps *GetHopReportsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*GetHopReportsResponse))
}

// GetDefault returns a default value of the field type
func (fps *GetHopReportsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *GetHopReportsResponse_FieldSubPath) ClearValue(item *GetHopReportsResponse) {
	if item != nil {
		switch fps.selector {
		case GetHopReportsResponse_FieldPathSelectorHopsReport:
			for _, subItem := range item.HopsReport {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fps.selector))
		}
	}
}

func (fps *GetHopReportsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*GetHopReportsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *GetHopReportsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *GetHopReportsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&GetHopReportsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *GetHopReportsResponse_FieldSubPath) WithIValue(value interface{}) GetHopReportsResponse_FieldPathValue {
	return &GetHopReportsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *GetHopReportsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *GetHopReportsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) GetHopReportsResponse_FieldPathArrayOfValues {
	return &GetHopReportsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *GetHopReportsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *GetHopReportsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) GetHopReportsResponse_FieldPathArrayItemValue {
	return &GetHopReportsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *GetHopReportsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// GetHopReportsResponse_FieldPathValue allows storing values for GetHopReportsResponse fields according to their type
type GetHopReportsResponse_FieldPathValue interface {
	GetHopReportsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetHopReportsResponse)
	CompareWith(*GetHopReportsResponse) (cmp int, comparable bool)
}

func ParseGetHopReportsResponse_FieldPathValue(pathStr, valueStr string) (GetHopReportsResponse_FieldPathValue, error) {
	fp, err := ParseGetHopReportsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetHopReportsResponse_FieldPathValue), nil
}

func MustParseGetHopReportsResponse_FieldPathValue(pathStr, valueStr string) GetHopReportsResponse_FieldPathValue {
	fpv, err := ParseGetHopReportsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetHopReportsResponse_FieldTerminalPathValue struct {
	GetHopReportsResponse_FieldTerminalPath
	value interface{}
}

var _ GetHopReportsResponse_FieldPathValue = (*GetHopReportsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetHopReportsResponse' as interface{}
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) AsHopsReportValue() ([]*HopsReport, bool) {
	res, ok := fpv.value.([]*HopsReport)
	return res, ok
}
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) AsHopInfoValue() (map[string]*common.HopInfo, bool) {
	res, ok := fpv.value.(map[string]*common.HopInfo)
	return res, ok
}
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object GetHopReportsResponse
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) SetTo(target **GetHopReportsResponse) {
	if *target == nil {
		*target = new(GetHopReportsResponse)
	}
	switch fpv.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		(*target).HopsReport = fpv.value.([]*HopsReport)
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		(*target).HopInfo = fpv.value.(map[string]*common.HopInfo)
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpv.selector))
	}
}

func (fpv *GetHopReportsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHopReportsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHopReportsResponse_FieldTerminalPathValue' with the value under path in 'GetHopReportsResponse'.
func (fpv *GetHopReportsResponse_FieldTerminalPathValue) CompareWith(source *GetHopReportsResponse) (int, bool) {
	switch fpv.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return 0, false
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return 0, false
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpv.selector))
	}
}

func (fpv *GetHopReportsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetHopReportsResponse))
}

type GetHopReportsResponse_FieldPathMapValue struct {
	GetHopReportsResponse_FieldPathMap
	value interface{}
}

var _ GetHopReportsResponse_FieldPathValue = (*GetHopReportsResponse_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in GetHopReportsResponse as interface{}
func (fpmv *GetHopReportsResponse_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *GetHopReportsResponse_FieldPathMapValue) AsHopInfoElementValue() (*common.HopInfo, bool) {
	res, ok := fpmv.value.(*common.HopInfo)
	return res, ok
}

// SetTo stores value for selected field in GetHopReportsResponse
func (fpmv *GetHopReportsResponse_FieldPathMapValue) SetTo(target **GetHopReportsResponse) {
	if *target == nil {
		*target = new(GetHopReportsResponse)
	}
	switch fpmv.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		if (*target).HopInfo == nil {
			(*target).HopInfo = make(map[string]*common.HopInfo)
		}
		(*target).HopInfo[fpmv.key] = fpmv.value.(*common.HopInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpmv.selector))
	}
}

func (fpmv *GetHopReportsResponse_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHopReportsResponse)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetHopReportsResponse_FieldPathMapValue' with the value under path in 'GetHopReportsResponse'.
func (fpmv *GetHopReportsResponse_FieldPathMapValue) CompareWith(source *GetHopReportsResponse) (int, bool) {
	switch fpmv.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpmv.selector))
	}
}

func (fpmv *GetHopReportsResponse_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*GetHopReportsResponse))
}

type GetHopReportsResponse_FieldSubPathValue struct {
	GetHopReportsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ GetHopReportsResponse_FieldPathValue = (*GetHopReportsResponse_FieldSubPathValue)(nil)

func (fpvs *GetHopReportsResponse_FieldSubPathValue) AsHopsReportPathValue() (HopsReport_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(HopsReport_FieldPathValue)
	return res, ok
}

func (fpvs *GetHopReportsResponse_FieldSubPathValue) SetTo(target **GetHopReportsResponse) {
	if *target == nil {
		*target = new(GetHopReportsResponse)
	}
	switch fpvs.Selector() {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHopReportsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetHopReportsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *GetHopReportsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *GetHopReportsResponse_FieldSubPathValue) CompareWith(source *GetHopReportsResponse) (int, bool) {
	switch fpvs.Selector() {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *GetHopReportsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*GetHopReportsResponse))
}

// GetHopReportsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for GetHopReportsResponse according to their type
// Present only for array (repeated) types.
type GetHopReportsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetHopReportsResponse_FieldPath
	ContainsValue(*GetHopReportsResponse) bool
}

// ParseGetHopReportsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetHopReportsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (GetHopReportsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseGetHopReportsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetHopReportsResponse_FieldPathArrayItemValue), nil
}

func MustParseGetHopReportsResponse_FieldPathArrayItemValue(pathStr, valueStr string) GetHopReportsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseGetHopReportsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetHopReportsResponse_FieldTerminalPathArrayItemValue struct {
	GetHopReportsResponse_FieldTerminalPath
	value interface{}
}

var _ GetHopReportsResponse_FieldPathArrayItemValue = (*GetHopReportsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetHopReportsResponse as interface{}
func (fpaiv *GetHopReportsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *GetHopReportsResponse_FieldTerminalPathArrayItemValue) AsHopsReportItemValue() (*HopsReport, bool) {
	res, ok := fpaiv.value.(*HopsReport)
	return res, ok
}

func (fpaiv *GetHopReportsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *GetHopReportsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetHopReportsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetHopReportsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHopReportsResponse'
func (fpaiv *GetHopReportsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *GetHopReportsResponse) bool {
	slice := fpaiv.GetHopReportsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type GetHopReportsResponse_FieldSubPathArrayItemValue struct {
	GetHopReportsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *GetHopReportsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *GetHopReportsResponse_FieldSubPathArrayItemValue) AsHopsReportPathItemValue() (HopsReport_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(HopsReport_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetHopReportsResponse'
func (fpaivs *GetHopReportsResponse_FieldSubPathArrayItemValue) ContainsValue(source *GetHopReportsResponse) bool {
	switch fpaivs.Selector() {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for GetHopReportsResponse: %d", fpaivs.Selector()))
	}
}

// GetHopReportsResponse_FieldPathArrayOfValues allows storing slice of values for GetHopReportsResponse fields according to their type
type GetHopReportsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetHopReportsResponse_FieldPath
}

func ParseGetHopReportsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (GetHopReportsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseGetHopReportsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetHopReportsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetHopReportsResponse_FieldPathArrayOfValues), nil
}

func MustParseGetHopReportsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) GetHopReportsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseGetHopReportsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetHopReportsResponse_FieldTerminalPathArrayOfValues struct {
	GetHopReportsResponse_FieldTerminalPath
	values interface{}
}

var _ GetHopReportsResponse_FieldPathArrayOfValues = (*GetHopReportsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetHopReportsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetHopReportsResponse_FieldPathSelectorHopsReport:
		for _, v := range fpaov.values.([][]*HopsReport) {
			values = append(values, v)
		}
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		for _, v := range fpaov.values.([]map[string]*common.HopInfo) {
			values = append(values, v)
		}
	case GetHopReportsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetHopReportsResponse_FieldTerminalPathArrayOfValues) AsHopsReportArrayOfValues() ([][]*HopsReport, bool) {
	res, ok := fpaov.values.([][]*HopsReport)
	return res, ok
}
func (fpaov *GetHopReportsResponse_FieldTerminalPathArrayOfValues) AsHopInfoArrayOfValues() ([]map[string]*common.HopInfo, bool) {
	res, ok := fpaov.values.([]map[string]*common.HopInfo)
	return res, ok
}
func (fpaov *GetHopReportsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type GetHopReportsResponse_FieldPathMapArrayOfValues struct {
	GetHopReportsResponse_FieldPathMap
	values interface{}
}

var _ GetHopReportsResponse_FieldPathArrayOfValues = (*GetHopReportsResponse_FieldPathMapArrayOfValues)(nil)

func (fpmaov *GetHopReportsResponse_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case GetHopReportsResponse_FieldPathSelectorHopInfo:
		for _, v := range fpmaov.values.([]*common.HopInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *GetHopReportsResponse_FieldPathMapArrayOfValues) AsHopInfoArrayOfElementValues() ([]*common.HopInfo, bool) {
	res, ok := fpmaov.values.([]*common.HopInfo)
	return res, ok
}

type GetHopReportsResponse_FieldSubPathArrayOfValues struct {
	GetHopReportsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ GetHopReportsResponse_FieldPathArrayOfValues = (*GetHopReportsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *GetHopReportsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *GetHopReportsResponse_FieldSubPathArrayOfValues) AsHopsReportPathArrayOfValues() (HopsReport_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(HopsReport_FieldPathArrayOfValues)
	return res, ok
}
