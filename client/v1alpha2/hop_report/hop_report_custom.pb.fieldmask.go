// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/hop_report_custom.proto
// DO NOT EDIT!!!

package hop_report_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

type ReportHopsRequest_FieldMask struct {
	Paths []ReportHopsRequest_FieldPath
}

func FullReportHopsRequest_FieldMask() *ReportHopsRequest_FieldMask {
	res := &ReportHopsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTargetIpAddress})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorIpVersion})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorMode})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceType})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorPaths})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopStats})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopInfo})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReason})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReasonDescription})
	res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTime})
	return res
}

func (fieldMask *ReportHopsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ReportHopsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ReportHopsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseReportHopsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ReportHopsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 12)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ReportHopsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ReportHopsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseReportHopsRequest_FieldPath(raw)
	})
}

func (fieldMask *ReportHopsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ReportHopsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ReportHopsRequest_FieldMask) Subtract(other *ReportHopsRequest_FieldMask) *ReportHopsRequest_FieldMask {
	result := &ReportHopsRequest_FieldMask{}
	removedSelectors := make([]bool, 12)
	otherSubMasks := map[ReportHopsRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportHopsRequest_FieldPathSelectorPaths: &common.Path_FieldMask{},
	}
	mySubMasks := map[ReportHopsRequest_FieldPathSelector]gotenobject.FieldMask{
		ReportHopsRequest_FieldPathSelectorPaths: &common.Path_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ReportHopsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ReportHopsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ReportHopsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ReportHopsRequest_FieldPathSelectorPaths:
						mySubMasks[ReportHopsRequest_FieldPathSelectorPaths] = common.FullPath_FieldMask()
					}
				} else if tp, ok := path.(*ReportHopsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ReportHopsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ReportHopsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ReportHopsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ReportHopsRequest_FieldMask) FilterInputFields() *ReportHopsRequest_FieldMask {
	result := &ReportHopsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ReportHopsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ReportHopsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ReportHopsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseReportHopsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ReportHopsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ReportHopsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHopsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ReportHopsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ReportHopsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHopsRequest_FieldMask) AppendPath(path ReportHopsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ReportHopsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ReportHopsRequest_FieldPath))
}

func (fieldMask *ReportHopsRequest_FieldMask) GetPaths() []ReportHopsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ReportHopsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ReportHopsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseReportHopsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ReportHopsRequest_FieldMask) Set(target, source *ReportHopsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ReportHopsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ReportHopsRequest), source.(*ReportHopsRequest))
}

func (fieldMask *ReportHopsRequest_FieldMask) Project(source *ReportHopsRequest) *ReportHopsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ReportHopsRequest{}
	pathsMask := &common.Path_FieldMask{}
	wholePathsAccepted := false
	var hopStatsMapKeys []string
	wholeHopStatsAccepted := false
	var hopInfoMapKeys []string
	wholeHopInfoAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ReportHopsRequest_FieldTerminalPath:
			switch tp.selector {
			case ReportHopsRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ReportHopsRequest_FieldPathSelectorTarget:
				result.Target = source.Target
			case ReportHopsRequest_FieldPathSelectorTargetIpAddress:
				result.TargetIpAddress = source.TargetIpAddress
			case ReportHopsRequest_FieldPathSelectorIpVersion:
				result.IpVersion = source.IpVersion
			case ReportHopsRequest_FieldPathSelectorMode:
				result.Mode = source.Mode
			case ReportHopsRequest_FieldPathSelectorTraceType:
				result.TraceType = source.TraceType
			case ReportHopsRequest_FieldPathSelectorPaths:
				result.Paths = source.Paths
				wholePathsAccepted = true
			case ReportHopsRequest_FieldPathSelectorHopStats:
				result.HopStats = source.HopStats
				wholeHopStatsAccepted = true
			case ReportHopsRequest_FieldPathSelectorHopInfo:
				result.HopInfo = source.HopInfo
				wholeHopInfoAccepted = true
			case ReportHopsRequest_FieldPathSelectorTraceReason:
				result.TraceReason = source.TraceReason
			case ReportHopsRequest_FieldPathSelectorTraceReasonDescription:
				result.TraceReasonDescription = source.TraceReasonDescription
			case ReportHopsRequest_FieldPathSelectorTime:
				result.Time = source.Time
			}
		case *ReportHopsRequest_FieldSubPath:
			switch tp.selector {
			case ReportHopsRequest_FieldPathSelectorPaths:
				pathsMask.AppendPath(tp.subPath.(common.Path_FieldPath))
			}
		case *ReportHopsRequest_FieldPathMap:
			switch tp.selector {
			case ReportHopsRequest_FieldPathSelectorHopStats:
				hopStatsMapKeys = append(hopStatsMapKeys, tp.key)
			case ReportHopsRequest_FieldPathSelectorHopInfo:
				hopInfoMapKeys = append(hopInfoMapKeys, tp.key)
			}
		}
	}
	if wholePathsAccepted == false && len(pathsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPaths() {
			result.Paths = append(result.Paths, pathsMask.Project(sourceItem))
		}
	}
	if wholeHopStatsAccepted == false && len(hopStatsMapKeys) > 0 && source.GetHopStats() != nil {
		copiedMap := map[string]*common.HopStat{}
		sourceMap := source.GetHopStats()
		for _, key := range hopStatsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.HopStats = copiedMap
	}
	if wholeHopInfoAccepted == false && len(hopInfoMapKeys) > 0 && source.GetHopInfo() != nil {
		copiedMap := map[string]*common.HopInfo{}
		sourceMap := source.GetHopInfo()
		for _, key := range hopInfoMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.HopInfo = copiedMap
	}
	return result
}

func (fieldMask *ReportHopsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ReportHopsRequest))
}

func (fieldMask *ReportHopsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ReportHopsResponse_FieldMask struct {
	Paths []ReportHopsResponse_FieldPath
}

func FullReportHopsResponse_FieldMask() *ReportHopsResponse_FieldMask {
	res := &ReportHopsResponse_FieldMask{}
	return res
}

func (fieldMask *ReportHopsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ReportHopsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ReportHopsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseReportHopsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ReportHopsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ReportHopsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ReportHopsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseReportHopsResponse_FieldPath(raw)
	})
}

func (fieldMask *ReportHopsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ReportHopsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ReportHopsResponse_FieldMask) Subtract(other *ReportHopsResponse_FieldMask) *ReportHopsResponse_FieldMask {
	result := &ReportHopsResponse_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ReportHopsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ReportHopsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ReportHopsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ReportHopsResponse_FieldMask) FilterInputFields() *ReportHopsResponse_FieldMask {
	result := &ReportHopsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ReportHopsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ReportHopsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ReportHopsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseReportHopsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ReportHopsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ReportHopsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHopsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ReportHopsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ReportHopsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ReportHopsResponse_FieldMask) AppendPath(path ReportHopsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ReportHopsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ReportHopsResponse_FieldPath))
}

func (fieldMask *ReportHopsResponse_FieldMask) GetPaths() []ReportHopsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ReportHopsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ReportHopsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseReportHopsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ReportHopsResponse_FieldMask) Set(target, source *ReportHopsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ReportHopsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ReportHopsResponse), source.(*ReportHopsResponse))
}

func (fieldMask *ReportHopsResponse_FieldMask) Project(source *ReportHopsResponse) *ReportHopsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ReportHopsResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ReportHopsResponse_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *ReportHopsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ReportHopsResponse))
}

func (fieldMask *ReportHopsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type PathStats_FieldMask struct {
	Paths []PathStats_FieldPath
}

func FullPathStats_FieldMask() *PathStats_FieldMask {
	res := &PathStats_FieldMask{}
	res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTime})
	res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorPaths})
	res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorHopStats})
	res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReason})
	res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReasonDescription})
	return res
}

func (fieldMask *PathStats_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *PathStats_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *PathStats_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePathStats_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *PathStats_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PathStats_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *PathStats_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePathStats_FieldPath(raw)
	})
}

func (fieldMask *PathStats_FieldMask) ProtoMessage() {}

func (fieldMask *PathStats_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *PathStats_FieldMask) Subtract(other *PathStats_FieldMask) *PathStats_FieldMask {
	result := &PathStats_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[PathStats_FieldPathSelector]gotenobject.FieldMask{
		PathStats_FieldPathSelectorPaths: &common.Path_FieldMask{},
	}
	mySubMasks := map[PathStats_FieldPathSelector]gotenobject.FieldMask{
		PathStats_FieldPathSelectorPaths: &common.Path_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PathStats_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PathStats_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PathStats_FieldTerminalPath); ok {
					switch tp.selector {
					case PathStats_FieldPathSelectorPaths:
						mySubMasks[PathStats_FieldPathSelectorPaths] = common.FullPath_FieldMask()
					}
				} else if tp, ok := path.(*PathStats_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PathStats_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *PathStats_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*PathStats_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *PathStats_FieldMask) FilterInputFields() *PathStats_FieldMask {
	result := &PathStats_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *PathStats_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *PathStats_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PathStats_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePathStats_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask PathStats_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *PathStats_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PathStats_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask PathStats_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *PathStats_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PathStats_FieldMask) AppendPath(path PathStats_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *PathStats_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PathStats_FieldPath))
}

func (fieldMask *PathStats_FieldMask) GetPaths() []PathStats_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *PathStats_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *PathStats_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePathStats_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *PathStats_FieldMask) Set(target, source *PathStats) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *PathStats_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*PathStats), source.(*PathStats))
}

func (fieldMask *PathStats_FieldMask) Project(source *PathStats) *PathStats {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &PathStats{}
	pathsMask := &common.Path_FieldMask{}
	wholePathsAccepted := false
	var hopStatsMapKeys []string
	wholeHopStatsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PathStats_FieldTerminalPath:
			switch tp.selector {
			case PathStats_FieldPathSelectorTime:
				result.Time = source.Time
			case PathStats_FieldPathSelectorPaths:
				result.Paths = source.Paths
				wholePathsAccepted = true
			case PathStats_FieldPathSelectorHopStats:
				result.HopStats = source.HopStats
				wholeHopStatsAccepted = true
			case PathStats_FieldPathSelectorTraceReason:
				result.TraceReason = source.TraceReason
			case PathStats_FieldPathSelectorTraceReasonDescription:
				result.TraceReasonDescription = source.TraceReasonDescription
			}
		case *PathStats_FieldSubPath:
			switch tp.selector {
			case PathStats_FieldPathSelectorPaths:
				pathsMask.AppendPath(tp.subPath.(common.Path_FieldPath))
			}
		case *PathStats_FieldPathMap:
			switch tp.selector {
			case PathStats_FieldPathSelectorHopStats:
				hopStatsMapKeys = append(hopStatsMapKeys, tp.key)
			}
		}
	}
	if wholePathsAccepted == false && len(pathsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPaths() {
			result.Paths = append(result.Paths, pathsMask.Project(sourceItem))
		}
	}
	if wholeHopStatsAccepted == false && len(hopStatsMapKeys) > 0 && source.GetHopStats() != nil {
		copiedMap := map[string]*common.HopStat{}
		sourceMap := source.GetHopStats()
		for _, key := range hopStatsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.HopStats = copiedMap
	}
	return result
}

func (fieldMask *PathStats_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*PathStats))
}

func (fieldMask *PathStats_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetHopReportsRequest_FieldMask struct {
	Paths []GetHopReportsRequest_FieldPath
}

func FullGetHopReportsRequest_FieldMask() *GetHopReportsRequest_FieldMask {
	res := &GetHopReportsRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageToken})
	return res
}

func (fieldMask *GetHopReportsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetHopReportsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetHopReportsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetHopReportsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetHopReportsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetHopReportsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetHopReportsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetHopReportsRequest_FieldPath(raw)
	})
}

func (fieldMask *GetHopReportsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetHopReportsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetHopReportsRequest_FieldMask) Subtract(other *GetHopReportsRequest_FieldMask) *GetHopReportsRequest_FieldMask {
	result := &GetHopReportsRequest_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[GetHopReportsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetHopReportsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}
	mySubMasks := map[GetHopReportsRequest_FieldPathSelector]gotenobject.FieldMask{
		GetHopReportsRequest_FieldPathSelectorInterval: &common.TimeInterval_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetHopReportsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetHopReportsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetHopReportsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case GetHopReportsRequest_FieldPathSelectorInterval:
						mySubMasks[GetHopReportsRequest_FieldPathSelectorInterval] = common.FullTimeInterval_FieldMask()
					}
				} else if tp, ok := path.(*GetHopReportsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetHopReportsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetHopReportsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetHopReportsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetHopReportsRequest_FieldMask) FilterInputFields() *GetHopReportsRequest_FieldMask {
	result := &GetHopReportsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetHopReportsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetHopReportsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetHopReportsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetHopReportsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetHopReportsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetHopReportsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHopReportsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetHopReportsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetHopReportsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHopReportsRequest_FieldMask) AppendPath(path GetHopReportsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetHopReportsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetHopReportsRequest_FieldPath))
}

func (fieldMask *GetHopReportsRequest_FieldMask) GetPaths() []GetHopReportsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetHopReportsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetHopReportsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetHopReportsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetHopReportsRequest_FieldMask) Set(target, source *GetHopReportsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetHopReportsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetHopReportsRequest), source.(*GetHopReportsRequest))
}

func (fieldMask *GetHopReportsRequest_FieldMask) Project(source *GetHopReportsRequest) *GetHopReportsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetHopReportsRequest{}
	intervalMask := &common.TimeInterval_FieldMask{}
	wholeIntervalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetHopReportsRequest_FieldTerminalPath:
			switch tp.selector {
			case GetHopReportsRequest_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case GetHopReportsRequest_FieldPathSelectorTarget:
				result.Target = source.Target
			case GetHopReportsRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
				wholeIntervalAccepted = true
			case GetHopReportsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case GetHopReportsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			}
		case *GetHopReportsRequest_FieldSubPath:
			switch tp.selector {
			case GetHopReportsRequest_FieldPathSelectorInterval:
				intervalMask.AppendPath(tp.subPath.(common.TimeInterval_FieldPath))
			}
		}
	}
	if wholeIntervalAccepted == false && len(intervalMask.Paths) > 0 {
		result.Interval = intervalMask.Project(source.GetInterval())
	}
	return result
}

func (fieldMask *GetHopReportsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetHopReportsRequest))
}

func (fieldMask *GetHopReportsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HopsReport_FieldMask struct {
	Paths []HopsReport_FieldPath
}

func FullHopsReport_FieldMask() *HopsReport_FieldMask {
	res := &HopsReport_FieldMask{}
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTargetIpAddress})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorIpVersion})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorMode})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTraceType})
	res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorPathStats})
	return res
}

func (fieldMask *HopsReport_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HopsReport_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HopsReport_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHopsReport_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HopsReport_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HopsReport_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HopsReport_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHopsReport_FieldPath(raw)
	})
}

func (fieldMask *HopsReport_FieldMask) ProtoMessage() {}

func (fieldMask *HopsReport_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HopsReport_FieldMask) Subtract(other *HopsReport_FieldMask) *HopsReport_FieldMask {
	result := &HopsReport_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[HopsReport_FieldPathSelector]gotenobject.FieldMask{
		HopsReport_FieldPathSelectorPathStats: &PathStats_FieldMask{},
	}
	mySubMasks := map[HopsReport_FieldPathSelector]gotenobject.FieldMask{
		HopsReport_FieldPathSelectorPathStats: &PathStats_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HopsReport_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *HopsReport_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*HopsReport_FieldTerminalPath); ok {
					switch tp.selector {
					case HopsReport_FieldPathSelectorPathStats:
						mySubMasks[HopsReport_FieldPathSelectorPathStats] = FullPathStats_FieldMask()
					}
				} else if tp, ok := path.(*HopsReport_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &HopsReport_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HopsReport_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HopsReport_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HopsReport_FieldMask) FilterInputFields() *HopsReport_FieldMask {
	result := &HopsReport_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HopsReport_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HopsReport_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HopsReport_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHopsReport_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HopsReport_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HopsReport_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HopsReport_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HopsReport_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HopsReport_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HopsReport_FieldMask) AppendPath(path HopsReport_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HopsReport_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HopsReport_FieldPath))
}

func (fieldMask *HopsReport_FieldMask) GetPaths() []HopsReport_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HopsReport_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HopsReport_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHopsReport_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HopsReport_FieldMask) Set(target, source *HopsReport) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HopsReport_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HopsReport), source.(*HopsReport))
}

func (fieldMask *HopsReport_FieldMask) Project(source *HopsReport) *HopsReport {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HopsReport{}
	pathStatsMask := &PathStats_FieldMask{}
	wholePathStatsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HopsReport_FieldTerminalPath:
			switch tp.selector {
			case HopsReport_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case HopsReport_FieldPathSelectorTarget:
				result.Target = source.Target
			case HopsReport_FieldPathSelectorTargetIpAddress:
				result.TargetIpAddress = source.TargetIpAddress
			case HopsReport_FieldPathSelectorIpVersion:
				result.IpVersion = source.IpVersion
			case HopsReport_FieldPathSelectorMode:
				result.Mode = source.Mode
			case HopsReport_FieldPathSelectorTraceType:
				result.TraceType = source.TraceType
			case HopsReport_FieldPathSelectorPathStats:
				result.PathStats = source.PathStats
				wholePathStatsAccepted = true
			}
		case *HopsReport_FieldSubPath:
			switch tp.selector {
			case HopsReport_FieldPathSelectorPathStats:
				pathStatsMask.AppendPath(tp.subPath.(PathStats_FieldPath))
			}
		}
	}
	if wholePathStatsAccepted == false && len(pathStatsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPathStats() {
			result.PathStats = append(result.PathStats, pathStatsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *HopsReport_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HopsReport))
}

func (fieldMask *HopsReport_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type GetHopReportsResponse_FieldMask struct {
	Paths []GetHopReportsResponse_FieldPath
}

func FullGetHopReportsResponse_FieldMask() *GetHopReportsResponse_FieldMask {
	res := &GetHopReportsResponse_FieldMask{}
	res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopsReport})
	res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopInfo})
	res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *GetHopReportsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetHopReportsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetHopReportsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetHopReportsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetHopReportsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetHopReportsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetHopReportsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetHopReportsResponse_FieldPath(raw)
	})
}

func (fieldMask *GetHopReportsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *GetHopReportsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetHopReportsResponse_FieldMask) Subtract(other *GetHopReportsResponse_FieldMask) *GetHopReportsResponse_FieldMask {
	result := &GetHopReportsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[GetHopReportsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetHopReportsResponse_FieldPathSelectorHopsReport: &HopsReport_FieldMask{},
	}
	mySubMasks := map[GetHopReportsResponse_FieldPathSelector]gotenobject.FieldMask{
		GetHopReportsResponse_FieldPathSelectorHopsReport: &HopsReport_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetHopReportsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *GetHopReportsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*GetHopReportsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case GetHopReportsResponse_FieldPathSelectorHopsReport:
						mySubMasks[GetHopReportsResponse_FieldPathSelectorHopsReport] = FullHopsReport_FieldMask()
					}
				} else if tp, ok := path.(*GetHopReportsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &GetHopReportsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetHopReportsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetHopReportsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetHopReportsResponse_FieldMask) FilterInputFields() *GetHopReportsResponse_FieldMask {
	result := &GetHopReportsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetHopReportsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetHopReportsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetHopReportsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetHopReportsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetHopReportsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetHopReportsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHopReportsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetHopReportsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetHopReportsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetHopReportsResponse_FieldMask) AppendPath(path GetHopReportsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetHopReportsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetHopReportsResponse_FieldPath))
}

func (fieldMask *GetHopReportsResponse_FieldMask) GetPaths() []GetHopReportsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetHopReportsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetHopReportsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetHopReportsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetHopReportsResponse_FieldMask) Set(target, source *GetHopReportsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetHopReportsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetHopReportsResponse), source.(*GetHopReportsResponse))
}

func (fieldMask *GetHopReportsResponse_FieldMask) Project(source *GetHopReportsResponse) *GetHopReportsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetHopReportsResponse{}
	hopsReportMask := &HopsReport_FieldMask{}
	wholeHopsReportAccepted := false
	var hopInfoMapKeys []string
	wholeHopInfoAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetHopReportsResponse_FieldTerminalPath:
			switch tp.selector {
			case GetHopReportsResponse_FieldPathSelectorHopsReport:
				result.HopsReport = source.HopsReport
				wholeHopsReportAccepted = true
			case GetHopReportsResponse_FieldPathSelectorHopInfo:
				result.HopInfo = source.HopInfo
				wholeHopInfoAccepted = true
			case GetHopReportsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *GetHopReportsResponse_FieldSubPath:
			switch tp.selector {
			case GetHopReportsResponse_FieldPathSelectorHopsReport:
				hopsReportMask.AppendPath(tp.subPath.(HopsReport_FieldPath))
			}
		case *GetHopReportsResponse_FieldPathMap:
			switch tp.selector {
			case GetHopReportsResponse_FieldPathSelectorHopInfo:
				hopInfoMapKeys = append(hopInfoMapKeys, tp.key)
			}
		}
	}
	if wholeHopsReportAccepted == false && len(hopsReportMask.Paths) > 0 {
		for _, sourceItem := range source.GetHopsReport() {
			result.HopsReport = append(result.HopsReport, hopsReportMask.Project(sourceItem))
		}
	}
	if wholeHopInfoAccepted == false && len(hopInfoMapKeys) > 0 && source.GetHopInfo() != nil {
		copiedMap := map[string]*common.HopInfo{}
		sourceMap := source.GetHopInfo()
		for _, key := range hopInfoMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.HopInfo = copiedMap
	}
	return result
}

func (fieldMask *GetHopReportsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetHopReportsResponse))
}

func (fieldMask *GetHopReportsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
