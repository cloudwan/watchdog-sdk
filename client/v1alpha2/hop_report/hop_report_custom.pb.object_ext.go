// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/hop_report_custom.proto
// DO NOT EDIT!!!

package hop_report_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

func (o *ReportHopsRequest) GotenObjectExt() {}

func (o *ReportHopsRequest) MakeFullFieldMask() *ReportHopsRequest_FieldMask {
	return FullReportHopsRequest_FieldMask()
}

func (o *ReportHopsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullReportHopsRequest_FieldMask()
}

func (o *ReportHopsRequest) MakeDiffFieldMask(other *ReportHopsRequest) *ReportHopsRequest_FieldMask {
	if o == nil && other == nil {
		return &ReportHopsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullReportHopsRequest_FieldMask()
	}

	res := &ReportHopsRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorName})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTarget})
	}
	if o.GetTargetIpAddress() != other.GetTargetIpAddress() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTargetIpAddress})
	}
	if o.GetIpVersion() != other.GetIpVersion() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorIpVersion})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorMode})
	}
	if o.GetTraceType() != other.GetTraceType() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceType})
	}

	if len(o.GetPaths()) == len(other.GetPaths()) {
		for i, lValue := range o.GetPaths() {
			rValue := other.GetPaths()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorPaths})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorPaths})
	}

	if len(o.GetHopStats()) == len(other.GetHopStats()) {
		for i, lValue := range o.GetHopStats() {
			rValue := other.GetHopStats()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopStats})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopStats})
	}

	if len(o.GetHopInfo()) == len(other.GetHopInfo()) {
		for i, lValue := range o.GetHopInfo() {
			rValue := other.GetHopInfo()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopInfo})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorHopInfo})
	}
	if o.GetTraceReason() != other.GetTraceReason() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReason})
	}
	if o.GetTraceReasonDescription() != other.GetTraceReasonDescription() {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTraceReasonDescription})
	}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &ReportHopsRequest_FieldTerminalPath{selector: ReportHopsRequest_FieldPathSelectorTime})
	}
	return res
}

func (o *ReportHopsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ReportHopsRequest))
}

func (o *ReportHopsRequest) Clone() *ReportHopsRequest {
	if o == nil {
		return nil
	}
	result := &ReportHopsRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.TargetIpAddress = o.TargetIpAddress
	result.IpVersion = o.IpVersion
	result.Mode = o.Mode
	result.TraceType = o.TraceType
	result.Paths = make([]*common.Path, len(o.Paths))
	for i, sourceValue := range o.Paths {
		result.Paths[i] = sourceValue.Clone()
	}
	result.HopStats = map[string]*common.HopStat{}
	for key, sourceValue := range o.HopStats {
		result.HopStats[key] = sourceValue.Clone()
	}
	result.HopInfo = map[string]*common.HopInfo{}
	for key, sourceValue := range o.HopInfo {
		result.HopInfo[key] = sourceValue.Clone()
	}
	result.TraceReason = o.TraceReason
	result.TraceReasonDescription = o.TraceReasonDescription
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	return result
}

func (o *ReportHopsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ReportHopsRequest) Merge(source *ReportHopsRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	o.TargetIpAddress = source.GetTargetIpAddress()
	o.IpVersion = source.GetIpVersion()
	o.Mode = source.GetMode()
	o.TraceType = source.GetTraceType()
	for _, sourceValue := range source.GetPaths() {
		exists := false
		for _, currentValue := range o.Paths {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Path
			if sourceValue != nil {
				newDstElement = new(common.Path)
				newDstElement.Merge(sourceValue)
			}
			o.Paths = append(o.Paths, newDstElement)
		}
	}

	if source.GetHopStats() != nil {
		if o.HopStats == nil {
			o.HopStats = make(map[string]*common.HopStat, len(source.GetHopStats()))
		}
		for key, sourceValue := range source.GetHopStats() {
			if sourceValue != nil {
				if o.HopStats[key] == nil {
					o.HopStats[key] = new(common.HopStat)
				}
				o.HopStats[key].Merge(sourceValue)
			}
		}
	}
	if source.GetHopInfo() != nil {
		if o.HopInfo == nil {
			o.HopInfo = make(map[string]*common.HopInfo, len(source.GetHopInfo()))
		}
		for key, sourceValue := range source.GetHopInfo() {
			if sourceValue != nil {
				if o.HopInfo[key] == nil {
					o.HopInfo[key] = new(common.HopInfo)
				}
				o.HopInfo[key].Merge(sourceValue)
			}
		}
	}
	o.TraceReason = source.GetTraceReason()
	o.TraceReasonDescription = source.GetTraceReasonDescription()
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
}

func (o *ReportHopsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ReportHopsRequest))
}

func (o *ReportHopsResponse) GotenObjectExt() {}

func (o *ReportHopsResponse) MakeFullFieldMask() *ReportHopsResponse_FieldMask {
	return FullReportHopsResponse_FieldMask()
}

func (o *ReportHopsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullReportHopsResponse_FieldMask()
}

func (o *ReportHopsResponse) MakeDiffFieldMask(other *ReportHopsResponse) *ReportHopsResponse_FieldMask {
	if o == nil && other == nil {
		return &ReportHopsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullReportHopsResponse_FieldMask()
	}

	res := &ReportHopsResponse_FieldMask{}
	return res
}

func (o *ReportHopsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ReportHopsResponse))
}

func (o *ReportHopsResponse) Clone() *ReportHopsResponse {
	if o == nil {
		return nil
	}
	result := &ReportHopsResponse{}
	return result
}

func (o *ReportHopsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ReportHopsResponse) Merge(source *ReportHopsResponse) {
}

func (o *ReportHopsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ReportHopsResponse))
}

func (o *PathStats) GotenObjectExt() {}

func (o *PathStats) MakeFullFieldMask() *PathStats_FieldMask {
	return FullPathStats_FieldMask()
}

func (o *PathStats) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPathStats_FieldMask()
}

func (o *PathStats) MakeDiffFieldMask(other *PathStats) *PathStats_FieldMask {
	if o == nil && other == nil {
		return &PathStats_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPathStats_FieldMask()
	}

	res := &PathStats_FieldMask{}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTime})
	}

	if len(o.GetPaths()) == len(other.GetPaths()) {
		for i, lValue := range o.GetPaths() {
			rValue := other.GetPaths()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorPaths})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorPaths})
	}

	if len(o.GetHopStats()) == len(other.GetHopStats()) {
		for i, lValue := range o.GetHopStats() {
			rValue := other.GetHopStats()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorHopStats})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorHopStats})
	}
	if o.GetTraceReason() != other.GetTraceReason() {
		res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReason})
	}
	if o.GetTraceReasonDescription() != other.GetTraceReasonDescription() {
		res.Paths = append(res.Paths, &PathStats_FieldTerminalPath{selector: PathStats_FieldPathSelectorTraceReasonDescription})
	}
	return res
}

func (o *PathStats) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PathStats))
}

func (o *PathStats) Clone() *PathStats {
	if o == nil {
		return nil
	}
	result := &PathStats{}
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	result.Paths = make([]*common.Path, len(o.Paths))
	for i, sourceValue := range o.Paths {
		result.Paths[i] = sourceValue.Clone()
	}
	result.HopStats = map[string]*common.HopStat{}
	for key, sourceValue := range o.HopStats {
		result.HopStats[key] = sourceValue.Clone()
	}
	result.TraceReason = o.TraceReason
	result.TraceReasonDescription = o.TraceReasonDescription
	return result
}

func (o *PathStats) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PathStats) Merge(source *PathStats) {
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	for _, sourceValue := range source.GetPaths() {
		exists := false
		for _, currentValue := range o.Paths {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Path
			if sourceValue != nil {
				newDstElement = new(common.Path)
				newDstElement.Merge(sourceValue)
			}
			o.Paths = append(o.Paths, newDstElement)
		}
	}

	if source.GetHopStats() != nil {
		if o.HopStats == nil {
			o.HopStats = make(map[string]*common.HopStat, len(source.GetHopStats()))
		}
		for key, sourceValue := range source.GetHopStats() {
			if sourceValue != nil {
				if o.HopStats[key] == nil {
					o.HopStats[key] = new(common.HopStat)
				}
				o.HopStats[key].Merge(sourceValue)
			}
		}
	}
	o.TraceReason = source.GetTraceReason()
	o.TraceReasonDescription = source.GetTraceReasonDescription()
}

func (o *PathStats) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PathStats))
}

func (o *GetHopReportsRequest) GotenObjectExt() {}

func (o *GetHopReportsRequest) MakeFullFieldMask() *GetHopReportsRequest_FieldMask {
	return FullGetHopReportsRequest_FieldMask()
}

func (o *GetHopReportsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetHopReportsRequest_FieldMask()
}

func (o *GetHopReportsRequest) MakeDiffFieldMask(other *GetHopReportsRequest) *GetHopReportsRequest_FieldMask {
	if o == nil && other == nil {
		return &GetHopReportsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetHopReportsRequest_FieldMask()
	}

	res := &GetHopReportsRequest_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorProbe})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorTarget})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &GetHopReportsRequest_FieldSubPath{selector: GetHopReportsRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &GetHopReportsRequest_FieldTerminalPath{selector: GetHopReportsRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *GetHopReportsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetHopReportsRequest))
}

func (o *GetHopReportsRequest) Clone() *GetHopReportsRequest {
	if o == nil {
		return nil
	}
	result := &GetHopReportsRequest{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *GetHopReportsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetHopReportsRequest) Merge(source *GetHopReportsRequest) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *GetHopReportsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetHopReportsRequest))
}

func (o *HopsReport) GotenObjectExt() {}

func (o *HopsReport) MakeFullFieldMask() *HopsReport_FieldMask {
	return FullHopsReport_FieldMask()
}

func (o *HopsReport) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHopsReport_FieldMask()
}

func (o *HopsReport) MakeDiffFieldMask(other *HopsReport) *HopsReport_FieldMask {
	if o == nil && other == nil {
		return &HopsReport_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHopsReport_FieldMask()
	}

	res := &HopsReport_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorProbe})
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTarget})
	}
	if o.GetTargetIpAddress() != other.GetTargetIpAddress() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTargetIpAddress})
	}
	if o.GetIpVersion() != other.GetIpVersion() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorIpVersion})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorMode})
	}
	if o.GetTraceType() != other.GetTraceType() {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorTraceType})
	}

	if len(o.GetPathStats()) == len(other.GetPathStats()) {
		for i, lValue := range o.GetPathStats() {
			rValue := other.GetPathStats()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorPathStats})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &HopsReport_FieldTerminalPath{selector: HopsReport_FieldPathSelectorPathStats})
	}
	return res
}

func (o *HopsReport) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HopsReport))
}

func (o *HopsReport) Clone() *HopsReport {
	if o == nil {
		return nil
	}
	result := &HopsReport{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Reference{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.TargetIpAddress = o.TargetIpAddress
	result.IpVersion = o.IpVersion
	result.Mode = o.Mode
	result.TraceType = o.TraceType
	result.PathStats = make([]*PathStats, len(o.PathStats))
	for i, sourceValue := range o.PathStats {
		result.PathStats[i] = sourceValue.Clone()
	}
	return result
}

func (o *HopsReport) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HopsReport) Merge(source *HopsReport) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Reference{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	o.TargetIpAddress = source.GetTargetIpAddress()
	o.IpVersion = source.GetIpVersion()
	o.Mode = source.GetMode()
	o.TraceType = source.GetTraceType()
	for _, sourceValue := range source.GetPathStats() {
		exists := false
		for _, currentValue := range o.PathStats {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *PathStats
			if sourceValue != nil {
				newDstElement = new(PathStats)
				newDstElement.Merge(sourceValue)
			}
			o.PathStats = append(o.PathStats, newDstElement)
		}
	}

}

func (o *HopsReport) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HopsReport))
}

func (o *GetHopReportsResponse) GotenObjectExt() {}

func (o *GetHopReportsResponse) MakeFullFieldMask() *GetHopReportsResponse_FieldMask {
	return FullGetHopReportsResponse_FieldMask()
}

func (o *GetHopReportsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetHopReportsResponse_FieldMask()
}

func (o *GetHopReportsResponse) MakeDiffFieldMask(other *GetHopReportsResponse) *GetHopReportsResponse_FieldMask {
	if o == nil && other == nil {
		return &GetHopReportsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetHopReportsResponse_FieldMask()
	}

	res := &GetHopReportsResponse_FieldMask{}

	if len(o.GetHopsReport()) == len(other.GetHopsReport()) {
		for i, lValue := range o.GetHopsReport() {
			rValue := other.GetHopsReport()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopsReport})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopsReport})
	}

	if len(o.GetHopInfo()) == len(other.GetHopInfo()) {
		for i, lValue := range o.GetHopInfo() {
			rValue := other.GetHopInfo()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopInfo})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorHopInfo})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &GetHopReportsResponse_FieldTerminalPath{selector: GetHopReportsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *GetHopReportsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetHopReportsResponse))
}

func (o *GetHopReportsResponse) Clone() *GetHopReportsResponse {
	if o == nil {
		return nil
	}
	result := &GetHopReportsResponse{}
	result.HopsReport = make([]*HopsReport, len(o.HopsReport))
	for i, sourceValue := range o.HopsReport {
		result.HopsReport[i] = sourceValue.Clone()
	}
	result.HopInfo = map[string]*common.HopInfo{}
	for key, sourceValue := range o.HopInfo {
		result.HopInfo[key] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	return result
}

func (o *GetHopReportsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetHopReportsResponse) Merge(source *GetHopReportsResponse) {
	for _, sourceValue := range source.GetHopsReport() {
		exists := false
		for _, currentValue := range o.HopsReport {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *HopsReport
			if sourceValue != nil {
				newDstElement = new(HopsReport)
				newDstElement.Merge(sourceValue)
			}
			o.HopsReport = append(o.HopsReport, newDstElement)
		}
	}

	if source.GetHopInfo() != nil {
		if o.HopInfo == nil {
			o.HopInfo = make(map[string]*common.HopInfo, len(source.GetHopInfo()))
		}
		for key, sourceValue := range source.GetHopInfo() {
			if sourceValue != nil {
				if o.HopInfo[key] == nil {
					o.HopInfo[key] = new(common.HopInfo)
				}
				o.HopInfo[key].Merge(sourceValue)
			}
		}
	}
	o.NextPageToken = source.GetNextPageToken()
}

func (o *GetHopReportsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetHopReportsResponse))
}
