// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/hop_report_custom.proto
// DO NOT EDIT!!!

package hop_report_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [ReportHops][ntt.watchdog.v1alpha2.ReportHops]
type ReportHopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	Name            *probe.Reference          `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Target          *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	TargetIpAddress string                    `protobuf:"bytes,3,opt,name=target_ip_address,json=targetIpAddress,proto3" json:"target_ip_address,omitempty" firestore:"targetIpAddress"`
	IpVersion       common.IpVersion          `protobuf:"varint,4,opt,name=ip_version,json=ipVersion,proto3,enum=ntt.watchdog.v1alpha2.IpVersion" json:"ip_version,omitempty" firestore:"ipVersion"`
	Mode            common.ProbingMode        `protobuf:"varint,5,opt,name=mode,proto3,enum=ntt.watchdog.v1alpha2.ProbingMode" json:"mode,omitempty" firestore:"mode"`
	TraceType       common.TraceType          `protobuf:"varint,6,opt,name=trace_type,json=traceType,proto3,enum=ntt.watchdog.v1alpha2.TraceType" json:"trace_type,omitempty" firestore:"traceType"`
	Paths           []*common.Path            `protobuf:"bytes,7,rep,name=paths,proto3" json:"paths,omitempty" firestore:"paths"`
	// map<hopip, HopStat>
	HopStats map[string]*common.HopStat `protobuf:"bytes,8,rep,name=hop_stats,json=hopStats,proto3" json:"hop_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"hopStats"`
	// map<hopip, HopStat>
	HopInfo                map[string]*common.HopInfo `protobuf:"bytes,9,rep,name=hop_info,json=hopInfo,proto3" json:"hop_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"hopInfo"`
	TraceReason            common.TraceReason         `protobuf:"varint,10,opt,name=trace_reason,json=traceReason,proto3,enum=ntt.watchdog.v1alpha2.TraceReason" json:"trace_reason,omitempty" firestore:"traceReason"`
	TraceReasonDescription string                     `protobuf:"bytes,11,opt,name=trace_reason_description,json=traceReasonDescription,proto3" json:"trace_reason_description,omitempty" firestore:"traceReasonDescription"`
	Time                   *timestamp.Timestamp       `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
}

func (m *ReportHopsRequest) Reset() {
	*m = ReportHopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportHopsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportHopsRequest) ProtoMessage() {}

func (m *ReportHopsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportHopsRequest) GotenMessage() {}

// Deprecated, Use ReportHopsRequest.ProtoReflect.Descriptor instead.
func (*ReportHopsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ReportHopsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportHopsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportHopsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportHopsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReportHopsRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReportHopsRequest) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ReportHopsRequest) GetTargetIpAddress() string {
	if m != nil {
		return m.TargetIpAddress
	}
	return ""
}

func (m *ReportHopsRequest) GetIpVersion() common.IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return common.IpVersion_IPVERSION_ANY
}

func (m *ReportHopsRequest) GetMode() common.ProbingMode {
	if m != nil {
		return m.Mode
	}
	return common.ProbingMode_PROBING_MODE_UNSPECIFIED
}

func (m *ReportHopsRequest) GetTraceType() common.TraceType {
	if m != nil {
		return m.TraceType
	}
	return common.TraceType_UNDEFINED_TYPE
}

func (m *ReportHopsRequest) GetPaths() []*common.Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *ReportHopsRequest) GetHopStats() map[string]*common.HopStat {
	if m != nil {
		return m.HopStats
	}
	return nil
}

func (m *ReportHopsRequest) GetHopInfo() map[string]*common.HopInfo {
	if m != nil {
		return m.HopInfo
	}
	return nil
}

func (m *ReportHopsRequest) GetTraceReason() common.TraceReason {
	if m != nil {
		return m.TraceReason
	}
	return common.TraceReason_UNDEFINED
}

func (m *ReportHopsRequest) GetTraceReasonDescription() string {
	if m != nil {
		return m.TraceReasonDescription
	}
	return ""
}

func (m *ReportHopsRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ReportHopsRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ReportHopsRequest"))
	}
	m.Name = fv
}

func (m *ReportHopsRequest) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "ReportHopsRequest"))
	}
	m.Target = fv
}

func (m *ReportHopsRequest) SetTargetIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetIpAddress", "ReportHopsRequest"))
	}
	m.TargetIpAddress = fv
}

func (m *ReportHopsRequest) SetIpVersion(fv common.IpVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpVersion", "ReportHopsRequest"))
	}
	m.IpVersion = fv
}

func (m *ReportHopsRequest) SetMode(fv common.ProbingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "ReportHopsRequest"))
	}
	m.Mode = fv
}

func (m *ReportHopsRequest) SetTraceType(fv common.TraceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceType", "ReportHopsRequest"))
	}
	m.TraceType = fv
}

func (m *ReportHopsRequest) SetPaths(fv []*common.Path) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Paths", "ReportHopsRequest"))
	}
	m.Paths = fv
}

func (m *ReportHopsRequest) SetHopStats(fv map[string]*common.HopStat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HopStats", "ReportHopsRequest"))
	}
	m.HopStats = fv
}

func (m *ReportHopsRequest) SetHopInfo(fv map[string]*common.HopInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HopInfo", "ReportHopsRequest"))
	}
	m.HopInfo = fv
}

func (m *ReportHopsRequest) SetTraceReason(fv common.TraceReason) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceReason", "ReportHopsRequest"))
	}
	m.TraceReason = fv
}

func (m *ReportHopsRequest) SetTraceReasonDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceReasonDescription", "ReportHopsRequest"))
	}
	m.TraceReasonDescription = fv
}

func (m *ReportHopsRequest) SetTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ReportHopsRequest"))
	}
	m.Time = fv
}

// Response message for method [ReportHops][ntt.watchdog.v1alpha2.ReportHops]
type ReportHopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ReportHopsResponse) Reset() {
	*m = ReportHopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportHopsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportHopsResponse) ProtoMessage() {}

func (m *ReportHopsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportHopsResponse) GotenMessage() {}

// Deprecated, Use ReportHopsResponse.ProtoReflect.Descriptor instead.
func (*ReportHopsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ReportHopsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportHopsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportHopsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportHopsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type PathStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Time          *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
	Paths         []*common.Path       `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty" firestore:"paths"`
	// map<hopip, HopStat>
	HopStats               map[string]*common.HopStat `protobuf:"bytes,3,rep,name=hop_stats,json=hopStats,proto3" json:"hop_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"hopStats"`
	TraceReason            common.TraceReason         `protobuf:"varint,4,opt,name=trace_reason,json=traceReason,proto3,enum=ntt.watchdog.v1alpha2.TraceReason" json:"trace_reason,omitempty" firestore:"traceReason"`
	TraceReasonDescription string                     `protobuf:"bytes,5,opt,name=trace_reason_description,json=traceReasonDescription,proto3" json:"trace_reason_description,omitempty" firestore:"traceReasonDescription"`
}

func (m *PathStats) Reset() {
	*m = PathStats{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PathStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PathStats) ProtoMessage() {}

func (m *PathStats) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PathStats) GotenMessage() {}

// Deprecated, Use PathStats.ProtoReflect.Descriptor instead.
func (*PathStats) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{2}
}

func (m *PathStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PathStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PathStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PathStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PathStats) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *PathStats) GetPaths() []*common.Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *PathStats) GetHopStats() map[string]*common.HopStat {
	if m != nil {
		return m.HopStats
	}
	return nil
}

func (m *PathStats) GetTraceReason() common.TraceReason {
	if m != nil {
		return m.TraceReason
	}
	return common.TraceReason_UNDEFINED
}

func (m *PathStats) GetTraceReasonDescription() string {
	if m != nil {
		return m.TraceReasonDescription
	}
	return ""
}

func (m *PathStats) SetTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "PathStats"))
	}
	m.Time = fv
}

func (m *PathStats) SetPaths(fv []*common.Path) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Paths", "PathStats"))
	}
	m.Paths = fv
}

func (m *PathStats) SetHopStats(fv map[string]*common.HopStat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HopStats", "PathStats"))
	}
	m.HopStats = fv
}

func (m *PathStats) SetTraceReason(fv common.TraceReason) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceReason", "PathStats"))
	}
	m.TraceReason = fv
}

func (m *PathStats) SetTraceReasonDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceReasonDescription", "PathStats"))
	}
	m.TraceReasonDescription = fv
}

// Request message for method
// [GetHopReports][ntt.watchdog.v1alpha2.GetHopReports]
type GetHopReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  reference of ntt.watchdog.v1alpha2.Probe
	// Atleast one of Probe Name or ProbingTarget Name is mandatory.
	Probe *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	//  reference of ntt.watchdog.v1alpha2.ProbingTarget
	// Atleast one of Probe Name or ProbingTarget Name is mandatory.
	Target *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	// Interval for which the hop report is required
	Interval *common.TimeInterval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// A positive number that is the maximum number of results to return. If
	// `page_size` is empty or more than 100,000 results, the effective
	// `page_size` is 100,000 results.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// If this field is not empty then it must contain the `nextPageToken` value
	// returned by a previous call to this method.  Using this field causes the
	// method to return additional results from the previous method call.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
}

func (m *GetHopReportsRequest) Reset() {
	*m = GetHopReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetHopReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetHopReportsRequest) ProtoMessage() {}

func (m *GetHopReportsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetHopReportsRequest) GotenMessage() {}

// Deprecated, Use GetHopReportsRequest.ProtoReflect.Descriptor instead.
func (*GetHopReportsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{3}
}

func (m *GetHopReportsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetHopReportsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetHopReportsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetHopReportsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetHopReportsRequest) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *GetHopReportsRequest) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GetHopReportsRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *GetHopReportsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *GetHopReportsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *GetHopReportsRequest) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "GetHopReportsRequest"))
	}
	m.Probe = fv
}

func (m *GetHopReportsRequest) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "GetHopReportsRequest"))
	}
	m.Target = fv
}

func (m *GetHopReportsRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "GetHopReportsRequest"))
	}
	m.Interval = fv
}

func (m *GetHopReportsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "GetHopReportsRequest"))
	}
	m.PageSize = fv
}

func (m *GetHopReportsRequest) SetPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "GetHopReportsRequest"))
	}
	m.PageToken = fv
}

type HopsReport struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	Probe           *probe.Reference          `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	Target          *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	TargetIpAddress string                    `protobuf:"bytes,3,opt,name=target_ip_address,json=targetIpAddress,proto3" json:"target_ip_address,omitempty" firestore:"targetIpAddress"`
	IpVersion       common.IpVersion          `protobuf:"varint,4,opt,name=ip_version,json=ipVersion,proto3,enum=ntt.watchdog.v1alpha2.IpVersion" json:"ip_version,omitempty" firestore:"ipVersion"`
	Mode            common.ProbingMode        `protobuf:"varint,5,opt,name=mode,proto3,enum=ntt.watchdog.v1alpha2.ProbingMode" json:"mode,omitempty" firestore:"mode"`
	TraceType       common.TraceType          `protobuf:"varint,6,opt,name=trace_type,json=traceType,proto3,enum=ntt.watchdog.v1alpha2.TraceType" json:"trace_type,omitempty" firestore:"traceType"`
	PathStats       []*PathStats              `protobuf:"bytes,7,rep,name=path_stats,json=pathStats,proto3" json:"path_stats,omitempty" firestore:"pathStats"`
}

func (m *HopsReport) Reset() {
	*m = HopsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HopsReport) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HopsReport) ProtoMessage() {}

func (m *HopsReport) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HopsReport) GotenMessage() {}

// Deprecated, Use HopsReport.ProtoReflect.Descriptor instead.
func (*HopsReport) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{4}
}

func (m *HopsReport) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HopsReport) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HopsReport) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HopsReport) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HopsReport) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *HopsReport) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *HopsReport) GetTargetIpAddress() string {
	if m != nil {
		return m.TargetIpAddress
	}
	return ""
}

func (m *HopsReport) GetIpVersion() common.IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return common.IpVersion_IPVERSION_ANY
}

func (m *HopsReport) GetMode() common.ProbingMode {
	if m != nil {
		return m.Mode
	}
	return common.ProbingMode_PROBING_MODE_UNSPECIFIED
}

func (m *HopsReport) GetTraceType() common.TraceType {
	if m != nil {
		return m.TraceType
	}
	return common.TraceType_UNDEFINED_TYPE
}

func (m *HopsReport) GetPathStats() []*PathStats {
	if m != nil {
		return m.PathStats
	}
	return nil
}

func (m *HopsReport) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "HopsReport"))
	}
	m.Probe = fv
}

func (m *HopsReport) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "HopsReport"))
	}
	m.Target = fv
}

func (m *HopsReport) SetTargetIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetIpAddress", "HopsReport"))
	}
	m.TargetIpAddress = fv
}

func (m *HopsReport) SetIpVersion(fv common.IpVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpVersion", "HopsReport"))
	}
	m.IpVersion = fv
}

func (m *HopsReport) SetMode(fv common.ProbingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "HopsReport"))
	}
	m.Mode = fv
}

func (m *HopsReport) SetTraceType(fv common.TraceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TraceType", "HopsReport"))
	}
	m.TraceType = fv
}

func (m *HopsReport) SetPathStats(fv []*PathStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathStats", "HopsReport"))
	}
	m.PathStats = fv
}

// Response message for method
// [GetHopReports][ntt.watchdog.v1alpha2.GetHopReports]
type GetHopReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HopsReport    []*HopsReport `protobuf:"bytes,1,rep,name=hops_report,json=hopsReport,proto3" json:"hops_report,omitempty" firestore:"hopsReport"`
	// map<hopip, HopStat>
	HopInfo map[string]*common.HopInfo `protobuf:"bytes,2,rep,name=hop_info,json=hopInfo,proto3" json:"hop_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"hopInfo"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value.  To see the additional results,
	// use that value as `pageToken` in the next call to this method.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *GetHopReportsResponse) Reset() {
	*m = GetHopReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetHopReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetHopReportsResponse) ProtoMessage() {}

func (m *GetHopReportsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetHopReportsResponse) GotenMessage() {}

// Deprecated, Use GetHopReportsResponse.ProtoReflect.Descriptor instead.
func (*GetHopReportsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP(), []int{5}
}

func (m *GetHopReportsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetHopReportsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetHopReportsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetHopReportsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetHopReportsResponse) GetHopsReport() []*HopsReport {
	if m != nil {
		return m.HopsReport
	}
	return nil
}

func (m *GetHopReportsResponse) GetHopInfo() map[string]*common.HopInfo {
	if m != nil {
		return m.HopInfo
	}
	return nil
}

func (m *GetHopReportsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *GetHopReportsResponse) SetHopsReport(fv []*HopsReport) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HopsReport", "GetHopReportsResponse"))
	}
	m.HopsReport = fv
}

func (m *GetHopReportsResponse) SetHopInfo(fv map[string]*common.HopInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HopInfo", "GetHopReportsResponse"))
	}
	m.HopInfo = fv
}

func (m *GetHopReportsResponse) SetNextPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "GetHopReportsResponse"))
	}
	m.NextPageToken = fv
}

var watchdog_proto_v1alpha2_hop_report_custom_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_hop_report_custom_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa5, 0x07, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda,
	0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x5b, 0x0a, 0x0d,
	0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0c, 0x48, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x03,
	0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4b,
	0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x0d,
	0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x12, 0x08, 0x1a, 0x04, 0x08, 0xa0,
	0x8d, 0x06, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x22, 0xc2,
	0x85, 0x2c, 0x1e, 0x32, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x32, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x3a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x3a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x87, 0x03, 0x0a, 0x0a, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x49, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x68,
	0x6f, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x5a, 0x0a, 0x0c, 0x48, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0xce, 0x01, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x14, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00,
	0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x68,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescData = watchdog_proto_v1alpha2_hop_report_custom_proto_rawDesc
)

func watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_hop_report_custom_proto_rawDescData
}

var watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var watchdog_proto_v1alpha2_hop_report_custom_proto_goTypes = []interface{}{
	(*ReportHopsRequest)(nil),     // 0: ntt.watchdog.v1alpha2.ReportHopsRequest
	(*ReportHopsResponse)(nil),    // 1: ntt.watchdog.v1alpha2.ReportHopsResponse
	(*PathStats)(nil),             // 2: ntt.watchdog.v1alpha2.PathStats
	(*GetHopReportsRequest)(nil),  // 3: ntt.watchdog.v1alpha2.GetHopReportsRequest
	(*HopsReport)(nil),            // 4: ntt.watchdog.v1alpha2.HopsReport
	(*GetHopReportsResponse)(nil), // 5: ntt.watchdog.v1alpha2.GetHopReportsResponse
	nil,                           // 6: ntt.watchdog.v1alpha2.ReportHopsRequest.HopStatsEntry
	nil,                           // 7: ntt.watchdog.v1alpha2.ReportHopsRequest.HopInfoEntry
	nil,                           // 8: ntt.watchdog.v1alpha2.PathStats.HopStatsEntry
	nil,                           // 9: ntt.watchdog.v1alpha2.GetHopReportsResponse.HopInfoEntry
	(common.IpVersion)(0),         // 10: ntt.watchdog.v1alpha2.IpVersion
	(common.ProbingMode)(0),       // 11: ntt.watchdog.v1alpha2.ProbingMode
	(common.TraceType)(0),         // 12: ntt.watchdog.v1alpha2.TraceType
	(*common.Path)(nil),           // 13: ntt.watchdog.v1alpha2.Path
	(*common.HopStat)(nil),        // 14: ntt.watchdog.v1alpha2.HopStat
	(*common.HopInfo)(nil),        // 15: ntt.watchdog.v1alpha2.HopInfo
	(common.TraceReason)(0),       // 16: ntt.watchdog.v1alpha2.TraceReason
	(*timestamp.Timestamp)(nil),   // 17: google.protobuf.Timestamp
	(*common.TimeInterval)(nil),   // 18: ntt.watchdog.v1alpha2.TimeInterval
}
var watchdog_proto_v1alpha2_hop_report_custom_proto_depIdxs = []int32{
	10, // 0: ntt.watchdog.v1alpha2.ReportHopsRequest.ip_version:type_name -> ntt.watchdog.v1alpha2.IpVersion
	11, // 1: ntt.watchdog.v1alpha2.ReportHopsRequest.mode:type_name -> ntt.watchdog.v1alpha2.ProbingMode
	12, // 2: ntt.watchdog.v1alpha2.ReportHopsRequest.trace_type:type_name -> ntt.watchdog.v1alpha2.TraceType
	13, // 3: ntt.watchdog.v1alpha2.ReportHopsRequest.paths:type_name -> ntt.watchdog.v1alpha2.Path
	6,  // 4: ntt.watchdog.v1alpha2.ReportHopsRequest.hop_stats:type_name -> ntt.watchdog.v1alpha2.ReportHopsRequest.HopStatsEntry
	7,  // 5: ntt.watchdog.v1alpha2.ReportHopsRequest.hop_info:type_name -> ntt.watchdog.v1alpha2.ReportHopsRequest.HopInfoEntry
	16, // 6: ntt.watchdog.v1alpha2.ReportHopsRequest.trace_reason:type_name -> ntt.watchdog.v1alpha2.TraceReason
	17, // 7: ntt.watchdog.v1alpha2.ReportHopsRequest.time:type_name -> google.protobuf.Timestamp
	17, // 8: ntt.watchdog.v1alpha2.PathStats.time:type_name -> google.protobuf.Timestamp
	13, // 9: ntt.watchdog.v1alpha2.PathStats.paths:type_name -> ntt.watchdog.v1alpha2.Path
	8,  // 10: ntt.watchdog.v1alpha2.PathStats.hop_stats:type_name -> ntt.watchdog.v1alpha2.PathStats.HopStatsEntry
	16, // 11: ntt.watchdog.v1alpha2.PathStats.trace_reason:type_name -> ntt.watchdog.v1alpha2.TraceReason
	18, // 12: ntt.watchdog.v1alpha2.GetHopReportsRequest.interval:type_name -> ntt.watchdog.v1alpha2.TimeInterval
	10, // 13: ntt.watchdog.v1alpha2.HopsReport.ip_version:type_name -> ntt.watchdog.v1alpha2.IpVersion
	11, // 14: ntt.watchdog.v1alpha2.HopsReport.mode:type_name -> ntt.watchdog.v1alpha2.ProbingMode
	12, // 15: ntt.watchdog.v1alpha2.HopsReport.trace_type:type_name -> ntt.watchdog.v1alpha2.TraceType
	2,  // 16: ntt.watchdog.v1alpha2.HopsReport.path_stats:type_name -> ntt.watchdog.v1alpha2.PathStats
	4,  // 17: ntt.watchdog.v1alpha2.GetHopReportsResponse.hops_report:type_name -> ntt.watchdog.v1alpha2.HopsReport
	9,  // 18: ntt.watchdog.v1alpha2.GetHopReportsResponse.hop_info:type_name -> ntt.watchdog.v1alpha2.GetHopReportsResponse.HopInfoEntry
	14, // 19: ntt.watchdog.v1alpha2.ReportHopsRequest.HopStatsEntry.value:type_name -> ntt.watchdog.v1alpha2.HopStat
	15, // 20: ntt.watchdog.v1alpha2.ReportHopsRequest.HopInfoEntry.value:type_name -> ntt.watchdog.v1alpha2.HopInfo
	14, // 21: ntt.watchdog.v1alpha2.PathStats.HopStatsEntry.value:type_name -> ntt.watchdog.v1alpha2.HopStat
	15, // 22: ntt.watchdog.v1alpha2.GetHopReportsResponse.HopInfoEntry.value:type_name -> ntt.watchdog.v1alpha2.HopInfo
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_hop_report_custom_proto_init() }
func watchdog_proto_v1alpha2_hop_report_custom_proto_init() {
	if watchdog_proto_v1alpha2_hop_report_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHopReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHopReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_hop_report_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_hop_report_custom_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_hop_report_custom_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_hop_report_custom_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_hop_report_custom_proto = out.File
	watchdog_proto_v1alpha2_hop_report_custom_proto_rawDesc = nil
	watchdog_proto_v1alpha2_hop_report_custom_proto_goTypes = nil
	watchdog_proto_v1alpha2_hop_report_custom_proto_depIdxs = nil
}
