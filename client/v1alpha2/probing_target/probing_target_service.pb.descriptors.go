// Code generated by protoc-gen-goten-client
// API: ProbingTargetService
// DO NOT EDIT!!!

package probing_target_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_target.ProbingTarget{}
)

var (
	descriptorsInitialized           bool
	probingTargetServiceDescriptor   *ProbingTargetServiceDescriptor
	getProbingTargetDescriptor       *GetProbingTargetDescriptor
	batchGetProbingTargetsDescriptor *BatchGetProbingTargetsDescriptor
	listProbingTargetsDescriptor     *ListProbingTargetsDescriptor
	watchProbingTargetDescriptor     *WatchProbingTargetDescriptor
	watchProbingTargetsDescriptor    *WatchProbingTargetsDescriptor
	createProbingTargetDescriptor    *CreateProbingTargetDescriptor
	updateProbingTargetDescriptor    *UpdateProbingTargetDescriptor
	deleteProbingTargetDescriptor    *DeleteProbingTargetDescriptor
	searchProbingTargetsDescriptor   *SearchProbingTargetsDescriptor
)

type GetProbingTargetDescriptor struct{}

type GetProbingTargetDescriptorClientMsgHandle struct{}

type GetProbingTargetDescriptorServerMsgHandle struct{}

func (d *GetProbingTargetDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProbingTargetRequest{}
}

func (d *GetProbingTargetDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target.ProbingTarget{}
}

func (d *GetProbingTargetDescriptor) IsUnary() bool {
	return true
}

func (d *GetProbingTargetDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProbingTargetDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProbingTargetDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProbingTargetDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProbingTargetDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProbingTargetDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProbingTargetDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProbingTargetDescriptor) GetMethodName() string {
	return "GetProbingTarget"
}

func (d *GetProbingTargetDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/GetProbingTarget"
}

func (d *GetProbingTargetDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *GetProbingTargetDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *GetProbingTargetDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *GetProbingTargetDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProbingTargetDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *GetProbingTargetDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *GetProbingTargetDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingTargetDescriptorClientMsgHandle{}
}

func (d *GetProbingTargetDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProbingTargetDescriptorServerMsgHandle{}
}

func (h *GetProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProbingTargetRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_target.Name)(nil)
}

func (h *GetProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProbingTargetRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingTargetDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProbingTargetRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_target.ProbingTarget) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_target.ProbingTarget) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProbingTargetDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_target.ProbingTarget) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProbingTargetDescriptor() *GetProbingTargetDescriptor {
	return getProbingTargetDescriptor
}

type BatchGetProbingTargetsDescriptor struct{}

type BatchGetProbingTargetsDescriptorClientMsgHandle struct{}

type BatchGetProbingTargetsDescriptorServerMsgHandle struct{}

func (d *BatchGetProbingTargetsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProbingTargetsRequest{}
}

func (d *BatchGetProbingTargetsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProbingTargetsResponse{}
}

func (d *BatchGetProbingTargetsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProbingTargetsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProbingTargetsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProbingTargetsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProbingTargetsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProbingTargetsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProbingTargetsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProbingTargetsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProbingTargetsDescriptor) GetMethodName() string {
	return "BatchGetProbingTargets"
}

func (d *BatchGetProbingTargetsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/BatchGetProbingTargets"
}

func (d *BatchGetProbingTargetsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *BatchGetProbingTargetsDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *BatchGetProbingTargetsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *BatchGetProbingTargetsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProbingTargetsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *BatchGetProbingTargetsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *BatchGetProbingTargetsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingTargetsDescriptorClientMsgHandle{}
}

func (d *BatchGetProbingTargetsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProbingTargetsDescriptorServerMsgHandle{}
}

func (h *BatchGetProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingTargetsRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingTargetsRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(probing_target.ProbingTargetNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (probing_target.ProbingTargetNameList)(nil)
}

func (h *BatchGetProbingTargetsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingTargetsRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProbingTargetsResponse) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProbingTargetsResponse) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingTargets()
	list := make(probing_target.ProbingTargetNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProbingTargetsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProbingTargetsResponse) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProbingTargetsDescriptor() *BatchGetProbingTargetsDescriptor {
	return batchGetProbingTargetsDescriptor
}

type ListProbingTargetsDescriptor struct{}

type ListProbingTargetsDescriptorClientMsgHandle struct{}

type ListProbingTargetsDescriptorServerMsgHandle struct{}

func (d *ListProbingTargetsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProbingTargetsRequest{}
}

func (d *ListProbingTargetsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProbingTargetsResponse{}
}

func (d *ListProbingTargetsDescriptor) IsUnary() bool {
	return true
}

func (d *ListProbingTargetsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProbingTargetsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProbingTargetsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProbingTargetsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProbingTargetsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProbingTargetsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProbingTargetsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProbingTargetsDescriptor) GetMethodName() string {
	return "ListProbingTargets"
}

func (d *ListProbingTargetsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/ListProbingTargets"
}

func (d *ListProbingTargetsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ListProbingTargetsDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *ListProbingTargetsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ListProbingTargetsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProbingTargetsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *ListProbingTargetsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *ListProbingTargetsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingTargetsDescriptorClientMsgHandle{}
}

func (d *ListProbingTargetsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProbingTargetsDescriptorServerMsgHandle{}
}

func (h *ListProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingTargetsRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingTargetsRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProbingTargetsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingTargetsRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProbingTargetsResponse) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProbingTargetsResponse) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingTargets()
	list := make(probing_target.ProbingTargetNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProbingTargetsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProbingTargetsResponse) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProbingTargetsDescriptor() *ListProbingTargetsDescriptor {
	return listProbingTargetsDescriptor
}

type WatchProbingTargetDescriptor struct{}

type WatchProbingTargetDescriptorClientMsgHandle struct{}

type WatchProbingTargetDescriptorServerMsgHandle struct{}

func (d *WatchProbingTargetDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingTargetRequest{}
}

func (d *WatchProbingTargetDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingTargetResponse{}
}

func (d *WatchProbingTargetDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingTargetDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingTargetDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingTargetDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProbingTargetDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProbingTargetDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingTargetDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingTargetDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingTargetDescriptor) GetMethodName() string {
	return "WatchProbingTarget"
}

func (d *WatchProbingTargetDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/WatchProbingTarget"
}

func (d *WatchProbingTargetDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingTargetDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *WatchProbingTargetDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingTargetDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingTargetDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *WatchProbingTargetDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *WatchProbingTargetDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetDescriptorClientMsgHandle{}
}

func (d *WatchProbingTargetDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetDescriptorServerMsgHandle{}
}

func (h *WatchProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingTargetRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_target.Name)(nil)
}

func (h *WatchProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingTargetRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingTargetRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingTargetResponse) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *probing_target.ProbingTargetChange_Added_:
			return tResChange.Added.GetProbingTarget().GetName()
		case *probing_target.ProbingTargetChange_Modified_:
			return tResChange.Modified.GetName()
		case *probing_target.ProbingTargetChange_Removed_:
			return tResChange.Removed.GetName()
		case *probing_target.ProbingTargetChange_Current_:
			return tResChange.Current.GetProbingTarget().GetName()
		}
	}
	return (*probing_target.Name)(nil)
}

func (h *WatchProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingTargetResponse) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingTargetResponse) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingTargetDescriptor() *WatchProbingTargetDescriptor {
	return watchProbingTargetDescriptor
}

type WatchProbingTargetsDescriptor struct{}

type WatchProbingTargetsDescriptorClientMsgHandle struct{}

type WatchProbingTargetsDescriptorServerMsgHandle struct{}

func (d *WatchProbingTargetsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProbingTargetsRequest{}
}

func (d *WatchProbingTargetsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProbingTargetsResponse{}
}

func (d *WatchProbingTargetsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProbingTargetsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProbingTargetsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProbingTargetsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProbingTargetsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProbingTargetsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProbingTargetsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProbingTargetsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProbingTargetsDescriptor) GetMethodName() string {
	return "WatchProbingTargets"
}

func (d *WatchProbingTargetsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/WatchProbingTargets"
}

func (d *WatchProbingTargetsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *WatchProbingTargetsDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *WatchProbingTargetsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *WatchProbingTargetsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProbingTargetsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *WatchProbingTargetsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *WatchProbingTargetsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetsDescriptorClientMsgHandle{}
}

func (d *WatchProbingTargetsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProbingTargetsDescriptorServerMsgHandle{}
}

func (h *WatchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingTargetsRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingTargetsRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingTargetsRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_target.ParentName)(nil)
}

func (h *WatchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProbingTargetsResponse) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProbingTargetsResponse) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProbingTargetChanges()
	list := make(probing_target.ProbingTargetNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *probing_target.ProbingTargetChange_Added_:
			list = append(list, tResChange.Added.GetProbingTarget().GetName())
		case *probing_target.ProbingTargetChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *probing_target.ProbingTargetChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *probing_target.ProbingTargetChange_Current_:
			list = append(list, tResChange.Current.GetProbingTarget().GetName())
		}
	}
	return list
}

func (h *WatchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProbingTargetsResponse) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProbingTargetsDescriptor() *WatchProbingTargetsDescriptor {
	return watchProbingTargetsDescriptor
}

type CreateProbingTargetDescriptor struct{}

type CreateProbingTargetDescriptorClientMsgHandle struct{}

type CreateProbingTargetDescriptorServerMsgHandle struct{}

func (d *CreateProbingTargetDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProbingTargetRequest{}
}

func (d *CreateProbingTargetDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target.ProbingTarget{}
}

func (d *CreateProbingTargetDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProbingTargetDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProbingTargetDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProbingTargetDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProbingTargetDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProbingTargetDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProbingTargetDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProbingTargetDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProbingTargetDescriptor) GetMethodName() string {
	return "CreateProbingTarget"
}

func (d *CreateProbingTargetDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/CreateProbingTarget"
}

func (d *CreateProbingTargetDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *CreateProbingTargetDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *CreateProbingTargetDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *CreateProbingTargetDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProbingTargetDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *CreateProbingTargetDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *CreateProbingTargetDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingTargetDescriptorClientMsgHandle{}
}

func (d *CreateProbingTargetDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProbingTargetDescriptorServerMsgHandle{}
}

func (h *CreateProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProbingTargetRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingTarget().GetName()
}

func (h *CreateProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProbingTargetRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingTargetDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProbingTargetRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*probing_target.ParentName)(nil)
}

func (h *CreateProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_target.ProbingTarget) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_target.ProbingTarget) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProbingTargetDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_target.ProbingTarget) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProbingTargetDescriptor() *CreateProbingTargetDescriptor {
	return createProbingTargetDescriptor
}

type UpdateProbingTargetDescriptor struct{}

type UpdateProbingTargetDescriptorClientMsgHandle struct{}

type UpdateProbingTargetDescriptorServerMsgHandle struct{}

func (d *UpdateProbingTargetDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProbingTargetRequest{}
}

func (d *UpdateProbingTargetDescriptor) NewEmptyServerMsg() proto.Message {
	return &probing_target.ProbingTarget{}
}

func (d *UpdateProbingTargetDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProbingTargetDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProbingTargetDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProbingTargetDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProbingTargetDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProbingTargetDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProbingTargetDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProbingTargetDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProbingTargetDescriptor) GetMethodName() string {
	return "UpdateProbingTarget"
}

func (d *UpdateProbingTargetDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/UpdateProbingTarget"
}

func (d *UpdateProbingTargetDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *UpdateProbingTargetDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *UpdateProbingTargetDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *UpdateProbingTargetDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProbingTargetDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *UpdateProbingTargetDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *UpdateProbingTargetDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingTargetDescriptorClientMsgHandle{}
}

func (d *UpdateProbingTargetDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProbingTargetDescriptorServerMsgHandle{}
}

func (h *UpdateProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProbingTargetRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProbingTarget().GetName()
}

func (h *UpdateProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProbingTargetRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingTargetDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProbingTargetRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*probing_target.ProbingTarget) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*probing_target.ProbingTarget) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProbingTargetDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*probing_target.ProbingTarget)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*probing_target.ProbingTarget) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProbingTargetDescriptor() *UpdateProbingTargetDescriptor {
	return updateProbingTargetDescriptor
}

type DeleteProbingTargetDescriptor struct{}

type DeleteProbingTargetDescriptorClientMsgHandle struct{}

type DeleteProbingTargetDescriptorServerMsgHandle struct{}

func (d *DeleteProbingTargetDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProbingTargetRequest{}
}

func (d *DeleteProbingTargetDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProbingTargetDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProbingTargetDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProbingTargetDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProbingTargetDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProbingTargetDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProbingTargetDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProbingTargetDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProbingTargetDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProbingTargetDescriptor) GetMethodName() string {
	return "DeleteProbingTarget"
}

func (d *DeleteProbingTargetDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/DeleteProbingTarget"
}

func (d *DeleteProbingTargetDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *DeleteProbingTargetDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *DeleteProbingTargetDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *DeleteProbingTargetDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProbingTargetDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *DeleteProbingTargetDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *DeleteProbingTargetDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingTargetDescriptorClientMsgHandle{}
}

func (d *DeleteProbingTargetDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProbingTargetDescriptorServerMsgHandle{}
}

func (h *DeleteProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProbingTargetRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*probing_target.Name)(nil)
}

func (h *DeleteProbingTargetDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProbingTargetRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingTargetDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProbingTargetRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProbingTargetRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProbingTargetDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProbingTargetDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProbingTargetDescriptor() *DeleteProbingTargetDescriptor {
	return deleteProbingTargetDescriptor
}

type SearchProbingTargetsDescriptor struct{}

type SearchProbingTargetsDescriptorClientMsgHandle struct{}

type SearchProbingTargetsDescriptorServerMsgHandle struct{}

func (d *SearchProbingTargetsDescriptor) NewEmptyClientMsg() proto.Message {
	return &SearchProbingTargetsRequest{}
}

func (d *SearchProbingTargetsDescriptor) NewEmptyServerMsg() proto.Message {
	return &SearchProbingTargetsResponse{}
}

func (d *SearchProbingTargetsDescriptor) IsUnary() bool {
	return true
}

func (d *SearchProbingTargetsDescriptor) IsClientStream() bool {
	return false
}

func (d *SearchProbingTargetsDescriptor) IsServerStream() bool {
	return false
}

func (d *SearchProbingTargetsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *SearchProbingTargetsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *SearchProbingTargetsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *SearchProbingTargetsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SearchProbingTargetsDescriptor) GetVerb() string {
	return "search"
}

func (d *SearchProbingTargetsDescriptor) GetMethodName() string {
	return "SearchProbingTargets"
}

func (d *SearchProbingTargetsDescriptor) GetFullMethodName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService/SearchProbingTargets"
}

func (d *SearchProbingTargetsDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *SearchProbingTargetsDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *SearchProbingTargetsDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *SearchProbingTargetsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *SearchProbingTargetsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return probingTargetServiceDescriptor
}

func (d *SearchProbingTargetsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return probing_target.GetDescriptor()
}

func (d *SearchProbingTargetsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingTargetsDescriptorClientMsgHandle{}
}

func (d *SearchProbingTargetsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SearchProbingTargetsDescriptorServerMsgHandle{}
}

func (h *SearchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbingTargetsRequest) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbingTargetsRequest) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *SearchProbingTargetsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbingTargetsRequest) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *SearchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*SearchProbingTargetsResponse) *probing_target.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *SearchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SearchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*SearchProbingTargetsResponse) []*probing_target.Name
	})
	if ok {
		return probing_target.ProbingTargetNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProbingTargets()
	list := make(probing_target.ProbingTargetNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *SearchProbingTargetsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SearchProbingTargetsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*SearchProbingTargetsResponse) *probing_target.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetSearchProbingTargetsDescriptor() *SearchProbingTargetsDescriptor {
	return searchProbingTargetsDescriptor
}

type ProbingTargetServiceDescriptor struct{}

func (d *ProbingTargetServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProbingTargetDescriptor,
		batchGetProbingTargetsDescriptor,
		listProbingTargetsDescriptor,
		watchProbingTargetDescriptor,
		watchProbingTargetsDescriptor,
		createProbingTargetDescriptor,
		updateProbingTargetDescriptor,
		deleteProbingTargetDescriptor,
		searchProbingTargetsDescriptor,
	}
}

func (d *ProbingTargetServiceDescriptor) GetFullAPIName() string {
	return "/ntt.watchdog.v1alpha2.ProbingTargetService"
}

func (d *ProbingTargetServiceDescriptor) GetProtoPkgName() string {
	return "ntt.watchdog.v1alpha2"
}

func (d *ProbingTargetServiceDescriptor) GetApiName() string {
	return "ProbingTargetService"
}

func (d *ProbingTargetServiceDescriptor) GetServiceDomain() string {
	return "watchdog.edgelq.com"
}

func (d *ProbingTargetServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProbingTargetServiceDescriptor() *ProbingTargetServiceDescriptor {
	return probingTargetServiceDescriptor
}

func initDescriptors() {
	probingTargetServiceDescriptor = &ProbingTargetServiceDescriptor{}
	getProbingTargetDescriptor = &GetProbingTargetDescriptor{}
	batchGetProbingTargetsDescriptor = &BatchGetProbingTargetsDescriptor{}
	listProbingTargetsDescriptor = &ListProbingTargetsDescriptor{}
	watchProbingTargetDescriptor = &WatchProbingTargetDescriptor{}
	watchProbingTargetsDescriptor = &WatchProbingTargetsDescriptor{}
	createProbingTargetDescriptor = &CreateProbingTargetDescriptor{}
	updateProbingTargetDescriptor = &UpdateProbingTargetDescriptor{}
	deleteProbingTargetDescriptor = &DeleteProbingTargetDescriptor{}
	searchProbingTargetsDescriptor = &SearchProbingTargetsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(probingTargetServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProbingTargetDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProbingTargetsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProbingTargetsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingTargetDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProbingTargetsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProbingTargetDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProbingTargetDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProbingTargetDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(searchProbingTargetsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
