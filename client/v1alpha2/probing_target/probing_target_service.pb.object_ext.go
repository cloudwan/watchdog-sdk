// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_service.proto
// DO NOT EDIT!!!

package probing_target_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

func (o *GetProbingTargetRequest) GotenObjectExt() {}

func (o *GetProbingTargetRequest) MakeFullFieldMask() *GetProbingTargetRequest_FieldMask {
	return FullGetProbingTargetRequest_FieldMask()
}

func (o *GetProbingTargetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProbingTargetRequest_FieldMask()
}

func (o *GetProbingTargetRequest) MakeDiffFieldMask(other *GetProbingTargetRequest) *GetProbingTargetRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProbingTargetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProbingTargetRequest_FieldMask()
	}

	res := &GetProbingTargetRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProbingTargetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProbingTargetRequest))
}

func (o *GetProbingTargetRequest) Clone() *GetProbingTargetRequest {
	if o == nil {
		return nil
	}
	result := &GetProbingTargetRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProbingTargetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProbingTargetRequest) Merge(source *GetProbingTargetRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProbingTargetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProbingTargetRequest))
}

func (o *BatchGetProbingTargetsRequest) GotenObjectExt() {}

func (o *BatchGetProbingTargetsRequest) MakeFullFieldMask() *BatchGetProbingTargetsRequest_FieldMask {
	return FullBatchGetProbingTargetsRequest_FieldMask()
}

func (o *BatchGetProbingTargetsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingTargetsRequest_FieldMask()
}

func (o *BatchGetProbingTargetsRequest) MakeDiffFieldMask(other *BatchGetProbingTargetsRequest) *BatchGetProbingTargetsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingTargetsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingTargetsRequest_FieldMask()
	}

	res := &BatchGetProbingTargetsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProbingTargetsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingTargetsRequest))
}

func (o *BatchGetProbingTargetsRequest) Clone() *BatchGetProbingTargetsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingTargetsRequest{}
	result.Names = make([]*probing_target.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &probing_target.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProbingTargetsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingTargetsRequest) Merge(source *BatchGetProbingTargetsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_target.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProbingTargetsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingTargetsRequest))
}

func (o *BatchGetProbingTargetsResponse) GotenObjectExt() {}

func (o *BatchGetProbingTargetsResponse) MakeFullFieldMask() *BatchGetProbingTargetsResponse_FieldMask {
	return FullBatchGetProbingTargetsResponse_FieldMask()
}

func (o *BatchGetProbingTargetsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProbingTargetsResponse_FieldMask()
}

func (o *BatchGetProbingTargetsResponse) MakeDiffFieldMask(other *BatchGetProbingTargetsResponse) *BatchGetProbingTargetsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProbingTargetsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProbingTargetsResponse_FieldMask()
	}

	res := &BatchGetProbingTargetsResponse_FieldMask{}

	if len(o.GetProbingTargets()) == len(other.GetProbingTargets()) {
		for i, lValue := range o.GetProbingTargets() {
			rValue := other.GetProbingTargets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProbingTargetsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProbingTargetsResponse))
}

func (o *BatchGetProbingTargetsResponse) Clone() *BatchGetProbingTargetsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProbingTargetsResponse{}
	result.ProbingTargets = make([]*probing_target.ProbingTarget, len(o.ProbingTargets))
	for i, sourceValue := range o.ProbingTargets {
		result.ProbingTargets[i] = sourceValue.Clone()
	}
	result.Missing = make([]*probing_target.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &probing_target.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProbingTargetsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProbingTargetsResponse) Merge(source *BatchGetProbingTargetsResponse) {
	for _, sourceValue := range source.GetProbingTargets() {
		exists := false
		for _, currentValue := range o.ProbingTargets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.ProbingTarget
			if sourceValue != nil {
				newDstElement = new(probing_target.ProbingTarget)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargets = append(o.ProbingTargets, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_target.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProbingTargetsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProbingTargetsResponse))
}

func (o *ListProbingTargetsRequest) GotenObjectExt() {}

func (o *ListProbingTargetsRequest) MakeFullFieldMask() *ListProbingTargetsRequest_FieldMask {
	return FullListProbingTargetsRequest_FieldMask()
}

func (o *ListProbingTargetsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingTargetsRequest_FieldMask()
}

func (o *ListProbingTargetsRequest) MakeDiffFieldMask(other *ListProbingTargetsRequest) *ListProbingTargetsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProbingTargetsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingTargetsRequest_FieldMask()
	}

	res := &ListProbingTargetsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListProbingTargetsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingTargetsRequest))
}

func (o *ListProbingTargetsRequest) Clone() *ListProbingTargetsRequest {
	if o == nil {
		return nil
	}
	result := &ListProbingTargetsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	return result
}

func (o *ListProbingTargetsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingTargetsRequest) Merge(source *ListProbingTargetsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListProbingTargetsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingTargetsRequest))
}

func (o *ListProbingTargetsResponse) GotenObjectExt() {}

func (o *ListProbingTargetsResponse) MakeFullFieldMask() *ListProbingTargetsResponse_FieldMask {
	return FullListProbingTargetsResponse_FieldMask()
}

func (o *ListProbingTargetsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProbingTargetsResponse_FieldMask()
}

func (o *ListProbingTargetsResponse) MakeDiffFieldMask(other *ListProbingTargetsResponse) *ListProbingTargetsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProbingTargetsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProbingTargetsResponse_FieldMask()
	}

	res := &ListProbingTargetsResponse_FieldMask{}

	if len(o.GetProbingTargets()) == len(other.GetProbingTargets()) {
		for i, lValue := range o.GetProbingTargets() {
			rValue := other.GetProbingTargets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorProbingTargets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorProbingTargets})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListProbingTargetsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProbingTargetsResponse))
}

func (o *ListProbingTargetsResponse) Clone() *ListProbingTargetsResponse {
	if o == nil {
		return nil
	}
	result := &ListProbingTargetsResponse{}
	result.ProbingTargets = make([]*probing_target.ProbingTarget, len(o.ProbingTargets))
	for i, sourceValue := range o.ProbingTargets {
		result.ProbingTargets[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListProbingTargetsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProbingTargetsResponse) Merge(source *ListProbingTargetsResponse) {
	for _, sourceValue := range source.GetProbingTargets() {
		exists := false
		for _, currentValue := range o.ProbingTargets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.ProbingTarget
			if sourceValue != nil {
				newDstElement = new(probing_target.ProbingTarget)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargets = append(o.ProbingTargets, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListProbingTargetsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProbingTargetsResponse))
}

func (o *WatchProbingTargetRequest) GotenObjectExt() {}

func (o *WatchProbingTargetRequest) MakeFullFieldMask() *WatchProbingTargetRequest_FieldMask {
	return FullWatchProbingTargetRequest_FieldMask()
}

func (o *WatchProbingTargetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetRequest_FieldMask()
}

func (o *WatchProbingTargetRequest) MakeDiffFieldMask(other *WatchProbingTargetRequest) *WatchProbingTargetRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetRequest_FieldMask()
	}

	res := &WatchProbingTargetRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProbingTargetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetRequest))
}

func (o *WatchProbingTargetRequest) Clone() *WatchProbingTargetRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProbingTargetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetRequest) Merge(source *WatchProbingTargetRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProbingTargetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetRequest))
}

func (o *WatchProbingTargetResponse) GotenObjectExt() {}

func (o *WatchProbingTargetResponse) MakeFullFieldMask() *WatchProbingTargetResponse_FieldMask {
	return FullWatchProbingTargetResponse_FieldMask()
}

func (o *WatchProbingTargetResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetResponse_FieldMask()
}

func (o *WatchProbingTargetResponse) MakeDiffFieldMask(other *WatchProbingTargetResponse) *WatchProbingTargetResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetResponse_FieldMask()
	}

	res := &WatchProbingTargetResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProbingTargetResponse_FieldTerminalPath{selector: WatchProbingTargetResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProbingTargetResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetResponse))
}

func (o *WatchProbingTargetResponse) Clone() *WatchProbingTargetResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetResponse{}
	result.Change = proto.Clone(o.Change).(*probing_target.ProbingTargetChange)
	return result
}

func (o *WatchProbingTargetResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetResponse) Merge(source *WatchProbingTargetResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(probing_target.ProbingTargetChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProbingTargetResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetResponse))
}

func (o *WatchProbingTargetsRequest) GotenObjectExt() {}

func (o *WatchProbingTargetsRequest) MakeFullFieldMask() *WatchProbingTargetsRequest_FieldMask {
	return FullWatchProbingTargetsRequest_FieldMask()
}

func (o *WatchProbingTargetsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetsRequest_FieldMask()
}

func (o *WatchProbingTargetsRequest) MakeDiffFieldMask(other *WatchProbingTargetsRequest) *WatchProbingTargetsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetsRequest_FieldMask()
	}

	res := &WatchProbingTargetsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProbingTargetsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetsRequest))
}

func (o *WatchProbingTargetsRequest) Clone() *WatchProbingTargetsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProbingTargetsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetsRequest) Merge(source *WatchProbingTargetsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProbingTargetsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetsRequest))
}

func (o *WatchProbingTargetsResponse) GotenObjectExt() {}

func (o *WatchProbingTargetsResponse) MakeFullFieldMask() *WatchProbingTargetsResponse_FieldMask {
	return FullWatchProbingTargetsResponse_FieldMask()
}

func (o *WatchProbingTargetsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetsResponse_FieldMask()
}

func (o *WatchProbingTargetsResponse) MakeDiffFieldMask(other *WatchProbingTargetsResponse) *WatchProbingTargetsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetsResponse_FieldMask()
	}

	res := &WatchProbingTargetsResponse_FieldMask{}

	if len(o.GetProbingTargetChanges()) == len(other.GetProbingTargetChanges()) {
		for i, lValue := range o.GetProbingTargetChanges() {
			rValue := other.GetProbingTargetChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldSubPath{selector: WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProbingTargetsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetsResponse))
}

func (o *WatchProbingTargetsResponse) Clone() *WatchProbingTargetsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetsResponse{}
	result.ProbingTargetChanges = make([]*probing_target.ProbingTargetChange, len(o.ProbingTargetChanges))
	for i, sourceValue := range o.ProbingTargetChanges {
		result.ProbingTargetChanges[i] = proto.Clone(sourceValue).(*probing_target.ProbingTargetChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProbingTargetsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetsResponse) Merge(source *WatchProbingTargetsResponse) {
	for _, sourceValue := range source.GetProbingTargetChanges() {
		exists := false
		for _, currentValue := range o.ProbingTargetChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.ProbingTargetChange
			if sourceValue != nil {
				newDstElement = new(probing_target.ProbingTargetChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProbingTargetChanges = append(o.ProbingTargetChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProbingTargetsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProbingTargetsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetsResponse))
}

func (o *WatchProbingTargetsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProbingTargetsResponse_PageTokenChange) MakeFullFieldMask() *WatchProbingTargetsResponse_PageTokenChange_FieldMask {
	return FullWatchProbingTargetsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingTargetsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProbingTargetsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProbingTargetsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProbingTargetsResponse_PageTokenChange) *WatchProbingTargetsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProbingTargetsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProbingTargetsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProbingTargetsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProbingTargetsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProbingTargetsResponse_PageTokenChange))
}

func (o *WatchProbingTargetsResponse_PageTokenChange) Clone() *WatchProbingTargetsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProbingTargetsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProbingTargetsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProbingTargetsResponse_PageTokenChange) Merge(source *WatchProbingTargetsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProbingTargetsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProbingTargetsResponse_PageTokenChange))
}

func (o *CreateProbingTargetRequest) GotenObjectExt() {}

func (o *CreateProbingTargetRequest) MakeFullFieldMask() *CreateProbingTargetRequest_FieldMask {
	return FullCreateProbingTargetRequest_FieldMask()
}

func (o *CreateProbingTargetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProbingTargetRequest_FieldMask()
}

func (o *CreateProbingTargetRequest) MakeDiffFieldMask(other *CreateProbingTargetRequest) *CreateProbingTargetRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProbingTargetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProbingTargetRequest_FieldMask()
	}

	res := &CreateProbingTargetRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProbingTargetRequest_FieldTerminalPath{selector: CreateProbingTargetRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProbingTarget().MakeDiffFieldMask(other.GetProbingTarget())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProbingTargetRequest_FieldTerminalPath{selector: CreateProbingTargetRequest_FieldPathSelectorProbingTarget})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProbingTargetRequest_FieldSubPath{selector: CreateProbingTargetRequest_FieldPathSelectorProbingTarget, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProbingTargetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProbingTargetRequest))
}

func (o *CreateProbingTargetRequest) Clone() *CreateProbingTargetRequest {
	if o == nil {
		return nil
	}
	result := &CreateProbingTargetRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingTarget = o.ProbingTarget.Clone()
	return result
}

func (o *CreateProbingTargetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProbingTargetRequest) Merge(source *CreateProbingTargetRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProbingTarget() != nil {
		if o.ProbingTarget == nil {
			o.ProbingTarget = new(probing_target.ProbingTarget)
		}
		o.ProbingTarget.Merge(source.GetProbingTarget())
	}
}

func (o *CreateProbingTargetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProbingTargetRequest))
}

func (o *UpdateProbingTargetRequest) GotenObjectExt() {}

func (o *UpdateProbingTargetRequest) MakeFullFieldMask() *UpdateProbingTargetRequest_FieldMask {
	return FullUpdateProbingTargetRequest_FieldMask()
}

func (o *UpdateProbingTargetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingTargetRequest_FieldMask()
}

func (o *UpdateProbingTargetRequest) MakeDiffFieldMask(other *UpdateProbingTargetRequest) *UpdateProbingTargetRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingTargetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingTargetRequest_FieldMask()
	}

	res := &UpdateProbingTargetRequest_FieldMask{}
	{
		subMask := o.GetProbingTarget().MakeDiffFieldMask(other.GetProbingTarget())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorProbingTarget})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetRequest_FieldSubPath{selector: UpdateProbingTargetRequest_FieldPathSelectorProbingTarget, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetRequest_FieldSubPath{selector: UpdateProbingTargetRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProbingTargetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingTargetRequest))
}

func (o *UpdateProbingTargetRequest) Clone() *UpdateProbingTargetRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProbingTargetRequest{}
	result.ProbingTarget = o.ProbingTarget.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*probing_target.ProbingTarget_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProbingTargetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingTargetRequest) Merge(source *UpdateProbingTargetRequest) {
	if source.GetProbingTarget() != nil {
		if o.ProbingTarget == nil {
			o.ProbingTarget = new(probing_target.ProbingTarget)
		}
		o.ProbingTarget.Merge(source.GetProbingTarget())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProbingTargetRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProbingTargetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingTargetRequest))
}

func (o *UpdateProbingTargetRequest_CAS) GotenObjectExt() {}

func (o *UpdateProbingTargetRequest_CAS) MakeFullFieldMask() *UpdateProbingTargetRequest_CAS_FieldMask {
	return FullUpdateProbingTargetRequest_CAS_FieldMask()
}

func (o *UpdateProbingTargetRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProbingTargetRequest_CAS_FieldMask()
}

func (o *UpdateProbingTargetRequest_CAS) MakeDiffFieldMask(other *UpdateProbingTargetRequest_CAS) *UpdateProbingTargetRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProbingTargetRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProbingTargetRequest_CAS_FieldMask()
	}

	res := &UpdateProbingTargetRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProbingTargetRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProbingTargetRequestCAS_FieldSubPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProbingTargetRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProbingTargetRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProbingTargetRequest_CAS))
}

func (o *UpdateProbingTargetRequest_CAS) Clone() *UpdateProbingTargetRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProbingTargetRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	return result
}

func (o *UpdateProbingTargetRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProbingTargetRequest_CAS) Merge(source *UpdateProbingTargetRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(probing_target.ProbingTarget)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProbingTargetRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProbingTargetRequest_CAS))
}

func (o *DeleteProbingTargetRequest) GotenObjectExt() {}

func (o *DeleteProbingTargetRequest) MakeFullFieldMask() *DeleteProbingTargetRequest_FieldMask {
	return FullDeleteProbingTargetRequest_FieldMask()
}

func (o *DeleteProbingTargetRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProbingTargetRequest_FieldMask()
}

func (o *DeleteProbingTargetRequest) MakeDiffFieldMask(other *DeleteProbingTargetRequest) *DeleteProbingTargetRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProbingTargetRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProbingTargetRequest_FieldMask()
	}

	res := &DeleteProbingTargetRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProbingTargetRequest_FieldTerminalPath{selector: DeleteProbingTargetRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProbingTargetRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProbingTargetRequest))
}

func (o *DeleteProbingTargetRequest) Clone() *DeleteProbingTargetRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProbingTargetRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probing_target.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProbingTargetRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProbingTargetRequest) Merge(source *DeleteProbingTargetRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probing_target.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProbingTargetRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProbingTargetRequest))
}

func (o *SearchProbingTargetsRequest) GotenObjectExt() {}

func (o *SearchProbingTargetsRequest) MakeFullFieldMask() *SearchProbingTargetsRequest_FieldMask {
	return FullSearchProbingTargetsRequest_FieldMask()
}

func (o *SearchProbingTargetsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingTargetsRequest_FieldMask()
}

func (o *SearchProbingTargetsRequest) MakeDiffFieldMask(other *SearchProbingTargetsRequest) *SearchProbingTargetsRequest_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingTargetsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingTargetsRequest_FieldMask()
	}

	res := &SearchProbingTargetsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorView})
	}
	if o.GetPhrase() != other.GetPhrase() {
		res.Paths = append(res.Paths, &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPhrase})
	}
	return res
}

func (o *SearchProbingTargetsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingTargetsRequest))
}

func (o *SearchProbingTargetsRequest) Clone() *SearchProbingTargetsRequest {
	if o == nil {
		return nil
	}
	result := &SearchProbingTargetsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &probing_target.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &probing_target.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &probing_target.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &probing_target.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*probing_target.ProbingTarget_FieldMask)
	result.View = o.View
	result.Phrase = o.Phrase
	return result
}

func (o *SearchProbingTargetsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingTargetsRequest) Merge(source *SearchProbingTargetsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &probing_target.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &probing_target.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &probing_target.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &probing_target.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(probing_target.ProbingTarget_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.Phrase = source.GetPhrase()
}

func (o *SearchProbingTargetsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingTargetsRequest))
}

func (o *SearchProbingTargetsResponse) GotenObjectExt() {}

func (o *SearchProbingTargetsResponse) MakeFullFieldMask() *SearchProbingTargetsResponse_FieldMask {
	return FullSearchProbingTargetsResponse_FieldMask()
}

func (o *SearchProbingTargetsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchProbingTargetsResponse_FieldMask()
}

func (o *SearchProbingTargetsResponse) MakeDiffFieldMask(other *SearchProbingTargetsResponse) *SearchProbingTargetsResponse_FieldMask {
	if o == nil && other == nil {
		return &SearchProbingTargetsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchProbingTargetsResponse_FieldMask()
	}

	res := &SearchProbingTargetsResponse_FieldMask{}

	if len(o.GetProbingTargets()) == len(other.GetProbingTargets()) {
		for i, lValue := range o.GetProbingTargets() {
			rValue := other.GetProbingTargets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorProbingTargets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorProbingTargets})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *SearchProbingTargetsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchProbingTargetsResponse))
}

func (o *SearchProbingTargetsResponse) Clone() *SearchProbingTargetsResponse {
	if o == nil {
		return nil
	}
	result := &SearchProbingTargetsResponse{}
	result.ProbingTargets = make([]*probing_target.ProbingTarget, len(o.ProbingTargets))
	for i, sourceValue := range o.ProbingTargets {
		result.ProbingTargets[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &probing_target.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &probing_target.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *SearchProbingTargetsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchProbingTargetsResponse) Merge(source *SearchProbingTargetsResponse) {
	for _, sourceValue := range source.GetProbingTargets() {
		exists := false
		for _, currentValue := range o.ProbingTargets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_target.ProbingTarget
			if sourceValue != nil {
				newDstElement = new(probing_target.ProbingTarget)
				newDstElement.Merge(sourceValue)
			}
			o.ProbingTargets = append(o.ProbingTargets, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &probing_target.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &probing_target.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *SearchProbingTargetsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchProbingTargetsResponse))
}
