// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probing_target_service.proto
// DO NOT EDIT!!!

package probing_target_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetProbingTarget][ntt.watchdog.v1alpha2.GetProbingTarget]
type GetProbingTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.ProbingTarget
	Name *probing_target.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,3,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetProbingTargetRequest) Reset() {
	*m = GetProbingTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetProbingTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetProbingTargetRequest) ProtoMessage() {}

func (m *GetProbingTargetRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetProbingTargetRequest) GotenMessage() {}

// Deprecated, Use GetProbingTargetRequest.ProtoReflect.Descriptor instead.
func (*GetProbingTargetRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetProbingTargetRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetProbingTargetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetProbingTargetRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetProbingTargetRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetProbingTargetRequest) GetName() *probing_target.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetProbingTargetRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetProbingTargetRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetProbingTargetRequest) SetName(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetProbingTargetRequest"))
	}
	m.Name = fv
}

func (m *GetProbingTargetRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetProbingTargetRequest"))
	}
	m.FieldMask = fv
}

func (m *GetProbingTargetRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetProbingTargetRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetProbingTargets][ntt.watchdog.v1alpha2.BatchGetProbingTargets]
type BatchGetProbingTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional parent ntt.watchdog.v1alpha2.ProbingTarget
	Parent *probing_target.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Names of ProbingTargets
	Names []*probing_target.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,3,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetProbingTargetsRequest) Reset() {
	*m = BatchGetProbingTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetProbingTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetProbingTargetsRequest) ProtoMessage() {}

func (m *BatchGetProbingTargetsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetProbingTargetsRequest) GotenMessage() {}

// Deprecated, Use BatchGetProbingTargetsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetProbingTargetsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetProbingTargetsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetProbingTargetsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetProbingTargetsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetProbingTargetsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetProbingTargetsRequest) GetParent() *probing_target.Reference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *BatchGetProbingTargetsRequest) GetNames() []*probing_target.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetProbingTargetsRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetProbingTargetsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetProbingTargetsRequest) SetParent(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "BatchGetProbingTargetsRequest"))
	}
	m.Parent = fv
}

func (m *BatchGetProbingTargetsRequest) SetNames(fv []*probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetProbingTargetsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetProbingTargetsRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetProbingTargetsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetProbingTargetsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetProbingTargetsRequest"))
	}
	m.View = fv
}

// BatchGetProbingTargetsResponse
type BatchGetProbingTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found ProbingTargets
	ProbingTargets []*probing_target.ProbingTarget `protobuf:"bytes,1,rep,name=probing_targets,json=probingTargets,proto3" json:"probing_targets,omitempty" firestore:"probingTargets"`
	// list of not found ProbingTargets
	Missing []*probing_target.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetProbingTargetsResponse) Reset() {
	*m = BatchGetProbingTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetProbingTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetProbingTargetsResponse) ProtoMessage() {}

func (m *BatchGetProbingTargetsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetProbingTargetsResponse) GotenMessage() {}

// Deprecated, Use BatchGetProbingTargetsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetProbingTargetsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetProbingTargetsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetProbingTargetsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetProbingTargetsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetProbingTargetsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetProbingTargetsResponse) GetProbingTargets() []*probing_target.ProbingTarget {
	if m != nil {
		return m.ProbingTargets
	}
	return nil
}

func (m *BatchGetProbingTargetsResponse) GetMissing() []*probing_target.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetProbingTargetsResponse) SetProbingTargets(fv []*probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTargets", "BatchGetProbingTargetsResponse"))
	}
	m.ProbingTargets = fv
}

func (m *BatchGetProbingTargetsResponse) SetMissing(fv []*probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetProbingTargetsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListProbingTargets][ntt.watchdog.v1alpha2.ListProbingTargets]
type ListProbingTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.watchdog.v1alpha2.ProbingTarget
	Parent *probing_target.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbingTargets than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListProbingTargetsResponse.next_page_token][ntt.watchdog.v1alpha2.ListProbingTargetsResponse.next_page_token]
	PageToken *probing_target.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *probing_target.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probing_target.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,6,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListProbingTargetsRequest) Reset() {
	*m = ListProbingTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProbingTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProbingTargetsRequest) ProtoMessage() {}

func (m *ListProbingTargetsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProbingTargetsRequest) GotenMessage() {}

// Deprecated, Use ListProbingTargetsRequest.ProtoReflect.Descriptor instead.
func (*ListProbingTargetsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListProbingTargetsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProbingTargetsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProbingTargetsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProbingTargetsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProbingTargetsRequest) GetParent() *probing_target.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListProbingTargetsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListProbingTargetsRequest) GetPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListProbingTargetsRequest) GetOrderBy() *probing_target.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListProbingTargetsRequest) GetFilter() *probing_target.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListProbingTargetsRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListProbingTargetsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListProbingTargetsRequest) SetParent(fv *probing_target.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListProbingTargetsRequest"))
	}
	m.Parent = fv
}

func (m *ListProbingTargetsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListProbingTargetsRequest"))
	}
	m.PageSize = fv
}

func (m *ListProbingTargetsRequest) SetPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListProbingTargetsRequest"))
	}
	m.PageToken = fv
}

func (m *ListProbingTargetsRequest) SetOrderBy(fv *probing_target.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListProbingTargetsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListProbingTargetsRequest) SetFilter(fv *probing_target.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListProbingTargetsRequest"))
	}
	m.Filter = fv
}

func (m *ListProbingTargetsRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListProbingTargetsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListProbingTargetsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListProbingTargetsRequest"))
	}
	m.View = fv
}

// Request message for method
// [ListProbingTargets][ntt.watchdog.v1alpha2.ListProbingTargets]
type ListProbingTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of ProbingTargets
	ProbingTargets []*probing_target.ProbingTarget `protobuf:"bytes,1,rep,name=probing_targets,json=probingTargets,proto3" json:"probing_targets,omitempty" firestore:"probingTargets"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.ListProbingTargetsRequest.page_token]
	PrevPageToken *probing_target.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.ListProbingTargetsRequest.page_token]
	NextPageToken *probing_target.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListProbingTargetsResponse) Reset() {
	*m = ListProbingTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListProbingTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListProbingTargetsResponse) ProtoMessage() {}

func (m *ListProbingTargetsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListProbingTargetsResponse) GotenMessage() {}

// Deprecated, Use ListProbingTargetsResponse.ProtoReflect.Descriptor instead.
func (*ListProbingTargetsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListProbingTargetsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListProbingTargetsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListProbingTargetsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListProbingTargetsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListProbingTargetsResponse) GetProbingTargets() []*probing_target.ProbingTarget {
	if m != nil {
		return m.ProbingTargets
	}
	return nil
}

func (m *ListProbingTargetsResponse) GetPrevPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListProbingTargetsResponse) GetNextPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListProbingTargetsResponse) SetProbingTargets(fv []*probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTargets", "ListProbingTargetsResponse"))
	}
	m.ProbingTargets = fv
}

func (m *ListProbingTargetsResponse) SetPrevPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListProbingTargetsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListProbingTargetsResponse) SetNextPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListProbingTargetsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method
// [WatchProbingTarget][ntt.watchdog.v1alpha2.WatchProbingTarget]
type WatchProbingTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.watchdog.v1alpha2.ProbingTarget
	Name *probing_target.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,2,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchProbingTargetRequest) Reset() {
	*m = WatchProbingTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbingTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbingTargetRequest) ProtoMessage() {}

func (m *WatchProbingTargetRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbingTargetRequest) GotenMessage() {}

// Deprecated, Use WatchProbingTargetRequest.ProtoReflect.Descriptor instead.
func (*WatchProbingTargetRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchProbingTargetRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbingTargetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbingTargetRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbingTargetRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbingTargetRequest) GetName() *probing_target.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchProbingTargetRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchProbingTargetRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchProbingTargetRequest) SetName(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchProbingTargetRequest"))
	}
	m.Name = fv
}

func (m *WatchProbingTargetRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchProbingTargetRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchProbingTargetRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchProbingTargetRequest"))
	}
	m.View = fv
}

// WatchProbingTargetResponse
type WatchProbingTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *probing_target.ProbingTargetChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchProbingTargetResponse) Reset() {
	*m = WatchProbingTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbingTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbingTargetResponse) ProtoMessage() {}

func (m *WatchProbingTargetResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbingTargetResponse) GotenMessage() {}

// Deprecated, Use WatchProbingTargetResponse.ProtoReflect.Descriptor instead.
func (*WatchProbingTargetResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchProbingTargetResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbingTargetResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbingTargetResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbingTargetResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbingTargetResponse) GetChange() *probing_target.ProbingTargetChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchProbingTargetResponse) SetChange(fv *probing_target.ProbingTargetChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchProbingTargetResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchProbingTargets][ntt.watchdog.v1alpha2.WatchProbingTargets]
type WatchProbingTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.watchdog.v1alpha2.ProbingTarget
	Parent *probing_target.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbingTargets than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *probing_target.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *probing_target.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probing_target.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to ProbingTarget that don't
	// affect any of masked fields won't be sent back.
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,6,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// ProbingTarget that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchProbingTargetsRequest) Reset() {
	*m = WatchProbingTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbingTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbingTargetsRequest) ProtoMessage() {}

func (m *WatchProbingTargetsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbingTargetsRequest) GotenMessage() {}

// Deprecated, Use WatchProbingTargetsRequest.ProtoReflect.Descriptor instead.
func (*WatchProbingTargetsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchProbingTargetsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbingTargetsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbingTargetsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbingTargetsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbingTargetsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchProbingTargetsRequest) GetParent() *probing_target.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchProbingTargetsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchProbingTargetsRequest) GetPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchProbingTargetsRequest) GetOrderBy() *probing_target.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchProbingTargetsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchProbingTargetsRequest) GetFilter() *probing_target.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchProbingTargetsRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchProbingTargetsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchProbingTargetsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchProbingTargetsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchProbingTargetsRequest"))
	}
	m.Type = fv
}

func (m *WatchProbingTargetsRequest) SetParent(fv *probing_target.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchProbingTargetsRequest"))
	}
	m.Parent = fv
}

func (m *WatchProbingTargetsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchProbingTargetsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchProbingTargetsRequest) SetPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchProbingTargetsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchProbingTargetsRequest) SetOrderBy(fv *probing_target.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchProbingTargetsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchProbingTargetsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchProbingTargetsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchProbingTargetsRequest) SetFilter(fv *probing_target.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchProbingTargetsRequest"))
	}
	m.Filter = fv
}

func (m *WatchProbingTargetsRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchProbingTargetsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchProbingTargetsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchProbingTargetsRequest"))
	}
	m.View = fv
}

func (m *WatchProbingTargetsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchProbingTargetsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchProbingTargetsResponse
type WatchProbingTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of ProbingTargets
	ProbingTargetChanges []*probing_target.ProbingTargetChange `protobuf:"bytes,2,rep,name=probing_target_changes,json=probingTargetChanges,proto3" json:"probing_target_changes,omitempty" firestore:"probingTargetChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All ProbingTargets will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchProbingTargetsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (ProbingTargets will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchProbingTargetsResponse) Reset() {
	*m = WatchProbingTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbingTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbingTargetsResponse) ProtoMessage() {}

func (m *WatchProbingTargetsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbingTargetsResponse) GotenMessage() {}

// Deprecated, Use WatchProbingTargetsResponse.ProtoReflect.Descriptor instead.
func (*WatchProbingTargetsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchProbingTargetsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbingTargetsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbingTargetsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbingTargetsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbingTargetsResponse) GetProbingTargetChanges() []*probing_target.ProbingTargetChange {
	if m != nil {
		return m.ProbingTargetChanges
	}
	return nil
}

func (m *WatchProbingTargetsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchProbingTargetsResponse) GetPageTokenChange() *WatchProbingTargetsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchProbingTargetsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchProbingTargetsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchProbingTargetsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchProbingTargetsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchProbingTargetsResponse) SetProbingTargetChanges(fv []*probing_target.ProbingTargetChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTargetChanges", "WatchProbingTargetsResponse"))
	}
	m.ProbingTargetChanges = fv
}

func (m *WatchProbingTargetsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchProbingTargetsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchProbingTargetsResponse) SetPageTokenChange(fv *WatchProbingTargetsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchProbingTargetsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchProbingTargetsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchProbingTargetsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchProbingTargetsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchProbingTargetsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchProbingTargetsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchProbingTargetsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchProbingTargetsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchProbingTargetsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateProbingTarget][ntt.watchdog.v1alpha2.CreateProbingTarget]
type CreateProbingTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent reference of ntt.watchdog.v1alpha2.ProbingTarget
	Parent *probing_target.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// ProbingTarget resource body
	ProbingTarget *probing_target.ProbingTarget `protobuf:"bytes,2,opt,name=probing_target,json=probingTarget,proto3" json:"probing_target,omitempty" firestore:"probingTarget"`
}

func (m *CreateProbingTargetRequest) Reset() {
	*m = CreateProbingTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateProbingTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateProbingTargetRequest) ProtoMessage() {}

func (m *CreateProbingTargetRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateProbingTargetRequest) GotenMessage() {}

// Deprecated, Use CreateProbingTargetRequest.ProtoReflect.Descriptor instead.
func (*CreateProbingTargetRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateProbingTargetRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateProbingTargetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateProbingTargetRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateProbingTargetRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateProbingTargetRequest) GetParent() *probing_target.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateProbingTargetRequest) GetProbingTarget() *probing_target.ProbingTarget {
	if m != nil {
		return m.ProbingTarget
	}
	return nil
}

func (m *CreateProbingTargetRequest) SetParent(fv *probing_target.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateProbingTargetRequest"))
	}
	m.Parent = fv
}

func (m *CreateProbingTargetRequest) SetProbingTarget(fv *probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTarget", "CreateProbingTargetRequest"))
	}
	m.ProbingTarget = fv
}

// Request message for method
// [UpdateProbingTarget][ntt.watchdog.v1alpha2.UpdateProbingTarget]
type UpdateProbingTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ProbingTarget resource body
	ProbingTarget *probing_target.ProbingTarget `protobuf:"bytes,2,opt,name=probing_target,json=probingTarget,proto3" json:"probing_target,omitempty" firestore:"probingTarget"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,3,opt,customtype=ProbingTarget_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateProbingTargetRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateProbingTargetRequest) Reset() {
	*m = UpdateProbingTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateProbingTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateProbingTargetRequest) ProtoMessage() {}

func (m *UpdateProbingTargetRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateProbingTargetRequest) GotenMessage() {}

// Deprecated, Use UpdateProbingTargetRequest.ProtoReflect.Descriptor instead.
func (*UpdateProbingTargetRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateProbingTargetRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateProbingTargetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateProbingTargetRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateProbingTargetRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateProbingTargetRequest) GetProbingTarget() *probing_target.ProbingTarget {
	if m != nil {
		return m.ProbingTarget
	}
	return nil
}

func (m *UpdateProbingTargetRequest) GetUpdateMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateProbingTargetRequest) GetCas() *UpdateProbingTargetRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateProbingTargetRequest) SetProbingTarget(fv *probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTarget", "UpdateProbingTargetRequest"))
	}
	m.ProbingTarget = fv
}

func (m *UpdateProbingTargetRequest) SetUpdateMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateProbingTargetRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateProbingTargetRequest) SetCas(fv *UpdateProbingTargetRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateProbingTargetRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeleteProbingTarget][ntt.watchdog.v1alpha2.DeleteProbingTarget]
type DeleteProbingTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.watchdog.v1alpha2.ProbingTarget
	Name *probing_target.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteProbingTargetRequest) Reset() {
	*m = DeleteProbingTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteProbingTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteProbingTargetRequest) ProtoMessage() {}

func (m *DeleteProbingTargetRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteProbingTargetRequest) GotenMessage() {}

// Deprecated, Use DeleteProbingTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteProbingTargetRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteProbingTargetRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteProbingTargetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteProbingTargetRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteProbingTargetRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteProbingTargetRequest) GetName() *probing_target.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteProbingTargetRequest) SetName(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteProbingTargetRequest"))
	}
	m.Name = fv
}

// Request message for method
// [SearchProbingTargets][ntt.watchdog.v1alpha2.SearchProbingTargets]
type SearchProbingTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.watchdog.v1alpha2.ProbingTarget
	Parent *probing_target.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer ProbingTargets than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [SearchProbingTargetsResponse.next_page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsResponse.next_page_token]
	PageToken *probing_target.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *probing_target.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *probing_target.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,6,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Optional search phrase used to further filter results.
	Phrase string `protobuf:"bytes,8,opt,name=phrase,proto3" json:"phrase,omitempty" firestore:"phrase"`
}

func (m *SearchProbingTargetsRequest) Reset() {
	*m = SearchProbingTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchProbingTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchProbingTargetsRequest) ProtoMessage() {}

func (m *SearchProbingTargetsRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchProbingTargetsRequest) GotenMessage() {}

// Deprecated, Use SearchProbingTargetsRequest.ProtoReflect.Descriptor instead.
func (*SearchProbingTargetsRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{12}
}

func (m *SearchProbingTargetsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchProbingTargetsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchProbingTargetsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchProbingTargetsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchProbingTargetsRequest) GetParent() *probing_target.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SearchProbingTargetsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *SearchProbingTargetsRequest) GetPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *SearchProbingTargetsRequest) GetOrderBy() *probing_target.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SearchProbingTargetsRequest) GetFilter() *probing_target.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchProbingTargetsRequest) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchProbingTargetsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *SearchProbingTargetsRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *SearchProbingTargetsRequest) SetParent(fv *probing_target.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "SearchProbingTargetsRequest"))
	}
	m.Parent = fv
}

func (m *SearchProbingTargetsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "SearchProbingTargetsRequest"))
	}
	m.PageSize = fv
}

func (m *SearchProbingTargetsRequest) SetPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "SearchProbingTargetsRequest"))
	}
	m.PageToken = fv
}

func (m *SearchProbingTargetsRequest) SetOrderBy(fv *probing_target.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "SearchProbingTargetsRequest"))
	}
	m.OrderBy = fv
}

func (m *SearchProbingTargetsRequest) SetFilter(fv *probing_target.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "SearchProbingTargetsRequest"))
	}
	m.Filter = fv
}

func (m *SearchProbingTargetsRequest) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "SearchProbingTargetsRequest"))
	}
	m.FieldMask = fv
}

func (m *SearchProbingTargetsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "SearchProbingTargetsRequest"))
	}
	m.View = fv
}

func (m *SearchProbingTargetsRequest) SetPhrase(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phrase", "SearchProbingTargetsRequest"))
	}
	m.Phrase = fv
}

// Request message for method
// [SearchProbingTargets][ntt.watchdog.v1alpha2.SearchProbingTargets]
type SearchProbingTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of ProbingTargets
	ProbingTargets []*probing_target.ProbingTarget `protobuf:"bytes,1,rep,name=probing_targets,json=probingTargets,proto3" json:"probing_targets,omitempty" firestore:"probingTargets"`
	// A token to retrieve previous page of results. Pass this value in the
	// [SearchProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.page_token]
	PrevPageToken *probing_target.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [SearchProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.page_token]
	NextPageToken *probing_target.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page (0 if no page tokens were given). Page
	// index can be computed from offset and limit provided in a request
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total ProbingTargets across all pages.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *SearchProbingTargetsResponse) Reset() {
	*m = SearchProbingTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchProbingTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchProbingTargetsResponse) ProtoMessage() {}

func (m *SearchProbingTargetsResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchProbingTargetsResponse) GotenMessage() {}

// Deprecated, Use SearchProbingTargetsResponse.ProtoReflect.Descriptor instead.
func (*SearchProbingTargetsResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{13}
}

func (m *SearchProbingTargetsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchProbingTargetsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchProbingTargetsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchProbingTargetsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchProbingTargetsResponse) GetProbingTargets() []*probing_target.ProbingTarget {
	if m != nil {
		return m.ProbingTargets
	}
	return nil
}

func (m *SearchProbingTargetsResponse) GetPrevPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *SearchProbingTargetsResponse) GetNextPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *SearchProbingTargetsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *SearchProbingTargetsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *SearchProbingTargetsResponse) SetProbingTargets(fv []*probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingTargets", "SearchProbingTargetsResponse"))
	}
	m.ProbingTargets = fv
}

func (m *SearchProbingTargetsResponse) SetPrevPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "SearchProbingTargetsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *SearchProbingTargetsResponse) SetNextPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "SearchProbingTargetsResponse"))
	}
	m.NextPageToken = fv
}

func (m *SearchProbingTargetsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "SearchProbingTargetsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *SearchProbingTargetsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "SearchProbingTargetsResponse"))
	}
	m.TotalResultsCount = fv
}

type WatchProbingTargetsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *probing_target.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *probing_target.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchProbingTargetsResponse_PageTokenChange) Reset() {
	*m = WatchProbingTargetsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchProbingTargetsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchProbingTargetsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchProbingTargetsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchProbingTargetsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchProbingTargetsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchProbingTargetsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchProbingTargetsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchProbingTargetsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchProbingTargetsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchProbingTargetsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchProbingTargetsResponse_PageTokenChange) GetPrevPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchProbingTargetsResponse_PageTokenChange) GetNextPageToken() *probing_target.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchProbingTargetsResponse_PageTokenChange) SetPrevPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchProbingTargetsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchProbingTargetsResponse_PageTokenChange) SetNextPageToken(fv *probing_target.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchProbingTargetsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateProbingTargetRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *probing_target.ProbingTarget `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *probing_target.ProbingTarget_FieldMask `protobuf:"bytes,2,opt,customtype=ProbingTarget_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateProbingTargetRequest_CAS) Reset() {
	*m = UpdateProbingTargetRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateProbingTargetRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateProbingTargetRequest_CAS) ProtoMessage() {}

func (m *UpdateProbingTargetRequest_CAS) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateProbingTargetRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateProbingTargetRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateProbingTargetRequest_CAS) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateProbingTargetRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateProbingTargetRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateProbingTargetRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateProbingTargetRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateProbingTargetRequest_CAS) GetConditionalState() *probing_target.ProbingTarget {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateProbingTargetRequest_CAS) GetFieldMask() *probing_target.ProbingTarget_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateProbingTargetRequest_CAS) SetConditionalState(fv *probing_target.ProbingTarget) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateProbingTargetRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateProbingTargetRequest_CAS) SetFieldMask(fv *probing_target.ProbingTarget_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateProbingTargetRequest_CAS"))
	}
	m.FieldMask = fv
}

var watchdog_proto_v1alpha2_probing_target_service_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probing_target_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xf3, 0x01, 0x0a,
	0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda,
	0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11,
	0x32, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x3a, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12,
	0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x2a, 0x0f, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x1a, 0x0f, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xe9,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x60, 0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x97, 0x04, 0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x42, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x2a, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x1a, 0x0f,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x1b,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x11,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53,
	0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x8f, 0x01, 0x0a,
	0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22,
	0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcd,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2,
	0xda, 0x21, 0x11, 0x42, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x59, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x21, 0xc2, 0x85, 0x2c,
	0x1d, 0x32, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf1,
	0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32,
	0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x03,
	0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53,
	0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x51, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x3a, 0x2e, 0xc2, 0x85, 0x2c, 0x2a, 0x32, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x13, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa0, 0x03, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x11, 0x3a, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a,
	0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x2a, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x1a, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x32, 0x0f, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2,
	0xda, 0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda,
	0x21, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xa1, 0x13, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7d, 0x82,
	0xdb, 0x21, 0x14, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x03, 0x67, 0x65, 0x74, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a,
	0x7d, 0x92, 0x97, 0x22, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x9d, 0x02, 0x0a,
	0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82, 0xdb, 0x21, 0x1d, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x29, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x81, 0x02, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x82, 0xdb, 0x21, 0x19, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x92, 0x97, 0x22, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00,
	0x12, 0x85, 0x02, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82,
	0xdb, 0x21, 0x16, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x25, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8e, 0x02, 0x0a, 0x13, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xdb, 0x21, 0x1a, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x05, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x27, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8c, 0x02, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9b, 0x01, 0x82, 0xdb, 0x21,
	0x19, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x92, 0x97, 0x22, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xa5, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb4, 0x01, 0x82, 0xdb, 0x21, 0x17,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4d, 0x3a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x1a, 0x3b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x92, 0x97, 0x22, 0x34, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03,
	0x12, 0xea, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x87, 0x01, 0x82, 0xdb, 0x21, 0x17, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x26, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0x8b, 0x02,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x89, 0x01, 0x82, 0xdb, 0x21, 0x1b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x92, 0x97, 0x22, 0x28, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x1a, 0x30, 0xca, 0x41, 0x13,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x8d, 0x03,
	0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x8a, 0xff, 0xd0,
	0x02, 0x54, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x42, 0x19, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3b, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probing_target_service_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probing_target_service_proto_rawDescData = watchdog_proto_v1alpha2_probing_target_service_proto_rawDesc
)

func watchdog_proto_v1alpha2_probing_target_service_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probing_target_service_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probing_target_service_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probing_target_service_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probing_target_service_proto_rawDescData
}

var watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var watchdog_proto_v1alpha2_probing_target_service_proto_goTypes = []interface{}{
	(*GetProbingTargetRequest)(nil),                     // 0: ntt.watchdog.v1alpha2.GetProbingTargetRequest
	(*BatchGetProbingTargetsRequest)(nil),               // 1: ntt.watchdog.v1alpha2.BatchGetProbingTargetsRequest
	(*BatchGetProbingTargetsResponse)(nil),              // 2: ntt.watchdog.v1alpha2.BatchGetProbingTargetsResponse
	(*ListProbingTargetsRequest)(nil),                   // 3: ntt.watchdog.v1alpha2.ListProbingTargetsRequest
	(*ListProbingTargetsResponse)(nil),                  // 4: ntt.watchdog.v1alpha2.ListProbingTargetsResponse
	(*WatchProbingTargetRequest)(nil),                   // 5: ntt.watchdog.v1alpha2.WatchProbingTargetRequest
	(*WatchProbingTargetResponse)(nil),                  // 6: ntt.watchdog.v1alpha2.WatchProbingTargetResponse
	(*WatchProbingTargetsRequest)(nil),                  // 7: ntt.watchdog.v1alpha2.WatchProbingTargetsRequest
	(*WatchProbingTargetsResponse)(nil),                 // 8: ntt.watchdog.v1alpha2.WatchProbingTargetsResponse
	(*CreateProbingTargetRequest)(nil),                  // 9: ntt.watchdog.v1alpha2.CreateProbingTargetRequest
	(*UpdateProbingTargetRequest)(nil),                  // 10: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest
	(*DeleteProbingTargetRequest)(nil),                  // 11: ntt.watchdog.v1alpha2.DeleteProbingTargetRequest
	(*SearchProbingTargetsRequest)(nil),                 // 12: ntt.watchdog.v1alpha2.SearchProbingTargetsRequest
	(*SearchProbingTargetsResponse)(nil),                // 13: ntt.watchdog.v1alpha2.SearchProbingTargetsResponse
	(*WatchProbingTargetsResponse_PageTokenChange)(nil), // 14: ntt.watchdog.v1alpha2.WatchProbingTargetsResponse.PageTokenChange
	(*UpdateProbingTargetRequest_CAS)(nil),              // 15: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.CAS
	(*probing_target.ProbingTarget_FieldMask)(nil),      // 16: ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	(view.View)(0),                             // 17: goten.view.View
	(*probing_target.ProbingTarget)(nil),       // 18: ntt.watchdog.v1alpha2.ProbingTarget
	(*probing_target.ProbingTargetChange)(nil), // 19: ntt.watchdog.v1alpha2.ProbingTargetChange
	(watch_type.WatchType)(0),                  // 20: goten.watch_type.WatchType
	(*empty.Empty)(nil),                        // 21: google.protobuf.Empty
}
var watchdog_proto_v1alpha2_probing_target_service_proto_depIdxs = []int32{
	16, // 0: ntt.watchdog.v1alpha2.GetProbingTargetRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 1: ntt.watchdog.v1alpha2.GetProbingTargetRequest.view:type_name -> goten.view.View
	16, // 2: ntt.watchdog.v1alpha2.BatchGetProbingTargetsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 3: ntt.watchdog.v1alpha2.BatchGetProbingTargetsRequest.view:type_name -> goten.view.View
	18, // 4: ntt.watchdog.v1alpha2.BatchGetProbingTargetsResponse.probing_targets:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	16, // 5: ntt.watchdog.v1alpha2.ListProbingTargetsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 6: ntt.watchdog.v1alpha2.ListProbingTargetsRequest.view:type_name -> goten.view.View
	18, // 7: ntt.watchdog.v1alpha2.ListProbingTargetsResponse.probing_targets:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	16, // 8: ntt.watchdog.v1alpha2.WatchProbingTargetRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 9: ntt.watchdog.v1alpha2.WatchProbingTargetRequest.view:type_name -> goten.view.View
	19, // 10: ntt.watchdog.v1alpha2.WatchProbingTargetResponse.change:type_name -> ntt.watchdog.v1alpha2.ProbingTargetChange
	20, // 11: ntt.watchdog.v1alpha2.WatchProbingTargetsRequest.type:type_name -> goten.watch_type.WatchType
	16, // 12: ntt.watchdog.v1alpha2.WatchProbingTargetsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 13: ntt.watchdog.v1alpha2.WatchProbingTargetsRequest.view:type_name -> goten.view.View
	19, // 14: ntt.watchdog.v1alpha2.WatchProbingTargetsResponse.probing_target_changes:type_name -> ntt.watchdog.v1alpha2.ProbingTargetChange
	14, // 15: ntt.watchdog.v1alpha2.WatchProbingTargetsResponse.page_token_change:type_name -> ntt.watchdog.v1alpha2.WatchProbingTargetsResponse.PageTokenChange
	18, // 16: ntt.watchdog.v1alpha2.CreateProbingTargetRequest.probing_target:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	18, // 17: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.probing_target:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	16, // 18: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.update_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	15, // 19: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.cas:type_name -> ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.CAS
	16, // 20: ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	17, // 21: ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.view:type_name -> goten.view.View
	18, // 22: ntt.watchdog.v1alpha2.SearchProbingTargetsResponse.probing_targets:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	18, // 23: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.CAS.conditional_state:type_name -> ntt.watchdog.v1alpha2.ProbingTarget
	16, // 24: ntt.watchdog.v1alpha2.UpdateProbingTargetRequest.CAS.field_mask:type_name -> ntt.watchdog.v1alpha2.ProbingTarget_FieldMask
	0,  // 25: ntt.watchdog.v1alpha2.ProbingTargetService.GetProbingTarget:input_type -> ntt.watchdog.v1alpha2.GetProbingTargetRequest
	1,  // 26: ntt.watchdog.v1alpha2.ProbingTargetService.BatchGetProbingTargets:input_type -> ntt.watchdog.v1alpha2.BatchGetProbingTargetsRequest
	3,  // 27: ntt.watchdog.v1alpha2.ProbingTargetService.ListProbingTargets:input_type -> ntt.watchdog.v1alpha2.ListProbingTargetsRequest
	5,  // 28: ntt.watchdog.v1alpha2.ProbingTargetService.WatchProbingTarget:input_type -> ntt.watchdog.v1alpha2.WatchProbingTargetRequest
	7,  // 29: ntt.watchdog.v1alpha2.ProbingTargetService.WatchProbingTargets:input_type -> ntt.watchdog.v1alpha2.WatchProbingTargetsRequest
	9,  // 30: ntt.watchdog.v1alpha2.ProbingTargetService.CreateProbingTarget:input_type -> ntt.watchdog.v1alpha2.CreateProbingTargetRequest
	10, // 31: ntt.watchdog.v1alpha2.ProbingTargetService.UpdateProbingTarget:input_type -> ntt.watchdog.v1alpha2.UpdateProbingTargetRequest
	11, // 32: ntt.watchdog.v1alpha2.ProbingTargetService.DeleteProbingTarget:input_type -> ntt.watchdog.v1alpha2.DeleteProbingTargetRequest
	12, // 33: ntt.watchdog.v1alpha2.ProbingTargetService.SearchProbingTargets:input_type -> ntt.watchdog.v1alpha2.SearchProbingTargetsRequest
	18, // 34: ntt.watchdog.v1alpha2.ProbingTargetService.GetProbingTarget:output_type -> ntt.watchdog.v1alpha2.ProbingTarget
	2,  // 35: ntt.watchdog.v1alpha2.ProbingTargetService.BatchGetProbingTargets:output_type -> ntt.watchdog.v1alpha2.BatchGetProbingTargetsResponse
	4,  // 36: ntt.watchdog.v1alpha2.ProbingTargetService.ListProbingTargets:output_type -> ntt.watchdog.v1alpha2.ListProbingTargetsResponse
	6,  // 37: ntt.watchdog.v1alpha2.ProbingTargetService.WatchProbingTarget:output_type -> ntt.watchdog.v1alpha2.WatchProbingTargetResponse
	8,  // 38: ntt.watchdog.v1alpha2.ProbingTargetService.WatchProbingTargets:output_type -> ntt.watchdog.v1alpha2.WatchProbingTargetsResponse
	18, // 39: ntt.watchdog.v1alpha2.ProbingTargetService.CreateProbingTarget:output_type -> ntt.watchdog.v1alpha2.ProbingTarget
	18, // 40: ntt.watchdog.v1alpha2.ProbingTargetService.UpdateProbingTarget:output_type -> ntt.watchdog.v1alpha2.ProbingTarget
	21, // 41: ntt.watchdog.v1alpha2.ProbingTargetService.DeleteProbingTarget:output_type -> google.protobuf.Empty
	13, // 42: ntt.watchdog.v1alpha2.ProbingTargetService.SearchProbingTargets:output_type -> ntt.watchdog.v1alpha2.SearchProbingTargetsResponse
	34, // [34:43] is the sub-list for method output_type
	25, // [25:34] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probing_target_service_proto_init() }
func watchdog_proto_v1alpha2_probing_target_service_proto_init() {
	if watchdog_proto_v1alpha2_probing_target_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProbingTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetProbingTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetProbingTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProbingTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProbingTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbingTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbingTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbingTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbingTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProbingTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProbingTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProbingTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProbingTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProbingTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProbingTargetsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProbingTargetRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probing_target_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           watchdog_proto_v1alpha2_probing_target_service_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probing_target_service_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_probing_target_service_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probing_target_service_proto = out.File
	watchdog_proto_v1alpha2_probing_target_service_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probing_target_service_proto_goTypes = nil
	watchdog_proto_v1alpha2_probing_target_service_proto_depIdxs = nil
}
