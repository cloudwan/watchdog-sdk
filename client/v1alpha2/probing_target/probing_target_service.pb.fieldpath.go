// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_service.proto
// DO NOT EDIT!!!

package probing_target_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbingTargetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbingTargetRequest_FieldPathSelector
	Get(source *GetProbingTargetRequest) []interface{}
	GetSingle(source *GetProbingTargetRequest) (interface{}, bool)
	ClearValue(item *GetProbingTargetRequest)

	// Those methods build corresponding GetProbingTargetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbingTargetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbingTargetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbingTargetRequest_FieldPathArrayItemValue
}

type GetProbingTargetRequest_FieldPathSelector int32

const (
	GetProbingTargetRequest_FieldPathSelectorName      GetProbingTargetRequest_FieldPathSelector = 0
	GetProbingTargetRequest_FieldPathSelectorFieldMask GetProbingTargetRequest_FieldPathSelector = 1
	GetProbingTargetRequest_FieldPathSelectorView      GetProbingTargetRequest_FieldPathSelector = 2
)

func (s GetProbingTargetRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbingTargetRequest_FieldPathSelectorName:
		return "name"
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbingTargetRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", s))
	}
}

func BuildGetProbingTargetRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbingTargetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbingTargetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbingTargetRequest_FieldTerminalPath{selector: GetProbingTargetRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbingTargetRequest", fp)
}

func ParseGetProbingTargetRequest_FieldPath(rawField string) (GetProbingTargetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbingTargetRequest_FieldPath(fp)
}

func MustParseGetProbingTargetRequest_FieldPath(rawField string) GetProbingTargetRequest_FieldPath {
	fp, err := ParseGetProbingTargetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbingTargetRequest_FieldTerminalPath struct {
	selector GetProbingTargetRequest_FieldPathSelector
}

var _ GetProbingTargetRequest_FieldPath = (*GetProbingTargetRequest_FieldTerminalPath)(nil)

func (fp *GetProbingTargetRequest_FieldTerminalPath) Selector() GetProbingTargetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbingTargetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbingTargetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbingTargetRequest
func (fp *GetProbingTargetRequest_FieldTerminalPath) Get(source *GetProbingTargetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbingTargetRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbingTargetRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbingTargetRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbingTargetRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbingTargetRequest
func (fp *GetProbingTargetRequest_FieldTerminalPath) GetSingle(source *GetProbingTargetRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbingTargetRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbingTargetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		return (*probing_target.Reference)(nil)
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case GetProbingTargetRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) ClearValue(item *GetProbingTargetRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbingTargetRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbingTargetRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbingTargetRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbingTargetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbingTargetRequest_FieldPathSelectorName ||
		fp.selector == GetProbingTargetRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbingTargetRequest_FieldPathSelectorView
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbingTargetRequest_FieldPathValue {
	switch fp.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		return &GetProbingTargetRequest_FieldTerminalPathValue{GetProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		return &GetProbingTargetRequest_FieldTerminalPathValue{GetProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case GetProbingTargetRequest_FieldPathSelectorView:
		return &GetProbingTargetRequest_FieldTerminalPathValue{GetProbingTargetRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbingTargetRequest_FieldPathArrayOfValues {
	fpaov := &GetProbingTargetRequest_FieldTerminalPathArrayOfValues{GetProbingTargetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		return &GetProbingTargetRequest_FieldTerminalPathArrayOfValues{GetProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		return &GetProbingTargetRequest_FieldTerminalPathArrayOfValues{GetProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case GetProbingTargetRequest_FieldPathSelectorView:
		return &GetProbingTargetRequest_FieldTerminalPathArrayOfValues{GetProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbingTargetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *GetProbingTargetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbingTargetRequest_FieldPathValue allows storing values for GetProbingTargetRequest fields according to their type
type GetProbingTargetRequest_FieldPathValue interface {
	GetProbingTargetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbingTargetRequest)
	CompareWith(*GetProbingTargetRequest) (cmp int, comparable bool)
}

func ParseGetProbingTargetRequest_FieldPathValue(pathStr, valueStr string) (GetProbingTargetRequest_FieldPathValue, error) {
	fp, err := ParseGetProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbingTargetRequest_FieldPathValue), nil
}

func MustParseGetProbingTargetRequest_FieldPathValue(pathStr, valueStr string) GetProbingTargetRequest_FieldPathValue {
	fpv, err := ParseGetProbingTargetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbingTargetRequest_FieldTerminalPathValue struct {
	GetProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingTargetRequest_FieldPathValue = (*GetProbingTargetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbingTargetRequest' as interface{}
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) AsNameValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbingTargetRequest
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) SetTo(target **GetProbingTargetRequest) {
	if *target == nil {
		*target = new(GetProbingTargetRequest)
	}
	switch fpv.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target.Reference)
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case GetProbingTargetRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbingTargetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbingTargetRequest_FieldTerminalPathValue' with the value under path in 'GetProbingTargetRequest'.
func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) CompareWith(source *GetProbingTargetRequest) (int, bool) {
	switch fpv.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbingTargetRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingTargetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbingTargetRequest))
}

// GetProbingTargetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbingTargetRequest according to their type
// Present only for array (repeated) types.
type GetProbingTargetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbingTargetRequest_FieldPath
	ContainsValue(*GetProbingTargetRequest) bool
}

// ParseGetProbingTargetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbingTargetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbingTargetRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbingTargetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbingTargetRequest_FieldTerminalPathArrayItemValue struct {
	GetProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingTargetRequest_FieldPathArrayItemValue = (*GetProbingTargetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbingTargetRequest as interface{}
func (fpaiv *GetProbingTargetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbingTargetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbingTargetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbingTargetRequest'
func (fpaiv *GetProbingTargetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbingTargetRequest) bool {
	slice := fpaiv.GetProbingTargetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbingTargetRequest_FieldPathArrayOfValues allows storing slice of values for GetProbingTargetRequest fields according to their type
type GetProbingTargetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbingTargetRequest_FieldPath
}

func ParseGetProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbingTargetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingTargetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbingTargetRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbingTargetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbingTargetRequest_FieldTerminalPathArrayOfValues struct {
	GetProbingTargetRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbingTargetRequest_FieldPathArrayOfValues = (*GetProbingTargetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbingTargetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbingTargetRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case GetProbingTargetRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case GetProbingTargetRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbingTargetRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *GetProbingTargetRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *GetProbingTargetRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingTargetsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingTargetsRequest_FieldPathSelector
	Get(source *BatchGetProbingTargetsRequest) []interface{}
	GetSingle(source *BatchGetProbingTargetsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbingTargetsRequest)

	// Those methods build corresponding BatchGetProbingTargetsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingTargetsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingTargetsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingTargetsRequest_FieldPathArrayItemValue
}

type BatchGetProbingTargetsRequest_FieldPathSelector int32

const (
	BatchGetProbingTargetsRequest_FieldPathSelectorNames     BatchGetProbingTargetsRequest_FieldPathSelector = 0
	BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask BatchGetProbingTargetsRequest_FieldPathSelector = 1
	BatchGetProbingTargetsRequest_FieldPathSelectorView      BatchGetProbingTargetsRequest_FieldPathSelector = 2
)

func (s BatchGetProbingTargetsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", s))
	}
}

func BuildBatchGetProbingTargetsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingTargetsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingTargetsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbingTargetsRequest_FieldTerminalPath{selector: BatchGetProbingTargetsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingTargetsRequest", fp)
}

func ParseBatchGetProbingTargetsRequest_FieldPath(rawField string) (BatchGetProbingTargetsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingTargetsRequest_FieldPath(fp)
}

func MustParseBatchGetProbingTargetsRequest_FieldPath(rawField string) BatchGetProbingTargetsRequest_FieldPath {
	fp, err := ParseBatchGetProbingTargetsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingTargetsRequest_FieldTerminalPath struct {
	selector BatchGetProbingTargetsRequest_FieldPathSelector
}

var _ BatchGetProbingTargetsRequest_FieldPath = (*BatchGetProbingTargetsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) Selector() BatchGetProbingTargetsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingTargetsRequest
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) Get(source *BatchGetProbingTargetsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbingTargetsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingTargetsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingTargetsRequest
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbingTargetsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingTargetsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return ([]*probing_target.Reference)(nil)
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbingTargetsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbingTargetsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingTargetsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingTargetsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbingTargetsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingTargetsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathValue{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, value: value.([]*probing_target.Reference)}
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathValue{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathValue{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([][]*probing_target.Reference)}
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return &BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue{BatchGetProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbingTargetsRequest_FieldPathValue allows storing values for BatchGetProbingTargetsRequest fields according to their type
type BatchGetProbingTargetsRequest_FieldPathValue interface {
	BatchGetProbingTargetsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingTargetsRequest)
	CompareWith(*BatchGetProbingTargetsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbingTargetsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingTargetsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbingTargetsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbingTargetsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingTargetsRequest_FieldTerminalPathValue struct {
	BatchGetProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetsRequest_FieldPathValue = (*BatchGetProbingTargetsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingTargetsRequest' as interface{}
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probing_target.Reference, bool) {
	res, ok := fpv.value.([]*probing_target.Reference)
	return res, ok
}
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingTargetsRequest
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbingTargetsRequest) {
	if *target == nil {
		*target = new(BatchGetProbingTargetsRequest)
	}
	switch fpv.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probing_target.Reference)
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingTargetsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbingTargetsRequest'.
func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbingTargetsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingTargetsRequest))
}

// BatchGetProbingTargetsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingTargetsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbingTargetsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingTargetsRequest_FieldPath
	ContainsValue(*BatchGetProbingTargetsRequest) bool
}

// ParseBatchGetProbingTargetsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingTargetsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingTargetsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingTargetsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetsRequest_FieldPathArrayItemValue = (*BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingTargetsRequest as interface{}
func (fpaiv *BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probing_target.Reference, bool) {
	res, ok := fpaiv.value.(*probing_target.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingTargetsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingTargetsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetsRequest'
func (fpaiv *BatchGetProbingTargetsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetsRequest) bool {
	slice := fpaiv.BatchGetProbingTargetsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbingTargetsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingTargetsRequest fields according to their type
type BatchGetProbingTargetsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingTargetsRequest_FieldPath
}

func ParseBatchGetProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingTargetsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingTargetsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingTargetsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingTargetsRequest_FieldPathArrayOfValues = (*BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingTargetsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probing_target.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingTargetsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbingTargetsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_target.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingTargetsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingTargetsResponse_FieldPathSelector
	Get(source *BatchGetProbingTargetsResponse) []interface{}
	GetSingle(source *BatchGetProbingTargetsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbingTargetsResponse)

	// Those methods build corresponding BatchGetProbingTargetsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingTargetsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathArrayItemValue
}

type BatchGetProbingTargetsResponse_FieldPathSelector int32

const (
	BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets BatchGetProbingTargetsResponse_FieldPathSelector = 0
	BatchGetProbingTargetsResponse_FieldPathSelectorMissing        BatchGetProbingTargetsResponse_FieldPathSelector = 1
)

func (s BatchGetProbingTargetsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return "probing_targets"
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", s))
	}
}

func BuildBatchGetProbingTargetsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingTargetsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingTargetsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			return &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets}, nil
		case "missing":
			return &BatchGetProbingTargetsResponse_FieldTerminalPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbingTargetsResponse_FieldSubPath{selector: BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingTargetsResponse", fp)
}

func ParseBatchGetProbingTargetsResponse_FieldPath(rawField string) (BatchGetProbingTargetsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingTargetsResponse_FieldPath(fp)
}

func MustParseBatchGetProbingTargetsResponse_FieldPath(rawField string) BatchGetProbingTargetsResponse_FieldPath {
	fp, err := ParseBatchGetProbingTargetsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingTargetsResponse_FieldTerminalPath struct {
	selector BatchGetProbingTargetsResponse_FieldPathSelector
}

var _ BatchGetProbingTargetsResponse_FieldPath = (*BatchGetProbingTargetsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) Selector() BatchGetProbingTargetsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingTargetsResponse
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) Get(source *BatchGetProbingTargetsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, value := range source.GetProbingTargets() {
				values = append(values, value)
			}
		case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingTargetsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingTargetsResponse
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbingTargetsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		res := source.GetProbingTargets()
		return res, res != nil
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return ([]*probing_target.ProbingTarget)(nil)
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return ([]*probing_target.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbingTargetsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
			item.ProbingTargets = nil
		case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingTargetsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathValue{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target.ProbingTarget)}
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathValue{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target.ProbingTarget)}
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingTargetsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbingTargetsResponse_FieldSubPath struct {
	selector BatchGetProbingTargetsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbingTargetsResponse_FieldPath = (*BatchGetProbingTargetsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) Selector() BatchGetProbingTargetsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) AsProbingTargetsSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbingTargetsResponse
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) Get(source *BatchGetProbingTargetsResponse) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsProbingTargetsSubPath(); ok {
		for _, item := range source.GetProbingTargets() {
			values = append(values, asProbingTargetFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbingTargetsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbingTargetsResponse
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) GetSingle(source *BatchGetProbingTargetsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		if len(source.GetProbingTargets()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargets()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) ClearValue(item *BatchGetProbingTargetsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, subItem := range item.ProbingTargets {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbingTargetsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathValue {
	return &BatchGetProbingTargetsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbingTargetsResponse_FieldPathArrayOfValues {
	return &BatchGetProbingTargetsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbingTargetsResponse_FieldPathArrayItemValue {
	return &BatchGetProbingTargetsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbingTargetsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbingTargetsResponse_FieldPathValue allows storing values for BatchGetProbingTargetsResponse fields according to their type
type BatchGetProbingTargetsResponse_FieldPathValue interface {
	BatchGetProbingTargetsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingTargetsResponse)
	CompareWith(*BatchGetProbingTargetsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbingTargetsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingTargetsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbingTargetsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbingTargetsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingTargetsResponse_FieldTerminalPathValue struct {
	BatchGetProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetsResponse_FieldPathValue = (*BatchGetProbingTargetsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingTargetsResponse' as interface{}
func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) AsProbingTargetsValue() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.([]*probing_target.ProbingTarget)
	return res, ok
}
func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probing_target.Reference, bool) {
	res, ok := fpv.value.([]*probing_target.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingTargetsResponse
func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbingTargetsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingTargetsResponse)
	}
	switch fpv.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		(*target).ProbingTargets = fpv.value.([]*probing_target.ProbingTarget)
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probing_target.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingTargetsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbingTargetsResponse'.
func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbingTargetsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingTargetsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingTargetsResponse))
}

type BatchGetProbingTargetsResponse_FieldSubPathValue struct {
	BatchGetProbingTargetsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbingTargetsResponse_FieldPathValue = (*BatchGetProbingTargetsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) AsProbingTargetsPathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) SetTo(target **BatchGetProbingTargetsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingTargetsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingTargetsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbingTargetsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingTargetsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbingTargetsResponse))
}

// BatchGetProbingTargetsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingTargetsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbingTargetsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingTargetsResponse_FieldPath
	ContainsValue(*BatchGetProbingTargetsResponse) bool
}

// ParseBatchGetProbingTargetsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingTargetsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingTargetsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingTargetsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingTargetsResponse_FieldPathArrayItemValue = (*BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingTargetsResponse as interface{}
func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetsItemValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpaiv.value.(*probing_target.ProbingTarget)
	return res, ok
}
func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probing_target.Reference, bool) {
	res, ok := fpaiv.value.(*probing_target.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingTargetsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingTargetsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetsResponse'
func (fpaiv *BatchGetProbingTargetsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetsResponse) bool {
	slice := fpaiv.BatchGetProbingTargetsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbingTargetsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbingTargetsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbingTargetsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbingTargetsResponse_FieldSubPathArrayItemValue) AsProbingTargetsPathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingTargetsResponse'
func (fpaivs *BatchGetProbingTargetsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbingTargetsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingTargetsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbingTargetsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingTargetsResponse fields according to their type
type BatchGetProbingTargetsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingTargetsResponse_FieldPath
}

func ParseBatchGetProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingTargetsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingTargetsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingTargetsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingTargetsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingTargetsResponse_FieldPathArrayOfValues = (*BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingTargetsResponse_FieldPathSelectorProbingTargets:
		for _, v := range fpaov.values.([][]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	case BatchGetProbingTargetsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probing_target.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetsArrayOfValues() ([][]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([][]*probing_target.ProbingTarget)
	return res, ok
}
func (fpaov *BatchGetProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_target.Reference)
	return res, ok
}

type BatchGetProbingTargetsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbingTargetsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbingTargetsResponse_FieldPathArrayOfValues = (*BatchGetProbingTargetsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbingTargetsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbingTargetsResponse_FieldSubPathArrayOfValues) AsProbingTargetsPathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingTargetsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingTargetsRequest_FieldPathSelector
	Get(source *ListProbingTargetsRequest) []interface{}
	GetSingle(source *ListProbingTargetsRequest) (interface{}, bool)
	ClearValue(item *ListProbingTargetsRequest)

	// Those methods build corresponding ListProbingTargetsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingTargetsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingTargetsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingTargetsRequest_FieldPathArrayItemValue
}

type ListProbingTargetsRequest_FieldPathSelector int32

const (
	ListProbingTargetsRequest_FieldPathSelectorParent    ListProbingTargetsRequest_FieldPathSelector = 0
	ListProbingTargetsRequest_FieldPathSelectorPageSize  ListProbingTargetsRequest_FieldPathSelector = 1
	ListProbingTargetsRequest_FieldPathSelectorPageToken ListProbingTargetsRequest_FieldPathSelector = 2
	ListProbingTargetsRequest_FieldPathSelectorOrderBy   ListProbingTargetsRequest_FieldPathSelector = 3
	ListProbingTargetsRequest_FieldPathSelectorFilter    ListProbingTargetsRequest_FieldPathSelector = 4
	ListProbingTargetsRequest_FieldPathSelectorFieldMask ListProbingTargetsRequest_FieldPathSelector = 5
	ListProbingTargetsRequest_FieldPathSelectorView      ListProbingTargetsRequest_FieldPathSelector = 6
)

func (s ListProbingTargetsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbingTargetsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", s))
	}
}

func BuildListProbingTargetsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbingTargetsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingTargetsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbingTargetsRequest_FieldTerminalPath{selector: ListProbingTargetsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingTargetsRequest", fp)
}

func ParseListProbingTargetsRequest_FieldPath(rawField string) (ListProbingTargetsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingTargetsRequest_FieldPath(fp)
}

func MustParseListProbingTargetsRequest_FieldPath(rawField string) ListProbingTargetsRequest_FieldPath {
	fp, err := ParseListProbingTargetsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingTargetsRequest_FieldTerminalPath struct {
	selector ListProbingTargetsRequest_FieldPathSelector
}

var _ ListProbingTargetsRequest_FieldPath = (*ListProbingTargetsRequest_FieldTerminalPath)(nil)

func (fp *ListProbingTargetsRequest_FieldTerminalPath) Selector() ListProbingTargetsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingTargetsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingTargetsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingTargetsRequest
func (fp *ListProbingTargetsRequest_FieldTerminalPath) Get(source *ListProbingTargetsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingTargetsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbingTargetsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbingTargetsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbingTargetsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbingTargetsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingTargetsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbingTargetsRequest
func (fp *ListProbingTargetsRequest_FieldTerminalPath) GetSingle(source *ListProbingTargetsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbingTargetsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingTargetsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingTargetsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		return (*probing_target.ParentName)(nil)
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		return (*probing_target.PagerCursor)(nil)
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		return (*probing_target.OrderBy)(nil)
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		return (*probing_target.Filter)(nil)
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case ListProbingTargetsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) ClearValue(item *ListProbingTargetsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbingTargetsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbingTargetsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbingTargetsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbingTargetsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbingTargetsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingTargetsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingTargetsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingTargetsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbingTargetsRequest_FieldPathSelectorView
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbingTargetsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ParentName)}
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.OrderBy)}
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Filter)}
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case ListProbingTargetsRequest_FieldPathSelectorView:
		return &ListProbingTargetsRequest_FieldTerminalPathValue{ListProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ParentName)}
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.OrderBy)}
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Filter)}
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case ListProbingTargetsRequest_FieldPathSelectorView:
		return &ListProbingTargetsRequest_FieldTerminalPathArrayOfValues{ListProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingTargetsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbingTargetsRequest_FieldPathValue allows storing values for ListProbingTargetsRequest fields according to their type
type ListProbingTargetsRequest_FieldPathValue interface {
	ListProbingTargetsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingTargetsRequest)
	CompareWith(*ListProbingTargetsRequest) (cmp int, comparable bool)
}

func ParseListProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) (ListProbingTargetsRequest_FieldPathValue, error) {
	fp, err := ParseListProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingTargetsRequest_FieldPathValue), nil
}

func MustParseListProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) ListProbingTargetsRequest_FieldPathValue {
	fpv, err := ParseListProbingTargetsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingTargetsRequest_FieldTerminalPathValue struct {
	ListProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetsRequest_FieldPathValue = (*ListProbingTargetsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingTargetsRequest' as interface{}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target.ParentName, bool) {
	res, ok := fpv.value.(*probing_target.ParentName)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target.OrderBy)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target.Filter, bool) {
	res, ok := fpv.value.(*probing_target.Filter)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingTargetsRequest
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) SetTo(target **ListProbingTargetsRequest) {
	if *target == nil {
		*target = new(ListProbingTargetsRequest)
	}
	switch fpv.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target.ParentName)
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target.PagerCursor)
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target.OrderBy)
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target.Filter)
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case ListProbingTargetsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingTargetsRequest_FieldTerminalPathValue' with the value under path in 'ListProbingTargetsRequest'.
func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) CompareWith(source *ListProbingTargetsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbingTargetsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingTargetsRequest))
}

// ListProbingTargetsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingTargetsRequest according to their type
// Present only for array (repeated) types.
type ListProbingTargetsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingTargetsRequest_FieldPath
	ContainsValue(*ListProbingTargetsRequest) bool
}

// ParseListProbingTargetsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingTargetsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingTargetsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingTargetsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingTargetsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetsRequest_FieldPathArrayItemValue = (*ListProbingTargetsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingTargetsRequest as interface{}
func (fpaiv *ListProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingTargetsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingTargetsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetsRequest'
func (fpaiv *ListProbingTargetsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingTargetsRequest) bool {
	slice := fpaiv.ListProbingTargetsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbingTargetsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbingTargetsRequest fields according to their type
type ListProbingTargetsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingTargetsRequest_FieldPath
}

func ParseListProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingTargetsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingTargetsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingTargetsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbingTargetsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbingTargetsRequest_FieldPathArrayOfValues = (*ListProbingTargetsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingTargetsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target.ParentName) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target.OrderBy) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target.Filter) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case ListProbingTargetsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_target.ParentName)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target.OrderBy)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target.Filter)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *ListProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingTargetsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingTargetsResponse_FieldPathSelector
	Get(source *ListProbingTargetsResponse) []interface{}
	GetSingle(source *ListProbingTargetsResponse) (interface{}, bool)
	ClearValue(item *ListProbingTargetsResponse)

	// Those methods build corresponding ListProbingTargetsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingTargetsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingTargetsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingTargetsResponse_FieldPathArrayItemValue
}

type ListProbingTargetsResponse_FieldPathSelector int32

const (
	ListProbingTargetsResponse_FieldPathSelectorProbingTargets ListProbingTargetsResponse_FieldPathSelector = 0
	ListProbingTargetsResponse_FieldPathSelectorPrevPageToken  ListProbingTargetsResponse_FieldPathSelector = 1
	ListProbingTargetsResponse_FieldPathSelectorNextPageToken  ListProbingTargetsResponse_FieldPathSelector = 2
)

func (s ListProbingTargetsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return "probing_targets"
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", s))
	}
}

func BuildListProbingTargetsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbingTargetsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingTargetsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			return &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorProbingTargets}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbingTargetsResponse_FieldTerminalPath{selector: ListProbingTargetsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbingTargetsResponse_FieldSubPath{selector: ListProbingTargetsResponse_FieldPathSelectorProbingTargets, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingTargetsResponse", fp)
}

func ParseListProbingTargetsResponse_FieldPath(rawField string) (ListProbingTargetsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingTargetsResponse_FieldPath(fp)
}

func MustParseListProbingTargetsResponse_FieldPath(rawField string) ListProbingTargetsResponse_FieldPath {
	fp, err := ParseListProbingTargetsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingTargetsResponse_FieldTerminalPath struct {
	selector ListProbingTargetsResponse_FieldPathSelector
}

var _ ListProbingTargetsResponse_FieldPath = (*ListProbingTargetsResponse_FieldTerminalPath)(nil)

func (fp *ListProbingTargetsResponse_FieldTerminalPath) Selector() ListProbingTargetsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingTargetsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingTargetsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingTargetsResponse
func (fp *ListProbingTargetsResponse_FieldTerminalPath) Get(source *ListProbingTargetsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, value := range source.GetProbingTargets() {
				values = append(values, value)
			}
		case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingTargetsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbingTargetsResponse
func (fp *ListProbingTargetsResponse_FieldTerminalPath) GetSingle(source *ListProbingTargetsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		res := source.GetProbingTargets()
		return res, res != nil
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingTargetsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return ([]*probing_target.ProbingTarget)(nil)
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_target.PagerCursor)(nil)
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return (*probing_target.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) ClearValue(item *ListProbingTargetsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
			item.ProbingTargets = nil
		case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingTargetsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingTargetsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbingTargetsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbingTargetsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &ListProbingTargetsResponse_FieldTerminalPathValue{ListProbingTargetsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target.ProbingTarget)}
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingTargetsResponse_FieldTerminalPathValue{ListProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingTargetsResponse_FieldTerminalPathValue{ListProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbingTargetsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &ListProbingTargetsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target.ProbingTarget)}
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingTargetsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingTargetsResponse_FieldTerminalPathArrayOfValues{ListProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingTargetsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &ListProbingTargetsResponse_FieldTerminalPathArrayItemValue{ListProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingTargetsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbingTargetsResponse_FieldSubPath struct {
	selector ListProbingTargetsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbingTargetsResponse_FieldPath = (*ListProbingTargetsResponse_FieldSubPath)(nil)

func (fps *ListProbingTargetsResponse_FieldSubPath) Selector() ListProbingTargetsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbingTargetsResponse_FieldSubPath) AsProbingTargetsSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbingTargetsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbingTargetsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbingTargetsResponse
func (fps *ListProbingTargetsResponse_FieldSubPath) Get(source *ListProbingTargetsResponse) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsProbingTargetsSubPath(); ok {
		for _, item := range source.GetProbingTargets() {
			values = append(values, asProbingTargetFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbingTargetsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbingTargetsResponse))
}

// GetSingle returns value of selected field from source ListProbingTargetsResponse
func (fps *ListProbingTargetsResponse_FieldSubPath) GetSingle(source *ListProbingTargetsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		if len(source.GetProbingTargets()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargets()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fps.selector))
	}
}

func (fps *ListProbingTargetsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbingTargetsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbingTargetsResponse_FieldSubPath) ClearValue(item *ListProbingTargetsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, subItem := range item.ProbingTargets {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbingTargetsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbingTargetsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithIValue(value interface{}) ListProbingTargetsResponse_FieldPathValue {
	return &ListProbingTargetsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbingTargetsResponse_FieldPathArrayOfValues {
	return &ListProbingTargetsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbingTargetsResponse_FieldPathArrayItemValue {
	return &ListProbingTargetsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbingTargetsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbingTargetsResponse_FieldPathValue allows storing values for ListProbingTargetsResponse fields according to their type
type ListProbingTargetsResponse_FieldPathValue interface {
	ListProbingTargetsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingTargetsResponse)
	CompareWith(*ListProbingTargetsResponse) (cmp int, comparable bool)
}

func ParseListProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) (ListProbingTargetsResponse_FieldPathValue, error) {
	fp, err := ParseListProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingTargetsResponse_FieldPathValue), nil
}

func MustParseListProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) ListProbingTargetsResponse_FieldPathValue {
	fpv, err := ParseListProbingTargetsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingTargetsResponse_FieldTerminalPathValue struct {
	ListProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetsResponse_FieldPathValue = (*ListProbingTargetsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingTargetsResponse' as interface{}
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) AsProbingTargetsValue() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.([]*probing_target.ProbingTarget)
	return res, ok
}
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingTargetsResponse
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) SetTo(target **ListProbingTargetsResponse) {
	if *target == nil {
		*target = new(ListProbingTargetsResponse)
	}
	switch fpv.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		(*target).ProbingTargets = fpv.value.([]*probing_target.ProbingTarget)
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target.PagerCursor)
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingTargetsResponse_FieldTerminalPathValue' with the value under path in 'ListProbingTargetsResponse'.
func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) CompareWith(source *ListProbingTargetsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingTargetsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingTargetsResponse))
}

type ListProbingTargetsResponse_FieldSubPathValue struct {
	ListProbingTargetsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbingTargetsResponse_FieldPathValue = (*ListProbingTargetsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) AsProbingTargetsPathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) SetTo(target **ListProbingTargetsResponse) {
	if *target == nil {
		*target = new(ListProbingTargetsResponse)
	}
	switch fpvs.Selector() {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingTargetsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) CompareWith(source *ListProbingTargetsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingTargetsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbingTargetsResponse))
}

// ListProbingTargetsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingTargetsResponse according to their type
// Present only for array (repeated) types.
type ListProbingTargetsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingTargetsResponse_FieldPath
	ContainsValue(*ListProbingTargetsResponse) bool
}

// ParseListProbingTargetsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingTargetsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingTargetsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingTargetsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingTargetsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingTargetsResponse_FieldPathArrayItemValue = (*ListProbingTargetsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingTargetsResponse as interface{}
func (fpaiv *ListProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbingTargetsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetsItemValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpaiv.value.(*probing_target.ProbingTarget)
	return res, ok
}

func (fpaiv *ListProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingTargetsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingTargetsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetsResponse'
func (fpaiv *ListProbingTargetsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingTargetsResponse) bool {
	slice := fpaiv.ListProbingTargetsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbingTargetsResponse_FieldSubPathArrayItemValue struct {
	ListProbingTargetsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbingTargetsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbingTargetsResponse_FieldSubPathArrayItemValue) AsProbingTargetsPathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingTargetsResponse'
func (fpaivs *ListProbingTargetsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbingTargetsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingTargetsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbingTargetsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbingTargetsResponse fields according to their type
type ListProbingTargetsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingTargetsResponse_FieldPath
}

func ParseListProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingTargetsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingTargetsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingTargetsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingTargetsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbingTargetsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbingTargetsResponse_FieldPathArrayOfValues = (*ListProbingTargetsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingTargetsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingTargetsResponse_FieldPathSelectorProbingTargets:
		for _, v := range fpaov.values.([][]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	case ListProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingTargetsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetsArrayOfValues() ([][]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([][]*probing_target.ProbingTarget)
	return res, ok
}
func (fpaov *ListProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}

type ListProbingTargetsResponse_FieldSubPathArrayOfValues struct {
	ListProbingTargetsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbingTargetsResponse_FieldPathArrayOfValues = (*ListProbingTargetsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbingTargetsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbingTargetsResponse_FieldSubPathArrayOfValues) AsProbingTargetsPathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetRequest_FieldPathSelector
	Get(source *WatchProbingTargetRequest) []interface{}
	GetSingle(source *WatchProbingTargetRequest) (interface{}, bool)
	ClearValue(item *WatchProbingTargetRequest)

	// Those methods build corresponding WatchProbingTargetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetRequest_FieldPathArrayItemValue
}

type WatchProbingTargetRequest_FieldPathSelector int32

const (
	WatchProbingTargetRequest_FieldPathSelectorName      WatchProbingTargetRequest_FieldPathSelector = 0
	WatchProbingTargetRequest_FieldPathSelectorFieldMask WatchProbingTargetRequest_FieldPathSelector = 1
	WatchProbingTargetRequest_FieldPathSelectorView      WatchProbingTargetRequest_FieldPathSelector = 2
)

func (s WatchProbingTargetRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		return "name"
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingTargetRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", s))
	}
}

func BuildWatchProbingTargetRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingTargetRequest_FieldTerminalPath{selector: WatchProbingTargetRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetRequest", fp)
}

func ParseWatchProbingTargetRequest_FieldPath(rawField string) (WatchProbingTargetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetRequest_FieldPath(fp)
}

func MustParseWatchProbingTargetRequest_FieldPath(rawField string) WatchProbingTargetRequest_FieldPath {
	fp, err := ParseWatchProbingTargetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetRequest_FieldTerminalPath struct {
	selector WatchProbingTargetRequest_FieldPathSelector
}

var _ WatchProbingTargetRequest_FieldPath = (*WatchProbingTargetRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetRequest_FieldTerminalPath) Selector() WatchProbingTargetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetRequest
func (fp *WatchProbingTargetRequest_FieldTerminalPath) Get(source *WatchProbingTargetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingTargetRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetRequest
func (fp *WatchProbingTargetRequest_FieldTerminalPath) GetSingle(source *WatchProbingTargetRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingTargetRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		return (*probing_target.Reference)(nil)
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case WatchProbingTargetRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) ClearValue(item *WatchProbingTargetRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingTargetRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetRequest_FieldPathSelectorName ||
		fp.selector == WatchProbingTargetRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingTargetRequest_FieldPathSelectorView
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		return &WatchProbingTargetRequest_FieldTerminalPathValue{WatchProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetRequest_FieldTerminalPathValue{WatchProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case WatchProbingTargetRequest_FieldPathSelectorView:
		return &WatchProbingTargetRequest_FieldTerminalPathValue{WatchProbingTargetRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		return &WatchProbingTargetRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case WatchProbingTargetRequest_FieldPathSelectorView:
		return &WatchProbingTargetRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetRequest_FieldPathValue allows storing values for WatchProbingTargetRequest fields according to their type
type WatchProbingTargetRequest_FieldPathValue interface {
	WatchProbingTargetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetRequest)
	CompareWith(*WatchProbingTargetRequest) (cmp int, comparable bool)
}

func ParseWatchProbingTargetRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetRequest_FieldPathValue), nil
}

func MustParseWatchProbingTargetRequest_FieldPathValue(pathStr, valueStr string) WatchProbingTargetRequest_FieldPathValue {
	fpv, err := ParseWatchProbingTargetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetRequest_FieldTerminalPathValue struct {
	WatchProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetRequest_FieldPathValue = (*WatchProbingTargetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetRequest' as interface{}
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) AsNameValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetRequest
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) SetTo(target **WatchProbingTargetRequest) {
	if *target == nil {
		*target = new(WatchProbingTargetRequest)
	}
	switch fpv.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target.Reference)
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case WatchProbingTargetRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetRequest'.
func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingTargetRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetRequest))
}

// WatchProbingTargetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetRequest according to their type
// Present only for array (repeated) types.
type WatchProbingTargetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetRequest_FieldPath
	ContainsValue(*WatchProbingTargetRequest) bool
}

// ParseWatchProbingTargetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetRequest_FieldPathArrayItemValue = (*WatchProbingTargetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetRequest as interface{}
func (fpaiv *WatchProbingTargetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetRequest'
func (fpaiv *WatchProbingTargetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetRequest) bool {
	slice := fpaiv.WatchProbingTargetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetRequest fields according to their type
type WatchProbingTargetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetRequest_FieldPath
}

func ParseWatchProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetRequest_FieldPathArrayOfValues = (*WatchProbingTargetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case WatchProbingTargetRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingTargetRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *WatchProbingTargetRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingTargetRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetResponse_FieldPathSelector
	Get(source *WatchProbingTargetResponse) []interface{}
	GetSingle(source *WatchProbingTargetResponse) (interface{}, bool)
	ClearValue(item *WatchProbingTargetResponse)

	// Those methods build corresponding WatchProbingTargetResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetResponse_FieldPathArrayItemValue
}

type WatchProbingTargetResponse_FieldPathSelector int32

const (
	WatchProbingTargetResponse_FieldPathSelectorChange WatchProbingTargetResponse_FieldPathSelector = 0
)

func (s WatchProbingTargetResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", s))
	}
}

func BuildWatchProbingTargetResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbingTargetResponse_FieldTerminalPath{selector: WatchProbingTargetResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetResponse", fp)
}

func ParseWatchProbingTargetResponse_FieldPath(rawField string) (WatchProbingTargetResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetResponse_FieldPath(fp)
}

func MustParseWatchProbingTargetResponse_FieldPath(rawField string) WatchProbingTargetResponse_FieldPath {
	fp, err := ParseWatchProbingTargetResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetResponse_FieldTerminalPath struct {
	selector WatchProbingTargetResponse_FieldPathSelector
}

var _ WatchProbingTargetResponse_FieldPath = (*WatchProbingTargetResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetResponse_FieldTerminalPath) Selector() WatchProbingTargetResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetResponse
func (fp *WatchProbingTargetResponse_FieldTerminalPath) Get(source *WatchProbingTargetResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetResponse
func (fp *WatchProbingTargetResponse_FieldTerminalPath) GetSingle(source *WatchProbingTargetResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		return (*probing_target.ProbingTargetChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) ClearValue(item *WatchProbingTargetResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetResponse_FieldPathSelectorChange
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		return &WatchProbingTargetResponse_FieldTerminalPathValue{WatchProbingTargetResponse_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTargetChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		return &WatchProbingTargetResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetResponse_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTargetChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetResponse_FieldPathValue allows storing values for WatchProbingTargetResponse fields according to their type
type WatchProbingTargetResponse_FieldPathValue interface {
	WatchProbingTargetResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetResponse)
	CompareWith(*WatchProbingTargetResponse) (cmp int, comparable bool)
}

func ParseWatchProbingTargetResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetResponse_FieldPathValue), nil
}

func MustParseWatchProbingTargetResponse_FieldPathValue(pathStr, valueStr string) WatchProbingTargetResponse_FieldPathValue {
	fpv, err := ParseWatchProbingTargetResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetResponse_FieldTerminalPathValue struct {
	WatchProbingTargetResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetResponse_FieldPathValue = (*WatchProbingTargetResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetResponse' as interface{}
func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) AsChangeValue() (*probing_target.ProbingTargetChange, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTargetChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetResponse
func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) SetTo(target **WatchProbingTargetResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetResponse)
	}
	switch fpv.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probing_target.ProbingTargetChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetResponse'.
func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetResponse))
}

// WatchProbingTargetResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetResponse according to their type
// Present only for array (repeated) types.
type WatchProbingTargetResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetResponse_FieldPath
	ContainsValue(*WatchProbingTargetResponse) bool
}

// ParseWatchProbingTargetResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetResponse_FieldPathArrayItemValue = (*WatchProbingTargetResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetResponse as interface{}
func (fpaiv *WatchProbingTargetResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetResponse'
func (fpaiv *WatchProbingTargetResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetResponse) bool {
	slice := fpaiv.WatchProbingTargetResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetResponse fields according to their type
type WatchProbingTargetResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetResponse_FieldPath
}

func ParseWatchProbingTargetResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetResponse_FieldPathArrayOfValues = (*WatchProbingTargetResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probing_target.ProbingTargetChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probing_target.ProbingTargetChange, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTargetChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetsRequest_FieldPathSelector
	Get(source *WatchProbingTargetsRequest) []interface{}
	GetSingle(source *WatchProbingTargetsRequest) (interface{}, bool)
	ClearValue(item *WatchProbingTargetsRequest)

	// Those methods build corresponding WatchProbingTargetsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetsRequest_FieldPathArrayItemValue
}

type WatchProbingTargetsRequest_FieldPathSelector int32

const (
	WatchProbingTargetsRequest_FieldPathSelectorType         WatchProbingTargetsRequest_FieldPathSelector = 0
	WatchProbingTargetsRequest_FieldPathSelectorParent       WatchProbingTargetsRequest_FieldPathSelector = 1
	WatchProbingTargetsRequest_FieldPathSelectorPageSize     WatchProbingTargetsRequest_FieldPathSelector = 2
	WatchProbingTargetsRequest_FieldPathSelectorPageToken    WatchProbingTargetsRequest_FieldPathSelector = 3
	WatchProbingTargetsRequest_FieldPathSelectorOrderBy      WatchProbingTargetsRequest_FieldPathSelector = 4
	WatchProbingTargetsRequest_FieldPathSelectorResumeToken  WatchProbingTargetsRequest_FieldPathSelector = 5
	WatchProbingTargetsRequest_FieldPathSelectorFilter       WatchProbingTargetsRequest_FieldPathSelector = 6
	WatchProbingTargetsRequest_FieldPathSelectorFieldMask    WatchProbingTargetsRequest_FieldPathSelector = 7
	WatchProbingTargetsRequest_FieldPathSelectorView         WatchProbingTargetsRequest_FieldPathSelector = 8
	WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize WatchProbingTargetsRequest_FieldPathSelector = 9
)

func (s WatchProbingTargetsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", s))
	}
}

func BuildWatchProbingTargetsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbingTargetsRequest_FieldTerminalPath{selector: WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetsRequest", fp)
}

func ParseWatchProbingTargetsRequest_FieldPath(rawField string) (WatchProbingTargetsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetsRequest_FieldPath(fp)
}

func MustParseWatchProbingTargetsRequest_FieldPath(rawField string) WatchProbingTargetsRequest_FieldPath {
	fp, err := ParseWatchProbingTargetsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetsRequest_FieldTerminalPath struct {
	selector WatchProbingTargetsRequest_FieldPathSelector
}

var _ WatchProbingTargetsRequest_FieldPath = (*WatchProbingTargetsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) Selector() WatchProbingTargetsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetsRequest
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) Get(source *WatchProbingTargetsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbingTargetsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingTargetsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingTargetsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetsRequest
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) GetSingle(source *WatchProbingTargetsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		return (*probing_target.ParentReference)(nil)
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		return (*probing_target.PagerCursor)(nil)
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return (*probing_target.OrderBy)(nil)
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		return (*probing_target.Filter)(nil)
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) ClearValue(item *WatchProbingTargetsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbingTargetsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingTargetsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingTargetsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ParentReference)}
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.OrderBy)}
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Filter)}
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingTargetsRequest_FieldTerminalPathValue{WatchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ParentReference)}
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.OrderBy)}
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Filter)}
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues{WatchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetsRequest_FieldPathValue allows storing values for WatchProbingTargetsRequest fields according to their type
type WatchProbingTargetsRequest_FieldPathValue interface {
	WatchProbingTargetsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetsRequest)
	CompareWith(*WatchProbingTargetsRequest) (cmp int, comparable bool)
}

func ParseWatchProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetsRequest_FieldPathValue), nil
}

func MustParseWatchProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) WatchProbingTargetsRequest_FieldPathValue {
	fpv, err := ParseWatchProbingTargetsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetsRequest_FieldTerminalPathValue struct {
	WatchProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsRequest_FieldPathValue = (*WatchProbingTargetsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetsRequest' as interface{}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target.ParentReference, bool) {
	res, ok := fpv.value.(*probing_target.ParentReference)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target.OrderBy)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target.Filter, bool) {
	res, ok := fpv.value.(*probing_target.Filter)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetsRequest
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) SetTo(target **WatchProbingTargetsRequest) {
	if *target == nil {
		*target = new(WatchProbingTargetsRequest)
	}
	switch fpv.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target.ParentReference)
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target.PagerCursor)
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target.OrderBy)
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target.Filter)
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetsRequest'.
func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetsRequest))
}

// WatchProbingTargetsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetsRequest according to their type
// Present only for array (repeated) types.
type WatchProbingTargetsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetsRequest_FieldPath
	ContainsValue(*WatchProbingTargetsRequest) bool
}

// ParseWatchProbingTargetsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsRequest_FieldPathArrayItemValue = (*WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetsRequest as interface{}
func (fpaiv *WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetsRequest'
func (fpaiv *WatchProbingTargetsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetsRequest) bool {
	slice := fpaiv.WatchProbingTargetsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetsRequest fields according to their type
type WatchProbingTargetsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetsRequest_FieldPath
}

func ParseWatchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetsRequest_FieldPathArrayOfValues = (*WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target.ParentReference) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target.OrderBy) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target.Filter) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbingTargetsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_target.ParentReference)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target.OrderBy)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target.Filter)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetsResponse_FieldPathSelector
	Get(source *WatchProbingTargetsResponse) []interface{}
	GetSingle(source *WatchProbingTargetsResponse) (interface{}, bool)
	ClearValue(item *WatchProbingTargetsResponse)

	// Those methods build corresponding WatchProbingTargetsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetsResponse_FieldPathArrayItemValue
}

type WatchProbingTargetsResponse_FieldPathSelector int32

const (
	WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges WatchProbingTargetsResponse_FieldPathSelector = 0
	WatchProbingTargetsResponse_FieldPathSelectorIsCurrent            WatchProbingTargetsResponse_FieldPathSelector = 1
	WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange      WatchProbingTargetsResponse_FieldPathSelector = 2
	WatchProbingTargetsResponse_FieldPathSelectorResumeToken          WatchProbingTargetsResponse_FieldPathSelector = 3
	WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize         WatchProbingTargetsResponse_FieldPathSelector = 4
	WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset          WatchProbingTargetsResponse_FieldPathSelector = 5
	WatchProbingTargetsResponse_FieldPathSelectorIsHardReset          WatchProbingTargetsResponse_FieldPathSelector = 6
)

func (s WatchProbingTargetsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return "probing_target_changes"
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", s))
	}
}

func BuildWatchProbingTargetsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target_changes", "probingTargetChanges", "probing-target-changes":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbingTargetsResponse_FieldTerminalPath{selector: WatchProbingTargetsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbingTargetsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbingTargetsResponse_FieldSubPath{selector: WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetsResponse", fp)
}

func ParseWatchProbingTargetsResponse_FieldPath(rawField string) (WatchProbingTargetsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetsResponse_FieldPath(fp)
}

func MustParseWatchProbingTargetsResponse_FieldPath(rawField string) WatchProbingTargetsResponse_FieldPath {
	fp, err := ParseWatchProbingTargetsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetsResponse_FieldTerminalPath struct {
	selector WatchProbingTargetsResponse_FieldPathSelector
}

var _ WatchProbingTargetsResponse_FieldPath = (*WatchProbingTargetsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) Selector() WatchProbingTargetsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetsResponse
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) Get(source *WatchProbingTargetsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
			for _, value := range source.GetProbingTargetChanges() {
				values = append(values, value)
			}
		case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetsResponse
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) GetSingle(source *WatchProbingTargetsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		res := source.GetProbingTargetChanges()
		return res, res != nil
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return ([]*probing_target.ProbingTargetChange)(nil)
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbingTargetsResponse_PageTokenChange)(nil)
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) ClearValue(item *WatchProbingTargetsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
			item.ProbingTargetChanges = nil
		case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges ||
		fp.selector == WatchProbingTargetsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbingTargetsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbingTargetsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target.ProbingTargetChange)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbingTargetsResponse_PageTokenChange)}
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingTargetsResponse_FieldTerminalPathValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target.ProbingTargetChange)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbingTargetsResponse_PageTokenChange)}
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return &WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue{WatchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTargetChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbingTargetsResponse_FieldSubPath struct {
	selector WatchProbingTargetsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbingTargetsResponse_FieldPath = (*WatchProbingTargetsResponse_FieldSubPath)(nil)

func (fps *WatchProbingTargetsResponse_FieldSubPath) Selector() WatchProbingTargetsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbingTargetsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbingTargetsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbingTargetsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbingTargetsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbingTargetsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbingTargetsResponse
func (fps *WatchProbingTargetsResponse_FieldSubPath) Get(source *WatchProbingTargetsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbingTargetsResponse))
}

// GetSingle returns value of selected field from source WatchProbingTargetsResponse
func (fps *WatchProbingTargetsResponse_FieldSubPath) GetSingle(source *WatchProbingTargetsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbingTargetsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) ClearValue(item *WatchProbingTargetsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbingTargetsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbingTargetsResponse_FieldPathValue {
	return &WatchProbingTargetsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbingTargetsResponse_FieldPathArrayOfValues {
	return &WatchProbingTargetsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbingTargetsResponse_FieldPathArrayItemValue {
	return &WatchProbingTargetsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbingTargetsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbingTargetsResponse_FieldPathValue allows storing values for WatchProbingTargetsResponse fields according to their type
type WatchProbingTargetsResponse_FieldPathValue interface {
	WatchProbingTargetsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetsResponse)
	CompareWith(*WatchProbingTargetsResponse) (cmp int, comparable bool)
}

func ParseWatchProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetsResponse_FieldPathValue), nil
}

func MustParseWatchProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) WatchProbingTargetsResponse_FieldPathValue {
	fpv, err := ParseWatchProbingTargetsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetsResponse_FieldTerminalPathValue struct {
	WatchProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsResponse_FieldPathValue = (*WatchProbingTargetsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingTargetsResponse' as interface{}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsProbingTargetChangesValue() ([]*probing_target.ProbingTargetChange, bool) {
	res, ok := fpv.value.([]*probing_target.ProbingTargetChange)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbingTargetsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbingTargetsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingTargetsResponse
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) SetTo(target **WatchProbingTargetsResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetsResponse)
	}
	switch fpv.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		(*target).ProbingTargetChanges = fpv.value.([]*probing_target.ProbingTargetChange)
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbingTargetsResponse_PageTokenChange)
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetsResponse'.
func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		return 0, false
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetsResponse))
}

type WatchProbingTargetsResponse_FieldSubPathValue struct {
	WatchProbingTargetsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbingTargetsResponse_FieldPathValue = (*WatchProbingTargetsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbingTargetsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbingTargetsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) SetTo(target **WatchProbingTargetsResponse) {
	if *target == nil {
		*target = new(WatchProbingTargetsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbingTargetsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) CompareWith(source *WatchProbingTargetsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbingTargetsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingTargetsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbingTargetsResponse))
}

// WatchProbingTargetsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingTargetsResponse according to their type
// Present only for array (repeated) types.
type WatchProbingTargetsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetsResponse_FieldPath
	ContainsValue(*WatchProbingTargetsResponse) bool
}

// ParseWatchProbingTargetsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsResponse_FieldPathArrayItemValue = (*WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetsResponse as interface{}
func (fpaiv *WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetChangesItemValue() (*probing_target.ProbingTargetChange, bool) {
	res, ok := fpaiv.value.(*probing_target.ProbingTargetChange)
	return res, ok
}

func (fpaiv *WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetsResponse'
func (fpaiv *WatchProbingTargetsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetsResponse) bool {
	slice := fpaiv.WatchProbingTargetsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbingTargetsResponse_FieldSubPathArrayItemValue struct {
	WatchProbingTargetsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbingTargetsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbingTargetsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingTargetsResponse'
func (fpaivs *WatchProbingTargetsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbingTargetsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbingTargetsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingTargetsResponse fields according to their type
type WatchProbingTargetsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetsResponse_FieldPath
}

func ParseWatchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingTargetsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetsResponse_FieldPathArrayOfValues = (*WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetsResponse_FieldPathSelectorProbingTargetChanges:
		for _, v := range fpaov.values.([][]*probing_target.ProbingTargetChange) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbingTargetsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetChangesArrayOfValues() ([][]*probing_target.ProbingTargetChange, bool) {
	res, ok := fpaov.values.([][]*probing_target.ProbingTargetChange)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbingTargetsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbingTargetsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbingTargetsResponse_FieldSubPathArrayOfValues struct {
	WatchProbingTargetsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbingTargetsResponse_FieldPathArrayOfValues = (*WatchProbingTargetsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbingTargetsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbingTargetsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingTargetsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingTargetsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbingTargetsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbingTargetsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbingTargetsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbingTargetsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbingTargetsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbingTargetsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbingTargetsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbingTargetsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbingTargetsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingTargetsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingTargetsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingTargetsResponse_PageTokenChange", fp)
}

func ParseWatchProbingTargetsResponsePageTokenChange_FieldPath(rawField string) (WatchProbingTargetsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingTargetsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbingTargetsResponsePageTokenChange_FieldPath(rawField string) WatchProbingTargetsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbingTargetsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbingTargetsResponsePageTokenChange_FieldPath = (*WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbingTargetsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingTargetsResponse_PageTokenChange
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbingTargetsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingTargetsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbingTargetsResponse_PageTokenChange
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbingTargetsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingTargetsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probing_target.PagerCursor)(nil)
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probing_target.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbingTargetsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingTargetsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingTargetsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbingTargetsResponsePageTokenChange_FieldPathValue interface {
	WatchProbingTargetsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingTargetsResponse_PageTokenChange)
	CompareWith(*WatchProbingTargetsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbingTargetsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbingTargetsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingTargetsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbingTargetsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbingTargetsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsResponsePageTokenChange_FieldPathValue = (*WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbingTargetsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbingTargetsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target.PagerCursor)
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingTargetsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbingTargetsResponse_PageTokenChange'.
func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbingTargetsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingTargetsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingTargetsResponse_PageTokenChange))
}

// WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingTargetsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbingTargetsResponse_PageTokenChange) bool
}

// ParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingTargetsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingTargetsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingTargetsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingTargetsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingTargetsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingTargetsResponsePageTokenChange_FieldPath
}

func ParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbingTargetsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbingTargetsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingTargetsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingTargetsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbingTargetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbingTargetRequest_FieldPathSelector
	Get(source *CreateProbingTargetRequest) []interface{}
	GetSingle(source *CreateProbingTargetRequest) (interface{}, bool)
	ClearValue(item *CreateProbingTargetRequest)

	// Those methods build corresponding CreateProbingTargetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbingTargetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbingTargetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbingTargetRequest_FieldPathArrayItemValue
}

type CreateProbingTargetRequest_FieldPathSelector int32

const (
	CreateProbingTargetRequest_FieldPathSelectorParent        CreateProbingTargetRequest_FieldPathSelector = 0
	CreateProbingTargetRequest_FieldPathSelectorProbingTarget CreateProbingTargetRequest_FieldPathSelector = 1
)

func (s CreateProbingTargetRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return "probing_target"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", s))
	}
}

func BuildCreateProbingTargetRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbingTargetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbingTargetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbingTargetRequest_FieldTerminalPath{selector: CreateProbingTargetRequest_FieldPathSelectorParent}, nil
		case "probing_target", "probingTarget", "probing-target":
			return &CreateProbingTargetRequest_FieldTerminalPath{selector: CreateProbingTargetRequest_FieldPathSelectorProbingTarget}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target", "probingTarget", "probing-target":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbingTargetRequest_FieldSubPath{selector: CreateProbingTargetRequest_FieldPathSelectorProbingTarget, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbingTargetRequest", fp)
}

func ParseCreateProbingTargetRequest_FieldPath(rawField string) (CreateProbingTargetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbingTargetRequest_FieldPath(fp)
}

func MustParseCreateProbingTargetRequest_FieldPath(rawField string) CreateProbingTargetRequest_FieldPath {
	fp, err := ParseCreateProbingTargetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbingTargetRequest_FieldTerminalPath struct {
	selector CreateProbingTargetRequest_FieldPathSelector
}

var _ CreateProbingTargetRequest_FieldPath = (*CreateProbingTargetRequest_FieldTerminalPath)(nil)

func (fp *CreateProbingTargetRequest_FieldTerminalPath) Selector() CreateProbingTargetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbingTargetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbingTargetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbingTargetRequest
func (fp *CreateProbingTargetRequest_FieldTerminalPath) Get(source *CreateProbingTargetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbingTargetRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
			if source.ProbingTarget != nil {
				values = append(values, source.ProbingTarget)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbingTargetRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbingTargetRequest
func (fp *CreateProbingTargetRequest_FieldTerminalPath) GetSingle(source *CreateProbingTargetRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		res := source.GetProbingTarget()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbingTargetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		return (*probing_target.ParentReference)(nil)
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return (*probing_target.ProbingTarget)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) ClearValue(item *CreateProbingTargetRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbingTargetRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
			item.ProbingTarget = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbingTargetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbingTargetRequest_FieldPathSelectorParent
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbingTargetRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		return &CreateProbingTargetRequest_FieldTerminalPathValue{CreateProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ParentReference)}
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return &CreateProbingTargetRequest_FieldTerminalPathValue{CreateProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbingTargetRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbingTargetRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		return &CreateProbingTargetRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ParentReference)}
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return &CreateProbingTargetRequest_FieldTerminalPathArrayOfValues{CreateProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbingTargetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingTargetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbingTargetRequest_FieldSubPath struct {
	selector CreateProbingTargetRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbingTargetRequest_FieldPath = (*CreateProbingTargetRequest_FieldSubPath)(nil)

func (fps *CreateProbingTargetRequest_FieldSubPath) Selector() CreateProbingTargetRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbingTargetRequest_FieldSubPath) AsProbingTargetSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbingTargetRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbingTargetRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbingTargetRequest
func (fps *CreateProbingTargetRequest_FieldSubPath) Get(source *CreateProbingTargetRequest) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsProbingTargetSubPath(); ok {
		values = append(values, asProbingTargetFieldPath.Get(source.GetProbingTarget())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbingTargetRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbingTargetRequest))
}

// GetSingle returns value of selected field from source CreateProbingTargetRequest
func (fps *CreateProbingTargetRequest_FieldSubPath) GetSingle(source *CreateProbingTargetRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		if source.GetProbingTarget() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fps.selector))
	}
}

func (fps *CreateProbingTargetRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbingTargetRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbingTargetRequest_FieldSubPath) ClearValue(item *CreateProbingTargetRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
			fps.subPath.ClearValueRaw(item.ProbingTarget)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbingTargetRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbingTargetRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithIValue(value interface{}) CreateProbingTargetRequest_FieldPathValue {
	return &CreateProbingTargetRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbingTargetRequest_FieldPathArrayOfValues {
	return &CreateProbingTargetRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbingTargetRequest_FieldPathArrayItemValue {
	return &CreateProbingTargetRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbingTargetRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbingTargetRequest_FieldPathValue allows storing values for CreateProbingTargetRequest fields according to their type
type CreateProbingTargetRequest_FieldPathValue interface {
	CreateProbingTargetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbingTargetRequest)
	CompareWith(*CreateProbingTargetRequest) (cmp int, comparable bool)
}

func ParseCreateProbingTargetRequest_FieldPathValue(pathStr, valueStr string) (CreateProbingTargetRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbingTargetRequest_FieldPathValue), nil
}

func MustParseCreateProbingTargetRequest_FieldPathValue(pathStr, valueStr string) CreateProbingTargetRequest_FieldPathValue {
	fpv, err := ParseCreateProbingTargetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbingTargetRequest_FieldTerminalPathValue struct {
	CreateProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingTargetRequest_FieldPathValue = (*CreateProbingTargetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbingTargetRequest' as interface{}
func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) AsParentValue() (*probing_target.ParentReference, bool) {
	res, ok := fpv.value.(*probing_target.ParentReference)
	return res, ok
}
func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) AsProbingTargetValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbingTargetRequest
func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) SetTo(target **CreateProbingTargetRequest) {
	if *target == nil {
		*target = new(CreateProbingTargetRequest)
	}
	switch fpv.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target.ParentReference)
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		(*target).ProbingTarget = fpv.value.(*probing_target.ProbingTarget)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingTargetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbingTargetRequest_FieldTerminalPathValue' with the value under path in 'CreateProbingTargetRequest'.
func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) CompareWith(source *CreateProbingTargetRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingTargetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbingTargetRequest))
}

type CreateProbingTargetRequest_FieldSubPathValue struct {
	CreateProbingTargetRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbingTargetRequest_FieldPathValue = (*CreateProbingTargetRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) AsProbingTargetPathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) SetTo(target **CreateProbingTargetRequest) {
	if *target == nil {
		*target = new(CreateProbingTargetRequest)
	}
	switch fpvs.Selector() {
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).SetTo(&(*target).ProbingTarget)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingTargetRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) CompareWith(source *CreateProbingTargetRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).CompareWith(source.GetProbingTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingTargetRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbingTargetRequest))
}

// CreateProbingTargetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbingTargetRequest according to their type
// Present only for array (repeated) types.
type CreateProbingTargetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbingTargetRequest_FieldPath
	ContainsValue(*CreateProbingTargetRequest) bool
}

// ParseCreateProbingTargetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbingTargetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbingTargetRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbingTargetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbingTargetRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingTargetRequest_FieldPathArrayItemValue = (*CreateProbingTargetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbingTargetRequest as interface{}
func (fpaiv *CreateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbingTargetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbingTargetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingTargetRequest'
func (fpaiv *CreateProbingTargetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbingTargetRequest) bool {
	slice := fpaiv.CreateProbingTargetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbingTargetRequest_FieldSubPathArrayItemValue struct {
	CreateProbingTargetRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbingTargetRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbingTargetRequest_FieldSubPathArrayItemValue) AsProbingTargetPathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingTargetRequest'
func (fpaivs *CreateProbingTargetRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbingTargetRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue).ContainsValue(source.GetProbingTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingTargetRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbingTargetRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbingTargetRequest fields according to their type
type CreateProbingTargetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbingTargetRequest_FieldPath
}

func ParseCreateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbingTargetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingTargetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbingTargetRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbingTargetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbingTargetRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbingTargetRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbingTargetRequest_FieldPathArrayOfValues = (*CreateProbingTargetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbingTargetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbingTargetRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target.ParentReference) {
			values = append(values, v)
		}
	case CreateProbingTargetRequest_FieldPathSelectorProbingTarget:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbingTargetRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_target.ParentReference)
	return res, ok
}
func (fpaov *CreateProbingTargetRequest_FieldTerminalPathArrayOfValues) AsProbingTargetArrayOfValues() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget)
	return res, ok
}

type CreateProbingTargetRequest_FieldSubPathArrayOfValues struct {
	CreateProbingTargetRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbingTargetRequest_FieldPathArrayOfValues = (*CreateProbingTargetRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbingTargetRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbingTargetRequest_FieldSubPathArrayOfValues) AsProbingTargetPathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingTargetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingTargetRequest_FieldPathSelector
	Get(source *UpdateProbingTargetRequest) []interface{}
	GetSingle(source *UpdateProbingTargetRequest) (interface{}, bool)
	ClearValue(item *UpdateProbingTargetRequest)

	// Those methods build corresponding UpdateProbingTargetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingTargetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingTargetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingTargetRequest_FieldPathArrayItemValue
}

type UpdateProbingTargetRequest_FieldPathSelector int32

const (
	UpdateProbingTargetRequest_FieldPathSelectorProbingTarget UpdateProbingTargetRequest_FieldPathSelector = 0
	UpdateProbingTargetRequest_FieldPathSelectorUpdateMask    UpdateProbingTargetRequest_FieldPathSelector = 1
	UpdateProbingTargetRequest_FieldPathSelectorCas           UpdateProbingTargetRequest_FieldPathSelector = 2
)

func (s UpdateProbingTargetRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return "probing_target"
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", s))
	}
}

func BuildUpdateProbingTargetRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingTargetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingTargetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_target", "probingTarget", "probing-target":
			return &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorProbingTarget}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbingTargetRequest_FieldTerminalPath{selector: UpdateProbingTargetRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probing_target", "probingTarget", "probing-target":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetRequest_FieldSubPath{selector: UpdateProbingTargetRequest_FieldPathSelectorProbingTarget, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbingTargetRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetRequest_FieldSubPath{selector: UpdateProbingTargetRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingTargetRequest", fp)
}

func ParseUpdateProbingTargetRequest_FieldPath(rawField string) (UpdateProbingTargetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingTargetRequest_FieldPath(fp)
}

func MustParseUpdateProbingTargetRequest_FieldPath(rawField string) UpdateProbingTargetRequest_FieldPath {
	fp, err := ParseUpdateProbingTargetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingTargetRequest_FieldTerminalPath struct {
	selector UpdateProbingTargetRequest_FieldPathSelector
}

var _ UpdateProbingTargetRequest_FieldPath = (*UpdateProbingTargetRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) Selector() UpdateProbingTargetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingTargetRequest
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) Get(source *UpdateProbingTargetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
			if source.ProbingTarget != nil {
				values = append(values, source.ProbingTarget)
			}
		case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbingTargetRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingTargetRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingTargetRequest
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) GetSingle(source *UpdateProbingTargetRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		res := source.GetProbingTarget()
		return res, res != nil
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return (*probing_target.ProbingTarget)(nil)
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return (*UpdateProbingTargetRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) ClearValue(item *UpdateProbingTargetRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
			item.ProbingTarget = nil
		case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbingTargetRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingTargetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingTargetRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingTargetRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return &UpdateProbingTargetRequest_FieldTerminalPathValue{UpdateProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingTargetRequest_FieldTerminalPathValue{UpdateProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return &UpdateProbingTargetRequest_FieldTerminalPathValue{UpdateProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbingTargetRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return &UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget)}
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return &UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbingTargetRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingTargetRequest_FieldSubPath struct {
	selector UpdateProbingTargetRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingTargetRequest_FieldPath = (*UpdateProbingTargetRequest_FieldSubPath)(nil)

func (fps *UpdateProbingTargetRequest_FieldSubPath) Selector() UpdateProbingTargetRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingTargetRequest_FieldSubPath) AsProbingTargetSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}
func (fps *UpdateProbingTargetRequest_FieldSubPath) AsCasSubPath() (UpdateProbingTargetRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbingTargetRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingTargetRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingTargetRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingTargetRequest
func (fps *UpdateProbingTargetRequest_FieldSubPath) Get(source *UpdateProbingTargetRequest) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsProbingTargetSubPath(); ok {
		values = append(values, asProbingTargetFieldPath.Get(source.GetProbingTarget())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingTargetRequest))
}

// GetSingle returns value of selected field from source UpdateProbingTargetRequest
func (fps *UpdateProbingTargetRequest_FieldSubPath) GetSingle(source *UpdateProbingTargetRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		if source.GetProbingTarget() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTarget())
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingTargetRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) ClearValue(item *UpdateProbingTargetRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
			fps.subPath.ClearValueRaw(item.ProbingTarget)
		case UpdateProbingTargetRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingTargetRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbingTargetRequest_FieldPathValue {
	return &UpdateProbingTargetRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetRequest_FieldPathArrayOfValues {
	return &UpdateProbingTargetRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetRequest_FieldPathArrayItemValue {
	return &UpdateProbingTargetRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingTargetRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingTargetRequest_FieldPathValue allows storing values for UpdateProbingTargetRequest fields according to their type
type UpdateProbingTargetRequest_FieldPathValue interface {
	UpdateProbingTargetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingTargetRequest)
	CompareWith(*UpdateProbingTargetRequest) (cmp int, comparable bool)
}

func ParseUpdateProbingTargetRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbingTargetRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingTargetRequest_FieldPathValue), nil
}

func MustParseUpdateProbingTargetRequest_FieldPathValue(pathStr, valueStr string) UpdateProbingTargetRequest_FieldPathValue {
	fpv, err := ParseUpdateProbingTargetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingTargetRequest_FieldTerminalPathValue struct {
	UpdateProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetRequest_FieldPathValue = (*UpdateProbingTargetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbingTargetRequest' as interface{}
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) AsProbingTargetValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget)
	return res, ok
}
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbingTargetRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbingTargetRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbingTargetRequest
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) SetTo(target **UpdateProbingTargetRequest) {
	if *target == nil {
		*target = new(UpdateProbingTargetRequest)
	}
	switch fpv.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		(*target).ProbingTarget = fpv.value.(*probing_target.ProbingTarget)
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbingTargetRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingTargetRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbingTargetRequest'.
func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbingTargetRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return 0, false
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingTargetRequest))
}

type UpdateProbingTargetRequest_FieldSubPathValue struct {
	UpdateProbingTargetRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingTargetRequest_FieldPathValue = (*UpdateProbingTargetRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) AsProbingTargetPathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbingTargetRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbingTargetRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) SetTo(target **UpdateProbingTargetRequest) {
	if *target == nil {
		*target = new(UpdateProbingTargetRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).SetTo(&(*target).ProbingTarget)
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbingTargetRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) CompareWith(source *UpdateProbingTargetRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).CompareWith(source.GetProbingTarget())
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbingTargetRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingTargetRequest))
}

// UpdateProbingTargetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbingTargetRequest according to their type
// Present only for array (repeated) types.
type UpdateProbingTargetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingTargetRequest_FieldPath
	ContainsValue(*UpdateProbingTargetRequest) bool
}

// ParseUpdateProbingTargetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingTargetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingTargetRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingTargetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetRequest_FieldPathArrayItemValue = (*UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingTargetRequest as interface{}
func (fpaiv *UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingTargetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingTargetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingTargetRequest'
func (fpaiv *UpdateProbingTargetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingTargetRequest) bool {
	slice := fpaiv.UpdateProbingTargetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingTargetRequest_FieldSubPathArrayItemValue struct {
	UpdateProbingTargetRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingTargetRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingTargetRequest_FieldSubPathArrayItemValue) AsProbingTargetPathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbingTargetRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbingTargetRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbingTargetRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingTargetRequest'
func (fpaivs *UpdateProbingTargetRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingTargetRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		return fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue).ContainsValue(source.GetProbingTarget())
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbingTargetRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbingTargetRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbingTargetRequest fields according to their type
type UpdateProbingTargetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingTargetRequest_FieldPath
}

func ParseUpdateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingTargetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingTargetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingTargetRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingTargetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbingTargetRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingTargetRequest_FieldPathArrayOfValues = (*UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingTargetRequest_FieldPathSelectorProbingTarget:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	case UpdateProbingTargetRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbingTargetRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbingTargetRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues) AsProbingTargetArrayOfValues() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget)
	return res, ok
}
func (fpaov *UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbingTargetRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbingTargetRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbingTargetRequest_CAS)
	return res, ok
}

type UpdateProbingTargetRequest_FieldSubPathArrayOfValues struct {
	UpdateProbingTargetRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingTargetRequest_FieldPathArrayOfValues = (*UpdateProbingTargetRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingTargetRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingTargetRequest_FieldSubPathArrayOfValues) AsProbingTargetPathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbingTargetRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbingTargetRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbingTargetRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingTargetRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingTargetRequestCAS_FieldPathSelector
	Get(source *UpdateProbingTargetRequest_CAS) []interface{}
	GetSingle(source *UpdateProbingTargetRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbingTargetRequest_CAS)

	// Those methods build corresponding UpdateProbingTargetRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayItemValue
}

type UpdateProbingTargetRequestCAS_FieldPathSelector int32

const (
	UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState UpdateProbingTargetRequestCAS_FieldPathSelector = 0
	UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask        UpdateProbingTargetRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbingTargetRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", s))
	}
}

func BuildUpdateProbingTargetRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingTargetRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingTargetRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbingTargetRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbingTargetRequestCAS_FieldTerminalPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingTargetRequestCAS_FieldSubPath{selector: UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingTargetRequest_CAS", fp)
}

func ParseUpdateProbingTargetRequestCAS_FieldPath(rawField string) (UpdateProbingTargetRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingTargetRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbingTargetRequestCAS_FieldPath(rawField string) UpdateProbingTargetRequestCAS_FieldPath {
	fp, err := ParseUpdateProbingTargetRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingTargetRequestCAS_FieldTerminalPath struct {
	selector UpdateProbingTargetRequestCAS_FieldPathSelector
}

var _ UpdateProbingTargetRequestCAS_FieldPath = (*UpdateProbingTargetRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) Selector() UpdateProbingTargetRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingTargetRequest_CAS
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) Get(source *UpdateProbingTargetRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingTargetRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingTargetRequest_CAS
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbingTargetRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingTargetRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return (*probing_target.ProbingTarget)(nil)
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbingTargetRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingTargetRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingTargetRequestCAS_FieldTerminalPathValue{UpdateProbingTargetRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingTargetRequestCAS_FieldTerminalPathValue{UpdateProbingTargetRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget)}
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingTargetRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingTargetRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingTargetRequestCAS_FieldSubPath struct {
	selector UpdateProbingTargetRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingTargetRequestCAS_FieldPath = (*UpdateProbingTargetRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) Selector() UpdateProbingTargetRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingTargetRequest_CAS
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) Get(source *UpdateProbingTargetRequest_CAS) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbingTargetFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingTargetRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbingTargetRequest_CAS
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) GetSingle(source *UpdateProbingTargetRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingTargetRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) ClearValue(item *UpdateProbingTargetRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingTargetRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathValue {
	return &UpdateProbingTargetRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbingTargetRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingTargetRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbingTargetRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingTargetRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingTargetRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbingTargetRequestCAS_FieldPathValue interface {
	UpdateProbingTargetRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingTargetRequest_CAS)
	CompareWith(*UpdateProbingTargetRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbingTargetRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbingTargetRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbingTargetRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingTargetRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbingTargetRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbingTargetRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbingTargetRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingTargetRequestCAS_FieldTerminalPathValue struct {
	UpdateProbingTargetRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetRequestCAS_FieldPathValue = (*UpdateProbingTargetRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget)
	return res, ok
}
func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbingTargetRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingTargetRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probing_target.ProbingTarget)
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingTargetRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbingTargetRequest_CAS'.
func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbingTargetRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingTargetRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingTargetRequest_CAS))
}

type UpdateProbingTargetRequestCAS_FieldSubPathValue struct {
	UpdateProbingTargetRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingTargetRequestCAS_FieldPathValue = (*UpdateProbingTargetRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbingTargetRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingTargetRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingTargetRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbingTargetRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingTargetRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingTargetRequest_CAS))
}

// UpdateProbingTargetRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbingTargetRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingTargetRequestCAS_FieldPath
	ContainsValue(*UpdateProbingTargetRequest_CAS) bool
}

// ParseUpdateProbingTargetRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingTargetRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingTargetRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingTargetRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingTargetRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingTargetRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingTargetRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingTargetRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbingTargetRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingTargetRequestCAS_FieldPathArrayItemValue = (*UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingTargetRequest_CAS as interface{}
func (fpaiv *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingTargetRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingTargetRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingTargetRequest_CAS) bool {
	slice := fpaiv.UpdateProbingTargetRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingTargetRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbingTargetRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingTargetRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingTargetRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbingTargetRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingTargetRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingTargetRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbingTargetRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbingTargetRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingTargetRequestCAS_FieldPath
}

func ParseUpdateProbingTargetRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingTargetRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingTargetRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingTargetRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingTargetRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingTargetRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingTargetRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbingTargetRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingTargetRequestCAS_FieldPathArrayOfValues = (*UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingTargetRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	case UpdateProbingTargetRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget)
	return res, ok
}
func (fpaov *UpdateProbingTargetRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}

type UpdateProbingTargetRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbingTargetRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingTargetRequestCAS_FieldPathArrayOfValues = (*UpdateProbingTargetRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingTargetRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingTargetRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbingTargetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbingTargetRequest_FieldPathSelector
	Get(source *DeleteProbingTargetRequest) []interface{}
	GetSingle(source *DeleteProbingTargetRequest) (interface{}, bool)
	ClearValue(item *DeleteProbingTargetRequest)

	// Those methods build corresponding DeleteProbingTargetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbingTargetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbingTargetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbingTargetRequest_FieldPathArrayItemValue
}

type DeleteProbingTargetRequest_FieldPathSelector int32

const (
	DeleteProbingTargetRequest_FieldPathSelectorName DeleteProbingTargetRequest_FieldPathSelector = 0
)

func (s DeleteProbingTargetRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", s))
	}
}

func BuildDeleteProbingTargetRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbingTargetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbingTargetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbingTargetRequest_FieldTerminalPath{selector: DeleteProbingTargetRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbingTargetRequest", fp)
}

func ParseDeleteProbingTargetRequest_FieldPath(rawField string) (DeleteProbingTargetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbingTargetRequest_FieldPath(fp)
}

func MustParseDeleteProbingTargetRequest_FieldPath(rawField string) DeleteProbingTargetRequest_FieldPath {
	fp, err := ParseDeleteProbingTargetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbingTargetRequest_FieldTerminalPath struct {
	selector DeleteProbingTargetRequest_FieldPathSelector
}

var _ DeleteProbingTargetRequest_FieldPath = (*DeleteProbingTargetRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) Selector() DeleteProbingTargetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbingTargetRequest
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) Get(source *DeleteProbingTargetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbingTargetRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbingTargetRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbingTargetRequest
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) GetSingle(source *DeleteProbingTargetRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbingTargetRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		return (*probing_target.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) ClearValue(item *DeleteProbingTargetRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbingTargetRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbingTargetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbingTargetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbingTargetRequest_FieldPathSelectorName
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbingTargetRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		return &DeleteProbingTargetRequest_FieldTerminalPathValue{DeleteProbingTargetRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbingTargetRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues{DeleteProbingTargetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		return &DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues{DeleteProbingTargetRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbingTargetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingTargetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbingTargetRequest_FieldPathValue allows storing values for DeleteProbingTargetRequest fields according to their type
type DeleteProbingTargetRequest_FieldPathValue interface {
	DeleteProbingTargetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbingTargetRequest)
	CompareWith(*DeleteProbingTargetRequest) (cmp int, comparable bool)
}

func ParseDeleteProbingTargetRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbingTargetRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbingTargetRequest_FieldPathValue), nil
}

func MustParseDeleteProbingTargetRequest_FieldPathValue(pathStr, valueStr string) DeleteProbingTargetRequest_FieldPathValue {
	fpv, err := ParseDeleteProbingTargetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbingTargetRequest_FieldTerminalPathValue struct {
	DeleteProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingTargetRequest_FieldPathValue = (*DeleteProbingTargetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbingTargetRequest' as interface{}
func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) AsNameValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbingTargetRequest
func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) SetTo(target **DeleteProbingTargetRequest) {
	if *target == nil {
		*target = new(DeleteProbingTargetRequest)
	}
	switch fpv.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_target.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbingTargetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbingTargetRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbingTargetRequest'.
func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbingTargetRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingTargetRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingTargetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbingTargetRequest))
}

// DeleteProbingTargetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbingTargetRequest according to their type
// Present only for array (repeated) types.
type DeleteProbingTargetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbingTargetRequest_FieldPath
	ContainsValue(*DeleteProbingTargetRequest) bool
}

// ParseDeleteProbingTargetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbingTargetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbingTargetRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbingTargetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbingTargetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbingTargetRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingTargetRequest_FieldPathArrayItemValue = (*DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbingTargetRequest as interface{}
func (fpaiv *DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbingTargetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbingTargetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbingTargetRequest'
func (fpaiv *DeleteProbingTargetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbingTargetRequest) bool {
	slice := fpaiv.DeleteProbingTargetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbingTargetRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbingTargetRequest fields according to their type
type DeleteProbingTargetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbingTargetRequest_FieldPath
}

func ParseDeleteProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbingTargetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbingTargetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingTargetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbingTargetRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbingTargetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbingTargetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbingTargetRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbingTargetRequest_FieldPathArrayOfValues = (*DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbingTargetRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbingTargetRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingTargetsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingTargetsRequest_FieldPathSelector
	Get(source *SearchProbingTargetsRequest) []interface{}
	GetSingle(source *SearchProbingTargetsRequest) (interface{}, bool)
	ClearValue(item *SearchProbingTargetsRequest)

	// Those methods build corresponding SearchProbingTargetsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingTargetsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingTargetsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingTargetsRequest_FieldPathArrayItemValue
}

type SearchProbingTargetsRequest_FieldPathSelector int32

const (
	SearchProbingTargetsRequest_FieldPathSelectorParent    SearchProbingTargetsRequest_FieldPathSelector = 0
	SearchProbingTargetsRequest_FieldPathSelectorPageSize  SearchProbingTargetsRequest_FieldPathSelector = 1
	SearchProbingTargetsRequest_FieldPathSelectorPageToken SearchProbingTargetsRequest_FieldPathSelector = 2
	SearchProbingTargetsRequest_FieldPathSelectorOrderBy   SearchProbingTargetsRequest_FieldPathSelector = 3
	SearchProbingTargetsRequest_FieldPathSelectorFilter    SearchProbingTargetsRequest_FieldPathSelector = 4
	SearchProbingTargetsRequest_FieldPathSelectorFieldMask SearchProbingTargetsRequest_FieldPathSelector = 5
	SearchProbingTargetsRequest_FieldPathSelectorView      SearchProbingTargetsRequest_FieldPathSelector = 6
	SearchProbingTargetsRequest_FieldPathSelectorPhrase    SearchProbingTargetsRequest_FieldPathSelector = 7
)

func (s SearchProbingTargetsRequest_FieldPathSelector) String() string {
	switch s {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		return "parent"
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		return "filter"
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		return "view"
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		return "phrase"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", s))
	}
}

func BuildSearchProbingTargetsRequest_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingTargetsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingTargetsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorView}, nil
		case "phrase":
			return &SearchProbingTargetsRequest_FieldTerminalPath{selector: SearchProbingTargetsRequest_FieldPathSelectorPhrase}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingTargetsRequest", fp)
}

func ParseSearchProbingTargetsRequest_FieldPath(rawField string) (SearchProbingTargetsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingTargetsRequest_FieldPath(fp)
}

func MustParseSearchProbingTargetsRequest_FieldPath(rawField string) SearchProbingTargetsRequest_FieldPath {
	fp, err := ParseSearchProbingTargetsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingTargetsRequest_FieldTerminalPath struct {
	selector SearchProbingTargetsRequest_FieldPathSelector
}

var _ SearchProbingTargetsRequest_FieldPath = (*SearchProbingTargetsRequest_FieldTerminalPath)(nil)

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) Selector() SearchProbingTargetsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingTargetsRequest
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) Get(source *SearchProbingTargetsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingTargetsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case SearchProbingTargetsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case SearchProbingTargetsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
			values = append(values, source.Phrase)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingTargetsRequest))
}

// GetSingle returns value pointed by specific field of from source SearchProbingTargetsRequest
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) GetSingle(source *SearchProbingTargetsRequest) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		return source.GetPhrase(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingTargetsRequest))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		return (*probing_target.ParentName)(nil)
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		return (*probing_target.PagerCursor)(nil)
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return (*probing_target.OrderBy)(nil)
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		return (*probing_target.Filter)(nil)
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return (*probing_target.ProbingTarget_FieldMask)(nil)
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) ClearValue(item *SearchProbingTargetsRequest) {
	if item != nil {
		switch fp.selector {
		case SearchProbingTargetsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case SearchProbingTargetsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case SearchProbingTargetsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
			item.Phrase = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingTargetsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingTargetsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingTargetsRequest_FieldPathSelectorParent ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorPageSize ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorPageToken ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorOrderBy ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorFilter ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorFieldMask ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorView ||
		fp.selector == SearchProbingTargetsRequest_FieldPathSelectorPhrase
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithIValue(value interface{}) SearchProbingTargetsRequest_FieldPathValue {
	switch fp.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ParentName)}
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.OrderBy)}
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.Filter)}
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget_FieldMask)}
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		return &SearchProbingTargetsRequest_FieldTerminalPathValue{SearchProbingTargetsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov := &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ParentName)}
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.OrderBy)}
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.Filter)}
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]*probing_target.ProbingTarget_FieldMask)}
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		return &SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues{SearchProbingTargetsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingTargetsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchProbingTargetsRequest_FieldPathValue allows storing values for SearchProbingTargetsRequest fields according to their type
type SearchProbingTargetsRequest_FieldPathValue interface {
	SearchProbingTargetsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingTargetsRequest)
	CompareWith(*SearchProbingTargetsRequest) (cmp int, comparable bool)
}

func ParseSearchProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) (SearchProbingTargetsRequest_FieldPathValue, error) {
	fp, err := ParseSearchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingTargetsRequest_FieldPathValue), nil
}

func MustParseSearchProbingTargetsRequest_FieldPathValue(pathStr, valueStr string) SearchProbingTargetsRequest_FieldPathValue {
	fpv, err := ParseSearchProbingTargetsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingTargetsRequest_FieldTerminalPathValue struct {
	SearchProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetsRequest_FieldPathValue = (*SearchProbingTargetsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingTargetsRequest' as interface{}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsParentValue() (*probing_target.ParentName, bool) {
	res, ok := fpv.value.(*probing_target.ParentName)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_target.OrderBy, bool) {
	res, ok := fpv.value.(*probing_target.OrderBy)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_target.Filter, bool) {
	res, ok := fpv.value.(*probing_target.Filter)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpv.value.(*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) AsPhraseValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingTargetsRequest
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) SetTo(target **SearchProbingTargetsRequest) {
	if *target == nil {
		*target = new(SearchProbingTargetsRequest)
	}
	switch fpv.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_target.ParentName)
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_target.PagerCursor)
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_target.OrderBy)
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_target.Filter)
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_target.ProbingTarget_FieldMask)
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		(*target).Phrase = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingTargetsRequest_FieldTerminalPathValue' with the value under path in 'SearchProbingTargetsRequest'.
func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) CompareWith(source *SearchProbingTargetsRequest) (int, bool) {
	switch fpv.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_target.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		return 0, false
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		return 0, false
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		leftValue := fpv.value.(string)
		rightValue := source.GetPhrase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsRequest: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingTargetsRequest))
}

// SearchProbingTargetsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingTargetsRequest according to their type
// Present only for array (repeated) types.
type SearchProbingTargetsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingTargetsRequest_FieldPath
	ContainsValue(*SearchProbingTargetsRequest) bool
}

// ParseSearchProbingTargetsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingTargetsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingTargetsRequest_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingTargetsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingTargetsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue struct {
	SearchProbingTargetsRequest_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetsRequest_FieldPathArrayItemValue = (*SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingTargetsRequest as interface{}
func (fpaiv *SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingTargetsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingTargetsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetsRequest'
func (fpaiv *SearchProbingTargetsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingTargetsRequest) bool {
	slice := fpaiv.SearchProbingTargetsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchProbingTargetsRequest_FieldPathArrayOfValues allows storing slice of values for SearchProbingTargetsRequest fields according to their type
type SearchProbingTargetsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingTargetsRequest_FieldPath
}

func ParseSearchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingTargetsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingTargetsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingTargetsRequest_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingTargetsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingTargetsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues struct {
	SearchProbingTargetsRequest_FieldTerminalPath
	values interface{}
}

var _ SearchProbingTargetsRequest_FieldPathArrayOfValues = (*SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingTargetsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_target.ParentName) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_target.OrderBy) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_target.Filter) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_target.ProbingTarget_FieldMask) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case SearchProbingTargetsRequest_FieldPathSelectorPhrase:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_target.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_target.ParentName)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_target.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_target.OrderBy)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_target.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target.Filter)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_target.ProbingTarget_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_target.ProbingTarget_FieldMask)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *SearchProbingTargetsRequest_FieldTerminalPathArrayOfValues) AsPhraseArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchProbingTargetsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchProbingTargetsResponse_FieldPathSelector
	Get(source *SearchProbingTargetsResponse) []interface{}
	GetSingle(source *SearchProbingTargetsResponse) (interface{}, bool)
	ClearValue(item *SearchProbingTargetsResponse)

	// Those methods build corresponding SearchProbingTargetsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchProbingTargetsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchProbingTargetsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchProbingTargetsResponse_FieldPathArrayItemValue
}

type SearchProbingTargetsResponse_FieldPathSelector int32

const (
	SearchProbingTargetsResponse_FieldPathSelectorProbingTargets    SearchProbingTargetsResponse_FieldPathSelector = 0
	SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken     SearchProbingTargetsResponse_FieldPathSelector = 1
	SearchProbingTargetsResponse_FieldPathSelectorNextPageToken     SearchProbingTargetsResponse_FieldPathSelector = 2
	SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset     SearchProbingTargetsResponse_FieldPathSelector = 3
	SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount SearchProbingTargetsResponse_FieldPathSelector = 4
)

func (s SearchProbingTargetsResponse_FieldPathSelector) String() string {
	switch s {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return "probing_targets"
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", s))
	}
}

func BuildSearchProbingTargetsResponse_FieldPath(fp gotenobject.RawFieldPath) (SearchProbingTargetsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchProbingTargetsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			return &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorProbingTargets}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &SearchProbingTargetsResponse_FieldTerminalPath{selector: SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "probing_targets", "probingTargets", "probing-targets":
			if subpath, err := probing_target.BuildProbingTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchProbingTargetsResponse_FieldSubPath{selector: SearchProbingTargetsResponse_FieldPathSelectorProbingTargets, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchProbingTargetsResponse", fp)
}

func ParseSearchProbingTargetsResponse_FieldPath(rawField string) (SearchProbingTargetsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchProbingTargetsResponse_FieldPath(fp)
}

func MustParseSearchProbingTargetsResponse_FieldPath(rawField string) SearchProbingTargetsResponse_FieldPath {
	fp, err := ParseSearchProbingTargetsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchProbingTargetsResponse_FieldTerminalPath struct {
	selector SearchProbingTargetsResponse_FieldPathSelector
}

var _ SearchProbingTargetsResponse_FieldPath = (*SearchProbingTargetsResponse_FieldTerminalPath)(nil)

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) Selector() SearchProbingTargetsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchProbingTargetsResponse
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) Get(source *SearchProbingTargetsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, value := range source.GetProbingTargets() {
				values = append(values, value)
			}
		case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchProbingTargetsResponse))
}

// GetSingle returns value pointed by specific field of from source SearchProbingTargetsResponse
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) GetSingle(source *SearchProbingTargetsResponse) (interface{}, bool) {
	switch fp.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		res := source.GetProbingTargets()
		return res, res != nil
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return ([]*probing_target.ProbingTarget)(nil)
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_target.PagerCursor)(nil)
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return (*probing_target.PagerCursor)(nil)
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) ClearValue(item *SearchProbingTargetsResponse) {
	if item != nil {
		switch fp.selector {
		case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
			item.ProbingTargets = nil
		case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
		}
	}
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchProbingTargetsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == SearchProbingTargetsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithIValue(value interface{}) SearchProbingTargetsResponse_FieldPathValue {
	switch fp.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &SearchProbingTargetsResponse_FieldTerminalPathValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.([]*probing_target.ProbingTarget)}
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingTargetsResponse_FieldTerminalPathValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingTargetsResponse_FieldTerminalPathValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.PagerCursor)}
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingTargetsResponse_FieldTerminalPathValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingTargetsResponse_FieldTerminalPathValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov := &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_target.ProbingTarget)}
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]*probing_target.PagerCursor)}
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues{SearchProbingTargetsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchProbingTargetsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return &SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue{SearchProbingTargetsResponse_FieldTerminalPath: *fp, value: value.(*probing_target.ProbingTarget)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fp.selector))
	}
}

func (fp *SearchProbingTargetsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchProbingTargetsResponse_FieldSubPath struct {
	selector SearchProbingTargetsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchProbingTargetsResponse_FieldPath = (*SearchProbingTargetsResponse_FieldSubPath)(nil)

func (fps *SearchProbingTargetsResponse_FieldSubPath) Selector() SearchProbingTargetsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *SearchProbingTargetsResponse_FieldSubPath) AsProbingTargetsSubPath() (probing_target.ProbingTarget_FieldPath, bool) {
	res, ok := fps.subPath.(probing_target.ProbingTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchProbingTargetsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchProbingTargetsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchProbingTargetsResponse
func (fps *SearchProbingTargetsResponse_FieldSubPath) Get(source *SearchProbingTargetsResponse) (values []interface{}) {
	if asProbingTargetFieldPath, ok := fps.AsProbingTargetsSubPath(); ok {
		for _, item := range source.GetProbingTargets() {
			values = append(values, asProbingTargetFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fps.selector))
	}
	return
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchProbingTargetsResponse))
}

// GetSingle returns value of selected field from source SearchProbingTargetsResponse
func (fps *SearchProbingTargetsResponse_FieldSubPath) GetSingle(source *SearchProbingTargetsResponse) (interface{}, bool) {
	switch fps.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		if len(source.GetProbingTargets()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingTargets()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fps.selector))
	}
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchProbingTargetsResponse))
}

// GetDefault returns a default value of the field type
func (fps *SearchProbingTargetsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) ClearValue(item *SearchProbingTargetsResponse) {
	if item != nil {
		switch fps.selector {
		case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
			for _, subItem := range item.ProbingTargets {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fps.selector))
		}
	}
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchProbingTargetsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchProbingTargetsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithIValue(value interface{}) SearchProbingTargetsResponse_FieldPathValue {
	return &SearchProbingTargetsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) SearchProbingTargetsResponse_FieldPathArrayOfValues {
	return &SearchProbingTargetsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) SearchProbingTargetsResponse_FieldPathArrayItemValue {
	return &SearchProbingTargetsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchProbingTargetsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchProbingTargetsResponse_FieldPathValue allows storing values for SearchProbingTargetsResponse fields according to their type
type SearchProbingTargetsResponse_FieldPathValue interface {
	SearchProbingTargetsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchProbingTargetsResponse)
	CompareWith(*SearchProbingTargetsResponse) (cmp int, comparable bool)
}

func ParseSearchProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) (SearchProbingTargetsResponse_FieldPathValue, error) {
	fp, err := ParseSearchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchProbingTargetsResponse_FieldPathValue), nil
}

func MustParseSearchProbingTargetsResponse_FieldPathValue(pathStr, valueStr string) SearchProbingTargetsResponse_FieldPathValue {
	fpv, err := ParseSearchProbingTargetsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchProbingTargetsResponse_FieldTerminalPathValue struct {
	SearchProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetsResponse_FieldPathValue = (*SearchProbingTargetsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchProbingTargetsResponse' as interface{}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) AsProbingTargetsValue() ([]*probing_target.ProbingTarget, bool) {
	res, ok := fpv.value.([]*probing_target.ProbingTarget)
	return res, ok
}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_target.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_target.PagerCursor)
	return res, ok
}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SearchProbingTargetsResponse
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) SetTo(target **SearchProbingTargetsResponse) {
	if *target == nil {
		*target = new(SearchProbingTargetsResponse)
	}
	switch fpv.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		(*target).ProbingTargets = fpv.value.([]*probing_target.ProbingTarget)
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_target.PagerCursor)
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_target.PagerCursor)
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchProbingTargetsResponse_FieldTerminalPathValue' with the value under path in 'SearchProbingTargetsResponse'.
func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) CompareWith(source *SearchProbingTargetsResponse) (int, bool) {
	switch fpv.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fpv.selector))
	}
}

func (fpv *SearchProbingTargetsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchProbingTargetsResponse))
}

type SearchProbingTargetsResponse_FieldSubPathValue struct {
	SearchProbingTargetsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchProbingTargetsResponse_FieldPathValue = (*SearchProbingTargetsResponse_FieldSubPathValue)(nil)

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) AsProbingTargetsPathValue() (probing_target.ProbingTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_target.ProbingTarget_FieldPathValue)
	return res, ok
}

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) SetTo(target **SearchProbingTargetsResponse) {
	if *target == nil {
		*target = new(SearchProbingTargetsResponse)
	}
	switch fpvs.Selector() {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchProbingTargetsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) CompareWith(source *SearchProbingTargetsResponse) (int, bool) {
	switch fpvs.Selector() {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchProbingTargetsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchProbingTargetsResponse))
}

// SearchProbingTargetsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchProbingTargetsResponse according to their type
// Present only for array (repeated) types.
type SearchProbingTargetsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchProbingTargetsResponse_FieldPath
	ContainsValue(*SearchProbingTargetsResponse) bool
}

// ParseSearchProbingTargetsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SearchProbingTargetsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchProbingTargetsResponse_FieldPathArrayItemValue), nil
}

func MustParseSearchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr string) SearchProbingTargetsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchProbingTargetsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue struct {
	SearchProbingTargetsResponse_FieldTerminalPath
	value interface{}
}

var _ SearchProbingTargetsResponse_FieldPathArrayItemValue = (*SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchProbingTargetsResponse as interface{}
func (fpaiv *SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue) AsProbingTargetsItemValue() (*probing_target.ProbingTarget, bool) {
	res, ok := fpaiv.value.(*probing_target.ProbingTarget)
	return res, ok
}

func (fpaiv *SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SearchProbingTargetsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchProbingTargetsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetsResponse'
func (fpaiv *SearchProbingTargetsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchProbingTargetsResponse) bool {
	slice := fpaiv.SearchProbingTargetsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchProbingTargetsResponse_FieldSubPathArrayItemValue struct {
	SearchProbingTargetsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchProbingTargetsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchProbingTargetsResponse_FieldSubPathArrayItemValue) AsProbingTargetsPathItemValue() (probing_target.ProbingTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_target.ProbingTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchProbingTargetsResponse'
func (fpaivs *SearchProbingTargetsResponse_FieldSubPathArrayItemValue) ContainsValue(source *SearchProbingTargetsResponse) bool {
	switch fpaivs.Selector() {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for SearchProbingTargetsResponse: %d", fpaivs.Selector()))
	}
}

// SearchProbingTargetsResponse_FieldPathArrayOfValues allows storing slice of values for SearchProbingTargetsResponse fields according to their type
type SearchProbingTargetsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchProbingTargetsResponse_FieldPath
}

func ParseSearchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchProbingTargetsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchProbingTargetsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchProbingTargetsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchProbingTargetsResponse_FieldPathArrayOfValues), nil
}

func MustParseSearchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SearchProbingTargetsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSearchProbingTargetsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues struct {
	SearchProbingTargetsResponse_FieldTerminalPath
	values interface{}
}

var _ SearchProbingTargetsResponse_FieldPathArrayOfValues = (*SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchProbingTargetsResponse_FieldPathSelectorProbingTargets:
		for _, v := range fpaov.values.([][]*probing_target.ProbingTarget) {
			values = append(values, v)
		}
	case SearchProbingTargetsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_target.PagerCursor) {
			values = append(values, v)
		}
	case SearchProbingTargetsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SearchProbingTargetsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsProbingTargetsArrayOfValues() ([][]*probing_target.ProbingTarget, bool) {
	res, ok := fpaov.values.([][]*probing_target.ProbingTarget)
	return res, ok
}
func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_target.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_target.PagerCursor)
	return res, ok
}
func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SearchProbingTargetsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type SearchProbingTargetsResponse_FieldSubPathArrayOfValues struct {
	SearchProbingTargetsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchProbingTargetsResponse_FieldPathArrayOfValues = (*SearchProbingTargetsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchProbingTargetsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchProbingTargetsResponse_FieldSubPathArrayOfValues) AsProbingTargetsPathArrayOfValues() (probing_target.ProbingTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_target.ProbingTarget_FieldPathArrayOfValues)
	return res, ok
}
