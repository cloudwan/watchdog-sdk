// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/shared_token_custom.proto
// DO NOT EDIT!!!

package shared_token_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
	shared_token "github.com/cloudwan/watchdog-sdk/resources/v1alpha/shared_token"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &probe.Probe{}
	_ = &shared_token.SharedToken{}
)

type RegisterProbeRequest_FieldMask struct {
	Paths []RegisterProbeRequest_FieldPath
}

func FullRegisterProbeRequest_FieldMask() *RegisterProbeRequest_FieldMask {
	res := &RegisterProbeRequest_FieldMask{}
	res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorValues})
	res.Paths = append(res.Paths, &RegisterProbeRequest_FieldTerminalPath{selector: RegisterProbeRequest_FieldPathSelectorStatus})
	return res
}

func (fieldMask *RegisterProbeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RegisterProbeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RegisterProbeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRegisterProbeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RegisterProbeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RegisterProbeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RegisterProbeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRegisterProbeRequest_FieldPath(raw)
	})
}

func (fieldMask *RegisterProbeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *RegisterProbeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RegisterProbeRequest_FieldMask) Subtract(other *RegisterProbeRequest_FieldMask) *RegisterProbeRequest_FieldMask {
	result := &RegisterProbeRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[RegisterProbeRequest_FieldPathSelector]gotenobject.FieldMask{
		RegisterProbeRequest_FieldPathSelectorStatus: &probe.Probe_Status_FieldMask{},
	}
	mySubMasks := map[RegisterProbeRequest_FieldPathSelector]gotenobject.FieldMask{
		RegisterProbeRequest_FieldPathSelectorStatus: &probe.Probe_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RegisterProbeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RegisterProbeRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RegisterProbeRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case RegisterProbeRequest_FieldPathSelectorStatus:
						mySubMasks[RegisterProbeRequest_FieldPathSelectorStatus] = probe.FullProbe_Status_FieldMask()
					}
				} else if tp, ok := path.(*RegisterProbeRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RegisterProbeRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RegisterProbeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RegisterProbeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RegisterProbeRequest_FieldMask) FilterInputFields() *RegisterProbeRequest_FieldMask {
	result := &RegisterProbeRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RegisterProbeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RegisterProbeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RegisterProbeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRegisterProbeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RegisterProbeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RegisterProbeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RegisterProbeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RegisterProbeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RegisterProbeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RegisterProbeRequest_FieldMask) AppendPath(path RegisterProbeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RegisterProbeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RegisterProbeRequest_FieldPath))
}

func (fieldMask *RegisterProbeRequest_FieldMask) GetPaths() []RegisterProbeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RegisterProbeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RegisterProbeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRegisterProbeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RegisterProbeRequest_FieldMask) Set(target, source *RegisterProbeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RegisterProbeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RegisterProbeRequest), source.(*RegisterProbeRequest))
}

func (fieldMask *RegisterProbeRequest_FieldMask) Project(source *RegisterProbeRequest) *RegisterProbeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RegisterProbeRequest{}
	statusMask := &probe.Probe_Status_FieldMask{}
	wholeStatusAccepted := false
	var valuesMapKeys []string
	wholeValuesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RegisterProbeRequest_FieldTerminalPath:
			switch tp.selector {
			case RegisterProbeRequest_FieldPathSelectorName:
				result.Name = source.Name
			case RegisterProbeRequest_FieldPathSelectorValues:
				result.Values = source.Values
				wholeValuesAccepted = true
			case RegisterProbeRequest_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *RegisterProbeRequest_FieldSubPath:
			switch tp.selector {
			case RegisterProbeRequest_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(probe.ProbeStatus_FieldPath))
			}
		case *RegisterProbeRequest_FieldPathMap:
			switch tp.selector {
			case RegisterProbeRequest_FieldPathSelectorValues:
				valuesMapKeys = append(valuesMapKeys, tp.key)
			}
		}
	}
	if wholeValuesAccepted == false && len(valuesMapKeys) > 0 && source.GetValues() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetValues()
		for _, key := range valuesMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Values = copiedMap
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *RegisterProbeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RegisterProbeRequest))
}

func (fieldMask *RegisterProbeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RegisterProbeResponse_FieldMask struct {
	Paths []RegisterProbeResponse_FieldPath
}

func FullRegisterProbeResponse_FieldMask() *RegisterProbeResponse_FieldMask {
	res := &RegisterProbeResponse_FieldMask{}
	res.Paths = append(res.Paths, &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorServiceAccount})
	res.Paths = append(res.Paths, &RegisterProbeResponse_FieldTerminalPath{selector: RegisterProbeResponse_FieldPathSelectorProbe})
	return res
}

func (fieldMask *RegisterProbeResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RegisterProbeResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RegisterProbeResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRegisterProbeResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RegisterProbeResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RegisterProbeResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RegisterProbeResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRegisterProbeResponse_FieldPath(raw)
	})
}

func (fieldMask *RegisterProbeResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RegisterProbeResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RegisterProbeResponse_FieldMask) Subtract(other *RegisterProbeResponse_FieldMask) *RegisterProbeResponse_FieldMask {
	result := &RegisterProbeResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[RegisterProbeResponse_FieldPathSelector]gotenobject.FieldMask{
		RegisterProbeResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[RegisterProbeResponse_FieldPathSelector]gotenobject.FieldMask{
		RegisterProbeResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RegisterProbeResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RegisterProbeResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RegisterProbeResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case RegisterProbeResponse_FieldPathSelectorServiceAccount:
						mySubMasks[RegisterProbeResponse_FieldPathSelectorServiceAccount] = api.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*RegisterProbeResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RegisterProbeResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RegisterProbeResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RegisterProbeResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RegisterProbeResponse_FieldMask) FilterInputFields() *RegisterProbeResponse_FieldMask {
	result := &RegisterProbeResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RegisterProbeResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RegisterProbeResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RegisterProbeResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRegisterProbeResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RegisterProbeResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RegisterProbeResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RegisterProbeResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RegisterProbeResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RegisterProbeResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RegisterProbeResponse_FieldMask) AppendPath(path RegisterProbeResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RegisterProbeResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RegisterProbeResponse_FieldPath))
}

func (fieldMask *RegisterProbeResponse_FieldMask) GetPaths() []RegisterProbeResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RegisterProbeResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RegisterProbeResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRegisterProbeResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RegisterProbeResponse_FieldMask) Set(target, source *RegisterProbeResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RegisterProbeResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RegisterProbeResponse), source.(*RegisterProbeResponse))
}

func (fieldMask *RegisterProbeResponse_FieldMask) Project(source *RegisterProbeResponse) *RegisterProbeResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RegisterProbeResponse{}
	serviceAccountMask := &api.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RegisterProbeResponse_FieldTerminalPath:
			switch tp.selector {
			case RegisterProbeResponse_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			case RegisterProbeResponse_FieldPathSelectorProbe:
				result.Probe = source.Probe
			}
		case *RegisterProbeResponse_FieldSubPath:
			switch tp.selector {
			case RegisterProbeResponse_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(api.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	return result
}

func (fieldMask *RegisterProbeResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RegisterProbeResponse))
}

func (fieldMask *RegisterProbeResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
