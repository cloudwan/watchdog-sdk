// Code generated by protoc-gen-goten-client
// API: AdminAreaService
// DO NOT EDIT!!!

package admin_area_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha/admin_area"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &admin_area.BBox{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminAreaServiceClient is the client API for AdminAreaService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminAreaServiceClient interface {
	GetAdminArea(ctx context.Context, in *GetAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error)
	BatchGetAdminAreas(ctx context.Context, in *BatchGetAdminAreasRequest, opts ...grpc.CallOption) (*BatchGetAdminAreasResponse, error)
	ListAdminAreas(ctx context.Context, in *ListAdminAreasRequest, opts ...grpc.CallOption) (*ListAdminAreasResponse, error)
	WatchAdminArea(ctx context.Context, in *WatchAdminAreaRequest, opts ...grpc.CallOption) (WatchAdminAreaClientStream, error)
	WatchAdminAreas(ctx context.Context, in *WatchAdminAreasRequest, opts ...grpc.CallOption) (WatchAdminAreasClientStream, error)
	CreateAdminArea(ctx context.Context, in *CreateAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error)
	UpdateAdminArea(ctx context.Context, in *UpdateAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error)
	DeleteAdminArea(ctx context.Context, in *DeleteAdminAreaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAdminAreaServiceClient(cc grpc.ClientConnInterface) AdminAreaServiceClient {
	return &client{cc}
}

func (c *client) GetAdminArea(ctx context.Context, in *GetAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error) {
	out := new(admin_area.AdminArea)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/GetAdminArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAdminAreas(ctx context.Context, in *BatchGetAdminAreasRequest, opts ...grpc.CallOption) (*BatchGetAdminAreasResponse, error) {
	out := new(BatchGetAdminAreasResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/BatchGetAdminAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAdminAreas(ctx context.Context, in *ListAdminAreasRequest, opts ...grpc.CallOption) (*ListAdminAreasResponse, error) {
	out := new(ListAdminAreasResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/ListAdminAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAdminArea(ctx context.Context, in *WatchAdminAreaRequest, opts ...grpc.CallOption) (WatchAdminAreaClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAdminArea",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.AdminAreaService/WatchAdminArea", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAdminAreaWatchAdminAreaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAdminAreaClientStream interface {
	Recv() (*WatchAdminAreaResponse, error)
	grpc.ClientStream
}

type watchAdminAreaWatchAdminAreaClient struct {
	grpc.ClientStream
}

func (x *watchAdminAreaWatchAdminAreaClient) Recv() (*WatchAdminAreaResponse, error) {
	m := new(WatchAdminAreaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAdminAreas(ctx context.Context, in *WatchAdminAreasRequest, opts ...grpc.CallOption) (WatchAdminAreasClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAdminAreas",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.AdminAreaService/WatchAdminAreas", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAdminAreasWatchAdminAreasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAdminAreasClientStream interface {
	Recv() (*WatchAdminAreasResponse, error)
	grpc.ClientStream
}

type watchAdminAreasWatchAdminAreasClient struct {
	grpc.ClientStream
}

func (x *watchAdminAreasWatchAdminAreasClient) Recv() (*WatchAdminAreasResponse, error) {
	m := new(WatchAdminAreasResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAdminArea(ctx context.Context, in *CreateAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error) {
	out := new(admin_area.AdminArea)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/CreateAdminArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAdminArea(ctx context.Context, in *UpdateAdminAreaRequest, opts ...grpc.CallOption) (*admin_area.AdminArea, error) {
	out := new(admin_area.AdminArea)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/UpdateAdminArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAdminArea(ctx context.Context, in *DeleteAdminAreaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.AdminAreaService/DeleteAdminArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
