// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/admin_area_service.proto
// DO NOT EDIT!!!

package admin_area_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha/admin_area"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &admin_area.BBox{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAdminAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAdminAreaRequest_FieldPathSelector
	Get(source *GetAdminAreaRequest) []interface{}
	GetSingle(source *GetAdminAreaRequest) (interface{}, bool)
	ClearValue(item *GetAdminAreaRequest)

	// Those methods build corresponding GetAdminAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAdminAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAdminAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAdminAreaRequest_FieldPathArrayItemValue
}

type GetAdminAreaRequest_FieldPathSelector int32

const (
	GetAdminAreaRequest_FieldPathSelectorName      GetAdminAreaRequest_FieldPathSelector = 0
	GetAdminAreaRequest_FieldPathSelectorFieldMask GetAdminAreaRequest_FieldPathSelector = 1
	GetAdminAreaRequest_FieldPathSelectorView      GetAdminAreaRequest_FieldPathSelector = 2
)

func (s GetAdminAreaRequest_FieldPathSelector) String() string {
	switch s {
	case GetAdminAreaRequest_FieldPathSelectorName:
		return "name"
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAdminAreaRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", s))
	}
}

func BuildGetAdminAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAdminAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAdminAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAdminAreaRequest_FieldTerminalPath{selector: GetAdminAreaRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAdminAreaRequest", fp)
}

func ParseGetAdminAreaRequest_FieldPath(rawField string) (GetAdminAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAdminAreaRequest_FieldPath(fp)
}

func MustParseGetAdminAreaRequest_FieldPath(rawField string) GetAdminAreaRequest_FieldPath {
	fp, err := ParseGetAdminAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAdminAreaRequest_FieldTerminalPath struct {
	selector GetAdminAreaRequest_FieldPathSelector
}

var _ GetAdminAreaRequest_FieldPath = (*GetAdminAreaRequest_FieldTerminalPath)(nil)

func (fp *GetAdminAreaRequest_FieldTerminalPath) Selector() GetAdminAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAdminAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAdminAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAdminAreaRequest
func (fp *GetAdminAreaRequest_FieldTerminalPath) Get(source *GetAdminAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAdminAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAdminAreaRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAdminAreaRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAdminAreaRequest))
}

// GetSingle returns value pointed by specific field of from source GetAdminAreaRequest
func (fp *GetAdminAreaRequest_FieldTerminalPath) GetSingle(source *GetAdminAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAdminAreaRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAdminAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		return (*admin_area.Reference)(nil)
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case GetAdminAreaRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) ClearValue(item *GetAdminAreaRequest) {
	if item != nil {
		switch fp.selector {
		case GetAdminAreaRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAdminAreaRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAdminAreaRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAdminAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAdminAreaRequest_FieldPathSelectorName ||
		fp.selector == GetAdminAreaRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAdminAreaRequest_FieldPathSelectorView
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithIValue(value interface{}) GetAdminAreaRequest_FieldPathValue {
	switch fp.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		return &GetAdminAreaRequest_FieldTerminalPathValue{GetAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		return &GetAdminAreaRequest_FieldTerminalPathValue{GetAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case GetAdminAreaRequest_FieldPathSelectorView:
		return &GetAdminAreaRequest_FieldTerminalPathValue{GetAdminAreaRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAdminAreaRequest_FieldPathArrayOfValues {
	fpaov := &GetAdminAreaRequest_FieldTerminalPathArrayOfValues{GetAdminAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		return &GetAdminAreaRequest_FieldTerminalPathArrayOfValues{GetAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Reference)}
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		return &GetAdminAreaRequest_FieldTerminalPathArrayOfValues{GetAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case GetAdminAreaRequest_FieldPathSelectorView:
		return &GetAdminAreaRequest_FieldTerminalPathArrayOfValues{GetAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAdminAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *GetAdminAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAdminAreaRequest_FieldPathValue allows storing values for GetAdminAreaRequest fields according to their type
type GetAdminAreaRequest_FieldPathValue interface {
	GetAdminAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAdminAreaRequest)
	CompareWith(*GetAdminAreaRequest) (cmp int, comparable bool)
}

func ParseGetAdminAreaRequest_FieldPathValue(pathStr, valueStr string) (GetAdminAreaRequest_FieldPathValue, error) {
	fp, err := ParseGetAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAdminAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAdminAreaRequest_FieldPathValue), nil
}

func MustParseGetAdminAreaRequest_FieldPathValue(pathStr, valueStr string) GetAdminAreaRequest_FieldPathValue {
	fpv, err := ParseGetAdminAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAdminAreaRequest_FieldTerminalPathValue struct {
	GetAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ GetAdminAreaRequest_FieldPathValue = (*GetAdminAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAdminAreaRequest' as interface{}
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) AsNameValue() (*admin_area.Reference, bool) {
	res, ok := fpv.value.(*admin_area.Reference)
	return res, ok
}
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAdminAreaRequest
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) SetTo(target **GetAdminAreaRequest) {
	if *target == nil {
		*target = new(GetAdminAreaRequest)
	}
	switch fpv.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*admin_area.Reference)
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case GetAdminAreaRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAdminAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAdminAreaRequest_FieldTerminalPathValue' with the value under path in 'GetAdminAreaRequest'.
func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) CompareWith(source *GetAdminAreaRequest) (int, bool) {
	switch fpv.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*admin_area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAdminAreaRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *GetAdminAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAdminAreaRequest))
}

// GetAdminAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAdminAreaRequest according to their type
// Present only for array (repeated) types.
type GetAdminAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAdminAreaRequest_FieldPath
	ContainsValue(*GetAdminAreaRequest) bool
}

// ParseGetAdminAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAdminAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAdminAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAdminAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAdminAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAdminAreaRequest_FieldTerminalPathArrayItemValue struct {
	GetAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ GetAdminAreaRequest_FieldPathArrayItemValue = (*GetAdminAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAdminAreaRequest as interface{}
func (fpaiv *GetAdminAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAdminAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAdminAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAdminAreaRequest'
func (fpaiv *GetAdminAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAdminAreaRequest) bool {
	slice := fpaiv.GetAdminAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAdminAreaRequest_FieldPathArrayOfValues allows storing slice of values for GetAdminAreaRequest fields according to their type
type GetAdminAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAdminAreaRequest_FieldPath
}

func ParseGetAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAdminAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAdminAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAdminAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAdminAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAdminAreaRequest_FieldTerminalPathArrayOfValues struct {
	GetAdminAreaRequest_FieldTerminalPath
	values interface{}
}

var _ GetAdminAreaRequest_FieldPathArrayOfValues = (*GetAdminAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAdminAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAdminAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*admin_area.Reference) {
			values = append(values, v)
		}
	case GetAdminAreaRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case GetAdminAreaRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAdminAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([]*admin_area.Reference)
	return res, ok
}
func (fpaov *GetAdminAreaRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *GetAdminAreaRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAdminAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAdminAreasRequest_FieldPathSelector
	Get(source *BatchGetAdminAreasRequest) []interface{}
	GetSingle(source *BatchGetAdminAreasRequest) (interface{}, bool)
	ClearValue(item *BatchGetAdminAreasRequest)

	// Those methods build corresponding BatchGetAdminAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAdminAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAdminAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAdminAreasRequest_FieldPathArrayItemValue
}

type BatchGetAdminAreasRequest_FieldPathSelector int32

const (
	BatchGetAdminAreasRequest_FieldPathSelectorParent    BatchGetAdminAreasRequest_FieldPathSelector = 0
	BatchGetAdminAreasRequest_FieldPathSelectorNames     BatchGetAdminAreasRequest_FieldPathSelector = 1
	BatchGetAdminAreasRequest_FieldPathSelectorFieldMask BatchGetAdminAreasRequest_FieldPathSelector = 2
	BatchGetAdminAreasRequest_FieldPathSelectorView      BatchGetAdminAreasRequest_FieldPathSelector = 3
)

func (s BatchGetAdminAreasRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", s))
	}
}

func BuildBatchGetAdminAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAdminAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAdminAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAdminAreasRequest_FieldTerminalPath{selector: BatchGetAdminAreasRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAdminAreasRequest", fp)
}

func ParseBatchGetAdminAreasRequest_FieldPath(rawField string) (BatchGetAdminAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAdminAreasRequest_FieldPath(fp)
}

func MustParseBatchGetAdminAreasRequest_FieldPath(rawField string) BatchGetAdminAreasRequest_FieldPath {
	fp, err := ParseBatchGetAdminAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAdminAreasRequest_FieldTerminalPath struct {
	selector BatchGetAdminAreasRequest_FieldPathSelector
}

var _ BatchGetAdminAreasRequest_FieldPath = (*BatchGetAdminAreasRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) Selector() BatchGetAdminAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAdminAreasRequest
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) Get(source *BatchGetAdminAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAdminAreasRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetAdminAreasRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAdminAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAdminAreasRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAdminAreasRequest
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) GetSingle(source *BatchGetAdminAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAdminAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		return (*admin_area.Reference)(nil)
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return ([]*admin_area.Reference)(nil)
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) ClearValue(item *BatchGetAdminAreasRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAdminAreasRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetAdminAreasRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAdminAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAdminAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAdminAreasRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetAdminAreasRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAdminAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAdminAreasRequest_FieldPathSelectorView
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAdminAreasRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		return &BatchGetAdminAreasRequest_FieldTerminalPathValue{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return &BatchGetAdminAreasRequest_FieldTerminalPathValue{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, value: value.([]*admin_area.Reference)}
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		return &BatchGetAdminAreasRequest_FieldTerminalPathValue{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		return &BatchGetAdminAreasRequest_FieldTerminalPathValue{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAdminAreasRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAdminAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		return &BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Reference)}
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return &BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, values: values.([][]*admin_area.Reference)}
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		return &BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		return &BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAdminAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return &BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue{BatchGetAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAdminAreasRequest_FieldPathValue allows storing values for BatchGetAdminAreasRequest fields according to their type
type BatchGetAdminAreasRequest_FieldPathValue interface {
	BatchGetAdminAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAdminAreasRequest)
	CompareWith(*BatchGetAdminAreasRequest) (cmp int, comparable bool)
}

func ParseBatchGetAdminAreasRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAdminAreasRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAdminAreasRequest_FieldPathValue), nil
}

func MustParseBatchGetAdminAreasRequest_FieldPathValue(pathStr, valueStr string) BatchGetAdminAreasRequest_FieldPathValue {
	fpv, err := ParseBatchGetAdminAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAdminAreasRequest_FieldTerminalPathValue struct {
	BatchGetAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAdminAreasRequest_FieldPathValue = (*BatchGetAdminAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAdminAreasRequest' as interface{}
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) AsParentValue() (*admin_area.Reference, bool) {
	res, ok := fpv.value.(*admin_area.Reference)
	return res, ok
}
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) AsNamesValue() ([]*admin_area.Reference, bool) {
	res, ok := fpv.value.([]*admin_area.Reference)
	return res, ok
}
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAdminAreasRequest
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) SetTo(target **BatchGetAdminAreasRequest) {
	if *target == nil {
		*target = new(BatchGetAdminAreasRequest)
	}
	switch fpv.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*admin_area.Reference)
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*admin_area.Reference)
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAdminAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAdminAreasRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAdminAreasRequest'.
func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAdminAreasRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*admin_area.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAdminAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAdminAreasRequest))
}

// BatchGetAdminAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAdminAreasRequest according to their type
// Present only for array (repeated) types.
type BatchGetAdminAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAdminAreasRequest_FieldPath
	ContainsValue(*BatchGetAdminAreasRequest) bool
}

// ParseBatchGetAdminAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAdminAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAdminAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAdminAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAdminAreasRequest_FieldPathArrayItemValue = (*BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAdminAreasRequest as interface{}
func (fpaiv *BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*admin_area.Reference, bool) {
	res, ok := fpaiv.value.(*admin_area.Reference)
	return res, ok
}

func (fpaiv *BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAdminAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAdminAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAdminAreasRequest'
func (fpaiv *BatchGetAdminAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAdminAreasRequest) bool {
	slice := fpaiv.BatchGetAdminAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAdminAreasRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAdminAreasRequest fields according to their type
type BatchGetAdminAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAdminAreasRequest_FieldPath
}

func ParseBatchGetAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAdminAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAdminAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAdminAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAdminAreasRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAdminAreasRequest_FieldPathArrayOfValues = (*BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAdminAreasRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*admin_area.Reference) {
			values = append(values, v)
		}
	case BatchGetAdminAreasRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*admin_area.Reference) {
			values = append(values, v)
		}
	case BatchGetAdminAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAdminAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([]*admin_area.Reference)
	return res, ok
}
func (fpaov *BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([][]*admin_area.Reference)
	return res, ok
}
func (fpaov *BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAdminAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAdminAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAdminAreasResponse_FieldPathSelector
	Get(source *BatchGetAdminAreasResponse) []interface{}
	GetSingle(source *BatchGetAdminAreasResponse) (interface{}, bool)
	ClearValue(item *BatchGetAdminAreasResponse)

	// Those methods build corresponding BatchGetAdminAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAdminAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAdminAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAdminAreasResponse_FieldPathArrayItemValue
}

type BatchGetAdminAreasResponse_FieldPathSelector int32

const (
	BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas BatchGetAdminAreasResponse_FieldPathSelector = 0
	BatchGetAdminAreasResponse_FieldPathSelectorMissing    BatchGetAdminAreasResponse_FieldPathSelector = 1
)

func (s BatchGetAdminAreasResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return "admin_areas"
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", s))
	}
}

func BuildBatchGetAdminAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAdminAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAdminAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "admin_areas", "adminAreas", "admin-areas":
			return &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas}, nil
		case "missing":
			return &BatchGetAdminAreasResponse_FieldTerminalPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "admin_areas", "adminAreas", "admin-areas":
			if subpath, err := admin_area.BuildAdminArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAdminAreasResponse_FieldSubPath{selector: BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAdminAreasResponse", fp)
}

func ParseBatchGetAdminAreasResponse_FieldPath(rawField string) (BatchGetAdminAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAdminAreasResponse_FieldPath(fp)
}

func MustParseBatchGetAdminAreasResponse_FieldPath(rawField string) BatchGetAdminAreasResponse_FieldPath {
	fp, err := ParseBatchGetAdminAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAdminAreasResponse_FieldTerminalPath struct {
	selector BatchGetAdminAreasResponse_FieldPathSelector
}

var _ BatchGetAdminAreasResponse_FieldPath = (*BatchGetAdminAreasResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) Selector() BatchGetAdminAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAdminAreasResponse
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) Get(source *BatchGetAdminAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
			for _, value := range source.GetAdminAreas() {
				values = append(values, value)
			}
		case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAdminAreasResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAdminAreasResponse
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) GetSingle(source *BatchGetAdminAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		res := source.GetAdminAreas()
		return res, res != nil
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return ([]*admin_area.AdminArea)(nil)
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return ([]*admin_area.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) ClearValue(item *BatchGetAdminAreasResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
			item.AdminAreas = nil
		case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAdminAreasResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAdminAreasResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &BatchGetAdminAreasResponse_FieldTerminalPathValue{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, value: value.([]*admin_area.AdminArea)}
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAdminAreasResponse_FieldTerminalPathValue{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, value: value.([]*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAdminAreasResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAdminAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, values: values.([][]*admin_area.AdminArea)}
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, values: values.([][]*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAdminAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea)}
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return &BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue{BatchGetAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAdminAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAdminAreasResponse_FieldSubPath struct {
	selector BatchGetAdminAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAdminAreasResponse_FieldPath = (*BatchGetAdminAreasResponse_FieldSubPath)(nil)

func (fps *BatchGetAdminAreasResponse_FieldSubPath) Selector() BatchGetAdminAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAdminAreasResponse_FieldSubPath) AsAdminAreasSubPath() (admin_area.AdminArea_FieldPath, bool) {
	res, ok := fps.subPath.(admin_area.AdminArea_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAdminAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAdminAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAdminAreasResponse
func (fps *BatchGetAdminAreasResponse_FieldSubPath) Get(source *BatchGetAdminAreasResponse) (values []interface{}) {
	if asAdminAreaFieldPath, ok := fps.AsAdminAreasSubPath(); ok {
		for _, item := range source.GetAdminAreas() {
			values = append(values, asAdminAreaFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAdminAreasResponse))
}

// GetSingle returns value of selected field from source BatchGetAdminAreasResponse
func (fps *BatchGetAdminAreasResponse_FieldSubPath) GetSingle(source *BatchGetAdminAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		if len(source.GetAdminAreas()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAdminAreas()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAdminAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) ClearValue(item *BatchGetAdminAreasResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
			for _, subItem := range item.AdminAreas {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAdminAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAdminAreasResponse_FieldPathValue {
	return &BatchGetAdminAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAdminAreasResponse_FieldPathArrayOfValues {
	return &BatchGetAdminAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAdminAreasResponse_FieldPathArrayItemValue {
	return &BatchGetAdminAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAdminAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAdminAreasResponse_FieldPathValue allows storing values for BatchGetAdminAreasResponse fields according to their type
type BatchGetAdminAreasResponse_FieldPathValue interface {
	BatchGetAdminAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAdminAreasResponse)
	CompareWith(*BatchGetAdminAreasResponse) (cmp int, comparable bool)
}

func ParseBatchGetAdminAreasResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAdminAreasResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAdminAreasResponse_FieldPathValue), nil
}

func MustParseBatchGetAdminAreasResponse_FieldPathValue(pathStr, valueStr string) BatchGetAdminAreasResponse_FieldPathValue {
	fpv, err := ParseBatchGetAdminAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAdminAreasResponse_FieldTerminalPathValue struct {
	BatchGetAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAdminAreasResponse_FieldPathValue = (*BatchGetAdminAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAdminAreasResponse' as interface{}
func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) AsAdminAreasValue() ([]*admin_area.AdminArea, bool) {
	res, ok := fpv.value.([]*admin_area.AdminArea)
	return res, ok
}
func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) AsMissingValue() ([]*admin_area.Reference, bool) {
	res, ok := fpv.value.([]*admin_area.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAdminAreasResponse
func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) SetTo(target **BatchGetAdminAreasResponse) {
	if *target == nil {
		*target = new(BatchGetAdminAreasResponse)
	}
	switch fpv.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		(*target).AdminAreas = fpv.value.([]*admin_area.AdminArea)
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*admin_area.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAdminAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAdminAreasResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAdminAreasResponse'.
func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAdminAreasResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return 0, false
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAdminAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAdminAreasResponse))
}

type BatchGetAdminAreasResponse_FieldSubPathValue struct {
	BatchGetAdminAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAdminAreasResponse_FieldPathValue = (*BatchGetAdminAreasResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) AsAdminAreasPathValue() (admin_area.AdminArea_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) SetTo(target **BatchGetAdminAreasResponse) {
	if *target == nil {
		*target = new(BatchGetAdminAreasResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAdminAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) CompareWith(source *BatchGetAdminAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAdminAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAdminAreasResponse))
}

// BatchGetAdminAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAdminAreasResponse according to their type
// Present only for array (repeated) types.
type BatchGetAdminAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAdminAreasResponse_FieldPath
	ContainsValue(*BatchGetAdminAreasResponse) bool
}

// ParseBatchGetAdminAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAdminAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAdminAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAdminAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAdminAreasResponse_FieldPathArrayItemValue = (*BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAdminAreasResponse as interface{}
func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) AsAdminAreasItemValue() (*admin_area.AdminArea, bool) {
	res, ok := fpaiv.value.(*admin_area.AdminArea)
	return res, ok
}
func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*admin_area.Reference, bool) {
	res, ok := fpaiv.value.(*admin_area.Reference)
	return res, ok
}

func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAdminAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAdminAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAdminAreasResponse'
func (fpaiv *BatchGetAdminAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAdminAreasResponse) bool {
	slice := fpaiv.BatchGetAdminAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAdminAreasResponse_FieldSubPathArrayItemValue struct {
	BatchGetAdminAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAdminAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAdminAreasResponse_FieldSubPathArrayItemValue) AsAdminAreasPathItemValue() (admin_area.AdminArea_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAdminAreasResponse'
func (fpaivs *BatchGetAdminAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAdminAreasResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAdminAreasResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAdminAreasResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAdminAreasResponse fields according to their type
type BatchGetAdminAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAdminAreasResponse_FieldPath
}

func ParseBatchGetAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAdminAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAdminAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAdminAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAdminAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAdminAreasResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAdminAreasResponse_FieldPathArrayOfValues = (*BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAdminAreasResponse_FieldPathSelectorAdminAreas:
		for _, v := range fpaov.values.([][]*admin_area.AdminArea) {
			values = append(values, v)
		}
	case BatchGetAdminAreasResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*admin_area.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues) AsAdminAreasArrayOfValues() ([][]*admin_area.AdminArea, bool) {
	res, ok := fpaov.values.([][]*admin_area.AdminArea)
	return res, ok
}
func (fpaov *BatchGetAdminAreasResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([][]*admin_area.Reference)
	return res, ok
}

type BatchGetAdminAreasResponse_FieldSubPathArrayOfValues struct {
	BatchGetAdminAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAdminAreasResponse_FieldPathArrayOfValues = (*BatchGetAdminAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAdminAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAdminAreasResponse_FieldSubPathArrayOfValues) AsAdminAreasPathArrayOfValues() (admin_area.AdminArea_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(admin_area.AdminArea_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAdminAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAdminAreasRequest_FieldPathSelector
	Get(source *ListAdminAreasRequest) []interface{}
	GetSingle(source *ListAdminAreasRequest) (interface{}, bool)
	ClearValue(item *ListAdminAreasRequest)

	// Those methods build corresponding ListAdminAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAdminAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAdminAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAdminAreasRequest_FieldPathArrayItemValue
}

type ListAdminAreasRequest_FieldPathSelector int32

const (
	ListAdminAreasRequest_FieldPathSelectorPageSize  ListAdminAreasRequest_FieldPathSelector = 0
	ListAdminAreasRequest_FieldPathSelectorPageToken ListAdminAreasRequest_FieldPathSelector = 1
	ListAdminAreasRequest_FieldPathSelectorOrderBy   ListAdminAreasRequest_FieldPathSelector = 2
	ListAdminAreasRequest_FieldPathSelectorFilter    ListAdminAreasRequest_FieldPathSelector = 3
	ListAdminAreasRequest_FieldPathSelectorFieldMask ListAdminAreasRequest_FieldPathSelector = 4
	ListAdminAreasRequest_FieldPathSelectorView      ListAdminAreasRequest_FieldPathSelector = 5
)

func (s ListAdminAreasRequest_FieldPathSelector) String() string {
	switch s {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAdminAreasRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", s))
	}
}

func BuildListAdminAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAdminAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAdminAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAdminAreasRequest_FieldTerminalPath{selector: ListAdminAreasRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAdminAreasRequest", fp)
}

func ParseListAdminAreasRequest_FieldPath(rawField string) (ListAdminAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAdminAreasRequest_FieldPath(fp)
}

func MustParseListAdminAreasRequest_FieldPath(rawField string) ListAdminAreasRequest_FieldPath {
	fp, err := ParseListAdminAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAdminAreasRequest_FieldTerminalPath struct {
	selector ListAdminAreasRequest_FieldPathSelector
}

var _ ListAdminAreasRequest_FieldPath = (*ListAdminAreasRequest_FieldTerminalPath)(nil)

func (fp *ListAdminAreasRequest_FieldTerminalPath) Selector() ListAdminAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAdminAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAdminAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAdminAreasRequest
func (fp *ListAdminAreasRequest_FieldTerminalPath) Get(source *ListAdminAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAdminAreasRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAdminAreasRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAdminAreasRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAdminAreasRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAdminAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAdminAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAdminAreasRequest))
}

// GetSingle returns value pointed by specific field of from source ListAdminAreasRequest
func (fp *ListAdminAreasRequest_FieldTerminalPath) GetSingle(source *ListAdminAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAdminAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAdminAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAdminAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		return (*admin_area.PagerCursor)(nil)
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		return (*admin_area.OrderBy)(nil)
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		return (*admin_area.Filter)(nil)
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case ListAdminAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) ClearValue(item *ListAdminAreasRequest) {
	if item != nil {
		switch fp.selector {
		case ListAdminAreasRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAdminAreasRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAdminAreasRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAdminAreasRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAdminAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAdminAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAdminAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAdminAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAdminAreasRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAdminAreasRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAdminAreasRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAdminAreasRequest_FieldPathSelectorFilter ||
		fp.selector == ListAdminAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAdminAreasRequest_FieldPathSelectorView
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithIValue(value interface{}) ListAdminAreasRequest_FieldPathValue {
	switch fp.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.OrderBy)}
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Filter)}
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case ListAdminAreasRequest_FieldPathSelectorView:
		return &ListAdminAreasRequest_FieldTerminalPathValue{ListAdminAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAdminAreasRequest_FieldPathArrayOfValues {
	fpaov := &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.OrderBy)}
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Filter)}
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case ListAdminAreasRequest_FieldPathSelectorView:
		return &ListAdminAreasRequest_FieldTerminalPathArrayOfValues{ListAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAdminAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *ListAdminAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAdminAreasRequest_FieldPathValue allows storing values for ListAdminAreasRequest fields according to their type
type ListAdminAreasRequest_FieldPathValue interface {
	ListAdminAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAdminAreasRequest)
	CompareWith(*ListAdminAreasRequest) (cmp int, comparable bool)
}

func ParseListAdminAreasRequest_FieldPathValue(pathStr, valueStr string) (ListAdminAreasRequest_FieldPathValue, error) {
	fp, err := ParseListAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAdminAreasRequest_FieldPathValue), nil
}

func MustParseListAdminAreasRequest_FieldPathValue(pathStr, valueStr string) ListAdminAreasRequest_FieldPathValue {
	fpv, err := ParseListAdminAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAdminAreasRequest_FieldTerminalPathValue struct {
	ListAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ ListAdminAreasRequest_FieldPathValue = (*ListAdminAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAdminAreasRequest' as interface{}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsOrderByValue() (*admin_area.OrderBy, bool) {
	res, ok := fpv.value.(*admin_area.OrderBy)
	return res, ok
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsFilterValue() (*admin_area.Filter, bool) {
	res, ok := fpv.value.(*admin_area.Filter)
	return res, ok
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAdminAreasRequest
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) SetTo(target **ListAdminAreasRequest) {
	if *target == nil {
		*target = new(ListAdminAreasRequest)
	}
	switch fpv.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*admin_area.PagerCursor)
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*admin_area.OrderBy)
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*admin_area.Filter)
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case ListAdminAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAdminAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAdminAreasRequest_FieldTerminalPathValue' with the value under path in 'ListAdminAreasRequest'.
func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) CompareWith(source *ListAdminAreasRequest) (int, bool) {
	switch fpv.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAdminAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *ListAdminAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAdminAreasRequest))
}

// ListAdminAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAdminAreasRequest according to their type
// Present only for array (repeated) types.
type ListAdminAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAdminAreasRequest_FieldPath
	ContainsValue(*ListAdminAreasRequest) bool
}

// ParseListAdminAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAdminAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAdminAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseListAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAdminAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAdminAreasRequest_FieldTerminalPathArrayItemValue struct {
	ListAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ ListAdminAreasRequest_FieldPathArrayItemValue = (*ListAdminAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAdminAreasRequest as interface{}
func (fpaiv *ListAdminAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAdminAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAdminAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAdminAreasRequest'
func (fpaiv *ListAdminAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAdminAreasRequest) bool {
	slice := fpaiv.ListAdminAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAdminAreasRequest_FieldPathArrayOfValues allows storing slice of values for ListAdminAreasRequest fields according to their type
type ListAdminAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAdminAreasRequest_FieldPath
}

func ParseListAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAdminAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAdminAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseListAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAdminAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAdminAreasRequest_FieldTerminalPathArrayOfValues struct {
	ListAdminAreasRequest_FieldTerminalPath
	values interface{}
}

var _ ListAdminAreasRequest_FieldPathArrayOfValues = (*ListAdminAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAdminAreasRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAdminAreasRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	case ListAdminAreasRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*admin_area.OrderBy) {
			values = append(values, v)
		}
	case ListAdminAreasRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*admin_area.Filter) {
			values = append(values, v)
		}
	case ListAdminAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case ListAdminAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*admin_area.OrderBy, bool) {
	res, ok := fpaov.values.([]*admin_area.OrderBy)
	return res, ok
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*admin_area.Filter, bool) {
	res, ok := fpaov.values.([]*admin_area.Filter)
	return res, ok
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *ListAdminAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAdminAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAdminAreasResponse_FieldPathSelector
	Get(source *ListAdminAreasResponse) []interface{}
	GetSingle(source *ListAdminAreasResponse) (interface{}, bool)
	ClearValue(item *ListAdminAreasResponse)

	// Those methods build corresponding ListAdminAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAdminAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAdminAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAdminAreasResponse_FieldPathArrayItemValue
}

type ListAdminAreasResponse_FieldPathSelector int32

const (
	ListAdminAreasResponse_FieldPathSelectorAdminAreas    ListAdminAreasResponse_FieldPathSelector = 0
	ListAdminAreasResponse_FieldPathSelectorPrevPageToken ListAdminAreasResponse_FieldPathSelector = 1
	ListAdminAreasResponse_FieldPathSelectorNextPageToken ListAdminAreasResponse_FieldPathSelector = 2
)

func (s ListAdminAreasResponse_FieldPathSelector) String() string {
	switch s {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return "admin_areas"
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", s))
	}
}

func BuildListAdminAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAdminAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAdminAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "admin_areas", "adminAreas", "admin-areas":
			return &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorAdminAreas}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAdminAreasResponse_FieldTerminalPath{selector: ListAdminAreasResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "admin_areas", "adminAreas", "admin-areas":
			if subpath, err := admin_area.BuildAdminArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAdminAreasResponse_FieldSubPath{selector: ListAdminAreasResponse_FieldPathSelectorAdminAreas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAdminAreasResponse", fp)
}

func ParseListAdminAreasResponse_FieldPath(rawField string) (ListAdminAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAdminAreasResponse_FieldPath(fp)
}

func MustParseListAdminAreasResponse_FieldPath(rawField string) ListAdminAreasResponse_FieldPath {
	fp, err := ParseListAdminAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAdminAreasResponse_FieldTerminalPath struct {
	selector ListAdminAreasResponse_FieldPathSelector
}

var _ ListAdminAreasResponse_FieldPath = (*ListAdminAreasResponse_FieldTerminalPath)(nil)

func (fp *ListAdminAreasResponse_FieldTerminalPath) Selector() ListAdminAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAdminAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAdminAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAdminAreasResponse
func (fp *ListAdminAreasResponse_FieldTerminalPath) Get(source *ListAdminAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
			for _, value := range source.GetAdminAreas() {
				values = append(values, value)
			}
		case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAdminAreasResponse))
}

// GetSingle returns value pointed by specific field of from source ListAdminAreasResponse
func (fp *ListAdminAreasResponse_FieldTerminalPath) GetSingle(source *ListAdminAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		res := source.GetAdminAreas()
		return res, res != nil
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAdminAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return ([]*admin_area.AdminArea)(nil)
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		return (*admin_area.PagerCursor)(nil)
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		return (*admin_area.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) ClearValue(item *ListAdminAreasResponse) {
	if item != nil {
		switch fp.selector {
		case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
			item.AdminAreas = nil
		case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAdminAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAdminAreasResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAdminAreasResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithIValue(value interface{}) ListAdminAreasResponse_FieldPathValue {
	switch fp.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &ListAdminAreasResponse_FieldTerminalPathValue{ListAdminAreasResponse_FieldTerminalPath: *fp, value: value.([]*admin_area.AdminArea)}
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		return &ListAdminAreasResponse_FieldTerminalPathValue{ListAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		return &ListAdminAreasResponse_FieldTerminalPathValue{ListAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAdminAreasResponse_FieldPathArrayOfValues {
	fpaov := &ListAdminAreasResponse_FieldTerminalPathArrayOfValues{ListAdminAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &ListAdminAreasResponse_FieldTerminalPathArrayOfValues{ListAdminAreasResponse_FieldTerminalPath: *fp, values: values.([][]*admin_area.AdminArea)}
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		return &ListAdminAreasResponse_FieldTerminalPathArrayOfValues{ListAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		return &ListAdminAreasResponse_FieldTerminalPathArrayOfValues{ListAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAdminAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return &ListAdminAreasResponse_FieldTerminalPathArrayItemValue{ListAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *ListAdminAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAdminAreasResponse_FieldSubPath struct {
	selector ListAdminAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAdminAreasResponse_FieldPath = (*ListAdminAreasResponse_FieldSubPath)(nil)

func (fps *ListAdminAreasResponse_FieldSubPath) Selector() ListAdminAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAdminAreasResponse_FieldSubPath) AsAdminAreasSubPath() (admin_area.AdminArea_FieldPath, bool) {
	res, ok := fps.subPath.(admin_area.AdminArea_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAdminAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAdminAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAdminAreasResponse
func (fps *ListAdminAreasResponse_FieldSubPath) Get(source *ListAdminAreasResponse) (values []interface{}) {
	if asAdminAreaFieldPath, ok := fps.AsAdminAreasSubPath(); ok {
		for _, item := range source.GetAdminAreas() {
			values = append(values, asAdminAreaFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAdminAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAdminAreasResponse))
}

// GetSingle returns value of selected field from source ListAdminAreasResponse
func (fps *ListAdminAreasResponse_FieldSubPath) GetSingle(source *ListAdminAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		if len(source.GetAdminAreas()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAdminAreas()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fps.selector))
	}
}

func (fps *ListAdminAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAdminAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAdminAreasResponse_FieldSubPath) ClearValue(item *ListAdminAreasResponse) {
	if item != nil {
		switch fps.selector {
		case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
			for _, subItem := range item.AdminAreas {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAdminAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAdminAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithIValue(value interface{}) ListAdminAreasResponse_FieldPathValue {
	return &ListAdminAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAdminAreasResponse_FieldPathArrayOfValues {
	return &ListAdminAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAdminAreasResponse_FieldPathArrayItemValue {
	return &ListAdminAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAdminAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAdminAreasResponse_FieldPathValue allows storing values for ListAdminAreasResponse fields according to their type
type ListAdminAreasResponse_FieldPathValue interface {
	ListAdminAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAdminAreasResponse)
	CompareWith(*ListAdminAreasResponse) (cmp int, comparable bool)
}

func ParseListAdminAreasResponse_FieldPathValue(pathStr, valueStr string) (ListAdminAreasResponse_FieldPathValue, error) {
	fp, err := ParseListAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAdminAreasResponse_FieldPathValue), nil
}

func MustParseListAdminAreasResponse_FieldPathValue(pathStr, valueStr string) ListAdminAreasResponse_FieldPathValue {
	fpv, err := ParseListAdminAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAdminAreasResponse_FieldTerminalPathValue struct {
	ListAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ ListAdminAreasResponse_FieldPathValue = (*ListAdminAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAdminAreasResponse' as interface{}
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) AsAdminAreasValue() ([]*admin_area.AdminArea, bool) {
	res, ok := fpv.value.([]*admin_area.AdminArea)
	return res, ok
}
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAdminAreasResponse
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) SetTo(target **ListAdminAreasResponse) {
	if *target == nil {
		*target = new(ListAdminAreasResponse)
	}
	switch fpv.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		(*target).AdminAreas = fpv.value.([]*admin_area.AdminArea)
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*admin_area.PagerCursor)
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*admin_area.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAdminAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAdminAreasResponse_FieldTerminalPathValue' with the value under path in 'ListAdminAreasResponse'.
func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) CompareWith(source *ListAdminAreasResponse) (int, bool) {
	switch fpv.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return 0, false
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *ListAdminAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAdminAreasResponse))
}

type ListAdminAreasResponse_FieldSubPathValue struct {
	ListAdminAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAdminAreasResponse_FieldPathValue = (*ListAdminAreasResponse_FieldSubPathValue)(nil)

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) AsAdminAreasPathValue() (admin_area.AdminArea_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue)
	return res, ok
}

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) SetTo(target **ListAdminAreasResponse) {
	if *target == nil {
		*target = new(ListAdminAreasResponse)
	}
	switch fpvs.Selector() {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAdminAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) CompareWith(source *ListAdminAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAdminAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAdminAreasResponse))
}

// ListAdminAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAdminAreasResponse according to their type
// Present only for array (repeated) types.
type ListAdminAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAdminAreasResponse_FieldPath
	ContainsValue(*ListAdminAreasResponse) bool
}

// ParseListAdminAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAdminAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAdminAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseListAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAdminAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAdminAreasResponse_FieldTerminalPathArrayItemValue struct {
	ListAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ ListAdminAreasResponse_FieldPathArrayItemValue = (*ListAdminAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAdminAreasResponse as interface{}
func (fpaiv *ListAdminAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAdminAreasResponse_FieldTerminalPathArrayItemValue) AsAdminAreasItemValue() (*admin_area.AdminArea, bool) {
	res, ok := fpaiv.value.(*admin_area.AdminArea)
	return res, ok
}

func (fpaiv *ListAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAdminAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAdminAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAdminAreasResponse'
func (fpaiv *ListAdminAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAdminAreasResponse) bool {
	slice := fpaiv.ListAdminAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAdminAreasResponse_FieldSubPathArrayItemValue struct {
	ListAdminAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAdminAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAdminAreasResponse_FieldSubPathArrayItemValue) AsAdminAreasPathItemValue() (admin_area.AdminArea_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAdminAreasResponse'
func (fpaivs *ListAdminAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAdminAreasResponse) bool {
	switch fpaivs.Selector() {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAdminAreasResponse: %d", fpaivs.Selector()))
	}
}

// ListAdminAreasResponse_FieldPathArrayOfValues allows storing slice of values for ListAdminAreasResponse fields according to their type
type ListAdminAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAdminAreasResponse_FieldPath
}

func ParseListAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAdminAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAdminAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAdminAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseListAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAdminAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAdminAreasResponse_FieldTerminalPathArrayOfValues struct {
	ListAdminAreasResponse_FieldTerminalPath
	values interface{}
}

var _ ListAdminAreasResponse_FieldPathArrayOfValues = (*ListAdminAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAdminAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAdminAreasResponse_FieldPathSelectorAdminAreas:
		for _, v := range fpaov.values.([][]*admin_area.AdminArea) {
			values = append(values, v)
		}
	case ListAdminAreasResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	case ListAdminAreasResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAdminAreasResponse_FieldTerminalPathArrayOfValues) AsAdminAreasArrayOfValues() ([][]*admin_area.AdminArea, bool) {
	res, ok := fpaov.values.([][]*admin_area.AdminArea)
	return res, ok
}
func (fpaov *ListAdminAreasResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}
func (fpaov *ListAdminAreasResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}

type ListAdminAreasResponse_FieldSubPathArrayOfValues struct {
	ListAdminAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAdminAreasResponse_FieldPathArrayOfValues = (*ListAdminAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAdminAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAdminAreasResponse_FieldSubPathArrayOfValues) AsAdminAreasPathArrayOfValues() (admin_area.AdminArea_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(admin_area.AdminArea_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAdminAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAdminAreaRequest_FieldPathSelector
	Get(source *WatchAdminAreaRequest) []interface{}
	GetSingle(source *WatchAdminAreaRequest) (interface{}, bool)
	ClearValue(item *WatchAdminAreaRequest)

	// Those methods build corresponding WatchAdminAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAdminAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAdminAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAdminAreaRequest_FieldPathArrayItemValue
}

type WatchAdminAreaRequest_FieldPathSelector int32

const (
	WatchAdminAreaRequest_FieldPathSelectorName      WatchAdminAreaRequest_FieldPathSelector = 0
	WatchAdminAreaRequest_FieldPathSelectorFieldMask WatchAdminAreaRequest_FieldPathSelector = 1
	WatchAdminAreaRequest_FieldPathSelectorView      WatchAdminAreaRequest_FieldPathSelector = 2
)

func (s WatchAdminAreaRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		return "name"
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAdminAreaRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", s))
	}
}

func BuildWatchAdminAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAdminAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAdminAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAdminAreaRequest_FieldTerminalPath{selector: WatchAdminAreaRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAdminAreaRequest", fp)
}

func ParseWatchAdminAreaRequest_FieldPath(rawField string) (WatchAdminAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAdminAreaRequest_FieldPath(fp)
}

func MustParseWatchAdminAreaRequest_FieldPath(rawField string) WatchAdminAreaRequest_FieldPath {
	fp, err := ParseWatchAdminAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAdminAreaRequest_FieldTerminalPath struct {
	selector WatchAdminAreaRequest_FieldPathSelector
}

var _ WatchAdminAreaRequest_FieldPath = (*WatchAdminAreaRequest_FieldTerminalPath)(nil)

func (fp *WatchAdminAreaRequest_FieldTerminalPath) Selector() WatchAdminAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAdminAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAdminAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAdminAreaRequest
func (fp *WatchAdminAreaRequest_FieldTerminalPath) Get(source *WatchAdminAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAdminAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAdminAreaRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAdminAreaRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAdminAreaRequest
func (fp *WatchAdminAreaRequest_FieldTerminalPath) GetSingle(source *WatchAdminAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAdminAreaRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAdminAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		return (*admin_area.Reference)(nil)
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case WatchAdminAreaRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) ClearValue(item *WatchAdminAreaRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAdminAreaRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAdminAreaRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAdminAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAdminAreaRequest_FieldPathSelectorName ||
		fp.selector == WatchAdminAreaRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAdminAreaRequest_FieldPathSelectorView
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAdminAreaRequest_FieldPathValue {
	switch fp.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		return &WatchAdminAreaRequest_FieldTerminalPathValue{WatchAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		return &WatchAdminAreaRequest_FieldTerminalPathValue{WatchAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case WatchAdminAreaRequest_FieldPathSelectorView:
		return &WatchAdminAreaRequest_FieldTerminalPathValue{WatchAdminAreaRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAdminAreaRequest_FieldPathArrayOfValues {
	fpaov := &WatchAdminAreaRequest_FieldTerminalPathArrayOfValues{WatchAdminAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		return &WatchAdminAreaRequest_FieldTerminalPathArrayOfValues{WatchAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Reference)}
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		return &WatchAdminAreaRequest_FieldTerminalPathArrayOfValues{WatchAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case WatchAdminAreaRequest_FieldPathSelectorView:
		return &WatchAdminAreaRequest_FieldTerminalPathArrayOfValues{WatchAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAdminAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAdminAreaRequest_FieldPathValue allows storing values for WatchAdminAreaRequest fields according to their type
type WatchAdminAreaRequest_FieldPathValue interface {
	WatchAdminAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAdminAreaRequest)
	CompareWith(*WatchAdminAreaRequest) (cmp int, comparable bool)
}

func ParseWatchAdminAreaRequest_FieldPathValue(pathStr, valueStr string) (WatchAdminAreaRequest_FieldPathValue, error) {
	fp, err := ParseWatchAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAdminAreaRequest_FieldPathValue), nil
}

func MustParseWatchAdminAreaRequest_FieldPathValue(pathStr, valueStr string) WatchAdminAreaRequest_FieldPathValue {
	fpv, err := ParseWatchAdminAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAdminAreaRequest_FieldTerminalPathValue struct {
	WatchAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreaRequest_FieldPathValue = (*WatchAdminAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAdminAreaRequest' as interface{}
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) AsNameValue() (*admin_area.Reference, bool) {
	res, ok := fpv.value.(*admin_area.Reference)
	return res, ok
}
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAdminAreaRequest
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) SetTo(target **WatchAdminAreaRequest) {
	if *target == nil {
		*target = new(WatchAdminAreaRequest)
	}
	switch fpv.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*admin_area.Reference)
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case WatchAdminAreaRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAdminAreaRequest_FieldTerminalPathValue' with the value under path in 'WatchAdminAreaRequest'.
func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) CompareWith(source *WatchAdminAreaRequest) (int, bool) {
	switch fpv.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*admin_area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAdminAreaRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAdminAreaRequest))
}

// WatchAdminAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAdminAreaRequest according to their type
// Present only for array (repeated) types.
type WatchAdminAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAdminAreaRequest_FieldPath
	ContainsValue(*WatchAdminAreaRequest) bool
}

// ParseWatchAdminAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAdminAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAdminAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAdminAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAdminAreaRequest_FieldTerminalPathArrayItemValue struct {
	WatchAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreaRequest_FieldPathArrayItemValue = (*WatchAdminAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAdminAreaRequest as interface{}
func (fpaiv *WatchAdminAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAdminAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAdminAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAdminAreaRequest'
func (fpaiv *WatchAdminAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAdminAreaRequest) bool {
	slice := fpaiv.WatchAdminAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAdminAreaRequest_FieldPathArrayOfValues allows storing slice of values for WatchAdminAreaRequest fields according to their type
type WatchAdminAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAdminAreaRequest_FieldPath
}

func ParseWatchAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAdminAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAdminAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAdminAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAdminAreaRequest_FieldTerminalPathArrayOfValues struct {
	WatchAdminAreaRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAdminAreaRequest_FieldPathArrayOfValues = (*WatchAdminAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAdminAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAdminAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*admin_area.Reference) {
			values = append(values, v)
		}
	case WatchAdminAreaRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case WatchAdminAreaRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAdminAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([]*admin_area.Reference)
	return res, ok
}
func (fpaov *WatchAdminAreaRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *WatchAdminAreaRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAdminAreaResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAdminAreaResponse_FieldPathSelector
	Get(source *WatchAdminAreaResponse) []interface{}
	GetSingle(source *WatchAdminAreaResponse) (interface{}, bool)
	ClearValue(item *WatchAdminAreaResponse)

	// Those methods build corresponding WatchAdminAreaResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAdminAreaResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAdminAreaResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAdminAreaResponse_FieldPathArrayItemValue
}

type WatchAdminAreaResponse_FieldPathSelector int32

const (
	WatchAdminAreaResponse_FieldPathSelectorChange WatchAdminAreaResponse_FieldPathSelector = 0
)

func (s WatchAdminAreaResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", s))
	}
}

func BuildWatchAdminAreaResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAdminAreaResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAdminAreaResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAdminAreaResponse_FieldTerminalPath{selector: WatchAdminAreaResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAdminAreaResponse", fp)
}

func ParseWatchAdminAreaResponse_FieldPath(rawField string) (WatchAdminAreaResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAdminAreaResponse_FieldPath(fp)
}

func MustParseWatchAdminAreaResponse_FieldPath(rawField string) WatchAdminAreaResponse_FieldPath {
	fp, err := ParseWatchAdminAreaResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAdminAreaResponse_FieldTerminalPath struct {
	selector WatchAdminAreaResponse_FieldPathSelector
}

var _ WatchAdminAreaResponse_FieldPath = (*WatchAdminAreaResponse_FieldTerminalPath)(nil)

func (fp *WatchAdminAreaResponse_FieldTerminalPath) Selector() WatchAdminAreaResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAdminAreaResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAdminAreaResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAdminAreaResponse
func (fp *WatchAdminAreaResponse_FieldTerminalPath) Get(source *WatchAdminAreaResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAdminAreaResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAdminAreaResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAdminAreaResponse
func (fp *WatchAdminAreaResponse_FieldTerminalPath) GetSingle(source *WatchAdminAreaResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAdminAreaResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAdminAreaResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		return (*admin_area.AdminAreaChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) ClearValue(item *WatchAdminAreaResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAdminAreaResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAdminAreaResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAdminAreaResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAdminAreaResponse_FieldPathSelectorChange
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAdminAreaResponse_FieldPathValue {
	switch fp.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		return &WatchAdminAreaResponse_FieldTerminalPathValue{WatchAdminAreaResponse_FieldTerminalPath: *fp, value: value.(*admin_area.AdminAreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAdminAreaResponse_FieldPathArrayOfValues {
	fpaov := &WatchAdminAreaResponse_FieldTerminalPathArrayOfValues{WatchAdminAreaResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		return &WatchAdminAreaResponse_FieldTerminalPathArrayOfValues{WatchAdminAreaResponse_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminAreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAdminAreaResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreaResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAdminAreaResponse_FieldPathValue allows storing values for WatchAdminAreaResponse fields according to their type
type WatchAdminAreaResponse_FieldPathValue interface {
	WatchAdminAreaResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAdminAreaResponse)
	CompareWith(*WatchAdminAreaResponse) (cmp int, comparable bool)
}

func ParseWatchAdminAreaResponse_FieldPathValue(pathStr, valueStr string) (WatchAdminAreaResponse_FieldPathValue, error) {
	fp, err := ParseWatchAdminAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAdminAreaResponse_FieldPathValue), nil
}

func MustParseWatchAdminAreaResponse_FieldPathValue(pathStr, valueStr string) WatchAdminAreaResponse_FieldPathValue {
	fpv, err := ParseWatchAdminAreaResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAdminAreaResponse_FieldTerminalPathValue struct {
	WatchAdminAreaResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreaResponse_FieldPathValue = (*WatchAdminAreaResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAdminAreaResponse' as interface{}
func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) AsChangeValue() (*admin_area.AdminAreaChange, bool) {
	res, ok := fpv.value.(*admin_area.AdminAreaChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAdminAreaResponse
func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) SetTo(target **WatchAdminAreaResponse) {
	if *target == nil {
		*target = new(WatchAdminAreaResponse)
	}
	switch fpv.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*admin_area.AdminAreaChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreaResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAdminAreaResponse_FieldTerminalPathValue' with the value under path in 'WatchAdminAreaResponse'.
func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) CompareWith(source *WatchAdminAreaResponse) (int, bool) {
	switch fpv.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreaResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreaResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAdminAreaResponse))
}

// WatchAdminAreaResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAdminAreaResponse according to their type
// Present only for array (repeated) types.
type WatchAdminAreaResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAdminAreaResponse_FieldPath
	ContainsValue(*WatchAdminAreaResponse) bool
}

// ParseWatchAdminAreaResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAdminAreaResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAdminAreaResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAdminAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAdminAreaResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAdminAreaResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAdminAreaResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAdminAreaResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAdminAreaResponse_FieldTerminalPathArrayItemValue struct {
	WatchAdminAreaResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreaResponse_FieldPathArrayItemValue = (*WatchAdminAreaResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAdminAreaResponse as interface{}
func (fpaiv *WatchAdminAreaResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAdminAreaResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAdminAreaResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAdminAreaResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAdminAreaResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAdminAreaResponse'
func (fpaiv *WatchAdminAreaResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAdminAreaResponse) bool {
	slice := fpaiv.WatchAdminAreaResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAdminAreaResponse_FieldPathArrayOfValues allows storing slice of values for WatchAdminAreaResponse fields according to their type
type WatchAdminAreaResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAdminAreaResponse_FieldPath
}

func ParseWatchAdminAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAdminAreaResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAdminAreaResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreaResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAdminAreaResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAdminAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAdminAreaResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAdminAreaResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAdminAreaResponse_FieldTerminalPathArrayOfValues struct {
	WatchAdminAreaResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAdminAreaResponse_FieldPathArrayOfValues = (*WatchAdminAreaResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAdminAreaResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAdminAreaResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*admin_area.AdminAreaChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAdminAreaResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*admin_area.AdminAreaChange, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminAreaChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAdminAreasRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAdminAreasRequest_FieldPathSelector
	Get(source *WatchAdminAreasRequest) []interface{}
	GetSingle(source *WatchAdminAreasRequest) (interface{}, bool)
	ClearValue(item *WatchAdminAreasRequest)

	// Those methods build corresponding WatchAdminAreasRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAdminAreasRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAdminAreasRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAdminAreasRequest_FieldPathArrayItemValue
}

type WatchAdminAreasRequest_FieldPathSelector int32

const (
	WatchAdminAreasRequest_FieldPathSelectorType         WatchAdminAreasRequest_FieldPathSelector = 0
	WatchAdminAreasRequest_FieldPathSelectorPageSize     WatchAdminAreasRequest_FieldPathSelector = 1
	WatchAdminAreasRequest_FieldPathSelectorPageToken    WatchAdminAreasRequest_FieldPathSelector = 2
	WatchAdminAreasRequest_FieldPathSelectorOrderBy      WatchAdminAreasRequest_FieldPathSelector = 3
	WatchAdminAreasRequest_FieldPathSelectorResumeToken  WatchAdminAreasRequest_FieldPathSelector = 4
	WatchAdminAreasRequest_FieldPathSelectorFilter       WatchAdminAreasRequest_FieldPathSelector = 5
	WatchAdminAreasRequest_FieldPathSelectorFieldMask    WatchAdminAreasRequest_FieldPathSelector = 6
	WatchAdminAreasRequest_FieldPathSelectorView         WatchAdminAreasRequest_FieldPathSelector = 7
	WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize WatchAdminAreasRequest_FieldPathSelector = 8
)

func (s WatchAdminAreasRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		return "type"
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAdminAreasRequest_FieldPathSelectorView:
		return "view"
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", s))
	}
}

func BuildWatchAdminAreasRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAdminAreasRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAdminAreasRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAdminAreasRequest_FieldTerminalPath{selector: WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAdminAreasRequest", fp)
}

func ParseWatchAdminAreasRequest_FieldPath(rawField string) (WatchAdminAreasRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAdminAreasRequest_FieldPath(fp)
}

func MustParseWatchAdminAreasRequest_FieldPath(rawField string) WatchAdminAreasRequest_FieldPath {
	fp, err := ParseWatchAdminAreasRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAdminAreasRequest_FieldTerminalPath struct {
	selector WatchAdminAreasRequest_FieldPathSelector
}

var _ WatchAdminAreasRequest_FieldPath = (*WatchAdminAreasRequest_FieldTerminalPath)(nil)

func (fp *WatchAdminAreasRequest_FieldTerminalPath) Selector() WatchAdminAreasRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAdminAreasRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAdminAreasRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAdminAreasRequest
func (fp *WatchAdminAreasRequest_FieldTerminalPath) Get(source *WatchAdminAreasRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAdminAreasRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAdminAreasRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAdminAreasRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAdminAreasRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAdminAreasRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAdminAreasRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAdminAreasRequest
func (fp *WatchAdminAreasRequest_FieldTerminalPath) GetSingle(source *WatchAdminAreasRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAdminAreasRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAdminAreasRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAdminAreasRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		return (*admin_area.PagerCursor)(nil)
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		return (*admin_area.OrderBy)(nil)
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		return (*admin_area.Filter)(nil)
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case WatchAdminAreasRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) ClearValue(item *WatchAdminAreasRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAdminAreasRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAdminAreasRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAdminAreasRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAdminAreasRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAdminAreasRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAdminAreasRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAdminAreasRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAdminAreasRequest_FieldPathSelectorType ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorView ||
		fp.selector == WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAdminAreasRequest_FieldPathValue {
	switch fp.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.OrderBy)}
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Filter)}
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case WatchAdminAreasRequest_FieldPathSelectorView:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAdminAreasRequest_FieldTerminalPathValue{WatchAdminAreasRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAdminAreasRequest_FieldPathArrayOfValues {
	fpaov := &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.OrderBy)}
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Filter)}
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case WatchAdminAreasRequest_FieldPathSelectorView:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAdminAreasRequest_FieldTerminalPathArrayOfValues{WatchAdminAreasRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAdminAreasRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAdminAreasRequest_FieldPathValue allows storing values for WatchAdminAreasRequest fields according to their type
type WatchAdminAreasRequest_FieldPathValue interface {
	WatchAdminAreasRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAdminAreasRequest)
	CompareWith(*WatchAdminAreasRequest) (cmp int, comparable bool)
}

func ParseWatchAdminAreasRequest_FieldPathValue(pathStr, valueStr string) (WatchAdminAreasRequest_FieldPathValue, error) {
	fp, err := ParseWatchAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAdminAreasRequest_FieldPathValue), nil
}

func MustParseWatchAdminAreasRequest_FieldPathValue(pathStr, valueStr string) WatchAdminAreasRequest_FieldPathValue {
	fpv, err := ParseWatchAdminAreasRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAdminAreasRequest_FieldTerminalPathValue struct {
	WatchAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasRequest_FieldPathValue = (*WatchAdminAreasRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAdminAreasRequest' as interface{}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsOrderByValue() (*admin_area.OrderBy, bool) {
	res, ok := fpv.value.(*admin_area.OrderBy)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsFilterValue() (*admin_area.Filter, bool) {
	res, ok := fpv.value.(*admin_area.Filter)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAdminAreasRequest
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) SetTo(target **WatchAdminAreasRequest) {
	if *target == nil {
		*target = new(WatchAdminAreasRequest)
	}
	switch fpv.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*admin_area.PagerCursor)
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*admin_area.OrderBy)
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*admin_area.Filter)
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case WatchAdminAreasRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreasRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAdminAreasRequest_FieldTerminalPathValue' with the value under path in 'WatchAdminAreasRequest'.
func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) CompareWith(source *WatchAdminAreasRequest) (int, bool) {
	switch fpv.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAdminAreasRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAdminAreasRequest))
}

// WatchAdminAreasRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAdminAreasRequest according to their type
// Present only for array (repeated) types.
type WatchAdminAreasRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAdminAreasRequest_FieldPath
	ContainsValue(*WatchAdminAreasRequest) bool
}

// ParseWatchAdminAreasRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAdminAreasRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAdminAreasRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAdminAreasRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAdminAreasRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAdminAreasRequest_FieldTerminalPathArrayItemValue struct {
	WatchAdminAreasRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasRequest_FieldPathArrayItemValue = (*WatchAdminAreasRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAdminAreasRequest as interface{}
func (fpaiv *WatchAdminAreasRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAdminAreasRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAdminAreasRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAdminAreasRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAdminAreasRequest'
func (fpaiv *WatchAdminAreasRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAdminAreasRequest) bool {
	slice := fpaiv.WatchAdminAreasRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAdminAreasRequest_FieldPathArrayOfValues allows storing slice of values for WatchAdminAreasRequest fields according to their type
type WatchAdminAreasRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAdminAreasRequest_FieldPath
}

func ParseWatchAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAdminAreasRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAdminAreasRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAdminAreasRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAdminAreasRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAdminAreasRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAdminAreasRequest_FieldTerminalPathArrayOfValues struct {
	WatchAdminAreasRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAdminAreasRequest_FieldPathArrayOfValues = (*WatchAdminAreasRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAdminAreasRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*admin_area.OrderBy) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*admin_area.Filter) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAdminAreasRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*admin_area.OrderBy, bool) {
	res, ok := fpaov.values.([]*admin_area.OrderBy)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*admin_area.Filter, bool) {
	res, ok := fpaov.values.([]*admin_area.Filter)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAdminAreasRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAdminAreasResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAdminAreasResponse_FieldPathSelector
	Get(source *WatchAdminAreasResponse) []interface{}
	GetSingle(source *WatchAdminAreasResponse) (interface{}, bool)
	ClearValue(item *WatchAdminAreasResponse)

	// Those methods build corresponding WatchAdminAreasResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAdminAreasResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAdminAreasResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAdminAreasResponse_FieldPathArrayItemValue
}

type WatchAdminAreasResponse_FieldPathSelector int32

const (
	WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges WatchAdminAreasResponse_FieldPathSelector = 0
	WatchAdminAreasResponse_FieldPathSelectorIsCurrent        WatchAdminAreasResponse_FieldPathSelector = 1
	WatchAdminAreasResponse_FieldPathSelectorPageTokenChange  WatchAdminAreasResponse_FieldPathSelector = 2
	WatchAdminAreasResponse_FieldPathSelectorResumeToken      WatchAdminAreasResponse_FieldPathSelector = 3
	WatchAdminAreasResponse_FieldPathSelectorSnapshotSize     WatchAdminAreasResponse_FieldPathSelector = 4
	WatchAdminAreasResponse_FieldPathSelectorIsSoftReset      WatchAdminAreasResponse_FieldPathSelector = 5
	WatchAdminAreasResponse_FieldPathSelectorIsHardReset      WatchAdminAreasResponse_FieldPathSelector = 6
)

func (s WatchAdminAreasResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return "admin_area_changes"
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", s))
	}
}

func BuildWatchAdminAreasResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAdminAreasResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAdminAreasResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "admin_area_changes", "adminAreaChanges", "admin-area-changes":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAdminAreasResponse_FieldTerminalPath{selector: WatchAdminAreasResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAdminAreasResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAdminAreasResponse_FieldSubPath{selector: WatchAdminAreasResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAdminAreasResponse", fp)
}

func ParseWatchAdminAreasResponse_FieldPath(rawField string) (WatchAdminAreasResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAdminAreasResponse_FieldPath(fp)
}

func MustParseWatchAdminAreasResponse_FieldPath(rawField string) WatchAdminAreasResponse_FieldPath {
	fp, err := ParseWatchAdminAreasResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAdminAreasResponse_FieldTerminalPath struct {
	selector WatchAdminAreasResponse_FieldPathSelector
}

var _ WatchAdminAreasResponse_FieldPath = (*WatchAdminAreasResponse_FieldTerminalPath)(nil)

func (fp *WatchAdminAreasResponse_FieldTerminalPath) Selector() WatchAdminAreasResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAdminAreasResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAdminAreasResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAdminAreasResponse
func (fp *WatchAdminAreasResponse_FieldTerminalPath) Get(source *WatchAdminAreasResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
			for _, value := range source.GetAdminAreaChanges() {
				values = append(values, value)
			}
		case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAdminAreasResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAdminAreasResponse
func (fp *WatchAdminAreasResponse_FieldTerminalPath) GetSingle(source *WatchAdminAreasResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		res := source.GetAdminAreaChanges()
		return res, res != nil
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAdminAreasResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return ([]*admin_area.AdminAreaChange)(nil)
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAdminAreasResponse_PageTokenChange)(nil)
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) ClearValue(item *WatchAdminAreasResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
			item.AdminAreaChanges = nil
		case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAdminAreasResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges ||
		fp.selector == WatchAdminAreasResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAdminAreasResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAdminAreasResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAdminAreasResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAdminAreasResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAdminAreasResponse_FieldPathValue {
	switch fp.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.([]*admin_area.AdminAreaChange)}
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*WatchAdminAreasResponse_PageTokenChange)}
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		return &WatchAdminAreasResponse_FieldTerminalPathValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAdminAreasResponse_FieldPathArrayOfValues {
	fpaov := &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([][]*admin_area.AdminAreaChange)}
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]*WatchAdminAreasResponse_PageTokenChange)}
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayOfValues{WatchAdminAreasResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAdminAreasResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return &WatchAdminAreasResponse_FieldTerminalPathArrayItemValue{WatchAdminAreasResponse_FieldTerminalPath: *fp, value: value.(*admin_area.AdminAreaChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAdminAreasResponse_FieldSubPath struct {
	selector WatchAdminAreasResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAdminAreasResponse_FieldPath = (*WatchAdminAreasResponse_FieldSubPath)(nil)

func (fps *WatchAdminAreasResponse_FieldSubPath) Selector() WatchAdminAreasResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAdminAreasResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAdminAreasResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAdminAreasResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAdminAreasResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAdminAreasResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAdminAreasResponse
func (fps *WatchAdminAreasResponse_FieldSubPath) Get(source *WatchAdminAreasResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAdminAreasResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAdminAreasResponse))
}

// GetSingle returns value of selected field from source WatchAdminAreasResponse
func (fps *WatchAdminAreasResponse_FieldSubPath) GetSingle(source *WatchAdminAreasResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fps.selector))
	}
}

func (fps *WatchAdminAreasResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAdminAreasResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAdminAreasResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAdminAreasResponse_FieldSubPath) ClearValue(item *WatchAdminAreasResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAdminAreasResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAdminAreasResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAdminAreasResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithIValue(value interface{}) WatchAdminAreasResponse_FieldPathValue {
	return &WatchAdminAreasResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAdminAreasResponse_FieldPathArrayOfValues {
	return &WatchAdminAreasResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAdminAreasResponse_FieldPathArrayItemValue {
	return &WatchAdminAreasResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAdminAreasResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAdminAreasResponse_FieldPathValue allows storing values for WatchAdminAreasResponse fields according to their type
type WatchAdminAreasResponse_FieldPathValue interface {
	WatchAdminAreasResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAdminAreasResponse)
	CompareWith(*WatchAdminAreasResponse) (cmp int, comparable bool)
}

func ParseWatchAdminAreasResponse_FieldPathValue(pathStr, valueStr string) (WatchAdminAreasResponse_FieldPathValue, error) {
	fp, err := ParseWatchAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAdminAreasResponse_FieldPathValue), nil
}

func MustParseWatchAdminAreasResponse_FieldPathValue(pathStr, valueStr string) WatchAdminAreasResponse_FieldPathValue {
	fpv, err := ParseWatchAdminAreasResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAdminAreasResponse_FieldTerminalPathValue struct {
	WatchAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasResponse_FieldPathValue = (*WatchAdminAreasResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAdminAreasResponse' as interface{}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsAdminAreaChangesValue() ([]*admin_area.AdminAreaChange, bool) {
	res, ok := fpv.value.([]*admin_area.AdminAreaChange)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAdminAreasResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAdminAreasResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAdminAreasResponse
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) SetTo(target **WatchAdminAreasResponse) {
	if *target == nil {
		*target = new(WatchAdminAreasResponse)
	}
	switch fpv.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		(*target).AdminAreaChanges = fpv.value.([]*admin_area.AdminAreaChange)
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAdminAreasResponse_PageTokenChange)
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreasResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAdminAreasResponse_FieldTerminalPathValue' with the value under path in 'WatchAdminAreasResponse'.
func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) CompareWith(source *WatchAdminAreasResponse) (int, bool) {
	switch fpv.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		return 0, false
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAdminAreasResponse))
}

type WatchAdminAreasResponse_FieldSubPathValue struct {
	WatchAdminAreasResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAdminAreasResponse_FieldPathValue = (*WatchAdminAreasResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAdminAreasResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAdminAreasResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) SetTo(target **WatchAdminAreasResponse) {
	if *target == nil {
		*target = new(WatchAdminAreasResponse)
	}
	switch fpvs.Selector() {
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAdminAreasResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreasResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) CompareWith(source *WatchAdminAreasResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAdminAreasResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAdminAreasResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAdminAreasResponse))
}

// WatchAdminAreasResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAdminAreasResponse according to their type
// Present only for array (repeated) types.
type WatchAdminAreasResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAdminAreasResponse_FieldPath
	ContainsValue(*WatchAdminAreasResponse) bool
}

// ParseWatchAdminAreasResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAdminAreasResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAdminAreasResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAdminAreasResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAdminAreasResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAdminAreasResponse_FieldTerminalPathArrayItemValue struct {
	WatchAdminAreasResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasResponse_FieldPathArrayItemValue = (*WatchAdminAreasResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAdminAreasResponse as interface{}
func (fpaiv *WatchAdminAreasResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAdminAreasResponse_FieldTerminalPathArrayItemValue) AsAdminAreaChangesItemValue() (*admin_area.AdminAreaChange, bool) {
	res, ok := fpaiv.value.(*admin_area.AdminAreaChange)
	return res, ok
}

func (fpaiv *WatchAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAdminAreasResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAdminAreasResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAdminAreasResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAdminAreasResponse'
func (fpaiv *WatchAdminAreasResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAdminAreasResponse) bool {
	slice := fpaiv.WatchAdminAreasResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAdminAreasResponse_FieldSubPathArrayItemValue struct {
	WatchAdminAreasResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAdminAreasResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAdminAreasResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAdminAreasResponse'
func (fpaivs *WatchAdminAreasResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAdminAreasResponse) bool {
	switch fpaivs.Selector() {
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse: %d", fpaivs.Selector()))
	}
}

// WatchAdminAreasResponse_FieldPathArrayOfValues allows storing slice of values for WatchAdminAreasResponse fields according to their type
type WatchAdminAreasResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAdminAreasResponse_FieldPath
}

func ParseWatchAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAdminAreasResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAdminAreasResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAdminAreasResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAdminAreasResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAdminAreasResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAdminAreasResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAdminAreasResponse_FieldTerminalPathArrayOfValues struct {
	WatchAdminAreasResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAdminAreasResponse_FieldPathArrayOfValues = (*WatchAdminAreasResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAdminAreasResponse_FieldPathSelectorAdminAreaChanges:
		for _, v := range fpaov.values.([][]*admin_area.AdminAreaChange) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAdminAreasResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAdminAreasResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsAdminAreaChangesArrayOfValues() ([][]*admin_area.AdminAreaChange, bool) {
	res, ok := fpaov.values.([][]*admin_area.AdminAreaChange)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAdminAreasResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAdminAreasResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAdminAreasResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAdminAreasResponse_FieldSubPathArrayOfValues struct {
	WatchAdminAreasResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAdminAreasResponse_FieldPathArrayOfValues = (*WatchAdminAreasResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAdminAreasResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAdminAreasResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAdminAreasResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAdminAreasResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAdminAreasResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAdminAreasResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAdminAreasResponse_PageTokenChange)

	// Those methods build corresponding WatchAdminAreasResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAdminAreasResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAdminAreasResponsePageTokenChange_FieldPathSelector = 0
	WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAdminAreasResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAdminAreasResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAdminAreasResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAdminAreasResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAdminAreasResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPath{selector: WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAdminAreasResponse_PageTokenChange", fp)
}

func ParseWatchAdminAreasResponsePageTokenChange_FieldPath(rawField string) (WatchAdminAreasResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAdminAreasResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAdminAreasResponsePageTokenChange_FieldPath(rawField string) WatchAdminAreasResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAdminAreasResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAdminAreasResponsePageTokenChange_FieldPathSelector
}

var _ WatchAdminAreasResponsePageTokenChange_FieldPath = (*WatchAdminAreasResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) Selector() WatchAdminAreasResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAdminAreasResponse_PageTokenChange
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAdminAreasResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAdminAreasResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAdminAreasResponse_PageTokenChange
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAdminAreasResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAdminAreasResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*admin_area.PagerCursor)(nil)
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*admin_area.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAdminAreasResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAdminAreasResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue{WatchAdminAreasResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue{WatchAdminAreasResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*admin_area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAdminAreasResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAdminAreasResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAdminAreasResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*admin_area.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAdminAreasResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAdminAreasResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAdminAreasResponsePageTokenChange_FieldPathValue interface {
	WatchAdminAreasResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAdminAreasResponse_PageTokenChange)
	CompareWith(*WatchAdminAreasResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAdminAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAdminAreasResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAdminAreasResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAdminAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAdminAreasResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAdminAreasResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasResponsePageTokenChange_FieldPathValue = (*WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}
func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*admin_area.PagerCursor, bool) {
	res, ok := fpv.value.(*admin_area.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAdminAreasResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAdminAreasResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*admin_area.PagerCursor)
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*admin_area.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAdminAreasResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAdminAreasResponse_PageTokenChange'.
func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAdminAreasResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAdminAreasResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAdminAreasResponse_PageTokenChange))
}

// WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAdminAreasResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAdminAreasResponse_PageTokenChange) bool
}

// ParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAdminAreasResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAdminAreasResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAdminAreasResponse_PageTokenChange as interface{}
func (fpaiv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAdminAreasResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAdminAreasResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAdminAreasResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAdminAreasResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAdminAreasResponsePageTokenChange_FieldPath
}

func ParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAdminAreasResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAdminAreasResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	case WatchAdminAreasResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*admin_area.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}
func (fpaov *WatchAdminAreasResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*admin_area.PagerCursor, bool) {
	res, ok := fpaov.values.([]*admin_area.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAdminAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAdminAreaRequest_FieldPathSelector
	Get(source *CreateAdminAreaRequest) []interface{}
	GetSingle(source *CreateAdminAreaRequest) (interface{}, bool)
	ClearValue(item *CreateAdminAreaRequest)

	// Those methods build corresponding CreateAdminAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAdminAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAdminAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAdminAreaRequest_FieldPathArrayItemValue
}

type CreateAdminAreaRequest_FieldPathSelector int32

const (
	CreateAdminAreaRequest_FieldPathSelectorAdminArea CreateAdminAreaRequest_FieldPathSelector = 0
)

func (s CreateAdminAreaRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return "admin_area"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", s))
	}
}

func BuildCreateAdminAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAdminAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAdminAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "admin_area", "adminArea", "admin-area":
			return &CreateAdminAreaRequest_FieldTerminalPath{selector: CreateAdminAreaRequest_FieldPathSelectorAdminArea}, nil
		}
	} else {
		switch fp[0] {
		case "admin_area", "adminArea", "admin-area":
			if subpath, err := admin_area.BuildAdminArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAdminAreaRequest_FieldSubPath{selector: CreateAdminAreaRequest_FieldPathSelectorAdminArea, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAdminAreaRequest", fp)
}

func ParseCreateAdminAreaRequest_FieldPath(rawField string) (CreateAdminAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAdminAreaRequest_FieldPath(fp)
}

func MustParseCreateAdminAreaRequest_FieldPath(rawField string) CreateAdminAreaRequest_FieldPath {
	fp, err := ParseCreateAdminAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAdminAreaRequest_FieldTerminalPath struct {
	selector CreateAdminAreaRequest_FieldPathSelector
}

var _ CreateAdminAreaRequest_FieldPath = (*CreateAdminAreaRequest_FieldTerminalPath)(nil)

func (fp *CreateAdminAreaRequest_FieldTerminalPath) Selector() CreateAdminAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAdminAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAdminAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAdminAreaRequest
func (fp *CreateAdminAreaRequest_FieldTerminalPath) Get(source *CreateAdminAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
			if source.AdminArea != nil {
				values = append(values, source.AdminArea)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAdminAreaRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAdminAreaRequest
func (fp *CreateAdminAreaRequest_FieldTerminalPath) GetSingle(source *CreateAdminAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		res := source.GetAdminArea()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAdminAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return (*admin_area.AdminArea)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) ClearValue(item *CreateAdminAreaRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
			item.AdminArea = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAdminAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAdminAreaRequest_FieldPathValue {
	switch fp.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return &CreateAdminAreaRequest_FieldTerminalPathValue{CreateAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAdminAreaRequest_FieldPathArrayOfValues {
	fpaov := &CreateAdminAreaRequest_FieldTerminalPathArrayOfValues{CreateAdminAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return &CreateAdminAreaRequest_FieldTerminalPathArrayOfValues{CreateAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAdminAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *CreateAdminAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAdminAreaRequest_FieldSubPath struct {
	selector CreateAdminAreaRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAdminAreaRequest_FieldPath = (*CreateAdminAreaRequest_FieldSubPath)(nil)

func (fps *CreateAdminAreaRequest_FieldSubPath) Selector() CreateAdminAreaRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAdminAreaRequest_FieldSubPath) AsAdminAreaSubPath() (admin_area.AdminArea_FieldPath, bool) {
	res, ok := fps.subPath.(admin_area.AdminArea_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAdminAreaRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAdminAreaRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAdminAreaRequest
func (fps *CreateAdminAreaRequest_FieldSubPath) Get(source *CreateAdminAreaRequest) (values []interface{}) {
	if asAdminAreaFieldPath, ok := fps.AsAdminAreaSubPath(); ok {
		values = append(values, asAdminAreaFieldPath.Get(source.GetAdminArea())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAdminAreaRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAdminAreaRequest))
}

// GetSingle returns value of selected field from source CreateAdminAreaRequest
func (fps *CreateAdminAreaRequest_FieldSubPath) GetSingle(source *CreateAdminAreaRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		if source.GetAdminArea() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAdminArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fps.selector))
	}
}

func (fps *CreateAdminAreaRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAdminAreaRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAdminAreaRequest_FieldSubPath) ClearValue(item *CreateAdminAreaRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
			fps.subPath.ClearValueRaw(item.AdminArea)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAdminAreaRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAdminAreaRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithIValue(value interface{}) CreateAdminAreaRequest_FieldPathValue {
	return &CreateAdminAreaRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAdminAreaRequest_FieldPathArrayOfValues {
	return &CreateAdminAreaRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAdminAreaRequest_FieldPathArrayItemValue {
	return &CreateAdminAreaRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAdminAreaRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAdminAreaRequest_FieldPathValue allows storing values for CreateAdminAreaRequest fields according to their type
type CreateAdminAreaRequest_FieldPathValue interface {
	CreateAdminAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAdminAreaRequest)
	CompareWith(*CreateAdminAreaRequest) (cmp int, comparable bool)
}

func ParseCreateAdminAreaRequest_FieldPathValue(pathStr, valueStr string) (CreateAdminAreaRequest_FieldPathValue, error) {
	fp, err := ParseCreateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAdminAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAdminAreaRequest_FieldPathValue), nil
}

func MustParseCreateAdminAreaRequest_FieldPathValue(pathStr, valueStr string) CreateAdminAreaRequest_FieldPathValue {
	fpv, err := ParseCreateAdminAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAdminAreaRequest_FieldTerminalPathValue struct {
	CreateAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAdminAreaRequest_FieldPathValue = (*CreateAdminAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAdminAreaRequest' as interface{}
func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) AsAdminAreaValue() (*admin_area.AdminArea, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea)
	return res, ok
}

// SetTo stores value for selected field for object CreateAdminAreaRequest
func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) SetTo(target **CreateAdminAreaRequest) {
	if *target == nil {
		*target = new(CreateAdminAreaRequest)
	}
	switch fpv.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		(*target).AdminArea = fpv.value.(*admin_area.AdminArea)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAdminAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAdminAreaRequest_FieldTerminalPathValue' with the value under path in 'CreateAdminAreaRequest'.
func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) CompareWith(source *CreateAdminAreaRequest) (int, bool) {
	switch fpv.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAdminAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAdminAreaRequest))
}

type CreateAdminAreaRequest_FieldSubPathValue struct {
	CreateAdminAreaRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAdminAreaRequest_FieldPathValue = (*CreateAdminAreaRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) AsAdminAreaPathValue() (admin_area.AdminArea_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) SetTo(target **CreateAdminAreaRequest) {
	if *target == nil {
		*target = new(CreateAdminAreaRequest)
	}
	switch fpvs.Selector() {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).SetTo(&(*target).AdminArea)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAdminAreaRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) CompareWith(source *CreateAdminAreaRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).CompareWith(source.GetAdminArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAdminAreaRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAdminAreaRequest))
}

// CreateAdminAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAdminAreaRequest according to their type
// Present only for array (repeated) types.
type CreateAdminAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAdminAreaRequest_FieldPath
	ContainsValue(*CreateAdminAreaRequest) bool
}

// ParseCreateAdminAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAdminAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAdminAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAdminAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAdminAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAdminAreaRequest_FieldTerminalPathArrayItemValue struct {
	CreateAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAdminAreaRequest_FieldPathArrayItemValue = (*CreateAdminAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAdminAreaRequest as interface{}
func (fpaiv *CreateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAdminAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAdminAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAdminAreaRequest'
func (fpaiv *CreateAdminAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAdminAreaRequest) bool {
	slice := fpaiv.CreateAdminAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAdminAreaRequest_FieldSubPathArrayItemValue struct {
	CreateAdminAreaRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAdminAreaRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAdminAreaRequest_FieldSubPathArrayItemValue) AsAdminAreaPathItemValue() (admin_area.AdminArea_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAdminAreaRequest'
func (fpaivs *CreateAdminAreaRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAdminAreaRequest) bool {
	switch fpaivs.Selector() {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		return fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue).ContainsValue(source.GetAdminArea())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAdminAreaRequest: %d", fpaivs.Selector()))
	}
}

// CreateAdminAreaRequest_FieldPathArrayOfValues allows storing slice of values for CreateAdminAreaRequest fields according to their type
type CreateAdminAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAdminAreaRequest_FieldPath
}

func ParseCreateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAdminAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAdminAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAdminAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAdminAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAdminAreaRequest_FieldTerminalPathArrayOfValues struct {
	CreateAdminAreaRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAdminAreaRequest_FieldPathArrayOfValues = (*CreateAdminAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAdminAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAdminAreaRequest_FieldPathSelectorAdminArea:
		for _, v := range fpaov.values.([]*admin_area.AdminArea) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAdminAreaRequest_FieldTerminalPathArrayOfValues) AsAdminAreaArrayOfValues() ([]*admin_area.AdminArea, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea)
	return res, ok
}

type CreateAdminAreaRequest_FieldSubPathArrayOfValues struct {
	CreateAdminAreaRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAdminAreaRequest_FieldPathArrayOfValues = (*CreateAdminAreaRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAdminAreaRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAdminAreaRequest_FieldSubPathArrayOfValues) AsAdminAreaPathArrayOfValues() (admin_area.AdminArea_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(admin_area.AdminArea_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAdminAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAdminAreaRequest_FieldPathSelector
	Get(source *UpdateAdminAreaRequest) []interface{}
	GetSingle(source *UpdateAdminAreaRequest) (interface{}, bool)
	ClearValue(item *UpdateAdminAreaRequest)

	// Those methods build corresponding UpdateAdminAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAdminAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAdminAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAdminAreaRequest_FieldPathArrayItemValue
}

type UpdateAdminAreaRequest_FieldPathSelector int32

const (
	UpdateAdminAreaRequest_FieldPathSelectorAdminArea  UpdateAdminAreaRequest_FieldPathSelector = 0
	UpdateAdminAreaRequest_FieldPathSelectorUpdateMask UpdateAdminAreaRequest_FieldPathSelector = 1
	UpdateAdminAreaRequest_FieldPathSelectorCas        UpdateAdminAreaRequest_FieldPathSelector = 2
)

func (s UpdateAdminAreaRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return "admin_area"
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", s))
	}
}

func BuildUpdateAdminAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAdminAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAdminAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "admin_area", "adminArea", "admin-area":
			return &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorAdminArea}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAdminAreaRequest_FieldTerminalPath{selector: UpdateAdminAreaRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "admin_area", "adminArea", "admin-area":
			if subpath, err := admin_area.BuildAdminArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAdminAreaRequest_FieldSubPath{selector: UpdateAdminAreaRequest_FieldPathSelectorAdminArea, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAdminAreaRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAdminAreaRequest_FieldSubPath{selector: UpdateAdminAreaRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAdminAreaRequest", fp)
}

func ParseUpdateAdminAreaRequest_FieldPath(rawField string) (UpdateAdminAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAdminAreaRequest_FieldPath(fp)
}

func MustParseUpdateAdminAreaRequest_FieldPath(rawField string) UpdateAdminAreaRequest_FieldPath {
	fp, err := ParseUpdateAdminAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAdminAreaRequest_FieldTerminalPath struct {
	selector UpdateAdminAreaRequest_FieldPathSelector
}

var _ UpdateAdminAreaRequest_FieldPath = (*UpdateAdminAreaRequest_FieldTerminalPath)(nil)

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) Selector() UpdateAdminAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAdminAreaRequest
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) Get(source *UpdateAdminAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
			if source.AdminArea != nil {
				values = append(values, source.AdminArea)
			}
		case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAdminAreaRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAdminAreaRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAdminAreaRequest
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) GetSingle(source *UpdateAdminAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		res := source.GetAdminArea()
		return res, res != nil
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return (*admin_area.AdminArea)(nil)
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return (*UpdateAdminAreaRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) ClearValue(item *UpdateAdminAreaRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
			item.AdminArea = nil
		case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAdminAreaRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAdminAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAdminAreaRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAdminAreaRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return &UpdateAdminAreaRequest_FieldTerminalPathValue{UpdateAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea)}
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		return &UpdateAdminAreaRequest_FieldTerminalPathValue{UpdateAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return &UpdateAdminAreaRequest_FieldTerminalPathValue{UpdateAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*UpdateAdminAreaRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAdminAreaRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return &UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea)}
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		return &UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return &UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAdminAreaRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAdminAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAdminAreaRequest_FieldSubPath struct {
	selector UpdateAdminAreaRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAdminAreaRequest_FieldPath = (*UpdateAdminAreaRequest_FieldSubPath)(nil)

func (fps *UpdateAdminAreaRequest_FieldSubPath) Selector() UpdateAdminAreaRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAdminAreaRequest_FieldSubPath) AsAdminAreaSubPath() (admin_area.AdminArea_FieldPath, bool) {
	res, ok := fps.subPath.(admin_area.AdminArea_FieldPath)
	return res, ok
}
func (fps *UpdateAdminAreaRequest_FieldSubPath) AsCasSubPath() (UpdateAdminAreaRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAdminAreaRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAdminAreaRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAdminAreaRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAdminAreaRequest
func (fps *UpdateAdminAreaRequest_FieldSubPath) Get(source *UpdateAdminAreaRequest) (values []interface{}) {
	if asAdminAreaFieldPath, ok := fps.AsAdminAreaSubPath(); ok {
		values = append(values, asAdminAreaFieldPath.Get(source.GetAdminArea())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAdminAreaRequest))
}

// GetSingle returns value of selected field from source UpdateAdminAreaRequest
func (fps *UpdateAdminAreaRequest_FieldSubPath) GetSingle(source *UpdateAdminAreaRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		if source.GetAdminArea() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAdminArea())
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fps.selector))
	}
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAdminAreaRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) ClearValue(item *UpdateAdminAreaRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
			fps.subPath.ClearValueRaw(item.AdminArea)
		case UpdateAdminAreaRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAdminAreaRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithIValue(value interface{}) UpdateAdminAreaRequest_FieldPathValue {
	return &UpdateAdminAreaRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAdminAreaRequest_FieldPathArrayOfValues {
	return &UpdateAdminAreaRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAdminAreaRequest_FieldPathArrayItemValue {
	return &UpdateAdminAreaRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAdminAreaRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAdminAreaRequest_FieldPathValue allows storing values for UpdateAdminAreaRequest fields according to their type
type UpdateAdminAreaRequest_FieldPathValue interface {
	UpdateAdminAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAdminAreaRequest)
	CompareWith(*UpdateAdminAreaRequest) (cmp int, comparable bool)
}

func ParseUpdateAdminAreaRequest_FieldPathValue(pathStr, valueStr string) (UpdateAdminAreaRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAdminAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAdminAreaRequest_FieldPathValue), nil
}

func MustParseUpdateAdminAreaRequest_FieldPathValue(pathStr, valueStr string) UpdateAdminAreaRequest_FieldPathValue {
	fpv, err := ParseUpdateAdminAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAdminAreaRequest_FieldTerminalPathValue struct {
	UpdateAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAdminAreaRequest_FieldPathValue = (*UpdateAdminAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAdminAreaRequest' as interface{}
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) AsAdminAreaValue() (*admin_area.AdminArea, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea)
	return res, ok
}
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAdminAreaRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAdminAreaRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAdminAreaRequest
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) SetTo(target **UpdateAdminAreaRequest) {
	if *target == nil {
		*target = new(UpdateAdminAreaRequest)
	}
	switch fpv.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		(*target).AdminArea = fpv.value.(*admin_area.AdminArea)
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAdminAreaRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAdminAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAdminAreaRequest_FieldTerminalPathValue' with the value under path in 'UpdateAdminAreaRequest'.
func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) CompareWith(source *UpdateAdminAreaRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return 0, false
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAdminAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAdminAreaRequest))
}

type UpdateAdminAreaRequest_FieldSubPathValue struct {
	UpdateAdminAreaRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAdminAreaRequest_FieldPathValue = (*UpdateAdminAreaRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) AsAdminAreaPathValue() (admin_area.AdminArea_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) AsCasPathValue() (UpdateAdminAreaRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAdminAreaRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) SetTo(target **UpdateAdminAreaRequest) {
	if *target == nil {
		*target = new(UpdateAdminAreaRequest)
	}
	switch fpvs.Selector() {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).SetTo(&(*target).AdminArea)
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAdminAreaRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAdminAreaRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) CompareWith(source *UpdateAdminAreaRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).CompareWith(source.GetAdminArea())
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAdminAreaRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAdminAreaRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAdminAreaRequest))
}

// UpdateAdminAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAdminAreaRequest according to their type
// Present only for array (repeated) types.
type UpdateAdminAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAdminAreaRequest_FieldPath
	ContainsValue(*UpdateAdminAreaRequest) bool
}

// ParseUpdateAdminAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAdminAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAdminAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAdminAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAdminAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAdminAreaRequest_FieldPathArrayItemValue = (*UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAdminAreaRequest as interface{}
func (fpaiv *UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAdminAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAdminAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAdminAreaRequest'
func (fpaiv *UpdateAdminAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAdminAreaRequest) bool {
	slice := fpaiv.UpdateAdminAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAdminAreaRequest_FieldSubPathArrayItemValue struct {
	UpdateAdminAreaRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAdminAreaRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAdminAreaRequest_FieldSubPathArrayItemValue) AsAdminAreaPathItemValue() (admin_area.AdminArea_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAdminAreaRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAdminAreaRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAdminAreaRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAdminAreaRequest'
func (fpaivs *UpdateAdminAreaRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAdminAreaRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		return fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue).ContainsValue(source.GetAdminArea())
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAdminAreaRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAdminAreaRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAdminAreaRequest fields according to their type
type UpdateAdminAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAdminAreaRequest_FieldPath
}

func ParseUpdateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAdminAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAdminAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAdminAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAdminAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAdminAreaRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAdminAreaRequest_FieldPathArrayOfValues = (*UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAdminAreaRequest_FieldPathSelectorAdminArea:
		for _, v := range fpaov.values.([]*admin_area.AdminArea) {
			values = append(values, v)
		}
	case UpdateAdminAreaRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	case UpdateAdminAreaRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAdminAreaRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues) AsAdminAreaArrayOfValues() ([]*admin_area.AdminArea, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea)
	return res, ok
}
func (fpaov *UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}
func (fpaov *UpdateAdminAreaRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAdminAreaRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAdminAreaRequest_CAS)
	return res, ok
}

type UpdateAdminAreaRequest_FieldSubPathArrayOfValues struct {
	UpdateAdminAreaRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAdminAreaRequest_FieldPathArrayOfValues = (*UpdateAdminAreaRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAdminAreaRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAdminAreaRequest_FieldSubPathArrayOfValues) AsAdminAreaPathArrayOfValues() (admin_area.AdminArea_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(admin_area.AdminArea_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAdminAreaRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAdminAreaRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAdminAreaRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAdminAreaRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAdminAreaRequestCAS_FieldPathSelector
	Get(source *UpdateAdminAreaRequest_CAS) []interface{}
	GetSingle(source *UpdateAdminAreaRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAdminAreaRequest_CAS)

	// Those methods build corresponding UpdateAdminAreaRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayItemValue
}

type UpdateAdminAreaRequestCAS_FieldPathSelector int32

const (
	UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState UpdateAdminAreaRequestCAS_FieldPathSelector = 0
	UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask        UpdateAdminAreaRequestCAS_FieldPathSelector = 1
)

func (s UpdateAdminAreaRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", s))
	}
}

func BuildUpdateAdminAreaRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAdminAreaRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAdminAreaRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAdminAreaRequestCAS_FieldTerminalPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAdminAreaRequestCAS_FieldTerminalPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := admin_area.BuildAdminArea_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAdminAreaRequestCAS_FieldSubPath{selector: UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAdminAreaRequest_CAS", fp)
}

func ParseUpdateAdminAreaRequestCAS_FieldPath(rawField string) (UpdateAdminAreaRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAdminAreaRequestCAS_FieldPath(fp)
}

func MustParseUpdateAdminAreaRequestCAS_FieldPath(rawField string) UpdateAdminAreaRequestCAS_FieldPath {
	fp, err := ParseUpdateAdminAreaRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAdminAreaRequestCAS_FieldTerminalPath struct {
	selector UpdateAdminAreaRequestCAS_FieldPathSelector
}

var _ UpdateAdminAreaRequestCAS_FieldPath = (*UpdateAdminAreaRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) Selector() UpdateAdminAreaRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAdminAreaRequest_CAS
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) Get(source *UpdateAdminAreaRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAdminAreaRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAdminAreaRequest_CAS
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAdminAreaRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAdminAreaRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return (*admin_area.AdminArea)(nil)
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		return (*admin_area.AdminArea_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAdminAreaRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAdminAreaRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAdminAreaRequestCAS_FieldTerminalPathValue{UpdateAdminAreaRequestCAS_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea)}
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAdminAreaRequestCAS_FieldTerminalPathValue{UpdateAdminAreaRequestCAS_FieldTerminalPath: *fp, value: value.(*admin_area.AdminArea_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequestCAS_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea)}
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues{UpdateAdminAreaRequestCAS_FieldTerminalPath: *fp, values: values.([]*admin_area.AdminArea_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAdminAreaRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAdminAreaRequestCAS_FieldSubPath struct {
	selector UpdateAdminAreaRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAdminAreaRequestCAS_FieldPath = (*UpdateAdminAreaRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) Selector() UpdateAdminAreaRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) AsConditionalStateSubPath() (admin_area.AdminArea_FieldPath, bool) {
	res, ok := fps.subPath.(admin_area.AdminArea_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAdminAreaRequest_CAS
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) Get(source *UpdateAdminAreaRequest_CAS) (values []interface{}) {
	if asAdminAreaFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAdminAreaFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAdminAreaRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAdminAreaRequest_CAS
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) GetSingle(source *UpdateAdminAreaRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAdminAreaRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) ClearValue(item *UpdateAdminAreaRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAdminAreaRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathValue {
	return &UpdateAdminAreaRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayOfValues {
	return &UpdateAdminAreaRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAdminAreaRequestCAS_FieldPathArrayItemValue {
	return &UpdateAdminAreaRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAdminAreaRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAdminAreaRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAdminAreaRequestCAS_FieldPathValue interface {
	UpdateAdminAreaRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAdminAreaRequest_CAS)
	CompareWith(*UpdateAdminAreaRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAdminAreaRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAdminAreaRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAdminAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAdminAreaRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAdminAreaRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAdminAreaRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAdminAreaRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAdminAreaRequestCAS_FieldTerminalPathValue struct {
	UpdateAdminAreaRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAdminAreaRequestCAS_FieldPathValue = (*UpdateAdminAreaRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*admin_area.AdminArea, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea)
	return res, ok
}
func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpv.value.(*admin_area.AdminArea_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAdminAreaRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAdminAreaRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*admin_area.AdminArea)
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*admin_area.AdminArea_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAdminAreaRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAdminAreaRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAdminAreaRequest_CAS'.
func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAdminAreaRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAdminAreaRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAdminAreaRequest_CAS))
}

type UpdateAdminAreaRequestCAS_FieldSubPathValue struct {
	UpdateAdminAreaRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAdminAreaRequestCAS_FieldPathValue = (*UpdateAdminAreaRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (admin_area.AdminArea_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) SetTo(target **UpdateAdminAreaRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAdminAreaRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAdminAreaRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAdminAreaRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(admin_area.AdminArea_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAdminAreaRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAdminAreaRequest_CAS))
}

// UpdateAdminAreaRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAdminAreaRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAdminAreaRequestCAS_FieldPath
	ContainsValue(*UpdateAdminAreaRequest_CAS) bool
}

// ParseUpdateAdminAreaRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAdminAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAdminAreaRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAdminAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAdminAreaRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAdminAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAdminAreaRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAdminAreaRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAdminAreaRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAdminAreaRequestCAS_FieldPathArrayItemValue = (*UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAdminAreaRequest_CAS as interface{}
func (fpaiv *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAdminAreaRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAdminAreaRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAdminAreaRequest_CAS) bool {
	slice := fpaiv.UpdateAdminAreaRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAdminAreaRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAdminAreaRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAdminAreaRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAdminAreaRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (admin_area.AdminArea_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAdminAreaRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAdminAreaRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(admin_area.AdminArea_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAdminAreaRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAdminAreaRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAdminAreaRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAdminAreaRequestCAS_FieldPath
}

func ParseUpdateAdminAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAdminAreaRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAdminAreaRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAdminAreaRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAdminAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAdminAreaRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAdminAreaRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAdminAreaRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAdminAreaRequestCAS_FieldPathArrayOfValues = (*UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAdminAreaRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*admin_area.AdminArea) {
			values = append(values, v)
		}
	case UpdateAdminAreaRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*admin_area.AdminArea_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*admin_area.AdminArea, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea)
	return res, ok
}
func (fpaov *UpdateAdminAreaRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*admin_area.AdminArea_FieldMask, bool) {
	res, ok := fpaov.values.([]*admin_area.AdminArea_FieldMask)
	return res, ok
}

type UpdateAdminAreaRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAdminAreaRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAdminAreaRequestCAS_FieldPathArrayOfValues = (*UpdateAdminAreaRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAdminAreaRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAdminAreaRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (admin_area.AdminArea_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(admin_area.AdminArea_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAdminAreaRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAdminAreaRequest_FieldPathSelector
	Get(source *DeleteAdminAreaRequest) []interface{}
	GetSingle(source *DeleteAdminAreaRequest) (interface{}, bool)
	ClearValue(item *DeleteAdminAreaRequest)

	// Those methods build corresponding DeleteAdminAreaRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAdminAreaRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAdminAreaRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAdminAreaRequest_FieldPathArrayItemValue
}

type DeleteAdminAreaRequest_FieldPathSelector int32

const (
	DeleteAdminAreaRequest_FieldPathSelectorName DeleteAdminAreaRequest_FieldPathSelector = 0
)

func (s DeleteAdminAreaRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", s))
	}
}

func BuildDeleteAdminAreaRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAdminAreaRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAdminAreaRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAdminAreaRequest_FieldTerminalPath{selector: DeleteAdminAreaRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAdminAreaRequest", fp)
}

func ParseDeleteAdminAreaRequest_FieldPath(rawField string) (DeleteAdminAreaRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAdminAreaRequest_FieldPath(fp)
}

func MustParseDeleteAdminAreaRequest_FieldPath(rawField string) DeleteAdminAreaRequest_FieldPath {
	fp, err := ParseDeleteAdminAreaRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAdminAreaRequest_FieldTerminalPath struct {
	selector DeleteAdminAreaRequest_FieldPathSelector
}

var _ DeleteAdminAreaRequest_FieldPath = (*DeleteAdminAreaRequest_FieldTerminalPath)(nil)

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) Selector() DeleteAdminAreaRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAdminAreaRequest
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) Get(source *DeleteAdminAreaRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAdminAreaRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAdminAreaRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAdminAreaRequest
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) GetSingle(source *DeleteAdminAreaRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAdminAreaRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		return (*admin_area.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) ClearValue(item *DeleteAdminAreaRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAdminAreaRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAdminAreaRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAdminAreaRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAdminAreaRequest_FieldPathSelectorName
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAdminAreaRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		return &DeleteAdminAreaRequest_FieldTerminalPathValue{DeleteAdminAreaRequest_FieldTerminalPath: *fp, value: value.(*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAdminAreaRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues{DeleteAdminAreaRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		return &DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues{DeleteAdminAreaRequest_FieldTerminalPath: *fp, values: values.([]*admin_area.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAdminAreaRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fp.selector))
	}
}

func (fp *DeleteAdminAreaRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAdminAreaRequest_FieldPathValue allows storing values for DeleteAdminAreaRequest fields according to their type
type DeleteAdminAreaRequest_FieldPathValue interface {
	DeleteAdminAreaRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAdminAreaRequest)
	CompareWith(*DeleteAdminAreaRequest) (cmp int, comparable bool)
}

func ParseDeleteAdminAreaRequest_FieldPathValue(pathStr, valueStr string) (DeleteAdminAreaRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAdminAreaRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAdminAreaRequest_FieldPathValue), nil
}

func MustParseDeleteAdminAreaRequest_FieldPathValue(pathStr, valueStr string) DeleteAdminAreaRequest_FieldPathValue {
	fpv, err := ParseDeleteAdminAreaRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAdminAreaRequest_FieldTerminalPathValue struct {
	DeleteAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAdminAreaRequest_FieldPathValue = (*DeleteAdminAreaRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAdminAreaRequest' as interface{}
func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) AsNameValue() (*admin_area.Reference, bool) {
	res, ok := fpv.value.(*admin_area.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAdminAreaRequest
func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) SetTo(target **DeleteAdminAreaRequest) {
	if *target == nil {
		*target = new(DeleteAdminAreaRequest)
	}
	switch fpv.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*admin_area.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAdminAreaRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAdminAreaRequest_FieldTerminalPathValue' with the value under path in 'DeleteAdminAreaRequest'.
func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) CompareWith(source *DeleteAdminAreaRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*admin_area.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAdminAreaRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAdminAreaRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAdminAreaRequest))
}

// DeleteAdminAreaRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAdminAreaRequest according to their type
// Present only for array (repeated) types.
type DeleteAdminAreaRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAdminAreaRequest_FieldPath
	ContainsValue(*DeleteAdminAreaRequest) bool
}

// ParseDeleteAdminAreaRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAdminAreaRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAdminAreaRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAdminAreaRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAdminAreaRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAdminAreaRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAdminAreaRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAdminAreaRequest_FieldPathArrayItemValue = (*DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAdminAreaRequest as interface{}
func (fpaiv *DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAdminAreaRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAdminAreaRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAdminAreaRequest'
func (fpaiv *DeleteAdminAreaRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAdminAreaRequest) bool {
	slice := fpaiv.DeleteAdminAreaRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAdminAreaRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAdminAreaRequest fields according to their type
type DeleteAdminAreaRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAdminAreaRequest_FieldPath
}

func ParseDeleteAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAdminAreaRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAdminAreaRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAdminAreaRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAdminAreaRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAdminAreaRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAdminAreaRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAdminAreaRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAdminAreaRequest_FieldPathArrayOfValues = (*DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAdminAreaRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*admin_area.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAdminAreaRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*admin_area.Reference, bool) {
	res, ok := fpaov.values.([]*admin_area.Reference)
	return res, ok
}
