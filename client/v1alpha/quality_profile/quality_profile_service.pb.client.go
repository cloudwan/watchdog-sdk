// Code generated by protoc-gen-goten-client
// API: QualityProfileService
// DO NOT EDIT!!!

package quality_profile_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha/quality_profile"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &quality_profile.Profile{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QualityProfileServiceClient is the client API for QualityProfileService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QualityProfileServiceClient interface {
	GetQualityProfile(ctx context.Context, in *GetQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error)
	BatchGetQualityProfiles(ctx context.Context, in *BatchGetQualityProfilesRequest, opts ...grpc.CallOption) (*BatchGetQualityProfilesResponse, error)
	ListQualityProfiles(ctx context.Context, in *ListQualityProfilesRequest, opts ...grpc.CallOption) (*ListQualityProfilesResponse, error)
	WatchQualityProfile(ctx context.Context, in *WatchQualityProfileRequest, opts ...grpc.CallOption) (WatchQualityProfileClientStream, error)
	WatchQualityProfiles(ctx context.Context, in *WatchQualityProfilesRequest, opts ...grpc.CallOption) (WatchQualityProfilesClientStream, error)
	CreateQualityProfile(ctx context.Context, in *CreateQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error)
	UpdateQualityProfile(ctx context.Context, in *UpdateQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error)
	DeleteQualityProfile(ctx context.Context, in *DeleteQualityProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewQualityProfileServiceClient(cc grpc.ClientConnInterface) QualityProfileServiceClient {
	return &client{cc}
}

func (c *client) GetQualityProfile(ctx context.Context, in *GetQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error) {
	out := new(quality_profile.QualityProfile)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/GetQualityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetQualityProfiles(ctx context.Context, in *BatchGetQualityProfilesRequest, opts ...grpc.CallOption) (*BatchGetQualityProfilesResponse, error) {
	out := new(BatchGetQualityProfilesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/BatchGetQualityProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListQualityProfiles(ctx context.Context, in *ListQualityProfilesRequest, opts ...grpc.CallOption) (*ListQualityProfilesResponse, error) {
	out := new(ListQualityProfilesResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/ListQualityProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchQualityProfile(ctx context.Context, in *WatchQualityProfileRequest, opts ...grpc.CallOption) (WatchQualityProfileClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchQualityProfile",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.QualityProfileService/WatchQualityProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchQualityProfileWatchQualityProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchQualityProfileClientStream interface {
	Recv() (*WatchQualityProfileResponse, error)
	grpc.ClientStream
}

type watchQualityProfileWatchQualityProfileClient struct {
	grpc.ClientStream
}

func (x *watchQualityProfileWatchQualityProfileClient) Recv() (*WatchQualityProfileResponse, error) {
	m := new(WatchQualityProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchQualityProfiles(ctx context.Context, in *WatchQualityProfilesRequest, opts ...grpc.CallOption) (WatchQualityProfilesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchQualityProfiles",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.QualityProfileService/WatchQualityProfiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchQualityProfilesWatchQualityProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchQualityProfilesClientStream interface {
	Recv() (*WatchQualityProfilesResponse, error)
	grpc.ClientStream
}

type watchQualityProfilesWatchQualityProfilesClient struct {
	grpc.ClientStream
}

func (x *watchQualityProfilesWatchQualityProfilesClient) Recv() (*WatchQualityProfilesResponse, error) {
	m := new(WatchQualityProfilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateQualityProfile(ctx context.Context, in *CreateQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error) {
	out := new(quality_profile.QualityProfile)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/CreateQualityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateQualityProfile(ctx context.Context, in *UpdateQualityProfileRequest, opts ...grpc.CallOption) (*quality_profile.QualityProfile, error) {
	out := new(quality_profile.QualityProfile)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/UpdateQualityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteQualityProfile(ctx context.Context, in *DeleteQualityProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.QualityProfileService/DeleteQualityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
