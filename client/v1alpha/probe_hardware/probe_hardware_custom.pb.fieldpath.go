// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/probe_hardware_custom.proto
// DO NOT EDIT!!!

package probe_hardware_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeHardwareGetRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeHardwareGetRequest_FieldPathSelector
	Get(source *ProbeHardwareGetRequest) []interface{}
	GetSingle(source *ProbeHardwareGetRequest) (interface{}, bool)
	ClearValue(item *ProbeHardwareGetRequest)

	// Those methods build corresponding ProbeHardwareGetRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeHardwareGetRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeHardwareGetRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeHardwareGetRequest_FieldPathArrayItemValue
}

type ProbeHardwareGetRequest_FieldPathSelector int32

const (
	ProbeHardwareGetRequest_FieldPathSelectorProbeName   ProbeHardwareGetRequest_FieldPathSelector = 0
	ProbeHardwareGetRequest_FieldPathSelectorAccessToken ProbeHardwareGetRequest_FieldPathSelector = 1
)

func (s ProbeHardwareGetRequest_FieldPathSelector) String() string {
	switch s {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		return "probe_name"
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		return "access_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", s))
	}
}

func BuildProbeHardwareGetRequest_FieldPath(fp gotenobject.RawFieldPath) (ProbeHardwareGetRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeHardwareGetRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_name", "probeName", "probe-name":
			return &ProbeHardwareGetRequest_FieldTerminalPath{selector: ProbeHardwareGetRequest_FieldPathSelectorProbeName}, nil
		case "access_token", "accessToken", "access-token":
			return &ProbeHardwareGetRequest_FieldTerminalPath{selector: ProbeHardwareGetRequest_FieldPathSelectorAccessToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeHardwareGetRequest", fp)
}

func ParseProbeHardwareGetRequest_FieldPath(rawField string) (ProbeHardwareGetRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeHardwareGetRequest_FieldPath(fp)
}

func MustParseProbeHardwareGetRequest_FieldPath(rawField string) ProbeHardwareGetRequest_FieldPath {
	fp, err := ParseProbeHardwareGetRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeHardwareGetRequest_FieldTerminalPath struct {
	selector ProbeHardwareGetRequest_FieldPathSelector
}

var _ ProbeHardwareGetRequest_FieldPath = (*ProbeHardwareGetRequest_FieldTerminalPath)(nil)

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) Selector() ProbeHardwareGetRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeHardwareGetRequest
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) Get(source *ProbeHardwareGetRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
			if source.ProbeName != nil {
				values = append(values, source.ProbeName)
			}
		case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
			values = append(values, source.AccessToken)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeHardwareGetRequest))
}

// GetSingle returns value pointed by specific field of from source ProbeHardwareGetRequest
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) GetSingle(source *ProbeHardwareGetRequest) (interface{}, bool) {
	switch fp.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		res := source.GetProbeName()
		return res, res != nil
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		return source.GetAccessToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeHardwareGetRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		return (*probe.Name)(nil)
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) ClearValue(item *ProbeHardwareGetRequest) {
	if item != nil {
		switch fp.selector {
		case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
			item.ProbeName = nil
		case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
			item.AccessToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
		}
	}
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeHardwareGetRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeHardwareGetRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeHardwareGetRequest_FieldPathSelectorProbeName ||
		fp.selector == ProbeHardwareGetRequest_FieldPathSelectorAccessToken
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithIValue(value interface{}) ProbeHardwareGetRequest_FieldPathValue {
	switch fp.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		return &ProbeHardwareGetRequest_FieldTerminalPathValue{ProbeHardwareGetRequest_FieldTerminalPath: *fp, value: value.(*probe.Name)}
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		return &ProbeHardwareGetRequest_FieldTerminalPathValue{ProbeHardwareGetRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeHardwareGetRequest_FieldPathArrayOfValues {
	fpaov := &ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues{ProbeHardwareGetRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		return &ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues{ProbeHardwareGetRequest_FieldTerminalPath: *fp, values: values.([]*probe.Name)}
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		return &ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues{ProbeHardwareGetRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeHardwareGetRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeHardwareGetRequest_FieldPathValue allows storing values for ProbeHardwareGetRequest fields according to their type
type ProbeHardwareGetRequest_FieldPathValue interface {
	ProbeHardwareGetRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeHardwareGetRequest)
	CompareWith(*ProbeHardwareGetRequest) (cmp int, comparable bool)
}

func ParseProbeHardwareGetRequest_FieldPathValue(pathStr, valueStr string) (ProbeHardwareGetRequest_FieldPathValue, error) {
	fp, err := ParseProbeHardwareGetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeHardwareGetRequest_FieldPathValue), nil
}

func MustParseProbeHardwareGetRequest_FieldPathValue(pathStr, valueStr string) ProbeHardwareGetRequest_FieldPathValue {
	fpv, err := ParseProbeHardwareGetRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeHardwareGetRequest_FieldTerminalPathValue struct {
	ProbeHardwareGetRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareGetRequest_FieldPathValue = (*ProbeHardwareGetRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeHardwareGetRequest' as interface{}
func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) AsProbeNameValue() (*probe.Name, bool) {
	res, ok := fpv.value.(*probe.Name)
	return res, ok
}
func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) AsAccessTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProbeHardwareGetRequest
func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) SetTo(target **ProbeHardwareGetRequest) {
	if *target == nil {
		*target = new(ProbeHardwareGetRequest)
	}
	switch fpv.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		(*target).ProbeName = fpv.value.(*probe.Name)
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		(*target).AccessToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeHardwareGetRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeHardwareGetRequest_FieldTerminalPathValue' with the value under path in 'ProbeHardwareGetRequest'.
func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) CompareWith(source *ProbeHardwareGetRequest) (int, bool) {
	switch fpv.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		leftValue := fpv.value.(*probe.Name)
		rightValue := source.GetProbeName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetAccessToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareGetRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeHardwareGetRequest))
}

// ProbeHardwareGetRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeHardwareGetRequest according to their type
// Present only for array (repeated) types.
type ProbeHardwareGetRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeHardwareGetRequest_FieldPath
	ContainsValue(*ProbeHardwareGetRequest) bool
}

// ParseProbeHardwareGetRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeHardwareGetRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeHardwareGetRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeHardwareGetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeHardwareGetRequest_FieldPathArrayItemValue), nil
}

func MustParseProbeHardwareGetRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProbeHardwareGetRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeHardwareGetRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue struct {
	ProbeHardwareGetRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareGetRequest_FieldPathArrayItemValue = (*ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeHardwareGetRequest as interface{}
func (fpaiv *ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeHardwareGetRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeHardwareGetRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeHardwareGetRequest'
func (fpaiv *ProbeHardwareGetRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeHardwareGetRequest) bool {
	slice := fpaiv.ProbeHardwareGetRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeHardwareGetRequest_FieldPathArrayOfValues allows storing slice of values for ProbeHardwareGetRequest fields according to their type
type ProbeHardwareGetRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeHardwareGetRequest_FieldPath
}

func ParseProbeHardwareGetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeHardwareGetRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeHardwareGetRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeHardwareGetRequest_FieldPathArrayOfValues), nil
}

func MustParseProbeHardwareGetRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeHardwareGetRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProbeHardwareGetRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues struct {
	ProbeHardwareGetRequest_FieldTerminalPath
	values interface{}
}

var _ ProbeHardwareGetRequest_FieldPathArrayOfValues = (*ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeHardwareGetRequest_FieldPathSelectorProbeName:
		for _, v := range fpaov.values.([]*probe.Name) {
			values = append(values, v)
		}
	case ProbeHardwareGetRequest_FieldPathSelectorAccessToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues) AsProbeNameArrayOfValues() ([]*probe.Name, bool) {
	res, ok := fpaov.values.([]*probe.Name)
	return res, ok
}
func (fpaov *ProbeHardwareGetRequest_FieldTerminalPathArrayOfValues) AsAccessTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeHardwareGetResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeHardwareGetResponse_FieldPathSelector
	Get(source *ProbeHardwareGetResponse) []interface{}
	GetSingle(source *ProbeHardwareGetResponse) (interface{}, bool)
	ClearValue(item *ProbeHardwareGetResponse)

	// Those methods build corresponding ProbeHardwareGetResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeHardwareGetResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeHardwareGetResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeHardwareGetResponse_FieldPathArrayItemValue
}

type ProbeHardwareGetResponse_FieldPathSelector int32

const (
	ProbeHardwareGetResponse_FieldPathSelectorSerialNumber     ProbeHardwareGetResponse_FieldPathSelector = 0
	ProbeHardwareGetResponse_FieldPathSelectorActivationStatus ProbeHardwareGetResponse_FieldPathSelector = 1
	ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus ProbeHardwareGetResponse_FieldPathSelector = 2
)

func (s ProbeHardwareGetResponse_FieldPathSelector) String() string {
	switch s {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		return "serial_number"
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		return "activation_status"
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		return "connection_status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", s))
	}
}

func BuildProbeHardwareGetResponse_FieldPath(fp gotenobject.RawFieldPath) (ProbeHardwareGetResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeHardwareGetResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorSerialNumber}, nil
		case "activation_status", "activationStatus", "activation-status":
			return &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorActivationStatus}, nil
		case "connection_status", "connectionStatus", "connection-status":
			return &ProbeHardwareGetResponse_FieldTerminalPath{selector: ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeHardwareGetResponse", fp)
}

func ParseProbeHardwareGetResponse_FieldPath(rawField string) (ProbeHardwareGetResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeHardwareGetResponse_FieldPath(fp)
}

func MustParseProbeHardwareGetResponse_FieldPath(rawField string) ProbeHardwareGetResponse_FieldPath {
	fp, err := ParseProbeHardwareGetResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeHardwareGetResponse_FieldTerminalPath struct {
	selector ProbeHardwareGetResponse_FieldPathSelector
}

var _ ProbeHardwareGetResponse_FieldPath = (*ProbeHardwareGetResponse_FieldTerminalPath)(nil)

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) Selector() ProbeHardwareGetResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeHardwareGetResponse
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) Get(source *ProbeHardwareGetResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
			values = append(values, source.ActivationStatus)
		case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
			values = append(values, source.ConnectionStatus)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeHardwareGetResponse))
}

// GetSingle returns value pointed by specific field of from source ProbeHardwareGetResponse
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) GetSingle(source *ProbeHardwareGetResponse) (interface{}, bool) {
	switch fp.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		return source.GetActivationStatus(), source != nil
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		return source.GetConnectionStatus(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeHardwareGetResponse))
}

// GetDefault returns a default value of the field type
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		return ""
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		return probe.Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		return probe.Probe_Status_CONNECTION_STATUS_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) ClearValue(item *ProbeHardwareGetResponse) {
	if item != nil {
		switch fp.selector {
		case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
			item.ActivationStatus = probe.Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED
		case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
			item.ConnectionStatus = probe.Probe_Status_CONNECTION_STATUS_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
		}
	}
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeHardwareGetResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeHardwareGetResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeHardwareGetResponse_FieldPathSelectorSerialNumber ||
		fp.selector == ProbeHardwareGetResponse_FieldPathSelectorActivationStatus ||
		fp.selector == ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithIValue(value interface{}) ProbeHardwareGetResponse_FieldPathValue {
	switch fp.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		return &ProbeHardwareGetResponse_FieldTerminalPathValue{ProbeHardwareGetResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		return &ProbeHardwareGetResponse_FieldTerminalPathValue{ProbeHardwareGetResponse_FieldTerminalPath: *fp, value: value.(probe.Probe_Status_ActivationState_Status)}
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		return &ProbeHardwareGetResponse_FieldTerminalPathValue{ProbeHardwareGetResponse_FieldTerminalPath: *fp, value: value.(probe.Probe_Status_ConnectionStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeHardwareGetResponse_FieldPathArrayOfValues {
	fpaov := &ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues{ProbeHardwareGetResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		return &ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues{ProbeHardwareGetResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		return &ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues{ProbeHardwareGetResponse_FieldTerminalPath: *fp, values: values.([]probe.Probe_Status_ActivationState_Status)}
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		return &ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues{ProbeHardwareGetResponse_FieldTerminalPath: *fp, values: values.([]probe.Probe_Status_ConnectionStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeHardwareGetResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareGetResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeHardwareGetResponse_FieldPathValue allows storing values for ProbeHardwareGetResponse fields according to their type
type ProbeHardwareGetResponse_FieldPathValue interface {
	ProbeHardwareGetResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeHardwareGetResponse)
	CompareWith(*ProbeHardwareGetResponse) (cmp int, comparable bool)
}

func ParseProbeHardwareGetResponse_FieldPathValue(pathStr, valueStr string) (ProbeHardwareGetResponse_FieldPathValue, error) {
	fp, err := ParseProbeHardwareGetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeHardwareGetResponse_FieldPathValue), nil
}

func MustParseProbeHardwareGetResponse_FieldPathValue(pathStr, valueStr string) ProbeHardwareGetResponse_FieldPathValue {
	fpv, err := ParseProbeHardwareGetResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeHardwareGetResponse_FieldTerminalPathValue struct {
	ProbeHardwareGetResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareGetResponse_FieldPathValue = (*ProbeHardwareGetResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeHardwareGetResponse' as interface{}
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) AsActivationStatusValue() (probe.Probe_Status_ActivationState_Status, bool) {
	res, ok := fpv.value.(probe.Probe_Status_ActivationState_Status)
	return res, ok
}
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) AsConnectionStatusValue() (probe.Probe_Status_ConnectionStatus, bool) {
	res, ok := fpv.value.(probe.Probe_Status_ConnectionStatus)
	return res, ok
}

// SetTo stores value for selected field for object ProbeHardwareGetResponse
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) SetTo(target **ProbeHardwareGetResponse) {
	if *target == nil {
		*target = new(ProbeHardwareGetResponse)
	}
	switch fpv.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		(*target).ActivationStatus = fpv.value.(probe.Probe_Status_ActivationState_Status)
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		(*target).ConnectionStatus = fpv.value.(probe.Probe_Status_ConnectionStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeHardwareGetResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeHardwareGetResponse_FieldTerminalPathValue' with the value under path in 'ProbeHardwareGetResponse'.
func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) CompareWith(source *ProbeHardwareGetResponse) (int, bool) {
	switch fpv.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		leftValue := fpv.value.(probe.Probe_Status_ActivationState_Status)
		rightValue := source.GetActivationStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		leftValue := fpv.value.(probe.Probe_Status_ConnectionStatus)
		rightValue := source.GetConnectionStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareGetResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareGetResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeHardwareGetResponse))
}

// ProbeHardwareGetResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeHardwareGetResponse according to their type
// Present only for array (repeated) types.
type ProbeHardwareGetResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeHardwareGetResponse_FieldPath
	ContainsValue(*ProbeHardwareGetResponse) bool
}

// ParseProbeHardwareGetResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeHardwareGetResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeHardwareGetResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeHardwareGetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeHardwareGetResponse_FieldPathArrayItemValue), nil
}

func MustParseProbeHardwareGetResponse_FieldPathArrayItemValue(pathStr, valueStr string) ProbeHardwareGetResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeHardwareGetResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue struct {
	ProbeHardwareGetResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareGetResponse_FieldPathArrayItemValue = (*ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeHardwareGetResponse as interface{}
func (fpaiv *ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeHardwareGetResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeHardwareGetResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeHardwareGetResponse'
func (fpaiv *ProbeHardwareGetResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeHardwareGetResponse) bool {
	slice := fpaiv.ProbeHardwareGetResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeHardwareGetResponse_FieldPathArrayOfValues allows storing slice of values for ProbeHardwareGetResponse fields according to their type
type ProbeHardwareGetResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeHardwareGetResponse_FieldPath
}

func ParseProbeHardwareGetResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeHardwareGetResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeHardwareGetResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareGetResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeHardwareGetResponse_FieldPathArrayOfValues), nil
}

func MustParseProbeHardwareGetResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeHardwareGetResponse_FieldPathArrayOfValues {
	fpaov, err := ParseProbeHardwareGetResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues struct {
	ProbeHardwareGetResponse_FieldTerminalPath
	values interface{}
}

var _ ProbeHardwareGetResponse_FieldPathArrayOfValues = (*ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeHardwareGetResponse_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeHardwareGetResponse_FieldPathSelectorActivationStatus:
		for _, v := range fpaov.values.([]probe.Probe_Status_ActivationState_Status) {
			values = append(values, v)
		}
	case ProbeHardwareGetResponse_FieldPathSelectorConnectionStatus:
		for _, v := range fpaov.values.([]probe.Probe_Status_ConnectionStatus) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues) AsActivationStatusArrayOfValues() ([]probe.Probe_Status_ActivationState_Status, bool) {
	res, ok := fpaov.values.([]probe.Probe_Status_ActivationState_Status)
	return res, ok
}
func (fpaov *ProbeHardwareGetResponse_FieldTerminalPathArrayOfValues) AsConnectionStatusArrayOfValues() ([]probe.Probe_Status_ConnectionStatus, bool) {
	res, ok := fpaov.values.([]probe.Probe_Status_ConnectionStatus)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeHardwareUpdateRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeHardwareUpdateRequest_FieldPathSelector
	Get(source *ProbeHardwareUpdateRequest) []interface{}
	GetSingle(source *ProbeHardwareUpdateRequest) (interface{}, bool)
	ClearValue(item *ProbeHardwareUpdateRequest)

	// Those methods build corresponding ProbeHardwareUpdateRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeHardwareUpdateRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeHardwareUpdateRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeHardwareUpdateRequest_FieldPathArrayItemValue
}

type ProbeHardwareUpdateRequest_FieldPathSelector int32

const (
	ProbeHardwareUpdateRequest_FieldPathSelectorProbeName    ProbeHardwareUpdateRequest_FieldPathSelector = 0
	ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber ProbeHardwareUpdateRequest_FieldPathSelector = 1
	ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken  ProbeHardwareUpdateRequest_FieldPathSelector = 2
)

func (s ProbeHardwareUpdateRequest_FieldPathSelector) String() string {
	switch s {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		return "probe_name"
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		return "serial_number"
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		return "access_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", s))
	}
}

func BuildProbeHardwareUpdateRequest_FieldPath(fp gotenobject.RawFieldPath) (ProbeHardwareUpdateRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeHardwareUpdateRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_name", "probeName", "probe-name":
			return &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorProbeName}, nil
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber}, nil
		case "access_token", "accessToken", "access-token":
			return &ProbeHardwareUpdateRequest_FieldTerminalPath{selector: ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeHardwareUpdateRequest", fp)
}

func ParseProbeHardwareUpdateRequest_FieldPath(rawField string) (ProbeHardwareUpdateRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeHardwareUpdateRequest_FieldPath(fp)
}

func MustParseProbeHardwareUpdateRequest_FieldPath(rawField string) ProbeHardwareUpdateRequest_FieldPath {
	fp, err := ParseProbeHardwareUpdateRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeHardwareUpdateRequest_FieldTerminalPath struct {
	selector ProbeHardwareUpdateRequest_FieldPathSelector
}

var _ ProbeHardwareUpdateRequest_FieldPath = (*ProbeHardwareUpdateRequest_FieldTerminalPath)(nil)

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) Selector() ProbeHardwareUpdateRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeHardwareUpdateRequest
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) Get(source *ProbeHardwareUpdateRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
			if source.ProbeName != nil {
				values = append(values, source.ProbeName)
			}
		case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
			values = append(values, source.AccessToken)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeHardwareUpdateRequest))
}

// GetSingle returns value pointed by specific field of from source ProbeHardwareUpdateRequest
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) GetSingle(source *ProbeHardwareUpdateRequest) (interface{}, bool) {
	switch fp.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		res := source.GetProbeName()
		return res, res != nil
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		return source.GetAccessToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeHardwareUpdateRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		return (*probe.Name)(nil)
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		return ""
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) ClearValue(item *ProbeHardwareUpdateRequest) {
	if item != nil {
		switch fp.selector {
		case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
			item.ProbeName = nil
		case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
			item.AccessToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
		}
	}
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeHardwareUpdateRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeHardwareUpdateRequest_FieldPathSelectorProbeName ||
		fp.selector == ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber ||
		fp.selector == ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithIValue(value interface{}) ProbeHardwareUpdateRequest_FieldPathValue {
	switch fp.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathValue{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, value: value.(*probe.Name)}
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathValue{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathValue{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeHardwareUpdateRequest_FieldPathArrayOfValues {
	fpaov := &ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, values: values.([]*probe.Name)}
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		return &ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeHardwareUpdateRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeHardwareUpdateRequest_FieldPathValue allows storing values for ProbeHardwareUpdateRequest fields according to their type
type ProbeHardwareUpdateRequest_FieldPathValue interface {
	ProbeHardwareUpdateRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeHardwareUpdateRequest)
	CompareWith(*ProbeHardwareUpdateRequest) (cmp int, comparable bool)
}

func ParseProbeHardwareUpdateRequest_FieldPathValue(pathStr, valueStr string) (ProbeHardwareUpdateRequest_FieldPathValue, error) {
	fp, err := ParseProbeHardwareUpdateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeHardwareUpdateRequest_FieldPathValue), nil
}

func MustParseProbeHardwareUpdateRequest_FieldPathValue(pathStr, valueStr string) ProbeHardwareUpdateRequest_FieldPathValue {
	fpv, err := ParseProbeHardwareUpdateRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeHardwareUpdateRequest_FieldTerminalPathValue struct {
	ProbeHardwareUpdateRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareUpdateRequest_FieldPathValue = (*ProbeHardwareUpdateRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeHardwareUpdateRequest' as interface{}
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) AsProbeNameValue() (*probe.Name, bool) {
	res, ok := fpv.value.(*probe.Name)
	return res, ok
}
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) AsAccessTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProbeHardwareUpdateRequest
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) SetTo(target **ProbeHardwareUpdateRequest) {
	if *target == nil {
		*target = new(ProbeHardwareUpdateRequest)
	}
	switch fpv.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		(*target).ProbeName = fpv.value.(*probe.Name)
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		(*target).AccessToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeHardwareUpdateRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeHardwareUpdateRequest_FieldTerminalPathValue' with the value under path in 'ProbeHardwareUpdateRequest'.
func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) CompareWith(source *ProbeHardwareUpdateRequest) (int, bool) {
	switch fpv.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		leftValue := fpv.value.(*probe.Name)
		rightValue := source.GetProbeName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetAccessToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareUpdateRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeHardwareUpdateRequest))
}

// ProbeHardwareUpdateRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeHardwareUpdateRequest according to their type
// Present only for array (repeated) types.
type ProbeHardwareUpdateRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeHardwareUpdateRequest_FieldPath
	ContainsValue(*ProbeHardwareUpdateRequest) bool
}

// ParseProbeHardwareUpdateRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeHardwareUpdateRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeHardwareUpdateRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeHardwareUpdateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeHardwareUpdateRequest_FieldPathArrayItemValue), nil
}

func MustParseProbeHardwareUpdateRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProbeHardwareUpdateRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeHardwareUpdateRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue struct {
	ProbeHardwareUpdateRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareUpdateRequest_FieldPathArrayItemValue = (*ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeHardwareUpdateRequest as interface{}
func (fpaiv *ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeHardwareUpdateRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeHardwareUpdateRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeHardwareUpdateRequest'
func (fpaiv *ProbeHardwareUpdateRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeHardwareUpdateRequest) bool {
	slice := fpaiv.ProbeHardwareUpdateRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeHardwareUpdateRequest_FieldPathArrayOfValues allows storing slice of values for ProbeHardwareUpdateRequest fields according to their type
type ProbeHardwareUpdateRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeHardwareUpdateRequest_FieldPath
}

func ParseProbeHardwareUpdateRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeHardwareUpdateRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeHardwareUpdateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeHardwareUpdateRequest_FieldPathArrayOfValues), nil
}

func MustParseProbeHardwareUpdateRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeHardwareUpdateRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProbeHardwareUpdateRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues struct {
	ProbeHardwareUpdateRequest_FieldTerminalPath
	values interface{}
}

var _ ProbeHardwareUpdateRequest_FieldPathArrayOfValues = (*ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeHardwareUpdateRequest_FieldPathSelectorProbeName:
		for _, v := range fpaov.values.([]*probe.Name) {
			values = append(values, v)
		}
	case ProbeHardwareUpdateRequest_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeHardwareUpdateRequest_FieldPathSelectorAccessToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues) AsProbeNameArrayOfValues() ([]*probe.Name, bool) {
	res, ok := fpaov.values.([]*probe.Name)
	return res, ok
}
func (fpaov *ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeHardwareUpdateRequest_FieldTerminalPathArrayOfValues) AsAccessTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeHardwareUpdateResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeHardwareUpdateResponse_FieldPathSelector
	Get(source *ProbeHardwareUpdateResponse) []interface{}
	GetSingle(source *ProbeHardwareUpdateResponse) (interface{}, bool)
	ClearValue(item *ProbeHardwareUpdateResponse)

	// Those methods build corresponding ProbeHardwareUpdateResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeHardwareUpdateResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeHardwareUpdateResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeHardwareUpdateResponse_FieldPathArrayItemValue
}

type ProbeHardwareUpdateResponse_FieldPathSelector int32

const (
	ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber ProbeHardwareUpdateResponse_FieldPathSelector = 0
)

func (s ProbeHardwareUpdateResponse_FieldPathSelector) String() string {
	switch s {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		return "serial_number"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", s))
	}
}

func BuildProbeHardwareUpdateResponse_FieldPath(fp gotenobject.RawFieldPath) (ProbeHardwareUpdateResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeHardwareUpdateResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeHardwareUpdateResponse_FieldTerminalPath{selector: ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeHardwareUpdateResponse", fp)
}

func ParseProbeHardwareUpdateResponse_FieldPath(rawField string) (ProbeHardwareUpdateResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeHardwareUpdateResponse_FieldPath(fp)
}

func MustParseProbeHardwareUpdateResponse_FieldPath(rawField string) ProbeHardwareUpdateResponse_FieldPath {
	fp, err := ParseProbeHardwareUpdateResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeHardwareUpdateResponse_FieldTerminalPath struct {
	selector ProbeHardwareUpdateResponse_FieldPathSelector
}

var _ ProbeHardwareUpdateResponse_FieldPath = (*ProbeHardwareUpdateResponse_FieldTerminalPath)(nil)

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) Selector() ProbeHardwareUpdateResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeHardwareUpdateResponse
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) Get(source *ProbeHardwareUpdateResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeHardwareUpdateResponse))
}

// GetSingle returns value pointed by specific field of from source ProbeHardwareUpdateResponse
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) GetSingle(source *ProbeHardwareUpdateResponse) (interface{}, bool) {
	switch fp.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeHardwareUpdateResponse))
}

// GetDefault returns a default value of the field type
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) ClearValue(item *ProbeHardwareUpdateResponse) {
	if item != nil {
		switch fp.selector {
		case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
		}
	}
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeHardwareUpdateResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithIValue(value interface{}) ProbeHardwareUpdateResponse_FieldPathValue {
	switch fp.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		return &ProbeHardwareUpdateResponse_FieldTerminalPathValue{ProbeHardwareUpdateResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeHardwareUpdateResponse_FieldPathArrayOfValues {
	fpaov := &ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		return &ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues{ProbeHardwareUpdateResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeHardwareUpdateResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fp.selector))
	}
}

func (fp *ProbeHardwareUpdateResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeHardwareUpdateResponse_FieldPathValue allows storing values for ProbeHardwareUpdateResponse fields according to their type
type ProbeHardwareUpdateResponse_FieldPathValue interface {
	ProbeHardwareUpdateResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeHardwareUpdateResponse)
	CompareWith(*ProbeHardwareUpdateResponse) (cmp int, comparable bool)
}

func ParseProbeHardwareUpdateResponse_FieldPathValue(pathStr, valueStr string) (ProbeHardwareUpdateResponse_FieldPathValue, error) {
	fp, err := ParseProbeHardwareUpdateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeHardwareUpdateResponse_FieldPathValue), nil
}

func MustParseProbeHardwareUpdateResponse_FieldPathValue(pathStr, valueStr string) ProbeHardwareUpdateResponse_FieldPathValue {
	fpv, err := ParseProbeHardwareUpdateResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeHardwareUpdateResponse_FieldTerminalPathValue struct {
	ProbeHardwareUpdateResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareUpdateResponse_FieldPathValue = (*ProbeHardwareUpdateResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeHardwareUpdateResponse' as interface{}
func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProbeHardwareUpdateResponse
func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) SetTo(target **ProbeHardwareUpdateResponse) {
	if *target == nil {
		*target = new(ProbeHardwareUpdateResponse)
	}
	switch fpv.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeHardwareUpdateResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeHardwareUpdateResponse_FieldTerminalPathValue' with the value under path in 'ProbeHardwareUpdateResponse'.
func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) CompareWith(source *ProbeHardwareUpdateResponse) (int, bool) {
	switch fpv.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeHardwareUpdateResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeHardwareUpdateResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeHardwareUpdateResponse))
}

// ProbeHardwareUpdateResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeHardwareUpdateResponse according to their type
// Present only for array (repeated) types.
type ProbeHardwareUpdateResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeHardwareUpdateResponse_FieldPath
	ContainsValue(*ProbeHardwareUpdateResponse) bool
}

// ParseProbeHardwareUpdateResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeHardwareUpdateResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeHardwareUpdateResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeHardwareUpdateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeHardwareUpdateResponse_FieldPathArrayItemValue), nil
}

func MustParseProbeHardwareUpdateResponse_FieldPathArrayItemValue(pathStr, valueStr string) ProbeHardwareUpdateResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeHardwareUpdateResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue struct {
	ProbeHardwareUpdateResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeHardwareUpdateResponse_FieldPathArrayItemValue = (*ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeHardwareUpdateResponse as interface{}
func (fpaiv *ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeHardwareUpdateResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeHardwareUpdateResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeHardwareUpdateResponse'
func (fpaiv *ProbeHardwareUpdateResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeHardwareUpdateResponse) bool {
	slice := fpaiv.ProbeHardwareUpdateResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeHardwareUpdateResponse_FieldPathArrayOfValues allows storing slice of values for ProbeHardwareUpdateResponse fields according to their type
type ProbeHardwareUpdateResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeHardwareUpdateResponse_FieldPath
}

func ParseProbeHardwareUpdateResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeHardwareUpdateResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeHardwareUpdateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeHardwareUpdateResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeHardwareUpdateResponse_FieldPathArrayOfValues), nil
}

func MustParseProbeHardwareUpdateResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeHardwareUpdateResponse_FieldPathArrayOfValues {
	fpaov, err := ParseProbeHardwareUpdateResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues struct {
	ProbeHardwareUpdateResponse_FieldTerminalPath
	values interface{}
}

var _ ProbeHardwareUpdateResponse_FieldPathArrayOfValues = (*ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeHardwareUpdateResponse_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeHardwareUpdateResponse_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
