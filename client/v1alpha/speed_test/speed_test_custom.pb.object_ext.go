// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/speed_test_custom.proto
// DO NOT EDIT!!!

package speed_test_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &probe.Probe{}
)

func (o *RunSpeedTestRequest) GotenObjectExt() {}

func (o *RunSpeedTestRequest) MakeFullFieldMask() *RunSpeedTestRequest_FieldMask {
	return FullRunSpeedTestRequest_FieldMask()
}

func (o *RunSpeedTestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunSpeedTestRequest_FieldMask()
}

func (o *RunSpeedTestRequest) MakeDiffFieldMask(other *RunSpeedTestRequest) *RunSpeedTestRequest_FieldMask {
	if o == nil && other == nil {
		return &RunSpeedTestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunSpeedTestRequest_FieldMask()
	}

	res := &RunSpeedTestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RunSpeedTestRequest_FieldTerminalPath{selector: RunSpeedTestRequest_FieldPathSelectorName})
	}
	if o.GetDirection() != other.GetDirection() {
		res.Paths = append(res.Paths, &RunSpeedTestRequest_FieldTerminalPath{selector: RunSpeedTestRequest_FieldPathSelectorDirection})
	}
	return res
}

func (o *RunSpeedTestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunSpeedTestRequest))
}

func (o *RunSpeedTestRequest) Clone() *RunSpeedTestRequest {
	if o == nil {
		return nil
	}
	result := &RunSpeedTestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &probe.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Direction = o.Direction
	return result
}

func (o *RunSpeedTestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunSpeedTestRequest) Merge(source *RunSpeedTestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &probe.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.Direction = source.GetDirection()
}

func (o *RunSpeedTestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunSpeedTestRequest))
}

func (o *RunSpeedTestResponse) GotenObjectExt() {}

func (o *RunSpeedTestResponse) MakeFullFieldMask() *RunSpeedTestResponse_FieldMask {
	return FullRunSpeedTestResponse_FieldMask()
}

func (o *RunSpeedTestResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunSpeedTestResponse_FieldMask()
}

func (o *RunSpeedTestResponse) MakeDiffFieldMask(other *RunSpeedTestResponse) *RunSpeedTestResponse_FieldMask {
	if o == nil && other == nil {
		return &RunSpeedTestResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunSpeedTestResponse_FieldMask()
	}

	res := &RunSpeedTestResponse_FieldMask{}
	if o.GetDirection() != other.GetDirection() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorDirection})
	}
	if o.GetSpeedMbps() != other.GetSpeedMbps() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorSpeedMbps})
	}
	if o.GetServerName() != other.GetServerName() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorServerName})
	}
	if o.GetServerIp() != other.GetServerIp() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorServerIp})
	}
	if o.GetServerLatency() != other.GetServerLatency() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorServerLatency})
	}
	if o.GetServerRetransmitPercentage() != other.GetServerRetransmitPercentage() {
		res.Paths = append(res.Paths, &RunSpeedTestResponse_FieldTerminalPath{selector: RunSpeedTestResponse_FieldPathSelectorServerRetransmitPercentage})
	}
	return res
}

func (o *RunSpeedTestResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunSpeedTestResponse))
}

func (o *RunSpeedTestResponse) Clone() *RunSpeedTestResponse {
	if o == nil {
		return nil
	}
	result := &RunSpeedTestResponse{}
	result.Direction = o.Direction
	result.SpeedMbps = o.SpeedMbps
	result.ServerName = o.ServerName
	result.ServerIp = o.ServerIp
	result.ServerLatency = o.ServerLatency
	result.ServerRetransmitPercentage = o.ServerRetransmitPercentage
	return result
}

func (o *RunSpeedTestResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunSpeedTestResponse) Merge(source *RunSpeedTestResponse) {
	o.Direction = source.GetDirection()
	o.SpeedMbps = source.GetSpeedMbps()
	o.ServerName = source.GetServerName()
	o.ServerIp = source.GetServerIp()
	o.ServerLatency = source.GetServerLatency()
	o.ServerRetransmitPercentage = source.GetServerRetransmitPercentage()
}

func (o *RunSpeedTestResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunSpeedTestResponse))
}

func (o *RunSpeedTestRequestToProbe) GotenObjectExt() {}

func (o *RunSpeedTestRequestToProbe) MakeFullFieldMask() *RunSpeedTestRequestToProbe_FieldMask {
	return FullRunSpeedTestRequestToProbe_FieldMask()
}

func (o *RunSpeedTestRequestToProbe) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRunSpeedTestRequestToProbe_FieldMask()
}

func (o *RunSpeedTestRequestToProbe) MakeDiffFieldMask(other *RunSpeedTestRequestToProbe) *RunSpeedTestRequestToProbe_FieldMask {
	if o == nil && other == nil {
		return &RunSpeedTestRequestToProbe_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRunSpeedTestRequestToProbe_FieldMask()
	}

	res := &RunSpeedTestRequestToProbe_FieldMask{}
	if o.GetDirection() != other.GetDirection() {
		res.Paths = append(res.Paths, &RunSpeedTestRequestToProbe_FieldTerminalPath{selector: RunSpeedTestRequestToProbe_FieldPathSelectorDirection})
	}
	return res
}

func (o *RunSpeedTestRequestToProbe) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RunSpeedTestRequestToProbe))
}

func (o *RunSpeedTestRequestToProbe) Clone() *RunSpeedTestRequestToProbe {
	if o == nil {
		return nil
	}
	result := &RunSpeedTestRequestToProbe{}
	result.Direction = o.Direction
	return result
}

func (o *RunSpeedTestRequestToProbe) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RunSpeedTestRequestToProbe) Merge(source *RunSpeedTestRequestToProbe) {
	o.Direction = source.GetDirection()
}

func (o *RunSpeedTestRequestToProbe) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RunSpeedTestRequestToProbe))
}
