// Code generated by protoc-gen-goten-client
// API: ProbingConfigService
// DO NOT EDIT!!!

package probing_config_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	probing_config "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probing_config"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &probing_config.ProbingConfig{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProbingConfigServiceClient is the client API for ProbingConfigService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbingConfigServiceClient interface {
	GetProbingConfig(ctx context.Context, in *GetProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error)
	BatchGetProbingConfigs(ctx context.Context, in *BatchGetProbingConfigsRequest, opts ...grpc.CallOption) (*BatchGetProbingConfigsResponse, error)
	ListProbingConfigs(ctx context.Context, in *ListProbingConfigsRequest, opts ...grpc.CallOption) (*ListProbingConfigsResponse, error)
	WatchProbingConfig(ctx context.Context, in *WatchProbingConfigRequest, opts ...grpc.CallOption) (WatchProbingConfigClientStream, error)
	WatchProbingConfigs(ctx context.Context, in *WatchProbingConfigsRequest, opts ...grpc.CallOption) (WatchProbingConfigsClientStream, error)
	CreateProbingConfig(ctx context.Context, in *CreateProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error)
	UpdateProbingConfig(ctx context.Context, in *UpdateProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error)
	DeleteProbingConfig(ctx context.Context, in *DeleteProbingConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProbingConfigServiceClient(cc grpc.ClientConnInterface) ProbingConfigServiceClient {
	return &client{cc}
}

func (c *client) GetProbingConfig(ctx context.Context, in *GetProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error) {
	out := new(probing_config.ProbingConfig)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/GetProbingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProbingConfigs(ctx context.Context, in *BatchGetProbingConfigsRequest, opts ...grpc.CallOption) (*BatchGetProbingConfigsResponse, error) {
	out := new(BatchGetProbingConfigsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/BatchGetProbingConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProbingConfigs(ctx context.Context, in *ListProbingConfigsRequest, opts ...grpc.CallOption) (*ListProbingConfigsResponse, error) {
	out := new(ListProbingConfigsResponse)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/ListProbingConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProbingConfig(ctx context.Context, in *WatchProbingConfigRequest, opts ...grpc.CallOption) (WatchProbingConfigClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingConfig",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.ProbingConfigService/WatchProbingConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingConfigWatchProbingConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingConfigClientStream interface {
	Recv() (*WatchProbingConfigResponse, error)
	grpc.ClientStream
}

type watchProbingConfigWatchProbingConfigClient struct {
	grpc.ClientStream
}

func (x *watchProbingConfigWatchProbingConfigClient) Recv() (*WatchProbingConfigResponse, error) {
	m := new(WatchProbingConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProbingConfigs(ctx context.Context, in *WatchProbingConfigsRequest, opts ...grpc.CallOption) (WatchProbingConfigsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProbingConfigs",
			ServerStreams: true,
		},
		"/ntt.watchdog.v1alpha.ProbingConfigService/WatchProbingConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProbingConfigsWatchProbingConfigsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProbingConfigsClientStream interface {
	Recv() (*WatchProbingConfigsResponse, error)
	grpc.ClientStream
}

type watchProbingConfigsWatchProbingConfigsClient struct {
	grpc.ClientStream
}

func (x *watchProbingConfigsWatchProbingConfigsClient) Recv() (*WatchProbingConfigsResponse, error) {
	m := new(WatchProbingConfigsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProbingConfig(ctx context.Context, in *CreateProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error) {
	out := new(probing_config.ProbingConfig)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/CreateProbingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProbingConfig(ctx context.Context, in *UpdateProbingConfigRequest, opts ...grpc.CallOption) (*probing_config.ProbingConfig, error) {
	out := new(probing_config.ProbingConfig)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/UpdateProbingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProbingConfig(ctx context.Context, in *DeleteProbingConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.watchdog.v1alpha.ProbingConfigService/DeleteProbingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
