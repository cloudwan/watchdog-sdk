// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/tag_service.proto
// DO NOT EDIT!!!

package tag_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
	tag "github.com/cloudwan/watchdog-sdk/resources/v1alpha/tag"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &project.Project{}
	_ = &tag.Tag{}
)

func (o *GetTagRequest) GotenObjectExt() {}

func (o *GetTagRequest) MakeFullFieldMask() *GetTagRequest_FieldMask {
	return FullGetTagRequest_FieldMask()
}

func (o *GetTagRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetTagRequest_FieldMask()
}

func (o *GetTagRequest) MakeDiffFieldMask(other *GetTagRequest) *GetTagRequest_FieldMask {
	if o == nil && other == nil {
		return &GetTagRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetTagRequest_FieldMask()
	}

	res := &GetTagRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetTagRequest_FieldTerminalPath{selector: GetTagRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetTagRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetTagRequest))
}

func (o *GetTagRequest) Clone() *GetTagRequest {
	if o == nil {
		return nil
	}
	result := &GetTagRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &tag.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	result.View = o.View
	return result
}

func (o *GetTagRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetTagRequest) Merge(source *GetTagRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &tag.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetTagRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetTagRequest))
}

func (o *BatchGetTagsRequest) GotenObjectExt() {}

func (o *BatchGetTagsRequest) MakeFullFieldMask() *BatchGetTagsRequest_FieldMask {
	return FullBatchGetTagsRequest_FieldMask()
}

func (o *BatchGetTagsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetTagsRequest_FieldMask()
}

func (o *BatchGetTagsRequest) MakeDiffFieldMask(other *BatchGetTagsRequest) *BatchGetTagsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetTagsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetTagsRequest_FieldMask()
	}

	res := &BatchGetTagsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetTagsRequest_FieldTerminalPath{selector: BatchGetTagsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetTagsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetTagsRequest))
}

func (o *BatchGetTagsRequest) Clone() *BatchGetTagsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetTagsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &tag.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*tag.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &tag.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetTagsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetTagsRequest) Merge(source *BatchGetTagsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &tag.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *tag.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &tag.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetTagsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetTagsRequest))
}

func (o *BatchGetTagsResponse) GotenObjectExt() {}

func (o *BatchGetTagsResponse) MakeFullFieldMask() *BatchGetTagsResponse_FieldMask {
	return FullBatchGetTagsResponse_FieldMask()
}

func (o *BatchGetTagsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetTagsResponse_FieldMask()
}

func (o *BatchGetTagsResponse) MakeDiffFieldMask(other *BatchGetTagsResponse) *BatchGetTagsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetTagsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetTagsResponse_FieldMask()
	}

	res := &BatchGetTagsResponse_FieldMask{}

	if len(o.GetTags()) == len(other.GetTags()) {
		for i, lValue := range o.GetTags() {
			rValue := other.GetTags()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorTags})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorTags})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetTagsResponse_FieldTerminalPath{selector: BatchGetTagsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetTagsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetTagsResponse))
}

func (o *BatchGetTagsResponse) Clone() *BatchGetTagsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetTagsResponse{}
	result.Tags = make([]*tag.Tag, len(o.Tags))
	for i, sourceValue := range o.Tags {
		result.Tags[i] = sourceValue.Clone()
	}
	result.Missing = make([]*tag.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &tag.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetTagsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetTagsResponse) Merge(source *BatchGetTagsResponse) {
	for _, sourceValue := range source.GetTags() {
		exists := false
		for _, currentValue := range o.Tags {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *tag.Tag
			if sourceValue != nil {
				newDstElement = new(tag.Tag)
				newDstElement.Merge(sourceValue)
			}
			o.Tags = append(o.Tags, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *tag.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &tag.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetTagsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetTagsResponse))
}

func (o *ListTagsRequest) GotenObjectExt() {}

func (o *ListTagsRequest) MakeFullFieldMask() *ListTagsRequest_FieldMask {
	return FullListTagsRequest_FieldMask()
}

func (o *ListTagsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListTagsRequest_FieldMask()
}

func (o *ListTagsRequest) MakeDiffFieldMask(other *ListTagsRequest) *ListTagsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListTagsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListTagsRequest_FieldMask()
	}

	res := &ListTagsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListTagsRequest_FieldTerminalPath{selector: ListTagsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListTagsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListTagsRequest))
}

func (o *ListTagsRequest) Clone() *ListTagsRequest {
	if o == nil {
		return nil
	}
	result := &ListTagsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &tag.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &tag.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &tag.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &tag.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	result.View = o.View
	return result
}

func (o *ListTagsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListTagsRequest) Merge(source *ListTagsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &tag.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &tag.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &tag.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &tag.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListTagsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListTagsRequest))
}

func (o *ListTagsResponse) GotenObjectExt() {}

func (o *ListTagsResponse) MakeFullFieldMask() *ListTagsResponse_FieldMask {
	return FullListTagsResponse_FieldMask()
}

func (o *ListTagsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListTagsResponse_FieldMask()
}

func (o *ListTagsResponse) MakeDiffFieldMask(other *ListTagsResponse) *ListTagsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListTagsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListTagsResponse_FieldMask()
	}

	res := &ListTagsResponse_FieldMask{}

	if len(o.GetTags()) == len(other.GetTags()) {
		for i, lValue := range o.GetTags() {
			rValue := other.GetTags()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorTags})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorTags})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListTagsResponse_FieldTerminalPath{selector: ListTagsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListTagsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListTagsResponse))
}

func (o *ListTagsResponse) Clone() *ListTagsResponse {
	if o == nil {
		return nil
	}
	result := &ListTagsResponse{}
	result.Tags = make([]*tag.Tag, len(o.Tags))
	for i, sourceValue := range o.Tags {
		result.Tags[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &tag.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &tag.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListTagsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListTagsResponse) Merge(source *ListTagsResponse) {
	for _, sourceValue := range source.GetTags() {
		exists := false
		for _, currentValue := range o.Tags {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *tag.Tag
			if sourceValue != nil {
				newDstElement = new(tag.Tag)
				newDstElement.Merge(sourceValue)
			}
			o.Tags = append(o.Tags, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &tag.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &tag.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListTagsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListTagsResponse))
}

func (o *WatchTagRequest) GotenObjectExt() {}

func (o *WatchTagRequest) MakeFullFieldMask() *WatchTagRequest_FieldMask {
	return FullWatchTagRequest_FieldMask()
}

func (o *WatchTagRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchTagRequest_FieldMask()
}

func (o *WatchTagRequest) MakeDiffFieldMask(other *WatchTagRequest) *WatchTagRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchTagRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchTagRequest_FieldMask()
	}

	res := &WatchTagRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchTagRequest_FieldTerminalPath{selector: WatchTagRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchTagRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchTagRequest))
}

func (o *WatchTagRequest) Clone() *WatchTagRequest {
	if o == nil {
		return nil
	}
	result := &WatchTagRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &tag.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchTagRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchTagRequest) Merge(source *WatchTagRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &tag.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchTagRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchTagRequest))
}

func (o *WatchTagResponse) GotenObjectExt() {}

func (o *WatchTagResponse) MakeFullFieldMask() *WatchTagResponse_FieldMask {
	return FullWatchTagResponse_FieldMask()
}

func (o *WatchTagResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchTagResponse_FieldMask()
}

func (o *WatchTagResponse) MakeDiffFieldMask(other *WatchTagResponse) *WatchTagResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchTagResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchTagResponse_FieldMask()
	}

	res := &WatchTagResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchTagResponse_FieldTerminalPath{selector: WatchTagResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchTagResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchTagResponse))
}

func (o *WatchTagResponse) Clone() *WatchTagResponse {
	if o == nil {
		return nil
	}
	result := &WatchTagResponse{}
	result.Change = proto.Clone(o.Change).(*tag.TagChange)
	return result
}

func (o *WatchTagResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchTagResponse) Merge(source *WatchTagResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(tag.TagChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchTagResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchTagResponse))
}

func (o *WatchTagsRequest) GotenObjectExt() {}

func (o *WatchTagsRequest) MakeFullFieldMask() *WatchTagsRequest_FieldMask {
	return FullWatchTagsRequest_FieldMask()
}

func (o *WatchTagsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchTagsRequest_FieldMask()
}

func (o *WatchTagsRequest) MakeDiffFieldMask(other *WatchTagsRequest) *WatchTagsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchTagsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchTagsRequest_FieldMask()
	}

	res := &WatchTagsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchTagsRequest_FieldTerminalPath{selector: WatchTagsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchTagsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchTagsRequest))
}

func (o *WatchTagsRequest) Clone() *WatchTagsRequest {
	if o == nil {
		return nil
	}
	result := &WatchTagsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &tag.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &tag.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &tag.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &tag.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchTagsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchTagsRequest) Merge(source *WatchTagsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &tag.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &tag.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &tag.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &tag.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchTagsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchTagsRequest))
}

func (o *WatchTagsResponse) GotenObjectExt() {}

func (o *WatchTagsResponse) MakeFullFieldMask() *WatchTagsResponse_FieldMask {
	return FullWatchTagsResponse_FieldMask()
}

func (o *WatchTagsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchTagsResponse_FieldMask()
}

func (o *WatchTagsResponse) MakeDiffFieldMask(other *WatchTagsResponse) *WatchTagsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchTagsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchTagsResponse_FieldMask()
	}

	res := &WatchTagsResponse_FieldMask{}

	if len(o.GetTagChanges()) == len(other.GetTagChanges()) {
		for i, lValue := range o.GetTagChanges() {
			rValue := other.GetTagChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorTagChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorTagChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchTagsResponse_FieldSubPath{selector: WatchTagsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchTagsResponse_FieldTerminalPath{selector: WatchTagsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchTagsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchTagsResponse))
}

func (o *WatchTagsResponse) Clone() *WatchTagsResponse {
	if o == nil {
		return nil
	}
	result := &WatchTagsResponse{}
	result.TagChanges = make([]*tag.TagChange, len(o.TagChanges))
	for i, sourceValue := range o.TagChanges {
		result.TagChanges[i] = proto.Clone(sourceValue).(*tag.TagChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchTagsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchTagsResponse) Merge(source *WatchTagsResponse) {
	for _, sourceValue := range source.GetTagChanges() {
		exists := false
		for _, currentValue := range o.TagChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *tag.TagChange
			if sourceValue != nil {
				newDstElement = new(tag.TagChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.TagChanges = append(o.TagChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchTagsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchTagsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchTagsResponse))
}

func (o *WatchTagsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchTagsResponse_PageTokenChange) MakeFullFieldMask() *WatchTagsResponse_PageTokenChange_FieldMask {
	return FullWatchTagsResponse_PageTokenChange_FieldMask()
}

func (o *WatchTagsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchTagsResponse_PageTokenChange_FieldMask()
}

func (o *WatchTagsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchTagsResponse_PageTokenChange) *WatchTagsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchTagsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchTagsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchTagsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchTagsResponsePageTokenChange_FieldTerminalPath{selector: WatchTagsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchTagsResponsePageTokenChange_FieldTerminalPath{selector: WatchTagsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchTagsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchTagsResponse_PageTokenChange))
}

func (o *WatchTagsResponse_PageTokenChange) Clone() *WatchTagsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchTagsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &tag.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &tag.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchTagsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchTagsResponse_PageTokenChange) Merge(source *WatchTagsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &tag.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &tag.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchTagsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchTagsResponse_PageTokenChange))
}

func (o *CreateTagRequest) GotenObjectExt() {}

func (o *CreateTagRequest) MakeFullFieldMask() *CreateTagRequest_FieldMask {
	return FullCreateTagRequest_FieldMask()
}

func (o *CreateTagRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateTagRequest_FieldMask()
}

func (o *CreateTagRequest) MakeDiffFieldMask(other *CreateTagRequest) *CreateTagRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateTagRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateTagRequest_FieldMask()
	}

	res := &CreateTagRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateTagRequest_FieldTerminalPath{selector: CreateTagRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetTag().MakeDiffFieldMask(other.GetTag())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateTagRequest_FieldTerminalPath{selector: CreateTagRequest_FieldPathSelectorTag})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateTagRequest_FieldSubPath{selector: CreateTagRequest_FieldPathSelectorTag, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateTagRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateTagRequest))
}

func (o *CreateTagRequest) Clone() *CreateTagRequest {
	if o == nil {
		return nil
	}
	result := &CreateTagRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &tag.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Tag = o.Tag.Clone()
	return result
}

func (o *CreateTagRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateTagRequest) Merge(source *CreateTagRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &tag.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetTag() != nil {
		if o.Tag == nil {
			o.Tag = new(tag.Tag)
		}
		o.Tag.Merge(source.GetTag())
	}
}

func (o *CreateTagRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateTagRequest))
}

func (o *UpdateTagRequest) GotenObjectExt() {}

func (o *UpdateTagRequest) MakeFullFieldMask() *UpdateTagRequest_FieldMask {
	return FullUpdateTagRequest_FieldMask()
}

func (o *UpdateTagRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateTagRequest_FieldMask()
}

func (o *UpdateTagRequest) MakeDiffFieldMask(other *UpdateTagRequest) *UpdateTagRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateTagRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateTagRequest_FieldMask()
	}

	res := &UpdateTagRequest_FieldMask{}
	{
		subMask := o.GetTag().MakeDiffFieldMask(other.GetTag())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorTag})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateTagRequest_FieldSubPath{selector: UpdateTagRequest_FieldPathSelectorTag, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateTagRequest_FieldTerminalPath{selector: UpdateTagRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateTagRequest_FieldSubPath{selector: UpdateTagRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateTagRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateTagRequest))
}

func (o *UpdateTagRequest) Clone() *UpdateTagRequest {
	if o == nil {
		return nil
	}
	result := &UpdateTagRequest{}
	result.Tag = o.Tag.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*tag.Tag_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateTagRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateTagRequest) Merge(source *UpdateTagRequest) {
	if source.GetTag() != nil {
		if o.Tag == nil {
			o.Tag = new(tag.Tag)
		}
		o.Tag.Merge(source.GetTag())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateTagRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateTagRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateTagRequest))
}

func (o *UpdateTagRequest_CAS) GotenObjectExt() {}

func (o *UpdateTagRequest_CAS) MakeFullFieldMask() *UpdateTagRequest_CAS_FieldMask {
	return FullUpdateTagRequest_CAS_FieldMask()
}

func (o *UpdateTagRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateTagRequest_CAS_FieldMask()
}

func (o *UpdateTagRequest_CAS) MakeDiffFieldMask(other *UpdateTagRequest_CAS) *UpdateTagRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateTagRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateTagRequest_CAS_FieldMask()
	}

	res := &UpdateTagRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateTagRequestCAS_FieldTerminalPath{selector: UpdateTagRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateTagRequestCAS_FieldSubPath{selector: UpdateTagRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateTagRequestCAS_FieldTerminalPath{selector: UpdateTagRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateTagRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateTagRequest_CAS))
}

func (o *UpdateTagRequest_CAS) Clone() *UpdateTagRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateTagRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*tag.Tag_FieldMask)
	return result
}

func (o *UpdateTagRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateTagRequest_CAS) Merge(source *UpdateTagRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(tag.Tag)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(tag.Tag_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateTagRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateTagRequest_CAS))
}

func (o *DeleteTagRequest) GotenObjectExt() {}

func (o *DeleteTagRequest) MakeFullFieldMask() *DeleteTagRequest_FieldMask {
	return FullDeleteTagRequest_FieldMask()
}

func (o *DeleteTagRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteTagRequest_FieldMask()
}

func (o *DeleteTagRequest) MakeDiffFieldMask(other *DeleteTagRequest) *DeleteTagRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteTagRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteTagRequest_FieldMask()
	}

	res := &DeleteTagRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteTagRequest_FieldTerminalPath{selector: DeleteTagRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteTagRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteTagRequest))
}

func (o *DeleteTagRequest) Clone() *DeleteTagRequest {
	if o == nil {
		return nil
	}
	result := &DeleteTagRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &tag.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteTagRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteTagRequest) Merge(source *DeleteTagRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &tag.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteTagRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteTagRequest))
}
