// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha/geo_resolver_custom.proto
// DO NOT EDIT!!!

package geo_resolver_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [ResolveGeoIP][ntt.watchdog.v1alpha.ResolveGeoIP]
type ResolveGeoIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Probe_Reference
	Name    *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Address string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
}

func (m *ResolveGeoIPRequest) Reset() {
	*m = ResolveGeoIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ResolveGeoIPRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ResolveGeoIPRequest) ProtoMessage() {}

func (m *ResolveGeoIPRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ResolveGeoIPRequest) GotenMessage() {}

// Deprecated, Use ResolveGeoIPRequest.ProtoReflect.Descriptor instead.
func (*ResolveGeoIPRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ResolveGeoIPRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ResolveGeoIPRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ResolveGeoIPRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ResolveGeoIPRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ResolveGeoIPRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ResolveGeoIPRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ResolveGeoIPRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ResolveGeoIPRequest"))
	}
	m.Name = fv
}

func (m *ResolveGeoIPRequest) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "ResolveGeoIPRequest"))
	}
	m.Address = fv
}

// Response message for method [ResolveGeoIP][ntt.watchdog.v1alpha.ResolveGeoIP]
type ResolveGeoIPResponse struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	Location       *common.Location `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	Isp            string           `protobuf:"bytes,4,opt,name=isp,proto3" json:"isp,omitempty" firestore:"isp"`
	AsInfo         *common.ASInfo   `protobuf:"bytes,5,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	Carrier        *common.Carrier  `protobuf:"bytes,6,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
	AccessProvider string           `protobuf:"bytes,7,opt,name=access_provider,json=accessProvider,proto3" json:"access_provider,omitempty" firestore:"accessProvider"`
}

func (m *ResolveGeoIPResponse) Reset() {
	*m = ResolveGeoIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ResolveGeoIPResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ResolveGeoIPResponse) ProtoMessage() {}

func (m *ResolveGeoIPResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ResolveGeoIPResponse) GotenMessage() {}

// Deprecated, Use ResolveGeoIPResponse.ProtoReflect.Descriptor instead.
func (*ResolveGeoIPResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ResolveGeoIPResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ResolveGeoIPResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ResolveGeoIPResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ResolveGeoIPResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ResolveGeoIPResponse) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ResolveGeoIPResponse) GetIsp() string {
	if m != nil {
		return m.Isp
	}
	return ""
}

func (m *ResolveGeoIPResponse) GetAsInfo() *common.ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *ResolveGeoIPResponse) GetCarrier() *common.Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *ResolveGeoIPResponse) GetAccessProvider() string {
	if m != nil {
		return m.AccessProvider
	}
	return ""
}

func (m *ResolveGeoIPResponse) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "ResolveGeoIPResponse"))
	}
	m.Location = fv
}

func (m *ResolveGeoIPResponse) SetIsp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Isp", "ResolveGeoIPResponse"))
	}
	m.Isp = fv
}

func (m *ResolveGeoIPResponse) SetAsInfo(fv *common.ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "ResolveGeoIPResponse"))
	}
	m.AsInfo = fv
}

func (m *ResolveGeoIPResponse) SetCarrier(fv *common.Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "ResolveGeoIPResponse"))
	}
	m.Carrier = fv
}

func (m *ResolveGeoIPResponse) SetAccessProvider(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessProvider", "ResolveGeoIPResponse"))
	}
	m.AccessProvider = fv
}

// Request message for method
// [BulkResolveGeoIP][ntt.watchdog.v1alpha.BulkResolveGeoIP]
type BulkResolveGeoIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Probe_Reference
	Name    *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Address []string         `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty" firestore:"address"`
}

func (m *BulkResolveGeoIPRequest) Reset() {
	*m = BulkResolveGeoIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BulkResolveGeoIPRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BulkResolveGeoIPRequest) ProtoMessage() {}

func (m *BulkResolveGeoIPRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BulkResolveGeoIPRequest) GotenMessage() {}

// Deprecated, Use BulkResolveGeoIPRequest.ProtoReflect.Descriptor instead.
func (*BulkResolveGeoIPRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{2}
}

func (m *BulkResolveGeoIPRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BulkResolveGeoIPRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BulkResolveGeoIPRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BulkResolveGeoIPRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BulkResolveGeoIPRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *BulkResolveGeoIPRequest) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BulkResolveGeoIPRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "BulkResolveGeoIPRequest"))
	}
	m.Name = fv
}

func (m *BulkResolveGeoIPRequest) SetAddress(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "BulkResolveGeoIPRequest"))
	}
	m.Address = fv
}

// Response message for method
// [BulkResolveGeoIP][ntt.watchdog.v1alpha.BulkResolveGeoIP]
type BulkResolveGeoIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	GeoIpInfo     []*BulkResolveGeoIPResponse_GeoIPData `protobuf:"bytes,1,rep,name=geo_ip_info,json=geoIpInfo,proto3" json:"geo_ip_info,omitempty" firestore:"geoIpInfo"`
}

func (m *BulkResolveGeoIPResponse) Reset() {
	*m = BulkResolveGeoIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BulkResolveGeoIPResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BulkResolveGeoIPResponse) ProtoMessage() {}

func (m *BulkResolveGeoIPResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BulkResolveGeoIPResponse) GotenMessage() {}

// Deprecated, Use BulkResolveGeoIPResponse.ProtoReflect.Descriptor instead.
func (*BulkResolveGeoIPResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{3}
}

func (m *BulkResolveGeoIPResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BulkResolveGeoIPResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BulkResolveGeoIPResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BulkResolveGeoIPResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BulkResolveGeoIPResponse) GetGeoIpInfo() []*BulkResolveGeoIPResponse_GeoIPData {
	if m != nil {
		return m.GeoIpInfo
	}
	return nil
}

func (m *BulkResolveGeoIPResponse) SetGeoIpInfo(fv []*BulkResolveGeoIPResponse_GeoIPData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GeoIpInfo", "BulkResolveGeoIPResponse"))
	}
	m.GeoIpInfo = fv
}

// Request message for method
// [ResolveEnvironment][ntt.watchdog.v1alpha.ResolveEnvironment]
type ResolveEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Address       string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Wlans         []*common.WLAN   `protobuf:"bytes,3,rep,name=wlans,proto3" json:"wlans,omitempty" firestore:"wlans"`
}

func (m *ResolveEnvironmentRequest) Reset() {
	*m = ResolveEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ResolveEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ResolveEnvironmentRequest) ProtoMessage() {}

func (m *ResolveEnvironmentRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ResolveEnvironmentRequest) GotenMessage() {}

// Deprecated, Use ResolveEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*ResolveEnvironmentRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{4}
}

func (m *ResolveEnvironmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ResolveEnvironmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ResolveEnvironmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ResolveEnvironmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ResolveEnvironmentRequest) GetName() *probe.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ResolveEnvironmentRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ResolveEnvironmentRequest) GetWlans() []*common.WLAN {
	if m != nil {
		return m.Wlans
	}
	return nil
}

func (m *ResolveEnvironmentRequest) SetName(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ResolveEnvironmentRequest"))
	}
	m.Name = fv
}

func (m *ResolveEnvironmentRequest) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "ResolveEnvironmentRequest"))
	}
	m.Address = fv
}

func (m *ResolveEnvironmentRequest) SetWlans(fv []*common.WLAN) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wlans", "ResolveEnvironmentRequest"))
	}
	m.Wlans = fv
}

// Response message for method
// [ResolveEnvironment][ntt.watchdog.v1alpha.ResolveEnvironment]
type ResolveEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Location      *common.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	AsInfo        *common.ASInfo   `protobuf:"bytes,2,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	Carrier       *common.Carrier  `protobuf:"bytes,3,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
}

func (m *ResolveEnvironmentResponse) Reset() {
	*m = ResolveEnvironmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ResolveEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ResolveEnvironmentResponse) ProtoMessage() {}

func (m *ResolveEnvironmentResponse) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ResolveEnvironmentResponse) GotenMessage() {}

// Deprecated, Use ResolveEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*ResolveEnvironmentResponse) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{5}
}

func (m *ResolveEnvironmentResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ResolveEnvironmentResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ResolveEnvironmentResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ResolveEnvironmentResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ResolveEnvironmentResponse) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ResolveEnvironmentResponse) GetAsInfo() *common.ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *ResolveEnvironmentResponse) GetCarrier() *common.Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *ResolveEnvironmentResponse) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "ResolveEnvironmentResponse"))
	}
	m.Location = fv
}

func (m *ResolveEnvironmentResponse) SetAsInfo(fv *common.ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "ResolveEnvironmentResponse"))
	}
	m.AsInfo = fv
}

func (m *ResolveEnvironmentResponse) SetCarrier(fv *common.Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "ResolveEnvironmentResponse"))
	}
	m.Carrier = fv
}

type BulkResolveGeoIPResponse_GeoIPData struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	Location       *common.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	Isp            string           `protobuf:"bytes,2,opt,name=isp,proto3" json:"isp,omitempty" firestore:"isp"`
	AsInfo         *common.ASInfo   `protobuf:"bytes,3,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	Carrier        *common.Carrier  `protobuf:"bytes,4,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
	AccessProvider string           `protobuf:"bytes,5,opt,name=access_provider,json=accessProvider,proto3" json:"access_provider,omitempty" firestore:"accessProvider"`
	IpAddress      string           `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" firestore:"ipAddress"`
}

func (m *BulkResolveGeoIPResponse_GeoIPData) Reset() {
	*m = BulkResolveGeoIPResponse_GeoIPData{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BulkResolveGeoIPResponse_GeoIPData) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BulkResolveGeoIPResponse_GeoIPData) ProtoMessage() {}

func (m *BulkResolveGeoIPResponse_GeoIPData) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BulkResolveGeoIPResponse_GeoIPData) GotenMessage() {}

// Deprecated, Use BulkResolveGeoIPResponse_GeoIPData.ProtoReflect.Descriptor instead.
func (*BulkResolveGeoIPResponse_GeoIPData) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP(), []int{3, 0}
}

func (m *BulkResolveGeoIPResponse_GeoIPData) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BulkResolveGeoIPResponse_GeoIPData) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BulkResolveGeoIPResponse_GeoIPData) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BulkResolveGeoIPResponse_GeoIPData) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetIsp() string {
	if m != nil {
		return m.Isp
	}
	return ""
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetAsInfo() *common.ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetCarrier() *common.Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetAccessProvider() string {
	if m != nil {
		return m.AccessProvider
	}
	return ""
}

func (m *BulkResolveGeoIPResponse_GeoIPData) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.Location = fv
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetIsp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Isp", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.Isp = fv
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetAsInfo(fv *common.ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.AsInfo = fv
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetCarrier(fv *common.Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.Carrier = fv
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetAccessProvider(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessProvider", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.AccessProvider = fv
}

func (m *BulkResolveGeoIPResponse_GeoIPData) SetIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddress", "BulkResolveGeoIPResponse_GeoIPData"))
	}
	m.IpAddress = fv
}

var watchdog_proto_v1alpha_geo_resolver_custom_proto preflect.FileDescriptor

var watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDesc = []byte{
	0x0a, 0x30, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xba, 0x9d,
	0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a,
	0x04, 0x52, 0x02, 0x70, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x2d,
	0xfa, 0xde, 0x21, 0x19, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c,
	0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x02,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x1e, 0xfa,
	0xde, 0x21, 0x1a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x22, 0x8d, 0x01,
	0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x31, 0xfa, 0xde, 0x21, 0x1d,
	0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c,
	0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x03,
	0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x67, 0x65,
	0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x49, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x91, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x22, 0xfa, 0xde, 0x21, 0x1e, 0x0a, 0x18,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x22, 0xcf, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x09, 0x12, 0x07,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x52, 0x02, 0x70, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x4c,
	0x41, 0x4e, 0x52, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x33, 0xfa, 0xde, 0x21, 0x1f, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85,
	0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xee,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x3a, 0x24, 0xfa, 0xde, 0x21, 0x20, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x42,
	0xad, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x92, 0x8c, 0xd1, 0x02, 0x57, 0x0a, 0x17, 0x67, 0x65, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42,
	0x16, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x3b, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x43, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescData = watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDesc
)

func watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescData)
	})
	return watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDescData
}

var watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var watchdog_proto_v1alpha_geo_resolver_custom_proto_goTypes = []interface{}{
	(*ResolveGeoIPRequest)(nil),                // 0: ntt.watchdog.v1alpha.ResolveGeoIPRequest
	(*ResolveGeoIPResponse)(nil),               // 1: ntt.watchdog.v1alpha.ResolveGeoIPResponse
	(*BulkResolveGeoIPRequest)(nil),            // 2: ntt.watchdog.v1alpha.BulkResolveGeoIPRequest
	(*BulkResolveGeoIPResponse)(nil),           // 3: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse
	(*ResolveEnvironmentRequest)(nil),          // 4: ntt.watchdog.v1alpha.ResolveEnvironmentRequest
	(*ResolveEnvironmentResponse)(nil),         // 5: ntt.watchdog.v1alpha.ResolveEnvironmentResponse
	(*BulkResolveGeoIPResponse_GeoIPData)(nil), // 6: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.GeoIPData
	(*common.Location)(nil),                    // 7: ntt.watchdog.v1alpha.Location
	(*common.ASInfo)(nil),                      // 8: ntt.watchdog.v1alpha.ASInfo
	(*common.Carrier)(nil),                     // 9: ntt.watchdog.v1alpha.Carrier
	(*common.WLAN)(nil),                        // 10: ntt.watchdog.v1alpha.WLAN
}
var watchdog_proto_v1alpha_geo_resolver_custom_proto_depIdxs = []int32{
	7,  // 0: ntt.watchdog.v1alpha.ResolveGeoIPResponse.location:type_name -> ntt.watchdog.v1alpha.Location
	8,  // 1: ntt.watchdog.v1alpha.ResolveGeoIPResponse.as_info:type_name -> ntt.watchdog.v1alpha.ASInfo
	9,  // 2: ntt.watchdog.v1alpha.ResolveGeoIPResponse.carrier:type_name -> ntt.watchdog.v1alpha.Carrier
	6,  // 3: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.geo_ip_info:type_name -> ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.GeoIPData
	10, // 4: ntt.watchdog.v1alpha.ResolveEnvironmentRequest.wlans:type_name -> ntt.watchdog.v1alpha.WLAN
	7,  // 5: ntt.watchdog.v1alpha.ResolveEnvironmentResponse.location:type_name -> ntt.watchdog.v1alpha.Location
	8,  // 6: ntt.watchdog.v1alpha.ResolveEnvironmentResponse.as_info:type_name -> ntt.watchdog.v1alpha.ASInfo
	9,  // 7: ntt.watchdog.v1alpha.ResolveEnvironmentResponse.carrier:type_name -> ntt.watchdog.v1alpha.Carrier
	7,  // 8: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.GeoIPData.location:type_name -> ntt.watchdog.v1alpha.Location
	8,  // 9: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.GeoIPData.as_info:type_name -> ntt.watchdog.v1alpha.ASInfo
	9,  // 10: ntt.watchdog.v1alpha.BulkResolveGeoIPResponse.GeoIPData.carrier:type_name -> ntt.watchdog.v1alpha.Carrier
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha_geo_resolver_custom_proto_init() }
func watchdog_proto_v1alpha_geo_resolver_custom_proto_init() {
	if watchdog_proto_v1alpha_geo_resolver_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveGeoIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveGeoIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResolveGeoIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResolveGeoIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveEnvironmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResolveGeoIPResponse_GeoIPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha_geo_resolver_custom_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha_geo_resolver_custom_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha_geo_resolver_custom_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha_geo_resolver_custom_proto = out.File
	watchdog_proto_v1alpha_geo_resolver_custom_proto_rawDesc = nil
	watchdog_proto_v1alpha_geo_resolver_custom_proto_goTypes = nil
	watchdog_proto_v1alpha_geo_resolver_custom_proto_depIdxs = nil
}
