// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/activation_custom.proto
// DO NOT EDIT!!!

package activation_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account_key"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_service_account_key.ServiceAccountKey{}
	_ = &probe.Probe{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationRequest_FieldPathSelector
	Get(source *ActivationRequest) []interface{}
	GetSingle(source *ActivationRequest) (interface{}, bool)
	ClearValue(item *ActivationRequest)

	// Those methods build corresponding ActivationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationRequest_FieldPathArrayItemValue
}

type ActivationRequest_FieldPathSelector int32

const (
	ActivationRequest_FieldPathSelectorActivate          ActivationRequest_FieldPathSelector = 0
	ActivationRequest_FieldPathSelectorConfirmActivation ActivationRequest_FieldPathSelector = 1
)

func (s ActivationRequest_FieldPathSelector) String() string {
	switch s {
	case ActivationRequest_FieldPathSelectorActivate:
		return "activate"
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return "confirm_activation"
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", s))
	}
}

func BuildActivationRequest_FieldPath(fp gotenobject.RawFieldPath) (ActivationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "activate":
			return &ActivationRequest_FieldTerminalPath{selector: ActivationRequest_FieldPathSelectorActivate}, nil
		case "confirm_activation", "confirmActivation", "confirm-activation":
			return &ActivationRequest_FieldTerminalPath{selector: ActivationRequest_FieldPathSelectorConfirmActivation}, nil
		}
	} else {
		switch fp[0] {
		case "activate":
			if subpath, err := BuildActivationRequestActivate_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationRequest_FieldSubPath{selector: ActivationRequest_FieldPathSelectorActivate, subPath: subpath}, nil
			}
		case "confirm_activation", "confirmActivation", "confirm-activation":
			if subpath, err := BuildActivationRequestConfirmActivation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationRequest_FieldSubPath{selector: ActivationRequest_FieldPathSelectorConfirmActivation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationRequest", fp)
}

func ParseActivationRequest_FieldPath(rawField string) (ActivationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationRequest_FieldPath(fp)
}

func MustParseActivationRequest_FieldPath(rawField string) ActivationRequest_FieldPath {
	fp, err := ParseActivationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationRequest_FieldTerminalPath struct {
	selector ActivationRequest_FieldPathSelector
}

var _ ActivationRequest_FieldPath = (*ActivationRequest_FieldTerminalPath)(nil)

func (fp *ActivationRequest_FieldTerminalPath) Selector() ActivationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationRequest
func (fp *ActivationRequest_FieldTerminalPath) Get(source *ActivationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ActivationRequest_FieldPathSelectorActivate:
			if source, ok := source.Msg.(*ActivationRequest_Activate_); ok && source != nil {
				if source.Activate != nil {
					values = append(values, source.Activate)
				}
			}
		case ActivationRequest_FieldPathSelectorConfirmActivation:
			if source, ok := source.Msg.(*ActivationRequest_ConfirmActivation_); ok && source != nil {
				if source.ConfirmActivation != nil {
					values = append(values, source.ConfirmActivation)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationRequest))
}

// GetSingle returns value pointed by specific field of from source ActivationRequest
func (fp *ActivationRequest_FieldTerminalPath) GetSingle(source *ActivationRequest) (interface{}, bool) {
	switch fp.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		res := source.GetActivate()
		return res, res != nil
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		res := source.GetConfirmActivation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
	}
}

func (fp *ActivationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationRequest))
}

// GetDefault returns a default value of the field type
func (fp *ActivationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		return (*ActivationRequest_Activate)(nil)
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return (*ActivationRequest_ConfirmActivation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
	}
}

func (fp *ActivationRequest_FieldTerminalPath) ClearValue(item *ActivationRequest) {
	if item != nil {
		switch fp.selector {
		case ActivationRequest_FieldPathSelectorActivate:
			if item, ok := item.Msg.(*ActivationRequest_Activate_); ok {
				item.Activate = nil
			}
		case ActivationRequest_FieldPathSelectorConfirmActivation:
			if item, ok := item.Msg.(*ActivationRequest_ConfirmActivation_); ok {
				item.ConfirmActivation = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
		}
	}
}

func (fp *ActivationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ActivationRequest_FieldTerminalPath) WithIValue(value interface{}) ActivationRequest_FieldPathValue {
	switch fp.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		return &ActivationRequest_FieldTerminalPathValue{ActivationRequest_FieldTerminalPath: *fp, value: value.(*ActivationRequest_Activate)}
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return &ActivationRequest_FieldTerminalPathValue{ActivationRequest_FieldTerminalPath: *fp, value: value.(*ActivationRequest_ConfirmActivation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
	}
}

func (fp *ActivationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationRequest_FieldPathArrayOfValues {
	fpaov := &ActivationRequest_FieldTerminalPathArrayOfValues{ActivationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		return &ActivationRequest_FieldTerminalPathArrayOfValues{ActivationRequest_FieldTerminalPath: *fp, values: values.([]*ActivationRequest_Activate)}
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return &ActivationRequest_FieldTerminalPathArrayOfValues{ActivationRequest_FieldTerminalPath: *fp, values: values.([]*ActivationRequest_ConfirmActivation)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fp.selector))
	}
}

func (fp *ActivationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ActivationRequest_FieldSubPath struct {
	selector ActivationRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ActivationRequest_FieldPath = (*ActivationRequest_FieldSubPath)(nil)

func (fps *ActivationRequest_FieldSubPath) Selector() ActivationRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ActivationRequest_FieldSubPath) AsActivateSubPath() (ActivationRequestActivate_FieldPath, bool) {
	res, ok := fps.subPath.(ActivationRequestActivate_FieldPath)
	return res, ok
}
func (fps *ActivationRequest_FieldSubPath) AsConfirmActivationSubPath() (ActivationRequestConfirmActivation_FieldPath, bool) {
	res, ok := fps.subPath.(ActivationRequestConfirmActivation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ActivationRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ActivationRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ActivationRequest
func (fps *ActivationRequest_FieldSubPath) Get(source *ActivationRequest) (values []interface{}) {
	if asActivateFieldPath, ok := fps.AsActivateSubPath(); ok {
		values = append(values, asActivateFieldPath.Get(source.GetActivate())...)
	} else if asConfirmActivationFieldPath, ok := fps.AsConfirmActivationSubPath(); ok {
		values = append(values, asConfirmActivationFieldPath.Get(source.GetConfirmActivation())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fps.selector))
	}
	return
}

func (fps *ActivationRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ActivationRequest))
}

// GetSingle returns value of selected field from source ActivationRequest
func (fps *ActivationRequest_FieldSubPath) GetSingle(source *ActivationRequest) (interface{}, bool) {
	switch fps.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		if source.GetActivate() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivate())
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		if source.GetConfirmActivation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConfirmActivation())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fps.selector))
	}
}

func (fps *ActivationRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ActivationRequest))
}

// GetDefault returns a default value of the field type
func (fps *ActivationRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ActivationRequest_FieldSubPath) ClearValue(item *ActivationRequest) {
	if item != nil {
		switch fps.selector {
		case ActivationRequest_FieldPathSelectorActivate:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ActivationRequest_Activate_); ok {
					fps.subPath.ClearValueRaw(item.Activate)
				}
			}
		case ActivationRequest_FieldPathSelectorConfirmActivation:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ActivationRequest_ConfirmActivation_); ok {
					fps.subPath.ClearValueRaw(item.ConfirmActivation)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fps.selector))
		}
	}
}

func (fps *ActivationRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ActivationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ActivationRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ActivationRequest_FieldSubPath) WithIValue(value interface{}) ActivationRequest_FieldPathValue {
	return &ActivationRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ActivationRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ActivationRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ActivationRequest_FieldPathArrayOfValues {
	return &ActivationRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ActivationRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ActivationRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ActivationRequest_FieldPathArrayItemValue {
	return &ActivationRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ActivationRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ActivationRequest_FieldPathValue allows storing values for ActivationRequest fields according to their type
type ActivationRequest_FieldPathValue interface {
	ActivationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationRequest)
	CompareWith(*ActivationRequest) (cmp int, comparable bool)
}

func ParseActivationRequest_FieldPathValue(pathStr, valueStr string) (ActivationRequest_FieldPathValue, error) {
	fp, err := ParseActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationRequest_FieldPathValue), nil
}

func MustParseActivationRequest_FieldPathValue(pathStr, valueStr string) ActivationRequest_FieldPathValue {
	fpv, err := ParseActivationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationRequest_FieldTerminalPathValue struct {
	ActivationRequest_FieldTerminalPath
	value interface{}
}

var _ ActivationRequest_FieldPathValue = (*ActivationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ActivationRequest' as interface{}
func (fpv *ActivationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ActivationRequest_FieldTerminalPathValue) AsActivateValue() (*ActivationRequest_Activate, bool) {
	res, ok := fpv.value.(*ActivationRequest_Activate)
	return res, ok
}
func (fpv *ActivationRequest_FieldTerminalPathValue) AsConfirmActivationValue() (*ActivationRequest_ConfirmActivation, bool) {
	res, ok := fpv.value.(*ActivationRequest_ConfirmActivation)
	return res, ok
}

// SetTo stores value for selected field for object ActivationRequest
func (fpv *ActivationRequest_FieldTerminalPathValue) SetTo(target **ActivationRequest) {
	if *target == nil {
		*target = new(ActivationRequest)
	}
	switch fpv.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		if _, ok := (*target).Msg.(*ActivationRequest_Activate_); !ok {
			(*target).Msg = &ActivationRequest_Activate_{}
		}
		(*target).Msg.(*ActivationRequest_Activate_).Activate = fpv.value.(*ActivationRequest_Activate)
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		if _, ok := (*target).Msg.(*ActivationRequest_ConfirmActivation_); !ok {
			(*target).Msg = &ActivationRequest_ConfirmActivation_{}
		}
		(*target).Msg.(*ActivationRequest_ConfirmActivation_).ConfirmActivation = fpv.value.(*ActivationRequest_ConfirmActivation)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fpv.selector))
	}
}

func (fpv *ActivationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationRequest_FieldTerminalPathValue' with the value under path in 'ActivationRequest'.
func (fpv *ActivationRequest_FieldTerminalPathValue) CompareWith(source *ActivationRequest) (int, bool) {
	switch fpv.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		return 0, false
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fpv.selector))
	}
}

func (fpv *ActivationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationRequest))
}

type ActivationRequest_FieldSubPathValue struct {
	ActivationRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ActivationRequest_FieldPathValue = (*ActivationRequest_FieldSubPathValue)(nil)

func (fpvs *ActivationRequest_FieldSubPathValue) AsActivatePathValue() (ActivationRequestActivate_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ActivationRequestActivate_FieldPathValue)
	return res, ok
}
func (fpvs *ActivationRequest_FieldSubPathValue) AsConfirmActivationPathValue() (ActivationRequestConfirmActivation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ActivationRequestConfirmActivation_FieldPathValue)
	return res, ok
}

func (fpvs *ActivationRequest_FieldSubPathValue) SetTo(target **ActivationRequest) {
	if *target == nil {
		*target = new(ActivationRequest)
	}
	switch fpvs.Selector() {
	case ActivationRequest_FieldPathSelectorActivate:
		if _, ok := (*target).Msg.(*ActivationRequest_Activate_); !ok {
			(*target).Msg = &ActivationRequest_Activate_{}
		}
		fpvs.subPathValue.(ActivationRequestActivate_FieldPathValue).SetTo(&(*target).Msg.(*ActivationRequest_Activate_).Activate)
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		if _, ok := (*target).Msg.(*ActivationRequest_ConfirmActivation_); !ok {
			(*target).Msg = &ActivationRequest_ConfirmActivation_{}
		}
		fpvs.subPathValue.(ActivationRequestConfirmActivation_FieldPathValue).SetTo(&(*target).Msg.(*ActivationRequest_ConfirmActivation_).ConfirmActivation)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ActivationRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ActivationRequest_FieldSubPathValue) CompareWith(source *ActivationRequest) (int, bool) {
	switch fpvs.Selector() {
	case ActivationRequest_FieldPathSelectorActivate:
		return fpvs.subPathValue.(ActivationRequestActivate_FieldPathValue).CompareWith(source.GetActivate())
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return fpvs.subPathValue.(ActivationRequestConfirmActivation_FieldPathValue).CompareWith(source.GetConfirmActivation())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ActivationRequest))
}

// ActivationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ActivationRequest according to their type
// Present only for array (repeated) types.
type ActivationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationRequest_FieldPath
	ContainsValue(*ActivationRequest) bool
}

// ParseActivationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationRequest_FieldPathArrayItemValue), nil
}

func MustParseActivationRequest_FieldPathArrayItemValue(pathStr, valueStr string) ActivationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationRequest_FieldTerminalPathArrayItemValue struct {
	ActivationRequest_FieldTerminalPath
	value interface{}
}

var _ ActivationRequest_FieldPathArrayItemValue = (*ActivationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationRequest as interface{}
func (fpaiv *ActivationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationRequest'
func (fpaiv *ActivationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationRequest) bool {
	slice := fpaiv.ActivationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ActivationRequest_FieldSubPathArrayItemValue struct {
	ActivationRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ActivationRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ActivationRequest_FieldSubPathArrayItemValue) AsActivatePathItemValue() (ActivationRequestActivate_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ActivationRequestActivate_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ActivationRequest_FieldSubPathArrayItemValue) AsConfirmActivationPathItemValue() (ActivationRequestConfirmActivation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ActivationRequestConfirmActivation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationRequest'
func (fpaivs *ActivationRequest_FieldSubPathArrayItemValue) ContainsValue(source *ActivationRequest) bool {
	switch fpaivs.Selector() {
	case ActivationRequest_FieldPathSelectorActivate:
		return fpaivs.subPathItemValue.(ActivationRequestActivate_FieldPathArrayItemValue).ContainsValue(source.GetActivate())
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		return fpaivs.subPathItemValue.(ActivationRequestConfirmActivation_FieldPathArrayItemValue).ContainsValue(source.GetConfirmActivation())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest: %d", fpaivs.Selector()))
	}
}

// ActivationRequest_FieldPathArrayOfValues allows storing slice of values for ActivationRequest fields according to their type
type ActivationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationRequest_FieldPath
}

func ParseActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationRequest_FieldPathArrayOfValues), nil
}

func MustParseActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationRequest_FieldTerminalPathArrayOfValues struct {
	ActivationRequest_FieldTerminalPath
	values interface{}
}

var _ ActivationRequest_FieldPathArrayOfValues = (*ActivationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ActivationRequest_FieldPathSelectorActivate:
		for _, v := range fpaov.values.([]*ActivationRequest_Activate) {
			values = append(values, v)
		}
	case ActivationRequest_FieldPathSelectorConfirmActivation:
		for _, v := range fpaov.values.([]*ActivationRequest_ConfirmActivation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ActivationRequest_FieldTerminalPathArrayOfValues) AsActivateArrayOfValues() ([]*ActivationRequest_Activate, bool) {
	res, ok := fpaov.values.([]*ActivationRequest_Activate)
	return res, ok
}
func (fpaov *ActivationRequest_FieldTerminalPathArrayOfValues) AsConfirmActivationArrayOfValues() ([]*ActivationRequest_ConfirmActivation, bool) {
	res, ok := fpaov.values.([]*ActivationRequest_ConfirmActivation)
	return res, ok
}

type ActivationRequest_FieldSubPathArrayOfValues struct {
	ActivationRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ActivationRequest_FieldPathArrayOfValues = (*ActivationRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ActivationRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ActivationRequest_FieldSubPathArrayOfValues) AsActivatePathArrayOfValues() (ActivationRequestActivate_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ActivationRequestActivate_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ActivationRequest_FieldSubPathArrayOfValues) AsConfirmActivationPathArrayOfValues() (ActivationRequestConfirmActivation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ActivationRequestConfirmActivation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationRequestActivate_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationRequestActivate_FieldPathSelector
	Get(source *ActivationRequest_Activate) []interface{}
	GetSingle(source *ActivationRequest_Activate) (interface{}, bool)
	ClearValue(item *ActivationRequest_Activate)

	// Those methods build corresponding ActivationRequestActivate_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationRequestActivate_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationRequestActivate_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationRequestActivate_FieldPathArrayItemValue
}

type ActivationRequestActivate_FieldPathSelector int32

const (
	ActivationRequestActivate_FieldPathSelectorToken        ActivationRequestActivate_FieldPathSelector = 0
	ActivationRequestActivate_FieldPathSelectorClientCookie ActivationRequestActivate_FieldPathSelector = 1
	ActivationRequestActivate_FieldPathSelectorProbe        ActivationRequestActivate_FieldPathSelector = 2
	ActivationRequestActivate_FieldPathSelectorMetadata     ActivationRequestActivate_FieldPathSelector = 3
)

func (s ActivationRequestActivate_FieldPathSelector) String() string {
	switch s {
	case ActivationRequestActivate_FieldPathSelectorToken:
		return "token"
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		return "client_cookie"
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return "probe"
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", s))
	}
}

func BuildActivationRequestActivate_FieldPath(fp gotenobject.RawFieldPath) (ActivationRequestActivate_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationRequest_Activate")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "token":
			return &ActivationRequestActivate_FieldTerminalPath{selector: ActivationRequestActivate_FieldPathSelectorToken}, nil
		case "client_cookie", "clientCookie", "client-cookie":
			return &ActivationRequestActivate_FieldTerminalPath{selector: ActivationRequestActivate_FieldPathSelectorClientCookie}, nil
		case "probe":
			return &ActivationRequestActivate_FieldTerminalPath{selector: ActivationRequestActivate_FieldPathSelectorProbe}, nil
		case "metadata":
			return &ActivationRequestActivate_FieldTerminalPath{selector: ActivationRequestActivate_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "probe":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationRequestActivate_FieldSubPath{selector: ActivationRequestActivate_FieldPathSelectorProbe, subPath: subpath}, nil
			}
		case "metadata":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ActivationRequest_Activate)", fp)
			}
			return &ActivationRequestActivate_FieldPathMap{selector: ActivationRequestActivate_FieldPathSelectorMetadata, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationRequest_Activate", fp)
}

func ParseActivationRequestActivate_FieldPath(rawField string) (ActivationRequestActivate_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationRequestActivate_FieldPath(fp)
}

func MustParseActivationRequestActivate_FieldPath(rawField string) ActivationRequestActivate_FieldPath {
	fp, err := ParseActivationRequestActivate_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationRequestActivate_FieldTerminalPath struct {
	selector ActivationRequestActivate_FieldPathSelector
}

var _ ActivationRequestActivate_FieldPath = (*ActivationRequestActivate_FieldTerminalPath)(nil)

func (fp *ActivationRequestActivate_FieldTerminalPath) Selector() ActivationRequestActivate_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationRequestActivate_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationRequestActivate_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationRequest_Activate
func (fp *ActivationRequestActivate_FieldTerminalPath) Get(source *ActivationRequest_Activate) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ActivationRequestActivate_FieldPathSelectorToken:
			values = append(values, source.Token)
		case ActivationRequestActivate_FieldPathSelectorClientCookie:
			values = append(values, source.ClientCookie)
		case ActivationRequestActivate_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case ActivationRequestActivate_FieldPathSelectorMetadata:
			values = append(values, source.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationRequestActivate_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationRequest_Activate))
}

// GetSingle returns value pointed by specific field of from source ActivationRequest_Activate
func (fp *ActivationRequestActivate_FieldTerminalPath) GetSingle(source *ActivationRequest_Activate) (interface{}, bool) {
	switch fp.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		return source.GetToken(), source != nil
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		return source.GetClientCookie(), source != nil
	case ActivationRequestActivate_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
	}
}

func (fp *ActivationRequestActivate_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationRequest_Activate))
}

// GetDefault returns a default value of the field type
func (fp *ActivationRequestActivate_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		return ""
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		return ""
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return (*probe.Probe)(nil)
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
	}
}

func (fp *ActivationRequestActivate_FieldTerminalPath) ClearValue(item *ActivationRequest_Activate) {
	if item != nil {
		switch fp.selector {
		case ActivationRequestActivate_FieldPathSelectorToken:
			item.Token = ""
		case ActivationRequestActivate_FieldPathSelectorClientCookie:
			item.ClientCookie = ""
		case ActivationRequestActivate_FieldPathSelectorProbe:
			item.Probe = nil
		case ActivationRequestActivate_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
		}
	}
}

func (fp *ActivationRequestActivate_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationRequest_Activate))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationRequestActivate_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ActivationRequestActivate_FieldPathSelectorToken ||
		fp.selector == ActivationRequestActivate_FieldPathSelectorClientCookie ||
		fp.selector == ActivationRequestActivate_FieldPathSelectorMetadata
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithIValue(value interface{}) ActivationRequestActivate_FieldPathValue {
	switch fp.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		return &ActivationRequestActivate_FieldTerminalPathValue{ActivationRequestActivate_FieldTerminalPath: *fp, value: value.(string)}
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		return &ActivationRequestActivate_FieldTerminalPathValue{ActivationRequestActivate_FieldTerminalPath: *fp, value: value.(string)}
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return &ActivationRequestActivate_FieldTerminalPathValue{ActivationRequestActivate_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return &ActivationRequestActivate_FieldTerminalPathValue{ActivationRequestActivate_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
	}
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationRequestActivate_FieldPathArrayOfValues {
	fpaov := &ActivationRequestActivate_FieldTerminalPathArrayOfValues{ActivationRequestActivate_FieldTerminalPath: *fp}
	switch fp.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		return &ActivationRequestActivate_FieldTerminalPathArrayOfValues{ActivationRequestActivate_FieldTerminalPath: *fp, values: values.([]string)}
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		return &ActivationRequestActivate_FieldTerminalPathArrayOfValues{ActivationRequestActivate_FieldTerminalPath: *fp, values: values.([]string)}
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return &ActivationRequestActivate_FieldTerminalPathArrayOfValues{ActivationRequestActivate_FieldTerminalPath: *fp, values: values.([]*probe.Probe)}
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return &ActivationRequestActivate_FieldTerminalPathArrayOfValues{ActivationRequestActivate_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationRequestActivate_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fp.selector))
	}
}

func (fp *ActivationRequestActivate_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ActivationRequestActivate_FieldPathMap struct {
	key      string
	selector ActivationRequestActivate_FieldPathSelector
}

var _ ActivationRequestActivate_FieldPath = (*ActivationRequestActivate_FieldPathMap)(nil)

func (fpm *ActivationRequestActivate_FieldPathMap) Selector() ActivationRequestActivate_FieldPathSelector {
	return fpm.selector
}

func (fpm *ActivationRequestActivate_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ActivationRequestActivate_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ActivationRequestActivate_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ActivationRequest_Activate
func (fpm *ActivationRequestActivate_FieldPathMap) Get(source *ActivationRequest_Activate) (values []interface{}) {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		if value, ok := source.GetMetadata()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
	return
}

func (fpm *ActivationRequestActivate_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ActivationRequest_Activate))
}

// GetSingle returns value by selected field map key from source ActivationRequest_Activate
func (fpm *ActivationRequestActivate_FieldPathMap) GetSingle(source *ActivationRequest_Activate) (interface{}, bool) {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		res, ok := source.GetMetadata()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ActivationRequest_Activate))
}

// GetDefault returns a default value of the field type
func (fpm *ActivationRequestActivate_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) ClearValue(item *ActivationRequest_Activate) {
	if item != nil {
		switch fpm.selector {
		case ActivationRequestActivate_FieldPathSelectorMetadata:
			delete(item.Metadata, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
		}
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ActivationRequest_Activate))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ActivationRequestActivate_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithIValue(value interface{}) ActivationRequestActivate_FieldPathValue {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return &ActivationRequestActivate_FieldPathMapValue{ActivationRequestActivate_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithIArrayOfValues(values interface{}) ActivationRequestActivate_FieldPathArrayOfValues {
	switch fpm.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return &ActivationRequestActivate_FieldPathMapArrayOfValues{ActivationRequestActivate_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpm.selector))
	}
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithIArrayItemValue(value interface{}) ActivationRequestActivate_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ActivationRequestActivate_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type ActivationRequestActivate_FieldSubPath struct {
	selector ActivationRequestActivate_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ActivationRequestActivate_FieldPath = (*ActivationRequestActivate_FieldSubPath)(nil)

func (fps *ActivationRequestActivate_FieldSubPath) Selector() ActivationRequestActivate_FieldPathSelector {
	return fps.selector
}
func (fps *ActivationRequestActivate_FieldSubPath) AsProbeSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ActivationRequestActivate_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ActivationRequestActivate_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ActivationRequest_Activate
func (fps *ActivationRequestActivate_FieldSubPath) Get(source *ActivationRequest_Activate) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbeSubPath(); ok {
		values = append(values, asProbeFieldPath.Get(source.GetProbe())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fps.selector))
	}
	return
}

func (fps *ActivationRequestActivate_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ActivationRequest_Activate))
}

// GetSingle returns value of selected field from source ActivationRequest_Activate
func (fps *ActivationRequestActivate_FieldSubPath) GetSingle(source *ActivationRequest_Activate) (interface{}, bool) {
	switch fps.selector {
	case ActivationRequestActivate_FieldPathSelectorProbe:
		if source.GetProbe() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fps.selector))
	}
}

func (fps *ActivationRequestActivate_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ActivationRequest_Activate))
}

// GetDefault returns a default value of the field type
func (fps *ActivationRequestActivate_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ActivationRequestActivate_FieldSubPath) ClearValue(item *ActivationRequest_Activate) {
	if item != nil {
		switch fps.selector {
		case ActivationRequestActivate_FieldPathSelectorProbe:
			fps.subPath.ClearValueRaw(item.Probe)
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fps.selector))
		}
	}
}

func (fps *ActivationRequestActivate_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ActivationRequest_Activate))
}

// IsLeaf - whether field path is holds simple value
func (fps *ActivationRequestActivate_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ActivationRequestActivate_FieldSubPath) WithIValue(value interface{}) ActivationRequestActivate_FieldPathValue {
	return &ActivationRequestActivate_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ActivationRequestActivate_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ActivationRequestActivate_FieldSubPath) WithIArrayOfValues(values interface{}) ActivationRequestActivate_FieldPathArrayOfValues {
	return &ActivationRequestActivate_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ActivationRequestActivate_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ActivationRequestActivate_FieldSubPath) WithIArrayItemValue(value interface{}) ActivationRequestActivate_FieldPathArrayItemValue {
	return &ActivationRequestActivate_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ActivationRequestActivate_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ActivationRequestActivate_FieldPathValue allows storing values for Activate fields according to their type
type ActivationRequestActivate_FieldPathValue interface {
	ActivationRequestActivate_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationRequest_Activate)
	CompareWith(*ActivationRequest_Activate) (cmp int, comparable bool)
}

func ParseActivationRequestActivate_FieldPathValue(pathStr, valueStr string) (ActivationRequestActivate_FieldPathValue, error) {
	fp, err := ParseActivationRequestActivate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activate field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationRequestActivate_FieldPathValue), nil
}

func MustParseActivationRequestActivate_FieldPathValue(pathStr, valueStr string) ActivationRequestActivate_FieldPathValue {
	fpv, err := ParseActivationRequestActivate_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationRequestActivate_FieldTerminalPathValue struct {
	ActivationRequestActivate_FieldTerminalPath
	value interface{}
}

var _ ActivationRequestActivate_FieldPathValue = (*ActivationRequestActivate_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Activate' as interface{}
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) AsTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) AsClientCookieValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) AsProbeValue() (*probe.Probe, bool) {
	res, ok := fpv.value.(*probe.Probe)
	return res, ok
}
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) AsMetadataValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object Activate
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) SetTo(target **ActivationRequest_Activate) {
	if *target == nil {
		*target = new(ActivationRequest_Activate)
	}
	switch fpv.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		(*target).Token = fpv.value.(string)
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		(*target).ClientCookie = fpv.value.(string)
	case ActivationRequestActivate_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Probe)
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpv.selector))
	}
}

func (fpv *ActivationRequestActivate_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest_Activate)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationRequestActivate_FieldTerminalPathValue' with the value under path in 'ActivationRequest_Activate'.
func (fpv *ActivationRequestActivate_FieldTerminalPathValue) CompareWith(source *ActivationRequest_Activate) (int, bool) {
	switch fpv.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientCookie()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return 0, false
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpv.selector))
	}
}

func (fpv *ActivationRequestActivate_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationRequest_Activate))
}

type ActivationRequestActivate_FieldPathMapValue struct {
	ActivationRequestActivate_FieldPathMap
	value interface{}
}

var _ ActivationRequestActivate_FieldPathValue = (*ActivationRequestActivate_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Activate as interface{}
func (fpmv *ActivationRequestActivate_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ActivationRequestActivate_FieldPathMapValue) AsMetadataElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in Activate
func (fpmv *ActivationRequestActivate_FieldPathMapValue) SetTo(target **ActivationRequest_Activate) {
	if *target == nil {
		*target = new(ActivationRequest_Activate)
	}
	switch fpmv.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		if (*target).Metadata == nil {
			(*target).Metadata = make(map[string]string)
		}
		(*target).Metadata[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpmv.selector))
	}
}

func (fpmv *ActivationRequestActivate_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest_Activate)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationRequestActivate_FieldPathMapValue' with the value under path in 'ActivationRequest_Activate'.
func (fpmv *ActivationRequestActivate_FieldPathMapValue) CompareWith(source *ActivationRequest_Activate) (int, bool) {
	switch fpmv.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		leftValue := fpmv.value.(string)
		rightValue := source.GetMetadata()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpmv.selector))
	}
}

func (fpmv *ActivationRequestActivate_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ActivationRequest_Activate))
}

type ActivationRequestActivate_FieldSubPathValue struct {
	ActivationRequestActivate_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ActivationRequestActivate_FieldPathValue = (*ActivationRequestActivate_FieldSubPathValue)(nil)

func (fpvs *ActivationRequestActivate_FieldSubPathValue) AsProbePathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}

func (fpvs *ActivationRequestActivate_FieldSubPathValue) SetTo(target **ActivationRequest_Activate) {
	if *target == nil {
		*target = new(ActivationRequest_Activate)
	}
	switch fpvs.Selector() {
	case ActivationRequestActivate_FieldPathSelectorProbe:
		fpvs.subPathValue.(probe.Probe_FieldPathValue).SetTo(&(*target).Probe)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationRequestActivate_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest_Activate)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ActivationRequestActivate_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ActivationRequestActivate_FieldSubPathValue) CompareWith(source *ActivationRequest_Activate) (int, bool) {
	switch fpvs.Selector() {
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return fpvs.subPathValue.(probe.Probe_FieldPathValue).CompareWith(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationRequestActivate_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ActivationRequest_Activate))
}

// ActivationRequestActivate_FieldPathArrayItemValue allows storing single item in Path-specific values for Activate according to their type
// Present only for array (repeated) types.
type ActivationRequestActivate_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationRequestActivate_FieldPath
	ContainsValue(*ActivationRequest_Activate) bool
}

// ParseActivationRequestActivate_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationRequestActivate_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationRequestActivate_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationRequestActivate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activate field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationRequestActivate_FieldPathArrayItemValue), nil
}

func MustParseActivationRequestActivate_FieldPathArrayItemValue(pathStr, valueStr string) ActivationRequestActivate_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationRequestActivate_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationRequestActivate_FieldTerminalPathArrayItemValue struct {
	ActivationRequestActivate_FieldTerminalPath
	value interface{}
}

var _ ActivationRequestActivate_FieldPathArrayItemValue = (*ActivationRequestActivate_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationRequest_Activate as interface{}
func (fpaiv *ActivationRequestActivate_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationRequestActivate_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationRequest_Activate) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationRequestActivate_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationRequest_Activate))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Activate'
func (fpaiv *ActivationRequestActivate_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationRequest_Activate) bool {
	slice := fpaiv.ActivationRequestActivate_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ActivationRequestActivate_FieldSubPathArrayItemValue struct {
	ActivationRequestActivate_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ActivationRequestActivate_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ActivationRequestActivate_FieldSubPathArrayItemValue) AsProbePathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Activate'
func (fpaivs *ActivationRequestActivate_FieldSubPathArrayItemValue) ContainsValue(source *ActivationRequest_Activate) bool {
	switch fpaivs.Selector() {
	case ActivationRequestActivate_FieldPathSelectorProbe:
		return fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue).ContainsValue(source.GetProbe())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_Activate: %d", fpaivs.Selector()))
	}
}

// ActivationRequestActivate_FieldPathArrayOfValues allows storing slice of values for Activate fields according to their type
type ActivationRequestActivate_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationRequestActivate_FieldPath
}

func ParseActivationRequestActivate_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationRequestActivate_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationRequestActivate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activate field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationRequestActivate_FieldPathArrayOfValues), nil
}

func MustParseActivationRequestActivate_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationRequestActivate_FieldPathArrayOfValues {
	fpaov, err := ParseActivationRequestActivate_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationRequestActivate_FieldTerminalPathArrayOfValues struct {
	ActivationRequestActivate_FieldTerminalPath
	values interface{}
}

var _ ActivationRequestActivate_FieldPathArrayOfValues = (*ActivationRequestActivate_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationRequestActivate_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ActivationRequestActivate_FieldPathSelectorToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ActivationRequestActivate_FieldPathSelectorClientCookie:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ActivationRequestActivate_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Probe) {
			values = append(values, v)
		}
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ActivationRequestActivate_FieldTerminalPathArrayOfValues) AsTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ActivationRequestActivate_FieldTerminalPathArrayOfValues) AsClientCookieArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ActivationRequestActivate_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Probe, bool) {
	res, ok := fpaov.values.([]*probe.Probe)
	return res, ok
}
func (fpaov *ActivationRequestActivate_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type ActivationRequestActivate_FieldPathMapArrayOfValues struct {
	ActivationRequestActivate_FieldPathMap
	values interface{}
}

var _ ActivationRequestActivate_FieldPathArrayOfValues = (*ActivationRequestActivate_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ActivationRequestActivate_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ActivationRequestActivate_FieldPathSelectorMetadata:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ActivationRequestActivate_FieldPathMapArrayOfValues) AsMetadataArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type ActivationRequestActivate_FieldSubPathArrayOfValues struct {
	ActivationRequestActivate_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ActivationRequestActivate_FieldPathArrayOfValues = (*ActivationRequestActivate_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ActivationRequestActivate_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ActivationRequestActivate_FieldSubPathArrayOfValues) AsProbePathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationRequestConfirmActivation_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationRequestConfirmActivation_FieldPathSelector
	Get(source *ActivationRequest_ConfirmActivation) []interface{}
	GetSingle(source *ActivationRequest_ConfirmActivation) (interface{}, bool)
	ClearValue(item *ActivationRequest_ConfirmActivation)

	// Those methods build corresponding ActivationRequestConfirmActivation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationRequestConfirmActivation_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationRequestConfirmActivation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationRequestConfirmActivation_FieldPathArrayItemValue
}

type ActivationRequestConfirmActivation_FieldPathSelector int32

const (
	ActivationRequestConfirmActivation_FieldPathSelectorClientCookie ActivationRequestConfirmActivation_FieldPathSelector = 0
)

func (s ActivationRequestConfirmActivation_FieldPathSelector) String() string {
	switch s {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		return "client_cookie"
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", s))
	}
}

func BuildActivationRequestConfirmActivation_FieldPath(fp gotenobject.RawFieldPath) (ActivationRequestConfirmActivation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationRequest_ConfirmActivation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "client_cookie", "clientCookie", "client-cookie":
			return &ActivationRequestConfirmActivation_FieldTerminalPath{selector: ActivationRequestConfirmActivation_FieldPathSelectorClientCookie}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationRequest_ConfirmActivation", fp)
}

func ParseActivationRequestConfirmActivation_FieldPath(rawField string) (ActivationRequestConfirmActivation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationRequestConfirmActivation_FieldPath(fp)
}

func MustParseActivationRequestConfirmActivation_FieldPath(rawField string) ActivationRequestConfirmActivation_FieldPath {
	fp, err := ParseActivationRequestConfirmActivation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationRequestConfirmActivation_FieldTerminalPath struct {
	selector ActivationRequestConfirmActivation_FieldPathSelector
}

var _ ActivationRequestConfirmActivation_FieldPath = (*ActivationRequestConfirmActivation_FieldTerminalPath)(nil)

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) Selector() ActivationRequestConfirmActivation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationRequest_ConfirmActivation
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) Get(source *ActivationRequest_ConfirmActivation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
			values = append(values, source.ClientCookie)
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationRequest_ConfirmActivation))
}

// GetSingle returns value pointed by specific field of from source ActivationRequest_ConfirmActivation
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) GetSingle(source *ActivationRequest_ConfirmActivation) (interface{}, bool) {
	switch fp.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		return source.GetClientCookie(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
	}
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationRequest_ConfirmActivation))
}

// GetDefault returns a default value of the field type
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
	}
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) ClearValue(item *ActivationRequest_ConfirmActivation) {
	if item != nil {
		switch fp.selector {
		case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
			item.ClientCookie = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
		}
	}
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationRequest_ConfirmActivation))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ActivationRequestConfirmActivation_FieldPathSelectorClientCookie
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithIValue(value interface{}) ActivationRequestConfirmActivation_FieldPathValue {
	switch fp.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		return &ActivationRequestConfirmActivation_FieldTerminalPathValue{ActivationRequestConfirmActivation_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
	}
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationRequestConfirmActivation_FieldPathArrayOfValues {
	fpaov := &ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues{ActivationRequestConfirmActivation_FieldTerminalPath: *fp}
	switch fp.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		return &ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues{ActivationRequestConfirmActivation_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationRequestConfirmActivation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fp.selector))
	}
}

func (fp *ActivationRequestConfirmActivation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ActivationRequestConfirmActivation_FieldPathValue allows storing values for ConfirmActivation fields according to their type
type ActivationRequestConfirmActivation_FieldPathValue interface {
	ActivationRequestConfirmActivation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationRequest_ConfirmActivation)
	CompareWith(*ActivationRequest_ConfirmActivation) (cmp int, comparable bool)
}

func ParseActivationRequestConfirmActivation_FieldPathValue(pathStr, valueStr string) (ActivationRequestConfirmActivation_FieldPathValue, error) {
	fp, err := ParseActivationRequestConfirmActivation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivation field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationRequestConfirmActivation_FieldPathValue), nil
}

func MustParseActivationRequestConfirmActivation_FieldPathValue(pathStr, valueStr string) ActivationRequestConfirmActivation_FieldPathValue {
	fpv, err := ParseActivationRequestConfirmActivation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationRequestConfirmActivation_FieldTerminalPathValue struct {
	ActivationRequestConfirmActivation_FieldTerminalPath
	value interface{}
}

var _ ActivationRequestConfirmActivation_FieldPathValue = (*ActivationRequestConfirmActivation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConfirmActivation' as interface{}
func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) AsClientCookieValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ConfirmActivation
func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) SetTo(target **ActivationRequest_ConfirmActivation) {
	if *target == nil {
		*target = new(ActivationRequest_ConfirmActivation)
	}
	switch fpv.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		(*target).ClientCookie = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fpv.selector))
	}
}

func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationRequest_ConfirmActivation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationRequestConfirmActivation_FieldTerminalPathValue' with the value under path in 'ActivationRequest_ConfirmActivation'.
func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) CompareWith(source *ActivationRequest_ConfirmActivation) (int, bool) {
	switch fpv.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientCookie()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationRequest_ConfirmActivation: %d", fpv.selector))
	}
}

func (fpv *ActivationRequestConfirmActivation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationRequest_ConfirmActivation))
}

// ActivationRequestConfirmActivation_FieldPathArrayItemValue allows storing single item in Path-specific values for ConfirmActivation according to their type
// Present only for array (repeated) types.
type ActivationRequestConfirmActivation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationRequestConfirmActivation_FieldPath
	ContainsValue(*ActivationRequest_ConfirmActivation) bool
}

// ParseActivationRequestConfirmActivation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationRequestConfirmActivation_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationRequestConfirmActivation_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationRequestConfirmActivation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationRequestConfirmActivation_FieldPathArrayItemValue), nil
}

func MustParseActivationRequestConfirmActivation_FieldPathArrayItemValue(pathStr, valueStr string) ActivationRequestConfirmActivation_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationRequestConfirmActivation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue struct {
	ActivationRequestConfirmActivation_FieldTerminalPath
	value interface{}
}

var _ ActivationRequestConfirmActivation_FieldPathArrayItemValue = (*ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationRequest_ConfirmActivation as interface{}
func (fpaiv *ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationRequest_ConfirmActivation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationRequest_ConfirmActivation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConfirmActivation'
func (fpaiv *ActivationRequestConfirmActivation_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationRequest_ConfirmActivation) bool {
	slice := fpaiv.ActivationRequestConfirmActivation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ActivationRequestConfirmActivation_FieldPathArrayOfValues allows storing slice of values for ConfirmActivation fields according to their type
type ActivationRequestConfirmActivation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationRequestConfirmActivation_FieldPath
}

func ParseActivationRequestConfirmActivation_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationRequestConfirmActivation_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationRequestConfirmActivation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationRequestConfirmActivation_FieldPathArrayOfValues), nil
}

func MustParseActivationRequestConfirmActivation_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationRequestConfirmActivation_FieldPathArrayOfValues {
	fpaov, err := ParseActivationRequestConfirmActivation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues struct {
	ActivationRequestConfirmActivation_FieldTerminalPath
	values interface{}
}

var _ ActivationRequestConfirmActivation_FieldPathArrayOfValues = (*ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ActivationRequestConfirmActivation_FieldPathSelectorClientCookie:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ActivationRequestConfirmActivation_FieldTerminalPathArrayOfValues) AsClientCookieArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationResponse_FieldPathSelector
	Get(source *ActivationResponse) []interface{}
	GetSingle(source *ActivationResponse) (interface{}, bool)
	ClearValue(item *ActivationResponse)

	// Those methods build corresponding ActivationResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationResponse_FieldPathArrayItemValue
}

type ActivationResponse_FieldPathSelector int32

const (
	ActivationResponse_FieldPathSelectorActivated            ActivationResponse_FieldPathSelector = 0
	ActivationResponse_FieldPathSelectorConfirmActivationAck ActivationResponse_FieldPathSelector = 1
)

func (s ActivationResponse_FieldPathSelector) String() string {
	switch s {
	case ActivationResponse_FieldPathSelectorActivated:
		return "activated"
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return "confirm_activation_ack"
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", s))
	}
}

func BuildActivationResponse_FieldPath(fp gotenobject.RawFieldPath) (ActivationResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "activated":
			return &ActivationResponse_FieldTerminalPath{selector: ActivationResponse_FieldPathSelectorActivated}, nil
		case "confirm_activation_ack", "confirmActivationAck", "confirm-activation-ack":
			return &ActivationResponse_FieldTerminalPath{selector: ActivationResponse_FieldPathSelectorConfirmActivationAck}, nil
		}
	} else {
		switch fp[0] {
		case "activated":
			if subpath, err := BuildActivationResponseActivated_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationResponse_FieldSubPath{selector: ActivationResponse_FieldPathSelectorActivated, subPath: subpath}, nil
			}
		case "confirm_activation_ack", "confirmActivationAck", "confirm-activation-ack":
			if subpath, err := BuildActivationResponseConfirmActivationAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationResponse_FieldSubPath{selector: ActivationResponse_FieldPathSelectorConfirmActivationAck, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationResponse", fp)
}

func ParseActivationResponse_FieldPath(rawField string) (ActivationResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationResponse_FieldPath(fp)
}

func MustParseActivationResponse_FieldPath(rawField string) ActivationResponse_FieldPath {
	fp, err := ParseActivationResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationResponse_FieldTerminalPath struct {
	selector ActivationResponse_FieldPathSelector
}

var _ ActivationResponse_FieldPath = (*ActivationResponse_FieldTerminalPath)(nil)

func (fp *ActivationResponse_FieldTerminalPath) Selector() ActivationResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationResponse
func (fp *ActivationResponse_FieldTerminalPath) Get(source *ActivationResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ActivationResponse_FieldPathSelectorActivated:
			if source, ok := source.Msg.(*ActivationResponse_Activated_); ok && source != nil {
				if source.Activated != nil {
					values = append(values, source.Activated)
				}
			}
		case ActivationResponse_FieldPathSelectorConfirmActivationAck:
			if source, ok := source.Msg.(*ActivationResponse_ConfirmActivationAck_); ok && source != nil {
				if source.ConfirmActivationAck != nil {
					values = append(values, source.ConfirmActivationAck)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationResponse))
}

// GetSingle returns value pointed by specific field of from source ActivationResponse
func (fp *ActivationResponse_FieldTerminalPath) GetSingle(source *ActivationResponse) (interface{}, bool) {
	switch fp.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		res := source.GetActivated()
		return res, res != nil
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		res := source.GetConfirmActivationAck()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
	}
}

func (fp *ActivationResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationResponse))
}

// GetDefault returns a default value of the field type
func (fp *ActivationResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		return (*ActivationResponse_Activated)(nil)
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return (*ActivationResponse_ConfirmActivationAck)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
	}
}

func (fp *ActivationResponse_FieldTerminalPath) ClearValue(item *ActivationResponse) {
	if item != nil {
		switch fp.selector {
		case ActivationResponse_FieldPathSelectorActivated:
			if item, ok := item.Msg.(*ActivationResponse_Activated_); ok {
				item.Activated = nil
			}
		case ActivationResponse_FieldPathSelectorConfirmActivationAck:
			if item, ok := item.Msg.(*ActivationResponse_ConfirmActivationAck_); ok {
				item.ConfirmActivationAck = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
		}
	}
}

func (fp *ActivationResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ActivationResponse_FieldTerminalPath) WithIValue(value interface{}) ActivationResponse_FieldPathValue {
	switch fp.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		return &ActivationResponse_FieldTerminalPathValue{ActivationResponse_FieldTerminalPath: *fp, value: value.(*ActivationResponse_Activated)}
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return &ActivationResponse_FieldTerminalPathValue{ActivationResponse_FieldTerminalPath: *fp, value: value.(*ActivationResponse_ConfirmActivationAck)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
	}
}

func (fp *ActivationResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationResponse_FieldPathArrayOfValues {
	fpaov := &ActivationResponse_FieldTerminalPathArrayOfValues{ActivationResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		return &ActivationResponse_FieldTerminalPathArrayOfValues{ActivationResponse_FieldTerminalPath: *fp, values: values.([]*ActivationResponse_Activated)}
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return &ActivationResponse_FieldTerminalPathArrayOfValues{ActivationResponse_FieldTerminalPath: *fp, values: values.([]*ActivationResponse_ConfirmActivationAck)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fp.selector))
	}
}

func (fp *ActivationResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ActivationResponse_FieldSubPath struct {
	selector ActivationResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ActivationResponse_FieldPath = (*ActivationResponse_FieldSubPath)(nil)

func (fps *ActivationResponse_FieldSubPath) Selector() ActivationResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ActivationResponse_FieldSubPath) AsActivatedSubPath() (ActivationResponseActivated_FieldPath, bool) {
	res, ok := fps.subPath.(ActivationResponseActivated_FieldPath)
	return res, ok
}
func (fps *ActivationResponse_FieldSubPath) AsConfirmActivationAckSubPath() (ActivationResponseConfirmActivationAck_FieldPath, bool) {
	res, ok := fps.subPath.(ActivationResponseConfirmActivationAck_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ActivationResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ActivationResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ActivationResponse
func (fps *ActivationResponse_FieldSubPath) Get(source *ActivationResponse) (values []interface{}) {
	if asActivatedFieldPath, ok := fps.AsActivatedSubPath(); ok {
		values = append(values, asActivatedFieldPath.Get(source.GetActivated())...)
	} else if asConfirmActivationAckFieldPath, ok := fps.AsConfirmActivationAckSubPath(); ok {
		values = append(values, asConfirmActivationAckFieldPath.Get(source.GetConfirmActivationAck())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fps.selector))
	}
	return
}

func (fps *ActivationResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ActivationResponse))
}

// GetSingle returns value of selected field from source ActivationResponse
func (fps *ActivationResponse_FieldSubPath) GetSingle(source *ActivationResponse) (interface{}, bool) {
	switch fps.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		if source.GetActivated() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivated())
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		if source.GetConfirmActivationAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConfirmActivationAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fps.selector))
	}
}

func (fps *ActivationResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ActivationResponse))
}

// GetDefault returns a default value of the field type
func (fps *ActivationResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ActivationResponse_FieldSubPath) ClearValue(item *ActivationResponse) {
	if item != nil {
		switch fps.selector {
		case ActivationResponse_FieldPathSelectorActivated:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ActivationResponse_Activated_); ok {
					fps.subPath.ClearValueRaw(item.Activated)
				}
			}
		case ActivationResponse_FieldPathSelectorConfirmActivationAck:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ActivationResponse_ConfirmActivationAck_); ok {
					fps.subPath.ClearValueRaw(item.ConfirmActivationAck)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fps.selector))
		}
	}
}

func (fps *ActivationResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ActivationResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ActivationResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ActivationResponse_FieldSubPath) WithIValue(value interface{}) ActivationResponse_FieldPathValue {
	return &ActivationResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ActivationResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ActivationResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ActivationResponse_FieldPathArrayOfValues {
	return &ActivationResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ActivationResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ActivationResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ActivationResponse_FieldPathArrayItemValue {
	return &ActivationResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ActivationResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ActivationResponse_FieldPathValue allows storing values for ActivationResponse fields according to their type
type ActivationResponse_FieldPathValue interface {
	ActivationResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationResponse)
	CompareWith(*ActivationResponse) (cmp int, comparable bool)
}

func ParseActivationResponse_FieldPathValue(pathStr, valueStr string) (ActivationResponse_FieldPathValue, error) {
	fp, err := ParseActivationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationResponse_FieldPathValue), nil
}

func MustParseActivationResponse_FieldPathValue(pathStr, valueStr string) ActivationResponse_FieldPathValue {
	fpv, err := ParseActivationResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationResponse_FieldTerminalPathValue struct {
	ActivationResponse_FieldTerminalPath
	value interface{}
}

var _ ActivationResponse_FieldPathValue = (*ActivationResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ActivationResponse' as interface{}
func (fpv *ActivationResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ActivationResponse_FieldTerminalPathValue) AsActivatedValue() (*ActivationResponse_Activated, bool) {
	res, ok := fpv.value.(*ActivationResponse_Activated)
	return res, ok
}
func (fpv *ActivationResponse_FieldTerminalPathValue) AsConfirmActivationAckValue() (*ActivationResponse_ConfirmActivationAck, bool) {
	res, ok := fpv.value.(*ActivationResponse_ConfirmActivationAck)
	return res, ok
}

// SetTo stores value for selected field for object ActivationResponse
func (fpv *ActivationResponse_FieldTerminalPathValue) SetTo(target **ActivationResponse) {
	if *target == nil {
		*target = new(ActivationResponse)
	}
	switch fpv.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		if _, ok := (*target).Msg.(*ActivationResponse_Activated_); !ok {
			(*target).Msg = &ActivationResponse_Activated_{}
		}
		(*target).Msg.(*ActivationResponse_Activated_).Activated = fpv.value.(*ActivationResponse_Activated)
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		if _, ok := (*target).Msg.(*ActivationResponse_ConfirmActivationAck_); !ok {
			(*target).Msg = &ActivationResponse_ConfirmActivationAck_{}
		}
		(*target).Msg.(*ActivationResponse_ConfirmActivationAck_).ConfirmActivationAck = fpv.value.(*ActivationResponse_ConfirmActivationAck)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fpv.selector))
	}
}

func (fpv *ActivationResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationResponse_FieldTerminalPathValue' with the value under path in 'ActivationResponse'.
func (fpv *ActivationResponse_FieldTerminalPathValue) CompareWith(source *ActivationResponse) (int, bool) {
	switch fpv.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		return 0, false
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fpv.selector))
	}
}

func (fpv *ActivationResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationResponse))
}

type ActivationResponse_FieldSubPathValue struct {
	ActivationResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ActivationResponse_FieldPathValue = (*ActivationResponse_FieldSubPathValue)(nil)

func (fpvs *ActivationResponse_FieldSubPathValue) AsActivatedPathValue() (ActivationResponseActivated_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ActivationResponseActivated_FieldPathValue)
	return res, ok
}
func (fpvs *ActivationResponse_FieldSubPathValue) AsConfirmActivationAckPathValue() (ActivationResponseConfirmActivationAck_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ActivationResponseConfirmActivationAck_FieldPathValue)
	return res, ok
}

func (fpvs *ActivationResponse_FieldSubPathValue) SetTo(target **ActivationResponse) {
	if *target == nil {
		*target = new(ActivationResponse)
	}
	switch fpvs.Selector() {
	case ActivationResponse_FieldPathSelectorActivated:
		if _, ok := (*target).Msg.(*ActivationResponse_Activated_); !ok {
			(*target).Msg = &ActivationResponse_Activated_{}
		}
		fpvs.subPathValue.(ActivationResponseActivated_FieldPathValue).SetTo(&(*target).Msg.(*ActivationResponse_Activated_).Activated)
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		if _, ok := (*target).Msg.(*ActivationResponse_ConfirmActivationAck_); !ok {
			(*target).Msg = &ActivationResponse_ConfirmActivationAck_{}
		}
		fpvs.subPathValue.(ActivationResponseConfirmActivationAck_FieldPathValue).SetTo(&(*target).Msg.(*ActivationResponse_ConfirmActivationAck_).ConfirmActivationAck)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ActivationResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ActivationResponse_FieldSubPathValue) CompareWith(source *ActivationResponse) (int, bool) {
	switch fpvs.Selector() {
	case ActivationResponse_FieldPathSelectorActivated:
		return fpvs.subPathValue.(ActivationResponseActivated_FieldPathValue).CompareWith(source.GetActivated())
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return fpvs.subPathValue.(ActivationResponseConfirmActivationAck_FieldPathValue).CompareWith(source.GetConfirmActivationAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ActivationResponse))
}

// ActivationResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ActivationResponse according to their type
// Present only for array (repeated) types.
type ActivationResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationResponse_FieldPath
	ContainsValue(*ActivationResponse) bool
}

// ParseActivationResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationResponse_FieldPathArrayItemValue), nil
}

func MustParseActivationResponse_FieldPathArrayItemValue(pathStr, valueStr string) ActivationResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationResponse_FieldTerminalPathArrayItemValue struct {
	ActivationResponse_FieldTerminalPath
	value interface{}
}

var _ ActivationResponse_FieldPathArrayItemValue = (*ActivationResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationResponse as interface{}
func (fpaiv *ActivationResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationResponse'
func (fpaiv *ActivationResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationResponse) bool {
	slice := fpaiv.ActivationResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ActivationResponse_FieldSubPathArrayItemValue struct {
	ActivationResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ActivationResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ActivationResponse_FieldSubPathArrayItemValue) AsActivatedPathItemValue() (ActivationResponseActivated_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ActivationResponseActivated_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ActivationResponse_FieldSubPathArrayItemValue) AsConfirmActivationAckPathItemValue() (ActivationResponseConfirmActivationAck_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ActivationResponseConfirmActivationAck_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationResponse'
func (fpaivs *ActivationResponse_FieldSubPathArrayItemValue) ContainsValue(source *ActivationResponse) bool {
	switch fpaivs.Selector() {
	case ActivationResponse_FieldPathSelectorActivated:
		return fpaivs.subPathItemValue.(ActivationResponseActivated_FieldPathArrayItemValue).ContainsValue(source.GetActivated())
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		return fpaivs.subPathItemValue.(ActivationResponseConfirmActivationAck_FieldPathArrayItemValue).ContainsValue(source.GetConfirmActivationAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse: %d", fpaivs.Selector()))
	}
}

// ActivationResponse_FieldPathArrayOfValues allows storing slice of values for ActivationResponse fields according to their type
type ActivationResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationResponse_FieldPath
}

func ParseActivationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationResponse_FieldPathArrayOfValues), nil
}

func MustParseActivationResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationResponse_FieldPathArrayOfValues {
	fpaov, err := ParseActivationResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationResponse_FieldTerminalPathArrayOfValues struct {
	ActivationResponse_FieldTerminalPath
	values interface{}
}

var _ ActivationResponse_FieldPathArrayOfValues = (*ActivationResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ActivationResponse_FieldPathSelectorActivated:
		for _, v := range fpaov.values.([]*ActivationResponse_Activated) {
			values = append(values, v)
		}
	case ActivationResponse_FieldPathSelectorConfirmActivationAck:
		for _, v := range fpaov.values.([]*ActivationResponse_ConfirmActivationAck) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ActivationResponse_FieldTerminalPathArrayOfValues) AsActivatedArrayOfValues() ([]*ActivationResponse_Activated, bool) {
	res, ok := fpaov.values.([]*ActivationResponse_Activated)
	return res, ok
}
func (fpaov *ActivationResponse_FieldTerminalPathArrayOfValues) AsConfirmActivationAckArrayOfValues() ([]*ActivationResponse_ConfirmActivationAck, bool) {
	res, ok := fpaov.values.([]*ActivationResponse_ConfirmActivationAck)
	return res, ok
}

type ActivationResponse_FieldSubPathArrayOfValues struct {
	ActivationResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ActivationResponse_FieldPathArrayOfValues = (*ActivationResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ActivationResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ActivationResponse_FieldSubPathArrayOfValues) AsActivatedPathArrayOfValues() (ActivationResponseActivated_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ActivationResponseActivated_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ActivationResponse_FieldSubPathArrayOfValues) AsConfirmActivationAckPathArrayOfValues() (ActivationResponseConfirmActivationAck_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ActivationResponseConfirmActivationAck_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationResponseActivated_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationResponseActivated_FieldPathSelector
	Get(source *ActivationResponse_Activated) []interface{}
	GetSingle(source *ActivationResponse_Activated) (interface{}, bool)
	ClearValue(item *ActivationResponse_Activated)

	// Those methods build corresponding ActivationResponseActivated_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationResponseActivated_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationResponseActivated_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationResponseActivated_FieldPathArrayItemValue
}

type ActivationResponseActivated_FieldPathSelector int32

const (
	ActivationResponseActivated_FieldPathSelectorProbe             ActivationResponseActivated_FieldPathSelector = 0
	ActivationResponseActivated_FieldPathSelectorServiceAccountKey ActivationResponseActivated_FieldPathSelector = 1
)

func (s ActivationResponseActivated_FieldPathSelector) String() string {
	switch s {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return "probe"
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return "service_account_key"
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", s))
	}
}

func BuildActivationResponseActivated_FieldPath(fp gotenobject.RawFieldPath) (ActivationResponseActivated_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationResponse_Activated")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &ActivationResponseActivated_FieldTerminalPath{selector: ActivationResponseActivated_FieldPathSelectorProbe}, nil
		case "service_account_key", "serviceAccountKey", "service-account-key":
			return &ActivationResponseActivated_FieldTerminalPath{selector: ActivationResponseActivated_FieldPathSelectorServiceAccountKey}, nil
		}
	} else {
		switch fp[0] {
		case "probe":
			if subpath, err := probe.BuildProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationResponseActivated_FieldSubPath{selector: ActivationResponseActivated_FieldPathSelectorProbe, subPath: subpath}, nil
			}
		case "service_account_key", "serviceAccountKey", "service-account-key":
			if subpath, err := iam_service_account_key.BuildServiceAccountKey_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ActivationResponseActivated_FieldSubPath{selector: ActivationResponseActivated_FieldPathSelectorServiceAccountKey, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationResponse_Activated", fp)
}

func ParseActivationResponseActivated_FieldPath(rawField string) (ActivationResponseActivated_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationResponseActivated_FieldPath(fp)
}

func MustParseActivationResponseActivated_FieldPath(rawField string) ActivationResponseActivated_FieldPath {
	fp, err := ParseActivationResponseActivated_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationResponseActivated_FieldTerminalPath struct {
	selector ActivationResponseActivated_FieldPathSelector
}

var _ ActivationResponseActivated_FieldPath = (*ActivationResponseActivated_FieldTerminalPath)(nil)

func (fp *ActivationResponseActivated_FieldTerminalPath) Selector() ActivationResponseActivated_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationResponseActivated_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationResponseActivated_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationResponse_Activated
func (fp *ActivationResponseActivated_FieldTerminalPath) Get(source *ActivationResponse_Activated) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ActivationResponseActivated_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
			if source.ServiceAccountKey != nil {
				values = append(values, source.ServiceAccountKey)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationResponseActivated_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationResponse_Activated))
}

// GetSingle returns value pointed by specific field of from source ActivationResponse_Activated
func (fp *ActivationResponseActivated_FieldTerminalPath) GetSingle(source *ActivationResponse_Activated) (interface{}, bool) {
	switch fp.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		res := source.GetServiceAccountKey()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
	}
}

func (fp *ActivationResponseActivated_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationResponse_Activated))
}

// GetDefault returns a default value of the field type
func (fp *ActivationResponseActivated_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return (*probe.Probe)(nil)
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return (*iam_service_account_key.ServiceAccountKey)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
	}
}

func (fp *ActivationResponseActivated_FieldTerminalPath) ClearValue(item *ActivationResponse_Activated) {
	if item != nil {
		switch fp.selector {
		case ActivationResponseActivated_FieldPathSelectorProbe:
			item.Probe = nil
		case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
			item.ServiceAccountKey = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
		}
	}
}

func (fp *ActivationResponseActivated_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationResponse_Activated))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationResponseActivated_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithIValue(value interface{}) ActivationResponseActivated_FieldPathValue {
	switch fp.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return &ActivationResponseActivated_FieldTerminalPathValue{ActivationResponseActivated_FieldTerminalPath: *fp, value: value.(*probe.Probe)}
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return &ActivationResponseActivated_FieldTerminalPathValue{ActivationResponseActivated_FieldTerminalPath: *fp, value: value.(*iam_service_account_key.ServiceAccountKey)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
	}
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationResponseActivated_FieldPathArrayOfValues {
	fpaov := &ActivationResponseActivated_FieldTerminalPathArrayOfValues{ActivationResponseActivated_FieldTerminalPath: *fp}
	switch fp.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return &ActivationResponseActivated_FieldTerminalPathArrayOfValues{ActivationResponseActivated_FieldTerminalPath: *fp, values: values.([]*probe.Probe)}
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return &ActivationResponseActivated_FieldTerminalPathArrayOfValues{ActivationResponseActivated_FieldTerminalPath: *fp, values: values.([]*iam_service_account_key.ServiceAccountKey)}
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationResponseActivated_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fp.selector))
	}
}

func (fp *ActivationResponseActivated_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ActivationResponseActivated_FieldSubPath struct {
	selector ActivationResponseActivated_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ActivationResponseActivated_FieldPath = (*ActivationResponseActivated_FieldSubPath)(nil)

func (fps *ActivationResponseActivated_FieldSubPath) Selector() ActivationResponseActivated_FieldPathSelector {
	return fps.selector
}
func (fps *ActivationResponseActivated_FieldSubPath) AsProbeSubPath() (probe.Probe_FieldPath, bool) {
	res, ok := fps.subPath.(probe.Probe_FieldPath)
	return res, ok
}
func (fps *ActivationResponseActivated_FieldSubPath) AsServiceAccountKeySubPath() (iam_service_account_key.ServiceAccountKey_FieldPath, bool) {
	res, ok := fps.subPath.(iam_service_account_key.ServiceAccountKey_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ActivationResponseActivated_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ActivationResponseActivated_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ActivationResponse_Activated
func (fps *ActivationResponseActivated_FieldSubPath) Get(source *ActivationResponse_Activated) (values []interface{}) {
	if asProbeFieldPath, ok := fps.AsProbeSubPath(); ok {
		values = append(values, asProbeFieldPath.Get(source.GetProbe())...)
	} else if asServiceAccountKeyFieldPath, ok := fps.AsServiceAccountKeySubPath(); ok {
		values = append(values, asServiceAccountKeyFieldPath.Get(source.GetServiceAccountKey())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fps.selector))
	}
	return
}

func (fps *ActivationResponseActivated_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ActivationResponse_Activated))
}

// GetSingle returns value of selected field from source ActivationResponse_Activated
func (fps *ActivationResponseActivated_FieldSubPath) GetSingle(source *ActivationResponse_Activated) (interface{}, bool) {
	switch fps.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		if source.GetProbe() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbe())
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		if source.GetServiceAccountKey() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccountKey())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fps.selector))
	}
}

func (fps *ActivationResponseActivated_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ActivationResponse_Activated))
}

// GetDefault returns a default value of the field type
func (fps *ActivationResponseActivated_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ActivationResponseActivated_FieldSubPath) ClearValue(item *ActivationResponse_Activated) {
	if item != nil {
		switch fps.selector {
		case ActivationResponseActivated_FieldPathSelectorProbe:
			fps.subPath.ClearValueRaw(item.Probe)
		case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
			fps.subPath.ClearValueRaw(item.ServiceAccountKey)
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fps.selector))
		}
	}
}

func (fps *ActivationResponseActivated_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ActivationResponse_Activated))
}

// IsLeaf - whether field path is holds simple value
func (fps *ActivationResponseActivated_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ActivationResponseActivated_FieldSubPath) WithIValue(value interface{}) ActivationResponseActivated_FieldPathValue {
	return &ActivationResponseActivated_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ActivationResponseActivated_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ActivationResponseActivated_FieldSubPath) WithIArrayOfValues(values interface{}) ActivationResponseActivated_FieldPathArrayOfValues {
	return &ActivationResponseActivated_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ActivationResponseActivated_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ActivationResponseActivated_FieldSubPath) WithIArrayItemValue(value interface{}) ActivationResponseActivated_FieldPathArrayItemValue {
	return &ActivationResponseActivated_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ActivationResponseActivated_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ActivationResponseActivated_FieldPathValue allows storing values for Activated fields according to their type
type ActivationResponseActivated_FieldPathValue interface {
	ActivationResponseActivated_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationResponse_Activated)
	CompareWith(*ActivationResponse_Activated) (cmp int, comparable bool)
}

func ParseActivationResponseActivated_FieldPathValue(pathStr, valueStr string) (ActivationResponseActivated_FieldPathValue, error) {
	fp, err := ParseActivationResponseActivated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activated field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationResponseActivated_FieldPathValue), nil
}

func MustParseActivationResponseActivated_FieldPathValue(pathStr, valueStr string) ActivationResponseActivated_FieldPathValue {
	fpv, err := ParseActivationResponseActivated_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationResponseActivated_FieldTerminalPathValue struct {
	ActivationResponseActivated_FieldTerminalPath
	value interface{}
}

var _ ActivationResponseActivated_FieldPathValue = (*ActivationResponseActivated_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Activated' as interface{}
func (fpv *ActivationResponseActivated_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ActivationResponseActivated_FieldTerminalPathValue) AsProbeValue() (*probe.Probe, bool) {
	res, ok := fpv.value.(*probe.Probe)
	return res, ok
}
func (fpv *ActivationResponseActivated_FieldTerminalPathValue) AsServiceAccountKeyValue() (*iam_service_account_key.ServiceAccountKey, bool) {
	res, ok := fpv.value.(*iam_service_account_key.ServiceAccountKey)
	return res, ok
}

// SetTo stores value for selected field for object Activated
func (fpv *ActivationResponseActivated_FieldTerminalPathValue) SetTo(target **ActivationResponse_Activated) {
	if *target == nil {
		*target = new(ActivationResponse_Activated)
	}
	switch fpv.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Probe)
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		(*target).ServiceAccountKey = fpv.value.(*iam_service_account_key.ServiceAccountKey)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fpv.selector))
	}
}

func (fpv *ActivationResponseActivated_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationResponse_Activated)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationResponseActivated_FieldTerminalPathValue' with the value under path in 'ActivationResponse_Activated'.
func (fpv *ActivationResponseActivated_FieldTerminalPathValue) CompareWith(source *ActivationResponse_Activated) (int, bool) {
	switch fpv.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return 0, false
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fpv.selector))
	}
}

func (fpv *ActivationResponseActivated_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationResponse_Activated))
}

type ActivationResponseActivated_FieldSubPathValue struct {
	ActivationResponseActivated_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ActivationResponseActivated_FieldPathValue = (*ActivationResponseActivated_FieldSubPathValue)(nil)

func (fpvs *ActivationResponseActivated_FieldSubPathValue) AsProbePathValue() (probe.Probe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.Probe_FieldPathValue)
	return res, ok
}
func (fpvs *ActivationResponseActivated_FieldSubPathValue) AsServiceAccountKeyPathValue() (iam_service_account_key.ServiceAccountKey_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(iam_service_account_key.ServiceAccountKey_FieldPathValue)
	return res, ok
}

func (fpvs *ActivationResponseActivated_FieldSubPathValue) SetTo(target **ActivationResponse_Activated) {
	if *target == nil {
		*target = new(ActivationResponse_Activated)
	}
	switch fpvs.Selector() {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		fpvs.subPathValue.(probe.Probe_FieldPathValue).SetTo(&(*target).Probe)
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		fpvs.subPathValue.(iam_service_account_key.ServiceAccountKey_FieldPathValue).SetTo(&(*target).ServiceAccountKey)
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationResponseActivated_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationResponse_Activated)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ActivationResponseActivated_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ActivationResponseActivated_FieldSubPathValue) CompareWith(source *ActivationResponse_Activated) (int, bool) {
	switch fpvs.Selector() {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return fpvs.subPathValue.(probe.Probe_FieldPathValue).CompareWith(source.GetProbe())
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return fpvs.subPathValue.(iam_service_account_key.ServiceAccountKey_FieldPathValue).CompareWith(source.GetServiceAccountKey())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fpvs.Selector()))
	}
}

func (fpvs *ActivationResponseActivated_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ActivationResponse_Activated))
}

// ActivationResponseActivated_FieldPathArrayItemValue allows storing single item in Path-specific values for Activated according to their type
// Present only for array (repeated) types.
type ActivationResponseActivated_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationResponseActivated_FieldPath
	ContainsValue(*ActivationResponse_Activated) bool
}

// ParseActivationResponseActivated_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationResponseActivated_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationResponseActivated_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationResponseActivated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activated field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationResponseActivated_FieldPathArrayItemValue), nil
}

func MustParseActivationResponseActivated_FieldPathArrayItemValue(pathStr, valueStr string) ActivationResponseActivated_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationResponseActivated_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationResponseActivated_FieldTerminalPathArrayItemValue struct {
	ActivationResponseActivated_FieldTerminalPath
	value interface{}
}

var _ ActivationResponseActivated_FieldPathArrayItemValue = (*ActivationResponseActivated_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationResponse_Activated as interface{}
func (fpaiv *ActivationResponseActivated_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationResponseActivated_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationResponse_Activated) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationResponseActivated_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationResponse_Activated))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Activated'
func (fpaiv *ActivationResponseActivated_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationResponse_Activated) bool {
	slice := fpaiv.ActivationResponseActivated_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ActivationResponseActivated_FieldSubPathArrayItemValue struct {
	ActivationResponseActivated_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ActivationResponseActivated_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ActivationResponseActivated_FieldSubPathArrayItemValue) AsProbePathItemValue() (probe.Probe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ActivationResponseActivated_FieldSubPathArrayItemValue) AsServiceAccountKeyPathItemValue() (iam_service_account_key.ServiceAccountKey_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(iam_service_account_key.ServiceAccountKey_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Activated'
func (fpaivs *ActivationResponseActivated_FieldSubPathArrayItemValue) ContainsValue(source *ActivationResponse_Activated) bool {
	switch fpaivs.Selector() {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		return fpaivs.subPathItemValue.(probe.Probe_FieldPathArrayItemValue).ContainsValue(source.GetProbe())
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		return fpaivs.subPathItemValue.(iam_service_account_key.ServiceAccountKey_FieldPathArrayItemValue).ContainsValue(source.GetServiceAccountKey())
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_Activated: %d", fpaivs.Selector()))
	}
}

// ActivationResponseActivated_FieldPathArrayOfValues allows storing slice of values for Activated fields according to their type
type ActivationResponseActivated_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationResponseActivated_FieldPath
}

func ParseActivationResponseActivated_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationResponseActivated_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationResponseActivated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Activated field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationResponseActivated_FieldPathArrayOfValues), nil
}

func MustParseActivationResponseActivated_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationResponseActivated_FieldPathArrayOfValues {
	fpaov, err := ParseActivationResponseActivated_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationResponseActivated_FieldTerminalPathArrayOfValues struct {
	ActivationResponseActivated_FieldTerminalPath
	values interface{}
}

var _ ActivationResponseActivated_FieldPathArrayOfValues = (*ActivationResponseActivated_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationResponseActivated_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ActivationResponseActivated_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Probe) {
			values = append(values, v)
		}
	case ActivationResponseActivated_FieldPathSelectorServiceAccountKey:
		for _, v := range fpaov.values.([]*iam_service_account_key.ServiceAccountKey) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ActivationResponseActivated_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Probe, bool) {
	res, ok := fpaov.values.([]*probe.Probe)
	return res, ok
}
func (fpaov *ActivationResponseActivated_FieldTerminalPathArrayOfValues) AsServiceAccountKeyArrayOfValues() ([]*iam_service_account_key.ServiceAccountKey, bool) {
	res, ok := fpaov.values.([]*iam_service_account_key.ServiceAccountKey)
	return res, ok
}

type ActivationResponseActivated_FieldSubPathArrayOfValues struct {
	ActivationResponseActivated_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ActivationResponseActivated_FieldPathArrayOfValues = (*ActivationResponseActivated_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ActivationResponseActivated_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ActivationResponseActivated_FieldSubPathArrayOfValues) AsProbePathArrayOfValues() (probe.Probe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.Probe_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ActivationResponseActivated_FieldSubPathArrayOfValues) AsServiceAccountKeyPathArrayOfValues() (iam_service_account_key.ServiceAccountKey_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(iam_service_account_key.ServiceAccountKey_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ActivationResponseConfirmActivationAck_FieldPath interface {
	gotenobject.FieldPath
	Selector() ActivationResponseConfirmActivationAck_FieldPathSelector
	Get(source *ActivationResponse_ConfirmActivationAck) []interface{}
	GetSingle(source *ActivationResponse_ConfirmActivationAck) (interface{}, bool)
	ClearValue(item *ActivationResponse_ConfirmActivationAck)

	// Those methods build corresponding ActivationResponseConfirmActivationAck_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ActivationResponseConfirmActivationAck_FieldPathValue
	WithIArrayOfValues(values interface{}) ActivationResponseConfirmActivationAck_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ActivationResponseConfirmActivationAck_FieldPathArrayItemValue
}

type ActivationResponseConfirmActivationAck_FieldPathSelector int32

func (s ActivationResponseConfirmActivationAck_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", s))
	}
}

func BuildActivationResponseConfirmActivationAck_FieldPath(fp gotenobject.RawFieldPath) (ActivationResponseConfirmActivationAck_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ActivationResponse_ConfirmActivationAck")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ActivationResponse_ConfirmActivationAck", fp)
}

func ParseActivationResponseConfirmActivationAck_FieldPath(rawField string) (ActivationResponseConfirmActivationAck_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildActivationResponseConfirmActivationAck_FieldPath(fp)
}

func MustParseActivationResponseConfirmActivationAck_FieldPath(rawField string) ActivationResponseConfirmActivationAck_FieldPath {
	fp, err := ParseActivationResponseConfirmActivationAck_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ActivationResponseConfirmActivationAck_FieldTerminalPath struct {
	selector ActivationResponseConfirmActivationAck_FieldPathSelector
}

var _ ActivationResponseConfirmActivationAck_FieldPath = (*ActivationResponseConfirmActivationAck_FieldTerminalPath)(nil)

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) Selector() ActivationResponseConfirmActivationAck_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ActivationResponse_ConfirmActivationAck
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) Get(source *ActivationResponse_ConfirmActivationAck) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
		}
	}
	return
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ActivationResponse_ConfirmActivationAck))
}

// GetSingle returns value pointed by specific field of from source ActivationResponse_ConfirmActivationAck
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) GetSingle(source *ActivationResponse_ConfirmActivationAck) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
	}
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ActivationResponse_ConfirmActivationAck))
}

// GetDefault returns a default value of the field type
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
	}
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) ClearValue(item *ActivationResponse_ConfirmActivationAck) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
		}
	}
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ActivationResponse_ConfirmActivationAck))
}

// IsLeaf - whether field path is holds simple value
func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithIValue(value interface{}) ActivationResponseConfirmActivationAck_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
	}
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithIArrayOfValues(values interface{}) ActivationResponseConfirmActivationAck_FieldPathArrayOfValues {
	fpaov := &ActivationResponseConfirmActivationAck_FieldTerminalPathArrayOfValues{ActivationResponseConfirmActivationAck_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
	}
	return fpaov
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithIArrayItemValue(value interface{}) ActivationResponseConfirmActivationAck_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fp.selector))
	}
}

func (fp *ActivationResponseConfirmActivationAck_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ActivationResponseConfirmActivationAck_FieldPathValue allows storing values for ConfirmActivationAck fields according to their type
type ActivationResponseConfirmActivationAck_FieldPathValue interface {
	ActivationResponseConfirmActivationAck_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ActivationResponse_ConfirmActivationAck)
	CompareWith(*ActivationResponse_ConfirmActivationAck) (cmp int, comparable bool)
}

func ParseActivationResponseConfirmActivationAck_FieldPathValue(pathStr, valueStr string) (ActivationResponseConfirmActivationAck_FieldPathValue, error) {
	fp, err := ParseActivationResponseConfirmActivationAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivationAck field path value from %s: %v", valueStr, err)
	}
	return fpv.(ActivationResponseConfirmActivationAck_FieldPathValue), nil
}

func MustParseActivationResponseConfirmActivationAck_FieldPathValue(pathStr, valueStr string) ActivationResponseConfirmActivationAck_FieldPathValue {
	fpv, err := ParseActivationResponseConfirmActivationAck_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ActivationResponseConfirmActivationAck_FieldTerminalPathValue struct {
	ActivationResponseConfirmActivationAck_FieldTerminalPath
	value interface{}
}

var _ ActivationResponseConfirmActivationAck_FieldPathValue = (*ActivationResponseConfirmActivationAck_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConfirmActivationAck' as interface{}
func (fpv *ActivationResponseConfirmActivationAck_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object ConfirmActivationAck
func (fpv *ActivationResponseConfirmActivationAck_FieldTerminalPathValue) SetTo(target **ActivationResponse_ConfirmActivationAck) {
	if *target == nil {
		*target = new(ActivationResponse_ConfirmActivationAck)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fpv.selector))
	}
}

func (fpv *ActivationResponseConfirmActivationAck_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ActivationResponse_ConfirmActivationAck)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ActivationResponseConfirmActivationAck_FieldTerminalPathValue' with the value under path in 'ActivationResponse_ConfirmActivationAck'.
func (fpv *ActivationResponseConfirmActivationAck_FieldTerminalPathValue) CompareWith(source *ActivationResponse_ConfirmActivationAck) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ActivationResponse_ConfirmActivationAck: %d", fpv.selector))
	}
}

func (fpv *ActivationResponseConfirmActivationAck_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ActivationResponse_ConfirmActivationAck))
}

// ActivationResponseConfirmActivationAck_FieldPathArrayItemValue allows storing single item in Path-specific values for ConfirmActivationAck according to their type
// Present only for array (repeated) types.
type ActivationResponseConfirmActivationAck_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ActivationResponseConfirmActivationAck_FieldPath
	ContainsValue(*ActivationResponse_ConfirmActivationAck) bool
}

// ParseActivationResponseConfirmActivationAck_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseActivationResponseConfirmActivationAck_FieldPathArrayItemValue(pathStr, valueStr string) (ActivationResponseConfirmActivationAck_FieldPathArrayItemValue, error) {
	fp, err := ParseActivationResponseConfirmActivationAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivationAck field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ActivationResponseConfirmActivationAck_FieldPathArrayItemValue), nil
}

func MustParseActivationResponseConfirmActivationAck_FieldPathArrayItemValue(pathStr, valueStr string) ActivationResponseConfirmActivationAck_FieldPathArrayItemValue {
	fpaiv, err := ParseActivationResponseConfirmActivationAck_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue struct {
	ActivationResponseConfirmActivationAck_FieldTerminalPath
	value interface{}
}

var _ ActivationResponseConfirmActivationAck_FieldPathArrayItemValue = (*ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ActivationResponse_ConfirmActivationAck as interface{}
func (fpaiv *ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue) GetSingle(source *ActivationResponse_ConfirmActivationAck) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ActivationResponse_ConfirmActivationAck))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConfirmActivationAck'
func (fpaiv *ActivationResponseConfirmActivationAck_FieldTerminalPathArrayItemValue) ContainsValue(source *ActivationResponse_ConfirmActivationAck) bool {
	slice := fpaiv.ActivationResponseConfirmActivationAck_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ActivationResponseConfirmActivationAck_FieldPathArrayOfValues allows storing slice of values for ConfirmActivationAck fields according to their type
type ActivationResponseConfirmActivationAck_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ActivationResponseConfirmActivationAck_FieldPath
}

func ParseActivationResponseConfirmActivationAck_FieldPathArrayOfValues(pathStr, valuesStr string) (ActivationResponseConfirmActivationAck_FieldPathArrayOfValues, error) {
	fp, err := ParseActivationResponseConfirmActivationAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConfirmActivationAck field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ActivationResponseConfirmActivationAck_FieldPathArrayOfValues), nil
}

func MustParseActivationResponseConfirmActivationAck_FieldPathArrayOfValues(pathStr, valuesStr string) ActivationResponseConfirmActivationAck_FieldPathArrayOfValues {
	fpaov, err := ParseActivationResponseConfirmActivationAck_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ActivationResponseConfirmActivationAck_FieldTerminalPathArrayOfValues struct {
	ActivationResponseConfirmActivationAck_FieldTerminalPath
	values interface{}
}

var _ ActivationResponseConfirmActivationAck_FieldPathArrayOfValues = (*ActivationResponseConfirmActivationAck_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ActivationResponseConfirmActivationAck_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SendActivationInvitationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SendActivationInvitationRequest_FieldPathSelector
	Get(source *SendActivationInvitationRequest) []interface{}
	GetSingle(source *SendActivationInvitationRequest) (interface{}, bool)
	ClearValue(item *SendActivationInvitationRequest)

	// Those methods build corresponding SendActivationInvitationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SendActivationInvitationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SendActivationInvitationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SendActivationInvitationRequest_FieldPathArrayItemValue
}

type SendActivationInvitationRequest_FieldPathSelector int32

const (
	SendActivationInvitationRequest_FieldPathSelectorName SendActivationInvitationRequest_FieldPathSelector = 0
)

func (s SendActivationInvitationRequest_FieldPathSelector) String() string {
	switch s {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", s))
	}
}

func BuildSendActivationInvitationRequest_FieldPath(fp gotenobject.RawFieldPath) (SendActivationInvitationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SendActivationInvitationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &SendActivationInvitationRequest_FieldTerminalPath{selector: SendActivationInvitationRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SendActivationInvitationRequest", fp)
}

func ParseSendActivationInvitationRequest_FieldPath(rawField string) (SendActivationInvitationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSendActivationInvitationRequest_FieldPath(fp)
}

func MustParseSendActivationInvitationRequest_FieldPath(rawField string) SendActivationInvitationRequest_FieldPath {
	fp, err := ParseSendActivationInvitationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SendActivationInvitationRequest_FieldTerminalPath struct {
	selector SendActivationInvitationRequest_FieldPathSelector
}

var _ SendActivationInvitationRequest_FieldPath = (*SendActivationInvitationRequest_FieldTerminalPath)(nil)

func (fp *SendActivationInvitationRequest_FieldTerminalPath) Selector() SendActivationInvitationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SendActivationInvitationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SendActivationInvitationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SendActivationInvitationRequest
func (fp *SendActivationInvitationRequest_FieldTerminalPath) Get(source *SendActivationInvitationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SendActivationInvitationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SendActivationInvitationRequest))
}

// GetSingle returns value pointed by specific field of from source SendActivationInvitationRequest
func (fp *SendActivationInvitationRequest_FieldTerminalPath) GetSingle(source *SendActivationInvitationRequest) (interface{}, bool) {
	switch fp.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
	}
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SendActivationInvitationRequest))
}

// GetDefault returns a default value of the field type
func (fp *SendActivationInvitationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
	}
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) ClearValue(item *SendActivationInvitationRequest) {
	if item != nil {
		switch fp.selector {
		case SendActivationInvitationRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
		}
	}
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SendActivationInvitationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SendActivationInvitationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SendActivationInvitationRequest_FieldPathSelectorName
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithIValue(value interface{}) SendActivationInvitationRequest_FieldPathValue {
	switch fp.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		return &SendActivationInvitationRequest_FieldTerminalPathValue{SendActivationInvitationRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
	}
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SendActivationInvitationRequest_FieldPathArrayOfValues {
	fpaov := &SendActivationInvitationRequest_FieldTerminalPathArrayOfValues{SendActivationInvitationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		return &SendActivationInvitationRequest_FieldTerminalPathArrayOfValues{SendActivationInvitationRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SendActivationInvitationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fp.selector))
	}
}

func (fp *SendActivationInvitationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SendActivationInvitationRequest_FieldPathValue allows storing values for SendActivationInvitationRequest fields according to their type
type SendActivationInvitationRequest_FieldPathValue interface {
	SendActivationInvitationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SendActivationInvitationRequest)
	CompareWith(*SendActivationInvitationRequest) (cmp int, comparable bool)
}

func ParseSendActivationInvitationRequest_FieldPathValue(pathStr, valueStr string) (SendActivationInvitationRequest_FieldPathValue, error) {
	fp, err := ParseSendActivationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SendActivationInvitationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SendActivationInvitationRequest_FieldPathValue), nil
}

func MustParseSendActivationInvitationRequest_FieldPathValue(pathStr, valueStr string) SendActivationInvitationRequest_FieldPathValue {
	fpv, err := ParseSendActivationInvitationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SendActivationInvitationRequest_FieldTerminalPathValue struct {
	SendActivationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ SendActivationInvitationRequest_FieldPathValue = (*SendActivationInvitationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SendActivationInvitationRequest' as interface{}
func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}

// SetTo stores value for selected field for object SendActivationInvitationRequest
func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) SetTo(target **SendActivationInvitationRequest) {
	if *target == nil {
		*target = new(SendActivationInvitationRequest)
	}
	switch fpv.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SendActivationInvitationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SendActivationInvitationRequest_FieldTerminalPathValue' with the value under path in 'SendActivationInvitationRequest'.
func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) CompareWith(source *SendActivationInvitationRequest) (int, bool) {
	switch fpv.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SendActivationInvitationRequest: %d", fpv.selector))
	}
}

func (fpv *SendActivationInvitationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SendActivationInvitationRequest))
}

// SendActivationInvitationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SendActivationInvitationRequest according to their type
// Present only for array (repeated) types.
type SendActivationInvitationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SendActivationInvitationRequest_FieldPath
	ContainsValue(*SendActivationInvitationRequest) bool
}

// ParseSendActivationInvitationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSendActivationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SendActivationInvitationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSendActivationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SendActivationInvitationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SendActivationInvitationRequest_FieldPathArrayItemValue), nil
}

func MustParseSendActivationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr string) SendActivationInvitationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSendActivationInvitationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SendActivationInvitationRequest_FieldTerminalPathArrayItemValue struct {
	SendActivationInvitationRequest_FieldTerminalPath
	value interface{}
}

var _ SendActivationInvitationRequest_FieldPathArrayItemValue = (*SendActivationInvitationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SendActivationInvitationRequest as interface{}
func (fpaiv *SendActivationInvitationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SendActivationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SendActivationInvitationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SendActivationInvitationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SendActivationInvitationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SendActivationInvitationRequest'
func (fpaiv *SendActivationInvitationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SendActivationInvitationRequest) bool {
	slice := fpaiv.SendActivationInvitationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SendActivationInvitationRequest_FieldPathArrayOfValues allows storing slice of values for SendActivationInvitationRequest fields according to their type
type SendActivationInvitationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SendActivationInvitationRequest_FieldPath
}

func ParseSendActivationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SendActivationInvitationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSendActivationInvitationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SendActivationInvitationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SendActivationInvitationRequest_FieldPathArrayOfValues), nil
}

func MustParseSendActivationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SendActivationInvitationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSendActivationInvitationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SendActivationInvitationRequest_FieldTerminalPathArrayOfValues struct {
	SendActivationInvitationRequest_FieldTerminalPath
	values interface{}
}

var _ SendActivationInvitationRequest_FieldPathArrayOfValues = (*SendActivationInvitationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SendActivationInvitationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SendActivationInvitationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SendActivationInvitationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResetActivationRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResetActivationRequest_FieldPathSelector
	Get(source *ResetActivationRequest) []interface{}
	GetSingle(source *ResetActivationRequest) (interface{}, bool)
	ClearValue(item *ResetActivationRequest)

	// Those methods build corresponding ResetActivationRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResetActivationRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ResetActivationRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResetActivationRequest_FieldPathArrayItemValue
}

type ResetActivationRequest_FieldPathSelector int32

const (
	ResetActivationRequest_FieldPathSelectorName                     ResetActivationRequest_FieldPathSelector = 0
	ResetActivationRequest_FieldPathSelectorToken                    ResetActivationRequest_FieldPathSelector = 1
	ResetActivationRequest_FieldPathSelectorSendActivationInvitation ResetActivationRequest_FieldPathSelector = 2
)

func (s ResetActivationRequest_FieldPathSelector) String() string {
	switch s {
	case ResetActivationRequest_FieldPathSelectorName:
		return "name"
	case ResetActivationRequest_FieldPathSelectorToken:
		return "token"
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		return "send_activation_invitation"
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", s))
	}
}

func BuildResetActivationRequest_FieldPath(fp gotenobject.RawFieldPath) (ResetActivationRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResetActivationRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ResetActivationRequest_FieldTerminalPath{selector: ResetActivationRequest_FieldPathSelectorName}, nil
		case "token":
			return &ResetActivationRequest_FieldTerminalPath{selector: ResetActivationRequest_FieldPathSelectorToken}, nil
		case "send_activation_invitation", "sendActivationInvitation", "send-activation-invitation":
			return &ResetActivationRequest_FieldTerminalPath{selector: ResetActivationRequest_FieldPathSelectorSendActivationInvitation}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResetActivationRequest", fp)
}

func ParseResetActivationRequest_FieldPath(rawField string) (ResetActivationRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResetActivationRequest_FieldPath(fp)
}

func MustParseResetActivationRequest_FieldPath(rawField string) ResetActivationRequest_FieldPath {
	fp, err := ParseResetActivationRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResetActivationRequest_FieldTerminalPath struct {
	selector ResetActivationRequest_FieldPathSelector
}

var _ ResetActivationRequest_FieldPath = (*ResetActivationRequest_FieldTerminalPath)(nil)

func (fp *ResetActivationRequest_FieldTerminalPath) Selector() ResetActivationRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResetActivationRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResetActivationRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResetActivationRequest
func (fp *ResetActivationRequest_FieldTerminalPath) Get(source *ResetActivationRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResetActivationRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ResetActivationRequest_FieldPathSelectorToken:
			values = append(values, source.Token)
		case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
			values = append(values, source.SendActivationInvitation)
		default:
			panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ResetActivationRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResetActivationRequest))
}

// GetSingle returns value pointed by specific field of from source ResetActivationRequest
func (fp *ResetActivationRequest_FieldTerminalPath) GetSingle(source *ResetActivationRequest) (interface{}, bool) {
	switch fp.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ResetActivationRequest_FieldPathSelectorToken:
		return source.GetToken(), source != nil
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		return source.GetSendActivationInvitation(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
	}
}

func (fp *ResetActivationRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResetActivationRequest))
}

// GetDefault returns a default value of the field type
func (fp *ResetActivationRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		return (*probe.Reference)(nil)
	case ResetActivationRequest_FieldPathSelectorToken:
		return ""
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
	}
}

func (fp *ResetActivationRequest_FieldTerminalPath) ClearValue(item *ResetActivationRequest) {
	if item != nil {
		switch fp.selector {
		case ResetActivationRequest_FieldPathSelectorName:
			item.Name = nil
		case ResetActivationRequest_FieldPathSelectorToken:
			item.Token = ""
		case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
			item.SendActivationInvitation = false
		default:
			panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
		}
	}
}

func (fp *ResetActivationRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResetActivationRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResetActivationRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ResetActivationRequest_FieldPathSelectorName ||
		fp.selector == ResetActivationRequest_FieldPathSelectorToken ||
		fp.selector == ResetActivationRequest_FieldPathSelectorSendActivationInvitation
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithIValue(value interface{}) ResetActivationRequest_FieldPathValue {
	switch fp.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		return &ResetActivationRequest_FieldTerminalPathValue{ResetActivationRequest_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ResetActivationRequest_FieldPathSelectorToken:
		return &ResetActivationRequest_FieldTerminalPathValue{ResetActivationRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		return &ResetActivationRequest_FieldTerminalPathValue{ResetActivationRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
	}
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResetActivationRequest_FieldPathArrayOfValues {
	fpaov := &ResetActivationRequest_FieldTerminalPathArrayOfValues{ResetActivationRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		return &ResetActivationRequest_FieldTerminalPathArrayOfValues{ResetActivationRequest_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ResetActivationRequest_FieldPathSelectorToken:
		return &ResetActivationRequest_FieldTerminalPathArrayOfValues{ResetActivationRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		return &ResetActivationRequest_FieldTerminalPathArrayOfValues{ResetActivationRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResetActivationRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fp.selector))
	}
}

func (fp *ResetActivationRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ResetActivationRequest_FieldPathValue allows storing values for ResetActivationRequest fields according to their type
type ResetActivationRequest_FieldPathValue interface {
	ResetActivationRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResetActivationRequest)
	CompareWith(*ResetActivationRequest) (cmp int, comparable bool)
}

func ParseResetActivationRequest_FieldPathValue(pathStr, valueStr string) (ResetActivationRequest_FieldPathValue, error) {
	fp, err := ParseResetActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetActivationRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResetActivationRequest_FieldPathValue), nil
}

func MustParseResetActivationRequest_FieldPathValue(pathStr, valueStr string) ResetActivationRequest_FieldPathValue {
	fpv, err := ParseResetActivationRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResetActivationRequest_FieldTerminalPathValue struct {
	ResetActivationRequest_FieldTerminalPath
	value interface{}
}

var _ ResetActivationRequest_FieldPathValue = (*ResetActivationRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResetActivationRequest' as interface{}
func (fpv *ResetActivationRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResetActivationRequest_FieldTerminalPathValue) AsNameValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ResetActivationRequest_FieldTerminalPathValue) AsTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ResetActivationRequest_FieldTerminalPathValue) AsSendActivationInvitationValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ResetActivationRequest
func (fpv *ResetActivationRequest_FieldTerminalPathValue) SetTo(target **ResetActivationRequest) {
	if *target == nil {
		*target = new(ResetActivationRequest)
	}
	switch fpv.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probe.Reference)
	case ResetActivationRequest_FieldPathSelectorToken:
		(*target).Token = fpv.value.(string)
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		(*target).SendActivationInvitation = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fpv.selector))
	}
}

func (fpv *ResetActivationRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResetActivationRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResetActivationRequest_FieldTerminalPathValue' with the value under path in 'ResetActivationRequest'.
func (fpv *ResetActivationRequest_FieldTerminalPathValue) CompareWith(source *ResetActivationRequest) (int, bool) {
	switch fpv.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ResetActivationRequest_FieldPathSelectorToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSendActivationInvitation()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ResetActivationRequest: %d", fpv.selector))
	}
}

func (fpv *ResetActivationRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResetActivationRequest))
}

// ResetActivationRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ResetActivationRequest according to their type
// Present only for array (repeated) types.
type ResetActivationRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResetActivationRequest_FieldPath
	ContainsValue(*ResetActivationRequest) bool
}

// ParseResetActivationRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResetActivationRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ResetActivationRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseResetActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetActivationRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResetActivationRequest_FieldPathArrayItemValue), nil
}

func MustParseResetActivationRequest_FieldPathArrayItemValue(pathStr, valueStr string) ResetActivationRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseResetActivationRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResetActivationRequest_FieldTerminalPathArrayItemValue struct {
	ResetActivationRequest_FieldTerminalPath
	value interface{}
}

var _ ResetActivationRequest_FieldPathArrayItemValue = (*ResetActivationRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResetActivationRequest as interface{}
func (fpaiv *ResetActivationRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResetActivationRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ResetActivationRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResetActivationRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResetActivationRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResetActivationRequest'
func (fpaiv *ResetActivationRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ResetActivationRequest) bool {
	slice := fpaiv.ResetActivationRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ResetActivationRequest_FieldPathArrayOfValues allows storing slice of values for ResetActivationRequest fields according to their type
type ResetActivationRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResetActivationRequest_FieldPath
}

func ParseResetActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ResetActivationRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseResetActivationRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResetActivationRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResetActivationRequest_FieldPathArrayOfValues), nil
}

func MustParseResetActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ResetActivationRequest_FieldPathArrayOfValues {
	fpaov, err := ParseResetActivationRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResetActivationRequest_FieldTerminalPathArrayOfValues struct {
	ResetActivationRequest_FieldTerminalPath
	values interface{}
}

var _ ResetActivationRequest_FieldPathArrayOfValues = (*ResetActivationRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResetActivationRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResetActivationRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ResetActivationRequest_FieldPathSelectorToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ResetActivationRequest_FieldPathSelectorSendActivationInvitation:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResetActivationRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ResetActivationRequest_FieldTerminalPathArrayOfValues) AsTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ResetActivationRequest_FieldTerminalPathArrayOfValues) AsSendActivationInvitationArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
