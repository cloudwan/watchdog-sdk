// Code generated by protoc-gen-goten-validate
// File: watchdog/proto/v1alpha/activation_custom.proto
// DO NOT EDIT!!!

package activation_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	iam_service_account_key "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account_key"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = durationpb.Duration{}
	_ = timestamppb.Timestamp{}
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &iam_service_account_key.ServiceAccountKey{}
	_ = &probe.Probe{}
)

func (obj *ActivationRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Msg.(type) {
	case *ActivationRequest_Activate_:
		if subobj, ok := interface{}(opt.Activate).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ActivationRequest", "activate", opt.Activate, "nested object validation failed", err)
			}
		}
	case *ActivationRequest_ConfirmActivation_:
		if subobj, ok := interface{}(opt.ConfirmActivation).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ActivationRequest", "confirmActivation", opt.ConfirmActivation, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ActivationRequest_Activate) GotenValidate() error {
	if obj == nil {
		return nil
	}
	{
		rlen := utf8.RuneCountInString(obj.Token)
		if rlen < 1 {
			return gotenvalidate.NewValidationError("Activate", "token", obj.Token, "field must contain at least 1 characters", nil)
		}
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Activate", "token", obj.Token, "field must contain at most 64 characters", nil)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.ClientCookie)
		if rlen < 0 {
			return gotenvalidate.NewValidationError("Activate", "clientCookie", obj.ClientCookie, "field must contain at least 0 characters", nil)
		}
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Activate", "clientCookie", obj.ClientCookie, "field must contain at most 64 characters", nil)
		}
	}
	if subobj, ok := interface{}(obj.Probe).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Activate", "probe", obj.Probe, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ActivationRequest_ConfirmActivation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	{
		rlen := utf8.RuneCountInString(obj.ClientCookie)
		if rlen < 0 {
			return gotenvalidate.NewValidationError("ConfirmActivation", "clientCookie", obj.ClientCookie, "field must contain at least 0 characters", nil)
		}
		if rlen > 64 {
			return gotenvalidate.NewValidationError("ConfirmActivation", "clientCookie", obj.ClientCookie, "field must contain at most 64 characters", nil)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ActivationResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Msg.(type) {
	case *ActivationResponse_Activated_:
		if subobj, ok := interface{}(opt.Activated).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ActivationResponse", "activated", opt.Activated, "nested object validation failed", err)
			}
		}
	case *ActivationResponse_ConfirmActivationAck_:
		if subobj, ok := interface{}(opt.ConfirmActivationAck).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ActivationResponse", "confirmActivationAck", opt.ConfirmActivationAck, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ActivationResponse_Activated) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Probe).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Activated", "probe", obj.Probe, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ServiceAccountKey).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Activated", "serviceAccountKey", obj.ServiceAccountKey, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ActivationResponse_ConfirmActivationAck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *SendActivationInvitationRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResetActivationRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
