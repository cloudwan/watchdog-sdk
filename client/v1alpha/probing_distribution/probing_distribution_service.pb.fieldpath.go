// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/probing_distribution_service.proto
// DO NOT EDIT!!!

package probing_distribution_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProbingDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProbingDistributionRequest_FieldPathSelector
	Get(source *GetProbingDistributionRequest) []interface{}
	GetSingle(source *GetProbingDistributionRequest) (interface{}, bool)
	ClearValue(item *GetProbingDistributionRequest)

	// Those methods build corresponding GetProbingDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProbingDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProbingDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProbingDistributionRequest_FieldPathArrayItemValue
}

type GetProbingDistributionRequest_FieldPathSelector int32

const (
	GetProbingDistributionRequest_FieldPathSelectorName      GetProbingDistributionRequest_FieldPathSelector = 0
	GetProbingDistributionRequest_FieldPathSelectorFieldMask GetProbingDistributionRequest_FieldPathSelector = 1
	GetProbingDistributionRequest_FieldPathSelectorView      GetProbingDistributionRequest_FieldPathSelector = 2
)

func (s GetProbingDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		return "name"
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProbingDistributionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", s))
	}
}

func BuildGetProbingDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProbingDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProbingDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProbingDistributionRequest_FieldTerminalPath{selector: GetProbingDistributionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProbingDistributionRequest", fp)
}

func ParseGetProbingDistributionRequest_FieldPath(rawField string) (GetProbingDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProbingDistributionRequest_FieldPath(fp)
}

func MustParseGetProbingDistributionRequest_FieldPath(rawField string) GetProbingDistributionRequest_FieldPath {
	fp, err := ParseGetProbingDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProbingDistributionRequest_FieldTerminalPath struct {
	selector GetProbingDistributionRequest_FieldPathSelector
}

var _ GetProbingDistributionRequest_FieldPath = (*GetProbingDistributionRequest_FieldTerminalPath)(nil)

func (fp *GetProbingDistributionRequest_FieldTerminalPath) Selector() GetProbingDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProbingDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProbingDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProbingDistributionRequest
func (fp *GetProbingDistributionRequest_FieldTerminalPath) Get(source *GetProbingDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProbingDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProbingDistributionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProbingDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source GetProbingDistributionRequest
func (fp *GetProbingDistributionRequest_FieldTerminalPath) GetSingle(source *GetProbingDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProbingDistributionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProbingDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		return (*probing_distribution.Reference)(nil)
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case GetProbingDistributionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) ClearValue(item *GetProbingDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case GetProbingDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProbingDistributionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProbingDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProbingDistributionRequest_FieldPathSelectorName ||
		fp.selector == GetProbingDistributionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProbingDistributionRequest_FieldPathSelectorView
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) GetProbingDistributionRequest_FieldPathValue {
	switch fp.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		return &GetProbingDistributionRequest_FieldTerminalPathValue{GetProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		return &GetProbingDistributionRequest_FieldTerminalPathValue{GetProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case GetProbingDistributionRequest_FieldPathSelectorView:
		return &GetProbingDistributionRequest_FieldTerminalPathValue{GetProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov := &GetProbingDistributionRequest_FieldTerminalPathArrayOfValues{GetProbingDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		return &GetProbingDistributionRequest_FieldTerminalPathArrayOfValues{GetProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Reference)}
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		return &GetProbingDistributionRequest_FieldTerminalPathArrayOfValues{GetProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case GetProbingDistributionRequest_FieldPathSelectorView:
		return &GetProbingDistributionRequest_FieldTerminalPathArrayOfValues{GetProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProbingDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetProbingDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProbingDistributionRequest_FieldPathValue allows storing values for GetProbingDistributionRequest fields according to their type
type GetProbingDistributionRequest_FieldPathValue interface {
	GetProbingDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProbingDistributionRequest)
	CompareWith(*GetProbingDistributionRequest) (cmp int, comparable bool)
}

func ParseGetProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) (GetProbingDistributionRequest_FieldPathValue, error) {
	fp, err := ParseGetProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProbingDistributionRequest_FieldPathValue), nil
}

func MustParseGetProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) GetProbingDistributionRequest_FieldPathValue {
	fpv, err := ParseGetProbingDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProbingDistributionRequest_FieldTerminalPathValue struct {
	GetProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingDistributionRequest_FieldPathValue = (*GetProbingDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProbingDistributionRequest' as interface{}
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) AsNameValue() (*probing_distribution.Reference, bool) {
	res, ok := fpv.value.(*probing_distribution.Reference)
	return res, ok
}
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProbingDistributionRequest
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) SetTo(target **GetProbingDistributionRequest) {
	if *target == nil {
		*target = new(GetProbingDistributionRequest)
	}
	switch fpv.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_distribution.Reference)
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case GetProbingDistributionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProbingDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProbingDistributionRequest_FieldTerminalPathValue' with the value under path in 'GetProbingDistributionRequest'.
func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) CompareWith(source *GetProbingDistributionRequest) (int, bool) {
	switch fpv.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProbingDistributionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *GetProbingDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProbingDistributionRequest))
}

// GetProbingDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProbingDistributionRequest according to their type
// Present only for array (repeated) types.
type GetProbingDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProbingDistributionRequest_FieldPath
	ContainsValue(*GetProbingDistributionRequest) bool
}

// ParseGetProbingDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProbingDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProbingDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProbingDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProbingDistributionRequest_FieldTerminalPathArrayItemValue struct {
	GetProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ GetProbingDistributionRequest_FieldPathArrayItemValue = (*GetProbingDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProbingDistributionRequest as interface{}
func (fpaiv *GetProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProbingDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProbingDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProbingDistributionRequest'
func (fpaiv *GetProbingDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProbingDistributionRequest) bool {
	slice := fpaiv.GetProbingDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProbingDistributionRequest_FieldPathArrayOfValues allows storing slice of values for GetProbingDistributionRequest fields according to their type
type GetProbingDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProbingDistributionRequest_FieldPath
}

func ParseGetProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProbingDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProbingDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProbingDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProbingDistributionRequest_FieldTerminalPathArrayOfValues struct {
	GetProbingDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ GetProbingDistributionRequest_FieldPathArrayOfValues = (*GetProbingDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProbingDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProbingDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case GetProbingDistributionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case GetProbingDistributionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *GetProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *GetProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingDistributionsRequest_FieldPathSelector
	Get(source *BatchGetProbingDistributionsRequest) []interface{}
	GetSingle(source *BatchGetProbingDistributionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProbingDistributionsRequest)

	// Those methods build corresponding BatchGetProbingDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingDistributionsRequest_FieldPathArrayItemValue
}

type BatchGetProbingDistributionsRequest_FieldPathSelector int32

const (
	BatchGetProbingDistributionsRequest_FieldPathSelectorParent    BatchGetProbingDistributionsRequest_FieldPathSelector = 0
	BatchGetProbingDistributionsRequest_FieldPathSelectorNames     BatchGetProbingDistributionsRequest_FieldPathSelector = 1
	BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask BatchGetProbingDistributionsRequest_FieldPathSelector = 2
	BatchGetProbingDistributionsRequest_FieldPathSelectorView      BatchGetProbingDistributionsRequest_FieldPathSelector = 3
)

func (s BatchGetProbingDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", s))
	}
}

func BuildBatchGetProbingDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProbingDistributionsRequest_FieldTerminalPath{selector: BatchGetProbingDistributionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingDistributionsRequest", fp)
}

func ParseBatchGetProbingDistributionsRequest_FieldPath(rawField string) (BatchGetProbingDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingDistributionsRequest_FieldPath(fp)
}

func MustParseBatchGetProbingDistributionsRequest_FieldPath(rawField string) BatchGetProbingDistributionsRequest_FieldPath {
	fp, err := ParseBatchGetProbingDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingDistributionsRequest_FieldTerminalPath struct {
	selector BatchGetProbingDistributionsRequest_FieldPathSelector
}

var _ BatchGetProbingDistributionsRequest_FieldPath = (*BatchGetProbingDistributionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) Selector() BatchGetProbingDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingDistributionsRequest
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) Get(source *BatchGetProbingDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingDistributionsRequest
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) GetSingle(source *BatchGetProbingDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		return (*probing_distribution.Reference)(nil)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return ([]*probing_distribution.Reference)(nil)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) ClearValue(item *BatchGetProbingDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingDistributionsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetProbingDistributionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProbingDistributionsRequest_FieldPathSelectorView
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathValue{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathValue{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.([]*probing_distribution.Reference)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathValue{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathValue{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Reference)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.Reference)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue{BatchGetProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProbingDistributionsRequest_FieldPathValue allows storing values for BatchGetProbingDistributionsRequest fields according to their type
type BatchGetProbingDistributionsRequest_FieldPathValue interface {
	BatchGetProbingDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingDistributionsRequest)
	CompareWith(*BatchGetProbingDistributionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProbingDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingDistributionsRequest_FieldPathValue), nil
}

func MustParseBatchGetProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProbingDistributionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProbingDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingDistributionsRequest_FieldTerminalPathValue struct {
	BatchGetProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingDistributionsRequest_FieldPathValue = (*BatchGetProbingDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingDistributionsRequest' as interface{}
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_distribution.Reference, bool) {
	res, ok := fpv.value.(*probing_distribution.Reference)
	return res, ok
}
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*probing_distribution.Reference, bool) {
	res, ok := fpv.value.([]*probing_distribution.Reference)
	return res, ok
}
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingDistributionsRequest
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProbingDistributionsRequest) {
	if *target == nil {
		*target = new(BatchGetProbingDistributionsRequest)
	}
	switch fpv.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_distribution.Reference)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*probing_distribution.Reference)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingDistributionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProbingDistributionsRequest'.
func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProbingDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_distribution.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingDistributionsRequest))
}

// BatchGetProbingDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingDistributionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProbingDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingDistributionsRequest_FieldPath
	ContainsValue(*BatchGetProbingDistributionsRequest) bool
}

// ParseBatchGetProbingDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingDistributionsRequest_FieldPathArrayItemValue = (*BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingDistributionsRequest as interface{}
func (fpaiv *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*probing_distribution.Reference, bool) {
	res, ok := fpaiv.value.(*probing_distribution.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingDistributionsRequest'
func (fpaiv *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingDistributionsRequest) bool {
	slice := fpaiv.BatchGetProbingDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProbingDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingDistributionsRequest fields according to their type
type BatchGetProbingDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingDistributionsRequest_FieldPath
}

func ParseBatchGetProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingDistributionsRequest_FieldPathArrayOfValues = (*BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingDistributionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProbingDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProbingDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProbingDistributionsResponse_FieldPathSelector
	Get(source *BatchGetProbingDistributionsResponse) []interface{}
	GetSingle(source *BatchGetProbingDistributionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProbingDistributionsResponse)

	// Those methods build corresponding BatchGetProbingDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayItemValue
}

type BatchGetProbingDistributionsResponse_FieldPathSelector int32

const (
	BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions BatchGetProbingDistributionsResponse_FieldPathSelector = 0
	BatchGetProbingDistributionsResponse_FieldPathSelectorMissing              BatchGetProbingDistributionsResponse_FieldPathSelector = 1
)

func (s BatchGetProbingDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return "probing_distributions"
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", s))
	}
}

func BuildBatchGetProbingDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProbingDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProbingDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_distributions", "probingDistributions", "probing-distributions":
			return &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions}, nil
		case "missing":
			return &BatchGetProbingDistributionsResponse_FieldTerminalPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "probing_distributions", "probingDistributions", "probing-distributions":
			if subpath, err := probing_distribution.BuildProbingDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProbingDistributionsResponse_FieldSubPath{selector: BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProbingDistributionsResponse", fp)
}

func ParseBatchGetProbingDistributionsResponse_FieldPath(rawField string) (BatchGetProbingDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProbingDistributionsResponse_FieldPath(fp)
}

func MustParseBatchGetProbingDistributionsResponse_FieldPath(rawField string) BatchGetProbingDistributionsResponse_FieldPath {
	fp, err := ParseBatchGetProbingDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProbingDistributionsResponse_FieldTerminalPath struct {
	selector BatchGetProbingDistributionsResponse_FieldPathSelector
}

var _ BatchGetProbingDistributionsResponse_FieldPath = (*BatchGetProbingDistributionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) Selector() BatchGetProbingDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProbingDistributionsResponse
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) Get(source *BatchGetProbingDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			for _, value := range source.GetProbingDistributions() {
				values = append(values, value)
			}
		case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProbingDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProbingDistributionsResponse
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) GetSingle(source *BatchGetProbingDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		res := source.GetProbingDistributions()
		return res, res != nil
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return ([]*probing_distribution.ProbingDistribution)(nil)
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return ([]*probing_distribution.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) ClearValue(item *BatchGetProbingDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			item.ProbingDistributions = nil
		case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProbingDistributionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathValue{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_distribution.ProbingDistribution)}
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathValue{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.ProbingDistribution)}
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution)}
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue{BatchGetProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProbingDistributionsResponse_FieldSubPath struct {
	selector BatchGetProbingDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProbingDistributionsResponse_FieldPath = (*BatchGetProbingDistributionsResponse_FieldSubPath)(nil)

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) Selector() BatchGetProbingDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) AsProbingDistributionsSubPath() (probing_distribution.ProbingDistribution_FieldPath, bool) {
	res, ok := fps.subPath.(probing_distribution.ProbingDistribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProbingDistributionsResponse
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) Get(source *BatchGetProbingDistributionsResponse) (values []interface{}) {
	if asProbingDistributionFieldPath, ok := fps.AsProbingDistributionsSubPath(); ok {
		for _, item := range source.GetProbingDistributions() {
			values = append(values, asProbingDistributionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProbingDistributionsResponse))
}

// GetSingle returns value of selected field from source BatchGetProbingDistributionsResponse
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) GetSingle(source *BatchGetProbingDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		if len(source.GetProbingDistributions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingDistributions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) ClearValue(item *BatchGetProbingDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			for _, subItem := range item.ProbingDistributions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathValue {
	return &BatchGetProbingDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayOfValues {
	return &BatchGetProbingDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProbingDistributionsResponse_FieldPathArrayItemValue {
	return &BatchGetProbingDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProbingDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProbingDistributionsResponse_FieldPathValue allows storing values for BatchGetProbingDistributionsResponse fields according to their type
type BatchGetProbingDistributionsResponse_FieldPathValue interface {
	BatchGetProbingDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProbingDistributionsResponse)
	CompareWith(*BatchGetProbingDistributionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProbingDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProbingDistributionsResponse_FieldPathValue), nil
}

func MustParseBatchGetProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProbingDistributionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProbingDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProbingDistributionsResponse_FieldTerminalPathValue struct {
	BatchGetProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingDistributionsResponse_FieldPathValue = (*BatchGetProbingDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProbingDistributionsResponse' as interface{}
func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) AsProbingDistributionsValue() ([]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpv.value.([]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*probing_distribution.Reference, bool) {
	res, ok := fpv.value.([]*probing_distribution.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProbingDistributionsResponse
func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProbingDistributionsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingDistributionsResponse)
	}
	switch fpv.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		(*target).ProbingDistributions = fpv.value.([]*probing_distribution.ProbingDistribution)
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*probing_distribution.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProbingDistributionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProbingDistributionsResponse'.
func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProbingDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return 0, false
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProbingDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProbingDistributionsResponse))
}

type BatchGetProbingDistributionsResponse_FieldSubPathValue struct {
	BatchGetProbingDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProbingDistributionsResponse_FieldPathValue = (*BatchGetProbingDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) AsProbingDistributionsPathValue() (probing_distribution.ProbingDistribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) SetTo(target **BatchGetProbingDistributionsResponse) {
	if *target == nil {
		*target = new(BatchGetProbingDistributionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProbingDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) CompareWith(source *BatchGetProbingDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProbingDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProbingDistributionsResponse))
}

// BatchGetProbingDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProbingDistributionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProbingDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProbingDistributionsResponse_FieldPath
	ContainsValue(*BatchGetProbingDistributionsResponse) bool
}

// ParseBatchGetProbingDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProbingDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProbingDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProbingDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProbingDistributionsResponse_FieldPathArrayItemValue = (*BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProbingDistributionsResponse as interface{}
func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) AsProbingDistributionsItemValue() (*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaiv.value.(*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*probing_distribution.Reference, bool) {
	res, ok := fpaiv.value.(*probing_distribution.Reference)
	return res, ok
}

func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProbingDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProbingDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingDistributionsResponse'
func (fpaiv *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProbingDistributionsResponse) bool {
	slice := fpaiv.BatchGetProbingDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProbingDistributionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProbingDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProbingDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProbingDistributionsResponse_FieldSubPathArrayItemValue) AsProbingDistributionsPathItemValue() (probing_distribution.ProbingDistribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProbingDistributionsResponse'
func (fpaivs *BatchGetProbingDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProbingDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProbingDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProbingDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProbingDistributionsResponse fields according to their type
type BatchGetProbingDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProbingDistributionsResponse_FieldPath
}

func ParseBatchGetProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProbingDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProbingDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProbingDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProbingDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProbingDistributionsResponse_FieldPathArrayOfValues = (*BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		for _, v := range fpaov.values.([][]*probing_distribution.ProbingDistribution) {
			values = append(values, v)
		}
	case BatchGetProbingDistributionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*probing_distribution.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsProbingDistributionsArrayOfValues() ([][]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpaov *BatchGetProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.Reference)
	return res, ok
}

type BatchGetProbingDistributionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProbingDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProbingDistributionsResponse_FieldPathArrayOfValues = (*BatchGetProbingDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProbingDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProbingDistributionsResponse_FieldSubPathArrayOfValues) AsProbingDistributionsPathArrayOfValues() (probing_distribution.ProbingDistribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_distribution.ProbingDistribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingDistributionsRequest_FieldPathSelector
	Get(source *ListProbingDistributionsRequest) []interface{}
	GetSingle(source *ListProbingDistributionsRequest) (interface{}, bool)
	ClearValue(item *ListProbingDistributionsRequest)

	// Those methods build corresponding ListProbingDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingDistributionsRequest_FieldPathArrayItemValue
}

type ListProbingDistributionsRequest_FieldPathSelector int32

const (
	ListProbingDistributionsRequest_FieldPathSelectorParent    ListProbingDistributionsRequest_FieldPathSelector = 0
	ListProbingDistributionsRequest_FieldPathSelectorPageSize  ListProbingDistributionsRequest_FieldPathSelector = 1
	ListProbingDistributionsRequest_FieldPathSelectorPageToken ListProbingDistributionsRequest_FieldPathSelector = 2
	ListProbingDistributionsRequest_FieldPathSelectorOrderBy   ListProbingDistributionsRequest_FieldPathSelector = 3
	ListProbingDistributionsRequest_FieldPathSelectorFilter    ListProbingDistributionsRequest_FieldPathSelector = 4
	ListProbingDistributionsRequest_FieldPathSelectorFieldMask ListProbingDistributionsRequest_FieldPathSelector = 5
	ListProbingDistributionsRequest_FieldPathSelectorView      ListProbingDistributionsRequest_FieldPathSelector = 6
)

func (s ListProbingDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", s))
	}
}

func BuildListProbingDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProbingDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProbingDistributionsRequest_FieldTerminalPath{selector: ListProbingDistributionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingDistributionsRequest", fp)
}

func ParseListProbingDistributionsRequest_FieldPath(rawField string) (ListProbingDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingDistributionsRequest_FieldPath(fp)
}

func MustParseListProbingDistributionsRequest_FieldPath(rawField string) ListProbingDistributionsRequest_FieldPath {
	fp, err := ParseListProbingDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingDistributionsRequest_FieldTerminalPath struct {
	selector ListProbingDistributionsRequest_FieldPathSelector
}

var _ ListProbingDistributionsRequest_FieldPath = (*ListProbingDistributionsRequest_FieldTerminalPath)(nil)

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) Selector() ListProbingDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingDistributionsRequest
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) Get(source *ListProbingDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingDistributionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProbingDistributionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProbingDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProbingDistributionsRequest
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) GetSingle(source *ListProbingDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		return (*probing_distribution.ParentName)(nil)
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return (*probing_distribution.OrderBy)(nil)
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		return (*probing_distribution.Filter)(nil)
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) ClearValue(item *ListProbingDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProbingDistributionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProbingDistributionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProbingDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingDistributionsRequest_FieldPathSelectorParent ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProbingDistributionsRequest_FieldPathSelectorView
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProbingDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ParentName)}
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.OrderBy)}
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Filter)}
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		return &ListProbingDistributionsRequest_FieldTerminalPathValue{ListProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ParentName)}
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.OrderBy)}
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Filter)}
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		return &ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues{ListProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProbingDistributionsRequest_FieldPathValue allows storing values for ListProbingDistributionsRequest fields according to their type
type ListProbingDistributionsRequest_FieldPathValue interface {
	ListProbingDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingDistributionsRequest)
	CompareWith(*ListProbingDistributionsRequest) (cmp int, comparable bool)
}

func ParseListProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) (ListProbingDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseListProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingDistributionsRequest_FieldPathValue), nil
}

func MustParseListProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) ListProbingDistributionsRequest_FieldPathValue {
	fpv, err := ParseListProbingDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingDistributionsRequest_FieldTerminalPathValue struct {
	ListProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingDistributionsRequest_FieldPathValue = (*ListProbingDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingDistributionsRequest' as interface{}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_distribution.ParentName, bool) {
	res, ok := fpv.value.(*probing_distribution.ParentName)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_distribution.OrderBy, bool) {
	res, ok := fpv.value.(*probing_distribution.OrderBy)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_distribution.Filter, bool) {
	res, ok := fpv.value.(*probing_distribution.Filter)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingDistributionsRequest
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) SetTo(target **ListProbingDistributionsRequest) {
	if *target == nil {
		*target = new(ListProbingDistributionsRequest)
	}
	switch fpv.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_distribution.ParentName)
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_distribution.PagerCursor)
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_distribution.OrderBy)
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_distribution.Filter)
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingDistributionsRequest_FieldTerminalPathValue' with the value under path in 'ListProbingDistributionsRequest'.
func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) CompareWith(source *ListProbingDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_distribution.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProbingDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingDistributionsRequest))
}

// ListProbingDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingDistributionsRequest according to their type
// Present only for array (repeated) types.
type ListProbingDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingDistributionsRequest_FieldPath
	ContainsValue(*ListProbingDistributionsRequest) bool
}

// ParseListProbingDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	ListProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProbingDistributionsRequest_FieldPathArrayItemValue = (*ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingDistributionsRequest as interface{}
func (fpaiv *ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingDistributionsRequest'
func (fpaiv *ListProbingDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingDistributionsRequest) bool {
	slice := fpaiv.ListProbingDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProbingDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for ListProbingDistributionsRequest fields according to their type
type ListProbingDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingDistributionsRequest_FieldPath
}

func ParseListProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	ListProbingDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProbingDistributionsRequest_FieldPathArrayOfValues = (*ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingDistributionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_distribution.ParentName) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_distribution.OrderBy) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_distribution.Filter) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case ListProbingDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_distribution.ParentName, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ParentName)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_distribution.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_distribution.OrderBy)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_distribution.Filter, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Filter)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *ListProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProbingDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProbingDistributionsResponse_FieldPathSelector
	Get(source *ListProbingDistributionsResponse) []interface{}
	GetSingle(source *ListProbingDistributionsResponse) (interface{}, bool)
	ClearValue(item *ListProbingDistributionsResponse)

	// Those methods build corresponding ListProbingDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProbingDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProbingDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProbingDistributionsResponse_FieldPathArrayItemValue
}

type ListProbingDistributionsResponse_FieldPathSelector int32

const (
	ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions ListProbingDistributionsResponse_FieldPathSelector = 0
	ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken        ListProbingDistributionsResponse_FieldPathSelector = 1
	ListProbingDistributionsResponse_FieldPathSelectorNextPageToken        ListProbingDistributionsResponse_FieldPathSelector = 2
)

func (s ListProbingDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return "probing_distributions"
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", s))
	}
}

func BuildListProbingDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProbingDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProbingDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_distributions", "probingDistributions", "probing-distributions":
			return &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProbingDistributionsResponse_FieldTerminalPath{selector: ListProbingDistributionsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "probing_distributions", "probingDistributions", "probing-distributions":
			if subpath, err := probing_distribution.BuildProbingDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProbingDistributionsResponse_FieldSubPath{selector: ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProbingDistributionsResponse", fp)
}

func ParseListProbingDistributionsResponse_FieldPath(rawField string) (ListProbingDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProbingDistributionsResponse_FieldPath(fp)
}

func MustParseListProbingDistributionsResponse_FieldPath(rawField string) ListProbingDistributionsResponse_FieldPath {
	fp, err := ParseListProbingDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProbingDistributionsResponse_FieldTerminalPath struct {
	selector ListProbingDistributionsResponse_FieldPathSelector
}

var _ ListProbingDistributionsResponse_FieldPath = (*ListProbingDistributionsResponse_FieldTerminalPath)(nil)

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) Selector() ListProbingDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProbingDistributionsResponse
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) Get(source *ListProbingDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			for _, value := range source.GetProbingDistributions() {
				values = append(values, value)
			}
		case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProbingDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProbingDistributionsResponse
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) GetSingle(source *ListProbingDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		res := source.GetProbingDistributions()
		return res, res != nil
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return ([]*probing_distribution.ProbingDistribution)(nil)
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) ClearValue(item *ListProbingDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			item.ProbingDistributions = nil
		case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProbingDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProbingDistributionsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProbingDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &ListProbingDistributionsResponse_FieldTerminalPathValue{ListProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_distribution.ProbingDistribution)}
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingDistributionsResponse_FieldTerminalPathValue{ListProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingDistributionsResponse_FieldTerminalPathValue{ListProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues{ListProbingDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues{ListProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.ProbingDistribution)}
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		return &ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues{ListProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		return &ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues{ListProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProbingDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return &ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue{ListProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProbingDistributionsResponse_FieldSubPath struct {
	selector ListProbingDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProbingDistributionsResponse_FieldPath = (*ListProbingDistributionsResponse_FieldSubPath)(nil)

func (fps *ListProbingDistributionsResponse_FieldSubPath) Selector() ListProbingDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProbingDistributionsResponse_FieldSubPath) AsProbingDistributionsSubPath() (probing_distribution.ProbingDistribution_FieldPath, bool) {
	res, ok := fps.subPath.(probing_distribution.ProbingDistribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProbingDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProbingDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProbingDistributionsResponse
func (fps *ListProbingDistributionsResponse_FieldSubPath) Get(source *ListProbingDistributionsResponse) (values []interface{}) {
	if asProbingDistributionFieldPath, ok := fps.AsProbingDistributionsSubPath(); ok {
		for _, item := range source.GetProbingDistributions() {
			values = append(values, asProbingDistributionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProbingDistributionsResponse))
}

// GetSingle returns value of selected field from source ListProbingDistributionsResponse
func (fps *ListProbingDistributionsResponse_FieldSubPath) GetSingle(source *ListProbingDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		if len(source.GetProbingDistributions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingDistributions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fps.selector))
	}
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProbingDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) ClearValue(item *ListProbingDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
			for _, subItem := range item.ProbingDistributions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProbingDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithIValue(value interface{}) ListProbingDistributionsResponse_FieldPathValue {
	return &ListProbingDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProbingDistributionsResponse_FieldPathArrayOfValues {
	return &ListProbingDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProbingDistributionsResponse_FieldPathArrayItemValue {
	return &ListProbingDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProbingDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProbingDistributionsResponse_FieldPathValue allows storing values for ListProbingDistributionsResponse fields according to their type
type ListProbingDistributionsResponse_FieldPathValue interface {
	ListProbingDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProbingDistributionsResponse)
	CompareWith(*ListProbingDistributionsResponse) (cmp int, comparable bool)
}

func ParseListProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) (ListProbingDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseListProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProbingDistributionsResponse_FieldPathValue), nil
}

func MustParseListProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) ListProbingDistributionsResponse_FieldPathValue {
	fpv, err := ParseListProbingDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProbingDistributionsResponse_FieldTerminalPathValue struct {
	ListProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingDistributionsResponse_FieldPathValue = (*ListProbingDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProbingDistributionsResponse' as interface{}
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) AsProbingDistributionsValue() ([]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpv.value.([]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProbingDistributionsResponse
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) SetTo(target **ListProbingDistributionsResponse) {
	if *target == nil {
		*target = new(ListProbingDistributionsResponse)
	}
	switch fpv.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		(*target).ProbingDistributions = fpv.value.([]*probing_distribution.ProbingDistribution)
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_distribution.PagerCursor)
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_distribution.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProbingDistributionsResponse_FieldTerminalPathValue' with the value under path in 'ListProbingDistributionsResponse'.
func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) CompareWith(source *ListProbingDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return 0, false
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProbingDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProbingDistributionsResponse))
}

type ListProbingDistributionsResponse_FieldSubPathValue struct {
	ListProbingDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProbingDistributionsResponse_FieldPathValue = (*ListProbingDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) AsProbingDistributionsPathValue() (probing_distribution.ProbingDistribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue)
	return res, ok
}

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) SetTo(target **ListProbingDistributionsResponse) {
	if *target == nil {
		*target = new(ListProbingDistributionsResponse)
	}
	switch fpvs.Selector() {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProbingDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) CompareWith(source *ListProbingDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProbingDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProbingDistributionsResponse))
}

// ListProbingDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProbingDistributionsResponse according to their type
// Present only for array (repeated) types.
type ListProbingDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProbingDistributionsResponse_FieldPath
	ContainsValue(*ListProbingDistributionsResponse) bool
}

// ParseListProbingDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProbingDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProbingDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProbingDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	ListProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProbingDistributionsResponse_FieldPathArrayItemValue = (*ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProbingDistributionsResponse as interface{}
func (fpaiv *ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue) AsProbingDistributionsItemValue() (*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaiv.value.(*probing_distribution.ProbingDistribution)
	return res, ok
}

func (fpaiv *ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProbingDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProbingDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingDistributionsResponse'
func (fpaiv *ListProbingDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProbingDistributionsResponse) bool {
	slice := fpaiv.ListProbingDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProbingDistributionsResponse_FieldSubPathArrayItemValue struct {
	ListProbingDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProbingDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProbingDistributionsResponse_FieldSubPathArrayItemValue) AsProbingDistributionsPathItemValue() (probing_distribution.ProbingDistribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProbingDistributionsResponse'
func (fpaivs *ListProbingDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProbingDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProbingDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// ListProbingDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for ListProbingDistributionsResponse fields according to their type
type ListProbingDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProbingDistributionsResponse_FieldPath
}

func ParseListProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProbingDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProbingDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProbingDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	ListProbingDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProbingDistributionsResponse_FieldPathArrayOfValues = (*ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProbingDistributionsResponse_FieldPathSelectorProbingDistributions:
		for _, v := range fpaov.values.([][]*probing_distribution.ProbingDistribution) {
			values = append(values, v)
		}
	case ListProbingDistributionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	case ListProbingDistributionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsProbingDistributionsArrayOfValues() ([][]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpaov *ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}
func (fpaov *ListProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}

type ListProbingDistributionsResponse_FieldSubPathArrayOfValues struct {
	ListProbingDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProbingDistributionsResponse_FieldPathArrayOfValues = (*ListProbingDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProbingDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProbingDistributionsResponse_FieldSubPathArrayOfValues) AsProbingDistributionsPathArrayOfValues() (probing_distribution.ProbingDistribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_distribution.ProbingDistribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingDistributionRequest_FieldPathSelector
	Get(source *WatchProbingDistributionRequest) []interface{}
	GetSingle(source *WatchProbingDistributionRequest) (interface{}, bool)
	ClearValue(item *WatchProbingDistributionRequest)

	// Those methods build corresponding WatchProbingDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingDistributionRequest_FieldPathArrayItemValue
}

type WatchProbingDistributionRequest_FieldPathSelector int32

const (
	WatchProbingDistributionRequest_FieldPathSelectorName      WatchProbingDistributionRequest_FieldPathSelector = 0
	WatchProbingDistributionRequest_FieldPathSelectorFieldMask WatchProbingDistributionRequest_FieldPathSelector = 1
	WatchProbingDistributionRequest_FieldPathSelectorView      WatchProbingDistributionRequest_FieldPathSelector = 2
)

func (s WatchProbingDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		return "name"
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", s))
	}
}

func BuildWatchProbingDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingDistributionRequest_FieldTerminalPath{selector: WatchProbingDistributionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingDistributionRequest", fp)
}

func ParseWatchProbingDistributionRequest_FieldPath(rawField string) (WatchProbingDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingDistributionRequest_FieldPath(fp)
}

func MustParseWatchProbingDistributionRequest_FieldPath(rawField string) WatchProbingDistributionRequest_FieldPath {
	fp, err := ParseWatchProbingDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingDistributionRequest_FieldTerminalPath struct {
	selector WatchProbingDistributionRequest_FieldPathSelector
}

var _ WatchProbingDistributionRequest_FieldPath = (*WatchProbingDistributionRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) Selector() WatchProbingDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingDistributionRequest
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) Get(source *WatchProbingDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingDistributionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingDistributionRequest
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) GetSingle(source *WatchProbingDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		return (*probing_distribution.Reference)(nil)
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) ClearValue(item *WatchProbingDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingDistributionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingDistributionRequest_FieldPathSelectorName ||
		fp.selector == WatchProbingDistributionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingDistributionRequest_FieldPathSelectorView
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingDistributionRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		return &WatchProbingDistributionRequest_FieldTerminalPathValue{WatchProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		return &WatchProbingDistributionRequest_FieldTerminalPathValue{WatchProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		return &WatchProbingDistributionRequest_FieldTerminalPathValue{WatchProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		return &WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Reference)}
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		return &WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		return &WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingDistributionRequest_FieldPathValue allows storing values for WatchProbingDistributionRequest fields according to their type
type WatchProbingDistributionRequest_FieldPathValue interface {
	WatchProbingDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingDistributionRequest)
	CompareWith(*WatchProbingDistributionRequest) (cmp int, comparable bool)
}

func ParseWatchProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingDistributionRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingDistributionRequest_FieldPathValue), nil
}

func MustParseWatchProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) WatchProbingDistributionRequest_FieldPathValue {
	fpv, err := ParseWatchProbingDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingDistributionRequest_FieldTerminalPathValue struct {
	WatchProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionRequest_FieldPathValue = (*WatchProbingDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingDistributionRequest' as interface{}
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) AsNameValue() (*probing_distribution.Reference, bool) {
	res, ok := fpv.value.(*probing_distribution.Reference)
	return res, ok
}
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingDistributionRequest
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) SetTo(target **WatchProbingDistributionRequest) {
	if *target == nil {
		*target = new(WatchProbingDistributionRequest)
	}
	switch fpv.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_distribution.Reference)
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingDistributionRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingDistributionRequest'.
func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingDistributionRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingDistributionRequest))
}

// WatchProbingDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingDistributionRequest according to their type
// Present only for array (repeated) types.
type WatchProbingDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingDistributionRequest_FieldPath
	ContainsValue(*WatchProbingDistributionRequest) bool
}

// ParseWatchProbingDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionRequest_FieldPathArrayItemValue = (*WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingDistributionRequest as interface{}
func (fpaiv *WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingDistributionRequest'
func (fpaiv *WatchProbingDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingDistributionRequest) bool {
	slice := fpaiv.WatchProbingDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingDistributionRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingDistributionRequest fields according to their type
type WatchProbingDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingDistributionRequest_FieldPath
}

func ParseWatchProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingDistributionRequest_FieldPathArrayOfValues = (*WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case WatchProbingDistributionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingDistributionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingDistributionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingDistributionResponse_FieldPathSelector
	Get(source *WatchProbingDistributionResponse) []interface{}
	GetSingle(source *WatchProbingDistributionResponse) (interface{}, bool)
	ClearValue(item *WatchProbingDistributionResponse)

	// Those methods build corresponding WatchProbingDistributionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingDistributionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingDistributionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingDistributionResponse_FieldPathArrayItemValue
}

type WatchProbingDistributionResponse_FieldPathSelector int32

const (
	WatchProbingDistributionResponse_FieldPathSelectorChange WatchProbingDistributionResponse_FieldPathSelector = 0
)

func (s WatchProbingDistributionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", s))
	}
}

func BuildWatchProbingDistributionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingDistributionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingDistributionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProbingDistributionResponse_FieldTerminalPath{selector: WatchProbingDistributionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingDistributionResponse", fp)
}

func ParseWatchProbingDistributionResponse_FieldPath(rawField string) (WatchProbingDistributionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingDistributionResponse_FieldPath(fp)
}

func MustParseWatchProbingDistributionResponse_FieldPath(rawField string) WatchProbingDistributionResponse_FieldPath {
	fp, err := ParseWatchProbingDistributionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingDistributionResponse_FieldTerminalPath struct {
	selector WatchProbingDistributionResponse_FieldPathSelector
}

var _ WatchProbingDistributionResponse_FieldPath = (*WatchProbingDistributionResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) Selector() WatchProbingDistributionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingDistributionResponse
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) Get(source *WatchProbingDistributionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingDistributionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingDistributionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingDistributionResponse
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) GetSingle(source *WatchProbingDistributionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingDistributionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		return (*probing_distribution.ProbingDistributionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) ClearValue(item *WatchProbingDistributionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingDistributionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingDistributionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingDistributionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingDistributionResponse_FieldPathSelectorChange
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingDistributionResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		return &WatchProbingDistributionResponse_FieldTerminalPathValue{WatchProbingDistributionResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		return &WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionResponse_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingDistributionResponse_FieldPathValue allows storing values for WatchProbingDistributionResponse fields according to their type
type WatchProbingDistributionResponse_FieldPathValue interface {
	WatchProbingDistributionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingDistributionResponse)
	CompareWith(*WatchProbingDistributionResponse) (cmp int, comparable bool)
}

func ParseWatchProbingDistributionResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingDistributionResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingDistributionResponse_FieldPathValue), nil
}

func MustParseWatchProbingDistributionResponse_FieldPathValue(pathStr, valueStr string) WatchProbingDistributionResponse_FieldPathValue {
	fpv, err := ParseWatchProbingDistributionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingDistributionResponse_FieldTerminalPathValue struct {
	WatchProbingDistributionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionResponse_FieldPathValue = (*WatchProbingDistributionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingDistributionResponse' as interface{}
func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) AsChangeValue() (*probing_distribution.ProbingDistributionChange, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistributionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingDistributionResponse
func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) SetTo(target **WatchProbingDistributionResponse) {
	if *target == nil {
		*target = new(WatchProbingDistributionResponse)
	}
	switch fpv.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*probing_distribution.ProbingDistributionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingDistributionResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingDistributionResponse'.
func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingDistributionResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingDistributionResponse))
}

// WatchProbingDistributionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingDistributionResponse according to their type
// Present only for array (repeated) types.
type WatchProbingDistributionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingDistributionResponse_FieldPath
	ContainsValue(*WatchProbingDistributionResponse) bool
}

// ParseWatchProbingDistributionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingDistributionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingDistributionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingDistributionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingDistributionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionResponse_FieldPathArrayItemValue = (*WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingDistributionResponse as interface{}
func (fpaiv *WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingDistributionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingDistributionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingDistributionResponse'
func (fpaiv *WatchProbingDistributionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingDistributionResponse) bool {
	slice := fpaiv.WatchProbingDistributionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingDistributionResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingDistributionResponse fields according to their type
type WatchProbingDistributionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingDistributionResponse_FieldPath
}

func ParseWatchProbingDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingDistributionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingDistributionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingDistributionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingDistributionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingDistributionResponse_FieldPathArrayOfValues = (*WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingDistributionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistributionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingDistributionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*probing_distribution.ProbingDistributionChange, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistributionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingDistributionsRequest_FieldPathSelector
	Get(source *WatchProbingDistributionsRequest) []interface{}
	GetSingle(source *WatchProbingDistributionsRequest) (interface{}, bool)
	ClearValue(item *WatchProbingDistributionsRequest)

	// Those methods build corresponding WatchProbingDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingDistributionsRequest_FieldPathArrayItemValue
}

type WatchProbingDistributionsRequest_FieldPathSelector int32

const (
	WatchProbingDistributionsRequest_FieldPathSelectorType         WatchProbingDistributionsRequest_FieldPathSelector = 0
	WatchProbingDistributionsRequest_FieldPathSelectorParent       WatchProbingDistributionsRequest_FieldPathSelector = 1
	WatchProbingDistributionsRequest_FieldPathSelectorPageSize     WatchProbingDistributionsRequest_FieldPathSelector = 2
	WatchProbingDistributionsRequest_FieldPathSelectorPageToken    WatchProbingDistributionsRequest_FieldPathSelector = 3
	WatchProbingDistributionsRequest_FieldPathSelectorOrderBy      WatchProbingDistributionsRequest_FieldPathSelector = 4
	WatchProbingDistributionsRequest_FieldPathSelectorResumeToken  WatchProbingDistributionsRequest_FieldPathSelector = 5
	WatchProbingDistributionsRequest_FieldPathSelectorFilter       WatchProbingDistributionsRequest_FieldPathSelector = 6
	WatchProbingDistributionsRequest_FieldPathSelectorFieldMask    WatchProbingDistributionsRequest_FieldPathSelector = 7
	WatchProbingDistributionsRequest_FieldPathSelectorView         WatchProbingDistributionsRequest_FieldPathSelector = 8
	WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize WatchProbingDistributionsRequest_FieldPathSelector = 9
)

func (s WatchProbingDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		return "type"
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		return "view"
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", s))
	}
}

func BuildWatchProbingDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProbingDistributionsRequest_FieldTerminalPath{selector: WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingDistributionsRequest", fp)
}

func ParseWatchProbingDistributionsRequest_FieldPath(rawField string) (WatchProbingDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingDistributionsRequest_FieldPath(fp)
}

func MustParseWatchProbingDistributionsRequest_FieldPath(rawField string) WatchProbingDistributionsRequest_FieldPath {
	fp, err := ParseWatchProbingDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingDistributionsRequest_FieldTerminalPath struct {
	selector WatchProbingDistributionsRequest_FieldPathSelector
}

var _ WatchProbingDistributionsRequest_FieldPath = (*WatchProbingDistributionsRequest_FieldTerminalPath)(nil)

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) Selector() WatchProbingDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingDistributionsRequest
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) Get(source *WatchProbingDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingDistributionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProbingDistributionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProbingDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProbingDistributionsRequest
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) GetSingle(source *WatchProbingDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		return (*probing_distribution.ParentReference)(nil)
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return (*probing_distribution.OrderBy)(nil)
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		return (*probing_distribution.Filter)(nil)
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) ClearValue(item *WatchProbingDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProbingDistributionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProbingDistributionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProbingDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorType ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorView ||
		fp.selector == WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProbingDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ParentReference)}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.OrderBy)}
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Filter)}
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingDistributionsRequest_FieldTerminalPathValue{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ParentReference)}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.OrderBy)}
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Filter)}
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues{WatchProbingDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingDistributionsRequest_FieldPathValue allows storing values for WatchProbingDistributionsRequest fields according to their type
type WatchProbingDistributionsRequest_FieldPathValue interface {
	WatchProbingDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingDistributionsRequest)
	CompareWith(*WatchProbingDistributionsRequest) (cmp int, comparable bool)
}

func ParseWatchProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) (WatchProbingDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingDistributionsRequest_FieldPathValue), nil
}

func MustParseWatchProbingDistributionsRequest_FieldPathValue(pathStr, valueStr string) WatchProbingDistributionsRequest_FieldPathValue {
	fpv, err := ParseWatchProbingDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingDistributionsRequest_FieldTerminalPathValue struct {
	WatchProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsRequest_FieldPathValue = (*WatchProbingDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingDistributionsRequest' as interface{}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsParentValue() (*probing_distribution.ParentReference, bool) {
	res, ok := fpv.value.(*probing_distribution.ParentReference)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsOrderByValue() (*probing_distribution.OrderBy, bool) {
	res, ok := fpv.value.(*probing_distribution.OrderBy)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsFilterValue() (*probing_distribution.Filter, bool) {
	res, ok := fpv.value.(*probing_distribution.Filter)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingDistributionsRequest
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) SetTo(target **WatchProbingDistributionsRequest) {
	if *target == nil {
		*target = new(WatchProbingDistributionsRequest)
	}
	switch fpv.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_distribution.ParentReference)
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*probing_distribution.PagerCursor)
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*probing_distribution.OrderBy)
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*probing_distribution.Filter)
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingDistributionsRequest_FieldTerminalPathValue' with the value under path in 'WatchProbingDistributionsRequest'.
func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) CompareWith(source *WatchProbingDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_distribution.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingDistributionsRequest))
}

// WatchProbingDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingDistributionsRequest according to their type
// Present only for array (repeated) types.
type WatchProbingDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingDistributionsRequest_FieldPath
	ContainsValue(*WatchProbingDistributionsRequest) bool
}

// ParseWatchProbingDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProbingDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsRequest_FieldPathArrayItemValue = (*WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingDistributionsRequest as interface{}
func (fpaiv *WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingDistributionsRequest'
func (fpaiv *WatchProbingDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingDistributionsRequest) bool {
	slice := fpaiv.WatchProbingDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProbingDistributionsRequest fields according to their type
type WatchProbingDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingDistributionsRequest_FieldPath
}

func ParseWatchProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProbingDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProbingDistributionsRequest_FieldPathArrayOfValues = (*WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingDistributionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_distribution.ParentReference) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*probing_distribution.OrderBy) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*probing_distribution.Filter) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProbingDistributionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_distribution.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ParentReference)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*probing_distribution.OrderBy, bool) {
	res, ok := fpaov.values.([]*probing_distribution.OrderBy)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*probing_distribution.Filter, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Filter)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProbingDistributionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingDistributionsResponse_FieldPathSelector
	Get(source *WatchProbingDistributionsResponse) []interface{}
	GetSingle(source *WatchProbingDistributionsResponse) (interface{}, bool)
	ClearValue(item *WatchProbingDistributionsResponse)

	// Those methods build corresponding WatchProbingDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingDistributionsResponse_FieldPathArrayItemValue
}

type WatchProbingDistributionsResponse_FieldPathSelector int32

const (
	WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges WatchProbingDistributionsResponse_FieldPathSelector = 0
	WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent                  WatchProbingDistributionsResponse_FieldPathSelector = 1
	WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange            WatchProbingDistributionsResponse_FieldPathSelector = 2
	WatchProbingDistributionsResponse_FieldPathSelectorResumeToken                WatchProbingDistributionsResponse_FieldPathSelector = 3
	WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize               WatchProbingDistributionsResponse_FieldPathSelector = 4
	WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset                WatchProbingDistributionsResponse_FieldPathSelector = 5
	WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset                WatchProbingDistributionsResponse_FieldPathSelector = 6
)

func (s WatchProbingDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return "probing_distribution_changes"
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", s))
	}
}

func BuildWatchProbingDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_distribution_changes", "probingDistributionChanges", "probing-distribution-changes":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProbingDistributionsResponse_FieldTerminalPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProbingDistributionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProbingDistributionsResponse_FieldSubPath{selector: WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingDistributionsResponse", fp)
}

func ParseWatchProbingDistributionsResponse_FieldPath(rawField string) (WatchProbingDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingDistributionsResponse_FieldPath(fp)
}

func MustParseWatchProbingDistributionsResponse_FieldPath(rawField string) WatchProbingDistributionsResponse_FieldPath {
	fp, err := ParseWatchProbingDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingDistributionsResponse_FieldTerminalPath struct {
	selector WatchProbingDistributionsResponse_FieldPathSelector
}

var _ WatchProbingDistributionsResponse_FieldPath = (*WatchProbingDistributionsResponse_FieldTerminalPath)(nil)

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) Selector() WatchProbingDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingDistributionsResponse
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) Get(source *WatchProbingDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
			for _, value := range source.GetProbingDistributionChanges() {
				values = append(values, value)
			}
		case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProbingDistributionsResponse
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) GetSingle(source *WatchProbingDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		res := source.GetProbingDistributionChanges()
		return res, res != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return ([]*probing_distribution.ProbingDistributionChange)(nil)
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProbingDistributionsResponse_PageTokenChange)(nil)
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) ClearValue(item *WatchProbingDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
			item.ProbingDistributionChanges = nil
		case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges ||
		fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProbingDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*probing_distribution.ProbingDistributionChange)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*WatchProbingDistributionsResponse_PageTokenChange)}
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingDistributionsResponse_FieldTerminalPathValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.ProbingDistributionChange)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProbingDistributionsResponse_PageTokenChange)}
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return &WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue{WatchProbingDistributionsResponse_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProbingDistributionsResponse_FieldSubPath struct {
	selector WatchProbingDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProbingDistributionsResponse_FieldPath = (*WatchProbingDistributionsResponse_FieldSubPath)(nil)

func (fps *WatchProbingDistributionsResponse_FieldSubPath) Selector() WatchProbingDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProbingDistributionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProbingDistributionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProbingDistributionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProbingDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProbingDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProbingDistributionsResponse
func (fps *WatchProbingDistributionsResponse_FieldSubPath) Get(source *WatchProbingDistributionsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProbingDistributionsResponse))
}

// GetSingle returns value of selected field from source WatchProbingDistributionsResponse
func (fps *WatchProbingDistributionsResponse_FieldSubPath) GetSingle(source *WatchProbingDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fps.selector))
	}
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProbingDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProbingDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) ClearValue(item *WatchProbingDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProbingDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProbingDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithIValue(value interface{}) WatchProbingDistributionsResponse_FieldPathValue {
	return &WatchProbingDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionsResponse_FieldPathArrayOfValues {
	return &WatchProbingDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionsResponse_FieldPathArrayItemValue {
	return &WatchProbingDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProbingDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProbingDistributionsResponse_FieldPathValue allows storing values for WatchProbingDistributionsResponse fields according to their type
type WatchProbingDistributionsResponse_FieldPathValue interface {
	WatchProbingDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingDistributionsResponse)
	CompareWith(*WatchProbingDistributionsResponse) (cmp int, comparable bool)
}

func ParseWatchProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) (WatchProbingDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingDistributionsResponse_FieldPathValue), nil
}

func MustParseWatchProbingDistributionsResponse_FieldPathValue(pathStr, valueStr string) WatchProbingDistributionsResponse_FieldPathValue {
	fpv, err := ParseWatchProbingDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingDistributionsResponse_FieldTerminalPathValue struct {
	WatchProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsResponse_FieldPathValue = (*WatchProbingDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProbingDistributionsResponse' as interface{}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsProbingDistributionChangesValue() ([]*probing_distribution.ProbingDistributionChange, bool) {
	res, ok := fpv.value.([]*probing_distribution.ProbingDistributionChange)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProbingDistributionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProbingDistributionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProbingDistributionsResponse
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) SetTo(target **WatchProbingDistributionsResponse) {
	if *target == nil {
		*target = new(WatchProbingDistributionsResponse)
	}
	switch fpv.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		(*target).ProbingDistributionChanges = fpv.value.([]*probing_distribution.ProbingDistributionChange)
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProbingDistributionsResponse_PageTokenChange)
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingDistributionsResponse_FieldTerminalPathValue' with the value under path in 'WatchProbingDistributionsResponse'.
func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) CompareWith(source *WatchProbingDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		return 0, false
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingDistributionsResponse))
}

type WatchProbingDistributionsResponse_FieldSubPathValue struct {
	WatchProbingDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProbingDistributionsResponse_FieldPathValue = (*WatchProbingDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProbingDistributionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProbingDistributionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) SetTo(target **WatchProbingDistributionsResponse) {
	if *target == nil {
		*target = new(WatchProbingDistributionsResponse)
	}
	switch fpvs.Selector() {
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProbingDistributionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) CompareWith(source *WatchProbingDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProbingDistributionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProbingDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProbingDistributionsResponse))
}

// WatchProbingDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProbingDistributionsResponse according to their type
// Present only for array (repeated) types.
type WatchProbingDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingDistributionsResponse_FieldPath
	ContainsValue(*WatchProbingDistributionsResponse) bool
}

// ParseWatchProbingDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProbingDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsResponse_FieldPathArrayItemValue = (*WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingDistributionsResponse as interface{}
func (fpaiv *WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue) AsProbingDistributionChangesItemValue() (*probing_distribution.ProbingDistributionChange, bool) {
	res, ok := fpaiv.value.(*probing_distribution.ProbingDistributionChange)
	return res, ok
}

func (fpaiv *WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingDistributionsResponse'
func (fpaiv *WatchProbingDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingDistributionsResponse) bool {
	slice := fpaiv.WatchProbingDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProbingDistributionsResponse_FieldSubPathArrayItemValue struct {
	WatchProbingDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProbingDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProbingDistributionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProbingDistributionsResponse'
func (fpaivs *WatchProbingDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProbingDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProbingDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProbingDistributionsResponse fields according to their type
type WatchProbingDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingDistributionsResponse_FieldPath
}

func ParseWatchProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProbingDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProbingDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProbingDistributionsResponse_FieldPathArrayOfValues = (*WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingDistributionsResponse_FieldPathSelectorProbingDistributionChanges:
		for _, v := range fpaov.values.([][]*probing_distribution.ProbingDistributionChange) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProbingDistributionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsProbingDistributionChangesArrayOfValues() ([][]*probing_distribution.ProbingDistributionChange, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.ProbingDistributionChange)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProbingDistributionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProbingDistributionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProbingDistributionsResponse_FieldSubPathArrayOfValues struct {
	WatchProbingDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProbingDistributionsResponse_FieldPathArrayOfValues = (*WatchProbingDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProbingDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProbingDistributionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProbingDistributionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProbingDistributionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProbingDistributionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProbingDistributionsResponse_PageTokenChange)

	// Those methods build corresponding WatchProbingDistributionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector = 0
	WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProbingDistributionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProbingDistributionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProbingDistributionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProbingDistributionsResponse_PageTokenChange", fp)
}

func ParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(rawField string) (WatchProbingDistributionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProbingDistributionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(rawField string) WatchProbingDistributionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProbingDistributionsResponsePageTokenChange_FieldPath = (*WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProbingDistributionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProbingDistributionsResponse_PageTokenChange
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProbingDistributionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProbingDistributionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProbingDistributionsResponse_PageTokenChange
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProbingDistributionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProbingDistributionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*probing_distribution.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProbingDistributionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProbingDistributionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue{WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*probing_distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*probing_distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProbingDistributionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProbingDistributionsResponsePageTokenChange_FieldPathValue interface {
	WatchProbingDistributionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProbingDistributionsResponse_PageTokenChange)
	CompareWith(*WatchProbingDistributionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProbingDistributionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProbingDistributionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProbingDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProbingDistributionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsResponsePageTokenChange_FieldPathValue = (*WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}
func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*probing_distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*probing_distribution.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProbingDistributionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProbingDistributionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*probing_distribution.PagerCursor)
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*probing_distribution.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProbingDistributionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProbingDistributionsResponse_PageTokenChange'.
func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProbingDistributionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProbingDistributionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProbingDistributionsResponse_PageTokenChange))
}

// WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProbingDistributionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProbingDistributionsResponse_PageTokenChange) bool
}

// ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProbingDistributionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProbingDistributionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProbingDistributionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProbingDistributionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProbingDistributionsResponsePageTokenChange_FieldPath
}

func ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProbingDistributionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	case WatchProbingDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*probing_distribution.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}
func (fpaov *WatchProbingDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*probing_distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*probing_distribution.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProbingDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProbingDistributionRequest_FieldPathSelector
	Get(source *CreateProbingDistributionRequest) []interface{}
	GetSingle(source *CreateProbingDistributionRequest) (interface{}, bool)
	ClearValue(item *CreateProbingDistributionRequest)

	// Those methods build corresponding CreateProbingDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProbingDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProbingDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProbingDistributionRequest_FieldPathArrayItemValue
}

type CreateProbingDistributionRequest_FieldPathSelector int32

const (
	CreateProbingDistributionRequest_FieldPathSelectorParent              CreateProbingDistributionRequest_FieldPathSelector = 0
	CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution CreateProbingDistributionRequest_FieldPathSelector = 1
)

func (s CreateProbingDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return "probing_distribution"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", s))
	}
}

func BuildCreateProbingDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProbingDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProbingDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProbingDistributionRequest_FieldTerminalPath{selector: CreateProbingDistributionRequest_FieldPathSelectorParent}, nil
		case "probing_distribution", "probingDistribution", "probing-distribution":
			return &CreateProbingDistributionRequest_FieldTerminalPath{selector: CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution}, nil
		}
	} else {
		switch fp[0] {
		case "probing_distribution", "probingDistribution", "probing-distribution":
			if subpath, err := probing_distribution.BuildProbingDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProbingDistributionRequest_FieldSubPath{selector: CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProbingDistributionRequest", fp)
}

func ParseCreateProbingDistributionRequest_FieldPath(rawField string) (CreateProbingDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProbingDistributionRequest_FieldPath(fp)
}

func MustParseCreateProbingDistributionRequest_FieldPath(rawField string) CreateProbingDistributionRequest_FieldPath {
	fp, err := ParseCreateProbingDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProbingDistributionRequest_FieldTerminalPath struct {
	selector CreateProbingDistributionRequest_FieldPathSelector
}

var _ CreateProbingDistributionRequest_FieldPath = (*CreateProbingDistributionRequest_FieldTerminalPath)(nil)

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) Selector() CreateProbingDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProbingDistributionRequest
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) Get(source *CreateProbingDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProbingDistributionRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			if source.ProbingDistribution != nil {
				values = append(values, source.ProbingDistribution)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProbingDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProbingDistributionRequest
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) GetSingle(source *CreateProbingDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		res := source.GetProbingDistribution()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		return (*probing_distribution.ParentReference)(nil)
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return (*probing_distribution.ProbingDistribution)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) ClearValue(item *CreateProbingDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProbingDistributionRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			item.ProbingDistribution = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProbingDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProbingDistributionRequest_FieldPathSelectorParent
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProbingDistributionRequest_FieldPathValue {
	switch fp.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		return &CreateProbingDistributionRequest_FieldTerminalPathValue{CreateProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ParentReference)}
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return &CreateProbingDistributionRequest_FieldTerminalPathValue{CreateProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov := &CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues{CreateProbingDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		return &CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues{CreateProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ParentReference)}
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return &CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues{CreateProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProbingDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateProbingDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProbingDistributionRequest_FieldSubPath struct {
	selector CreateProbingDistributionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProbingDistributionRequest_FieldPath = (*CreateProbingDistributionRequest_FieldSubPath)(nil)

func (fps *CreateProbingDistributionRequest_FieldSubPath) Selector() CreateProbingDistributionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProbingDistributionRequest_FieldSubPath) AsProbingDistributionSubPath() (probing_distribution.ProbingDistribution_FieldPath, bool) {
	res, ok := fps.subPath.(probing_distribution.ProbingDistribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProbingDistributionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProbingDistributionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProbingDistributionRequest
func (fps *CreateProbingDistributionRequest_FieldSubPath) Get(source *CreateProbingDistributionRequest) (values []interface{}) {
	if asProbingDistributionFieldPath, ok := fps.AsProbingDistributionSubPath(); ok {
		values = append(values, asProbingDistributionFieldPath.Get(source.GetProbingDistribution())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProbingDistributionRequest))
}

// GetSingle returns value of selected field from source CreateProbingDistributionRequest
func (fps *CreateProbingDistributionRequest_FieldSubPath) GetSingle(source *CreateProbingDistributionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		if source.GetProbingDistribution() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fps.selector))
	}
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProbingDistributionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) ClearValue(item *CreateProbingDistributionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			fps.subPath.ClearValueRaw(item.ProbingDistribution)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProbingDistributionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithIValue(value interface{}) CreateProbingDistributionRequest_FieldPathValue {
	return &CreateProbingDistributionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProbingDistributionRequest_FieldPathArrayOfValues {
	return &CreateProbingDistributionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProbingDistributionRequest_FieldPathArrayItemValue {
	return &CreateProbingDistributionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProbingDistributionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProbingDistributionRequest_FieldPathValue allows storing values for CreateProbingDistributionRequest fields according to their type
type CreateProbingDistributionRequest_FieldPathValue interface {
	CreateProbingDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProbingDistributionRequest)
	CompareWith(*CreateProbingDistributionRequest) (cmp int, comparable bool)
}

func ParseCreateProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) (CreateProbingDistributionRequest_FieldPathValue, error) {
	fp, err := ParseCreateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProbingDistributionRequest_FieldPathValue), nil
}

func MustParseCreateProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) CreateProbingDistributionRequest_FieldPathValue {
	fpv, err := ParseCreateProbingDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProbingDistributionRequest_FieldTerminalPathValue struct {
	CreateProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingDistributionRequest_FieldPathValue = (*CreateProbingDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProbingDistributionRequest' as interface{}
func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) AsParentValue() (*probing_distribution.ParentReference, bool) {
	res, ok := fpv.value.(*probing_distribution.ParentReference)
	return res, ok
}
func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) AsProbingDistributionValue() (*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution)
	return res, ok
}

// SetTo stores value for selected field for object CreateProbingDistributionRequest
func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) SetTo(target **CreateProbingDistributionRequest) {
	if *target == nil {
		*target = new(CreateProbingDistributionRequest)
	}
	switch fpv.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*probing_distribution.ParentReference)
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		(*target).ProbingDistribution = fpv.value.(*probing_distribution.ProbingDistribution)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProbingDistributionRequest_FieldTerminalPathValue' with the value under path in 'CreateProbingDistributionRequest'.
func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) CompareWith(source *CreateProbingDistributionRequest) (int, bool) {
	switch fpv.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*probing_distribution.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProbingDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProbingDistributionRequest))
}

type CreateProbingDistributionRequest_FieldSubPathValue struct {
	CreateProbingDistributionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProbingDistributionRequest_FieldPathValue = (*CreateProbingDistributionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) AsProbingDistributionPathValue() (probing_distribution.ProbingDistribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) SetTo(target **CreateProbingDistributionRequest) {
	if *target == nil {
		*target = new(CreateProbingDistributionRequest)
	}
	switch fpvs.Selector() {
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).SetTo(&(*target).ProbingDistribution)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProbingDistributionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) CompareWith(source *CreateProbingDistributionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).CompareWith(source.GetProbingDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProbingDistributionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProbingDistributionRequest))
}

// CreateProbingDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProbingDistributionRequest according to their type
// Present only for array (repeated) types.
type CreateProbingDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProbingDistributionRequest_FieldPath
	ContainsValue(*CreateProbingDistributionRequest) bool
}

// ParseCreateProbingDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProbingDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProbingDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProbingDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue struct {
	CreateProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProbingDistributionRequest_FieldPathArrayItemValue = (*CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProbingDistributionRequest as interface{}
func (fpaiv *CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProbingDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProbingDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingDistributionRequest'
func (fpaiv *CreateProbingDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProbingDistributionRequest) bool {
	slice := fpaiv.CreateProbingDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProbingDistributionRequest_FieldSubPathArrayItemValue struct {
	CreateProbingDistributionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProbingDistributionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProbingDistributionRequest_FieldSubPathArrayItemValue) AsProbingDistributionPathItemValue() (probing_distribution.ProbingDistribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProbingDistributionRequest'
func (fpaivs *CreateProbingDistributionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProbingDistributionRequest) bool {
	switch fpaivs.Selector() {
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue).ContainsValue(source.GetProbingDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProbingDistributionRequest: %d", fpaivs.Selector()))
	}
}

// CreateProbingDistributionRequest_FieldPathArrayOfValues allows storing slice of values for CreateProbingDistributionRequest fields according to their type
type CreateProbingDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProbingDistributionRequest_FieldPath
}

func ParseCreateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProbingDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProbingDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProbingDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues struct {
	CreateProbingDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProbingDistributionRequest_FieldPathArrayOfValues = (*CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProbingDistributionRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*probing_distribution.ParentReference) {
			values = append(values, v)
		}
	case CreateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*probing_distribution.ParentReference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ParentReference)
	return res, ok
}
func (fpaov *CreateProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsProbingDistributionArrayOfValues() ([]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution)
	return res, ok
}

type CreateProbingDistributionRequest_FieldSubPathArrayOfValues struct {
	CreateProbingDistributionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProbingDistributionRequest_FieldPathArrayOfValues = (*CreateProbingDistributionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProbingDistributionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProbingDistributionRequest_FieldSubPathArrayOfValues) AsProbingDistributionPathArrayOfValues() (probing_distribution.ProbingDistribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_distribution.ProbingDistribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingDistributionRequest_FieldPathSelector
	Get(source *UpdateProbingDistributionRequest) []interface{}
	GetSingle(source *UpdateProbingDistributionRequest) (interface{}, bool)
	ClearValue(item *UpdateProbingDistributionRequest)

	// Those methods build corresponding UpdateProbingDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequest_FieldPathArrayItemValue
}

type UpdateProbingDistributionRequest_FieldPathSelector int32

const (
	UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution UpdateProbingDistributionRequest_FieldPathSelector = 0
	UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask          UpdateProbingDistributionRequest_FieldPathSelector = 1
	UpdateProbingDistributionRequest_FieldPathSelectorCas                 UpdateProbingDistributionRequest_FieldPathSelector = 2
)

func (s UpdateProbingDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return "probing_distribution"
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", s))
	}
}

func BuildUpdateProbingDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probing_distribution", "probingDistribution", "probing-distribution":
			return &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProbingDistributionRequest_FieldTerminalPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "probing_distribution", "probingDistribution", "probing-distribution":
			if subpath, err := probing_distribution.BuildProbingDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingDistributionRequest_FieldSubPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProbingDistributionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingDistributionRequest_FieldSubPath{selector: UpdateProbingDistributionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingDistributionRequest", fp)
}

func ParseUpdateProbingDistributionRequest_FieldPath(rawField string) (UpdateProbingDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingDistributionRequest_FieldPath(fp)
}

func MustParseUpdateProbingDistributionRequest_FieldPath(rawField string) UpdateProbingDistributionRequest_FieldPath {
	fp, err := ParseUpdateProbingDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingDistributionRequest_FieldTerminalPath struct {
	selector UpdateProbingDistributionRequest_FieldPathSelector
}

var _ UpdateProbingDistributionRequest_FieldPath = (*UpdateProbingDistributionRequest_FieldTerminalPath)(nil)

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) Selector() UpdateProbingDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingDistributionRequest
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) Get(source *UpdateProbingDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			if source.ProbingDistribution != nil {
				values = append(values, source.ProbingDistribution)
			}
		case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProbingDistributionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingDistributionRequest
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) GetSingle(source *UpdateProbingDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		res := source.GetProbingDistribution()
		return res, res != nil
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return (*probing_distribution.ProbingDistribution)(nil)
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return (*UpdateProbingDistributionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) ClearValue(item *UpdateProbingDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			item.ProbingDistribution = nil
		case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProbingDistributionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingDistributionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return &UpdateProbingDistributionRequest_FieldTerminalPathValue{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution)}
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingDistributionRequest_FieldTerminalPathValue{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return &UpdateProbingDistributionRequest_FieldTerminalPathValue{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*UpdateProbingDistributionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return &UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution)}
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		return &UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return &UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProbingDistributionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingDistributionRequest_FieldSubPath struct {
	selector UpdateProbingDistributionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingDistributionRequest_FieldPath = (*UpdateProbingDistributionRequest_FieldSubPath)(nil)

func (fps *UpdateProbingDistributionRequest_FieldSubPath) Selector() UpdateProbingDistributionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingDistributionRequest_FieldSubPath) AsProbingDistributionSubPath() (probing_distribution.ProbingDistribution_FieldPath, bool) {
	res, ok := fps.subPath.(probing_distribution.ProbingDistribution_FieldPath)
	return res, ok
}
func (fps *UpdateProbingDistributionRequest_FieldSubPath) AsCasSubPath() (UpdateProbingDistributionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProbingDistributionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingDistributionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingDistributionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingDistributionRequest
func (fps *UpdateProbingDistributionRequest_FieldSubPath) Get(source *UpdateProbingDistributionRequest) (values []interface{}) {
	if asProbingDistributionFieldPath, ok := fps.AsProbingDistributionSubPath(); ok {
		values = append(values, asProbingDistributionFieldPath.Get(source.GetProbingDistribution())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingDistributionRequest))
}

// GetSingle returns value of selected field from source UpdateProbingDistributionRequest
func (fps *UpdateProbingDistributionRequest_FieldSubPath) GetSingle(source *UpdateProbingDistributionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		if source.GetProbingDistribution() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingDistribution())
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fps.selector))
	}
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingDistributionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) ClearValue(item *UpdateProbingDistributionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
			fps.subPath.ClearValueRaw(item.ProbingDistribution)
		case UpdateProbingDistributionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingDistributionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithIValue(value interface{}) UpdateProbingDistributionRequest_FieldPathValue {
	return &UpdateProbingDistributionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequest_FieldPathArrayOfValues {
	return &UpdateProbingDistributionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequest_FieldPathArrayItemValue {
	return &UpdateProbingDistributionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingDistributionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingDistributionRequest_FieldPathValue allows storing values for UpdateProbingDistributionRequest fields according to their type
type UpdateProbingDistributionRequest_FieldPathValue interface {
	UpdateProbingDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingDistributionRequest)
	CompareWith(*UpdateProbingDistributionRequest) (cmp int, comparable bool)
}

func ParseUpdateProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) (UpdateProbingDistributionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingDistributionRequest_FieldPathValue), nil
}

func MustParseUpdateProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) UpdateProbingDistributionRequest_FieldPathValue {
	fpv, err := ParseUpdateProbingDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingDistributionRequest_FieldTerminalPathValue struct {
	UpdateProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingDistributionRequest_FieldPathValue = (*UpdateProbingDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProbingDistributionRequest' as interface{}
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) AsProbingDistributionValue() (*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProbingDistributionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProbingDistributionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProbingDistributionRequest
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) SetTo(target **UpdateProbingDistributionRequest) {
	if *target == nil {
		*target = new(UpdateProbingDistributionRequest)
	}
	switch fpv.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		(*target).ProbingDistribution = fpv.value.(*probing_distribution.ProbingDistribution)
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProbingDistributionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingDistributionRequest_FieldTerminalPathValue' with the value under path in 'UpdateProbingDistributionRequest'.
func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) CompareWith(source *UpdateProbingDistributionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return 0, false
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingDistributionRequest))
}

type UpdateProbingDistributionRequest_FieldSubPathValue struct {
	UpdateProbingDistributionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingDistributionRequest_FieldPathValue = (*UpdateProbingDistributionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) AsProbingDistributionPathValue() (probing_distribution.ProbingDistribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) AsCasPathValue() (UpdateProbingDistributionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProbingDistributionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) SetTo(target **UpdateProbingDistributionRequest) {
	if *target == nil {
		*target = new(UpdateProbingDistributionRequest)
	}
	switch fpvs.Selector() {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).SetTo(&(*target).ProbingDistribution)
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProbingDistributionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingDistributionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) CompareWith(source *UpdateProbingDistributionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).CompareWith(source.GetProbingDistribution())
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProbingDistributionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingDistributionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingDistributionRequest))
}

// UpdateProbingDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProbingDistributionRequest according to their type
// Present only for array (repeated) types.
type UpdateProbingDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingDistributionRequest_FieldPath
	ContainsValue(*UpdateProbingDistributionRequest) bool
}

// ParseUpdateProbingDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingDistributionRequest_FieldPathArrayItemValue = (*UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingDistributionRequest as interface{}
func (fpaiv *UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingDistributionRequest'
func (fpaiv *UpdateProbingDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingDistributionRequest) bool {
	slice := fpaiv.UpdateProbingDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingDistributionRequest_FieldSubPathArrayItemValue struct {
	UpdateProbingDistributionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingDistributionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingDistributionRequest_FieldSubPathArrayItemValue) AsProbingDistributionPathItemValue() (probing_distribution.ProbingDistribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProbingDistributionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProbingDistributionRequest'
func (fpaivs *UpdateProbingDistributionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingDistributionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		return fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue).ContainsValue(source.GetProbingDistribution())
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProbingDistributionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProbingDistributionRequest fields according to their type
type UpdateProbingDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingDistributionRequest_FieldPath
}

func ParseUpdateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProbingDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProbingDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingDistributionRequest_FieldPathArrayOfValues = (*UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingDistributionRequest_FieldPathSelectorProbingDistribution:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution) {
			values = append(values, v)
		}
	case UpdateProbingDistributionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	case UpdateProbingDistributionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProbingDistributionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsProbingDistributionArrayOfValues() ([]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpaov *UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}
func (fpaov *UpdateProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProbingDistributionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProbingDistributionRequest_CAS)
	return res, ok
}

type UpdateProbingDistributionRequest_FieldSubPathArrayOfValues struct {
	UpdateProbingDistributionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingDistributionRequest_FieldPathArrayOfValues = (*UpdateProbingDistributionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingDistributionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingDistributionRequest_FieldSubPathArrayOfValues) AsProbingDistributionPathArrayOfValues() (probing_distribution.ProbingDistribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_distribution.ProbingDistribution_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProbingDistributionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProbingDistributionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProbingDistributionRequestCAS_FieldPathSelector
	Get(source *UpdateProbingDistributionRequest_CAS) []interface{}
	GetSingle(source *UpdateProbingDistributionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProbingDistributionRequest_CAS)

	// Those methods build corresponding UpdateProbingDistributionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue
}

type UpdateProbingDistributionRequestCAS_FieldPathSelector int32

const (
	UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState UpdateProbingDistributionRequestCAS_FieldPathSelector = 0
	UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask        UpdateProbingDistributionRequestCAS_FieldPathSelector = 1
)

func (s UpdateProbingDistributionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", s))
	}
}

func BuildUpdateProbingDistributionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProbingDistributionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProbingDistributionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProbingDistributionRequestCAS_FieldTerminalPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProbingDistributionRequestCAS_FieldTerminalPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := probing_distribution.BuildProbingDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProbingDistributionRequestCAS_FieldSubPath{selector: UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProbingDistributionRequest_CAS", fp)
}

func ParseUpdateProbingDistributionRequestCAS_FieldPath(rawField string) (UpdateProbingDistributionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProbingDistributionRequestCAS_FieldPath(fp)
}

func MustParseUpdateProbingDistributionRequestCAS_FieldPath(rawField string) UpdateProbingDistributionRequestCAS_FieldPath {
	fp, err := ParseUpdateProbingDistributionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProbingDistributionRequestCAS_FieldTerminalPath struct {
	selector UpdateProbingDistributionRequestCAS_FieldPathSelector
}

var _ UpdateProbingDistributionRequestCAS_FieldPath = (*UpdateProbingDistributionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) Selector() UpdateProbingDistributionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProbingDistributionRequest_CAS
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) Get(source *UpdateProbingDistributionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProbingDistributionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProbingDistributionRequest_CAS
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProbingDistributionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProbingDistributionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return (*probing_distribution.ProbingDistribution)(nil)
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		return (*probing_distribution.ProbingDistribution_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProbingDistributionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProbingDistributionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingDistributionRequestCAS_FieldTerminalPathValue{UpdateProbingDistributionRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution)}
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingDistributionRequestCAS_FieldTerminalPathValue{UpdateProbingDistributionRequestCAS_FieldTerminalPath: *fp, value: value.(*probing_distribution.ProbingDistribution_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution)}
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateProbingDistributionRequestCAS_FieldTerminalPath: *fp, values: values.([]*probing_distribution.ProbingDistribution_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProbingDistributionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProbingDistributionRequestCAS_FieldSubPath struct {
	selector UpdateProbingDistributionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProbingDistributionRequestCAS_FieldPath = (*UpdateProbingDistributionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) Selector() UpdateProbingDistributionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (probing_distribution.ProbingDistribution_FieldPath, bool) {
	res, ok := fps.subPath.(probing_distribution.ProbingDistribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProbingDistributionRequest_CAS
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) Get(source *UpdateProbingDistributionRequest_CAS) (values []interface{}) {
	if asProbingDistributionFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProbingDistributionFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProbingDistributionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProbingDistributionRequest_CAS
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) GetSingle(source *UpdateProbingDistributionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProbingDistributionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) ClearValue(item *UpdateProbingDistributionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProbingDistributionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathValue {
	return &UpdateProbingDistributionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues {
	return &UpdateProbingDistributionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue {
	return &UpdateProbingDistributionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProbingDistributionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProbingDistributionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProbingDistributionRequestCAS_FieldPathValue interface {
	UpdateProbingDistributionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProbingDistributionRequest_CAS)
	CompareWith(*UpdateProbingDistributionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProbingDistributionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProbingDistributionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProbingDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProbingDistributionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProbingDistributionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProbingDistributionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProbingDistributionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProbingDistributionRequestCAS_FieldTerminalPathValue struct {
	UpdateProbingDistributionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingDistributionRequestCAS_FieldPathValue = (*UpdateProbingDistributionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProbingDistributionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingDistributionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*probing_distribution.ProbingDistribution)
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*probing_distribution.ProbingDistribution_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingDistributionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProbingDistributionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProbingDistributionRequest_CAS'.
func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProbingDistributionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProbingDistributionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProbingDistributionRequest_CAS))
}

type UpdateProbingDistributionRequestCAS_FieldSubPathValue struct {
	UpdateProbingDistributionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProbingDistributionRequestCAS_FieldPathValue = (*UpdateProbingDistributionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (probing_distribution.ProbingDistribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) SetTo(target **UpdateProbingDistributionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProbingDistributionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProbingDistributionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProbingDistributionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(probing_distribution.ProbingDistribution_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProbingDistributionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProbingDistributionRequest_CAS))
}

// UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProbingDistributionRequestCAS_FieldPath
	ContainsValue(*UpdateProbingDistributionRequest_CAS) bool
}

// ParseUpdateProbingDistributionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProbingDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProbingDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProbingDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProbingDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProbingDistributionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProbingDistributionRequestCAS_FieldPathArrayItemValue = (*UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProbingDistributionRequest_CAS as interface{}
func (fpaiv *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProbingDistributionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProbingDistributionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProbingDistributionRequest_CAS) bool {
	slice := fpaiv.UpdateProbingDistributionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProbingDistributionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProbingDistributionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProbingDistributionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProbingDistributionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (probing_distribution.ProbingDistribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProbingDistributionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProbingDistributionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(probing_distribution.ProbingDistribution_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProbingDistributionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProbingDistributionRequestCAS_FieldPath
}

func ParseUpdateProbingDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProbingDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProbingDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProbingDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProbingDistributionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues = (*UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution) {
			values = append(values, v)
		}
	case UpdateProbingDistributionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*probing_distribution.ProbingDistribution, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution)
	return res, ok
}
func (fpaov *UpdateProbingDistributionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*probing_distribution.ProbingDistribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*probing_distribution.ProbingDistribution_FieldMask)
	return res, ok
}

type UpdateProbingDistributionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProbingDistributionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProbingDistributionRequestCAS_FieldPathArrayOfValues = (*UpdateProbingDistributionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProbingDistributionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProbingDistributionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (probing_distribution.ProbingDistribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probing_distribution.ProbingDistribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProbingDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProbingDistributionRequest_FieldPathSelector
	Get(source *DeleteProbingDistributionRequest) []interface{}
	GetSingle(source *DeleteProbingDistributionRequest) (interface{}, bool)
	ClearValue(item *DeleteProbingDistributionRequest)

	// Those methods build corresponding DeleteProbingDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProbingDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProbingDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProbingDistributionRequest_FieldPathArrayItemValue
}

type DeleteProbingDistributionRequest_FieldPathSelector int32

const (
	DeleteProbingDistributionRequest_FieldPathSelectorName DeleteProbingDistributionRequest_FieldPathSelector = 0
)

func (s DeleteProbingDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", s))
	}
}

func BuildDeleteProbingDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProbingDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProbingDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProbingDistributionRequest_FieldTerminalPath{selector: DeleteProbingDistributionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProbingDistributionRequest", fp)
}

func ParseDeleteProbingDistributionRequest_FieldPath(rawField string) (DeleteProbingDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProbingDistributionRequest_FieldPath(fp)
}

func MustParseDeleteProbingDistributionRequest_FieldPath(rawField string) DeleteProbingDistributionRequest_FieldPath {
	fp, err := ParseDeleteProbingDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProbingDistributionRequest_FieldTerminalPath struct {
	selector DeleteProbingDistributionRequest_FieldPathSelector
}

var _ DeleteProbingDistributionRequest_FieldPath = (*DeleteProbingDistributionRequest_FieldTerminalPath)(nil)

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) Selector() DeleteProbingDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProbingDistributionRequest
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) Get(source *DeleteProbingDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProbingDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProbingDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProbingDistributionRequest
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) GetSingle(source *DeleteProbingDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProbingDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		return (*probing_distribution.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) ClearValue(item *DeleteProbingDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProbingDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProbingDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProbingDistributionRequest_FieldPathSelectorName
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProbingDistributionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		return &DeleteProbingDistributionRequest_FieldTerminalPathValue{DeleteProbingDistributionRequest_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues{DeleteProbingDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		return &DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues{DeleteProbingDistributionRequest_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProbingDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteProbingDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProbingDistributionRequest_FieldPathValue allows storing values for DeleteProbingDistributionRequest fields according to their type
type DeleteProbingDistributionRequest_FieldPathValue interface {
	DeleteProbingDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProbingDistributionRequest)
	CompareWith(*DeleteProbingDistributionRequest) (cmp int, comparable bool)
}

func ParseDeleteProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) (DeleteProbingDistributionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProbingDistributionRequest_FieldPathValue), nil
}

func MustParseDeleteProbingDistributionRequest_FieldPathValue(pathStr, valueStr string) DeleteProbingDistributionRequest_FieldPathValue {
	fpv, err := ParseDeleteProbingDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProbingDistributionRequest_FieldTerminalPathValue struct {
	DeleteProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingDistributionRequest_FieldPathValue = (*DeleteProbingDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProbingDistributionRequest' as interface{}
func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) AsNameValue() (*probing_distribution.Reference, bool) {
	res, ok := fpv.value.(*probing_distribution.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProbingDistributionRequest
func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) SetTo(target **DeleteProbingDistributionRequest) {
	if *target == nil {
		*target = new(DeleteProbingDistributionRequest)
	}
	switch fpv.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*probing_distribution.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProbingDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProbingDistributionRequest_FieldTerminalPathValue' with the value under path in 'DeleteProbingDistributionRequest'.
func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) CompareWith(source *DeleteProbingDistributionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*probing_distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProbingDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProbingDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProbingDistributionRequest))
}

// DeleteProbingDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProbingDistributionRequest according to their type
// Present only for array (repeated) types.
type DeleteProbingDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProbingDistributionRequest_FieldPath
	ContainsValue(*DeleteProbingDistributionRequest) bool
}

// ParseDeleteProbingDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProbingDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProbingDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProbingDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProbingDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProbingDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProbingDistributionRequest_FieldPathArrayItemValue = (*DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProbingDistributionRequest as interface{}
func (fpaiv *DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProbingDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProbingDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProbingDistributionRequest'
func (fpaiv *DeleteProbingDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProbingDistributionRequest) bool {
	slice := fpaiv.DeleteProbingDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProbingDistributionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProbingDistributionRequest fields according to their type
type DeleteProbingDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProbingDistributionRequest_FieldPath
}

func ParseDeleteProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProbingDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProbingDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProbingDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProbingDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProbingDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProbingDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProbingDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProbingDistributionRequest_FieldPathArrayOfValues = (*DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProbingDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*probing_distribution.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProbingDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Reference)
	return res, ok
}
