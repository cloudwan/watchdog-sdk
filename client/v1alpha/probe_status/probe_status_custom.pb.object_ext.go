// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/probe_status_custom.proto
// DO NOT EDIT!!!

package probe_status_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
)

func (o *ProbeStatusRequest) GotenObjectExt() {}

func (o *ProbeStatusRequest) MakeFullFieldMask() *ProbeStatusRequest_FieldMask {
	return FullProbeStatusRequest_FieldMask()
}

func (o *ProbeStatusRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeStatusRequest_FieldMask()
}

func (o *ProbeStatusRequest) MakeDiffFieldMask(other *ProbeStatusRequest) *ProbeStatusRequest_FieldMask {
	if o == nil && other == nil {
		return &ProbeStatusRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeStatusRequest_FieldMask()
	}

	res := &ProbeStatusRequest_FieldMask{}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &ProbeStatusRequest_FieldTerminalPath{selector: ProbeStatusRequest_FieldPathSelectorSerialNumber})
	}
	return res
}

func (o *ProbeStatusRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeStatusRequest))
}

func (o *ProbeStatusRequest) Clone() *ProbeStatusRequest {
	if o == nil {
		return nil
	}
	result := &ProbeStatusRequest{}
	result.SerialNumber = o.SerialNumber
	return result
}

func (o *ProbeStatusRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeStatusRequest) Merge(source *ProbeStatusRequest) {
	o.SerialNumber = source.GetSerialNumber()
}

func (o *ProbeStatusRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeStatusRequest))
}

func (o *ProbeStatusResponse) GotenObjectExt() {}

func (o *ProbeStatusResponse) MakeFullFieldMask() *ProbeStatusResponse_FieldMask {
	return FullProbeStatusResponse_FieldMask()
}

func (o *ProbeStatusResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbeStatusResponse_FieldMask()
}

func (o *ProbeStatusResponse) MakeDiffFieldMask(other *ProbeStatusResponse) *ProbeStatusResponse_FieldMask {
	if o == nil && other == nil {
		return &ProbeStatusResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbeStatusResponse_FieldMask()
	}

	res := &ProbeStatusResponse_FieldMask{}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorSerialNumber})
	}
	if !proto.Equal(o.GetLastHeartBeatTime(), other.GetLastHeartBeatTime()) {
		res.Paths = append(res.Paths, &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime})
	}
	if o.GetIspName() != other.GetIspName() {
		res.Paths = append(res.Paths, &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorIspName})
	}
	if o.GetOsVersion() != other.GetOsVersion() {
		res.Paths = append(res.Paths, &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorOsVersion})
	}
	if o.GetHardwareName() != other.GetHardwareName() {
		res.Paths = append(res.Paths, &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorHardwareName})
	}
	return res
}

func (o *ProbeStatusResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbeStatusResponse))
}

func (o *ProbeStatusResponse) Clone() *ProbeStatusResponse {
	if o == nil {
		return nil
	}
	result := &ProbeStatusResponse{}
	result.SerialNumber = o.SerialNumber
	result.LastHeartBeatTime = proto.Clone(o.LastHeartBeatTime).(*timestamp.Timestamp)
	result.IspName = o.IspName
	result.OsVersion = o.OsVersion
	result.HardwareName = o.HardwareName
	return result
}

func (o *ProbeStatusResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbeStatusResponse) Merge(source *ProbeStatusResponse) {
	o.SerialNumber = source.GetSerialNumber()
	if source.GetLastHeartBeatTime() != nil {
		if o.LastHeartBeatTime == nil {
			o.LastHeartBeatTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.LastHeartBeatTime, source.GetLastHeartBeatTime())
	}
	o.IspName = source.GetIspName()
	o.OsVersion = source.GetOsVersion()
	o.HardwareName = source.GetHardwareName()
}

func (o *ProbeStatusResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbeStatusResponse))
}
