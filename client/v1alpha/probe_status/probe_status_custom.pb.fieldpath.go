// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/probe_status_custom.proto
// DO NOT EDIT!!!

package probe_status_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusRequest_FieldPathSelector
	Get(source *ProbeStatusRequest) []interface{}
	GetSingle(source *ProbeStatusRequest) (interface{}, bool)
	ClearValue(item *ProbeStatusRequest)

	// Those methods build corresponding ProbeStatusRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusRequest_FieldPathArrayItemValue
}

type ProbeStatusRequest_FieldPathSelector int32

const (
	ProbeStatusRequest_FieldPathSelectorSerialNumber ProbeStatusRequest_FieldPathSelector = 0
)

func (s ProbeStatusRequest_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		return "serial_number"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", s))
	}
}

func BuildProbeStatusRequest_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeStatusRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeStatusRequest_FieldTerminalPath{selector: ProbeStatusRequest_FieldPathSelectorSerialNumber}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeStatusRequest", fp)
}

func ParseProbeStatusRequest_FieldPath(rawField string) (ProbeStatusRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusRequest_FieldPath(fp)
}

func MustParseProbeStatusRequest_FieldPath(rawField string) ProbeStatusRequest_FieldPath {
	fp, err := ParseProbeStatusRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusRequest_FieldTerminalPath struct {
	selector ProbeStatusRequest_FieldPathSelector
}

var _ ProbeStatusRequest_FieldPath = (*ProbeStatusRequest_FieldTerminalPath)(nil)

func (fp *ProbeStatusRequest_FieldTerminalPath) Selector() ProbeStatusRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeStatusRequest
func (fp *ProbeStatusRequest_FieldTerminalPath) Get(source *ProbeStatusRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusRequest_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeStatusRequest))
}

// GetSingle returns value pointed by specific field of from source ProbeStatusRequest
func (fp *ProbeStatusRequest_FieldTerminalPath) GetSingle(source *ProbeStatusRequest) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
	}
}

func (fp *ProbeStatusRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeStatusRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
	}
}

func (fp *ProbeStatusRequest_FieldTerminalPath) ClearValue(item *ProbeStatusRequest) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusRequest_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeStatusRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusRequest_FieldPathSelectorSerialNumber
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusRequest_FieldPathValue {
	switch fp.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		return &ProbeStatusRequest_FieldTerminalPathValue{ProbeStatusRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
	}
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusRequest_FieldPathArrayOfValues {
	fpaov := &ProbeStatusRequest_FieldTerminalPathArrayOfValues{ProbeStatusRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		return &ProbeStatusRequest_FieldTerminalPathArrayOfValues{ProbeStatusRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fp.selector))
	}
}

func (fp *ProbeStatusRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusRequest_FieldPathValue allows storing values for ProbeStatusRequest fields according to their type
type ProbeStatusRequest_FieldPathValue interface {
	ProbeStatusRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeStatusRequest)
	CompareWith(*ProbeStatusRequest) (cmp int, comparable bool)
}

func ParseProbeStatusRequest_FieldPathValue(pathStr, valueStr string) (ProbeStatusRequest_FieldPathValue, error) {
	fp, err := ParseProbeStatusRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusRequest_FieldPathValue), nil
}

func MustParseProbeStatusRequest_FieldPathValue(pathStr, valueStr string) ProbeStatusRequest_FieldPathValue {
	fpv, err := ParseProbeStatusRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusRequest_FieldTerminalPathValue struct {
	ProbeStatusRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusRequest_FieldPathValue = (*ProbeStatusRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeStatusRequest' as interface{}
func (fpv *ProbeStatusRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusRequest_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProbeStatusRequest
func (fpv *ProbeStatusRequest_FieldTerminalPathValue) SetTo(target **ProbeStatusRequest) {
	if *target == nil {
		*target = new(ProbeStatusRequest)
	}
	switch fpv.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeStatusRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusRequest_FieldTerminalPathValue' with the value under path in 'ProbeStatusRequest'.
func (fpv *ProbeStatusRequest_FieldTerminalPathValue) CompareWith(source *ProbeStatusRequest) (int, bool) {
	switch fpv.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusRequest: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeStatusRequest))
}

// ProbeStatusRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeStatusRequest according to their type
// Present only for array (repeated) types.
type ProbeStatusRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusRequest_FieldPath
	ContainsValue(*ProbeStatusRequest) bool
}

// ParseProbeStatusRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusRequest_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusRequest_FieldTerminalPathArrayItemValue struct {
	ProbeStatusRequest_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusRequest_FieldPathArrayItemValue = (*ProbeStatusRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeStatusRequest as interface{}
func (fpaiv *ProbeStatusRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeStatusRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeStatusRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeStatusRequest'
func (fpaiv *ProbeStatusRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeStatusRequest) bool {
	slice := fpaiv.ProbeStatusRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusRequest_FieldPathArrayOfValues allows storing slice of values for ProbeStatusRequest fields according to their type
type ProbeStatusRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusRequest_FieldPath
}

func ParseProbeStatusRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusRequest_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusRequest_FieldTerminalPathArrayOfValues struct {
	ProbeStatusRequest_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusRequest_FieldPathArrayOfValues = (*ProbeStatusRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusRequest_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusRequest_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusResponse_FieldPathSelector
	Get(source *ProbeStatusResponse) []interface{}
	GetSingle(source *ProbeStatusResponse) (interface{}, bool)
	ClearValue(item *ProbeStatusResponse)

	// Those methods build corresponding ProbeStatusResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusResponse_FieldPathArrayItemValue
}

type ProbeStatusResponse_FieldPathSelector int32

const (
	ProbeStatusResponse_FieldPathSelectorSerialNumber      ProbeStatusResponse_FieldPathSelector = 0
	ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime ProbeStatusResponse_FieldPathSelector = 1
	ProbeStatusResponse_FieldPathSelectorIspName           ProbeStatusResponse_FieldPathSelector = 2
	ProbeStatusResponse_FieldPathSelectorOsVersion         ProbeStatusResponse_FieldPathSelector = 3
	ProbeStatusResponse_FieldPathSelectorHardwareName      ProbeStatusResponse_FieldPathSelector = 4
)

func (s ProbeStatusResponse_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		return "serial_number"
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		return "last_heart_beat_time"
	case ProbeStatusResponse_FieldPathSelectorIspName:
		return "isp_name"
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		return "os_version"
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		return "hardware_name"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", s))
	}
}

func BuildProbeStatusResponse_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeStatusResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorSerialNumber}, nil
		case "last_heart_beat_time", "lastHeartBeatTime", "last-heart-beat-time":
			return &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime}, nil
		case "isp_name", "ispName", "isp-name":
			return &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorIspName}, nil
		case "os_version", "osVersion", "os-version":
			return &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorOsVersion}, nil
		case "hardware_name", "hardwareName", "hardware-name":
			return &ProbeStatusResponse_FieldTerminalPath{selector: ProbeStatusResponse_FieldPathSelectorHardwareName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeStatusResponse", fp)
}

func ParseProbeStatusResponse_FieldPath(rawField string) (ProbeStatusResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusResponse_FieldPath(fp)
}

func MustParseProbeStatusResponse_FieldPath(rawField string) ProbeStatusResponse_FieldPath {
	fp, err := ParseProbeStatusResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusResponse_FieldTerminalPath struct {
	selector ProbeStatusResponse_FieldPathSelector
}

var _ ProbeStatusResponse_FieldPath = (*ProbeStatusResponse_FieldTerminalPath)(nil)

func (fp *ProbeStatusResponse_FieldTerminalPath) Selector() ProbeStatusResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeStatusResponse
func (fp *ProbeStatusResponse_FieldTerminalPath) Get(source *ProbeStatusResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusResponse_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
			if source.LastHeartBeatTime != nil {
				values = append(values, source.LastHeartBeatTime)
			}
		case ProbeStatusResponse_FieldPathSelectorIspName:
			values = append(values, source.IspName)
		case ProbeStatusResponse_FieldPathSelectorOsVersion:
			values = append(values, source.OsVersion)
		case ProbeStatusResponse_FieldPathSelectorHardwareName:
			values = append(values, source.HardwareName)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeStatusResponse))
}

// GetSingle returns value pointed by specific field of from source ProbeStatusResponse
func (fp *ProbeStatusResponse_FieldTerminalPath) GetSingle(source *ProbeStatusResponse) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		res := source.GetLastHeartBeatTime()
		return res, res != nil
	case ProbeStatusResponse_FieldPathSelectorIspName:
		return source.GetIspName(), source != nil
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		return source.GetOsVersion(), source != nil
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		return source.GetHardwareName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
	}
}

func (fp *ProbeStatusResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeStatusResponse))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		return ""
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		return (*timestamp.Timestamp)(nil)
	case ProbeStatusResponse_FieldPathSelectorIspName:
		return ""
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		return ""
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
	}
}

func (fp *ProbeStatusResponse_FieldTerminalPath) ClearValue(item *ProbeStatusResponse) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusResponse_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
			item.LastHeartBeatTime = nil
		case ProbeStatusResponse_FieldPathSelectorIspName:
			item.IspName = ""
		case ProbeStatusResponse_FieldPathSelectorOsVersion:
			item.OsVersion = ""
		case ProbeStatusResponse_FieldPathSelectorHardwareName:
			item.HardwareName = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeStatusResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusResponse_FieldPathSelectorSerialNumber ||
		fp.selector == ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime ||
		fp.selector == ProbeStatusResponse_FieldPathSelectorIspName ||
		fp.selector == ProbeStatusResponse_FieldPathSelectorOsVersion ||
		fp.selector == ProbeStatusResponse_FieldPathSelectorHardwareName
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusResponse_FieldPathValue {
	switch fp.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		return &ProbeStatusResponse_FieldTerminalPathValue{ProbeStatusResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		return &ProbeStatusResponse_FieldTerminalPathValue{ProbeStatusResponse_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case ProbeStatusResponse_FieldPathSelectorIspName:
		return &ProbeStatusResponse_FieldTerminalPathValue{ProbeStatusResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		return &ProbeStatusResponse_FieldTerminalPathValue{ProbeStatusResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		return &ProbeStatusResponse_FieldTerminalPathValue{ProbeStatusResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
	}
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusResponse_FieldPathArrayOfValues {
	fpaov := &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		return &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		return &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case ProbeStatusResponse_FieldPathSelectorIspName:
		return &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		return &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		return &ProbeStatusResponse_FieldTerminalPathArrayOfValues{ProbeStatusResponse_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fp.selector))
	}
}

func (fp *ProbeStatusResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusResponse_FieldPathValue allows storing values for ProbeStatusResponse fields according to their type
type ProbeStatusResponse_FieldPathValue interface {
	ProbeStatusResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeStatusResponse)
	CompareWith(*ProbeStatusResponse) (cmp int, comparable bool)
}

func ParseProbeStatusResponse_FieldPathValue(pathStr, valueStr string) (ProbeStatusResponse_FieldPathValue, error) {
	fp, err := ParseProbeStatusResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusResponse_FieldPathValue), nil
}

func MustParseProbeStatusResponse_FieldPathValue(pathStr, valueStr string) ProbeStatusResponse_FieldPathValue {
	fpv, err := ParseProbeStatusResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusResponse_FieldTerminalPathValue struct {
	ProbeStatusResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusResponse_FieldPathValue = (*ProbeStatusResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeStatusResponse' as interface{}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) AsLastHeartBeatTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) AsIspNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) AsOsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) AsHardwareNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProbeStatusResponse
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) SetTo(target **ProbeStatusResponse) {
	if *target == nil {
		*target = new(ProbeStatusResponse)
	}
	switch fpv.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		(*target).LastHeartBeatTime = fpv.value.(*timestamp.Timestamp)
	case ProbeStatusResponse_FieldPathSelectorIspName:
		(*target).IspName = fpv.value.(string)
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		(*target).OsVersion = fpv.value.(string)
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		(*target).HardwareName = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeStatusResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusResponse_FieldTerminalPathValue' with the value under path in 'ProbeStatusResponse'.
func (fpv *ProbeStatusResponse_FieldTerminalPathValue) CompareWith(source *ProbeStatusResponse) (int, bool) {
	switch fpv.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastHeartBeatTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusResponse_FieldPathSelectorIspName:
		leftValue := fpv.value.(string)
		rightValue := source.GetIspName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		leftValue := fpv.value.(string)
		rightValue := source.GetHardwareName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeStatusResponse: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeStatusResponse))
}

// ProbeStatusResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeStatusResponse according to their type
// Present only for array (repeated) types.
type ProbeStatusResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusResponse_FieldPath
	ContainsValue(*ProbeStatusResponse) bool
}

// ParseProbeStatusResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusResponse_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusResponse_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusResponse_FieldTerminalPathArrayItemValue struct {
	ProbeStatusResponse_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusResponse_FieldPathArrayItemValue = (*ProbeStatusResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeStatusResponse as interface{}
func (fpaiv *ProbeStatusResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeStatusResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeStatusResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeStatusResponse'
func (fpaiv *ProbeStatusResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeStatusResponse) bool {
	slice := fpaiv.ProbeStatusResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusResponse_FieldPathArrayOfValues allows storing slice of values for ProbeStatusResponse fields according to their type
type ProbeStatusResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusResponse_FieldPath
}

func ParseProbeStatusResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeStatusResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusResponse_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusResponse_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusResponse_FieldTerminalPathArrayOfValues struct {
	ProbeStatusResponse_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusResponse_FieldPathArrayOfValues = (*ProbeStatusResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusResponse_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusResponse_FieldPathSelectorLastHeartBeatTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case ProbeStatusResponse_FieldPathSelectorIspName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusResponse_FieldPathSelectorOsVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusResponse_FieldPathSelectorHardwareName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) AsLastHeartBeatTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) AsIspNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) AsOsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusResponse_FieldTerminalPathArrayOfValues) AsHardwareNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
