// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
)

func (o *SoftwareVersion) GotenObjectExt() {}

func (o *SoftwareVersion) MakeFullFieldMask() *SoftwareVersion_FieldMask {
	return FullSoftwareVersion_FieldMask()
}

func (o *SoftwareVersion) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSoftwareVersion_FieldMask()
}

func (o *SoftwareVersion) MakeDiffFieldMask(other *SoftwareVersion) *SoftwareVersion_FieldMask {
	if o == nil && other == nil {
		return &SoftwareVersion_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSoftwareVersion_FieldMask()
	}

	res := &SoftwareVersion_FieldMask{}
	if o.GetVersion() != other.GetVersion() {
		res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorVersion})
	}
	if o.GetCommitId() != other.GetCommitId() {
		res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorCommitId})
	}
	if o.GetBuildDate() != other.GetBuildDate() {
		res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorBuildDate})
	}
	return res
}

func (o *SoftwareVersion) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SoftwareVersion))
}

func (o *SoftwareVersion) Clone() *SoftwareVersion {
	if o == nil {
		return nil
	}
	result := &SoftwareVersion{}
	result.Version = o.Version
	result.CommitId = o.CommitId
	result.BuildDate = o.BuildDate
	return result
}

func (o *SoftwareVersion) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SoftwareVersion) Merge(source *SoftwareVersion) {
	o.Version = source.GetVersion()
	o.CommitId = source.GetCommitId()
	o.BuildDate = source.GetBuildDate()
}

func (o *SoftwareVersion) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SoftwareVersion))
}

func (o *ContactInformation) GotenObjectExt() {}

func (o *ContactInformation) MakeFullFieldMask() *ContactInformation_FieldMask {
	return FullContactInformation_FieldMask()
}

func (o *ContactInformation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullContactInformation_FieldMask()
}

func (o *ContactInformation) MakeDiffFieldMask(other *ContactInformation) *ContactInformation_FieldMask {
	if o == nil && other == nil {
		return &ContactInformation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullContactInformation_FieldMask()
	}

	res := &ContactInformation_FieldMask{}
	if o.GetFullName() != other.GetFullName() {
		res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorFullName})
	}
	if o.GetEmail() != other.GetEmail() {
		res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorEmail})
	}

	if len(o.GetPhones()) == len(other.GetPhones()) {
		for i, lValue := range o.GetPhones() {
			rValue := other.GetPhones()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorPhones})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorPhones})
	}
	return res
}

func (o *ContactInformation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ContactInformation))
}

func (o *ContactInformation) Clone() *ContactInformation {
	if o == nil {
		return nil
	}
	result := &ContactInformation{}
	result.FullName = o.FullName
	result.Email = o.Email
	result.Phones = make([]*ContactInformation_PhoneNumber, len(o.Phones))
	for i, sourceValue := range o.Phones {
		result.Phones[i] = sourceValue.Clone()
	}
	return result
}

func (o *ContactInformation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ContactInformation) Merge(source *ContactInformation) {
	o.FullName = source.GetFullName()
	o.Email = source.GetEmail()
	for _, sourceValue := range source.GetPhones() {
		exists := false
		for _, currentValue := range o.Phones {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *ContactInformation_PhoneNumber
			if sourceValue != nil {
				newDstElement = new(ContactInformation_PhoneNumber)
				newDstElement.Merge(sourceValue)
			}
			o.Phones = append(o.Phones, newDstElement)
		}
	}

}

func (o *ContactInformation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ContactInformation))
}

func (o *ContactInformation_PhoneNumber) GotenObjectExt() {}

func (o *ContactInformation_PhoneNumber) MakeFullFieldMask() *ContactInformation_PhoneNumber_FieldMask {
	return FullContactInformation_PhoneNumber_FieldMask()
}

func (o *ContactInformation_PhoneNumber) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullContactInformation_PhoneNumber_FieldMask()
}

func (o *ContactInformation_PhoneNumber) MakeDiffFieldMask(other *ContactInformation_PhoneNumber) *ContactInformation_PhoneNumber_FieldMask {
	if o == nil && other == nil {
		return &ContactInformation_PhoneNumber_FieldMask{}
	}
	if o == nil || other == nil {
		return FullContactInformation_PhoneNumber_FieldMask()
	}

	res := &ContactInformation_PhoneNumber_FieldMask{}
	if o.GetNumber() != other.GetNumber() {
		res.Paths = append(res.Paths, &ContactInformationPhoneNumber_FieldTerminalPath{selector: ContactInformationPhoneNumber_FieldPathSelectorNumber})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &ContactInformationPhoneNumber_FieldTerminalPath{selector: ContactInformationPhoneNumber_FieldPathSelectorType})
	}
	return res
}

func (o *ContactInformation_PhoneNumber) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ContactInformation_PhoneNumber))
}

func (o *ContactInformation_PhoneNumber) Clone() *ContactInformation_PhoneNumber {
	if o == nil {
		return nil
	}
	result := &ContactInformation_PhoneNumber{}
	result.Number = o.Number
	result.Type = o.Type
	return result
}

func (o *ContactInformation_PhoneNumber) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ContactInformation_PhoneNumber) Merge(source *ContactInformation_PhoneNumber) {
	o.Number = source.GetNumber()
	o.Type = source.GetType()
}

func (o *ContactInformation_PhoneNumber) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ContactInformation_PhoneNumber))
}

func (o *Address) GotenObjectExt() {}

func (o *Address) MakeFullFieldMask() *Address_FieldMask {
	return FullAddress_FieldMask()
}

func (o *Address) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAddress_FieldMask()
}

func (o *Address) MakeDiffFieldMask(other *Address) *Address_FieldMask {
	if o == nil && other == nil {
		return &Address_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAddress_FieldMask()
	}

	res := &Address_FieldMask{}
	if o.GetPostalCode() != other.GetPostalCode() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorPostalCode})
	}
	if o.GetCountryCode() != other.GetCountryCode() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorCountryCode})
	}
	if o.GetContinent() != other.GetContinent() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorContinent})
	}
	if o.GetCountry() != other.GetCountry() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorCountry})
	}
	if o.GetAdminArea1() != other.GetAdminArea1() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea1})
	}
	if o.GetAdminArea2() != other.GetAdminArea2() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea2})
	}
	if o.GetAdminArea3() != other.GetAdminArea3() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea3})
	}
	if o.GetAdminArea4() != other.GetAdminArea4() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea4})
	}
	if o.GetStreetAddress() != other.GetStreetAddress() {
		res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorStreetAddress})
	}
	return res
}

func (o *Address) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Address))
}

func (o *Address) Clone() *Address {
	if o == nil {
		return nil
	}
	result := &Address{}
	result.PostalCode = o.PostalCode
	result.CountryCode = o.CountryCode
	result.Continent = o.Continent
	result.Country = o.Country
	result.AdminArea1 = o.AdminArea1
	result.AdminArea2 = o.AdminArea2
	result.AdminArea3 = o.AdminArea3
	result.AdminArea4 = o.AdminArea4
	result.StreetAddress = o.StreetAddress
	return result
}

func (o *Address) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Address) Merge(source *Address) {
	o.PostalCode = source.GetPostalCode()
	o.CountryCode = source.GetCountryCode()
	o.Continent = source.GetContinent()
	o.Country = source.GetCountry()
	o.AdminArea1 = source.GetAdminArea1()
	o.AdminArea2 = source.GetAdminArea2()
	o.AdminArea3 = source.GetAdminArea3()
	o.AdminArea4 = source.GetAdminArea4()
	o.StreetAddress = source.GetStreetAddress()
}

func (o *Address) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Address))
}

func (o *Location) GotenObjectExt() {}

func (o *Location) MakeFullFieldMask() *Location_FieldMask {
	return FullLocation_FieldMask()
}

func (o *Location) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLocation_FieldMask()
}

func (o *Location) MakeDiffFieldMask(other *Location) *Location_FieldMask {
	if o == nil && other == nil {
		return &Location_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLocation_FieldMask()
	}

	res := &Location_FieldMask{}
	{
		subMask := o.GetAddress().MakeDiffFieldMask(other.GetAddress())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAddress})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Location_FieldSubPath{selector: Location_FieldPathSelectorAddress, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAdminHierarchy().MakeDiffFieldMask(other.GetAdminHierarchy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAdminHierarchy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Location_FieldSubPath{selector: Location_FieldPathSelectorAdminHierarchy, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetCoordinates(), other.GetCoordinates()) {
		res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorCoordinates})
	}
	if o.GetAccuracy() != other.GetAccuracy() {
		res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAccuracy})
	}
	return res
}

func (o *Location) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Location))
}

func (o *Location) Clone() *Location {
	if o == nil {
		return nil
	}
	result := &Location{}
	result.Address = o.Address.Clone()
	result.AdminHierarchy = o.AdminHierarchy.Clone()
	result.Coordinates = proto.Clone(o.Coordinates).(*latlng.LatLng)
	result.Accuracy = o.Accuracy
	return result
}

func (o *Location) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Location) Merge(source *Location) {
	if source.GetAddress() != nil {
		if o.Address == nil {
			o.Address = new(Address)
		}
		o.Address.Merge(source.GetAddress())
	}
	if source.GetAdminHierarchy() != nil {
		if o.AdminHierarchy == nil {
			o.AdminHierarchy = new(admin_area.AdminHierarchy)
		}
		o.AdminHierarchy.Merge(source.GetAdminHierarchy())
	}
	if source.GetCoordinates() != nil {
		if o.Coordinates == nil {
			o.Coordinates = new(latlng.LatLng)
		}
		proto.Merge(o.Coordinates, source.GetCoordinates())
	}
	o.Accuracy = source.GetAccuracy()
}

func (o *Location) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Location))
}

func (o *ASInfo) GotenObjectExt() {}

func (o *ASInfo) MakeFullFieldMask() *ASInfo_FieldMask {
	return FullASInfo_FieldMask()
}

func (o *ASInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullASInfo_FieldMask()
}

func (o *ASInfo) MakeDiffFieldMask(other *ASInfo) *ASInfo_FieldMask {
	if o == nil && other == nil {
		return &ASInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullASInfo_FieldMask()
	}

	res := &ASInfo_FieldMask{}
	if o.GetAsn() != other.GetAsn() {
		res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorAsn})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorName})
	}
	if o.GetDomain() != other.GetDomain() {
		res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorDomain})
	}

	if len(o.GetRoutes()) == len(other.GetRoutes()) {
		for i, lValue := range o.GetRoutes() {
			rValue := other.GetRoutes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorRoutes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorRoutes})
	}
	if o.GetAsnType() != other.GetAsnType() {
		res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorAsnType})
	}
	return res
}

func (o *ASInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ASInfo))
}

func (o *ASInfo) Clone() *ASInfo {
	if o == nil {
		return nil
	}
	result := &ASInfo{}
	result.Asn = o.Asn
	result.Name = o.Name
	result.Domain = o.Domain
	result.Routes = make([]string, len(o.Routes))
	for i, sourceValue := range o.Routes {
		result.Routes[i] = sourceValue
	}
	result.AsnType = o.AsnType
	return result
}

func (o *ASInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ASInfo) Merge(source *ASInfo) {
	o.Asn = source.GetAsn()
	o.Name = source.GetName()
	o.Domain = source.GetDomain()
	for _, sourceValue := range source.GetRoutes() {
		exists := false
		for _, currentValue := range o.Routes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Routes = append(o.Routes, newDstElement)
		}
	}

	o.AsnType = source.GetAsnType()
}

func (o *ASInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ASInfo))
}

func (o *Carrier) GotenObjectExt() {}

func (o *Carrier) MakeFullFieldMask() *Carrier_FieldMask {
	return FullCarrier_FieldMask()
}

func (o *Carrier) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCarrier_FieldMask()
}

func (o *Carrier) MakeDiffFieldMask(other *Carrier) *Carrier_FieldMask {
	if o == nil && other == nil {
		return &Carrier_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCarrier_FieldMask()
	}

	res := &Carrier_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorName})
	}
	if o.GetMobileCountryCode() != other.GetMobileCountryCode() {
		res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorMobileCountryCode})
	}
	if o.GetMobileNetworkCode() != other.GetMobileNetworkCode() {
		res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorMobileNetworkCode})
	}
	if o.GetLocationAreaCode() != other.GetLocationAreaCode() {
		res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorLocationAreaCode})
	}
	return res
}

func (o *Carrier) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Carrier))
}

func (o *Carrier) Clone() *Carrier {
	if o == nil {
		return nil
	}
	result := &Carrier{}
	result.Name = o.Name
	result.MobileCountryCode = o.MobileCountryCode
	result.MobileNetworkCode = o.MobileNetworkCode
	result.LocationAreaCode = o.LocationAreaCode
	return result
}

func (o *Carrier) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Carrier) Merge(source *Carrier) {
	o.Name = source.GetName()
	o.MobileCountryCode = source.GetMobileCountryCode()
	o.MobileNetworkCode = source.GetMobileNetworkCode()
	o.LocationAreaCode = source.GetLocationAreaCode()
}

func (o *Carrier) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Carrier))
}

func (o *LocationDiscoverySpec) GotenObjectExt() {}

func (o *LocationDiscoverySpec) MakeFullFieldMask() *LocationDiscoverySpec_FieldMask {
	return FullLocationDiscoverySpec_FieldMask()
}

func (o *LocationDiscoverySpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLocationDiscoverySpec_FieldMask()
}

func (o *LocationDiscoverySpec) MakeDiffFieldMask(other *LocationDiscoverySpec) *LocationDiscoverySpec_FieldMask {
	if o == nil && other == nil {
		return &LocationDiscoverySpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLocationDiscoverySpec_FieldMask()
	}

	res := &LocationDiscoverySpec_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &LocationDiscoverySpec_FieldTerminalPath{selector: LocationDiscoverySpec_FieldPathSelectorType})
	}
	if o.GetRequiredAccuracy() != other.GetRequiredAccuracy() {
		res.Paths = append(res.Paths, &LocationDiscoverySpec_FieldTerminalPath{selector: LocationDiscoverySpec_FieldPathSelectorRequiredAccuracy})
	}
	return res
}

func (o *LocationDiscoverySpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LocationDiscoverySpec))
}

func (o *LocationDiscoverySpec) Clone() *LocationDiscoverySpec {
	if o == nil {
		return nil
	}
	result := &LocationDiscoverySpec{}
	result.Type = o.Type
	result.RequiredAccuracy = o.RequiredAccuracy
	return result
}

func (o *LocationDiscoverySpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LocationDiscoverySpec) Merge(source *LocationDiscoverySpec) {
	o.Type = source.GetType()
	o.RequiredAccuracy = source.GetRequiredAccuracy()
}

func (o *LocationDiscoverySpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LocationDiscoverySpec))
}

func (o *ProbingConstraint) GotenObjectExt() {}

func (o *ProbingConstraint) MakeFullFieldMask() *ProbingConstraint_FieldMask {
	return FullProbingConstraint_FieldMask()
}

func (o *ProbingConstraint) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConstraint_FieldMask()
}

func (o *ProbingConstraint) MakeDiffFieldMask(other *ProbingConstraint) *ProbingConstraint_FieldMask {
	if o == nil && other == nil {
		return &ProbingConstraint_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConstraint_FieldMask()
	}

	res := &ProbingConstraint_FieldMask{}
	{
		subMask := o.GetMaxSessionsPerAgentLocation().MakeDiffFieldMask(other.GetMaxSessionsPerAgentLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConstraint_FieldTerminalPath{selector: ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConstraint_FieldSubPath{selector: ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation, subPath: subpath})
			}
		}
	}
	if o.GetMaxSessionsPerAgentPublicIpAddress() != other.GetMaxSessionsPerAgentPublicIpAddress() {
		res.Paths = append(res.Paths, &ProbingConstraint_FieldTerminalPath{selector: ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentPublicIpAddress})
	}
	return res
}

func (o *ProbingConstraint) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConstraint))
}

func (o *ProbingConstraint) Clone() *ProbingConstraint {
	if o == nil {
		return nil
	}
	result := &ProbingConstraint{}
	result.MaxSessionsPerAgentLocation = o.MaxSessionsPerAgentLocation.Clone()
	result.MaxSessionsPerAgentPublicIpAddress = o.MaxSessionsPerAgentPublicIpAddress
	return result
}

func (o *ProbingConstraint) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConstraint) Merge(source *ProbingConstraint) {
	if source.GetMaxSessionsPerAgentLocation() != nil {
		if o.MaxSessionsPerAgentLocation == nil {
			o.MaxSessionsPerAgentLocation = new(ProbingConstraint_AdminHierachy)
		}
		o.MaxSessionsPerAgentLocation.Merge(source.GetMaxSessionsPerAgentLocation())
	}
	o.MaxSessionsPerAgentPublicIpAddress = source.GetMaxSessionsPerAgentPublicIpAddress()
}

func (o *ProbingConstraint) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConstraint))
}

func (o *ProbingConstraint_AdminHierachy) GotenObjectExt() {}

func (o *ProbingConstraint_AdminHierachy) MakeFullFieldMask() *ProbingConstraint_AdminHierachy_FieldMask {
	return FullProbingConstraint_AdminHierachy_FieldMask()
}

func (o *ProbingConstraint_AdminHierachy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConstraint_AdminHierachy_FieldMask()
}

func (o *ProbingConstraint_AdminHierachy) MakeDiffFieldMask(other *ProbingConstraint_AdminHierachy) *ProbingConstraint_AdminHierachy_FieldMask {
	if o == nil && other == nil {
		return &ProbingConstraint_AdminHierachy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConstraint_AdminHierachy_FieldMask()
	}

	res := &ProbingConstraint_AdminHierachy_FieldMask{}
	if o.GetCountry() != other.GetCountry() {
		res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorCountry})
	}
	if o.GetAdmin1() != other.GetAdmin1() {
		res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin1})
	}
	if o.GetAdmin2() != other.GetAdmin2() {
		res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin2})
	}
	if o.GetAdmin3() != other.GetAdmin3() {
		res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin3})
	}
	if o.GetAdmin4() != other.GetAdmin4() {
		res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin4})
	}
	return res
}

func (o *ProbingConstraint_AdminHierachy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConstraint_AdminHierachy))
}

func (o *ProbingConstraint_AdminHierachy) Clone() *ProbingConstraint_AdminHierachy {
	if o == nil {
		return nil
	}
	result := &ProbingConstraint_AdminHierachy{}
	result.Country = o.Country
	result.Admin1 = o.Admin1
	result.Admin2 = o.Admin2
	result.Admin3 = o.Admin3
	result.Admin4 = o.Admin4
	return result
}

func (o *ProbingConstraint_AdminHierachy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConstraint_AdminHierachy) Merge(source *ProbingConstraint_AdminHierachy) {
	o.Country = source.GetCountry()
	o.Admin1 = source.GetAdmin1()
	o.Admin2 = source.GetAdmin2()
	o.Admin3 = source.GetAdmin3()
	o.Admin4 = source.GetAdmin4()
}

func (o *ProbingConstraint_AdminHierachy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConstraint_AdminHierachy))
}

func (o *PathProbe) GotenObjectExt() {}

func (o *PathProbe) MakeFullFieldMask() *PathProbe_FieldMask {
	return FullPathProbe_FieldMask()
}

func (o *PathProbe) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPathProbe_FieldMask()
}

func (o *PathProbe) MakeDiffFieldMask(other *PathProbe) *PathProbe_FieldMask {
	if o == nil && other == nil {
		return &PathProbe_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPathProbe_FieldMask()
	}

	res := &PathProbe_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorEnabled})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorMode})
	}
	if !proto.Equal(o.GetInterval(), other.GetInterval()) {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorInterval})
	}
	if o.GetIntervalSec() != other.GetIntervalSec() {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorIntervalSec})
	}
	if !proto.Equal(o.GetAttempts(), other.GetAttempts()) {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorAttempts})
	}
	if !proto.Equal(o.GetMaxTtl(), other.GetMaxTtl()) {
		res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorMaxTtl})
	}
	return res
}

func (o *PathProbe) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PathProbe))
}

func (o *PathProbe) Clone() *PathProbe {
	if o == nil {
		return nil
	}
	result := &PathProbe{}
	result.Enabled = o.Enabled
	result.Mode = o.Mode
	result.Interval = proto.Clone(o.Interval).(*duration.Duration)
	result.IntervalSec = o.IntervalSec
	result.Attempts = proto.Clone(o.Attempts).(*wrappers.UInt32Value)
	result.MaxTtl = proto.Clone(o.MaxTtl).(*wrappers.UInt32Value)
	return result
}

func (o *PathProbe) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PathProbe) Merge(source *PathProbe) {
	o.Enabled = source.GetEnabled()
	o.Mode = source.GetMode()
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(duration.Duration)
		}
		proto.Merge(o.Interval, source.GetInterval())
	}
	o.IntervalSec = source.GetIntervalSec()
	if source.GetAttempts() != nil {
		if o.Attempts == nil {
			o.Attempts = new(wrappers.UInt32Value)
		}
		proto.Merge(o.Attempts, source.GetAttempts())
	}
	if source.GetMaxTtl() != nil {
		if o.MaxTtl == nil {
			o.MaxTtl = new(wrappers.UInt32Value)
		}
		proto.Merge(o.MaxTtl, source.GetMaxTtl())
	}
}

func (o *PathProbe) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PathProbe))
}

func (o *ProbingSettings) GotenObjectExt() {}

func (o *ProbingSettings) MakeFullFieldMask() *ProbingSettings_FieldMask {
	return FullProbingSettings_FieldMask()
}

func (o *ProbingSettings) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingSettings_FieldMask()
}

func (o *ProbingSettings) MakeDiffFieldMask(other *ProbingSettings) *ProbingSettings_FieldMask {
	if o == nil && other == nil {
		return &ProbingSettings_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingSettings_FieldMask()
	}

	res := &ProbingSettings_FieldMask{}
	if !proto.Equal(o.GetInterval(), other.GetInterval()) {
		res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorInterval})
	}
	if !proto.Equal(o.GetTos(), other.GetTos()) {
		res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorTos})
	}
	if !proto.Equal(o.GetWindowSize(), other.GetWindowSize()) {
		res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorWindowSize})
	}
	{
		subMask := o.GetPathProbing().MakeDiffFieldMask(other.GetPathProbing())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorPathProbing})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingSettings_FieldSubPath{selector: ProbingSettings_FieldPathSelectorPathProbing, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpeeedtestSettings().MakeDiffFieldMask(other.GetSpeeedtestSettings())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorSpeeedtestSettings})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingSettings_FieldSubPath{selector: ProbingSettings_FieldPathSelectorSpeeedtestSettings, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetHttpProbingConfig().MakeDiffFieldMask(other.GetHttpProbingConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorHttpProbingConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingSettings_FieldSubPath{selector: ProbingSettings_FieldPathSelectorHttpProbingConfig, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetProxyConfiguration().MakeDiffFieldMask(other.GetProxyConfiguration())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorProxyConfiguration})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingSettings_FieldSubPath{selector: ProbingSettings_FieldPathSelectorProxyConfiguration, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProbingSettings) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingSettings))
}

func (o *ProbingSettings) Clone() *ProbingSettings {
	if o == nil {
		return nil
	}
	result := &ProbingSettings{}
	result.Interval = proto.Clone(o.Interval).(*duration.Duration)
	result.Tos = proto.Clone(o.Tos).(*wrappers.UInt32Value)
	result.WindowSize = proto.Clone(o.WindowSize).(*wrappers.UInt32Value)
	result.PathProbing = o.PathProbing.Clone()
	result.SpeeedtestSettings = o.SpeeedtestSettings.Clone()
	result.HttpProbingConfig = o.HttpProbingConfig.Clone()
	result.ProxyConfiguration = o.ProxyConfiguration.Clone()
	return result
}

func (o *ProbingSettings) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingSettings) Merge(source *ProbingSettings) {
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(duration.Duration)
		}
		proto.Merge(o.Interval, source.GetInterval())
	}
	if source.GetTos() != nil {
		if o.Tos == nil {
			o.Tos = new(wrappers.UInt32Value)
		}
		proto.Merge(o.Tos, source.GetTos())
	}
	if source.GetWindowSize() != nil {
		if o.WindowSize == nil {
			o.WindowSize = new(wrappers.UInt32Value)
		}
		proto.Merge(o.WindowSize, source.GetWindowSize())
	}
	if source.GetPathProbing() != nil {
		if o.PathProbing == nil {
			o.PathProbing = new(PathProbe)
		}
		o.PathProbing.Merge(source.GetPathProbing())
	}
	if source.GetSpeeedtestSettings() != nil {
		if o.SpeeedtestSettings == nil {
			o.SpeeedtestSettings = new(SpeedTestSettings)
		}
		o.SpeeedtestSettings.Merge(source.GetSpeeedtestSettings())
	}
	if source.GetHttpProbingConfig() != nil {
		if o.HttpProbingConfig == nil {
			o.HttpProbingConfig = new(HTTPProbingConfig)
		}
		o.HttpProbingConfig.Merge(source.GetHttpProbingConfig())
	}
	if source.GetProxyConfiguration() != nil {
		if o.ProxyConfiguration == nil {
			o.ProxyConfiguration = new(ProxyConfiguration)
		}
		o.ProxyConfiguration.Merge(source.GetProxyConfiguration())
	}
}

func (o *ProbingSettings) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingSettings))
}

func (o *ProxyConfiguration) GotenObjectExt() {}

func (o *ProxyConfiguration) MakeFullFieldMask() *ProxyConfiguration_FieldMask {
	return FullProxyConfiguration_FieldMask()
}

func (o *ProxyConfiguration) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProxyConfiguration_FieldMask()
}

func (o *ProxyConfiguration) MakeDiffFieldMask(other *ProxyConfiguration) *ProxyConfiguration_FieldMask {
	if o == nil && other == nil {
		return &ProxyConfiguration_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProxyConfiguration_FieldMask()
	}

	res := &ProxyConfiguration_FieldMask{}
	if o.GetProxySetting() != other.GetProxySetting() {
		res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorProxySetting})
	}
	if o.GetHttpProxy() != other.GetHttpProxy() {
		res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorHttpProxy})
	}
	if o.GetHttpsProxy() != other.GetHttpsProxy() {
		res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorHttpsProxy})
	}
	if o.GetNoProxy() != other.GetNoProxy() {
		res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorNoProxy})
	}
	return res
}

func (o *ProxyConfiguration) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProxyConfiguration))
}

func (o *ProxyConfiguration) Clone() *ProxyConfiguration {
	if o == nil {
		return nil
	}
	result := &ProxyConfiguration{}
	result.ProxySetting = o.ProxySetting
	result.HttpProxy = o.HttpProxy
	result.HttpsProxy = o.HttpsProxy
	result.NoProxy = o.NoProxy
	return result
}

func (o *ProxyConfiguration) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProxyConfiguration) Merge(source *ProxyConfiguration) {
	o.ProxySetting = source.GetProxySetting()
	o.HttpProxy = source.GetHttpProxy()
	o.HttpsProxy = source.GetHttpsProxy()
	o.NoProxy = source.GetNoProxy()
}

func (o *ProxyConfiguration) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProxyConfiguration))
}

func (o *WLAN) GotenObjectExt() {}

func (o *WLAN) MakeFullFieldMask() *WLAN_FieldMask {
	return FullWLAN_FieldMask()
}

func (o *WLAN) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWLAN_FieldMask()
}

func (o *WLAN) MakeDiffFieldMask(other *WLAN) *WLAN_FieldMask {
	if o == nil && other == nil {
		return &WLAN_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWLAN_FieldMask()
	}

	res := &WLAN_FieldMask{}
	if o.GetMac() != other.GetMac() {
		res.Paths = append(res.Paths, &WLAN_FieldTerminalPath{selector: WLAN_FieldPathSelectorMac})
	}
	if o.GetSignal() != other.GetSignal() {
		res.Paths = append(res.Paths, &WLAN_FieldTerminalPath{selector: WLAN_FieldPathSelectorSignal})
	}
	return res
}

func (o *WLAN) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WLAN))
}

func (o *WLAN) Clone() *WLAN {
	if o == nil {
		return nil
	}
	result := &WLAN{}
	result.Mac = o.Mac
	result.Signal = o.Signal
	return result
}

func (o *WLAN) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WLAN) Merge(source *WLAN) {
	o.Mac = source.GetMac()
	o.Signal = source.GetSignal()
}

func (o *WLAN) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WLAN))
}

func (o *SpeedTestSettings) GotenObjectExt() {}

func (o *SpeedTestSettings) MakeFullFieldMask() *SpeedTestSettings_FieldMask {
	return FullSpeedTestSettings_FieldMask()
}

func (o *SpeedTestSettings) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSpeedTestSettings_FieldMask()
}

func (o *SpeedTestSettings) MakeDiffFieldMask(other *SpeedTestSettings) *SpeedTestSettings_FieldMask {
	if o == nil && other == nil {
		return &SpeedTestSettings_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSpeedTestSettings_FieldMask()
	}

	res := &SpeedTestSettings_FieldMask{}
	if !proto.Equal(o.GetDuration(), other.GetDuration()) {
		res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorDuration})
	}
	if o.GetUseTls() != other.GetUseTls() {
		res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorUseTls})
	}
	if o.GetServerSelection() != other.GetServerSelection() {
		res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorServerSelection})
	}
	if o.GetTcpPort() != other.GetTcpPort() {
		res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorTcpPort})
	}
	if o.GetTlsPort() != other.GetTlsPort() {
		res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorTlsPort})
	}
	return res
}

func (o *SpeedTestSettings) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SpeedTestSettings))
}

func (o *SpeedTestSettings) Clone() *SpeedTestSettings {
	if o == nil {
		return nil
	}
	result := &SpeedTestSettings{}
	result.Duration = proto.Clone(o.Duration).(*duration.Duration)
	result.UseTls = o.UseTls
	result.ServerSelection = o.ServerSelection
	result.TcpPort = o.TcpPort
	result.TlsPort = o.TlsPort
	return result
}

func (o *SpeedTestSettings) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SpeedTestSettings) Merge(source *SpeedTestSettings) {
	if source.GetDuration() != nil {
		if o.Duration == nil {
			o.Duration = new(duration.Duration)
		}
		proto.Merge(o.Duration, source.GetDuration())
	}
	o.UseTls = source.GetUseTls()
	o.ServerSelection = source.GetServerSelection()
	o.TcpPort = source.GetTcpPort()
	o.TlsPort = source.GetTlsPort()
}

func (o *SpeedTestSettings) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SpeedTestSettings))
}

func (o *HTTPProbingConfig) GotenObjectExt() {}

func (o *HTTPProbingConfig) MakeFullFieldMask() *HTTPProbingConfig_FieldMask {
	return FullHTTPProbingConfig_FieldMask()
}

func (o *HTTPProbingConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHTTPProbingConfig_FieldMask()
}

func (o *HTTPProbingConfig) MakeDiffFieldMask(other *HTTPProbingConfig) *HTTPProbingConfig_FieldMask {
	if o == nil && other == nil {
		return &HTTPProbingConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHTTPProbingConfig_FieldMask()
	}

	res := &HTTPProbingConfig_FieldMask{}
	{
		subMask := o.GetHttpRequest().MakeDiffFieldMask(other.GetHttpRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &HTTPProbingConfig_FieldTerminalPath{selector: HTTPProbingConfig_FieldPathSelectorHttpRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &HTTPProbingConfig_FieldSubPath{selector: HTTPProbingConfig_FieldPathSelectorHttpRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAuthConfig().MakeDiffFieldMask(other.GetAuthConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &HTTPProbingConfig_FieldTerminalPath{selector: HTTPProbingConfig_FieldPathSelectorAuthConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &HTTPProbingConfig_FieldSubPath{selector: HTTPProbingConfig_FieldPathSelectorAuthConfig, subPath: subpath})
			}
		}
	}
	return res
}

func (o *HTTPProbingConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HTTPProbingConfig))
}

func (o *HTTPProbingConfig) Clone() *HTTPProbingConfig {
	if o == nil {
		return nil
	}
	result := &HTTPProbingConfig{}
	result.HttpRequest = o.HttpRequest.Clone()
	result.AuthConfig = o.AuthConfig.Clone()
	return result
}

func (o *HTTPProbingConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HTTPProbingConfig) Merge(source *HTTPProbingConfig) {
	if source.GetHttpRequest() != nil {
		if o.HttpRequest == nil {
			o.HttpRequest = new(HTTPProbingConfig_HTTPRequest)
		}
		o.HttpRequest.Merge(source.GetHttpRequest())
	}
	if source.GetAuthConfig() != nil {
		if o.AuthConfig == nil {
			o.AuthConfig = new(HTTPProbingConfig_HTTPAuth)
		}
		o.AuthConfig.Merge(source.GetAuthConfig())
	}
}

func (o *HTTPProbingConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HTTPProbingConfig))
}

func (o *HTTPProbingConfig_HTTPRequest) GotenObjectExt() {}

func (o *HTTPProbingConfig_HTTPRequest) MakeFullFieldMask() *HTTPProbingConfig_HTTPRequest_FieldMask {
	return FullHTTPProbingConfig_HTTPRequest_FieldMask()
}

func (o *HTTPProbingConfig_HTTPRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHTTPProbingConfig_HTTPRequest_FieldMask()
}

func (o *HTTPProbingConfig_HTTPRequest) MakeDiffFieldMask(other *HTTPProbingConfig_HTTPRequest) *HTTPProbingConfig_HTTPRequest_FieldMask {
	if o == nil && other == nil {
		return &HTTPProbingConfig_HTTPRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHTTPProbingConfig_HTTPRequest_FieldMask()
	}

	res := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	if o.GetUrl() != other.GetUrl() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorUrl})
	}

	if len(o.GetRequestHeaders()) == len(other.GetRequestHeaders()) {
		for i, lValue := range o.GetRequestHeaders() {
			rValue := other.GetRequestHeaders()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestHeaders})
	}
	if o.GetRequestMethod() != other.GetRequestMethod() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestMethod})
	}
	if o.GetExpectedResponseCode() != other.GetExpectedResponseCode() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorExpectedResponseCode})
	}
	if !proto.Equal(o.GetTimeout(), other.GetTimeout()) {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorTimeout})
	}
	if o.GetRequestBody() != other.GetRequestBody() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestBody})
	}
	if o.GetAuthenticationMethod() != other.GetAuthenticationMethod() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorAuthenticationMethod})
	}

	if len(o.GetUrlFormEncodedBody()) == len(other.GetUrlFormEncodedBody()) {
		for i, lValue := range o.GetUrlFormEncodedBody() {
			rValue := other.GetUrlFormEncodedBody()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorUrlFormEncodedBody})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorUrlFormEncodedBody})
	}
	return res
}

func (o *HTTPProbingConfig_HTTPRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HTTPProbingConfig_HTTPRequest))
}

func (o *HTTPProbingConfig_HTTPRequest) Clone() *HTTPProbingConfig_HTTPRequest {
	if o == nil {
		return nil
	}
	result := &HTTPProbingConfig_HTTPRequest{}
	result.Url = o.Url
	result.RequestHeaders = map[string]string{}
	for key, sourceValue := range o.RequestHeaders {
		result.RequestHeaders[key] = sourceValue
	}
	result.RequestMethod = o.RequestMethod
	result.ExpectedResponseCode = o.ExpectedResponseCode
	result.Timeout = proto.Clone(o.Timeout).(*duration.Duration)
	result.RequestBody = o.RequestBody
	result.AuthenticationMethod = o.AuthenticationMethod
	result.UrlFormEncodedBody = map[string]*HTTPProbingConfig_HTTPRequest_StringArray{}
	for key, sourceValue := range o.UrlFormEncodedBody {
		result.UrlFormEncodedBody[key] = sourceValue.Clone()
	}
	return result
}

func (o *HTTPProbingConfig_HTTPRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HTTPProbingConfig_HTTPRequest) Merge(source *HTTPProbingConfig_HTTPRequest) {
	o.Url = source.GetUrl()
	if source.GetRequestHeaders() != nil {
		if o.RequestHeaders == nil {
			o.RequestHeaders = make(map[string]string, len(source.GetRequestHeaders()))
		}
		for key, sourceValue := range source.GetRequestHeaders() {
			o.RequestHeaders[key] = sourceValue
		}
	}
	o.RequestMethod = source.GetRequestMethod()
	o.ExpectedResponseCode = source.GetExpectedResponseCode()
	if source.GetTimeout() != nil {
		if o.Timeout == nil {
			o.Timeout = new(duration.Duration)
		}
		proto.Merge(o.Timeout, source.GetTimeout())
	}
	o.RequestBody = source.GetRequestBody()
	o.AuthenticationMethod = source.GetAuthenticationMethod()
	if source.GetUrlFormEncodedBody() != nil {
		if o.UrlFormEncodedBody == nil {
			o.UrlFormEncodedBody = make(map[string]*HTTPProbingConfig_HTTPRequest_StringArray, len(source.GetUrlFormEncodedBody()))
		}
		for key, sourceValue := range source.GetUrlFormEncodedBody() {
			if sourceValue != nil {
				if o.UrlFormEncodedBody[key] == nil {
					o.UrlFormEncodedBody[key] = new(HTTPProbingConfig_HTTPRequest_StringArray)
				}
				o.UrlFormEncodedBody[key].Merge(sourceValue)
			}
		}
	}
}

func (o *HTTPProbingConfig_HTTPRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HTTPProbingConfig_HTTPRequest))
}

func (o *HTTPProbingConfig_HTTPAuth) GotenObjectExt() {}

func (o *HTTPProbingConfig_HTTPAuth) MakeFullFieldMask() *HTTPProbingConfig_HTTPAuth_FieldMask {
	return FullHTTPProbingConfig_HTTPAuth_FieldMask()
}

func (o *HTTPProbingConfig_HTTPAuth) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHTTPProbingConfig_HTTPAuth_FieldMask()
}

func (o *HTTPProbingConfig_HTTPAuth) MakeDiffFieldMask(other *HTTPProbingConfig_HTTPAuth) *HTTPProbingConfig_HTTPAuth_FieldMask {
	if o == nil && other == nil {
		return &HTTPProbingConfig_HTTPAuth_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHTTPProbingConfig_HTTPAuth_FieldMask()
	}

	res := &HTTPProbingConfig_HTTPAuth_FieldMask{}
	if o.GetUsername() != other.GetUsername() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorUsername})
	}
	if o.GetPassword() != other.GetPassword() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorPassword})
	}
	{
		subMask := o.GetTokenRequest().MakeDiffFieldMask(other.GetTokenRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldSubPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest, subPath: subpath})
			}
		}
	}
	if o.GetTokenResponseHeader() != other.GetTokenResponseHeader() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseHeader})
	}
	if o.GetTokenResponseBodyKey() != other.GetTokenResponseBodyKey() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyKey})
	}
	if o.GetRequestHeaderTokenKey() != other.GetRequestHeaderTokenKey() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorRequestHeaderTokenKey})
	}
	if o.GetTokenResponseBodyExpiryKey() != other.GetTokenResponseBodyExpiryKey() {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyExpiryKey})
	}
	return res
}

func (o *HTTPProbingConfig_HTTPAuth) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HTTPProbingConfig_HTTPAuth))
}

func (o *HTTPProbingConfig_HTTPAuth) Clone() *HTTPProbingConfig_HTTPAuth {
	if o == nil {
		return nil
	}
	result := &HTTPProbingConfig_HTTPAuth{}
	result.Username = o.Username
	result.Password = o.Password
	result.TokenRequest = o.TokenRequest.Clone()
	result.TokenResponseHeader = o.TokenResponseHeader
	result.TokenResponseBodyKey = o.TokenResponseBodyKey
	result.RequestHeaderTokenKey = o.RequestHeaderTokenKey
	result.TokenResponseBodyExpiryKey = o.TokenResponseBodyExpiryKey
	return result
}

func (o *HTTPProbingConfig_HTTPAuth) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HTTPProbingConfig_HTTPAuth) Merge(source *HTTPProbingConfig_HTTPAuth) {
	o.Username = source.GetUsername()
	o.Password = source.GetPassword()
	if source.GetTokenRequest() != nil {
		if o.TokenRequest == nil {
			o.TokenRequest = new(HTTPProbingConfig_HTTPRequest)
		}
		o.TokenRequest.Merge(source.GetTokenRequest())
	}
	o.TokenResponseHeader = source.GetTokenResponseHeader()
	o.TokenResponseBodyKey = source.GetTokenResponseBodyKey()
	o.RequestHeaderTokenKey = source.GetRequestHeaderTokenKey()
	o.TokenResponseBodyExpiryKey = source.GetTokenResponseBodyExpiryKey()
}

func (o *HTTPProbingConfig_HTTPAuth) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HTTPProbingConfig_HTTPAuth))
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) GotenObjectExt() {}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) MakeFullFieldMask() *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask {
	return FullHTTPProbingConfig_HTTPRequest_StringArray_FieldMask()
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHTTPProbingConfig_HTTPRequest_StringArray_FieldMask()
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) MakeDiffFieldMask(other *HTTPProbingConfig_HTTPRequest_StringArray) *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask {
	if o == nil && other == nil {
		return &HTTPProbingConfig_HTTPRequest_StringArray_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHTTPProbingConfig_HTTPRequest_StringArray_FieldMask()
	}

	res := &HTTPProbingConfig_HTTPRequest_StringArray_FieldMask{}

	if len(o.GetValue()) == len(other.GetValue()) {
		for i, lValue := range o.GetValue() {
			rValue := other.GetValue()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequestStringArray_FieldPathSelectorValue})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequestStringArray_FieldPathSelectorValue})
	}
	return res
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HTTPProbingConfig_HTTPRequest_StringArray))
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) Clone() *HTTPProbingConfig_HTTPRequest_StringArray {
	if o == nil {
		return nil
	}
	result := &HTTPProbingConfig_HTTPRequest_StringArray{}
	result.Value = make([]string, len(o.Value))
	for i, sourceValue := range o.Value {
		result.Value[i] = sourceValue
	}
	return result
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) Merge(source *HTTPProbingConfig_HTTPRequest_StringArray) {
	for _, sourceValue := range source.GetValue() {
		exists := false
		for _, currentValue := range o.Value {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Value = append(o.Value, newDstElement)
		}
	}

}

func (o *HTTPProbingConfig_HTTPRequest_StringArray) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HTTPProbingConfig_HTTPRequest_StringArray))
}
